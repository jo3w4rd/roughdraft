{
  "api/Global Namespace.AuthoringWithMaterial.html": {
    "href": "api/Global Namespace.AuthoringWithMaterial.html",
    "title": "Class AuthoringWithMaterial | Entities | 0.17.0-preview.18",
    "keywords": "Class AuthoringWithMaterial Inheritance Object Object Component Behaviour MonoBehaviour AuthoringWithMaterial Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(String, Single) MonoBehaviour.InvokeRepeating(String, Single, Single) MonoBehaviour.CancelInvoke(String) MonoBehaviour.IsInvoking(String) MonoBehaviour.StartCoroutine(String) MonoBehaviour.StartCoroutine(String, Object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(String) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(Object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, Component) Component.TryGetComponent<T>(T) Component.GetComponent(String) Component.GetComponentInChildren(Type, Boolean) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(Boolean) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, Boolean) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(Boolean) Component.GetComponentsInChildren<T>(Boolean, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, Boolean) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(Boolean) Component.GetComponentsInParent<T>(Boolean, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(String) Component.SendMessageUpwards(String, Object, SendMessageOptions) Component.SendMessageUpwards(String, Object) Component.SendMessageUpwards(String) Component.SendMessageUpwards(String, SendMessageOptions) Component.SendMessage(String, Object) Component.SendMessage(String) Component.SendMessage(String, Object, SendMessageOptions) Component.SendMessage(String, SendMessageOptions) Component.BroadcastMessage(String, Object, SendMessageOptions) Component.BroadcastMessage(String, Object) Component.BroadcastMessage(String) Component.BroadcastMessage(String, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) Object.Destroy(Object) Object.DestroyImmediate(Object, Boolean) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, Boolean) Object.DontDestroyOnLoad(Object) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectOfType(Type) Object.FindObjectOfType(Type, Boolean) Object.ToString() Object.name Object.hideFlags Namespace : Global Namespace <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [DisallowMultipleComponent] public class AuthoringWithMaterial : MonoBehaviour, IConvertGameObjectToEntity Fields Name Description material Methods Name Description Convert(Entity, EntityManager, GameObjectConversionSystem)"
  },
  "api/Global Namespace.CompanionGameObjectUpdateTransformSystem.html": {
    "href": "api/Global Namespace.CompanionGameObjectUpdateTransformSystem.html",
    "title": "Class CompanionGameObjectUpdateTransformSystem | Entities | 0.17.0-preview.18",
    "keywords": "Class CompanionGameObjectUpdateTransformSystem Inheritance Object ComponentSystemBase JobComponentSystem CompanionGameObjectUpdateTransformSystem Inherited Members JobComponentSystem.Entities JobComponentSystem.Job JobComponentSystem.Update() JobComponentSystem.OnUpdate(JobHandle) ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnCreate() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.ExecutingSystemType ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetComponentTypeHandle<T>(Boolean) ComponentSystemBase.GetDynamicComponentTypeHandle(ComponentType) ComponentSystemBase.GetBufferTypeHandle<T>(Boolean) ComponentSystemBase.GetSharedComponentTypeHandle<T>() ComponentSystemBase.GetEntityTypeHandle() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.TryGetSingleton<T>(T) ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.TryGetSingletonEntity<T>(Entity) ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Global Namespace <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [ExecuteAlways] [UpdateAfter(typeof(TransformSystemGroup))] public class CompanionGameObjectUpdateTransformSystem : JobComponentSystem Methods Name Description OnCreate() OnDestroy() OnUpdate(JobHandle) Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Global Namespace.GameObjectAfterConversionGroup.html": {
    "href": "api/Global Namespace.GameObjectAfterConversionGroup.html",
    "title": "Class GameObjectAfterConversionGroup | Entities | 0.17.0-preview.18",
    "keywords": "Class GameObjectAfterConversionGroup Inheritance Object ComponentSystemBase ComponentSystem ComponentSystemGroup GameObjectAfterConversionGroup Inherited Members ComponentSystemGroup.Systems ComponentSystemGroup.OnCreate() ComponentSystemGroup.OnDestroy() ComponentSystemGroup.AddSystemToUpdateList(ComponentSystemBase) ComponentSystemGroup.RemoveSystemFromUpdateList(ComponentSystemBase) ComponentSystemGroup.SortSystems() ComponentSystemGroup.OnStopRunning() ComponentSystemGroup.FixedRateManager ComponentSystemGroup.OnUpdate() ComponentSystem.PostUpdateCommands ComponentSystem.InitEntityQueryCache(Int32) ComponentSystem.Entities ComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnStartRunning() ComponentSystemBase.ExecutingSystemType ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetComponentTypeHandle<T>(Boolean) ComponentSystemBase.GetDynamicComponentTypeHandle(ComponentType) ComponentSystemBase.GetBufferTypeHandle<T>(Boolean) ComponentSystemBase.GetSharedComponentTypeHandle<T>() ComponentSystemBase.GetEntityTypeHandle() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.TryGetSingleton<T>(T) ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.TryGetSingletonEntity<T>(Entity) ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Global Namespace <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [WorldSystemFilter(WorldSystemFilterFlags.GameObjectConversion | WorldSystemFilterFlags.HybridGameObjectConversion | WorldSystemFilterFlags.DotsRuntimeGameObjectConversion)] public class GameObjectAfterConversionGroup : ComponentSystemGroup Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Global Namespace.GameObjectBeforeConversionGroup.html": {
    "href": "api/Global Namespace.GameObjectBeforeConversionGroup.html",
    "title": "Class GameObjectBeforeConversionGroup | Entities | 0.17.0-preview.18",
    "keywords": "Class GameObjectBeforeConversionGroup Inheritance Object ComponentSystemBase ComponentSystem ComponentSystemGroup GameObjectBeforeConversionGroup Inherited Members ComponentSystemGroup.Systems ComponentSystemGroup.OnCreate() ComponentSystemGroup.OnDestroy() ComponentSystemGroup.AddSystemToUpdateList(ComponentSystemBase) ComponentSystemGroup.RemoveSystemFromUpdateList(ComponentSystemBase) ComponentSystemGroup.SortSystems() ComponentSystemGroup.OnStopRunning() ComponentSystemGroup.FixedRateManager ComponentSystemGroup.OnUpdate() ComponentSystem.PostUpdateCommands ComponentSystem.InitEntityQueryCache(Int32) ComponentSystem.Entities ComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnStartRunning() ComponentSystemBase.ExecutingSystemType ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetComponentTypeHandle<T>(Boolean) ComponentSystemBase.GetDynamicComponentTypeHandle(ComponentType) ComponentSystemBase.GetBufferTypeHandle<T>(Boolean) ComponentSystemBase.GetSharedComponentTypeHandle<T>() ComponentSystemBase.GetEntityTypeHandle() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.TryGetSingleton<T>(T) ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.TryGetSingletonEntity<T>(Entity) ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Global Namespace <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [WorldSystemFilter(WorldSystemFilterFlags.GameObjectConversion | WorldSystemFilterFlags.HybridGameObjectConversion | WorldSystemFilterFlags.DotsRuntimeGameObjectConversion)] public class GameObjectBeforeConversionGroup : ComponentSystemGroup Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Global Namespace.GameObjectConversionGroup.html": {
    "href": "api/Global Namespace.GameObjectConversionGroup.html",
    "title": "Class GameObjectConversionGroup | Entities | 0.17.0-preview.18",
    "keywords": "Class GameObjectConversionGroup Inheritance Object ComponentSystemBase ComponentSystem ComponentSystemGroup GameObjectConversionGroup Inherited Members ComponentSystemGroup.Systems ComponentSystemGroup.OnCreate() ComponentSystemGroup.OnDestroy() ComponentSystemGroup.AddSystemToUpdateList(ComponentSystemBase) ComponentSystemGroup.RemoveSystemFromUpdateList(ComponentSystemBase) ComponentSystemGroup.SortSystems() ComponentSystemGroup.OnStopRunning() ComponentSystemGroup.FixedRateManager ComponentSystemGroup.OnUpdate() ComponentSystem.PostUpdateCommands ComponentSystem.InitEntityQueryCache(Int32) ComponentSystem.Entities ComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnStartRunning() ComponentSystemBase.ExecutingSystemType ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetComponentTypeHandle<T>(Boolean) ComponentSystemBase.GetDynamicComponentTypeHandle(ComponentType) ComponentSystemBase.GetBufferTypeHandle<T>(Boolean) ComponentSystemBase.GetSharedComponentTypeHandle<T>() ComponentSystemBase.GetEntityTypeHandle() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.TryGetSingleton<T>(T) ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.TryGetSingletonEntity<T>(Entity) ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Global Namespace <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [WorldSystemFilter(WorldSystemFilterFlags.GameObjectConversion | WorldSystemFilterFlags.HybridGameObjectConversion | WorldSystemFilterFlags.DotsRuntimeGameObjectConversion)] public class GameObjectConversionGroup : ComponentSystemGroup Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Global Namespace.GameObjectConversionSystem.html": {
    "href": "api/Global Namespace.GameObjectConversionSystem.html",
    "title": "Class GameObjectConversionSystem | Entities | 0.17.0-preview.18",
    "keywords": "Class GameObjectConversionSystem Derive from this class to create a system that can convert GameObjects and assets into Entities. Use one of the GameObject*Group system groups with [UpdateInGroup] to select a particular phase of conversion for the system (default if left unspecified is GameObjectConversionGroup). Inheritance Object ComponentSystemBase ComponentSystem GameObjectConversionSystem Inherited Members ComponentSystem.PostUpdateCommands ComponentSystem.InitEntityQueryCache(Int32) ComponentSystem.Entities ComponentSystem.Update() ComponentSystem.OnUpdate() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnCreate() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.ExecutingSystemType ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetComponentTypeHandle<T>(Boolean) ComponentSystemBase.GetDynamicComponentTypeHandle(ComponentType) ComponentSystemBase.GetBufferTypeHandle<T>(Boolean) ComponentSystemBase.GetSharedComponentTypeHandle<T>() ComponentSystemBase.GetEntityTypeHandle() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.TryGetSingleton<T>(T) ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.TryGetSingletonEntity<T>(Entity) ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Global Namespace <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [WorldSystemFilter(WorldSystemFilterFlags.GameObjectConversion | WorldSystemFilterFlags.HybridGameObjectConversion | WorldSystemFilterFlags.DotsRuntimeGameObjectConversion)] public abstract class GameObjectConversionSystem : ComponentSystem Properties Name Description BlobAssetStore DstEntityManager Methods Name Description AddHybridComponent(Component) ConfigureEditorRenderData(Entity, GameObject, Boolean) Configures rendering data for picking in the editor. CreateAdditionalEntity(Component) Creates an additional entity in the destination world. The entity is associated with the GameObject of the given component. New entities should be created using this method since it ensures that the resulting entities have all data required for conversion correctly set up. CreateAdditionalEntity(Component, NativeArray<Entity>) Creates multiple additional entities in the destination world. The entities are associated with the GameObject of the given component. New entities should be created using this method since it ensures that the resulting entities have all data required for conversion correctly set up. CreateAdditionalEntity(Object) Creates an additional entity in the destination world. The entity is associated with the given object. New entities should be created using this method since it ensures that the resulting entities have all data required for conversion correctly set up. CreateAdditionalEntity(Object, NativeArray<Entity>) Creates multiple additional entities in the destination world. The entities are associated with the given object. New entities should be created using this method since it ensures that the resulting entities have all data required for conversion correctly set up. DeclareAssetDependency(GameObject, Object) Declares that the conversion result of the target GameObject depends on a source asset. Any changes to the source asset should trigger a reconversion of the dependent GameObject. DeclareDependency(Component, Component) Declares that the conversion result of the target Component depends on another component. Any changes to the dependency should trigger a reconversion of the dependent component. DeclareDependency(GameObject, Component) Declares that the conversion result of the target GameObject depends on another component. Any changes to the dependency should trigger a reconversion of the dependent component. DeclareDependency(GameObject, GameObject) Declares that the conversion result of the target GameObject depends on another GameObject. Any changes to the dependency should trigger a reconversion of the dependent GameObject. DeclareLinkedEntityGroup(GameObject) Adds a LinkedEntityGroup to the primary Entity of this GameObject for all Entities that are created from this GameObject and its descendants. As a result, EntityManager.Instantiate and EntityManager.SetEnabled will work on those Entities as a group. DeclareReferencedAsset(Object) DeclareReferencedAsset includes the referenced asset in the conversion process. Once it has been declared, you can use GetPrimaryEntity to find the Entity for the asset. This Entity will also be tagged with the Asset component. DeclareReferencedPrefab(GameObject) DeclareReferencedPrefab includes the referenced Prefab in the conversion process. Once it has been declared, you can use GetPrimaryEntity to find the Entity for the Prefab. If the object is a Prefab, all Entities in it will be made part of a LinkedEntityGroup, thus Instantiate will clone the whole group. All Entities in the Prefab will also be tagged with the Prefab component thus will not be picked up by an EntityQuery by default. GetEntities(Component) Returns all entities in the destination world that are associated with the GameObject of the given component. This includes the primary entity associated with the object as well as all additional entities that were associated with this object. The first entity returned by the enumerator is the primary entity. GetEntities(Object) Returns all entities in the destination world that are associated with the given object. This includes the primary entity associated with the object as well as all additional entities that were associated with this object. The first entity returned by the enumerator is the primary entity. GetGuidForAssetExport(Object) GetPrimaryEntity(Component) Returns the primary entity associated with the given GameObject of the given component. This entity is from the destination world. GetPrimaryEntity(Object) Returns the primary entity associated with the given object. This entity is from the destination world. GetSceneSectionEntity(Entity) Gets the entity representing the scene section of the entity passed in, the section entity is created if it doesn't already exist. Metadata components added to this section entity will be serialized into the entity scene header. At runtime these components will be added to the scene section entities when the scene is resolved. Only struct IComponentData components without BlobAssetReferences or Entity members are supported. HasPrimaryEntity(Component) Returns true if the GameObject owning component is included in the set of converted objects. HasPrimaryEntity(Object) Returns true if the uobject is included in the set of converted objects. OnCreate() TryCreateAssetExportWriter(Object) TryGetPrimaryEntity(Component) TryGetPrimaryEntity(Object) Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Global Namespace.GameObjectDeclareReferencedObjectsGroup.html": {
    "href": "api/Global Namespace.GameObjectDeclareReferencedObjectsGroup.html",
    "title": "Class GameObjectDeclareReferencedObjectsGroup | Entities | 0.17.0-preview.18",
    "keywords": "Class GameObjectDeclareReferencedObjectsGroup Inheritance Object ComponentSystemBase ComponentSystem ComponentSystemGroup GameObjectDeclareReferencedObjectsGroup Inherited Members ComponentSystemGroup.Systems ComponentSystemGroup.OnCreate() ComponentSystemGroup.OnDestroy() ComponentSystemGroup.AddSystemToUpdateList(ComponentSystemBase) ComponentSystemGroup.RemoveSystemFromUpdateList(ComponentSystemBase) ComponentSystemGroup.SortSystems() ComponentSystemGroup.OnStopRunning() ComponentSystemGroup.FixedRateManager ComponentSystemGroup.OnUpdate() ComponentSystem.PostUpdateCommands ComponentSystem.InitEntityQueryCache(Int32) ComponentSystem.Entities ComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnStartRunning() ComponentSystemBase.ExecutingSystemType ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetComponentTypeHandle<T>(Boolean) ComponentSystemBase.GetDynamicComponentTypeHandle(ComponentType) ComponentSystemBase.GetBufferTypeHandle<T>(Boolean) ComponentSystemBase.GetSharedComponentTypeHandle<T>() ComponentSystemBase.GetEntityTypeHandle() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.TryGetSingleton<T>(T) ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.TryGetSingletonEntity<T>(Entity) ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Global Namespace <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [WorldSystemFilter(WorldSystemFilterFlags.GameObjectConversion | WorldSystemFilterFlags.HybridGameObjectConversion | WorldSystemFilterFlags.DotsRuntimeGameObjectConversion)] public class GameObjectDeclareReferencedObjectsGroup : ComponentSystemGroup Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Global Namespace.GameObjectExportGroup.html": {
    "href": "api/Global Namespace.GameObjectExportGroup.html",
    "title": "Class GameObjectExportGroup | Entities | 0.17.0-preview.18",
    "keywords": "Class GameObjectExportGroup Inheritance Object ComponentSystemBase ComponentSystem ComponentSystemGroup GameObjectExportGroup Inherited Members ComponentSystemGroup.Systems ComponentSystemGroup.OnCreate() ComponentSystemGroup.OnDestroy() ComponentSystemGroup.AddSystemToUpdateList(ComponentSystemBase) ComponentSystemGroup.RemoveSystemFromUpdateList(ComponentSystemBase) ComponentSystemGroup.SortSystems() ComponentSystemGroup.OnStopRunning() ComponentSystemGroup.FixedRateManager ComponentSystemGroup.OnUpdate() ComponentSystem.PostUpdateCommands ComponentSystem.InitEntityQueryCache(Int32) ComponentSystem.Entities ComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnStartRunning() ComponentSystemBase.ExecutingSystemType ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetComponentTypeHandle<T>(Boolean) ComponentSystemBase.GetDynamicComponentTypeHandle(ComponentType) ComponentSystemBase.GetBufferTypeHandle<T>(Boolean) ComponentSystemBase.GetSharedComponentTypeHandle<T>() ComponentSystemBase.GetEntityTypeHandle() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.TryGetSingleton<T>(T) ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.TryGetSingletonEntity<T>(Entity) ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Global Namespace <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [WorldSystemFilter(WorldSystemFilterFlags.GameObjectConversion | WorldSystemFilterFlags.HybridGameObjectConversion | WorldSystemFilterFlags.DotsRuntimeGameObjectConversion)] public class GameObjectExportGroup : ComponentSystemGroup Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Global Namespace.html": {
    "href": "api/Global Namespace.html",
    "title": "Namespace Global Namespace | Entities | 0.17.0-preview.18",
    "keywords": "Namespace Global Namespace Classes AuthoringWithMaterial CompanionGameObjectUpdateTransformSystem GameObjectAfterConversionGroup GameObjectBeforeConversionGroup GameObjectConversionGroup GameObjectConversionSystem Derive from this class to create a system that can convert GameObjects and assets into Entities. Use one of the GameObject*Group system groups with [UpdateInGroup] to select a particular phase of conversion for the system (default if left unspecified is GameObjectConversionGroup). GameObjectDeclareReferencedObjectsGroup GameObjectExportGroup LambdaForEachDescriptionConstructionMethods PatchingEndToEndWithSerialization PrefabReference SceneSectionComponent StopConvertToEntity Structs PatchingEndToEndWithSerialization.ComponentWithObjectRef PrefabEntityReference Delegates Invalid_ForEach_Signature_See_ForEach_Documentation_For_Rules_And_Restrictions"
  },
  "api/Global Namespace.Invalid_ForEach_Signature_See_ForEach_Documentation_For_Rules_And_Restrictions.html": {
    "href": "api/Global Namespace.Invalid_ForEach_Signature_See_ForEach_Documentation_For_Rules_And_Restrictions.html",
    "title": "Delegate Invalid_ForEach_Signature_See_ForEach_Documentation_For_Rules_And_Restrictions | Entities | 0.17.0-preview.18",
    "keywords": "Delegate Invalid_ForEach_Signature_See_ForEach_Documentation_For_Rules_And_Restrictions Namespace : Global Namespace <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate object Invalid_ForEach_Signature_See_ForEach_Documentation_For_Rules_And_Restrictions(object o); Parameters Type Name Description Object o Returns Type Description Object"
  },
  "api/Global Namespace.LambdaForEachDescriptionConstructionMethods.html": {
    "href": "api/Global Namespace.LambdaForEachDescriptionConstructionMethods.html",
    "title": "Class LambdaForEachDescriptionConstructionMethods | Entities | 0.17.0-preview.18",
    "keywords": "Class LambdaForEachDescriptionConstructionMethods Inheritance Object LambdaForEachDescriptionConstructionMethods Namespace : Global Namespace <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class LambdaForEachDescriptionConstructionMethods Methods Name Description ForEach<TDescription, T0>(TDescription, I<T0>) ForEach<TDescription, T0>(TDescription, R<T0>) ForEach<TDescription, T0>(TDescription, V<T0>) ForEach<TDescription, T0, T1>(TDescription, II<T0, T1>) ForEach<TDescription, T0, T1>(TDescription, RI<T0, T1>) ForEach<TDescription, T0, T1>(TDescription, RR<T0, T1>) ForEach<TDescription, T0, T1>(TDescription, VI<T0, T1>) ForEach<TDescription, T0, T1>(TDescription, VR<T0, T1>) ForEach<TDescription, T0, T1>(TDescription, VV<T0, T1>) ForEach<TDescription, T0, T1, T2>(TDescription, III<T0, T1, T2>) ForEach<TDescription, T0, T1, T2>(TDescription, RII<T0, T1, T2>) ForEach<TDescription, T0, T1, T2>(TDescription, RRI<T0, T1, T2>) ForEach<TDescription, T0, T1, T2>(TDescription, RRR<T0, T1, T2>) ForEach<TDescription, T0, T1, T2>(TDescription, VII<T0, T1, T2>) ForEach<TDescription, T0, T1, T2>(TDescription, VRI<T0, T1, T2>) ForEach<TDescription, T0, T1, T2>(TDescription, VRR<T0, T1, T2>) ForEach<TDescription, T0, T1, T2>(TDescription, VVI<T0, T1, T2>) ForEach<TDescription, T0, T1, T2>(TDescription, VVR<T0, T1, T2>) ForEach<TDescription, T0, T1, T2>(TDescription, VVV<T0, T1, T2>) ForEach<TDescription, T0, T1, T2, T3>(TDescription, IIII<T0, T1, T2, T3>) ForEach<TDescription, T0, T1, T2, T3>(TDescription, RIII<T0, T1, T2, T3>) ForEach<TDescription, T0, T1, T2, T3>(TDescription, RRII<T0, T1, T2, T3>) ForEach<TDescription, T0, T1, T2, T3>(TDescription, RRRI<T0, T1, T2, T3>) ForEach<TDescription, T0, T1, T2, T3>(TDescription, RRRR<T0, T1, T2, T3>) ForEach<TDescription, T0, T1, T2, T3>(TDescription, VIII<T0, T1, T2, T3>) ForEach<TDescription, T0, T1, T2, T3>(TDescription, VRII<T0, T1, T2, T3>) ForEach<TDescription, T0, T1, T2, T3>(TDescription, VRRI<T0, T1, T2, T3>) ForEach<TDescription, T0, T1, T2, T3>(TDescription, VRRR<T0, T1, T2, T3>) ForEach<TDescription, T0, T1, T2, T3>(TDescription, VVII<T0, T1, T2, T3>) ForEach<TDescription, T0, T1, T2, T3>(TDescription, VVRI<T0, T1, T2, T3>) ForEach<TDescription, T0, T1, T2, T3>(TDescription, VVRR<T0, T1, T2, T3>) ForEach<TDescription, T0, T1, T2, T3>(TDescription, VVVI<T0, T1, T2, T3>) ForEach<TDescription, T0, T1, T2, T3>(TDescription, VVVR<T0, T1, T2, T3>) ForEach<TDescription, T0, T1, T2, T3>(TDescription, VVVV<T0, T1, T2, T3>) ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, IIIII<T0, T1, T2, T3, T4>) ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, RIIII<T0, T1, T2, T3, T4>) ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, RRIII<T0, T1, T2, T3, T4>) ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, RRRII<T0, T1, T2, T3, T4>) ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, RRRRI<T0, T1, T2, T3, T4>) ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, RRRRR<T0, T1, T2, T3, T4>) ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, VIIII<T0, T1, T2, T3, T4>) ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, VRIII<T0, T1, T2, T3, T4>) ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, VRRII<T0, T1, T2, T3, T4>) ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, VRRRI<T0, T1, T2, T3, T4>) ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, VRRRR<T0, T1, T2, T3, T4>) ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, VVIII<T0, T1, T2, T3, T4>) ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, VVRII<T0, T1, T2, T3, T4>) ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, VVRRI<T0, T1, T2, T3, T4>) ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, VVRRR<T0, T1, T2, T3, T4>) ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, VVVII<T0, T1, T2, T3, T4>) ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, VVVRI<T0, T1, T2, T3, T4>) ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, VVVRR<T0, T1, T2, T3, T4>) ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, VVVVI<T0, T1, T2, T3, T4>) ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, VVVVR<T0, T1, T2, T3, T4>) ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, VVVVV<T0, T1, T2, T3, T4>) ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, IIIIII<T0, T1, T2, T3, T4, T5>) ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, RIIIII<T0, T1, T2, T3, T4, T5>) ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, RRIIII<T0, T1, T2, T3, T4, T5>) ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, RRRIII<T0, T1, T2, T3, T4, T5>) ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, RRRRII<T0, T1, T2, T3, T4, T5>) ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, RRRRRI<T0, T1, T2, T3, T4, T5>) ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, RRRRRR<T0, T1, T2, T3, T4, T5>) ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, VIIIII<T0, T1, T2, T3, T4, T5>) ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, VRIIII<T0, T1, T2, T3, T4, T5>) ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, VRRIII<T0, T1, T2, T3, T4, T5>) ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, VRRRII<T0, T1, T2, T3, T4, T5>) ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, VRRRRI<T0, T1, T2, T3, T4, T5>) ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, VRRRRR<T0, T1, T2, T3, T4, T5>) ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, VVIIII<T0, T1, T2, T3, T4, T5>) ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, VVRIII<T0, T1, T2, T3, T4, T5>) ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, VVRRII<T0, T1, T2, T3, T4, T5>) ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, VVRRRI<T0, T1, T2, T3, T4, T5>) ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, VVRRRR<T0, T1, T2, T3, T4, T5>) ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, VVVIII<T0, T1, T2, T3, T4, T5>) ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, VVVRII<T0, T1, T2, T3, T4, T5>) ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, VVVRRI<T0, T1, T2, T3, T4, T5>) ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, VVVRRR<T0, T1, T2, T3, T4, T5>) ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, VVVVII<T0, T1, T2, T3, T4, T5>) ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, VVVVRI<T0, T1, T2, T3, T4, T5>) ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, VVVVRR<T0, T1, T2, T3, T4, T5>) ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, VVVVVI<T0, T1, T2, T3, T4, T5>) ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, VVVVVR<T0, T1, T2, T3, T4, T5>) ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, VVVVVV<T0, T1, T2, T3, T4, T5>) ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, IIIIIII<T0, T1, T2, T3, T4, T5, T6>) ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, RIIIIII<T0, T1, T2, T3, T4, T5, T6>) ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, RRIIIII<T0, T1, T2, T3, T4, T5, T6>) ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, RRRIIII<T0, T1, T2, T3, T4, T5, T6>) ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, RRRRIII<T0, T1, T2, T3, T4, T5, T6>) ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, RRRRRII<T0, T1, T2, T3, T4, T5, T6>) ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, RRRRRRI<T0, T1, T2, T3, T4, T5, T6>) ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, RRRRRRR<T0, T1, T2, T3, T4, T5, T6>) ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, VIIIIII<T0, T1, T2, T3, T4, T5, T6>) ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, VRIIIII<T0, T1, T2, T3, T4, T5, T6>) ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, VRRIIII<T0, T1, T2, T3, T4, T5, T6>) ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, VRRRIII<T0, T1, T2, T3, T4, T5, T6>) ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, VRRRRII<T0, T1, T2, T3, T4, T5, T6>) ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, VRRRRRI<T0, T1, T2, T3, T4, T5, T6>) ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, VRRRRRR<T0, T1, T2, T3, T4, T5, T6>) ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, VVIIIII<T0, T1, T2, T3, T4, T5, T6>) ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, VVRIIII<T0, T1, T2, T3, T4, T5, T6>) ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, VVRRIII<T0, T1, T2, T3, T4, T5, T6>) ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, VVRRRII<T0, T1, T2, T3, T4, T5, T6>) ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, VVRRRRI<T0, T1, T2, T3, T4, T5, T6>) ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, VVRRRRR<T0, T1, T2, T3, T4, T5, T6>) ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, VVVIIII<T0, T1, T2, T3, T4, T5, T6>) ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, VVVRIII<T0, T1, T2, T3, T4, T5, T6>) ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, VVVRRII<T0, T1, T2, T3, T4, T5, T6>) ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, VVVRRRI<T0, T1, T2, T3, T4, T5, T6>) ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, VVVRRRR<T0, T1, T2, T3, T4, T5, T6>) ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, VVVVIII<T0, T1, T2, T3, T4, T5, T6>) ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, VVVVRII<T0, T1, T2, T3, T4, T5, T6>) ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, VVVVRRI<T0, T1, T2, T3, T4, T5, T6>) ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, VVVVRRR<T0, T1, T2, T3, T4, T5, T6>) ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, VVVVVII<T0, T1, T2, T3, T4, T5, T6>) ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, VVVVVRI<T0, T1, T2, T3, T4, T5, T6>) ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, VVVVVRR<T0, T1, T2, T3, T4, T5, T6>) ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, VVVVVVI<T0, T1, T2, T3, T4, T5, T6>) ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, VVVVVVR<T0, T1, T2, T3, T4, T5, T6>) ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, VVVVVVV<T0, T1, T2, T3, T4, T5, T6>) ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, IIIIIIII<T0, T1, T2, T3, T4, T5, T6, T7>) ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, RIIIIIII<T0, T1, T2, T3, T4, T5, T6, T7>) ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, RRIIIIII<T0, T1, T2, T3, T4, T5, T6, T7>) ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, RRRIIIII<T0, T1, T2, T3, T4, T5, T6, T7>) ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, RRRRIIII<T0, T1, T2, T3, T4, T5, T6, T7>) ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, RRRRRIII<T0, T1, T2, T3, T4, T5, T6, T7>) ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, RRRRRRII<T0, T1, T2, T3, T4, T5, T6, T7>) ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, RRRRRRRI<T0, T1, T2, T3, T4, T5, T6, T7>) ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, RRRRRRRR<T0, T1, T2, T3, T4, T5, T6, T7>) ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VIIIIIII<T0, T1, T2, T3, T4, T5, T6, T7>) ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VRIIIIII<T0, T1, T2, T3, T4, T5, T6, T7>) ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VRRIIIII<T0, T1, T2, T3, T4, T5, T6, T7>) ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VRRRIIII<T0, T1, T2, T3, T4, T5, T6, T7>) ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VRRRRIII<T0, T1, T2, T3, T4, T5, T6, T7>) ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VRRRRRII<T0, T1, T2, T3, T4, T5, T6, T7>) ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VRRRRRRI<T0, T1, T2, T3, T4, T5, T6, T7>) ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VRRRRRRR<T0, T1, T2, T3, T4, T5, T6, T7>) ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VVIIIIII<T0, T1, T2, T3, T4, T5, T6, T7>) ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VVRIIIII<T0, T1, T2, T3, T4, T5, T6, T7>) ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VVRRIIII<T0, T1, T2, T3, T4, T5, T6, T7>) ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VVRRRIII<T0, T1, T2, T3, T4, T5, T6, T7>) ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VVRRRRII<T0, T1, T2, T3, T4, T5, T6, T7>) ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VVRRRRRI<T0, T1, T2, T3, T4, T5, T6, T7>) ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VVRRRRRR<T0, T1, T2, T3, T4, T5, T6, T7>) ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VVVIIIII<T0, T1, T2, T3, T4, T5, T6, T7>) ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VVVRIIII<T0, T1, T2, T3, T4, T5, T6, T7>) ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VVVRRIII<T0, T1, T2, T3, T4, T5, T6, T7>) ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VVVRRRII<T0, T1, T2, T3, T4, T5, T6, T7>) ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VVVRRRRI<T0, T1, T2, T3, T4, T5, T6, T7>) ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VVVRRRRR<T0, T1, T2, T3, T4, T5, T6, T7>) ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VVVVIIII<T0, T1, T2, T3, T4, T5, T6, T7>) ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VVVVRIII<T0, T1, T2, T3, T4, T5, T6, T7>) ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VVVVRRII<T0, T1, T2, T3, T4, T5, T6, T7>) ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VVVVRRRI<T0, T1, T2, T3, T4, T5, T6, T7>) ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VVVVRRRR<T0, T1, T2, T3, T4, T5, T6, T7>) ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VVVVVIII<T0, T1, T2, T3, T4, T5, T6, T7>) ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VVVVVRII<T0, T1, T2, T3, T4, T5, T6, T7>) ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VVVVVRRI<T0, T1, T2, T3, T4, T5, T6, T7>) ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VVVVVRRR<T0, T1, T2, T3, T4, T5, T6, T7>) ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VVVVVVII<T0, T1, T2, T3, T4, T5, T6, T7>) ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VVVVVVRI<T0, T1, T2, T3, T4, T5, T6, T7>) ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VVVVVVRR<T0, T1, T2, T3, T4, T5, T6, T7>) ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VVVVVVVI<T0, T1, T2, T3, T4, T5, T6, T7>) ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VVVVVVVR<T0, T1, T2, T3, T4, T5, T6, T7>) ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VVVVVVVV<T0, T1, T2, T3, T4, T5, T6, T7>) ThrowCodeGenException<TDescription>() ThrowCodeGenInvalidMethodCalledException()"
  },
  "api/Global Namespace.PatchingEndToEndWithSerialization.ComponentWithObjectRef.html": {
    "href": "api/Global Namespace.PatchingEndToEndWithSerialization.ComponentWithObjectRef.html",
    "title": "Struct PatchingEndToEndWithSerialization.ComponentWithObjectRef | Entities | 0.17.0-preview.18",
    "keywords": "Struct PatchingEndToEndWithSerialization.ComponentWithObjectRef Namespace : Global Namespace <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct ComponentWithObjectRef : ISharedComponentData, IEquatable<PatchingEndToEndWithSerialization.ComponentWithObjectRef> Fields Name Description Material Methods Name Description Equals(PatchingEndToEndWithSerialization.ComponentWithObjectRef) GetHashCode()"
  },
  "api/Global Namespace.PatchingEndToEndWithSerialization.html": {
    "href": "api/Global Namespace.PatchingEndToEndWithSerialization.html",
    "title": "Class PatchingEndToEndWithSerialization | Entities | 0.17.0-preview.18",
    "keywords": "Class PatchingEndToEndWithSerialization Inheritance Object Unity.Entities.Tests.ECSTestsCommonBase Unity.Entities.Tests.EntityDifferTestFixture PatchingEndToEndWithSerialization Namespace : Global Namespace <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class PatchingEndToEndWithSerialization : EntityDifferTestFixture Methods Name Description CanSerializeAndDeserializeManagedComponents() DeserializeWithDifferentDataLayoutThrows() PatchWithObjectReferenceResolving()"
  },
  "api/Global Namespace.PrefabEntityReference.html": {
    "href": "api/Global Namespace.PrefabEntityReference.html",
    "title": "Struct PrefabEntityReference | Entities | 0.17.0-preview.18",
    "keywords": "Struct PrefabEntityReference Namespace : Global Namespace <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct PrefabEntityReference : IComponentData Fields Name Description Prefab"
  },
  "api/Global Namespace.PrefabReference.html": {
    "href": "api/Global Namespace.PrefabReference.html",
    "title": "Class PrefabReference | Entities | 0.17.0-preview.18",
    "keywords": "Class PrefabReference Inheritance Object Object Component Behaviour MonoBehaviour PrefabReference Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(String, Single) MonoBehaviour.InvokeRepeating(String, Single, Single) MonoBehaviour.CancelInvoke(String) MonoBehaviour.IsInvoking(String) MonoBehaviour.StartCoroutine(String) MonoBehaviour.StartCoroutine(String, Object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(String) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(Object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, Component) Component.TryGetComponent<T>(T) Component.GetComponent(String) Component.GetComponentInChildren(Type, Boolean) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(Boolean) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, Boolean) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(Boolean) Component.GetComponentsInChildren<T>(Boolean, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, Boolean) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(Boolean) Component.GetComponentsInParent<T>(Boolean, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(String) Component.SendMessageUpwards(String, Object, SendMessageOptions) Component.SendMessageUpwards(String, Object) Component.SendMessageUpwards(String) Component.SendMessageUpwards(String, SendMessageOptions) Component.SendMessage(String, Object) Component.SendMessage(String) Component.SendMessage(String, Object, SendMessageOptions) Component.SendMessage(String, SendMessageOptions) Component.BroadcastMessage(String, Object, SendMessageOptions) Component.BroadcastMessage(String, Object) Component.BroadcastMessage(String) Component.BroadcastMessage(String, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) Object.Destroy(Object) Object.DestroyImmediate(Object, Boolean) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, Boolean) Object.DontDestroyOnLoad(Object) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectOfType(Type) Object.FindObjectOfType(Type, Boolean) Object.ToString() Object.name Object.hideFlags Namespace : Global Namespace <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class PrefabReference : MonoBehaviour Fields Name Description Prefab"
  },
  "api/Global Namespace.SceneSectionComponent.html": {
    "href": "api/Global Namespace.SceneSectionComponent.html",
    "title": "Class SceneSectionComponent | Entities | 0.17.0-preview.18",
    "keywords": "Class SceneSectionComponent Inheritance Object Object Component Behaviour MonoBehaviour SceneSectionComponent Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(String, Single) MonoBehaviour.InvokeRepeating(String, Single, Single) MonoBehaviour.CancelInvoke(String) MonoBehaviour.IsInvoking(String) MonoBehaviour.StartCoroutine(String) MonoBehaviour.StartCoroutine(String, Object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(String) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(Object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, Component) Component.TryGetComponent<T>(T) Component.GetComponent(String) Component.GetComponentInChildren(Type, Boolean) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(Boolean) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, Boolean) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(Boolean) Component.GetComponentsInChildren<T>(Boolean, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, Boolean) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(Boolean) Component.GetComponentsInParent<T>(Boolean, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(String) Component.SendMessageUpwards(String, Object, SendMessageOptions) Component.SendMessageUpwards(String, Object) Component.SendMessageUpwards(String) Component.SendMessageUpwards(String, SendMessageOptions) Component.SendMessage(String, Object) Component.SendMessage(String) Component.SendMessage(String, Object, SendMessageOptions) Component.SendMessage(String, SendMessageOptions) Component.BroadcastMessage(String, Object, SendMessageOptions) Component.BroadcastMessage(String, Object) Component.BroadcastMessage(String) Component.BroadcastMessage(String, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) Object.Destroy(Object) Object.DestroyImmediate(Object, Boolean) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, Boolean) Object.DontDestroyOnLoad(Object) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectOfType(Type) Object.FindObjectOfType(Type, Boolean) Object.ToString() Object.name Object.hideFlags Namespace : Global Namespace <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class SceneSectionComponent : MonoBehaviour Fields Name Description SectionIndex"
  },
  "api/Global Namespace.StopConvertToEntity.html": {
    "href": "api/Global Namespace.StopConvertToEntity.html",
    "title": "Class StopConvertToEntity | Entities | 0.17.0-preview.18",
    "keywords": "Class StopConvertToEntity Inheritance Object Object Component Behaviour MonoBehaviour StopConvertToEntity Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(String, Single) MonoBehaviour.InvokeRepeating(String, Single, Single) MonoBehaviour.CancelInvoke(String) MonoBehaviour.IsInvoking(String) MonoBehaviour.StartCoroutine(String) MonoBehaviour.StartCoroutine(String, Object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(String) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(Object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, Component) Component.TryGetComponent<T>(T) Component.GetComponent(String) Component.GetComponentInChildren(Type, Boolean) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(Boolean) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, Boolean) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(Boolean) Component.GetComponentsInChildren<T>(Boolean, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, Boolean) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(Boolean) Component.GetComponentsInParent<T>(Boolean, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(String) Component.SendMessageUpwards(String, Object, SendMessageOptions) Component.SendMessageUpwards(String, Object) Component.SendMessageUpwards(String) Component.SendMessageUpwards(String, SendMessageOptions) Component.SendMessage(String, Object) Component.SendMessage(String) Component.SendMessage(String, Object, SendMessageOptions) Component.SendMessage(String, SendMessageOptions) Component.BroadcastMessage(String, Object, SendMessageOptions) Component.BroadcastMessage(String, Object) Component.BroadcastMessage(String) Component.BroadcastMessage(String, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) Object.Destroy(Object) Object.DestroyImmediate(Object, Boolean) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, Boolean) Object.DontDestroyOnLoad(Object) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectOfType(Type) Object.FindObjectOfType(Type, Boolean) Object.ToString() Object.name Object.hideFlags Namespace : Global Namespace <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [DisallowMultipleComponent] [AddComponentMenu(\"DOTS/Convert To Entity (Stop)\")] public class StopConvertToEntity : MonoBehaviour"
  },
  "api/Global-Namespace.AuthoringWithMaterial.Convert.html": {
    "href": "api/Global-Namespace.AuthoringWithMaterial.Convert.html",
    "title": "Method Convert | Entities | 0.17.0-preview.18",
    "keywords": "Method Convert Convert(Entity, EntityManager, GameObjectConversionSystem) Declaration public void Convert(Entity entity, EntityManager dstManager, GameObjectConversionSystem conversionSystem) Parameters Type Name Description Entity entity EntityManager dstManager GameObjectConversionSystem conversionSystem Implements IConvertGameObjectToEntity.Convert(Entity, EntityManager, GameObjectConversionSystem)"
  },
  "api/Global-Namespace.AuthoringWithMaterial.material.html": {
    "href": "api/Global-Namespace.AuthoringWithMaterial.material.html",
    "title": "Field material | Entities | 0.17.0-preview.18",
    "keywords": "Field material Namespace : Global Namespace <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public Material material Returns Type Description Material"
  },
  "api/Global-Namespace.CompanionGameObjectUpdateTransformSystem.OnCreate.html": {
    "href": "api/Global-Namespace.CompanionGameObjectUpdateTransformSystem.OnCreate.html",
    "title": "Method OnCreate | Entities | 0.17.0-preview.18",
    "keywords": "Method OnCreate OnCreate() Declaration protected override void OnCreate() Overrides ComponentSystemBase.OnCreate()"
  },
  "api/Global-Namespace.CompanionGameObjectUpdateTransformSystem.OnDestroy.html": {
    "href": "api/Global-Namespace.CompanionGameObjectUpdateTransformSystem.OnDestroy.html",
    "title": "Method OnDestroy | Entities | 0.17.0-preview.18",
    "keywords": "Method OnDestroy OnDestroy() Declaration protected override void OnDestroy() Overrides ComponentSystemBase.OnDestroy()"
  },
  "api/Global-Namespace.CompanionGameObjectUpdateTransformSystem.OnUpdate.html": {
    "href": "api/Global-Namespace.CompanionGameObjectUpdateTransformSystem.OnUpdate.html",
    "title": "Method OnUpdate | Entities | 0.17.0-preview.18",
    "keywords": "Method OnUpdate OnUpdate(JobHandle) Declaration protected override JobHandle OnUpdate(JobHandle inputDeps) Parameters Type Name Description JobHandle inputDeps Returns Type Description JobHandle Overrides JobComponentSystem.OnUpdate(JobHandle)"
  },
  "api/Global-Namespace.GameObjectConversionSystem.AddHybridComponent.html": {
    "href": "api/Global-Namespace.GameObjectConversionSystem.AddHybridComponent.html",
    "title": "Method AddHybridComponent | Entities | 0.17.0-preview.18",
    "keywords": "Method AddHybridComponent AddHybridComponent(Component) Declaration public void AddHybridComponent(Component component) Parameters Type Name Description Component component"
  },
  "api/Global-Namespace.GameObjectConversionSystem.BlobAssetStore.html": {
    "href": "api/Global-Namespace.GameObjectConversionSystem.BlobAssetStore.html",
    "title": "Property BlobAssetStore | Entities | 0.17.0-preview.18",
    "keywords": "Property BlobAssetStore BlobAssetStore Declaration public BlobAssetStore BlobAssetStore { get; } Property Value Type Description BlobAssetStore"
  },
  "api/Global-Namespace.GameObjectConversionSystem.ConfigureEditorRenderData.html": {
    "href": "api/Global-Namespace.GameObjectConversionSystem.ConfigureEditorRenderData.html",
    "title": "Method ConfigureEditorRenderData | Entities | 0.17.0-preview.18",
    "keywords": "Method ConfigureEditorRenderData ConfigureEditorRenderData(Entity, GameObject, Boolean) Configures rendering data for picking in the editor. Declaration public void ConfigureEditorRenderData(Entity entity, GameObject pickableObject, bool hasGameObjectBasedRenderingRepresentation) Parameters Type Name Description Entity entity The entity to which we apply the configuration GameObject pickableObject The game object that should be picked when clicking on an entity Boolean hasGameObjectBasedRenderingRepresentation If there is a game object based rendering representation, like MeshRenderer this should be true. If the only way to render the object is through entities it should be false"
  },
  "api/Global-Namespace.GameObjectConversionSystem.CreateAdditionalEntity.html": {
    "href": "api/Global-Namespace.GameObjectConversionSystem.CreateAdditionalEntity.html",
    "title": "Method CreateAdditionalEntity | Entities | 0.17.0-preview.18",
    "keywords": "Method CreateAdditionalEntity CreateAdditionalEntity(Object) Creates an additional entity in the destination world. The entity is associated with the given object. New entities should be created using this method since it ensures that the resulting entities have all data required for conversion correctly set up. Declaration public Entity CreateAdditionalEntity(Object uobject) Parameters Type Name Description Object uobject The object that the new entity will be associated with. Returns Type Description Entity The newly created entity. CreateAdditionalEntity(Component) Creates an additional entity in the destination world. The entity is associated with the GameObject of the given component. New entities should be created using this method since it ensures that the resulting entities have all data required for conversion correctly set up. Declaration public Entity CreateAdditionalEntity(Component component) Parameters Type Name Description Component component A component of the GameObject that the new entity will be associated with. Returns Type Description Entity The newly created entity. CreateAdditionalEntity(Object, NativeArray<Entity>) Creates multiple additional entities in the destination world. The entities are associated with the given object. New entities should be created using this method since it ensures that the resulting entities have all data required for conversion correctly set up. Declaration public void CreateAdditionalEntity(Object uobject, NativeArray<Entity> outEntities) Parameters Type Name Description Object uobject The object that the new entities will be associated with. NativeArray < Entity > outEntities This will be filled with the newly created entities. CreateAdditionalEntity(Component, NativeArray<Entity>) Creates multiple additional entities in the destination world. The entities are associated with the GameObject of the given component. New entities should be created using this method since it ensures that the resulting entities have all data required for conversion correctly set up. Declaration public void CreateAdditionalEntity(Component component, NativeArray<Entity> outEntities) Parameters Type Name Description Component component A component of the GameObject that the new entities will be associated with. NativeArray < Entity > outEntities This will be filled with the newly created entities."
  },
  "api/Global-Namespace.GameObjectConversionSystem.DeclareAssetDependency.html": {
    "href": "api/Global-Namespace.GameObjectConversionSystem.DeclareAssetDependency.html",
    "title": "Method DeclareAssetDependency | Entities | 0.17.0-preview.18",
    "keywords": "Method DeclareAssetDependency DeclareAssetDependency(GameObject, Object) Declares that the conversion result of the target GameObject depends on a source asset. Any changes to the source asset should trigger a reconversion of the dependent GameObject. Declaration public void DeclareAssetDependency(GameObject target, Object dependsOn) Parameters Type Name Description GameObject target The GameObject that has a dependency. Object dependsOn The Object that the target depends on. This must be an asset."
  },
  "api/Global-Namespace.GameObjectConversionSystem.DeclareDependency.html": {
    "href": "api/Global-Namespace.GameObjectConversionSystem.DeclareDependency.html",
    "title": "Method DeclareDependency | Entities | 0.17.0-preview.18",
    "keywords": "Method DeclareDependency DeclareDependency(GameObject, GameObject) Declares that the conversion result of the target GameObject depends on another GameObject. Any changes to the dependency should trigger a reconversion of the dependent GameObject. Declaration public void DeclareDependency(GameObject target, GameObject dependsOn) Parameters Type Name Description GameObject target The GameObject that has a dependency. GameObject dependsOn The GameObject that the target depends on. DeclareDependency(Component, Component) Declares that the conversion result of the target Component depends on another component. Any changes to the dependency should trigger a reconversion of the dependent component. Declaration public void DeclareDependency(Component target, Component dependsOn) Parameters Type Name Description Component target The Component that has a dependency. Component dependsOn The Component that the target depends on. DeclareDependency(GameObject, Component) Declares that the conversion result of the target GameObject depends on another component. Any changes to the dependency should trigger a reconversion of the dependent component. Declaration public void DeclareDependency(GameObject target, Component dependsOn) Parameters Type Name Description GameObject target The GameObject that has a dependency. Component dependsOn The Component that the target depends on."
  },
  "api/Global-Namespace.GameObjectConversionSystem.DeclareLinkedEntityGroup.html": {
    "href": "api/Global-Namespace.GameObjectConversionSystem.DeclareLinkedEntityGroup.html",
    "title": "Method DeclareLinkedEntityGroup | Entities | 0.17.0-preview.18",
    "keywords": "Method DeclareLinkedEntityGroup DeclareLinkedEntityGroup(GameObject) Adds a LinkedEntityGroup to the primary Entity of this GameObject for all Entities that are created from this GameObject and its descendants. As a result, EntityManager.Instantiate and EntityManager.SetEnabled will work on those Entities as a group. Declaration public void DeclareLinkedEntityGroup(GameObject gameObject) Parameters Type Name Description GameObject gameObject"
  },
  "api/Global-Namespace.GameObjectConversionSystem.DeclareReferencedAsset.html": {
    "href": "api/Global-Namespace.GameObjectConversionSystem.DeclareReferencedAsset.html",
    "title": "Method DeclareReferencedAsset | Entities | 0.17.0-preview.18",
    "keywords": "Method DeclareReferencedAsset DeclareReferencedAsset(Object) DeclareReferencedAsset includes the referenced asset in the conversion process. Once it has been declared, you can use GetPrimaryEntity to find the Entity for the asset. This Entity will also be tagged with the Asset component. Declaration public void DeclareReferencedAsset(Object asset) Parameters Type Name Description Object asset"
  },
  "api/Global-Namespace.GameObjectConversionSystem.DeclareReferencedPrefab.html": {
    "href": "api/Global-Namespace.GameObjectConversionSystem.DeclareReferencedPrefab.html",
    "title": "Method DeclareReferencedPrefab | Entities | 0.17.0-preview.18",
    "keywords": "Method DeclareReferencedPrefab DeclareReferencedPrefab(GameObject) DeclareReferencedPrefab includes the referenced Prefab in the conversion process. Once it has been declared, you can use GetPrimaryEntity to find the Entity for the Prefab. If the object is a Prefab, all Entities in it will be made part of a LinkedEntityGroup, thus Instantiate will clone the whole group. All Entities in the Prefab will also be tagged with the Prefab component thus will not be picked up by an EntityQuery by default. Declaration public void DeclareReferencedPrefab(GameObject prefab) Parameters Type Name Description GameObject prefab"
  },
  "api/Global-Namespace.GameObjectConversionSystem.DstEntityManager.html": {
    "href": "api/Global-Namespace.GameObjectConversionSystem.DstEntityManager.html",
    "title": "Property DstEntityManager | Entities | 0.17.0-preview.18",
    "keywords": "Property DstEntityManager DstEntityManager Declaration public EntityManager DstEntityManager { get; } Property Value Type Description EntityManager"
  },
  "api/Global-Namespace.GameObjectConversionSystem.GetEntities.html": {
    "href": "api/Global-Namespace.GameObjectConversionSystem.GetEntities.html",
    "title": "Method GetEntities | Entities | 0.17.0-preview.18",
    "keywords": "Method GetEntities GetEntities(Object) Returns all entities in the destination world that are associated with the given object. This includes the primary entity associated with the object as well as all additional entities that were associated with this object. The first entity returned by the enumerator is the primary entity. Declaration public MultiListEnumerator<Entity> GetEntities(Object uobject) Parameters Type Name Description Object uobject The object to get the entities for. Returns Type Description MultiListEnumerator < Entity > An enumerator that returns the associated entities. GetEntities(Component) Returns all entities in the destination world that are associated with the GameObject of the given component. This includes the primary entity associated with the object as well as all additional entities that were associated with this object. The first entity returned by the enumerator is the primary entity. Declaration public MultiListEnumerator<Entity> GetEntities(Component component) Parameters Type Name Description Component component The component whose GameObject to get the entities for. Returns Type Description MultiListEnumerator < Entity > An enumerator that returns the associated entities."
  },
  "api/Global-Namespace.GameObjectConversionSystem.GetGuidForAssetExport.html": {
    "href": "api/Global-Namespace.GameObjectConversionSystem.GetGuidForAssetExport.html",
    "title": "Method GetGuidForAssetExport | Entities | 0.17.0-preview.18",
    "keywords": "Method GetGuidForAssetExport GetGuidForAssetExport(Object) Declaration public Hash128 GetGuidForAssetExport(Object asset) Parameters Type Name Description Object asset Returns Type Description Hash128"
  },
  "api/Global-Namespace.GameObjectConversionSystem.GetPrimaryEntity.html": {
    "href": "api/Global-Namespace.GameObjectConversionSystem.GetPrimaryEntity.html",
    "title": "Method GetPrimaryEntity | Entities | 0.17.0-preview.18",
    "keywords": "Method GetPrimaryEntity GetPrimaryEntity(Object) Returns the primary entity associated with the given object. This entity is from the destination world. Declaration public Entity GetPrimaryEntity(Object uobject) Parameters Type Name Description Object uobject The object to get the primary entity for. Returns Type Description Entity The primary entity associated with the given entity. This is the null entity if there is no primary entity for the object. GetPrimaryEntity(Component) Returns the primary entity associated with the given GameObject of the given component. This entity is from the destination world. Declaration public Entity GetPrimaryEntity(Component component) Parameters Type Name Description Component component The component for whose GameObject to get the primary entity for. Returns Type Description Entity The primary entity associated with the given entity. This is the null entity if there is no primary entity for the object."
  },
  "api/Global-Namespace.GameObjectConversionSystem.GetSceneSectionEntity.html": {
    "href": "api/Global-Namespace.GameObjectConversionSystem.GetSceneSectionEntity.html",
    "title": "Method GetSceneSectionEntity | Entities | 0.17.0-preview.18",
    "keywords": "Method GetSceneSectionEntity GetSceneSectionEntity(Entity) Gets the entity representing the scene section of the entity passed in, the section entity is created if it doesn't already exist. Metadata components added to this section entity will be serialized into the entity scene header. At runtime these components will be added to the scene section entities when the scene is resolved. Only struct IComponentData components without BlobAssetReferences or Entity members are supported. Declaration public Entity GetSceneSectionEntity(Entity entity) Parameters Type Name Description Entity entity The entity for which to get the scene section entity Returns Type Description Entity The entity representing the scene section"
  },
  "api/Global-Namespace.GameObjectConversionSystem.HasPrimaryEntity.html": {
    "href": "api/Global-Namespace.GameObjectConversionSystem.HasPrimaryEntity.html",
    "title": "Method HasPrimaryEntity | Entities | 0.17.0-preview.18",
    "keywords": "Method HasPrimaryEntity HasPrimaryEntity(Object) Returns true if the uobject is included in the set of converted objects. Declaration public bool HasPrimaryEntity(Object uobject) Parameters Type Name Description Object uobject Returns Type Description Boolean HasPrimaryEntity(Component) Returns true if the GameObject owning component is included in the set of converted objects. Declaration public bool HasPrimaryEntity(Component component) Parameters Type Name Description Component component Returns Type Description Boolean"
  },
  "api/Global-Namespace.GameObjectConversionSystem.OnCreate.html": {
    "href": "api/Global-Namespace.GameObjectConversionSystem.OnCreate.html",
    "title": "Method OnCreate | Entities | 0.17.0-preview.18",
    "keywords": "Method OnCreate OnCreate() Declaration protected override void OnCreate() Overrides ComponentSystemBase.OnCreate()"
  },
  "api/Global-Namespace.GameObjectConversionSystem.TryCreateAssetExportWriter.html": {
    "href": "api/Global-Namespace.GameObjectConversionSystem.TryCreateAssetExportWriter.html",
    "title": "Method TryCreateAssetExportWriter | Entities | 0.17.0-preview.18",
    "keywords": "Method TryCreateAssetExportWriter TryCreateAssetExportWriter(Object) Declaration public Stream TryCreateAssetExportWriter(Object asset) Parameters Type Name Description Object asset Returns Type Description Stream"
  },
  "api/Global-Namespace.GameObjectConversionSystem.TryGetPrimaryEntity.html": {
    "href": "api/Global-Namespace.GameObjectConversionSystem.TryGetPrimaryEntity.html",
    "title": "Method TryGetPrimaryEntity | Entities | 0.17.0-preview.18",
    "keywords": "Method TryGetPrimaryEntity TryGetPrimaryEntity(Object) Declaration public Entity TryGetPrimaryEntity(Object uobject) Parameters Type Name Description Object uobject Returns Type Description Entity TryGetPrimaryEntity(Component) Declaration public Entity TryGetPrimaryEntity(Component component) Parameters Type Name Description Component component Returns Type Description Entity"
  },
  "api/Global-Namespace.LambdaForEachDescriptionConstructionMethods.ForEach.html": {
    "href": "api/Global-Namespace.LambdaForEachDescriptionConstructionMethods.ForEach.html",
    "title": "Method ForEach | Entities | 0.17.0-preview.18",
    "keywords": "Method ForEach ForEach<TDescription, T0>(TDescription, R<T0>) Declaration public static TDescription ForEach<TDescription, T0>(this TDescription description, R<T0> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description R <T0> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 ForEach<TDescription, T0>(TDescription, I<T0>) Declaration public static TDescription ForEach<TDescription, T0>(this TDescription description, I<T0> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description I <T0> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 ForEach<TDescription, T0>(TDescription, V<T0>) Declaration public static TDescription ForEach<TDescription, T0>(this TDescription description, V<T0> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description V <T0> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 ForEach<TDescription, T0, T1>(TDescription, RI<T0, T1>) Declaration public static TDescription ForEach<TDescription, T0, T1>(this TDescription description, RI<T0, T1> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description RI <T0, T1> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 ForEach<TDescription, T0, T1>(TDescription, RR<T0, T1>) Declaration public static TDescription ForEach<TDescription, T0, T1>(this TDescription description, RR<T0, T1> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description RR <T0, T1> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 ForEach<TDescription, T0, T1>(TDescription, II<T0, T1>) Declaration public static TDescription ForEach<TDescription, T0, T1>(this TDescription description, II<T0, T1> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description II <T0, T1> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 ForEach<TDescription, T0, T1>(TDescription, VI<T0, T1>) Declaration public static TDescription ForEach<TDescription, T0, T1>(this TDescription description, VI<T0, T1> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VI <T0, T1> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 ForEach<TDescription, T0, T1>(TDescription, VR<T0, T1>) Declaration public static TDescription ForEach<TDescription, T0, T1>(this TDescription description, VR<T0, T1> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VR <T0, T1> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 ForEach<TDescription, T0, T1>(TDescription, VV<T0, T1>) Declaration public static TDescription ForEach<TDescription, T0, T1>(this TDescription description, VV<T0, T1> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VV <T0, T1> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 ForEach<TDescription, T0, T1, T2>(TDescription, RII<T0, T1, T2>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2>(this TDescription description, RII<T0, T1, T2> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description RII <T0, T1, T2> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 ForEach<TDescription, T0, T1, T2>(TDescription, RRI<T0, T1, T2>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2>(this TDescription description, RRI<T0, T1, T2> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description RRI <T0, T1, T2> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 ForEach<TDescription, T0, T1, T2>(TDescription, RRR<T0, T1, T2>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2>(this TDescription description, RRR<T0, T1, T2> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description RRR <T0, T1, T2> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 ForEach<TDescription, T0, T1, T2>(TDescription, III<T0, T1, T2>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2>(this TDescription description, III<T0, T1, T2> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description III <T0, T1, T2> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 ForEach<TDescription, T0, T1, T2>(TDescription, VII<T0, T1, T2>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2>(this TDescription description, VII<T0, T1, T2> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VII <T0, T1, T2> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 ForEach<TDescription, T0, T1, T2>(TDescription, VRI<T0, T1, T2>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2>(this TDescription description, VRI<T0, T1, T2> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VRI <T0, T1, T2> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 ForEach<TDescription, T0, T1, T2>(TDescription, VRR<T0, T1, T2>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2>(this TDescription description, VRR<T0, T1, T2> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VRR <T0, T1, T2> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 ForEach<TDescription, T0, T1, T2>(TDescription, VVI<T0, T1, T2>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2>(this TDescription description, VVI<T0, T1, T2> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VVI <T0, T1, T2> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 ForEach<TDescription, T0, T1, T2>(TDescription, VVR<T0, T1, T2>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2>(this TDescription description, VVR<T0, T1, T2> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VVR <T0, T1, T2> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 ForEach<TDescription, T0, T1, T2>(TDescription, VVV<T0, T1, T2>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2>(this TDescription description, VVV<T0, T1, T2> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VVV <T0, T1, T2> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 ForEach<TDescription, T0, T1, T2, T3>(TDescription, RIII<T0, T1, T2, T3>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3>(this TDescription description, RIII<T0, T1, T2, T3> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description RIII <T0, T1, T2, T3> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 ForEach<TDescription, T0, T1, T2, T3>(TDescription, RRII<T0, T1, T2, T3>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3>(this TDescription description, RRII<T0, T1, T2, T3> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description RRII <T0, T1, T2, T3> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 ForEach<TDescription, T0, T1, T2, T3>(TDescription, RRRI<T0, T1, T2, T3>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3>(this TDescription description, RRRI<T0, T1, T2, T3> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description RRRI <T0, T1, T2, T3> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 ForEach<TDescription, T0, T1, T2, T3>(TDescription, RRRR<T0, T1, T2, T3>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3>(this TDescription description, RRRR<T0, T1, T2, T3> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description RRRR <T0, T1, T2, T3> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 ForEach<TDescription, T0, T1, T2, T3>(TDescription, IIII<T0, T1, T2, T3>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3>(this TDescription description, IIII<T0, T1, T2, T3> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description IIII <T0, T1, T2, T3> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 ForEach<TDescription, T0, T1, T2, T3>(TDescription, VIII<T0, T1, T2, T3>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3>(this TDescription description, VIII<T0, T1, T2, T3> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VIII <T0, T1, T2, T3> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 ForEach<TDescription, T0, T1, T2, T3>(TDescription, VRII<T0, T1, T2, T3>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3>(this TDescription description, VRII<T0, T1, T2, T3> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VRII <T0, T1, T2, T3> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 ForEach<TDescription, T0, T1, T2, T3>(TDescription, VRRI<T0, T1, T2, T3>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3>(this TDescription description, VRRI<T0, T1, T2, T3> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VRRI <T0, T1, T2, T3> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 ForEach<TDescription, T0, T1, T2, T3>(TDescription, VRRR<T0, T1, T2, T3>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3>(this TDescription description, VRRR<T0, T1, T2, T3> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VRRR <T0, T1, T2, T3> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 ForEach<TDescription, T0, T1, T2, T3>(TDescription, VVII<T0, T1, T2, T3>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3>(this TDescription description, VVII<T0, T1, T2, T3> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VVII <T0, T1, T2, T3> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 ForEach<TDescription, T0, T1, T2, T3>(TDescription, VVRI<T0, T1, T2, T3>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3>(this TDescription description, VVRI<T0, T1, T2, T3> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VVRI <T0, T1, T2, T3> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 ForEach<TDescription, T0, T1, T2, T3>(TDescription, VVRR<T0, T1, T2, T3>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3>(this TDescription description, VVRR<T0, T1, T2, T3> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VVRR <T0, T1, T2, T3> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 ForEach<TDescription, T0, T1, T2, T3>(TDescription, VVVI<T0, T1, T2, T3>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3>(this TDescription description, VVVI<T0, T1, T2, T3> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VVVI <T0, T1, T2, T3> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 ForEach<TDescription, T0, T1, T2, T3>(TDescription, VVVR<T0, T1, T2, T3>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3>(this TDescription description, VVVR<T0, T1, T2, T3> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VVVR <T0, T1, T2, T3> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 ForEach<TDescription, T0, T1, T2, T3>(TDescription, VVVV<T0, T1, T2, T3>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3>(this TDescription description, VVVV<T0, T1, T2, T3> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VVVV <T0, T1, T2, T3> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, RIIII<T0, T1, T2, T3, T4>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4>(this TDescription description, RIIII<T0, T1, T2, T3, T4> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description RIIII <T0, T1, T2, T3, T4> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, RRIII<T0, T1, T2, T3, T4>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4>(this TDescription description, RRIII<T0, T1, T2, T3, T4> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description RRIII <T0, T1, T2, T3, T4> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, RRRII<T0, T1, T2, T3, T4>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4>(this TDescription description, RRRII<T0, T1, T2, T3, T4> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description RRRII <T0, T1, T2, T3, T4> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, RRRRI<T0, T1, T2, T3, T4>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4>(this TDescription description, RRRRI<T0, T1, T2, T3, T4> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description RRRRI <T0, T1, T2, T3, T4> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, RRRRR<T0, T1, T2, T3, T4>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4>(this TDescription description, RRRRR<T0, T1, T2, T3, T4> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description RRRRR <T0, T1, T2, T3, T4> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, IIIII<T0, T1, T2, T3, T4>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4>(this TDescription description, IIIII<T0, T1, T2, T3, T4> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description IIIII <T0, T1, T2, T3, T4> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, VIIII<T0, T1, T2, T3, T4>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4>(this TDescription description, VIIII<T0, T1, T2, T3, T4> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VIIII <T0, T1, T2, T3, T4> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, VRIII<T0, T1, T2, T3, T4>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4>(this TDescription description, VRIII<T0, T1, T2, T3, T4> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VRIII <T0, T1, T2, T3, T4> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, VRRII<T0, T1, T2, T3, T4>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4>(this TDescription description, VRRII<T0, T1, T2, T3, T4> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VRRII <T0, T1, T2, T3, T4> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, VRRRI<T0, T1, T2, T3, T4>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4>(this TDescription description, VRRRI<T0, T1, T2, T3, T4> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VRRRI <T0, T1, T2, T3, T4> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, VRRRR<T0, T1, T2, T3, T4>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4>(this TDescription description, VRRRR<T0, T1, T2, T3, T4> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VRRRR <T0, T1, T2, T3, T4> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, VVIII<T0, T1, T2, T3, T4>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4>(this TDescription description, VVIII<T0, T1, T2, T3, T4> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VVIII <T0, T1, T2, T3, T4> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, VVRII<T0, T1, T2, T3, T4>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4>(this TDescription description, VVRII<T0, T1, T2, T3, T4> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VVRII <T0, T1, T2, T3, T4> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, VVRRI<T0, T1, T2, T3, T4>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4>(this TDescription description, VVRRI<T0, T1, T2, T3, T4> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VVRRI <T0, T1, T2, T3, T4> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, VVRRR<T0, T1, T2, T3, T4>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4>(this TDescription description, VVRRR<T0, T1, T2, T3, T4> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VVRRR <T0, T1, T2, T3, T4> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, VVVII<T0, T1, T2, T3, T4>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4>(this TDescription description, VVVII<T0, T1, T2, T3, T4> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VVVII <T0, T1, T2, T3, T4> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, VVVRI<T0, T1, T2, T3, T4>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4>(this TDescription description, VVVRI<T0, T1, T2, T3, T4> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VVVRI <T0, T1, T2, T3, T4> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, VVVRR<T0, T1, T2, T3, T4>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4>(this TDescription description, VVVRR<T0, T1, T2, T3, T4> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VVVRR <T0, T1, T2, T3, T4> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, VVVVI<T0, T1, T2, T3, T4>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4>(this TDescription description, VVVVI<T0, T1, T2, T3, T4> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VVVVI <T0, T1, T2, T3, T4> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, VVVVR<T0, T1, T2, T3, T4>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4>(this TDescription description, VVVVR<T0, T1, T2, T3, T4> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VVVVR <T0, T1, T2, T3, T4> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, VVVVV<T0, T1, T2, T3, T4>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4>(this TDescription description, VVVVV<T0, T1, T2, T3, T4> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VVVVV <T0, T1, T2, T3, T4> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, RIIIII<T0, T1, T2, T3, T4, T5>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5>(this TDescription description, RIIIII<T0, T1, T2, T3, T4, T5> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description RIIIII <T0, T1, T2, T3, T4, T5> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, RRIIII<T0, T1, T2, T3, T4, T5>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5>(this TDescription description, RRIIII<T0, T1, T2, T3, T4, T5> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description RRIIII <T0, T1, T2, T3, T4, T5> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, RRRIII<T0, T1, T2, T3, T4, T5>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5>(this TDescription description, RRRIII<T0, T1, T2, T3, T4, T5> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description RRRIII <T0, T1, T2, T3, T4, T5> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, RRRRII<T0, T1, T2, T3, T4, T5>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5>(this TDescription description, RRRRII<T0, T1, T2, T3, T4, T5> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description RRRRII <T0, T1, T2, T3, T4, T5> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, RRRRRI<T0, T1, T2, T3, T4, T5>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5>(this TDescription description, RRRRRI<T0, T1, T2, T3, T4, T5> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description RRRRRI <T0, T1, T2, T3, T4, T5> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, RRRRRR<T0, T1, T2, T3, T4, T5>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5>(this TDescription description, RRRRRR<T0, T1, T2, T3, T4, T5> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description RRRRRR <T0, T1, T2, T3, T4, T5> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, IIIIII<T0, T1, T2, T3, T4, T5>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5>(this TDescription description, IIIIII<T0, T1, T2, T3, T4, T5> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description IIIIII <T0, T1, T2, T3, T4, T5> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, VIIIII<T0, T1, T2, T3, T4, T5>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5>(this TDescription description, VIIIII<T0, T1, T2, T3, T4, T5> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VIIIII <T0, T1, T2, T3, T4, T5> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, VRIIII<T0, T1, T2, T3, T4, T5>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5>(this TDescription description, VRIIII<T0, T1, T2, T3, T4, T5> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VRIIII <T0, T1, T2, T3, T4, T5> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, VRRIII<T0, T1, T2, T3, T4, T5>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5>(this TDescription description, VRRIII<T0, T1, T2, T3, T4, T5> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VRRIII <T0, T1, T2, T3, T4, T5> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, VRRRII<T0, T1, T2, T3, T4, T5>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5>(this TDescription description, VRRRII<T0, T1, T2, T3, T4, T5> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VRRRII <T0, T1, T2, T3, T4, T5> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, VRRRRI<T0, T1, T2, T3, T4, T5>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5>(this TDescription description, VRRRRI<T0, T1, T2, T3, T4, T5> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VRRRRI <T0, T1, T2, T3, T4, T5> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, VRRRRR<T0, T1, T2, T3, T4, T5>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5>(this TDescription description, VRRRRR<T0, T1, T2, T3, T4, T5> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VRRRRR <T0, T1, T2, T3, T4, T5> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, VVIIII<T0, T1, T2, T3, T4, T5>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5>(this TDescription description, VVIIII<T0, T1, T2, T3, T4, T5> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VVIIII <T0, T1, T2, T3, T4, T5> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, VVRIII<T0, T1, T2, T3, T4, T5>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5>(this TDescription description, VVRIII<T0, T1, T2, T3, T4, T5> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VVRIII <T0, T1, T2, T3, T4, T5> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, VVRRII<T0, T1, T2, T3, T4, T5>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5>(this TDescription description, VVRRII<T0, T1, T2, T3, T4, T5> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VVRRII <T0, T1, T2, T3, T4, T5> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, VVRRRI<T0, T1, T2, T3, T4, T5>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5>(this TDescription description, VVRRRI<T0, T1, T2, T3, T4, T5> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VVRRRI <T0, T1, T2, T3, T4, T5> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, VVRRRR<T0, T1, T2, T3, T4, T5>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5>(this TDescription description, VVRRRR<T0, T1, T2, T3, T4, T5> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VVRRRR <T0, T1, T2, T3, T4, T5> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, VVVIII<T0, T1, T2, T3, T4, T5>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5>(this TDescription description, VVVIII<T0, T1, T2, T3, T4, T5> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VVVIII <T0, T1, T2, T3, T4, T5> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, VVVRII<T0, T1, T2, T3, T4, T5>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5>(this TDescription description, VVVRII<T0, T1, T2, T3, T4, T5> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VVVRII <T0, T1, T2, T3, T4, T5> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, VVVRRI<T0, T1, T2, T3, T4, T5>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5>(this TDescription description, VVVRRI<T0, T1, T2, T3, T4, T5> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VVVRRI <T0, T1, T2, T3, T4, T5> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, VVVRRR<T0, T1, T2, T3, T4, T5>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5>(this TDescription description, VVVRRR<T0, T1, T2, T3, T4, T5> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VVVRRR <T0, T1, T2, T3, T4, T5> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, VVVVII<T0, T1, T2, T3, T4, T5>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5>(this TDescription description, VVVVII<T0, T1, T2, T3, T4, T5> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VVVVII <T0, T1, T2, T3, T4, T5> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, VVVVRI<T0, T1, T2, T3, T4, T5>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5>(this TDescription description, VVVVRI<T0, T1, T2, T3, T4, T5> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VVVVRI <T0, T1, T2, T3, T4, T5> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, VVVVRR<T0, T1, T2, T3, T4, T5>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5>(this TDescription description, VVVVRR<T0, T1, T2, T3, T4, T5> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VVVVRR <T0, T1, T2, T3, T4, T5> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, VVVVVI<T0, T1, T2, T3, T4, T5>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5>(this TDescription description, VVVVVI<T0, T1, T2, T3, T4, T5> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VVVVVI <T0, T1, T2, T3, T4, T5> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, VVVVVR<T0, T1, T2, T3, T4, T5>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5>(this TDescription description, VVVVVR<T0, T1, T2, T3, T4, T5> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VVVVVR <T0, T1, T2, T3, T4, T5> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, VVVVVV<T0, T1, T2, T3, T4, T5>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5>(this TDescription description, VVVVVV<T0, T1, T2, T3, T4, T5> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VVVVVV <T0, T1, T2, T3, T4, T5> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, RIIIIII<T0, T1, T2, T3, T4, T5, T6>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(this TDescription description, RIIIIII<T0, T1, T2, T3, T4, T5, T6> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description RIIIIII <T0, T1, T2, T3, T4, T5, T6> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 T6 ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, RRIIIII<T0, T1, T2, T3, T4, T5, T6>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(this TDescription description, RRIIIII<T0, T1, T2, T3, T4, T5, T6> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description RRIIIII <T0, T1, T2, T3, T4, T5, T6> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 T6 ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, RRRIIII<T0, T1, T2, T3, T4, T5, T6>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(this TDescription description, RRRIIII<T0, T1, T2, T3, T4, T5, T6> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description RRRIIII <T0, T1, T2, T3, T4, T5, T6> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 T6 ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, RRRRIII<T0, T1, T2, T3, T4, T5, T6>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(this TDescription description, RRRRIII<T0, T1, T2, T3, T4, T5, T6> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description RRRRIII <T0, T1, T2, T3, T4, T5, T6> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 T6 ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, RRRRRII<T0, T1, T2, T3, T4, T5, T6>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(this TDescription description, RRRRRII<T0, T1, T2, T3, T4, T5, T6> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description RRRRRII <T0, T1, T2, T3, T4, T5, T6> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 T6 ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, RRRRRRI<T0, T1, T2, T3, T4, T5, T6>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(this TDescription description, RRRRRRI<T0, T1, T2, T3, T4, T5, T6> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description RRRRRRI <T0, T1, T2, T3, T4, T5, T6> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 T6 ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, RRRRRRR<T0, T1, T2, T3, T4, T5, T6>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(this TDescription description, RRRRRRR<T0, T1, T2, T3, T4, T5, T6> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description RRRRRRR <T0, T1, T2, T3, T4, T5, T6> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 T6 ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, IIIIIII<T0, T1, T2, T3, T4, T5, T6>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(this TDescription description, IIIIIII<T0, T1, T2, T3, T4, T5, T6> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description IIIIIII <T0, T1, T2, T3, T4, T5, T6> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 T6 ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, VIIIIII<T0, T1, T2, T3, T4, T5, T6>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(this TDescription description, VIIIIII<T0, T1, T2, T3, T4, T5, T6> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VIIIIII <T0, T1, T2, T3, T4, T5, T6> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 T6 ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, VRIIIII<T0, T1, T2, T3, T4, T5, T6>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(this TDescription description, VRIIIII<T0, T1, T2, T3, T4, T5, T6> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VRIIIII <T0, T1, T2, T3, T4, T5, T6> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 T6 ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, VRRIIII<T0, T1, T2, T3, T4, T5, T6>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(this TDescription description, VRRIIII<T0, T1, T2, T3, T4, T5, T6> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VRRIIII <T0, T1, T2, T3, T4, T5, T6> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 T6 ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, VRRRIII<T0, T1, T2, T3, T4, T5, T6>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(this TDescription description, VRRRIII<T0, T1, T2, T3, T4, T5, T6> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VRRRIII <T0, T1, T2, T3, T4, T5, T6> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 T6 ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, VRRRRII<T0, T1, T2, T3, T4, T5, T6>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(this TDescription description, VRRRRII<T0, T1, T2, T3, T4, T5, T6> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VRRRRII <T0, T1, T2, T3, T4, T5, T6> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 T6 ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, VRRRRRI<T0, T1, T2, T3, T4, T5, T6>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(this TDescription description, VRRRRRI<T0, T1, T2, T3, T4, T5, T6> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VRRRRRI <T0, T1, T2, T3, T4, T5, T6> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 T6 ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, VRRRRRR<T0, T1, T2, T3, T4, T5, T6>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(this TDescription description, VRRRRRR<T0, T1, T2, T3, T4, T5, T6> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VRRRRRR <T0, T1, T2, T3, T4, T5, T6> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 T6 ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, VVIIIII<T0, T1, T2, T3, T4, T5, T6>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(this TDescription description, VVIIIII<T0, T1, T2, T3, T4, T5, T6> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VVIIIII <T0, T1, T2, T3, T4, T5, T6> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 T6 ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, VVRIIII<T0, T1, T2, T3, T4, T5, T6>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(this TDescription description, VVRIIII<T0, T1, T2, T3, T4, T5, T6> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VVRIIII <T0, T1, T2, T3, T4, T5, T6> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 T6 ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, VVRRIII<T0, T1, T2, T3, T4, T5, T6>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(this TDescription description, VVRRIII<T0, T1, T2, T3, T4, T5, T6> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VVRRIII <T0, T1, T2, T3, T4, T5, T6> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 T6 ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, VVRRRII<T0, T1, T2, T3, T4, T5, T6>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(this TDescription description, VVRRRII<T0, T1, T2, T3, T4, T5, T6> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VVRRRII <T0, T1, T2, T3, T4, T5, T6> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 T6 ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, VVRRRRI<T0, T1, T2, T3, T4, T5, T6>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(this TDescription description, VVRRRRI<T0, T1, T2, T3, T4, T5, T6> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VVRRRRI <T0, T1, T2, T3, T4, T5, T6> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 T6 ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, VVRRRRR<T0, T1, T2, T3, T4, T5, T6>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(this TDescription description, VVRRRRR<T0, T1, T2, T3, T4, T5, T6> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VVRRRRR <T0, T1, T2, T3, T4, T5, T6> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 T6 ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, VVVIIII<T0, T1, T2, T3, T4, T5, T6>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(this TDescription description, VVVIIII<T0, T1, T2, T3, T4, T5, T6> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VVVIIII <T0, T1, T2, T3, T4, T5, T6> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 T6 ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, VVVRIII<T0, T1, T2, T3, T4, T5, T6>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(this TDescription description, VVVRIII<T0, T1, T2, T3, T4, T5, T6> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VVVRIII <T0, T1, T2, T3, T4, T5, T6> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 T6 ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, VVVRRII<T0, T1, T2, T3, T4, T5, T6>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(this TDescription description, VVVRRII<T0, T1, T2, T3, T4, T5, T6> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VVVRRII <T0, T1, T2, T3, T4, T5, T6> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 T6 ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, VVVRRRI<T0, T1, T2, T3, T4, T5, T6>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(this TDescription description, VVVRRRI<T0, T1, T2, T3, T4, T5, T6> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VVVRRRI <T0, T1, T2, T3, T4, T5, T6> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 T6 ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, VVVRRRR<T0, T1, T2, T3, T4, T5, T6>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(this TDescription description, VVVRRRR<T0, T1, T2, T3, T4, T5, T6> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VVVRRRR <T0, T1, T2, T3, T4, T5, T6> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 T6 ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, VVVVIII<T0, T1, T2, T3, T4, T5, T6>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(this TDescription description, VVVVIII<T0, T1, T2, T3, T4, T5, T6> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VVVVIII <T0, T1, T2, T3, T4, T5, T6> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 T6 ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, VVVVRII<T0, T1, T2, T3, T4, T5, T6>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(this TDescription description, VVVVRII<T0, T1, T2, T3, T4, T5, T6> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VVVVRII <T0, T1, T2, T3, T4, T5, T6> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 T6 ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, VVVVRRI<T0, T1, T2, T3, T4, T5, T6>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(this TDescription description, VVVVRRI<T0, T1, T2, T3, T4, T5, T6> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VVVVRRI <T0, T1, T2, T3, T4, T5, T6> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 T6 ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, VVVVRRR<T0, T1, T2, T3, T4, T5, T6>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(this TDescription description, VVVVRRR<T0, T1, T2, T3, T4, T5, T6> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VVVVRRR <T0, T1, T2, T3, T4, T5, T6> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 T6 ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, VVVVVII<T0, T1, T2, T3, T4, T5, T6>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(this TDescription description, VVVVVII<T0, T1, T2, T3, T4, T5, T6> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VVVVVII <T0, T1, T2, T3, T4, T5, T6> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 T6 ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, VVVVVRI<T0, T1, T2, T3, T4, T5, T6>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(this TDescription description, VVVVVRI<T0, T1, T2, T3, T4, T5, T6> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VVVVVRI <T0, T1, T2, T3, T4, T5, T6> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 T6 ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, VVVVVRR<T0, T1, T2, T3, T4, T5, T6>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(this TDescription description, VVVVVRR<T0, T1, T2, T3, T4, T5, T6> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VVVVVRR <T0, T1, T2, T3, T4, T5, T6> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 T6 ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, VVVVVVI<T0, T1, T2, T3, T4, T5, T6>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(this TDescription description, VVVVVVI<T0, T1, T2, T3, T4, T5, T6> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VVVVVVI <T0, T1, T2, T3, T4, T5, T6> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 T6 ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, VVVVVVR<T0, T1, T2, T3, T4, T5, T6>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(this TDescription description, VVVVVVR<T0, T1, T2, T3, T4, T5, T6> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VVVVVVR <T0, T1, T2, T3, T4, T5, T6> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 T6 ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, VVVVVVV<T0, T1, T2, T3, T4, T5, T6>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(this TDescription description, VVVVVVV<T0, T1, T2, T3, T4, T5, T6> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VVVVVVV <T0, T1, T2, T3, T4, T5, T6> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 T6 ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, RIIIIIII<T0, T1, T2, T3, T4, T5, T6, T7>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(this TDescription description, RIIIIIII<T0, T1, T2, T3, T4, T5, T6, T7> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description RIIIIIII <T0, T1, T2, T3, T4, T5, T6, T7> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 T6 T7 ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, RRIIIIII<T0, T1, T2, T3, T4, T5, T6, T7>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(this TDescription description, RRIIIIII<T0, T1, T2, T3, T4, T5, T6, T7> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description RRIIIIII <T0, T1, T2, T3, T4, T5, T6, T7> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 T6 T7 ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, RRRIIIII<T0, T1, T2, T3, T4, T5, T6, T7>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(this TDescription description, RRRIIIII<T0, T1, T2, T3, T4, T5, T6, T7> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description RRRIIIII <T0, T1, T2, T3, T4, T5, T6, T7> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 T6 T7 ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, RRRRIIII<T0, T1, T2, T3, T4, T5, T6, T7>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(this TDescription description, RRRRIIII<T0, T1, T2, T3, T4, T5, T6, T7> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description RRRRIIII <T0, T1, T2, T3, T4, T5, T6, T7> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 T6 T7 ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, RRRRRIII<T0, T1, T2, T3, T4, T5, T6, T7>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(this TDescription description, RRRRRIII<T0, T1, T2, T3, T4, T5, T6, T7> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description RRRRRIII <T0, T1, T2, T3, T4, T5, T6, T7> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 T6 T7 ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, RRRRRRII<T0, T1, T2, T3, T4, T5, T6, T7>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(this TDescription description, RRRRRRII<T0, T1, T2, T3, T4, T5, T6, T7> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description RRRRRRII <T0, T1, T2, T3, T4, T5, T6, T7> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 T6 T7 ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, RRRRRRRI<T0, T1, T2, T3, T4, T5, T6, T7>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(this TDescription description, RRRRRRRI<T0, T1, T2, T3, T4, T5, T6, T7> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description RRRRRRRI <T0, T1, T2, T3, T4, T5, T6, T7> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 T6 T7 ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, RRRRRRRR<T0, T1, T2, T3, T4, T5, T6, T7>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(this TDescription description, RRRRRRRR<T0, T1, T2, T3, T4, T5, T6, T7> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description RRRRRRRR <T0, T1, T2, T3, T4, T5, T6, T7> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 T6 T7 ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, IIIIIIII<T0, T1, T2, T3, T4, T5, T6, T7>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(this TDescription description, IIIIIIII<T0, T1, T2, T3, T4, T5, T6, T7> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description IIIIIIII <T0, T1, T2, T3, T4, T5, T6, T7> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 T6 T7 ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VIIIIIII<T0, T1, T2, T3, T4, T5, T6, T7>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(this TDescription description, VIIIIIII<T0, T1, T2, T3, T4, T5, T6, T7> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VIIIIIII <T0, T1, T2, T3, T4, T5, T6, T7> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 T6 T7 ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VRIIIIII<T0, T1, T2, T3, T4, T5, T6, T7>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(this TDescription description, VRIIIIII<T0, T1, T2, T3, T4, T5, T6, T7> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VRIIIIII <T0, T1, T2, T3, T4, T5, T6, T7> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 T6 T7 ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VRRIIIII<T0, T1, T2, T3, T4, T5, T6, T7>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(this TDescription description, VRRIIIII<T0, T1, T2, T3, T4, T5, T6, T7> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VRRIIIII <T0, T1, T2, T3, T4, T5, T6, T7> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 T6 T7 ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VRRRIIII<T0, T1, T2, T3, T4, T5, T6, T7>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(this TDescription description, VRRRIIII<T0, T1, T2, T3, T4, T5, T6, T7> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VRRRIIII <T0, T1, T2, T3, T4, T5, T6, T7> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 T6 T7 ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VRRRRIII<T0, T1, T2, T3, T4, T5, T6, T7>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(this TDescription description, VRRRRIII<T0, T1, T2, T3, T4, T5, T6, T7> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VRRRRIII <T0, T1, T2, T3, T4, T5, T6, T7> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 T6 T7 ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VRRRRRII<T0, T1, T2, T3, T4, T5, T6, T7>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(this TDescription description, VRRRRRII<T0, T1, T2, T3, T4, T5, T6, T7> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VRRRRRII <T0, T1, T2, T3, T4, T5, T6, T7> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 T6 T7 ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VRRRRRRI<T0, T1, T2, T3, T4, T5, T6, T7>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(this TDescription description, VRRRRRRI<T0, T1, T2, T3, T4, T5, T6, T7> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VRRRRRRI <T0, T1, T2, T3, T4, T5, T6, T7> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 T6 T7 ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VRRRRRRR<T0, T1, T2, T3, T4, T5, T6, T7>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(this TDescription description, VRRRRRRR<T0, T1, T2, T3, T4, T5, T6, T7> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VRRRRRRR <T0, T1, T2, T3, T4, T5, T6, T7> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 T6 T7 ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VVIIIIII<T0, T1, T2, T3, T4, T5, T6, T7>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(this TDescription description, VVIIIIII<T0, T1, T2, T3, T4, T5, T6, T7> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VVIIIIII <T0, T1, T2, T3, T4, T5, T6, T7> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 T6 T7 ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VVRIIIII<T0, T1, T2, T3, T4, T5, T6, T7>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(this TDescription description, VVRIIIII<T0, T1, T2, T3, T4, T5, T6, T7> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VVRIIIII <T0, T1, T2, T3, T4, T5, T6, T7> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 T6 T7 ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VVRRIIII<T0, T1, T2, T3, T4, T5, T6, T7>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(this TDescription description, VVRRIIII<T0, T1, T2, T3, T4, T5, T6, T7> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VVRRIIII <T0, T1, T2, T3, T4, T5, T6, T7> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 T6 T7 ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VVRRRIII<T0, T1, T2, T3, T4, T5, T6, T7>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(this TDescription description, VVRRRIII<T0, T1, T2, T3, T4, T5, T6, T7> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VVRRRIII <T0, T1, T2, T3, T4, T5, T6, T7> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 T6 T7 ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VVRRRRII<T0, T1, T2, T3, T4, T5, T6, T7>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(this TDescription description, VVRRRRII<T0, T1, T2, T3, T4, T5, T6, T7> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VVRRRRII <T0, T1, T2, T3, T4, T5, T6, T7> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 T6 T7 ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VVRRRRRI<T0, T1, T2, T3, T4, T5, T6, T7>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(this TDescription description, VVRRRRRI<T0, T1, T2, T3, T4, T5, T6, T7> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VVRRRRRI <T0, T1, T2, T3, T4, T5, T6, T7> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 T6 T7 ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VVRRRRRR<T0, T1, T2, T3, T4, T5, T6, T7>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(this TDescription description, VVRRRRRR<T0, T1, T2, T3, T4, T5, T6, T7> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VVRRRRRR <T0, T1, T2, T3, T4, T5, T6, T7> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 T6 T7 ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VVVIIIII<T0, T1, T2, T3, T4, T5, T6, T7>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(this TDescription description, VVVIIIII<T0, T1, T2, T3, T4, T5, T6, T7> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VVVIIIII <T0, T1, T2, T3, T4, T5, T6, T7> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 T6 T7 ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VVVRIIII<T0, T1, T2, T3, T4, T5, T6, T7>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(this TDescription description, VVVRIIII<T0, T1, T2, T3, T4, T5, T6, T7> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VVVRIIII <T0, T1, T2, T3, T4, T5, T6, T7> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 T6 T7 ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VVVRRIII<T0, T1, T2, T3, T4, T5, T6, T7>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(this TDescription description, VVVRRIII<T0, T1, T2, T3, T4, T5, T6, T7> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VVVRRIII <T0, T1, T2, T3, T4, T5, T6, T7> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 T6 T7 ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VVVRRRII<T0, T1, T2, T3, T4, T5, T6, T7>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(this TDescription description, VVVRRRII<T0, T1, T2, T3, T4, T5, T6, T7> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VVVRRRII <T0, T1, T2, T3, T4, T5, T6, T7> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 T6 T7 ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VVVRRRRI<T0, T1, T2, T3, T4, T5, T6, T7>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(this TDescription description, VVVRRRRI<T0, T1, T2, T3, T4, T5, T6, T7> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VVVRRRRI <T0, T1, T2, T3, T4, T5, T6, T7> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 T6 T7 ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VVVRRRRR<T0, T1, T2, T3, T4, T5, T6, T7>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(this TDescription description, VVVRRRRR<T0, T1, T2, T3, T4, T5, T6, T7> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VVVRRRRR <T0, T1, T2, T3, T4, T5, T6, T7> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 T6 T7 ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VVVVIIII<T0, T1, T2, T3, T4, T5, T6, T7>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(this TDescription description, VVVVIIII<T0, T1, T2, T3, T4, T5, T6, T7> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VVVVIIII <T0, T1, T2, T3, T4, T5, T6, T7> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 T6 T7 ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VVVVRIII<T0, T1, T2, T3, T4, T5, T6, T7>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(this TDescription description, VVVVRIII<T0, T1, T2, T3, T4, T5, T6, T7> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VVVVRIII <T0, T1, T2, T3, T4, T5, T6, T7> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 T6 T7 ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VVVVRRII<T0, T1, T2, T3, T4, T5, T6, T7>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(this TDescription description, VVVVRRII<T0, T1, T2, T3, T4, T5, T6, T7> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VVVVRRII <T0, T1, T2, T3, T4, T5, T6, T7> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 T6 T7 ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VVVVRRRI<T0, T1, T2, T3, T4, T5, T6, T7>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(this TDescription description, VVVVRRRI<T0, T1, T2, T3, T4, T5, T6, T7> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VVVVRRRI <T0, T1, T2, T3, T4, T5, T6, T7> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 T6 T7 ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VVVVRRRR<T0, T1, T2, T3, T4, T5, T6, T7>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(this TDescription description, VVVVRRRR<T0, T1, T2, T3, T4, T5, T6, T7> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VVVVRRRR <T0, T1, T2, T3, T4, T5, T6, T7> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 T6 T7 ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VVVVVIII<T0, T1, T2, T3, T4, T5, T6, T7>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(this TDescription description, VVVVVIII<T0, T1, T2, T3, T4, T5, T6, T7> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VVVVVIII <T0, T1, T2, T3, T4, T5, T6, T7> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 T6 T7 ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VVVVVRII<T0, T1, T2, T3, T4, T5, T6, T7>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(this TDescription description, VVVVVRII<T0, T1, T2, T3, T4, T5, T6, T7> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VVVVVRII <T0, T1, T2, T3, T4, T5, T6, T7> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 T6 T7 ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VVVVVRRI<T0, T1, T2, T3, T4, T5, T6, T7>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(this TDescription description, VVVVVRRI<T0, T1, T2, T3, T4, T5, T6, T7> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VVVVVRRI <T0, T1, T2, T3, T4, T5, T6, T7> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 T6 T7 ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VVVVVRRR<T0, T1, T2, T3, T4, T5, T6, T7>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(this TDescription description, VVVVVRRR<T0, T1, T2, T3, T4, T5, T6, T7> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VVVVVRRR <T0, T1, T2, T3, T4, T5, T6, T7> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 T6 T7 ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VVVVVVII<T0, T1, T2, T3, T4, T5, T6, T7>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(this TDescription description, VVVVVVII<T0, T1, T2, T3, T4, T5, T6, T7> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VVVVVVII <T0, T1, T2, T3, T4, T5, T6, T7> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 T6 T7 ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VVVVVVRI<T0, T1, T2, T3, T4, T5, T6, T7>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(this TDescription description, VVVVVVRI<T0, T1, T2, T3, T4, T5, T6, T7> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VVVVVVRI <T0, T1, T2, T3, T4, T5, T6, T7> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 T6 T7 ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VVVVVVRR<T0, T1, T2, T3, T4, T5, T6, T7>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(this TDescription description, VVVVVVRR<T0, T1, T2, T3, T4, T5, T6, T7> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VVVVVVRR <T0, T1, T2, T3, T4, T5, T6, T7> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 T6 T7 ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VVVVVVVI<T0, T1, T2, T3, T4, T5, T6, T7>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(this TDescription description, VVVVVVVI<T0, T1, T2, T3, T4, T5, T6, T7> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VVVVVVVI <T0, T1, T2, T3, T4, T5, T6, T7> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 T6 T7 ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VVVVVVVR<T0, T1, T2, T3, T4, T5, T6, T7>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(this TDescription description, VVVVVVVR<T0, T1, T2, T3, T4, T5, T6, T7> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VVVVVVVR <T0, T1, T2, T3, T4, T5, T6, T7> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 T6 T7 ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VVVVVVVV<T0, T1, T2, T3, T4, T5, T6, T7>) Declaration public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(this TDescription description, VVVVVVVV<T0, T1, T2, T3, T4, T5, T6, T7> codeToRun) where TDescription : struct, ISupportForEachWithUniversalDelegate Parameters Type Name Description TDescription description VVVVVVVV <T0, T1, T2, T3, T4, T5, T6, T7> codeToRun Returns Type Description TDescription Type Parameters Name Description TDescription T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Global-Namespace.LambdaForEachDescriptionConstructionMethods.ThrowCodeGenException.html": {
    "href": "api/Global-Namespace.LambdaForEachDescriptionConstructionMethods.ThrowCodeGenException.html",
    "title": "Method ThrowCodeGenException | Entities | 0.17.0-preview.18",
    "keywords": "Method ThrowCodeGenException ThrowCodeGenException<TDescription>() Declaration public static TDescription ThrowCodeGenException<TDescription>() Returns Type Description TDescription Type Parameters Name Description TDescription"
  },
  "api/Global-Namespace.LambdaForEachDescriptionConstructionMethods.ThrowCodeGenInvalidMethodCalledException.html": {
    "href": "api/Global-Namespace.LambdaForEachDescriptionConstructionMethods.ThrowCodeGenInvalidMethodCalledException.html",
    "title": "Method ThrowCodeGenInvalidMethodCalledException | Entities | 0.17.0-preview.18",
    "keywords": "Method ThrowCodeGenInvalidMethodCalledException ThrowCodeGenInvalidMethodCalledException() Declaration public static void ThrowCodeGenInvalidMethodCalledException()"
  },
  "api/Global-Namespace.PatchingEndToEndWithSerialization.CanSerializeAndDeserializeManagedComponents.html": {
    "href": "api/Global-Namespace.PatchingEndToEndWithSerialization.CanSerializeAndDeserializeManagedComponents.html",
    "title": "Method CanSerializeAndDeserializeManagedComponents | Entities | 0.17.0-preview.18",
    "keywords": "Method CanSerializeAndDeserializeManagedComponents CanSerializeAndDeserializeManagedComponents() Declaration public void CanSerializeAndDeserializeManagedComponents()"
  },
  "api/Global-Namespace.PatchingEndToEndWithSerialization.ComponentWithObjectRef.Equals.html": {
    "href": "api/Global-Namespace.PatchingEndToEndWithSerialization.ComponentWithObjectRef.Equals.html",
    "title": "Method Equals | Entities | 0.17.0-preview.18",
    "keywords": "Method Equals Equals(PatchingEndToEndWithSerialization.ComponentWithObjectRef) Declaration public bool Equals(PatchingEndToEndWithSerialization.ComponentWithObjectRef other) Parameters Type Name Description PatchingEndToEndWithSerialization.ComponentWithObjectRef other Returns Type Description Boolean"
  },
  "api/Global-Namespace.PatchingEndToEndWithSerialization.ComponentWithObjectRef.GetHashCode.html": {
    "href": "api/Global-Namespace.PatchingEndToEndWithSerialization.ComponentWithObjectRef.GetHashCode.html",
    "title": "Method GetHashCode | Entities | 0.17.0-preview.18",
    "keywords": "Method GetHashCode GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode()"
  },
  "api/Global-Namespace.PatchingEndToEndWithSerialization.ComponentWithObjectRef.Material.html": {
    "href": "api/Global-Namespace.PatchingEndToEndWithSerialization.ComponentWithObjectRef.Material.html",
    "title": "Field Material | Entities | 0.17.0-preview.18",
    "keywords": "Field Material Namespace : Global Namespace <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public Material Material Returns Type Description Material"
  },
  "api/Global-Namespace.PatchingEndToEndWithSerialization.DeserializeWithDifferentDataLayoutThrows.html": {
    "href": "api/Global-Namespace.PatchingEndToEndWithSerialization.DeserializeWithDifferentDataLayoutThrows.html",
    "title": "Method DeserializeWithDifferentDataLayoutThrows | Entities | 0.17.0-preview.18",
    "keywords": "Method DeserializeWithDifferentDataLayoutThrows DeserializeWithDifferentDataLayoutThrows() Declaration public void DeserializeWithDifferentDataLayoutThrows()"
  },
  "api/Global-Namespace.PatchingEndToEndWithSerialization.PatchWithObjectReferenceResolving.html": {
    "href": "api/Global-Namespace.PatchingEndToEndWithSerialization.PatchWithObjectReferenceResolving.html",
    "title": "Method PatchWithObjectReferenceResolving | Entities | 0.17.0-preview.18",
    "keywords": "Method PatchWithObjectReferenceResolving PatchWithObjectReferenceResolving() Declaration public void PatchWithObjectReferenceResolving()"
  },
  "api/Global-Namespace.PrefabEntityReference.Prefab.html": {
    "href": "api/Global-Namespace.PrefabEntityReference.Prefab.html",
    "title": "Field Prefab | Entities | 0.17.0-preview.18",
    "keywords": "Field Prefab Namespace : Global Namespace <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public Entity Prefab Returns Type Description Entity"
  },
  "api/Global-Namespace.PrefabReference.Prefab.html": {
    "href": "api/Global-Namespace.PrefabReference.Prefab.html",
    "title": "Field Prefab | Entities | 0.17.0-preview.18",
    "keywords": "Field Prefab Namespace : Global Namespace <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public GameObject Prefab Returns Type Description GameObject"
  },
  "api/Global-Namespace.SceneSectionComponent.SectionIndex.html": {
    "href": "api/Global-Namespace.SceneSectionComponent.SectionIndex.html",
    "title": "Field SectionIndex | Entities | 0.17.0-preview.18",
    "keywords": "Field SectionIndex Namespace : Global Namespace <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [FormerlySerializedAs(\"SectionId\")] public int SectionIndex Returns Type Description Int32"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "Entity Component System API reference | Entities | 0.17.0-preview.18",
    "keywords": "Entity Component System API reference Entity types Entity The fundamental identifier in ECS EntityArchetype A unique combination of component types EntityQuery Use to select entities with specific characteristics EntityQueryDesc Use to create EntityQuery objects EntityManager Manages entities and provides utility methods World An isolated collection of entities Component types IComponentData A marker interface for general purpose components ISharedComponentData A marker interface for components shared by many entities ISystemStateComponentData A marker interface for specialized system components IBufferElementData A marker interface for buffer elements DynamicBuffer The API to access buffer elements [BlobAssetReference] A reference to a blob asset in a component System types ComponentSystemBase Defines a set of basic functionality for systems SystemBase The base class to extend when writing an ECS system GameObjectConversionSystem The base class to extend when writing GameObject conversion systems ComponentSystemGroup A group of systems that update as a unit ECS job types Entities.ForEach An implicitly created job that iterates over a set of entities Job.WithCode An implicitly created single job IJobEntityBatch An interface to implement to explicitly create a job that iterates over the entities returned by an entity query in batches Other important types ArchetypeChunk The storage unit for entity components EntityCommandBuffer A buffer for recording entity modifications used to reduce structural changes ComponentType Use to define types when creating entity queries BlobBuilder A utility class for creating blob assets, which are immutable data structures that can be safely shared between jobs using [BlobAssetReference] instances ICustomBootstrap An interface to implement to create your own system loop Attributes UpdateInGroup Defines the ComponentSystemGroup to which a system should be added UpdateBefore Specifies that one system must update before another UpdateAfter Specifies that one system must update after another DisableAutoCreation Prevents a system from being automatically discovered and run when your application starts up ExecuteAlways Specifies that a system's update function must be invoked every frame, even when no entities are returned by the system's entity query GenerateAuthoringComponent Generates a MonoBehaviour-based Component for an ECS IComponentData struct, allowing you to add it directly to a GameObject in the Unity Editor ConverterVersion Use to ensure that serialized data is up to date with conversion code <!-- cross references -->"
  },
  "api/Unity.Assertions.Assert.AreApproximatelyEqual.html": {
    "href": "api/Unity.Assertions.Assert.AreApproximatelyEqual.html",
    "title": "Method AreApproximatelyEqual | Entities | 0.17.0-preview.18",
    "keywords": "Method AreApproximatelyEqual AreApproximatelyEqual(Single, Single) Declaration [Conditional(\"UNITY_ASSERTIONS\")] public static void AreApproximatelyEqual(float expected, float actual) Parameters Type Name Description Single expected Single actual AreApproximatelyEqual(Single, Single, String) Declaration [Conditional(\"UNITY_ASSERTIONS\")] public static void AreApproximatelyEqual(float expected, float actual, string message) Parameters Type Name Description Single expected Single actual String message AreApproximatelyEqual(Single, Single, Single) Declaration [Conditional(\"UNITY_ASSERTIONS\")] public static void AreApproximatelyEqual(float expected, float actual, float tolerance) Parameters Type Name Description Single expected Single actual Single tolerance"
  },
  "api/Unity.Assertions.Assert.AreEqual.html": {
    "href": "api/Unity.Assertions.Assert.AreEqual.html",
    "title": "Method AreEqual | Entities | 0.17.0-preview.18",
    "keywords": "Method AreEqual AreEqual<T>(T, T) Declaration [Conditional(\"UNITY_ASSERTIONS\")] public static void AreEqual<T>(T expected, T actual) Parameters Type Name Description T expected T actual Type Parameters Name Description T AreEqual<T>(T, T, String) Declaration [Conditional(\"UNITY_ASSERTIONS\")] public static void AreEqual<T>(T expected, T actual, string message) Parameters Type Name Description T expected T actual String message Type Parameters Name Description T AreEqual(Int32, Int32) Declaration [Conditional(\"UNITY_ASSERTIONS\")] public static void AreEqual(int expected, int actual) Parameters Type Name Description Int32 expected Int32 actual AreEqual(Boolean, Boolean) Declaration [Conditional(\"UNITY_ASSERTIONS\")] public static void AreEqual(bool expected, bool actual) Parameters Type Name Description Boolean expected Boolean actual"
  },
  "api/Unity.Assertions.Assert.AreNotEqual.html": {
    "href": "api/Unity.Assertions.Assert.AreNotEqual.html",
    "title": "Method AreNotEqual | Entities | 0.17.0-preview.18",
    "keywords": "Method AreNotEqual AreNotEqual<T>(T, T) Declaration [Conditional(\"UNITY_ASSERTIONS\")] public static void AreNotEqual<T>(T expected, T actual) Parameters Type Name Description T expected T actual Type Parameters Name Description T AreNotEqual<T>(T, T, String) Declaration [Conditional(\"UNITY_ASSERTIONS\")] public static void AreNotEqual<T>(T expected, T actual, string message) Parameters Type Name Description T expected T actual String message Type Parameters Name Description T AreNotEqual(Int32, Int32) Declaration [Conditional(\"UNITY_ASSERTIONS\")] public static void AreNotEqual(int expected, int actual) Parameters Type Name Description Int32 expected Int32 actual AreNotEqual(Boolean, Boolean) Declaration [Conditional(\"UNITY_ASSERTIONS\")] public static void AreNotEqual(bool expected, bool actual) Parameters Type Name Description Boolean expected Boolean actual"
  },
  "api/Unity.Assertions.Assert.html": {
    "href": "api/Unity.Assertions.Assert.html",
    "title": "Class Assert | Entities | 0.17.0-preview.18",
    "keywords": "Class Assert Inheritance Object Assert Namespace : Unity.Assertions <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class Assert Methods Name Description AreApproximatelyEqual(Single, Single) AreApproximatelyEqual(Single, Single, Single) AreApproximatelyEqual(Single, Single, String) AreEqual(Boolean, Boolean) AreEqual(Int32, Int32) AreEqual<T>(T, T) AreEqual<T>(T, T, String) AreNotEqual(Boolean, Boolean) AreNotEqual(Int32, Int32) AreNotEqual<T>(T, T) AreNotEqual<T>(T, T, String) IsFalse(Boolean) IsFalse(Boolean, String) IsNotNull<T>(T) IsNotNull<T>(T, String) IsNull<T>(T) IsNull<T>(T, String) IsTrue(Boolean) IsTrue(Boolean, String)"
  },
  "api/Unity.Assertions.Assert.IsFalse.html": {
    "href": "api/Unity.Assertions.Assert.IsFalse.html",
    "title": "Method IsFalse | Entities | 0.17.0-preview.18",
    "keywords": "Method IsFalse IsFalse(Boolean) Declaration [Conditional(\"UNITY_ASSERTIONS\")] public static void IsFalse(bool condition) Parameters Type Name Description Boolean condition IsFalse(Boolean, String) Declaration [Conditional(\"UNITY_ASSERTIONS\")] public static void IsFalse(bool condition, string message) Parameters Type Name Description Boolean condition String message"
  },
  "api/Unity.Assertions.Assert.IsNotNull.html": {
    "href": "api/Unity.Assertions.Assert.IsNotNull.html",
    "title": "Method IsNotNull | Entities | 0.17.0-preview.18",
    "keywords": "Method IsNotNull IsNotNull<T>(T) Declaration [Conditional(\"UNITY_ASSERTIONS\")] public static void IsNotNull<T>(T value) where T : class Parameters Type Name Description T value Type Parameters Name Description T IsNotNull<T>(T, String) Declaration [Conditional(\"UNITY_ASSERTIONS\")] public static void IsNotNull<T>(T value, string message) where T : class Parameters Type Name Description T value String message Type Parameters Name Description T"
  },
  "api/Unity.Assertions.Assert.IsNull.html": {
    "href": "api/Unity.Assertions.Assert.IsNull.html",
    "title": "Method IsNull | Entities | 0.17.0-preview.18",
    "keywords": "Method IsNull IsNull<T>(T) Declaration [Conditional(\"UNITY_ASSERTIONS\")] public static void IsNull<T>(T value) where T : class Parameters Type Name Description T value Type Parameters Name Description T IsNull<T>(T, String) Declaration [Conditional(\"UNITY_ASSERTIONS\")] public static void IsNull<T>(T value, string message) where T : class Parameters Type Name Description T value String message Type Parameters Name Description T"
  },
  "api/Unity.Assertions.Assert.IsTrue.html": {
    "href": "api/Unity.Assertions.Assert.IsTrue.html",
    "title": "Method IsTrue | Entities | 0.17.0-preview.18",
    "keywords": "Method IsTrue IsTrue(Boolean) Declaration [Conditional(\"UNITY_ASSERTIONS\")] public static void IsTrue(bool condition) Parameters Type Name Description Boolean condition IsTrue(Boolean, String) Declaration [Conditional(\"UNITY_ASSERTIONS\")] public static void IsTrue(bool condition, string message) Parameters Type Name Description Boolean condition String message"
  },
  "api/Unity.Assertions.html": {
    "href": "api/Unity.Assertions.html",
    "title": "Namespace Unity.Assertions | Entities | 0.17.0-preview.18",
    "keywords": "Namespace Unity.Assertions Classes Assert"
  },
  "api/Unity.Core.html": {
    "href": "api/Unity.Core.html",
    "title": "Namespace Unity.Core | Entities | 0.17.0-preview.18",
    "keywords": "Namespace Unity.Core Classes XXHash XXHash implementation. Structs TimeData"
  },
  "api/Unity.Core.TimeData.-ctor.html": {
    "href": "api/Unity.Core.TimeData.-ctor.html",
    "title": "Constructor TimeData | Entities | 0.17.0-preview.18",
    "keywords": "Constructor TimeData TimeData(Double, Single) Create a new TimeData struct with the given values. Declaration public TimeData(double elapsedTime, float deltaTime) Parameters Type Name Description Double elapsedTime Time since the start of time collection. Single deltaTime Elapsed time since the last time-updating event occurred."
  },
  "api/Unity.Core.TimeData.DeltaTime.html": {
    "href": "api/Unity.Core.TimeData.DeltaTime.html",
    "title": "Field DeltaTime | Entities | 0.17.0-preview.18",
    "keywords": "Field DeltaTime The time in seconds since the last time-updating event occurred. (For example, a frame.) Namespace : Unity.Core <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public readonly float DeltaTime Returns Type Description Single"
  },
  "api/Unity.Core.TimeData.ElapsedTime.html": {
    "href": "api/Unity.Core.TimeData.ElapsedTime.html",
    "title": "Field ElapsedTime | Entities | 0.17.0-preview.18",
    "keywords": "Field ElapsedTime The total cumulative elapsed time in seconds. Namespace : Unity.Core <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public readonly double ElapsedTime Returns Type Description Double Remarks The ElapsedTime for each World is initialized to zero when the World is created. Thus, comparing timestamps across Worlds (or between Worlds and MonoBehaviours) is generally an error."
  },
  "api/Unity.Core.TimeData.fixedDeltaTime.html": {
    "href": "api/Unity.Core.TimeData.fixedDeltaTime.html",
    "title": "Property fixedDeltaTime | Entities | 0.17.0-preview.18",
    "keywords": "Property fixedDeltaTime fixedDeltaTime Declaration public float fixedDeltaTime { get; } Property Value Type Description Single"
  },
  "api/Unity.Core.TimeData.html": {
    "href": "api/Unity.Core.TimeData.html",
    "title": "Struct TimeData | Entities | 0.17.0-preview.18",
    "keywords": "Struct TimeData Namespace : Unity.Core <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct TimeData Constructors Name Description TimeData(Double, Single) Create a new TimeData struct with the given values. Fields Name Description DeltaTime The time in seconds since the last time-updating event occurred. (For example, a frame.) ElapsedTime The total cumulative elapsed time in seconds. Properties Name Description fixedDeltaTime"
  },
  "api/Unity.Core.XXHash.Hash32.html": {
    "href": "api/Unity.Core.XXHash.Hash32.html",
    "title": "Method Hash32 | Entities | 0.17.0-preview.18",
    "keywords": "Method Hash32 Hash32(Byte*, Int32, UInt32) Generate a 32-bit xxHash value. Declaration public static uint Hash32(byte *buffer, int bufferLength, uint seed = 0U) Parameters Type Name Description Byte * buffer Input buffer. Int32 bufferLength UInt32 seed Optional seed. Returns Type Description UInt32 32-bit hash value. Hash32(Stream, UInt32) Generate a 32-bit xxHash value from a stream. Declaration public static uint Hash32(Stream stream, uint seed = 0U) Parameters Type Name Description Stream stream Input stream. UInt32 seed Optional seed. Returns Type Description UInt32 32-bit hash value."
  },
  "api/Unity.Core.XXHash.Hash64.html": {
    "href": "api/Unity.Core.XXHash.Hash64.html",
    "title": "Method Hash64 | Entities | 0.17.0-preview.18",
    "keywords": "Method Hash64 Hash64(Byte*, Int32, UInt64) Generate a 64-bit xxHash value. Declaration public static ulong Hash64(byte *buffer, int bufferLength, ulong seed = 0UL) Parameters Type Name Description Byte * buffer Input buffer. Int32 bufferLength UInt64 seed Optional seed. Returns Type Description UInt64 Computed 64-bit hash value. Hash64(Stream, UInt64) Generate a 64-bit xxHash value from a stream. Declaration public static ulong Hash64(Stream stream, ulong seed = 0UL) Parameters Type Name Description Stream stream Input stream. UInt64 seed Optional seed. Returns Type Description UInt64 Computed 64-bit hash value."
  },
  "api/Unity.Core.XXHash.html": {
    "href": "api/Unity.Core.XXHash.html",
    "title": "Class XXHash | Entities | 0.17.0-preview.18",
    "keywords": "Class XXHash XXHash implementation. Inheritance Object XXHash Namespace : Unity.Core <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class XXHash Methods Name Description Hash32(Byte*, Int32, UInt32) Generate a 32-bit xxHash value. Hash32(Stream, UInt32) Generate a 32-bit xxHash value from a stream. Hash64(Byte*, Int32, UInt64) Generate a 64-bit xxHash value. Hash64(Stream, UInt64) Generate a 64-bit xxHash value from a stream."
  },
  "api/Unity.Deformations.BlendShapeWeight.html": {
    "href": "api/Unity.Deformations.BlendShapeWeight.html",
    "title": "Struct BlendShapeWeight | Entities | 0.17.0-preview.18",
    "keywords": "Struct BlendShapeWeight Float buffer containing weight values that determine how much a corresponding blend shape is applied to the mesh. The data structure is used for mesh deformations. Namespace : Unity.Deformations <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct BlendShapeWeight : IBufferElementData Fields Name Description Value"
  },
  "api/Unity.Deformations.BlendShapeWeight.Value.html": {
    "href": "api/Unity.Deformations.BlendShapeWeight.Value.html",
    "title": "Field Value | Entities | 0.17.0-preview.18",
    "keywords": "Field Value Namespace : Unity.Deformations <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public float Value Returns Type Description Single"
  },
  "api/Unity.Deformations.html": {
    "href": "api/Unity.Deformations.html",
    "title": "Namespace Unity.Deformations | Entities | 0.17.0-preview.18",
    "keywords": "Namespace Unity.Deformations Structs BlendShapeWeight Float buffer containing weight values that determine how much a corresponding blend shape is applied to the mesh. The data structure is used for mesh deformations. SkinMatrix Matrix buffer containing the skinned transformations of bones in relation to the bind pose. The data structure is used for mesh deformations."
  },
  "api/Unity.Deformations.SkinMatrix.html": {
    "href": "api/Unity.Deformations.SkinMatrix.html",
    "title": "Struct SkinMatrix | Entities | 0.17.0-preview.18",
    "keywords": "Struct SkinMatrix Matrix buffer containing the skinned transformations of bones in relation to the bind pose. The data structure is used for mesh deformations. Namespace : Unity.Deformations <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct SkinMatrix : IBufferElementData Fields Name Description Value"
  },
  "api/Unity.Deformations.SkinMatrix.Value.html": {
    "href": "api/Unity.Deformations.SkinMatrix.Value.html",
    "title": "Field Value | Entities | 0.17.0-preview.18",
    "keywords": "Field Value Namespace : Unity.Deformations <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public float3x4 Value Returns Type Description float3x4"
  },
  "api/Unity.Entities.AlwaysSynchronizeSystemAttribute.html": {
    "href": "api/Unity.Entities.AlwaysSynchronizeSystemAttribute.html",
    "title": "Class AlwaysSynchronizeSystemAttribute | Entities | 0.17.0-preview.18",
    "keywords": "Class AlwaysSynchronizeSystemAttribute AlwaysSynchronizeSystem can be applied to a JobComponentSystem to force it to synchronize on all of its dependencies before every update. This attribute should only be applied when a synchronization point is necessary every frame. Inheritance Object Attribute AlwaysSynchronizeSystemAttribute Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [AttributeUsage(AttributeTargets.Class)] public class AlwaysSynchronizeSystemAttribute : Attribute, _Attribute"
  },
  "api/Unity.Entities.AlwaysUpdateSystemAttribute.html": {
    "href": "api/Unity.Entities.AlwaysUpdateSystemAttribute.html",
    "title": "Class AlwaysUpdateSystemAttribute | Entities | 0.17.0-preview.18",
    "keywords": "Class AlwaysUpdateSystemAttribute Inheritance Object Attribute AlwaysUpdateSystemAttribute Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [AttributeUsage(AttributeTargets.Class)] public class AlwaysUpdateSystemAttribute : Attribute, _Attribute"
  },
  "api/Unity.Entities.ArchetypeChunk.Archetype.html": {
    "href": "api/Unity.Entities.ArchetypeChunk.Archetype.html",
    "title": "Property Archetype | Entities | 0.17.0-preview.18",
    "keywords": "Property Archetype Archetype The archetype of the entities stored in this chunk. Declaration public EntityArchetype Archetype { get; } Property Value Type Description EntityArchetype Remarks All entities in a chunk must have the same Archetype ."
  },
  "api/Unity.Entities.ArchetypeChunk.Capacity.html": {
    "href": "api/Unity.Entities.ArchetypeChunk.Capacity.html",
    "title": "Property Capacity | Entities | 0.17.0-preview.18",
    "keywords": "Property Capacity Capacity The number of entities that can fit in this chunk. Declaration public int Capacity { get; } Property Value Type Description Int32 Remarks The capacity of a chunk depends on the size of the components making up the Archetype of the entities stored in the chunk."
  },
  "api/Unity.Entities.ArchetypeChunk.ChunkEntityCount.html": {
    "href": "api/Unity.Entities.ArchetypeChunk.ChunkEntityCount.html",
    "title": "Property ChunkEntityCount | Entities | 0.17.0-preview.18",
    "keywords": "Property ChunkEntityCount ChunkEntityCount The number of entities currently stored in the chunk (ignoring any sub-batching) Declaration public int ChunkEntityCount { get; } Property Value Type Description Int32"
  },
  "api/Unity.Entities.ArchetypeChunk.Count.html": {
    "href": "api/Unity.Entities.ArchetypeChunk.Count.html",
    "title": "Property Count | Entities | 0.17.0-preview.18",
    "keywords": "Property Count Count If the ArchetypeChunk is not sub-batched, returns the number of entities in the chunk. Otherwise, returns the number of entities referenced by this batch. Declaration public int Count { get; } Property Value Type Description Int32"
  },
  "api/Unity.Entities.ArchetypeChunk.DidChange.html": {
    "href": "api/Unity.Entities.ArchetypeChunk.DidChange.html",
    "title": "Method DidChange | Entities | 0.17.0-preview.18",
    "keywords": "Method DidChange DidChange<T>(ComponentTypeHandle<T>, UInt32) Reports whether the data in any of IComponentData components in the chunk, of the type identified by chunkComponentTypeHandle , could have changed since the specified version. Declaration public bool DidChange<T>(ComponentTypeHandle<T> chunkComponentTypeHandle, uint version) where T : IComponentData Parameters Type Name Description ComponentTypeHandle <T> chunkComponentTypeHandle An object containing type and job safety information. Create this object by calling GetComponentTypeHandle<T>(Boolean) immediately before scheduling a job. Pass the object to a job using a public field you define as part of the job struct. UInt32 version The version to compare. In a system, this parameter should be set to the current LastSystemVersion at the time the job is run or scheduled. Returns Type Description Boolean True, if the version number stored in the chunk for this component is more recent than the version passed to the version parameter. Type Parameters Name Description T The component type. Remarks When you access a component in a chunk with write privileges, the ECS framework updates the change version of that component type to the current GlobalSystemVersion value. Since every system stores the global system version in its LastSystemVersion field when it updates, you can compare these two versions with this function in order to determine whether the data of components in this chunk could have changed since the last time that system ran. Note that for efficiency, the change version applies to whole chunks not individual entities. The change version is updated even when another job or system that has declared write access to a component does not actually change the component value. DidChange(DynamicComponentTypeHandle, UInt32) Reports whether the data in any of IComponentData components in the chunk, of the type identified by chunkComponentType , could have changed since the specified version. Declaration public bool DidChange(DynamicComponentTypeHandle chunkComponentType, uint version) Parameters Type Name Description DynamicComponentTypeHandle chunkComponentType An object containing type and job safety information. Create this object by calling GetDynamicComponentTypeHandle(ComponentType) immediately before scheduling a job. Pass the object to a job using a public field you define as part of the job struct. UInt32 version The version to compare. In a system, this parameter should be set to the current LastSystemVersion at the time the job is run or scheduled. Returns Type Description Boolean True, if the version number stored in the chunk for this component is more recent than the version passed to the version parameter. Remarks When you access a component in a chunk with write privileges, the ECS framework updates the change version of that component type to the current GlobalSystemVersion value. Since every system stores the global system version in its LastSystemVersion field when it updates, you can compare these two versions with this function in order to determine whether the data of components in this chunk could have changed since the last time that system ran. Note that for efficiency, the change version applies to whole chunks not individual entities. The change version is updated even when another job or system that has declared write access to a component does not actually change the component value. DidChange<T>(BufferTypeHandle<T>, UInt32) Reports whether any of the data in dynamic buffer components in the chunk, of the type identified by chunkBufferTypeHandle , could have changed since the specified version. Declaration public bool DidChange<T>(BufferTypeHandle<T> chunkBufferTypeHandle, uint version) where T : struct, IBufferElementData Parameters Type Name Description BufferTypeHandle <T> chunkBufferTypeHandle An object containing type and job safety information. Create this object by calling GetBufferTypeHandle<T>(Boolean) immediately before scheduling a job. Pass the object to a job using a public field you define as part of the job struct. UInt32 version The version to compare. In a system, this parameter should be set to the current LastSystemVersion at the time the job is run or scheduled. Returns Type Description Boolean True, if the version number stored in the chunk for this component is more recent than the version passed to the version parameter. Type Parameters Name Description T The data type of the elements in the dynamic buffer. Remarks When you access a component in a chunk with write privileges, the ECS framework updates the change version of that component type to the current GlobalSystemVersion value. Since every system stores the global system version in its LastSystemVersion field when it updates, you can compare these two versions with this function in order to determine whether the data of components in this chunk could have changed since the last time that system ran. Note that for efficiency, the change version applies to whole chunks not individual entities. The change version is updated even when another job or system that has declared write access to a component does not actually change the component value. DidChange<T>(SharedComponentTypeHandle<T>, UInt32) Reports whether the value of shared components associated with the chunk, of the type identified by chunkSharedComponentData , could have changed since the specified version. Declaration public bool DidChange<T>(SharedComponentTypeHandle<T> chunkSharedComponentData, uint version) where T : struct, ISharedComponentData Parameters Type Name Description SharedComponentTypeHandle <T> chunkSharedComponentData An object containing type and job safety information. Create this object by calling GetSharedComponentTypeHandle<T>() immediately before scheduling a job. Pass the object to a job using a public field you define as part of the job struct. UInt32 version The version to compare. In a system, this parameter should be set to the current LastSystemVersion at the time the job is run or scheduled. Returns Type Description Boolean True, if the version number stored in the chunk for this component is more recent than the version passed to the version Type Parameters Name Description T The data type of the shared component. Remarks Shared components behave differently than other types of components in terms of change versioning because changing the value of a shared component can move an entity to a different chunk. If the change results in an entity moving to a different chunk, then only the order version is updated (for both the original and the receiving chunk). If you change the shared component value for all entities in a chunk at once, the change version for that chunk is updated. The order version is unaffected. Note that for efficiency, the change version applies to whole chunks not individual entities. The change version is updated even when another job or system that has declared write access to a component does not actually change the component value."
  },
  "api/Unity.Entities.ArchetypeChunk.DidOrderChange.html": {
    "href": "api/Unity.Entities.ArchetypeChunk.DidOrderChange.html",
    "title": "Method DidOrderChange | Entities | 0.17.0-preview.18",
    "keywords": "Method DidOrderChange DidOrderChange(UInt32) Reports whether a structural change has occured in this chunk since the specified version. Declaration public bool DidOrderChange(uint version) Parameters Type Name Description UInt32 version The version number to compare. Returns Type Description Boolean True, if the order version number has changed since the specified version. Remarks Typically, you set the version parameter to the LastSystemVersion of a system to detect whether the order version has changed since the last time that system ran."
  },
  "api/Unity.Entities.ArchetypeChunk.Equals.html": {
    "href": "api/Unity.Entities.ArchetypeChunk.Equals.html",
    "title": "Method Equals | Entities | 0.17.0-preview.18",
    "keywords": "Method Equals Equals(Object) Two ArchetypeChunk instances are equal if they reference the same block of chunk memory. Declaration public override bool Equals(object compare) Parameters Type Name Description Object compare An object Returns Type Description Boolean True if compare is an ArchetypeChunk instance that references the same memory, or both contain null memory references; otherwise false. Overrides ValueType.Equals(Object) Equals(ArchetypeChunk) Two ArchetypeChunk instances are equal if they reference the same block of chunk and entity component store memory. Declaration public bool Equals(ArchetypeChunk archetypeChunk) Parameters Type Name Description ArchetypeChunk archetypeChunk Another ArchetypeChunk instance Returns Type Description Boolean True, if both ArchetypeChunk instances reference the same memory or both contain null memory references."
  },
  "api/Unity.Entities.ArchetypeChunk.Full.html": {
    "href": "api/Unity.Entities.ArchetypeChunk.Full.html",
    "title": "Property Full | Entities | 0.17.0-preview.18",
    "keywords": "Property Full Full Whether this chunk is exactly full. Declaration public bool Full { get; } Property Value Type Description Boolean"
  },
  "api/Unity.Entities.ArchetypeChunk.GetBufferAccessor.html": {
    "href": "api/Unity.Entities.ArchetypeChunk.GetBufferAccessor.html",
    "title": "Method GetBufferAccessor | Entities | 0.17.0-preview.18",
    "keywords": "Method GetBufferAccessor GetBufferAccessor<T>(BufferTypeHandle<T>) Declaration public BufferAccessor<T> GetBufferAccessor<T>(BufferTypeHandle<T> bufferComponentTypeHandle) where T : struct, IBufferElementData Parameters Type Name Description BufferTypeHandle <T> bufferComponentTypeHandle Returns Type Description BufferAccessor <T> Type Parameters Name Description T"
  },
  "api/Unity.Entities.ArchetypeChunk.GetChangeVersion.html": {
    "href": "api/Unity.Entities.ArchetypeChunk.GetChangeVersion.html",
    "title": "Method GetChangeVersion | Entities | 0.17.0-preview.18",
    "keywords": "Method GetChangeVersion GetChangeVersion<T>(ComponentTypeHandle<T>) Gets the change version number assigned to the specified type of component in this chunk. Declaration public uint GetChangeVersion<T>(ComponentTypeHandle<T> chunkComponentTypeHandle) where T : IComponentData Parameters Type Name Description ComponentTypeHandle <T> chunkComponentTypeHandle An object containing type and job safety information. Create this object by calling GetComponentTypeHandle<T>(Boolean) immediately before scheduling a job. Pass the object to a job using a public field you define as part of the job struct. Returns Type Description UInt32 The current version number of the specified component, which is the version set the last time a system accessed a component of that type in this chunk with write privileges. Returns 0 if the chunk does not contain a component of the specified type. Type Parameters Name Description T The data type of component T. Remarks Every time a system accesses components in a chunk, the system updates the change version of any component types to which it has write access with the current GlobalSystemVersion . (A system updates the version whether or not you actually write any component data -- always specify read-only access when possible.) You can use the change version to filter out entities that have not changed since the last time a system ran. Implement change filtering using one of the following: Entities.ForEach.WithChangeFilter(ComponentType) AddChangedVersionFilter(ComponentType) DidChange<T>(ComponentTypeHandle<T>, UInt32) in an IJobChunk job. Note that change versions are stored at the chunk level. Thus when you use change filtering, the query system excludes or includes whole chunks not individual entities. GetChangeVersion(DynamicComponentTypeHandle) Gets the change version number assigned to the specified type of component in this chunk. Declaration public uint GetChangeVersion(DynamicComponentTypeHandle chunkComponentType) Parameters Type Name Description DynamicComponentTypeHandle chunkComponentType An object containing type and job safety information. Create this object by calling GetDynamicComponentTypeHandle(ComponentType) immediately before scheduling a job. Pass the object to a job using a public field you define as part of the job struct. Returns Type Description UInt32 The current version number of the specified component, which is the version set the last time a system accessed a component of that type in this chunk with write privileges. Returns 0 if the chunk does not contain a component of the specified type. Remarks Every time a system accesses components in a chunk, the system updates the change version of any component types to which it has write access with the current GlobalSystemVersion . (A system updates the version whether or not you actually write any component data -- always specify read-only access when possible.) You can use the change version to filter out entities that have not changed since the last time a system ran. Implement change filtering using one of the following: Entities.ForEach.WithChangeFilter(ComponentType) AddChangedVersionFilter(ComponentType) DidChange<T>(ComponentTypeHandle<T>, UInt32) in an IJobChunk job. Note that change versions are stored at the chunk level. Thus when you use change filtering, the query system excludes or includes whole chunks not individual entities. GetChangeVersion<T>(BufferTypeHandle<T>) Gets the change version number assigned to the specified type of dynamic buffer component in this chunk. Declaration public uint GetChangeVersion<T>(BufferTypeHandle<T> chunkBufferTypeHandle) where T : struct, IBufferElementData Parameters Type Name Description BufferTypeHandle <T> chunkBufferTypeHandle An object containing type and job safety information. Create this object by calling GetBufferTypeHandle<T>(Boolean) immediately before scheduling a job. Pass the object to a job using a public field you define as part of the job struct. Returns Type Description UInt32 The current version number of the specified dynamic buffer type, which is the version set the last time a system accessed a buffer component of that type in this chunk with write privileges. Returns 0 if the chunk does not contain a buffer component of the specified type. Type Parameters Name Description T The data type of component T. Remarks Every time a system accesses components in a chunk, the system updates the change version of any component types to which it has write access with the current GlobalSystemVersion . (A system updates the version whether or not you actually write any component data -- always specify read-only access when possible.) You can use the change version to filter out entities that have not changed since the last time a system ran. Implement change filtering using one of the following: Entities.ForEach.WithChangeFilter(ComponentType) AddChangedVersionFilter(ComponentType) DidChange<T>(ComponentTypeHandle<T>, UInt32) in an IJobChunk job. Note that change versions are stored at the chunk level. Thus if you use change filtering, the query system excludes or includes whole chunks not individual entities. GetChangeVersion<T>(SharedComponentTypeHandle<T>) Gets the change version number assigned to the specified type of shared component in this chunk. Declaration public uint GetChangeVersion<T>(SharedComponentTypeHandle<T> chunkSharedComponentData) where T : struct, ISharedComponentData Parameters Type Name Description SharedComponentTypeHandle <T> chunkSharedComponentData An object containing type and job safety information. Create this object by calling GetSharedComponentTypeHandle<T>() immediately before scheduling a job. Pass the object to a job using a public field you define as part of the job struct. Returns Type Description UInt32 The current version number of the specified shared component, which is the version set the last time a system accessed a component of that type in this chunk with write privileges. Returns 0 if the chunk does not contain a shared component of the specified type. Type Parameters Name Description T The data type of shared component T. Remarks Shared components behave differently than other types of components in terms of change versioning because changing the value of a shared component can move an entity to a different chunk. If the change results in an entity moving to a different chunk, then only the order version is updated (for both the original and the receiving chunk). If you change the shared component value for all entities in a chunk at once, the entities remain in their current chunk. The change version for that chunk is updated and the order version is unaffected."
  },
  "api/Unity.Entities.ArchetypeChunk.GetChunkComponentData.html": {
    "href": "api/Unity.Entities.ArchetypeChunk.GetChunkComponentData.html",
    "title": "Method GetChunkComponentData | Entities | 0.17.0-preview.18",
    "keywords": "Method GetChunkComponentData GetChunkComponentData<T>(ComponentTypeHandle<T>) Gets the value of a chunk component. Declaration public T GetChunkComponentData<T>(ComponentTypeHandle<T> chunkComponentTypeHandle) where T : struct Parameters Type Name Description ComponentTypeHandle <T> chunkComponentTypeHandle An object containing type and job safety information. Create this object by calling GetComponentTypeHandle<T>(Boolean) immediately before scheduling a job. Pass the object to a job using a public field you define as part of the job struct. Returns Type Description T A copy of the chunk component. Type Parameters Name Description T The data type of the chunk component."
  },
  "api/Unity.Entities.ArchetypeChunk.GetDynamicComponentDataArrayReinterpret.html": {
    "href": "api/Unity.Entities.ArchetypeChunk.GetDynamicComponentDataArrayReinterpret.html",
    "title": "Method GetDynamicComponentDataArrayReinterpret | Entities | 0.17.0-preview.18",
    "keywords": "Method GetDynamicComponentDataArrayReinterpret GetDynamicComponentDataArrayReinterpret<T>(DynamicComponentTypeHandle, Int32) Declaration public NativeArray<T> GetDynamicComponentDataArrayReinterpret<T>(DynamicComponentTypeHandle chunkComponentType, int expectedTypeSize) where T : struct Parameters Type Name Description DynamicComponentTypeHandle chunkComponentType Int32 expectedTypeSize Returns Type Description NativeArray <T> Type Parameters Name Description T Exceptions Type Condition ArgumentException InvalidOperationException"
  },
  "api/Unity.Entities.ArchetypeChunk.GetHashCode.html": {
    "href": "api/Unity.Entities.ArchetypeChunk.GetHashCode.html",
    "title": "Method GetHashCode | Entities | 0.17.0-preview.18",
    "keywords": "Method GetHashCode GetHashCode() Computes a hashcode to support hash-based collections. Declaration public override int GetHashCode() Returns Type Description Int32 The computed hash. Overrides ValueType.GetHashCode()"
  },
  "api/Unity.Entities.ArchetypeChunk.GetManagedComponentAccessor.html": {
    "href": "api/Unity.Entities.ArchetypeChunk.GetManagedComponentAccessor.html",
    "title": "Method GetManagedComponentAccessor | Entities | 0.17.0-preview.18",
    "keywords": "Method GetManagedComponentAccessor GetManagedComponentAccessor<T>(ComponentTypeHandle<T>, EntityManager) Declaration public ManagedComponentAccessor<T> GetManagedComponentAccessor<T>(ComponentTypeHandle<T> componentTypeHandle, EntityManager manager) where T : class Parameters Type Name Description ComponentTypeHandle <T> componentTypeHandle EntityManager manager Returns Type Description ManagedComponentAccessor <T> Type Parameters Name Description T"
  },
  "api/Unity.Entities.ArchetypeChunk.GetNativeArray.html": {
    "href": "api/Unity.Entities.ArchetypeChunk.GetNativeArray.html",
    "title": "Method GetNativeArray | Entities | 0.17.0-preview.18",
    "keywords": "Method GetNativeArray GetNativeArray(EntityTypeHandle) Provides a native array interface to entity instances stored in this chunk. Declaration public NativeArray<Entity> GetNativeArray(EntityTypeHandle entityTypeHandle) Parameters Type Name Description EntityTypeHandle entityTypeHandle An object containing type and job safety information. Create this object by calling GetEntityTypeHandle() immediately before scheduling a job. Pass the object to a job using a public field you define as part of the job struct. Returns Type Description NativeArray < Entity > A native array containing the entities in the chunk. Remarks The native array returned by this method references existing data, not a copy. GetNativeArray<T>(ComponentTypeHandle<T>) Provides a native array interface to components stored in this chunk. Declaration public NativeArray<T> GetNativeArray<T>(ComponentTypeHandle<T> chunkComponentTypeHandle) where T : struct, IComponentData Parameters Type Name Description ComponentTypeHandle <T> chunkComponentTypeHandle An object containing type and job safety information. Create this object by calling GetComponentTypeHandle<T>(Boolean) immediately before scheduling a job. Pass the object to a job using a public field you define as part of the job struct. Returns Type Description NativeArray <T> A native array containing the components in the chunk. Type Parameters Name Description T The data type of the component. Remarks The native array returned by this method references existing data, not a copy. Exceptions Type Condition ArgumentException If you call this function on a \"tag\" component type (which is an empty component with no fields)."
  },
  "api/Unity.Entities.ArchetypeChunk.GetOrderVersion.html": {
    "href": "api/Unity.Entities.ArchetypeChunk.GetOrderVersion.html",
    "title": "Method GetOrderVersion | Entities | 0.17.0-preview.18",
    "keywords": "Method GetOrderVersion GetOrderVersion() Gets the order version number assigned to this chunk. Declaration public uint GetOrderVersion() Returns Type Description UInt32 The current order version of this chunk. Remarks Every time you perform a structural change affecting a chunk, the ECS framework updates the order version of the chunk to the current GlobalSystemVersion value. Structural changes include adding and removing entities, adding or removing the component of an entity, and changing the value of a shared component (except when you change the value for all entities in a chunk at the same time)."
  },
  "api/Unity.Entities.ArchetypeChunk.GetSharedComponentData.html": {
    "href": "api/Unity.Entities.ArchetypeChunk.GetSharedComponentData.html",
    "title": "Method GetSharedComponentData | Entities | 0.17.0-preview.18",
    "keywords": "Method GetSharedComponentData GetSharedComponentData<T>(SharedComponentTypeHandle<T>, EntityManager) Gets the current value of a shared component. Declaration public T GetSharedComponentData<T>(SharedComponentTypeHandle<T> chunkSharedComponentData, EntityManager entityManager) where T : struct, ISharedComponentData Parameters Type Name Description SharedComponentTypeHandle <T> chunkSharedComponentData An object containing type and job safety information. Create this object by calling GetSharedComponentTypeHandle<T>() immediately before calling this function. EntityManager entityManager An EntityManager instance. Returns Type Description T The shared component value. Type Parameters Name Description T The data type of the shared component. Remarks You cannot call this function inside a job."
  },
  "api/Unity.Entities.ArchetypeChunk.GetSharedComponentIndex.html": {
    "href": "api/Unity.Entities.ArchetypeChunk.GetSharedComponentIndex.html",
    "title": "Method GetSharedComponentIndex | Entities | 0.17.0-preview.18",
    "keywords": "Method GetSharedComponentIndex GetSharedComponentIndex<T>(SharedComponentTypeHandle<T>) Gets the index into the array of unique values for the specified shared component. Declaration public int GetSharedComponentIndex<T>(SharedComponentTypeHandle<T> chunkSharedComponentData) where T : struct, ISharedComponentData Parameters Type Name Description SharedComponentTypeHandle <T> chunkSharedComponentData An object containing type and job safety information. Create this object by calling GetSharedComponentTypeHandle<T>() immediately before scheduling a job. Pass the object to a job using a public field you define as part of the job struct. Returns Type Description Int32 The index value, or -1 if the chunk does not contain a shared component of the specified type. Type Parameters Name Description T The data type of the shared component. Remarks Because shared components can contain managed types, you can only access the value index of a shared component inside a job, not the value itself. The index value indexes the array returned by GetAllUniqueSharedComponentData<T>(List<T>) . If desired, you can create a native array that mirrors your unique value list, but which contains only unmanaged, blittable data and pass that into an IJobChunk job. The unique value list and a specific index is only valid until a structural change occurs."
  },
  "api/Unity.Entities.ArchetypeChunk.GetUntypedBufferAccessor.html": {
    "href": "api/Unity.Entities.ArchetypeChunk.GetUntypedBufferAccessor.html",
    "title": "Method GetUntypedBufferAccessor | Entities | 0.17.0-preview.18",
    "keywords": "Method GetUntypedBufferAccessor GetUntypedBufferAccessor(ref DynamicComponentTypeHandle) Give unsafe access to the buffers with type chunkBufferTypeHandle in the chunk. Declaration public UnsafeUntypedBufferAccessor GetUntypedBufferAccessor(ref DynamicComponentTypeHandle chunkBufferTypeHandle) Parameters Type Name Description DynamicComponentTypeHandle chunkBufferTypeHandle Returns Type Description UnsafeUntypedBufferAccessor"
  },
  "api/Unity.Entities.ArchetypeChunk.Has.html": {
    "href": "api/Unity.Entities.ArchetypeChunk.Has.html",
    "title": "Method Has | Entities | 0.17.0-preview.18",
    "keywords": "Method Has Has<T>(ComponentTypeHandle<T>) Reports whether this chunk contains the specified component type. Declaration public bool Has<T>(ComponentTypeHandle<T> chunkComponentTypeHandle) where T : IComponentData Parameters Type Name Description ComponentTypeHandle <T> chunkComponentTypeHandle An object containing type and job safety information. Create this object by calling GetComponentTypeHandle<T>(Boolean) immediately before scheduling a job. Pass the object to a job using a public field you define as part of the job struct. Returns Type Description Boolean True, if this chunk contains an array of the specified component type. Type Parameters Name Description T The data type of the component. Remarks When an EntityQuery includes optional components (using Any ), some chunks returned by the query may contain such components and some may not. Use this function to determine whether or not the current chunk contains one of these optional component types. Has(DynamicComponentTypeHandle) Declaration public bool Has(DynamicComponentTypeHandle chunkComponentType) Parameters Type Name Description DynamicComponentTypeHandle chunkComponentType Returns Type Description Boolean Has<T>(SharedComponentTypeHandle<T>) Reports whether this chunk contains a shared component of the specified component type. Declaration public bool Has<T>(SharedComponentTypeHandle<T> chunkComponentTypeHandle) where T : struct, ISharedComponentData Parameters Type Name Description SharedComponentTypeHandle <T> chunkComponentTypeHandle An object containing type and job safety information. Create this object by calling GetSharedComponentTypeHandle<T>() immediately before scheduling a job. Pass the object to a job using a public field you define as part of the job struct. Returns Type Description Boolean True, if this chunk contains a shared component of the specified type. Type Parameters Name Description T The data type of the shared component. Remarks When an EntityQuery includes optional components used as shared components (with Any ), some chunks returned by the query may have these shared components and some may not. Use this function to determine whether or not the current chunk contains one of these optional component types as a shared component. Has<T>(BufferTypeHandle<T>) Reports whether this chunk contains a dynamic buffer containing the specified component type. Declaration public bool Has<T>(BufferTypeHandle<T> chunkBufferTypeHandle) where T : struct, IBufferElementData Parameters Type Name Description BufferTypeHandle <T> chunkBufferTypeHandle An object containing type and job safety information. Create this object by calling GetBufferTypeHandle<T>(Boolean) immediately before scheduling a job. Pass the object to a job using a public field you define as part of the job struct. Returns Type Description Boolean True, if this chunk contains an array of the dynamic buffers containing the specified component type. Type Parameters Name Description T The data type of the component stored in the dynamic buffer. Remarks When an EntityQuery includes optional dynamic buffer types (with Any ), some chunks returned by the query may have these dynamic buffers components and some may not. Use this function to determine whether or not the current chunk contains one of these optional dynamic buffers."
  },
  "api/Unity.Entities.ArchetypeChunk.HasChunkComponent.html": {
    "href": "api/Unity.Entities.ArchetypeChunk.HasChunkComponent.html",
    "title": "Method HasChunkComponent | Entities | 0.17.0-preview.18",
    "keywords": "Method HasChunkComponent HasChunkComponent<T>(ComponentTypeHandle<T>) Reports whether this chunk contains a chunk component of the specified component type. Declaration public bool HasChunkComponent<T>(ComponentTypeHandle<T> chunkComponentTypeHandle) where T : struct, IComponentData Parameters Type Name Description ComponentTypeHandle <T> chunkComponentTypeHandle An object containing type and job safety information. Create this object by calling GetComponentTypeHandle<T>(Boolean) immediately before scheduling a job. Pass the object to a job using a public field you define as part of the job struct. Returns Type Description Boolean True, if this chunk contains a chunk component of the specified type. Type Parameters Name Description T The data type of the chunk component. Remarks When an EntityQuery includes optional components used as chunk components (with Any ), some chunks returned by the query may have these chunk components and some may not. Use this function to determine whether or not the current chunk contains one of these optional component types as a chunk component."
  },
  "api/Unity.Entities.ArchetypeChunk.html": {
    "href": "api/Unity.Entities.ArchetypeChunk.html",
    "title": "Struct ArchetypeChunk | Entities | 0.17.0-preview.18",
    "keywords": "Struct ArchetypeChunk A block of unmanaged memory containing the components for entities sharing the same Archetype . Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct ArchetypeChunk : IEquatable<ArchetypeChunk> Properties Name Description Archetype The archetype of the entities stored in this chunk. Capacity The number of entities that can fit in this chunk. ChunkEntityCount The number of entities currently stored in the chunk (ignoring any sub-batching) Count If the ArchetypeChunk is not sub-batched, returns the number of entities in the chunk. Otherwise, returns the number of entities referenced by this batch. Full Whether this chunk is exactly full. Null A special \"null\" ArchetypeChunk that you can use to test whether ArchetypeChunk instances are valid. Methods Name Description DidChange(DynamicComponentTypeHandle, UInt32) Reports whether the data in any of IComponentData components in the chunk, of the type identified by chunkComponentType , could have changed since the specified version. DidChange<T>(BufferTypeHandle<T>, UInt32) Reports whether any of the data in dynamic buffer components in the chunk, of the type identified by chunkBufferTypeHandle , could have changed since the specified version. DidChange<T>(ComponentTypeHandle<T>, UInt32) Reports whether the data in any of IComponentData components in the chunk, of the type identified by chunkComponentTypeHandle , could have changed since the specified version. DidChange<T>(SharedComponentTypeHandle<T>, UInt32) Reports whether the value of shared components associated with the chunk, of the type identified by chunkSharedComponentData , could have changed since the specified version. DidOrderChange(UInt32) Reports whether a structural change has occured in this chunk since the specified version. Equals(Object) Two ArchetypeChunk instances are equal if they reference the same block of chunk memory. Equals(ArchetypeChunk) Two ArchetypeChunk instances are equal if they reference the same block of chunk and entity component store memory. GetBufferAccessor<T>(BufferTypeHandle<T>) GetChangeVersion(DynamicComponentTypeHandle) Gets the change version number assigned to the specified type of component in this chunk. GetChangeVersion<T>(BufferTypeHandle<T>) Gets the change version number assigned to the specified type of dynamic buffer component in this chunk. GetChangeVersion<T>(ComponentTypeHandle<T>) Gets the change version number assigned to the specified type of component in this chunk. GetChangeVersion<T>(SharedComponentTypeHandle<T>) Gets the change version number assigned to the specified type of shared component in this chunk. GetChunkComponentData<T>(ComponentTypeHandle<T>) Gets the value of a chunk component. GetDynamicComponentDataArrayReinterpret<T>(DynamicComponentTypeHandle, Int32) GetHashCode() Computes a hashcode to support hash-based collections. GetManagedComponentAccessor<T>(ComponentTypeHandle<T>, EntityManager) GetNativeArray(EntityTypeHandle) Provides a native array interface to entity instances stored in this chunk. GetNativeArray<T>(ComponentTypeHandle<T>) Provides a native array interface to components stored in this chunk. GetOrderVersion() Gets the order version number assigned to this chunk. GetSharedComponentData<T>(SharedComponentTypeHandle<T>, EntityManager) Gets the current value of a shared component. GetSharedComponentIndex<T>(SharedComponentTypeHandle<T>) Gets the index into the array of unique values for the specified shared component. GetUntypedBufferAccessor(ref DynamicComponentTypeHandle) Give unsafe access to the buffers with type chunkBufferTypeHandle in the chunk. Has(DynamicComponentTypeHandle) Has<T>(BufferTypeHandle<T>) Reports whether this chunk contains a dynamic buffer containing the specified component type. Has<T>(ComponentTypeHandle<T>) Reports whether this chunk contains the specified component type. Has<T>(SharedComponentTypeHandle<T>) Reports whether this chunk contains a shared component of the specified component type. HasChunkComponent<T>(ComponentTypeHandle<T>) Reports whether this chunk contains a chunk component of the specified component type. Invalid() Reports whether this ArchetypeChunk instance is invalid. NumSharedComponents() The number of shared components in the archetype associated with this chunk. SetChunkComponentData<T>(ComponentTypeHandle<T>, T) Sets the value of a chunk component. Operators Name Description Equality(ArchetypeChunk, ArchetypeChunk) Two ArchetypeChunk instances are equal if they reference the same block of chunk and entity component store memory. Inequality(ArchetypeChunk, ArchetypeChunk) Two ArchetypeChunk instances are only equal if they reference the same block of chunk and entity component store memory."
  },
  "api/Unity.Entities.ArchetypeChunk.Invalid.html": {
    "href": "api/Unity.Entities.ArchetypeChunk.Invalid.html",
    "title": "Method Invalid | Entities | 0.17.0-preview.18",
    "keywords": "Method Invalid Invalid() Reports whether this ArchetypeChunk instance is invalid. Declaration public bool Invalid() Returns Type Description Boolean True, if no Archetype is associated with the this ArchetypeChunk instance."
  },
  "api/Unity.Entities.ArchetypeChunk.Null.html": {
    "href": "api/Unity.Entities.ArchetypeChunk.Null.html",
    "title": "Property Null | Entities | 0.17.0-preview.18",
    "keywords": "Property Null Null A special \"null\" ArchetypeChunk that you can use to test whether ArchetypeChunk instances are valid. Declaration public static ArchetypeChunk Null { get; } Property Value Type Description ArchetypeChunk Remarks An ArchetypeChunk struct that refers to a chunk of memory that has been freed will be equal to this \"null\" ArchetypeChunk instance."
  },
  "api/Unity.Entities.ArchetypeChunk.NumSharedComponents.html": {
    "href": "api/Unity.Entities.ArchetypeChunk.NumSharedComponents.html",
    "title": "Method NumSharedComponents | Entities | 0.17.0-preview.18",
    "keywords": "Method NumSharedComponents NumSharedComponents() The number of shared components in the archetype associated with this chunk. Declaration public int NumSharedComponents() Returns Type Description Int32 The shared component count."
  },
  "api/Unity.Entities.ArchetypeChunk.op_Equality.html": {
    "href": "api/Unity.Entities.ArchetypeChunk.op_Equality.html",
    "title": "Operator Equality | Entities | 0.17.0-preview.18",
    "keywords": "Operator Equality Equality(ArchetypeChunk, ArchetypeChunk) Two ArchetypeChunk instances are equal if they reference the same block of chunk and entity component store memory. Declaration public static bool operator ==(ArchetypeChunk lhs, ArchetypeChunk rhs) Parameters Type Name Description ArchetypeChunk lhs An ArchetypeChunk ArchetypeChunk rhs Another ArchetypeChunk Returns Type Description Boolean True, if both ArchetypeChunk instances reference the same memory, or both contain null memory references."
  },
  "api/Unity.Entities.ArchetypeChunk.op_Inequality.html": {
    "href": "api/Unity.Entities.ArchetypeChunk.op_Inequality.html",
    "title": "Operator Inequality | Entities | 0.17.0-preview.18",
    "keywords": "Operator Inequality Inequality(ArchetypeChunk, ArchetypeChunk) Two ArchetypeChunk instances are only equal if they reference the same block of chunk and entity component store memory. Declaration public static bool operator !=(ArchetypeChunk lhs, ArchetypeChunk rhs) Parameters Type Name Description ArchetypeChunk lhs An ArchetypeChunk ArchetypeChunk rhs Another ArchetypeChunk Returns Type Description Boolean True, if the ArchetypeChunk instances reference different blocks of memory."
  },
  "api/Unity.Entities.ArchetypeChunk.SetChunkComponentData.html": {
    "href": "api/Unity.Entities.ArchetypeChunk.SetChunkComponentData.html",
    "title": "Method SetChunkComponentData | Entities | 0.17.0-preview.18",
    "keywords": "Method SetChunkComponentData SetChunkComponentData<T>(ComponentTypeHandle<T>, T) Sets the value of a chunk component. Declaration public void SetChunkComponentData<T>(ComponentTypeHandle<T> chunkComponentTypeHandle, T value) where T : struct Parameters Type Name Description ComponentTypeHandle <T> chunkComponentTypeHandle An object containing type and job safety information. Create this object by calling GetComponentTypeHandle<T>(Boolean) immediately before scheduling a job. Pass the object to a job using a public field you define as part of the job struct. T value A struct of type T containing the new values for the chunk component. Type Parameters Name Description T The data type of the chunk component."
  },
  "api/Unity.Entities.ArchetypeChunkArray.CalculateEntityCount.html": {
    "href": "api/Unity.Entities.ArchetypeChunkArray.CalculateEntityCount.html",
    "title": "Method CalculateEntityCount | Entities | 0.17.0-preview.18",
    "keywords": "Method CalculateEntityCount CalculateEntityCount(NativeArray<ArchetypeChunk>) Declaration public static int CalculateEntityCount(NativeArray<ArchetypeChunk> chunks) Parameters Type Name Description NativeArray < ArchetypeChunk > chunks Returns Type Description Int32"
  },
  "api/Unity.Entities.ArchetypeChunkArray.html": {
    "href": "api/Unity.Entities.ArchetypeChunkArray.html",
    "title": "Struct ArchetypeChunkArray | Entities | 0.17.0-preview.18",
    "keywords": "Struct ArchetypeChunkArray Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct ArchetypeChunkArray Methods Name Description CalculateEntityCount(NativeArray<ArchetypeChunk>)"
  },
  "api/Unity.Entities.ArchetypeChunkIterator.html": {
    "href": "api/Unity.Entities.ArchetypeChunkIterator.html",
    "title": "Struct ArchetypeChunkIterator | Entities | 0.17.0-preview.18",
    "keywords": "Struct ArchetypeChunkIterator Can be passed into IJobChunk.RunWithoutJobs to iterate over an entity query without running any jobs. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct ArchetypeChunkIterator"
  },
  "api/Unity.Entities.Asset.html": {
    "href": "api/Unity.Entities.Asset.html",
    "title": "Struct Asset | Entities | 0.17.0-preview.18",
    "keywords": "Struct Asset Marks the entity as an asset, which is used for the Export phase of GameObject conversion. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct Asset : IComponentData"
  },
  "api/Unity.Entities.BeginFixedStepSimulationEntityCommandBufferSystem.html": {
    "href": "api/Unity.Entities.BeginFixedStepSimulationEntityCommandBufferSystem.html",
    "title": "Class BeginFixedStepSimulationEntityCommandBufferSystem | Entities | 0.17.0-preview.18",
    "keywords": "Class BeginFixedStepSimulationEntityCommandBufferSystem Inheritance Object ComponentSystemBase ComponentSystem EntityCommandBufferSystem BeginFixedStepSimulationEntityCommandBufferSystem Inherited Members EntityCommandBufferSystem.CreateCommandBuffer() EntityCommandBufferSystem.AddJobHandleForProducer(JobHandle) EntityCommandBufferSystem.OnCreate() EntityCommandBufferSystem.OnDestroy() EntityCommandBufferSystem.OnUpdate() ComponentSystem.PostUpdateCommands ComponentSystem.InitEntityQueryCache(Int32) ComponentSystem.Entities ComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.ExecutingSystemType ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetComponentTypeHandle<T>(Boolean) ComponentSystemBase.GetDynamicComponentTypeHandle(ComponentType) ComponentSystemBase.GetBufferTypeHandle<T>(Boolean) ComponentSystemBase.GetSharedComponentTypeHandle<T>() ComponentSystemBase.GetEntityTypeHandle() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.TryGetSingleton<T>(T) ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.TryGetSingletonEntity<T>(Entity) ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [ExecuteAlways] [UpdateInGroup(typeof(FixedStepSimulationSystemGroup), OrderFirst = true)] public class BeginFixedStepSimulationEntityCommandBufferSystem : EntityCommandBufferSystem Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Entities.BeginInitializationEntityCommandBufferSystem.html": {
    "href": "api/Unity.Entities.BeginInitializationEntityCommandBufferSystem.html",
    "title": "Class BeginInitializationEntityCommandBufferSystem | Entities | 0.17.0-preview.18",
    "keywords": "Class BeginInitializationEntityCommandBufferSystem Inheritance Object ComponentSystemBase ComponentSystem EntityCommandBufferSystem BeginInitializationEntityCommandBufferSystem Inherited Members EntityCommandBufferSystem.CreateCommandBuffer() EntityCommandBufferSystem.AddJobHandleForProducer(JobHandle) EntityCommandBufferSystem.OnCreate() EntityCommandBufferSystem.OnDestroy() EntityCommandBufferSystem.OnUpdate() ComponentSystem.PostUpdateCommands ComponentSystem.InitEntityQueryCache(Int32) ComponentSystem.Entities ComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.ExecutingSystemType ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetComponentTypeHandle<T>(Boolean) ComponentSystemBase.GetDynamicComponentTypeHandle(ComponentType) ComponentSystemBase.GetBufferTypeHandle<T>(Boolean) ComponentSystemBase.GetSharedComponentTypeHandle<T>() ComponentSystemBase.GetEntityTypeHandle() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.TryGetSingleton<T>(T) ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.TryGetSingletonEntity<T>(Entity) ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [ExecuteAlways] [UpdateInGroup(typeof(InitializationSystemGroup), OrderFirst = true)] public class BeginInitializationEntityCommandBufferSystem : EntityCommandBufferSystem Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Entities.BeginPresentationEntityCommandBufferSystem.html": {
    "href": "api/Unity.Entities.BeginPresentationEntityCommandBufferSystem.html",
    "title": "Class BeginPresentationEntityCommandBufferSystem | Entities | 0.17.0-preview.18",
    "keywords": "Class BeginPresentationEntityCommandBufferSystem Inheritance Object ComponentSystemBase ComponentSystem EntityCommandBufferSystem BeginPresentationEntityCommandBufferSystem Inherited Members EntityCommandBufferSystem.CreateCommandBuffer() EntityCommandBufferSystem.AddJobHandleForProducer(JobHandle) EntityCommandBufferSystem.OnCreate() EntityCommandBufferSystem.OnDestroy() EntityCommandBufferSystem.OnUpdate() ComponentSystem.PostUpdateCommands ComponentSystem.InitEntityQueryCache(Int32) ComponentSystem.Entities ComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.ExecutingSystemType ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetComponentTypeHandle<T>(Boolean) ComponentSystemBase.GetDynamicComponentTypeHandle(ComponentType) ComponentSystemBase.GetBufferTypeHandle<T>(Boolean) ComponentSystemBase.GetSharedComponentTypeHandle<T>() ComponentSystemBase.GetEntityTypeHandle() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.TryGetSingleton<T>(T) ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.TryGetSingletonEntity<T>(Entity) ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [ExecuteAlways] [UpdateInGroup(typeof(PresentationSystemGroup), OrderFirst = true)] public class BeginPresentationEntityCommandBufferSystem : EntityCommandBufferSystem Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Entities.BeginSimulationEntityCommandBufferSystem.html": {
    "href": "api/Unity.Entities.BeginSimulationEntityCommandBufferSystem.html",
    "title": "Class BeginSimulationEntityCommandBufferSystem | Entities | 0.17.0-preview.18",
    "keywords": "Class BeginSimulationEntityCommandBufferSystem Inheritance Object ComponentSystemBase ComponentSystem EntityCommandBufferSystem BeginSimulationEntityCommandBufferSystem Inherited Members EntityCommandBufferSystem.CreateCommandBuffer() EntityCommandBufferSystem.AddJobHandleForProducer(JobHandle) EntityCommandBufferSystem.OnCreate() EntityCommandBufferSystem.OnDestroy() EntityCommandBufferSystem.OnUpdate() ComponentSystem.PostUpdateCommands ComponentSystem.InitEntityQueryCache(Int32) ComponentSystem.Entities ComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.ExecutingSystemType ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetComponentTypeHandle<T>(Boolean) ComponentSystemBase.GetDynamicComponentTypeHandle(ComponentType) ComponentSystemBase.GetBufferTypeHandle<T>(Boolean) ComponentSystemBase.GetSharedComponentTypeHandle<T>() ComponentSystemBase.GetEntityTypeHandle() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.TryGetSingleton<T>(T) ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.TryGetSingletonEntity<T>(Entity) ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [ExecuteAlways] [UpdateInGroup(typeof(SimulationSystemGroup), OrderFirst = true)] public class BeginSimulationEntityCommandBufferSystem : EntityCommandBufferSystem Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Entities.BlobArray-1.GetUnsafePtr.html": {
    "href": "api/Unity.Entities.BlobArray-1.GetUnsafePtr.html",
    "title": "Method GetUnsafePtr | Entities | 0.17.0-preview.18",
    "keywords": "Method GetUnsafePtr GetUnsafePtr() Provides an unsafe pointer to the array data. Declaration public void *GetUnsafePtr() Returns Type Description Void * An unsafe pointer. Remarks You can only use unsafe pointers in unsafe contexts ."
  },
  "api/Unity.Entities.BlobArray-1.html": {
    "href": "api/Unity.Entities.BlobArray-1.html",
    "title": "Struct BlobArray<T> | Entities | 0.17.0-preview.18",
    "keywords": "Struct BlobArray<T> An immutable array of value types stored in a blob asset. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct BlobArray<T> where T : struct Type Parameters Name Description T The data type of the elements in the array. Must be a struct or other value type. Remarks When creating a blob asset, use the BlobBuilderArray<T> provided by a BlobBuilder instance to set the array elements. Properties Name Description Item[Int32] The element of the array at the index position. Length The number of elements in the array. Methods Name Description GetUnsafePtr() Provides an unsafe pointer to the array data. ToArray() Copies the elements of this BlobArray to a new managed array. See Also BlobBuilder"
  },
  "api/Unity.Entities.BlobArray-1.Item.html": {
    "href": "api/Unity.Entities.BlobArray-1.Item.html",
    "title": "Property Item | Entities | 0.17.0-preview.18",
    "keywords": "Property Item Item[Int32] The element of the array at the index position. Declaration public T this[int index] { get; } Parameters Type Name Description Int32 index The array index. Property Value Type Description T Remarks The array element is a reference return . Exceptions Type Condition IndexOutOfRangeException Thrown if index is out of bounds."
  },
  "api/Unity.Entities.BlobArray-1.Length.html": {
    "href": "api/Unity.Entities.BlobArray-1.Length.html",
    "title": "Property Length | Entities | 0.17.0-preview.18",
    "keywords": "Property Length Length The number of elements in the array. Declaration public int Length { get; } Property Value Type Description Int32"
  },
  "api/Unity.Entities.BlobArray-1.ToArray.html": {
    "href": "api/Unity.Entities.BlobArray-1.ToArray.html",
    "title": "Method ToArray | Entities | 0.17.0-preview.18",
    "keywords": "Method ToArray ToArray() Copies the elements of this BlobArray to a new managed array. Declaration public T[] ToArray() Returns Type Description T[] An array containing copies of the elements of the BlobArray."
  },
  "api/Unity.Entities.BlobAssetChange.Hash.html": {
    "href": "api/Unity.Entities.BlobAssetChange.Hash.html",
    "title": "Field Hash | Entities | 0.17.0-preview.18",
    "keywords": "Field Hash The content hash for this blob asset. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public ulong Hash Returns Type Description UInt64"
  },
  "api/Unity.Entities.BlobAssetChange.html": {
    "href": "api/Unity.Entities.BlobAssetChange.html",
    "title": "Struct BlobAssetChange | Entities | 0.17.0-preview.18",
    "keywords": "Struct BlobAssetChange Header for a changed blob asset. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct BlobAssetChange Fields Name Description Hash The content hash for this blob asset. Length Byte length of this blob asset in the BlobAssetData array."
  },
  "api/Unity.Entities.BlobAssetChange.Length.html": {
    "href": "api/Unity.Entities.BlobAssetChange.Length.html",
    "title": "Field Length | Entities | 0.17.0-preview.18",
    "keywords": "Field Length Byte length of this blob asset in the BlobAssetData array. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public int Length Returns Type Description Int32"
  },
  "api/Unity.Entities.BlobAssetComputationContext-2.AddBlobAssetToCompute.html": {
    "href": "api/Unity.Entities.BlobAssetComputationContext-2.AddBlobAssetToCompute.html",
    "title": "Method AddBlobAssetToCompute | Entities | 0.17.0-preview.18",
    "keywords": "Method AddBlobAssetToCompute AddBlobAssetToCompute(Hash128, TS) Call this method to record a setting object that will be used to compute a BlobAsset Declaration public void AddBlobAssetToCompute(Hash128 hash, TS settings) Parameters Type Name Description Hash128 hash The hash associated with the BlobAsset TS settings The setting object to store"
  },
  "api/Unity.Entities.BlobAssetComputationContext-2.AddComputedBlobAsset.html": {
    "href": "api/Unity.Entities.BlobAssetComputationContext-2.AddComputedBlobAsset.html",
    "title": "Method AddComputedBlobAsset | Entities | 0.17.0-preview.18",
    "keywords": "Method AddComputedBlobAsset AddComputedBlobAsset(Hash128, BlobAssetReference<TB>) Add a newly created BlobAsset in the context and its Store. Declaration public void AddComputedBlobAsset(Hash128 hash, BlobAssetReference<TB> blob) Parameters Type Name Description Hash128 hash The hash associated to the BlobAsset BlobAssetReference <TB> blob The BlobAsset to add"
  },
  "api/Unity.Entities.BlobAssetComputationContext-2.AssociateBlobAssetWithUnityObject.html": {
    "href": "api/Unity.Entities.BlobAssetComputationContext-2.AssociateBlobAssetWithUnityObject.html",
    "title": "Method AssociateBlobAssetWithUnityObject | Entities | 0.17.0-preview.18",
    "keywords": "Method AssociateBlobAssetWithUnityObject AssociateBlobAssetWithUnityObject(Hash128, Object) Declare the BlobAsset being associated with the given UnityObject Declaration public void AssociateBlobAssetWithUnityObject(Hash128 hash, Object unityObject) Parameters Type Name Description Hash128 hash The hash associated to the BlobAsset Object unityObject The UnityObject associated with the BlobAsset Remarks One of the role of the BlobAssetComputationContext<TS, TB> is to track the new association between Authoring UnityObject and BlobAsset and report them to the BlobAssetStore to automatically track the life-time of the BlobAssetReference<T> and release the instances that are no longer used."
  },
  "api/Unity.Entities.BlobAssetComputationContext-2.-ctor.html": {
    "href": "api/Unity.Entities.BlobAssetComputationContext-2.-ctor.html",
    "title": "Constructor BlobAssetComputationContext | Entities | 0.17.0-preview.18",
    "keywords": "Constructor BlobAssetComputationContext BlobAssetComputationContext(BlobAssetStore, Int32, Allocator) Declaration public BlobAssetComputationContext(BlobAssetStore blobAssetStore, int initialCapacity, Allocator allocator) Parameters Type Name Description BlobAssetStore blobAssetStore Int32 initialCapacity Allocator allocator"
  },
  "api/Unity.Entities.BlobAssetComputationContext-2.Dispose.html": {
    "href": "api/Unity.Entities.BlobAssetComputationContext-2.Dispose.html",
    "title": "Method Dispose | Entities | 0.17.0-preview.18",
    "keywords": "Method Dispose Dispose() Dispose the Computation context, update the BlobAssetStore with the new BlobAsset/UnityObject associations Declaration public void Dispose() Remarks This method will calls UpdateBlobStore() to ensure the store is up to date."
  },
  "api/Unity.Entities.BlobAssetComputationContext-2.GetBlobAsset.html": {
    "href": "api/Unity.Entities.BlobAssetComputationContext-2.GetBlobAsset.html",
    "title": "Method GetBlobAsset | Entities | 0.17.0-preview.18",
    "keywords": "Method GetBlobAsset GetBlobAsset(Hash128, out BlobAssetReference<TB>) Get the blob asset for the corresponding hash Declaration public bool GetBlobAsset(Hash128 hash, out BlobAssetReference<TB> blob) Parameters Type Name Description Hash128 hash The hash associated with the BlobAsset BlobAssetReference <TB> blob The BlobAsset corresponding to the given Hash Returns Type Description Boolean true if the blob asset was found, false otherwise"
  },
  "api/Unity.Entities.BlobAssetComputationContext-2.GetSettings.html": {
    "href": "api/Unity.Entities.BlobAssetComputationContext-2.GetSettings.html",
    "title": "Method GetSettings | Entities | 0.17.0-preview.18",
    "keywords": "Method GetSettings GetSettings(Allocator) Declaration public NativeArray<TS> GetSettings(Allocator allocator) Parameters Type Name Description Allocator allocator Returns Type Description NativeArray <TS>"
  },
  "api/Unity.Entities.BlobAssetComputationContext-2.html": {
    "href": "api/Unity.Entities.BlobAssetComputationContext-2.html",
    "title": "Struct BlobAssetComputationContext<TS, TB> | Entities | 0.17.0-preview.18",
    "keywords": "Struct BlobAssetComputationContext<TS, TB> The BlobAssetComputationContext must be used during Authoring to ECS conversion process to detect which BlobAsset should be computed and to declare their association with a UnityObject Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct BlobAssetComputationContext<TS, TB> : IDisposable where TS : struct where TB : struct Type Parameters Name Description TS The type of the setting struct to be used to generate the BlobAsset TB The type of the BlobAsset to generate Remarks The context must typically be used in a three stages conversion process, for given type of BlobAsset to process. Multiple context can be used if multiple BlobAsset types are generated. Stages: 1) Each Authoring component to convert are evaluated> The user calls AssociateBlobAssetWithUnityObject(Hash128, Object) to declare the association between the UnityObject owning the Authoring component and the BlobAsset being processed. Then NeedToComputeBlobAsset(Hash128) is called to determine if the BlobAsset needs to be computed or if it's already in the store (or registered for computation). The user creates the setting object that contains the necessary information to create the BlobAsset later on and calls AddBlobAssetToCompute(Hash128, TS) . 2) The user creates a job to compute all BlobAsset and calls GetSettings(Allocator) to feed the job with the settings of each BlobAsset to compute. During the job execution, the BlobAsset will be created and typically stored in a result array. After the job is done, the user must call AddComputedBlobAsset(Hash128, BlobAssetReference<TB>) to add the newly created BlobAsset to the context (and the Store) 3) The user create ECS Components and attaches the BlobAsset by calling GetBlobAsset(Hash128, out BlobAssetReference<TB>) . When the context will be disposed (typically after the conversion process is done), the store will be updated with the new associations between the BlobAsset and the UnityObject(s) that use them. If a BlobAsset is no longer used by any UnityObject, it will be disposed. Thread-safety: main thread only. Constructors Name Description BlobAssetComputationContext(BlobAssetStore, Int32, Allocator) Properties Name Description IsCreated Methods Name Description AddBlobAssetToCompute(Hash128, TS) Call this method to record a setting object that will be used to compute a BlobAsset AddComputedBlobAsset(Hash128, BlobAssetReference<TB>) Add a newly created BlobAsset in the context and its Store. AssociateBlobAssetWithUnityObject(Hash128, Object) Declare the BlobAsset being associated with the given UnityObject Dispose() Dispose the Computation context, update the BlobAssetStore with the new BlobAsset/UnityObject associations GetBlobAsset(Hash128, out BlobAssetReference<TB>) Get the blob asset for the corresponding hash GetSettings(Allocator) NeedToComputeBlobAsset(Hash128) During the conversion process, the user must call this method for each BlobAsset being processed, to determine if it requires to be computed UpdateBlobStore() Update the store with the recorded BlobAsset/UnityObject associations."
  },
  "api/Unity.Entities.BlobAssetComputationContext-2.IsCreated.html": {
    "href": "api/Unity.Entities.BlobAssetComputationContext-2.IsCreated.html",
    "title": "Property IsCreated | Entities | 0.17.0-preview.18",
    "keywords": "Property IsCreated IsCreated Declaration public bool IsCreated { get; } Property Value Type Description Boolean"
  },
  "api/Unity.Entities.BlobAssetComputationContext-2.NeedToComputeBlobAsset.html": {
    "href": "api/Unity.Entities.BlobAssetComputationContext-2.NeedToComputeBlobAsset.html",
    "title": "Method NeedToComputeBlobAsset | Entities | 0.17.0-preview.18",
    "keywords": "Method NeedToComputeBlobAsset NeedToComputeBlobAsset(Hash128) During the conversion process, the user must call this method for each BlobAsset being processed, to determine if it requires to be computed Declaration public bool NeedToComputeBlobAsset(Hash128 hash) Parameters Type Name Description Hash128 hash The hash associated to the BlobAsset Returns Type Description Boolean true if the BlobAsset must be computed, false if it's already in the store or the computing queue"
  },
  "api/Unity.Entities.BlobAssetComputationContext-2.UpdateBlobStore.html": {
    "href": "api/Unity.Entities.BlobAssetComputationContext-2.UpdateBlobStore.html",
    "title": "Method UpdateBlobStore | Entities | 0.17.0-preview.18",
    "keywords": "Method UpdateBlobStore UpdateBlobStore() Update the store with the recorded BlobAsset/UnityObject associations. Declaration public void UpdateBlobStore() Remarks User don't have to call this method because Dispose() will do it. This method can be called multiple times, on the first one will matter."
  },
  "api/Unity.Entities.BlobAssetReference-1.Create.html": {
    "href": "api/Unity.Entities.BlobAssetReference-1.Create.html",
    "title": "Method Create | Entities | 0.17.0-preview.18",
    "keywords": "Method Create Create(Void*, Int32) Creates a blob asset from a pointer to data and a specified size. Declaration public static BlobAssetReference<T> Create(void *ptr, int length) Parameters Type Name Description Void * ptr A pointer to the buffer containing the data to store in the blob asset. Int32 length The length of the buffer in bytes. Returns Type Description BlobAssetReference <T> A reference to newly created blob asset. Remarks The blob asset is created in unmanaged memory. Call Dispose() to free the asset memory when it is no longer needed. This function can only be used in an unsafe context . See Also BlobBuilder Create(Byte[]) Creates a blob asset from a byte array. Declaration public static BlobAssetReference<T> Create(byte[] data) Parameters Type Name Description Byte [] data The byte array containing the data to store in the blob asset. Returns Type Description BlobAssetReference <T> A reference to newly created blob asset. Remarks The blob asset is created in unmanaged memory. Call Dispose() to free the asset memory when it is no longer needed. This function can only be used in an unsafe context . See Also BlobBuilder Create(T) Creates a blob asset from an instance of a struct. Declaration public static BlobAssetReference<T> Create(T value) Parameters Type Name Description T value An instance of T . Returns Type Description BlobAssetReference <T> A reference to newly created blob asset. Remarks The struct must only contain blittable fields (primitive types, fixed-length arrays, or other structs meeting these same criteria). The blob asset is created in unmanaged memory. Call Dispose() to free the asset memory when it is no longer needed. This function can only be used in an unsafe context . See Also BlobBuilder"
  },
  "api/Unity.Entities.BlobAssetReference-1.Dispose.html": {
    "href": "api/Unity.Entities.BlobAssetReference-1.Dispose.html",
    "title": "Method Dispose | Entities | 0.17.0-preview.18",
    "keywords": "Method Dispose Dispose() Destroys the referenced blob asset and frees its memory. Declaration public void Dispose() Exceptions Type Condition InvalidOperationException Thrown if you attempt to dispose a blob asset that loaded as part of a scene or subscene."
  },
  "api/Unity.Entities.BlobAssetReference-1.Equals.html": {
    "href": "api/Unity.Entities.BlobAssetReference-1.Equals.html",
    "title": "Method Equals | Entities | 0.17.0-preview.18",
    "keywords": "Method Equals Equals(BlobAssetReference<T>) Two BlobAssetReferences are equal when they reference the same data. Declaration public bool Equals(BlobAssetReference<T> other) Parameters Type Name Description BlobAssetReference <T> other The reference to compare to this one. Returns Type Description Boolean True, if both references point to the same data or if both are Null . Equals(Object) Two BlobAssetReferences are equal when they reference the same data. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare to this reference Returns Type Description Boolean True, if the object is a BlobAssetReference instance that references to the same data as this one, or if both objects are Null BlobAssetReference instances. Overrides ValueType.Equals(Object)"
  },
  "api/Unity.Entities.BlobAssetReference-1.GetHashCode.html": {
    "href": "api/Unity.Entities.BlobAssetReference-1.GetHashCode.html",
    "title": "Method GetHashCode | Entities | 0.17.0-preview.18",
    "keywords": "Method GetHashCode GetHashCode() Generates the hash code for this object. Declaration public override int GetHashCode() Returns Type Description Int32 A standard C# value-type hash code. Overrides ValueType.GetHashCode()"
  },
  "api/Unity.Entities.BlobAssetReference-1.GetUnsafePtr.html": {
    "href": "api/Unity.Entities.BlobAssetReference-1.GetUnsafePtr.html",
    "title": "Method GetUnsafePtr | Entities | 0.17.0-preview.18",
    "keywords": "Method GetUnsafePtr GetUnsafePtr() Provides an unsafe pointer to the blob asset data. Declaration public void *GetUnsafePtr() Returns Type Description Void * An unsafe pointer. The pointer is null for invalid BlobAssetReference instances. Remarks You can only use unsafe pointers in unsafe contexts ."
  },
  "api/Unity.Entities.BlobAssetReference-1.html": {
    "href": "api/Unity.Entities.BlobAssetReference-1.html",
    "title": "Struct BlobAssetReference<T> | Entities | 0.17.0-preview.18",
    "keywords": "Struct BlobAssetReference<T> A reference to a blob asset stored in unmanaged memory. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct BlobAssetReference<T> : IDisposable, IEquatable<BlobAssetReference<T>> where T : struct Type Parameters Name Description T The struct data type defining the data structure of the blob asset. Remarks Create a blob asset using a BlobBuilder or by deserializing a serialized blob asset. Properties Name Description IsCreated Reports whether this instance references a valid blob asset. Null A \"null\" blob asset reference that can be used to test if a BlobAssetReference instance Value A reference to the blob asset data. Methods Name Description Create(T) Creates a blob asset from an instance of a struct. Create(Byte[]) Creates a blob asset from a byte array. Create(Void*, Int32) Creates a blob asset from a pointer to data and a specified size. Dispose() Destroys the referenced blob asset and frees its memory. Equals(Object) Two BlobAssetReferences are equal when they reference the same data. Equals(BlobAssetReference<T>) Two BlobAssetReferences are equal when they reference the same data. GetHashCode() Generates the hash code for this object. GetUnsafePtr() Provides an unsafe pointer to the blob asset data. TryRead(String, Int32, out BlobAssetReference<T>) Reads bytes from a fileName, validates the expected serialized version, and deserializes them into a new blob asset. TryRead<U>(U, Int32, out BlobAssetReference<T>) Write(BlobBuilder, String, Int32) Writes the blob data to a path with serialized version. Write<U>(U, BlobBuilder, Int32) Operators Name Description Equality(BlobAssetReference<T>, BlobAssetReference<T>) Two BlobAssetReferences are equal when they reference the same data. Inequality(BlobAssetReference<T>, BlobAssetReference<T>) Two BlobAssetReferences are not equal unless they reference the same data."
  },
  "api/Unity.Entities.BlobAssetReference-1.IsCreated.html": {
    "href": "api/Unity.Entities.BlobAssetReference-1.IsCreated.html",
    "title": "Property IsCreated | Entities | 0.17.0-preview.18",
    "keywords": "Property IsCreated IsCreated Reports whether this instance references a valid blob asset. Declaration public bool IsCreated { get; } Property Value Type Description Boolean True, if this instance references a valid blob instance."
  },
  "api/Unity.Entities.BlobAssetReference-1.Null.html": {
    "href": "api/Unity.Entities.BlobAssetReference-1.Null.html",
    "title": "Property Null | Entities | 0.17.0-preview.18",
    "keywords": "Property Null Null A \"null\" blob asset reference that can be used to test if a BlobAssetReference instance Declaration public static BlobAssetReference<T> Null { get; } Property Value Type Description BlobAssetReference <T>"
  },
  "api/Unity.Entities.BlobAssetReference-1.op_Equality.html": {
    "href": "api/Unity.Entities.BlobAssetReference-1.op_Equality.html",
    "title": "Operator Equality | Entities | 0.17.0-preview.18",
    "keywords": "Operator Equality Equality(BlobAssetReference<T>, BlobAssetReference<T>) Two BlobAssetReferences are equal when they reference the same data. Declaration public static bool operator ==(BlobAssetReference<T> lhs, BlobAssetReference<T> rhs) Parameters Type Name Description BlobAssetReference <T> lhs The BlobAssetReference on the left side of the operator. BlobAssetReference <T> rhs The BlobAssetReference on the right side of the operator. Returns Type Description Boolean True, if both references point to the same data or if both are Null ."
  },
  "api/Unity.Entities.BlobAssetReference-1.op_Inequality.html": {
    "href": "api/Unity.Entities.BlobAssetReference-1.op_Inequality.html",
    "title": "Operator Inequality | Entities | 0.17.0-preview.18",
    "keywords": "Operator Inequality Inequality(BlobAssetReference<T>, BlobAssetReference<T>) Two BlobAssetReferences are not equal unless they reference the same data. Declaration public static bool operator !=(BlobAssetReference<T> lhs, BlobAssetReference<T> rhs) Parameters Type Name Description BlobAssetReference <T> lhs The BlobAssetReference on the left side of the operator. BlobAssetReference <T> rhs The BlobAssetReference on the right side of the operator. Returns Type Description Boolean True, if the references point to different data in memory or if one is Null ."
  },
  "api/Unity.Entities.BlobAssetReference-1.TryRead.html": {
    "href": "api/Unity.Entities.BlobAssetReference-1.TryRead.html",
    "title": "Method TryRead | Entities | 0.17.0-preview.18",
    "keywords": "Method TryRead TryRead<U>(U, Int32, out BlobAssetReference<T>) Declaration public static bool TryRead<U>(U binaryReader, int version, out BlobAssetReference<T> result) where U : BinaryReader Parameters Type Name Description U binaryReader Int32 version BlobAssetReference <T> result Returns Type Description Boolean Type Parameters Name Description U TryRead(String, Int32, out BlobAssetReference<T>) Reads bytes from a fileName, validates the expected serialized version, and deserializes them into a new blob asset. Declaration public static bool TryRead(string path, int version, out BlobAssetReference<T> result) Parameters Type Name Description String path The path of the blob data to read. Int32 version Expected version number of the blob data. BlobAssetReference <T> result The resulting BlobAssetReference if the data was read successful. Returns Type Description Boolean A bool if the read was successful or not."
  },
  "api/Unity.Entities.BlobAssetReference-1.Value.html": {
    "href": "api/Unity.Entities.BlobAssetReference-1.Value.html",
    "title": "Property Value | Entities | 0.17.0-preview.18",
    "keywords": "Property Value Value A reference to the blob asset data. Declaration public T Value { get; } Property Value Type Description T The root data structure of the blob asset data. Remarks The property is a reference return ."
  },
  "api/Unity.Entities.BlobAssetReference-1.Write.html": {
    "href": "api/Unity.Entities.BlobAssetReference-1.Write.html",
    "title": "Method Write | Entities | 0.17.0-preview.18",
    "keywords": "Method Write Write<U>(U, BlobBuilder, Int32) Declaration public static void Write<U>(U writer, BlobBuilder builder, int verison) where U : BinaryWriter Parameters Type Name Description U writer BlobBuilder builder Int32 verison Type Parameters Name Description U Write(BlobBuilder, String, Int32) Writes the blob data to a path with serialized version. Declaration public static void Write(BlobBuilder builder, string path, int verison) Parameters Type Name Description BlobBuilder builder The BlobBuilder containing the blob to write. String path The path to write the blob data. Int32 verison"
  },
  "api/Unity.Entities.BlobAssetReferenceChange.Component.html": {
    "href": "api/Unity.Entities.BlobAssetReferenceChange.Component.html",
    "title": "Field Component | Entities | 0.17.0-preview.18",
    "keywords": "Field Component The entity and component this patched is targeted at. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public PackedComponent Component Returns Type Description PackedComponent"
  },
  "api/Unity.Entities.BlobAssetReferenceChange.html": {
    "href": "api/Unity.Entities.BlobAssetReferenceChange.html",
    "title": "Struct BlobAssetReferenceChange | Entities | 0.17.0-preview.18",
    "keywords": "Struct BlobAssetReferenceChange Represents a blob asset reference that was changed within a EntityChangeSet Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct BlobAssetReferenceChange Fields Name Description Component The entity and component this patched is targeted at. Offset The field offset for the data. Value The blob asset this component should point to in the batch."
  },
  "api/Unity.Entities.BlobAssetReferenceChange.Offset.html": {
    "href": "api/Unity.Entities.BlobAssetReferenceChange.Offset.html",
    "title": "Field Offset | Entities | 0.17.0-preview.18",
    "keywords": "Field Offset The field offset for the data. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public int Offset Returns Type Description Int32"
  },
  "api/Unity.Entities.BlobAssetReferenceChange.Value.html": {
    "href": "api/Unity.Entities.BlobAssetReferenceChange.Value.html",
    "title": "Field Value | Entities | 0.17.0-preview.18",
    "keywords": "Field Value The blob asset this component should point to in the batch. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public ulong Value Returns Type Description UInt64"
  },
  "api/Unity.Entities.BlobAssetSerializeExtensions.html": {
    "href": "api/Unity.Entities.BlobAssetSerializeExtensions.html",
    "title": "Class BlobAssetSerializeExtensions | Entities | 0.17.0-preview.18",
    "keywords": "Class BlobAssetSerializeExtensions Extensions for supporting serialization and deserialization of blob assets. Inheritance Object BlobAssetSerializeExtensions Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class BlobAssetSerializeExtensions Methods Name Description Read<T>(BinaryReader) Reads bytes from a BinaryReader instance and deserializes them into a new blob asset. Write<T>(BinaryWriter, BlobAssetReference<T>) Serializes the blob asset data and writes the bytes to a BinaryWriter instance."
  },
  "api/Unity.Entities.BlobAssetSerializeExtensions.Read.html": {
    "href": "api/Unity.Entities.BlobAssetSerializeExtensions.Read.html",
    "title": "Method Read | Entities | 0.17.0-preview.18",
    "keywords": "Method Read Read<T>(BinaryReader) Reads bytes from a BinaryReader instance and deserializes them into a new blob asset. Declaration public static BlobAssetReference<T> Read<T>(this BinaryReader binaryReader) where T : struct Parameters Type Name Description BinaryReader binaryReader An implementation of the BinaryReader interface. Returns Type Description BlobAssetReference <T> A reference to the deserialized blob asset. Type Parameters Name Description T The blob asset's root data type. See Also StreamBinaryReader MemoryBinaryReader"
  },
  "api/Unity.Entities.BlobAssetSerializeExtensions.Write.html": {
    "href": "api/Unity.Entities.BlobAssetSerializeExtensions.Write.html",
    "title": "Method Write | Entities | 0.17.0-preview.18",
    "keywords": "Method Write Write<T>(BinaryWriter, BlobAssetReference<T>) Serializes the blob asset data and writes the bytes to a BinaryWriter instance. Declaration public static void Write<T>(this BinaryWriter binaryWriter, BlobAssetReference<T> blob) where T : struct Parameters Type Name Description BinaryWriter binaryWriter An implementation of the BinaryWriter interface. BlobAssetReference <T> blob A reference to the blob asset to serialize. Type Parameters Name Description T The blob asset's root data type. See Also StreamBinaryWriter MemoryBinaryWriter"
  },
  "api/Unity.Entities.BlobAssetStore.AddUniqueBlobAsset.html": {
    "href": "api/Unity.Entities.BlobAssetStore.AddUniqueBlobAsset.html",
    "title": "Method AddUniqueBlobAsset | Entities | 0.17.0-preview.18",
    "keywords": "Method AddUniqueBlobAsset AddUniqueBlobAsset<T>(ref BlobAssetReference<T>) Adds a blob asset where the key that makes it unique is based on the BlobAsset contents itself. If the contents of the generated blob asset is the same as a previously inserted blob asset, then the passed blobAsset will be disposed and the reference to the blob asset will be replaced with the previously added blob asset Declaration public bool AddUniqueBlobAsset<T>(ref BlobAssetReference<T> blobAsset) where T : struct Parameters Type Name Description BlobAssetReference <T> blobAsset The blob asset that will be inserted or replaced Returns Type Description Boolean Returns true if the blob asset was added, returns false if the blob asset was disposed and replaced with the previous blob. Type Parameters Name Description T"
  },
  "api/Unity.Entities.BlobAssetStore.Contains.html": {
    "href": "api/Unity.Entities.BlobAssetStore.Contains.html",
    "title": "Method Contains | Entities | 0.17.0-preview.18",
    "keywords": "Method Contains Contains<T>(Hash128) Check if the Store contains a BlobAsset of a given type and hash Declaration public bool Contains<T>(Hash128 key) Parameters Type Name Description Hash128 key The hash associated with the BlobAsset Returns Type Description Boolean true if the Store contains the BlobAsset or false if it doesn't Type Parameters Name Description T The type of the BlobAsset"
  },
  "api/Unity.Entities.BlobAssetStore.-ctor.html": {
    "href": "api/Unity.Entities.BlobAssetStore.-ctor.html",
    "title": "Constructor BlobAssetStore | Entities | 0.17.0-preview.18",
    "keywords": "Constructor BlobAssetStore BlobAssetStore() Declaration public BlobAssetStore()"
  },
  "api/Unity.Entities.BlobAssetStore.Dispose.html": {
    "href": "api/Unity.Entities.BlobAssetStore.Dispose.html",
    "title": "Method Dispose | Entities | 0.17.0-preview.18",
    "keywords": "Method Dispose Dispose() Calling dispose will reset the cache content and release all the BlobAssetReference that were stored Declaration public void Dispose()"
  },
  "api/Unity.Entities.BlobAssetStore.html": {
    "href": "api/Unity.Entities.BlobAssetStore.html",
    "title": "Class BlobAssetStore | Entities | 0.17.0-preview.18",
    "keywords": "Class BlobAssetStore Purpose of this class is to provide a consistent cache of BlobAsset object in order to avoid rebuilding them when it is not necessary Inheritance Object BlobAssetStore Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class BlobAssetStore : IDisposable Remarks Right now the lifetime scope of this cache is bound to the LiveLinkDiffGenerator's one and it is scoped by SubScene. In other words the cache is created when we enter edit mode for a given SubScene and it is released when we close edit mode. And instance of this cache is exposed in GameObjectConversionSettings to allow users to query and avoid rebuilding assets. During conversion process the user must rely on the BlobAssetComputationContext<TS, TB> to associate the BlobAsset with their corresponding Authoring UnityObject and to determine which ones are to compute. Thread-safety: nothing is thread-safe, we assume this class is consumed through the main-thread only. Calling Dispose on an instance will reset the content and dispose all BlobAssetReference object stored. Constructors Name Description BlobAssetStore() Methods Name Description AddUniqueBlobAsset<T>(ref BlobAssetReference<T>) Adds a blob asset where the key that makes it unique is based on the BlobAsset contents itself. If the contents of the generated blob asset is the same as a previously inserted blob asset, then the passed blobAsset will be disposed and the reference to the blob asset will be replaced with the previously added blob asset Contains<T>(Hash128) Check if the Store contains a BlobAsset of a given type and hash Dispose() Calling dispose will reset the cache content and release all the BlobAssetReference that were stored Remove<T>(Hash128, Boolean) Remove a BlobAssetReference from the store ResetCache(Boolean) Call this method to clear the whole content of the Cache TryAdd<T>(Hash128, BlobAssetReference<T>) Get a BlobAssetReference from its key TryGet<T>(Hash128, out BlobAssetReference<T>) Try to access to a BlobAssetReference from its key"
  },
  "api/Unity.Entities.BlobAssetStore.Remove.html": {
    "href": "api/Unity.Entities.BlobAssetStore.Remove.html",
    "title": "Method Remove | Entities | 0.17.0-preview.18",
    "keywords": "Method Remove Remove<T>(Hash128, Boolean) Remove a BlobAssetReference from the store Declaration public bool Remove<T>(Hash128 key, bool releaseBlobAsset) Parameters Type Name Description Hash128 key The key associated with the BlobAssetReference Boolean releaseBlobAsset If true the BlobAsset data will be released Returns Type Description Boolean True if the BLobAsset was removed from the store, false if it wasn't found Type Parameters Name Description T The type of the BlobAsset"
  },
  "api/Unity.Entities.BlobAssetStore.ResetCache.html": {
    "href": "api/Unity.Entities.BlobAssetStore.ResetCache.html",
    "title": "Method ResetCache | Entities | 0.17.0-preview.18",
    "keywords": "Method ResetCache ResetCache(Boolean) Call this method to clear the whole content of the Cache Declaration public void ResetCache(bool disposeAllBlobAssetReference) Parameters Type Name Description Boolean disposeAllBlobAssetReference If true all BlobAssetReference present in the cache will be dispose. If false they will remain present in memory"
  },
  "api/Unity.Entities.BlobAssetStore.TryAdd.html": {
    "href": "api/Unity.Entities.BlobAssetStore.TryAdd.html",
    "title": "Method TryAdd | Entities | 0.17.0-preview.18",
    "keywords": "Method TryAdd TryAdd<T>(Hash128, BlobAssetReference<T>) Get a BlobAssetReference from its key Declaration public bool TryAdd<T>(Hash128 key, BlobAssetReference<T> result) where T : struct Parameters Type Name Description Hash128 key The key associated with the BlobAssetReference BlobAssetReference <T> result The BlobAssetReference if found or default Returns Type Description Boolean true if the BlobAssetReference was found, false if not found Type Parameters Name Description T The type of BlobAsset"
  },
  "api/Unity.Entities.BlobAssetStore.TryGet.html": {
    "href": "api/Unity.Entities.BlobAssetStore.TryGet.html",
    "title": "Method TryGet | Entities | 0.17.0-preview.18",
    "keywords": "Method TryGet TryGet<T>(Hash128, out BlobAssetReference<T>) Try to access to a BlobAssetReference from its key Declaration public bool TryGet<T>(Hash128 key, out BlobAssetReference<T> blobAssetReference) where T : struct Parameters Type Name Description Hash128 key The key associated with the BlobAssetReference when it was added to the cache BlobAssetReference <T> blobAssetReference The corresponding BlobAssetReference or default if none was found Returns Type Description Boolean Type Parameters Name Description T The type of BlobAsset"
  },
  "api/Unity.Entities.BlobBuilder.Allocate.html": {
    "href": "api/Unity.Entities.BlobBuilder.Allocate.html",
    "title": "Method Allocate | Entities | 0.17.0-preview.18",
    "keywords": "Method Allocate Allocate<T>(ref BlobArray<T>, Int32) Allocates enough memory to store length elements of struct T . Declaration public BlobBuilderArray<T> Allocate<T>(ref BlobArray<T> ptr, int length) where T : struct Parameters Type Name Description BlobArray <T> ptr A reference to a BlobArray field in a blob asset. Int32 length The number of elements to allocate. Returns Type Description BlobBuilderArray <T> A reference to the newly allocated array as a mutable BlobBuilderArray instance. Type Parameters Name Description T The struct data type. Allocate<T>(ref BlobPtr<T>) Allocates enough memory to store a struct of type T . Declaration public T Allocate<T>(ref BlobPtr<T> ptr) where T : struct Parameters Type Name Description BlobPtr <T> ptr A reference to a blob pointer field in a blob asset. Returns Type Description T A reference to the newly allocated struct. Type Parameters Name Description T The struct data type."
  },
  "api/Unity.Entities.BlobBuilder.Construct.html": {
    "href": "api/Unity.Entities.BlobBuilder.Construct.html",
    "title": "Method Construct | Entities | 0.17.0-preview.18",
    "keywords": "Method Construct Construct<T>(ref BlobArray<T>, T[]) Copies an array of structs to an array in a blob asset after allocating the necessary memory. Declaration public BlobBuilderArray<T> Construct<T>(ref BlobArray<T> blobArray, params T[] data) where T : struct Parameters Type Name Description BlobArray <T> blobArray A reference to a BlobArray field in a blob asset. T[] data An array containing structs of type T . Returns Type Description BlobBuilderArray <T> A reference to the newly constructed array as a mutable BlobBuilderArray instance. Type Parameters Name Description T The struct data type."
  },
  "api/Unity.Entities.BlobBuilder.ConstructRoot.html": {
    "href": "api/Unity.Entities.BlobBuilder.ConstructRoot.html",
    "title": "Method ConstructRoot | Entities | 0.17.0-preview.18",
    "keywords": "Method ConstructRoot ConstructRoot<T>() Creates the top-level fields of a single blob asset. Declaration public T ConstructRoot<T>() where T : struct Returns Type Description T A reference to the blob data under construction. Type Parameters Name Description T A struct that defines the structure of the blob asset. Remarks This function allocates memory for the top-level fields of a blob asset and returns a reference to it. Use this root reference to initialize field values and to allocate memory for arrays and structs."
  },
  "api/Unity.Entities.BlobBuilder.CreateBlobAssetReference.html": {
    "href": "api/Unity.Entities.BlobBuilder.CreateBlobAssetReference.html",
    "title": "Method CreateBlobAssetReference | Entities | 0.17.0-preview.18",
    "keywords": "Method CreateBlobAssetReference CreateBlobAssetReference<T>(Allocator) Completes construction of the blob asset and returns a reference to the asset in unmanaged memory. Declaration public BlobAssetReference<T> CreateBlobAssetReference<T>(Allocator allocator) where T : struct Parameters Type Name Description Allocator allocator The type of memory to allocate. Unless the asset has a very short life span, use Persistent . Returns Type Description BlobAssetReference <T> Type Parameters Name Description T The data type of the struct used to construct the asset's root. Use the same struct type that you used when calling ConstructRoot<T>() . Remarks Use the BlobAssetReference<T> to access the blob asset. When the asset is no longer needed, call Dispose() to destroy the blob asset and free its allocated memory."
  },
  "api/Unity.Entities.BlobBuilder.-ctor.html": {
    "href": "api/Unity.Entities.BlobBuilder.-ctor.html",
    "title": "Constructor BlobBuilder | Entities | 0.17.0-preview.18",
    "keywords": "Constructor BlobBuilder BlobBuilder(Allocator, Int32) Constructs a BlobBuilder object. Declaration public BlobBuilder(Allocator allocator, int chunkSize = 65536) Parameters Type Name Description Allocator allocator The type of allocator to use for the BlobBuilder's internal, temporary data. Use Temp unless the BlobBuilder exists across more than four Unity frames. Int32 chunkSize (Optional) The minimum amount of memory to allocate while building an asset. The default value should suit most use cases. A smaller chunkSize results in more allocations; a larger chunkSize could increase the BlobBuilder's total memory allocation (which is freed when you dispose of the BlobBuilder."
  },
  "api/Unity.Entities.BlobBuilder.Dispose.html": {
    "href": "api/Unity.Entities.BlobBuilder.Dispose.html",
    "title": "Method Dispose | Entities | 0.17.0-preview.18",
    "keywords": "Method Dispose Dispose() Disposes of this BlobBuilder instance and frees its temporary memory allocations. Declaration public void Dispose() Remarks Call Dispose() after calling CreateBlobAssetReference<T>(Allocator) ."
  },
  "api/Unity.Entities.BlobBuilder.html": {
    "href": "api/Unity.Entities.BlobBuilder.html",
    "title": "Struct BlobBuilder | Entities | 0.17.0-preview.18",
    "keywords": "Struct BlobBuilder Creates blob assets. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct BlobBuilder : IDisposable Remarks A blob asset is an immutable data structure stored in unmanaged memory. Blob assets can contain primitive types, strings, structs, arrays, and arrays of arrays. Arrays and structs must only contain blittable types. Strings must be of type BlobString (or a specialized unmanaged string type such as Unity.Collections.NativeString ). To use a BlobBuilder object to create a blob asset: Declare the structure of the blob asset as a struct. Create a BlobBuilder object. Call the ConstructRoot<T>() method, where T is the struct definng the asset structure. Initialize primitive values defined at the root level of the asset. Allocate memory for arrays, structs, and BlobString instances at the root. Initialize the values of those arrays, structs, and strings. Continue allocating memory and initializing values until you have fully constructed the asset. Call CreateBlobAssetReference<T>(Allocator) to create a reference to the blob asset in memory. Dispose the BlobBuilder object. Use the BlobAssetReference<T> returned by CreateBlobAssetReference<T>(Allocator) to reference the blob asset. You can use a BlobAssetReference<T> as a field of an IComponentData struct. More than one entity can reference the same blob asset. Call Dispose() to free the memory allocated for a blob asset. Blob assets cannot be modified once created. Instead, you must create a new blob asset, update any references to the old one and then dispose of it. Examples public class UsingBuilder { } Constructors Name Description BlobBuilder(Allocator, Int32) Constructs a BlobBuilder object. Methods Name Description Allocate<T>(ref BlobArray<T>, Int32) Allocates enough memory to store length elements of struct T . Allocate<T>(ref BlobPtr<T>) Allocates enough memory to store a struct of type T . Construct<T>(ref BlobArray<T>, T[]) Copies an array of structs to an array in a blob asset after allocating the necessary memory. ConstructRoot<T>() Creates the top-level fields of a single blob asset. CreateBlobAssetReference<T>(Allocator) Completes construction of the blob asset and returns a reference to the asset in unmanaged memory. Dispose() Disposes of this BlobBuilder instance and frees its temporary memory allocations. SetPointer<T>(ref BlobPtr<T>, ref T) Sets a BlobPtr to point to the given object inside the blob. Extension Methods BlobStringExtensions.AllocateString(ref BlobBuilder, ref BlobString, String)"
  },
  "api/Unity.Entities.BlobBuilder.SetPointer.html": {
    "href": "api/Unity.Entities.BlobBuilder.SetPointer.html",
    "title": "Method SetPointer | Entities | 0.17.0-preview.18",
    "keywords": "Method SetPointer SetPointer<T>(ref BlobPtr<T>, ref T) Sets a BlobPtr to point to the given object inside the blob. Declaration public T SetPointer<T>(ref BlobPtr<T> ptr, ref T obj) where T : struct Parameters Type Name Description BlobPtr <T> ptr A reference to a blob pointer field in a blob asset. T obj The struct that exists in the blob that you want to point to. Returns Type Description T A reference to obj. Type Parameters Name Description T"
  },
  "api/Unity.Entities.BlobBuilderArray-1.-ctor.html": {
    "href": "api/Unity.Entities.BlobBuilderArray-1.-ctor.html",
    "title": "Constructor BlobBuilderArray | Entities | 0.17.0-preview.18",
    "keywords": "Constructor BlobBuilderArray BlobBuilderArray(Void*, Int32) For internal, BlobBuilder , use only. Declaration public BlobBuilderArray(void *data, int length) Parameters Type Name Description Void * data Int32 length"
  },
  "api/Unity.Entities.BlobBuilderArray-1.GetUnsafePtr.html": {
    "href": "api/Unity.Entities.BlobBuilderArray-1.GetUnsafePtr.html",
    "title": "Method GetUnsafePtr | Entities | 0.17.0-preview.18",
    "keywords": "Method GetUnsafePtr GetUnsafePtr() Provides a pointer to the data stored in the array. Declaration public void *GetUnsafePtr() Returns Type Description Void * A pointer to the first element in the array. Remarks You can only call this function in an unsafe context ."
  },
  "api/Unity.Entities.BlobBuilderArray-1.html": {
    "href": "api/Unity.Entities.BlobBuilderArray-1.html",
    "title": "Struct BlobBuilderArray<T> | Entities | 0.17.0-preview.18",
    "keywords": "Struct BlobBuilderArray<T> Used by the BlobBuilder methods to reference the arrays within a blob asset. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct BlobBuilderArray<T> where T : struct Type Parameters Name Description T The data type of the elements in the array. Remarks Use this reference to initialize the data of a newly created BlobArray<T> . Constructors Name Description BlobBuilderArray(Void*, Int32) For internal, BlobBuilder , use only. Properties Name Description Item[Int32] Array index accessor for the elements in the array. Length Reports the number of elements in the array. Methods Name Description GetUnsafePtr() Provides a pointer to the data stored in the array."
  },
  "api/Unity.Entities.BlobBuilderArray-1.Item.html": {
    "href": "api/Unity.Entities.BlobBuilderArray-1.Item.html",
    "title": "Property Item | Entities | 0.17.0-preview.18",
    "keywords": "Property Item Item[Int32] Array index accessor for the elements in the array. Declaration public T this[int index] { get; } Parameters Type Name Description Int32 index The sequential index of an array item. Property Value Type Description T Exceptions Type Condition IndexOutOfRangeException Thrown when index is less than zero or greater than the length of the array (minus one)."
  },
  "api/Unity.Entities.BlobBuilderArray-1.Length.html": {
    "href": "api/Unity.Entities.BlobBuilderArray-1.Length.html",
    "title": "Property Length | Entities | 0.17.0-preview.18",
    "keywords": "Property Length Length Reports the number of elements in the array. Declaration public int Length { get; } Property Value Type Description Int32"
  },
  "api/Unity.Entities.BlobPtr-1.GetUnsafePtr.html": {
    "href": "api/Unity.Entities.BlobPtr-1.GetUnsafePtr.html",
    "title": "Method GetUnsafePtr | Entities | 0.17.0-preview.18",
    "keywords": "Method GetUnsafePtr GetUnsafePtr() Provides an unsafe pointer to the referenced data. Declaration public void *GetUnsafePtr() Returns Type Description Void * An unsafe pointer. Remarks You can only use unsafe pointers in unsafe contexts ."
  },
  "api/Unity.Entities.BlobPtr-1.html": {
    "href": "api/Unity.Entities.BlobPtr-1.html",
    "title": "Struct BlobPtr<T> | Entities | 0.17.0-preview.18",
    "keywords": "Struct BlobPtr<T> A pointer referencing a struct, array, or field inside a blob asset. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct BlobPtr<T> where T : struct Type Parameters Name Description T The data type of the referenced object. Properties Name Description IsValid Returns 'true' if this is a valid pointer (not null) Value The value, of type T to which the pointer refers. Methods Name Description GetUnsafePtr() Provides an unsafe pointer to the referenced data. See Also BlobBuilder"
  },
  "api/Unity.Entities.BlobPtr-1.IsValid.html": {
    "href": "api/Unity.Entities.BlobPtr-1.IsValid.html",
    "title": "Property IsValid | Entities | 0.17.0-preview.18",
    "keywords": "Property IsValid IsValid Returns 'true' if this is a valid pointer (not null) Declaration public bool IsValid { get; } Property Value Type Description Boolean"
  },
  "api/Unity.Entities.BlobPtr-1.Value.html": {
    "href": "api/Unity.Entities.BlobPtr-1.Value.html",
    "title": "Property Value | Entities | 0.17.0-preview.18",
    "keywords": "Property Value Value The value, of type T to which the pointer refers. Declaration public T Value { get; } Property Value Type Description T Remarks The property is a reference return . Exceptions Type Condition InvalidOperationException Thrown if the pointer does not reference a valid instance of a data type."
  },
  "api/Unity.Entities.BlobString.html": {
    "href": "api/Unity.Entities.BlobString.html",
    "title": "Struct BlobString | Entities | 0.17.0-preview.18",
    "keywords": "Struct BlobString An immutable, variable-length string stored in a blob asset. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct BlobString Properties Name Description Length The length of the string in UTF-8 bytes. Methods Name Description ToString() Converts this BlobString to a standard C# String . See Also BlobBuilder"
  },
  "api/Unity.Entities.BlobString.Length.html": {
    "href": "api/Unity.Entities.BlobString.Length.html",
    "title": "Property Length | Entities | 0.17.0-preview.18",
    "keywords": "Property Length Length The length of the string in UTF-8 bytes. Declaration public int Length { get; } Property Value Type Description Int32"
  },
  "api/Unity.Entities.BlobString.ToString.html": {
    "href": "api/Unity.Entities.BlobString.ToString.html",
    "title": "Method ToString | Entities | 0.17.0-preview.18",
    "keywords": "Method ToString ToString() Converts this BlobString to a standard C# String . Declaration public string ToString() Returns Type Description String The C# string."
  },
  "api/Unity.Entities.BlobStringExtensions.AllocateString.html": {
    "href": "api/Unity.Entities.BlobStringExtensions.AllocateString.html",
    "title": "Method AllocateString | Entities | 0.17.0-preview.18",
    "keywords": "Method AllocateString AllocateString(ref BlobBuilder, ref BlobString, String) Allocates memory to store the string in a blob asset and copies the string data into it. Declaration public static void AllocateString(this ref BlobBuilder builder, ref BlobString blobStr, string value) Parameters Type Name Description BlobBuilder builder The BlobBuilder instance building the blob asset. BlobString blobStr A reference to the field in the blob asset that will store the string. This function allocates memory for that field and sets the string value. String value The string to copy into the blob asset."
  },
  "api/Unity.Entities.BlobStringExtensions.html": {
    "href": "api/Unity.Entities.BlobStringExtensions.html",
    "title": "Class BlobStringExtensions | Entities | 0.17.0-preview.18",
    "keywords": "Class BlobStringExtensions Extensions that allow the creation of BlobString instances by a BlobBuilder . Inheritance Object BlobStringExtensions Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class BlobStringExtensions Methods Name Description AllocateString(ref BlobBuilder, ref BlobString, String) Allocates memory to store the string in a blob asset and copies the string data into it."
  },
  "api/Unity.Entities.BufferAccessor-1.-ctor.html": {
    "href": "api/Unity.Entities.BufferAccessor-1.-ctor.html",
    "title": "Constructor BufferAccessor | Entities | 0.17.0-preview.18",
    "keywords": "Constructor BufferAccessor BufferAccessor(Byte*, Int32, Int32, Int32) Declaration public BufferAccessor(byte *basePointer, int length, int stride, int internalCapacity) Parameters Type Name Description Byte * basePointer Int32 length Int32 stride Int32 internalCapacity"
  },
  "api/Unity.Entities.BufferAccessor-1.html": {
    "href": "api/Unity.Entities.BufferAccessor-1.html",
    "title": "Struct BufferAccessor<T> | Entities | 0.17.0-preview.18",
    "keywords": "Struct BufferAccessor<T> Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [NativeContainer] public struct BufferAccessor<T> where T : struct, IBufferElementData Type Parameters Name Description T Constructors Name Description BufferAccessor(Byte*, Int32, Int32, Int32) Properties Name Description Item[Int32] Length"
  },
  "api/Unity.Entities.BufferAccessor-1.Item.html": {
    "href": "api/Unity.Entities.BufferAccessor-1.Item.html",
    "title": "Property Item | Entities | 0.17.0-preview.18",
    "keywords": "Property Item Item[Int32] Declaration public DynamicBuffer<T> this[int index] { get; } Parameters Type Name Description Int32 index Property Value Type Description DynamicBuffer <T> Exceptions Type Condition InvalidOperationException"
  },
  "api/Unity.Entities.BufferAccessor-1.Length.html": {
    "href": "api/Unity.Entities.BufferAccessor-1.Length.html",
    "title": "Property Length | Entities | 0.17.0-preview.18",
    "keywords": "Property Length Length Declaration public int Length { get; } Property Value Type Description Int32"
  },
  "api/Unity.Entities.BufferFromEntity-1.DidChange.html": {
    "href": "api/Unity.Entities.BufferFromEntity-1.DidChange.html",
    "title": "Method DidChange | Entities | 0.17.0-preview.18",
    "keywords": "Method DidChange DidChange(Entity, UInt32) Reports whether any of IBufferElementData components of the type T, in the chunk containing the specified Entity , could have changed. Declaration public bool DidChange(Entity entity, uint version) Parameters Type Name Description Entity entity The entity. UInt32 version The version to compare. In a system, this parameter should be set to the current LastSystemVersion at the time the job is run or scheduled. Returns Type Description Boolean True, if the version number stored in the chunk for this component is more recent than the version passed to the version parameter. Remarks Note that for efficiency, the change version applies to whole chunks not individual entities. The change version is incremented even when another job or system that has declared write access to a component does not actually change the component value."
  },
  "api/Unity.Entities.BufferFromEntity-1.HasComponent.html": {
    "href": "api/Unity.Entities.BufferFromEntity-1.HasComponent.html",
    "title": "Method HasComponent | Entities | 0.17.0-preview.18",
    "keywords": "Method HasComponent HasComponent(Entity) Reports whether the specified Entity instance still refers to a valid entity and that it has a buffer component of type T. Declaration public bool HasComponent(Entity entity) Parameters Type Name Description Entity entity The entity. Returns Type Description Boolean True if the entity has a buffer component of type T, and false if it does not. Also returns false if the Entity instance refers to an entity that has been destroyed. Remarks To report if the provided entity has a buffer component of type T, this function confirms whether the EntityArchetype of the provided entity includes buffer components of type T."
  },
  "api/Unity.Entities.BufferFromEntity-1.html": {
    "href": "api/Unity.Entities.BufferFromEntity-1.html",
    "title": "Struct BufferFromEntity<T> | Entities | 0.17.0-preview.18",
    "keywords": "Struct BufferFromEntity<T> Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [NativeContainer] public struct BufferFromEntity<T> where T : struct, IBufferElementData Type Parameters Name Description T Properties Name Description Item[Entity] Methods Name Description DidChange(Entity, UInt32) Reports whether any of IBufferElementData components of the type T, in the chunk containing the specified Entity , could have changed. HasComponent(Entity) Reports whether the specified Entity instance still refers to a valid entity and that it has a buffer component of type T."
  },
  "api/Unity.Entities.BufferFromEntity-1.Item.html": {
    "href": "api/Unity.Entities.BufferFromEntity-1.Item.html",
    "title": "Property Item | Entities | 0.17.0-preview.18",
    "keywords": "Property Item Item[Entity] Declaration public DynamicBuffer<T> this[Entity entity] { get; } Parameters Type Name Description Entity entity Property Value Type Description DynamicBuffer <T>"
  },
  "api/Unity.Entities.BufferTypeHandle-1.GlobalSystemVersion.html": {
    "href": "api/Unity.Entities.BufferTypeHandle-1.GlobalSystemVersion.html",
    "title": "Property GlobalSystemVersion | Entities | 0.17.0-preview.18",
    "keywords": "Property GlobalSystemVersion GlobalSystemVersion Declaration public uint GlobalSystemVersion { get; } Property Value Type Description UInt32"
  },
  "api/Unity.Entities.BufferTypeHandle-1.html": {
    "href": "api/Unity.Entities.BufferTypeHandle-1.html",
    "title": "Struct BufferTypeHandle<T> | Entities | 0.17.0-preview.18",
    "keywords": "Struct BufferTypeHandle<T> Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [NativeContainer] [NativeContainerSupportsMinMaxWriteRestriction] public struct BufferTypeHandle<T> where T : struct, IBufferElementData Type Parameters Name Description T Properties Name Description GlobalSystemVersion IsReadOnly"
  },
  "api/Unity.Entities.BufferTypeHandle-1.IsReadOnly.html": {
    "href": "api/Unity.Entities.BufferTypeHandle-1.IsReadOnly.html",
    "title": "Property IsReadOnly | Entities | 0.17.0-preview.18",
    "keywords": "Property IsReadOnly IsReadOnly Declaration public bool IsReadOnly { get; } Property Value Type Description Boolean"
  },
  "api/Unity.Entities.BuildUtils.html": {
    "href": "api/Unity.Entities.BuildUtils.html",
    "title": "Namespace Unity.Entities.BuildUtils | Entities | 0.17.0-preview.18",
    "keywords": "Namespace Unity.Entities.BuildUtils Classes MonoExtensions TypeHash TypeUtils Structs TypeUtils.AlignAndSize"
  },
  "api/Unity.Entities.BuildUtils.MonoExtensions.CalculateMemoryOrdering.html": {
    "href": "api/Unity.Entities.BuildUtils.MonoExtensions.CalculateMemoryOrdering.html",
    "title": "Method CalculateMemoryOrdering | Entities | 0.17.0-preview.18",
    "keywords": "Method CalculateMemoryOrdering CalculateMemoryOrdering(TypeDefinition) Declaration public static ulong CalculateMemoryOrdering(this TypeDefinition typeDef) Parameters Type Name Description TypeDefinition typeDef Returns Type Description UInt64"
  },
  "api/Unity.Entities.BuildUtils.MonoExtensions.CalculateStableTypeHash.html": {
    "href": "api/Unity.Entities.BuildUtils.MonoExtensions.CalculateStableTypeHash.html",
    "title": "Method CalculateStableTypeHash | Entities | 0.17.0-preview.18",
    "keywords": "Method CalculateStableTypeHash CalculateStableTypeHash(TypeDefinition) Declaration public static ulong CalculateStableTypeHash(this TypeDefinition typeDef) Parameters Type Name Description TypeDefinition typeDef Returns Type Description UInt64"
  },
  "api/Unity.Entities.BuildUtils.MonoExtensions.DynamicArrayElementType.html": {
    "href": "api/Unity.Entities.BuildUtils.MonoExtensions.DynamicArrayElementType.html",
    "title": "Method DynamicArrayElementType | Entities | 0.17.0-preview.18",
    "keywords": "Method DynamicArrayElementType DynamicArrayElementType(TypeReference) Declaration public static TypeReference DynamicArrayElementType(this TypeReference typeRef) Parameters Type Name Description TypeReference typeRef Returns Type Description TypeReference"
  },
  "api/Unity.Entities.BuildUtils.MonoExtensions.FixedSpecialType.html": {
    "href": "api/Unity.Entities.BuildUtils.MonoExtensions.FixedSpecialType.html",
    "title": "Method FixedSpecialType | Entities | 0.17.0-preview.18",
    "keywords": "Method FixedSpecialType FixedSpecialType(TypeReference) Declaration public static TypeDefinition FixedSpecialType(this TypeReference typeRef) Parameters Type Name Description TypeReference typeRef Returns Type Description TypeDefinition"
  },
  "api/Unity.Entities.BuildUtils.MonoExtensions.GetReflectionName.html": {
    "href": "api/Unity.Entities.BuildUtils.MonoExtensions.GetReflectionName.html",
    "title": "Method GetReflectionName | Entities | 0.17.0-preview.18",
    "keywords": "Method GetReflectionName GetReflectionName(TypeReference) Declaration public static string GetReflectionName(this TypeReference type) Parameters Type Name Description TypeReference type Returns Type Description String"
  },
  "api/Unity.Entities.BuildUtils.MonoExtensions.GetSystemReflectionType.html": {
    "href": "api/Unity.Entities.BuildUtils.MonoExtensions.GetSystemReflectionType.html",
    "title": "Method GetSystemReflectionType | Entities | 0.17.0-preview.18",
    "keywords": "Method GetSystemReflectionType GetSystemReflectionType(TypeReference) Declaration public static Type GetSystemReflectionType(this TypeReference type) Parameters Type Name Description TypeReference type Returns Type Description Type"
  },
  "api/Unity.Entities.BuildUtils.MonoExtensions.GetSystemRunsAfter.html": {
    "href": "api/Unity.Entities.BuildUtils.MonoExtensions.GetSystemRunsAfter.html",
    "title": "Method GetSystemRunsAfter | Entities | 0.17.0-preview.18",
    "keywords": "Method GetSystemRunsAfter GetSystemRunsAfter(TypeDefinition) Declaration public static TypeDefinition[] GetSystemRunsAfter(this TypeDefinition type) Parameters Type Name Description TypeDefinition type Returns Type Description TypeDefinition []"
  },
  "api/Unity.Entities.BuildUtils.MonoExtensions.GetSystemRunsBefore.html": {
    "href": "api/Unity.Entities.BuildUtils.MonoExtensions.GetSystemRunsBefore.html",
    "title": "Method GetSystemRunsBefore | Entities | 0.17.0-preview.18",
    "keywords": "Method GetSystemRunsBefore GetSystemRunsBefore(TypeDefinition) Declaration public static TypeDefinition[] GetSystemRunsBefore(this TypeDefinition type) Parameters Type Name Description TypeDefinition type Returns Type Description TypeDefinition []"
  },
  "api/Unity.Entities.BuildUtils.MonoExtensions.html": {
    "href": "api/Unity.Entities.BuildUtils.MonoExtensions.html",
    "title": "Class MonoExtensions | Entities | 0.17.0-preview.18",
    "keywords": "Class MonoExtensions Inheritance Object MonoExtensions Namespace : Unity.Entities.BuildUtils <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class MonoExtensions Methods Name Description CalculateMemoryOrdering(TypeDefinition) CalculateStableTypeHash(TypeDefinition) DynamicArrayElementType(TypeReference) FixedSpecialType(TypeReference) GetReflectionName(TypeReference) GetSystemReflectionType(TypeReference) GetSystemRunsAfter(TypeDefinition) GetSystemRunsBefore(TypeDefinition) IsBufferElementComponentType(TypeReference) IsComplex(TypeReference) IsComponentType(TypeReference) IsCppBasicType(TypeDefinition) IsDynamicArray(TypeReference) IsEntityType(TypeReference) IsManagedType(TypeReference) IsPodType(TypeReference) IsSharedComponentType(TypeReference) IsStructValueType(TypeDefinition) IsStructValueType(TypeReference) IsStructWithInterface(TypeDefinition, String) IsSystemFenceType(TypeDefinition) IsSystemStateComponentType(TypeReference) IsSystemType(TypeDefinition)"
  },
  "api/Unity.Entities.BuildUtils.MonoExtensions.IsBufferElementComponentType.html": {
    "href": "api/Unity.Entities.BuildUtils.MonoExtensions.IsBufferElementComponentType.html",
    "title": "Method IsBufferElementComponentType | Entities | 0.17.0-preview.18",
    "keywords": "Method IsBufferElementComponentType IsBufferElementComponentType(TypeReference) Declaration public static bool IsBufferElementComponentType(this TypeReference typeRef) Parameters Type Name Description TypeReference typeRef Returns Type Description Boolean"
  },
  "api/Unity.Entities.BuildUtils.MonoExtensions.IsComplex.html": {
    "href": "api/Unity.Entities.BuildUtils.MonoExtensions.IsComplex.html",
    "title": "Method IsComplex | Entities | 0.17.0-preview.18",
    "keywords": "Method IsComplex IsComplex(TypeReference) Declaration public static bool IsComplex(this TypeReference typeRef) Parameters Type Name Description TypeReference typeRef Returns Type Description Boolean"
  },
  "api/Unity.Entities.BuildUtils.MonoExtensions.IsComponentType.html": {
    "href": "api/Unity.Entities.BuildUtils.MonoExtensions.IsComponentType.html",
    "title": "Method IsComponentType | Entities | 0.17.0-preview.18",
    "keywords": "Method IsComponentType IsComponentType(TypeReference) Declaration public static bool IsComponentType(this TypeReference typeRef) Parameters Type Name Description TypeReference typeRef Returns Type Description Boolean"
  },
  "api/Unity.Entities.BuildUtils.MonoExtensions.IsCppBasicType.html": {
    "href": "api/Unity.Entities.BuildUtils.MonoExtensions.IsCppBasicType.html",
    "title": "Method IsCppBasicType | Entities | 0.17.0-preview.18",
    "keywords": "Method IsCppBasicType IsCppBasicType(TypeDefinition) Declaration public static bool IsCppBasicType(this TypeDefinition type) Parameters Type Name Description TypeDefinition type Returns Type Description Boolean"
  },
  "api/Unity.Entities.BuildUtils.MonoExtensions.IsDynamicArray.html": {
    "href": "api/Unity.Entities.BuildUtils.MonoExtensions.IsDynamicArray.html",
    "title": "Method IsDynamicArray | Entities | 0.17.0-preview.18",
    "keywords": "Method IsDynamicArray IsDynamicArray(TypeReference) Declaration public static bool IsDynamicArray(this TypeReference type) Parameters Type Name Description TypeReference type Returns Type Description Boolean"
  },
  "api/Unity.Entities.BuildUtils.MonoExtensions.IsEntityType.html": {
    "href": "api/Unity.Entities.BuildUtils.MonoExtensions.IsEntityType.html",
    "title": "Method IsEntityType | Entities | 0.17.0-preview.18",
    "keywords": "Method IsEntityType IsEntityType(TypeReference) Declaration public static bool IsEntityType(this TypeReference typeRef) Parameters Type Name Description TypeReference typeRef Returns Type Description Boolean"
  },
  "api/Unity.Entities.BuildUtils.MonoExtensions.IsManagedType.html": {
    "href": "api/Unity.Entities.BuildUtils.MonoExtensions.IsManagedType.html",
    "title": "Method IsManagedType | Entities | 0.17.0-preview.18",
    "keywords": "Method IsManagedType IsManagedType(TypeReference) Declaration public static bool IsManagedType(this TypeReference typeRef) Parameters Type Name Description TypeReference typeRef Returns Type Description Boolean"
  },
  "api/Unity.Entities.BuildUtils.MonoExtensions.IsPodType.html": {
    "href": "api/Unity.Entities.BuildUtils.MonoExtensions.IsPodType.html",
    "title": "Method IsPodType | Entities | 0.17.0-preview.18",
    "keywords": "Method IsPodType IsPodType(TypeReference) Declaration public static bool IsPodType(this TypeReference typeRef) Parameters Type Name Description TypeReference typeRef Returns Type Description Boolean"
  },
  "api/Unity.Entities.BuildUtils.MonoExtensions.IsSharedComponentType.html": {
    "href": "api/Unity.Entities.BuildUtils.MonoExtensions.IsSharedComponentType.html",
    "title": "Method IsSharedComponentType | Entities | 0.17.0-preview.18",
    "keywords": "Method IsSharedComponentType IsSharedComponentType(TypeReference) Declaration public static bool IsSharedComponentType(this TypeReference typeRef) Parameters Type Name Description TypeReference typeRef Returns Type Description Boolean"
  },
  "api/Unity.Entities.BuildUtils.MonoExtensions.IsStructValueType.html": {
    "href": "api/Unity.Entities.BuildUtils.MonoExtensions.IsStructValueType.html",
    "title": "Method IsStructValueType | Entities | 0.17.0-preview.18",
    "keywords": "Method IsStructValueType IsStructValueType(TypeReference) Declaration public static bool IsStructValueType(this TypeReference type) Parameters Type Name Description TypeReference type Returns Type Description Boolean IsStructValueType(TypeDefinition) Declaration public static bool IsStructValueType(this TypeDefinition type) Parameters Type Name Description TypeDefinition type Returns Type Description Boolean"
  },
  "api/Unity.Entities.BuildUtils.MonoExtensions.IsStructWithInterface.html": {
    "href": "api/Unity.Entities.BuildUtils.MonoExtensions.IsStructWithInterface.html",
    "title": "Method IsStructWithInterface | Entities | 0.17.0-preview.18",
    "keywords": "Method IsStructWithInterface IsStructWithInterface(TypeDefinition, String) Declaration public static bool IsStructWithInterface(this TypeDefinition type, string fullName) Parameters Type Name Description TypeDefinition type String fullName Returns Type Description Boolean"
  },
  "api/Unity.Entities.BuildUtils.MonoExtensions.IsSystemFenceType.html": {
    "href": "api/Unity.Entities.BuildUtils.MonoExtensions.IsSystemFenceType.html",
    "title": "Method IsSystemFenceType | Entities | 0.17.0-preview.18",
    "keywords": "Method IsSystemFenceType IsSystemFenceType(TypeDefinition) Declaration public static bool IsSystemFenceType(this TypeDefinition type) Parameters Type Name Description TypeDefinition type Returns Type Description Boolean"
  },
  "api/Unity.Entities.BuildUtils.MonoExtensions.IsSystemStateComponentType.html": {
    "href": "api/Unity.Entities.BuildUtils.MonoExtensions.IsSystemStateComponentType.html",
    "title": "Method IsSystemStateComponentType | Entities | 0.17.0-preview.18",
    "keywords": "Method IsSystemStateComponentType IsSystemStateComponentType(TypeReference) Declaration public static bool IsSystemStateComponentType(this TypeReference typeRef) Parameters Type Name Description TypeReference typeRef Returns Type Description Boolean"
  },
  "api/Unity.Entities.BuildUtils.MonoExtensions.IsSystemType.html": {
    "href": "api/Unity.Entities.BuildUtils.MonoExtensions.IsSystemType.html",
    "title": "Method IsSystemType | Entities | 0.17.0-preview.18",
    "keywords": "Method IsSystemType IsSystemType(TypeDefinition) Declaration public static bool IsSystemType(this TypeDefinition type) Parameters Type Name Description TypeDefinition type Returns Type Description Boolean"
  },
  "api/Unity.Entities.BuildUtils.TypeHash.CalculateMemoryOrdering.html": {
    "href": "api/Unity.Entities.BuildUtils.TypeHash.CalculateMemoryOrdering.html",
    "title": "Method CalculateMemoryOrdering | Entities | 0.17.0-preview.18",
    "keywords": "Method CalculateMemoryOrdering CalculateMemoryOrdering(TypeDefinition) Declaration public static ulong CalculateMemoryOrdering(TypeDefinition typeDef) Parameters Type Name Description TypeDefinition typeDef Returns Type Description UInt64"
  },
  "api/Unity.Entities.BuildUtils.TypeHash.CalculateMemoryOrderingRefl.html": {
    "href": "api/Unity.Entities.BuildUtils.TypeHash.CalculateMemoryOrderingRefl.html",
    "title": "Method CalculateMemoryOrderingRefl | Entities | 0.17.0-preview.18",
    "keywords": "Method CalculateMemoryOrderingRefl CalculateMemoryOrderingRefl(Type) Declaration public static ulong CalculateMemoryOrderingRefl(Type type) Parameters Type Name Description Type type Returns Type Description UInt64"
  },
  "api/Unity.Entities.BuildUtils.TypeHash.CalculateStableTypeHash.html": {
    "href": "api/Unity.Entities.BuildUtils.TypeHash.CalculateStableTypeHash.html",
    "title": "Method CalculateStableTypeHash | Entities | 0.17.0-preview.18",
    "keywords": "Method CalculateStableTypeHash CalculateStableTypeHash(TypeDefinition) Declaration public static ulong CalculateStableTypeHash(TypeDefinition typeDef) Parameters Type Name Description TypeDefinition typeDef Returns Type Description UInt64"
  },
  "api/Unity.Entities.BuildUtils.TypeHash.CalculateStableTypeHashRefl.html": {
    "href": "api/Unity.Entities.BuildUtils.TypeHash.CalculateStableTypeHashRefl.html",
    "title": "Method CalculateStableTypeHashRefl | Entities | 0.17.0-preview.18",
    "keywords": "Method CalculateStableTypeHashRefl CalculateStableTypeHashRefl(Type) Declaration public static ulong CalculateStableTypeHashRefl(Type type) Parameters Type Name Description Type type Returns Type Description UInt64"
  },
  "api/Unity.Entities.BuildUtils.TypeHash.CombineFNV1A64.html": {
    "href": "api/Unity.Entities.BuildUtils.TypeHash.CombineFNV1A64.html",
    "title": "Method CombineFNV1A64 | Entities | 0.17.0-preview.18",
    "keywords": "Method CombineFNV1A64 CombineFNV1A64(UInt64, UInt64[]) Declaration public static ulong CombineFNV1A64(ulong hash, params ulong[] values) Parameters Type Name Description UInt64 hash UInt64 [] values Returns Type Description UInt64"
  },
  "api/Unity.Entities.BuildUtils.TypeHash.FNV1A64.html": {
    "href": "api/Unity.Entities.BuildUtils.TypeHash.FNV1A64.html",
    "title": "Method FNV1A64 | Entities | 0.17.0-preview.18",
    "keywords": "Method FNV1A64 FNV1A64(String) Declaration public static ulong FNV1A64(string text) Parameters Type Name Description String text Returns Type Description UInt64 FNV1A64(Int32) Declaration public static ulong FNV1A64(int val) Parameters Type Name Description Int32 val Returns Type Description UInt64"
  },
  "api/Unity.Entities.BuildUtils.TypeHash.HashType.html": {
    "href": "api/Unity.Entities.BuildUtils.TypeHash.HashType.html",
    "title": "Method HashType | Entities | 0.17.0-preview.18",
    "keywords": "Method HashType HashType(TypeDefinition, Int32) Declaration public static ulong HashType(TypeDefinition typeDef, int fieldIndex = 0) Parameters Type Name Description TypeDefinition typeDef Int32 fieldIndex Returns Type Description UInt64 HashType(Type, Int32) Declaration public static ulong HashType(Type type, int fieldIndex = 0) Parameters Type Name Description Type type Int32 fieldIndex Returns Type Description UInt64"
  },
  "api/Unity.Entities.BuildUtils.TypeHash.HashVersionAttribute.html": {
    "href": "api/Unity.Entities.BuildUtils.TypeHash.HashVersionAttribute.html",
    "title": "Method HashVersionAttribute | Entities | 0.17.0-preview.18",
    "keywords": "Method HashVersionAttribute HashVersionAttribute(TypeDefinition) Declaration public static ulong HashVersionAttribute(TypeDefinition typeDef) Parameters Type Name Description TypeDefinition typeDef Returns Type Description UInt64"
  },
  "api/Unity.Entities.BuildUtils.TypeHash.html": {
    "href": "api/Unity.Entities.BuildUtils.TypeHash.html",
    "title": "Class TypeHash | Entities | 0.17.0-preview.18",
    "keywords": "Class TypeHash Inheritance Object TypeHash Namespace : Unity.Entities.BuildUtils <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class TypeHash Methods Name Description CalculateMemoryOrdering(TypeDefinition) CalculateMemoryOrderingRefl(Type) CalculateStableTypeHash(TypeDefinition) CalculateStableTypeHashRefl(Type) CombineFNV1A64(UInt64, UInt64[]) FNV1A64(Int32) FNV1A64(String) HashType(Type, Int32) HashType(TypeDefinition, Int32) HashVersionAttribute(TypeDefinition)"
  },
  "api/Unity.Entities.BuildUtils.TypeUtils.AlignAndSize.align.html": {
    "href": "api/Unity.Entities.BuildUtils.TypeUtils.AlignAndSize.align.html",
    "title": "Field align | Entities | 0.17.0-preview.18",
    "keywords": "Field align Namespace : Unity.Entities.BuildUtils <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public readonly int align Returns Type Description Int32"
  },
  "api/Unity.Entities.BuildUtils.TypeUtils.AlignAndSize.-ctor.html": {
    "href": "api/Unity.Entities.BuildUtils.TypeUtils.AlignAndSize.-ctor.html",
    "title": "Constructor AlignAndSize | Entities | 0.17.0-preview.18",
    "keywords": "Constructor AlignAndSize AlignAndSize(Int32) Declaration public AlignAndSize(int single) Parameters Type Name Description Int32 single AlignAndSize(Int32, Int32) Declaration public AlignAndSize(int a, int s) Parameters Type Name Description Int32 a Int32 s AlignAndSize(Int32, Int32, Int32) Declaration public AlignAndSize(int a, int s, int o) Parameters Type Name Description Int32 a Int32 s Int32 o AlignAndSize(Int32, Int32, Int32, Boolean) Declaration public AlignAndSize(int a, int s, int o, bool e) Parameters Type Name Description Int32 a Int32 s Int32 o Boolean e"
  },
  "api/Unity.Entities.BuildUtils.TypeUtils.AlignAndSize.DynamicArray.html": {
    "href": "api/Unity.Entities.BuildUtils.TypeUtils.AlignAndSize.DynamicArray.html",
    "title": "Method DynamicArray | Entities | 0.17.0-preview.18",
    "keywords": "Method DynamicArray DynamicArray(Int32) Declaration public static TypeUtils.AlignAndSize DynamicArray(int bits) Parameters Type Name Description Int32 bits Returns Type Description TypeUtils.AlignAndSize"
  },
  "api/Unity.Entities.BuildUtils.TypeUtils.AlignAndSize.Eight.html": {
    "href": "api/Unity.Entities.BuildUtils.TypeUtils.AlignAndSize.Eight.html",
    "title": "Field Eight | Entities | 0.17.0-preview.18",
    "keywords": "Field Eight Namespace : Unity.Entities.BuildUtils <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static readonly TypeUtils.AlignAndSize Eight Returns Type Description TypeUtils.AlignAndSize"
  },
  "api/Unity.Entities.BuildUtils.TypeUtils.AlignAndSize.empty.html": {
    "href": "api/Unity.Entities.BuildUtils.TypeUtils.AlignAndSize.empty.html",
    "title": "Field empty | Entities | 0.17.0-preview.18",
    "keywords": "Field empty Namespace : Unity.Entities.BuildUtils <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public readonly bool empty Returns Type Description Boolean"
  },
  "api/Unity.Entities.BuildUtils.TypeUtils.AlignAndSize.Four.html": {
    "href": "api/Unity.Entities.BuildUtils.TypeUtils.AlignAndSize.Four.html",
    "title": "Field Four | Entities | 0.17.0-preview.18",
    "keywords": "Field Four Namespace : Unity.Entities.BuildUtils <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static readonly TypeUtils.AlignAndSize Four Returns Type Description TypeUtils.AlignAndSize"
  },
  "api/Unity.Entities.BuildUtils.TypeUtils.AlignAndSize.html": {
    "href": "api/Unity.Entities.BuildUtils.TypeUtils.AlignAndSize.html",
    "title": "Struct TypeUtils.AlignAndSize | Entities | 0.17.0-preview.18",
    "keywords": "Struct TypeUtils.AlignAndSize Namespace : Unity.Entities.BuildUtils <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct AlignAndSize Constructors Name Description AlignAndSize(Int32) AlignAndSize(Int32, Int32) AlignAndSize(Int32, Int32, Int32) AlignAndSize(Int32, Int32, Int32, Boolean) Fields Name Description align Eight empty Four offset One Pointer2_32 Pointer2_64 Pointer3_32 Pointer3_64 Pointer4_32 Pointer4_64 Sentinel size Two Zero Properties Name Description IsSentinel Methods Name Description DynamicArray(Int32) NativeString(Int32) Pointer(Int32) ToString()"
  },
  "api/Unity.Entities.BuildUtils.TypeUtils.AlignAndSize.IsSentinel.html": {
    "href": "api/Unity.Entities.BuildUtils.TypeUtils.AlignAndSize.IsSentinel.html",
    "title": "Property IsSentinel | Entities | 0.17.0-preview.18",
    "keywords": "Property IsSentinel IsSentinel Declaration public bool IsSentinel { get; } Property Value Type Description Boolean"
  },
  "api/Unity.Entities.BuildUtils.TypeUtils.AlignAndSize.NativeString.html": {
    "href": "api/Unity.Entities.BuildUtils.TypeUtils.AlignAndSize.NativeString.html",
    "title": "Method NativeString | Entities | 0.17.0-preview.18",
    "keywords": "Method NativeString NativeString(Int32) Declaration public static TypeUtils.AlignAndSize NativeString(int bits) Parameters Type Name Description Int32 bits Returns Type Description TypeUtils.AlignAndSize"
  },
  "api/Unity.Entities.BuildUtils.TypeUtils.AlignAndSize.offset.html": {
    "href": "api/Unity.Entities.BuildUtils.TypeUtils.AlignAndSize.offset.html",
    "title": "Field offset | Entities | 0.17.0-preview.18",
    "keywords": "Field offset Namespace : Unity.Entities.BuildUtils <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public readonly int offset Returns Type Description Int32"
  },
  "api/Unity.Entities.BuildUtils.TypeUtils.AlignAndSize.One.html": {
    "href": "api/Unity.Entities.BuildUtils.TypeUtils.AlignAndSize.One.html",
    "title": "Field One | Entities | 0.17.0-preview.18",
    "keywords": "Field One Namespace : Unity.Entities.BuildUtils <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static readonly TypeUtils.AlignAndSize One Returns Type Description TypeUtils.AlignAndSize"
  },
  "api/Unity.Entities.BuildUtils.TypeUtils.AlignAndSize.Pointer.html": {
    "href": "api/Unity.Entities.BuildUtils.TypeUtils.AlignAndSize.Pointer.html",
    "title": "Method Pointer | Entities | 0.17.0-preview.18",
    "keywords": "Method Pointer Pointer(Int32) Declaration public static TypeUtils.AlignAndSize Pointer(int bits) Parameters Type Name Description Int32 bits Returns Type Description TypeUtils.AlignAndSize"
  },
  "api/Unity.Entities.BuildUtils.TypeUtils.AlignAndSize.Pointer2_32.html": {
    "href": "api/Unity.Entities.BuildUtils.TypeUtils.AlignAndSize.Pointer2_32.html",
    "title": "Field Pointer2_32 | Entities | 0.17.0-preview.18",
    "keywords": "Field Pointer2_32 Namespace : Unity.Entities.BuildUtils <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static readonly TypeUtils.AlignAndSize Pointer2_32 Returns Type Description TypeUtils.AlignAndSize"
  },
  "api/Unity.Entities.BuildUtils.TypeUtils.AlignAndSize.Pointer2_64.html": {
    "href": "api/Unity.Entities.BuildUtils.TypeUtils.AlignAndSize.Pointer2_64.html",
    "title": "Field Pointer2_64 | Entities | 0.17.0-preview.18",
    "keywords": "Field Pointer2_64 Namespace : Unity.Entities.BuildUtils <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static readonly TypeUtils.AlignAndSize Pointer2_64 Returns Type Description TypeUtils.AlignAndSize"
  },
  "api/Unity.Entities.BuildUtils.TypeUtils.AlignAndSize.Pointer3_32.html": {
    "href": "api/Unity.Entities.BuildUtils.TypeUtils.AlignAndSize.Pointer3_32.html",
    "title": "Field Pointer3_32 | Entities | 0.17.0-preview.18",
    "keywords": "Field Pointer3_32 Namespace : Unity.Entities.BuildUtils <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static readonly TypeUtils.AlignAndSize Pointer3_32 Returns Type Description TypeUtils.AlignAndSize"
  },
  "api/Unity.Entities.BuildUtils.TypeUtils.AlignAndSize.Pointer3_64.html": {
    "href": "api/Unity.Entities.BuildUtils.TypeUtils.AlignAndSize.Pointer3_64.html",
    "title": "Field Pointer3_64 | Entities | 0.17.0-preview.18",
    "keywords": "Field Pointer3_64 Namespace : Unity.Entities.BuildUtils <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static readonly TypeUtils.AlignAndSize Pointer3_64 Returns Type Description TypeUtils.AlignAndSize"
  },
  "api/Unity.Entities.BuildUtils.TypeUtils.AlignAndSize.Pointer4_32.html": {
    "href": "api/Unity.Entities.BuildUtils.TypeUtils.AlignAndSize.Pointer4_32.html",
    "title": "Field Pointer4_32 | Entities | 0.17.0-preview.18",
    "keywords": "Field Pointer4_32 Namespace : Unity.Entities.BuildUtils <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static readonly TypeUtils.AlignAndSize Pointer4_32 Returns Type Description TypeUtils.AlignAndSize"
  },
  "api/Unity.Entities.BuildUtils.TypeUtils.AlignAndSize.Pointer4_64.html": {
    "href": "api/Unity.Entities.BuildUtils.TypeUtils.AlignAndSize.Pointer4_64.html",
    "title": "Field Pointer4_64 | Entities | 0.17.0-preview.18",
    "keywords": "Field Pointer4_64 Namespace : Unity.Entities.BuildUtils <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static readonly TypeUtils.AlignAndSize Pointer4_64 Returns Type Description TypeUtils.AlignAndSize"
  },
  "api/Unity.Entities.BuildUtils.TypeUtils.AlignAndSize.Sentinel.html": {
    "href": "api/Unity.Entities.BuildUtils.TypeUtils.AlignAndSize.Sentinel.html",
    "title": "Field Sentinel | Entities | 0.17.0-preview.18",
    "keywords": "Field Sentinel Namespace : Unity.Entities.BuildUtils <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static readonly TypeUtils.AlignAndSize Sentinel Returns Type Description TypeUtils.AlignAndSize"
  },
  "api/Unity.Entities.BuildUtils.TypeUtils.AlignAndSize.size.html": {
    "href": "api/Unity.Entities.BuildUtils.TypeUtils.AlignAndSize.size.html",
    "title": "Field size | Entities | 0.17.0-preview.18",
    "keywords": "Field size Namespace : Unity.Entities.BuildUtils <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public readonly int size Returns Type Description Int32"
  },
  "api/Unity.Entities.BuildUtils.TypeUtils.AlignAndSize.ToString.html": {
    "href": "api/Unity.Entities.BuildUtils.TypeUtils.AlignAndSize.ToString.html",
    "title": "Method ToString | Entities | 0.17.0-preview.18",
    "keywords": "Method ToString ToString() Declaration public override string ToString() Returns Type Description String Overrides ValueType.ToString()"
  },
  "api/Unity.Entities.BuildUtils.TypeUtils.AlignAndSize.Two.html": {
    "href": "api/Unity.Entities.BuildUtils.TypeUtils.AlignAndSize.Two.html",
    "title": "Field Two | Entities | 0.17.0-preview.18",
    "keywords": "Field Two Namespace : Unity.Entities.BuildUtils <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static readonly TypeUtils.AlignAndSize Two Returns Type Description TypeUtils.AlignAndSize"
  },
  "api/Unity.Entities.BuildUtils.TypeUtils.AlignAndSize.Zero.html": {
    "href": "api/Unity.Entities.BuildUtils.TypeUtils.AlignAndSize.Zero.html",
    "title": "Field Zero | Entities | 0.17.0-preview.18",
    "keywords": "Field Zero Namespace : Unity.Entities.BuildUtils <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static readonly TypeUtils.AlignAndSize Zero Returns Type Description TypeUtils.AlignAndSize"
  },
  "api/Unity.Entities.BuildUtils.TypeUtils.AlignAndSizeOfField.html": {
    "href": "api/Unity.Entities.BuildUtils.TypeUtils.AlignAndSizeOfField.html",
    "title": "Method AlignAndSizeOfField | Entities | 0.17.0-preview.18",
    "keywords": "Method AlignAndSizeOfField AlignAndSizeOfField(FieldReference, Int32) Declaration public static TypeUtils.AlignAndSize AlignAndSizeOfField(FieldReference fieldRef, int bits) Parameters Type Name Description FieldReference fieldRef Int32 bits Returns Type Description TypeUtils.AlignAndSize"
  },
  "api/Unity.Entities.BuildUtils.TypeUtils.AlignAndSizeOfType.html": {
    "href": "api/Unity.Entities.BuildUtils.TypeUtils.AlignAndSizeOfType.html",
    "title": "Method AlignAndSizeOfType | Entities | 0.17.0-preview.18",
    "keywords": "Method AlignAndSizeOfType AlignAndSizeOfType(MetadataType, Int32) Declaration public static TypeUtils.AlignAndSize AlignAndSizeOfType(MetadataType mtype, int bits) Parameters Type Name Description MetadataType mtype Int32 bits Returns Type Description TypeUtils.AlignAndSize AlignAndSizeOfType(TypeReference, Int32) Declaration public static TypeUtils.AlignAndSize AlignAndSizeOfType(TypeReference typeRef, int bits) Parameters Type Name Description TypeReference typeRef Int32 bits Returns Type Description TypeUtils.AlignAndSize"
  },
  "api/Unity.Entities.BuildUtils.TypeUtils.AlignUp.html": {
    "href": "api/Unity.Entities.BuildUtils.TypeUtils.AlignUp.html",
    "title": "Method AlignUp | Entities | 0.17.0-preview.18",
    "keywords": "Method AlignUp AlignUp(Int32, Int32) Declaration public static int AlignUp(int sz, int align) Parameters Type Name Description Int32 sz Int32 align Returns Type Description Int32"
  },
  "api/Unity.Entities.BuildUtils.TypeUtils.GetEntityFieldOffsets.html": {
    "href": "api/Unity.Entities.BuildUtils.TypeUtils.GetEntityFieldOffsets.html",
    "title": "Method GetEntityFieldOffsets | Entities | 0.17.0-preview.18",
    "keywords": "Method GetEntityFieldOffsets GetEntityFieldOffsets(TypeReference, Int32) Declaration public static List<int> GetEntityFieldOffsets(TypeReference type, int archBits) Parameters Type Name Description TypeReference type Int32 archBits Returns Type Description List < Int32 >"
  },
  "api/Unity.Entities.BuildUtils.TypeUtils.GetFieldOffsetsOf.html": {
    "href": "api/Unity.Entities.BuildUtils.TypeUtils.GetFieldOffsetsOf.html",
    "title": "Method GetFieldOffsetsOf | Entities | 0.17.0-preview.18",
    "keywords": "Method GetFieldOffsetsOf GetFieldOffsetsOf(TypeReference, TypeReference, Int32) Declaration public static List<int> GetFieldOffsetsOf(TypeReference typeToFind, TypeReference typeToLookIn, int archBits) Parameters Type Name Description TypeReference typeToFind TypeReference typeToLookIn Int32 archBits Returns Type Description List < Int32 > GetFieldOffsetsOf(Func<FieldReference, TypeReference, Boolean>, TypeReference, Int32) Declaration public static List<int> GetFieldOffsetsOf(Func<FieldReference, TypeReference, bool> match, TypeReference typeToLookIn, int archBits) Parameters Type Name Description Func < FieldReference , TypeReference , Boolean > match TypeReference typeToLookIn Int32 archBits Returns Type Description List < Int32 > GetFieldOffsetsOf(String, TypeReference, Int32) Declaration public static List<int> GetFieldOffsetsOf(string fieldTypeName, TypeReference typeToLookIn, int archBits) Parameters Type Name Description String fieldTypeName TypeReference typeToLookIn Int32 archBits Returns Type Description List < Int32 >"
  },
  "api/Unity.Entities.BuildUtils.TypeUtils.GetFieldOffsetsOfByFieldName.html": {
    "href": "api/Unity.Entities.BuildUtils.TypeUtils.GetFieldOffsetsOfByFieldName.html",
    "title": "Method GetFieldOffsetsOfByFieldName | Entities | 0.17.0-preview.18",
    "keywords": "Method GetFieldOffsetsOfByFieldName GetFieldOffsetsOfByFieldName(String, TypeReference, Int32) Declaration public static List<int> GetFieldOffsetsOfByFieldName(string fieldName, TypeReference typeToLookIn, int archBits) Parameters Type Name Description String fieldName TypeReference typeToLookIn Int32 archBits Returns Type Description List < Int32 >"
  },
  "api/Unity.Entities.BuildUtils.TypeUtils.HasNestedDynamicArrayType.html": {
    "href": "api/Unity.Entities.BuildUtils.TypeUtils.HasNestedDynamicArrayType.html",
    "title": "Method HasNestedDynamicArrayType | Entities | 0.17.0-preview.18",
    "keywords": "Method HasNestedDynamicArrayType HasNestedDynamicArrayType(TypeReference) Declaration public static bool HasNestedDynamicArrayType(TypeReference type) Parameters Type Name Description TypeReference type Returns Type Description Boolean"
  },
  "api/Unity.Entities.BuildUtils.TypeUtils.html": {
    "href": "api/Unity.Entities.BuildUtils.TypeUtils.html",
    "title": "Class TypeUtils | Entities | 0.17.0-preview.18",
    "keywords": "Class TypeUtils Inheritance Object TypeUtils Namespace : Unity.Entities.BuildUtils <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class TypeUtils Methods Name Description AlignAndSizeOfField(FieldReference, Int32) AlignAndSizeOfType(MetadataType, Int32) AlignAndSizeOfType(TypeReference, Int32) AlignUp(Int32, Int32) GetEntityFieldOffsets(TypeReference, Int32) GetFieldOffsetsOf(Func<FieldReference, TypeReference, Boolean>, TypeReference, Int32) GetFieldOffsetsOf(String, TypeReference, Int32) GetFieldOffsetsOf(TypeReference, TypeReference, Int32) GetFieldOffsetsOfByFieldName(String, TypeReference, Int32) HasNestedDynamicArrayType(TypeReference) PreprocessTypeFields(TypeReference, Int32) ValidateAllowedObjectType(TypeReference)"
  },
  "api/Unity.Entities.BuildUtils.TypeUtils.PreprocessTypeFields.html": {
    "href": "api/Unity.Entities.BuildUtils.TypeUtils.PreprocessTypeFields.html",
    "title": "Method PreprocessTypeFields | Entities | 0.17.0-preview.18",
    "keywords": "Method PreprocessTypeFields PreprocessTypeFields(TypeReference, Int32) Declaration public static void PreprocessTypeFields(TypeReference valuetype, int bits) Parameters Type Name Description TypeReference valuetype Int32 bits"
  },
  "api/Unity.Entities.BuildUtils.TypeUtils.ValidateAllowedObjectType.html": {
    "href": "api/Unity.Entities.BuildUtils.TypeUtils.ValidateAllowedObjectType.html",
    "title": "Method ValidateAllowedObjectType | Entities | 0.17.0-preview.18",
    "keywords": "Method ValidateAllowedObjectType ValidateAllowedObjectType(TypeReference) Declaration public static void ValidateAllowedObjectType(TypeReference typeRef) Parameters Type Name Description TypeReference typeRef"
  },
  "api/Unity.Entities.BurstMonoInteropMethodAttribute.-ctor.html": {
    "href": "api/Unity.Entities.BurstMonoInteropMethodAttribute.-ctor.html",
    "title": "Constructor BurstMonoInteropMethodAttribute | Entities | 0.17.0-preview.18",
    "keywords": "Constructor BurstMonoInteropMethodAttribute BurstMonoInteropMethodAttribute(Boolean) Declaration public BurstMonoInteropMethodAttribute(bool makePublic = false) Parameters Type Name Description Boolean makePublic"
  },
  "api/Unity.Entities.BurstMonoInteropMethodAttribute.html": {
    "href": "api/Unity.Entities.BurstMonoInteropMethodAttribute.html",
    "title": "Class BurstMonoInteropMethodAttribute | Entities | 0.17.0-preview.18",
    "keywords": "Class BurstMonoInteropMethodAttribute Inheritance Object Attribute BurstMonoInteropMethodAttribute Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)] public sealed class BurstMonoInteropMethodAttribute : Attribute, _Attribute Constructors Name Description BurstMonoInteropMethodAttribute(Boolean) Fields Name Description MakePublic If set, the generated method will be exposed as public. Otherwise it will have the same access modifier as the original method."
  },
  "api/Unity.Entities.BurstMonoInteropMethodAttribute.MakePublic.html": {
    "href": "api/Unity.Entities.BurstMonoInteropMethodAttribute.MakePublic.html",
    "title": "Field MakePublic | Entities | 0.17.0-preview.18",
    "keywords": "Field MakePublic If set, the generated method will be exposed as public. Otherwise it will have the same access modifier as the original method. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public bool MakePublic Returns Type Description Boolean"
  },
  "api/Unity.Entities.ChangedFilterAttribute.html": {
    "href": "api/Unity.Entities.ChangedFilterAttribute.html",
    "title": "Class ChangedFilterAttribute | Entities | 0.17.0-preview.18",
    "keywords": "Class ChangedFilterAttribute Inheritance Object Attribute ChangedFilterAttribute Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [AttributeUsage(AttributeTargets.Parameter)] public class ChangedFilterAttribute : Attribute, _Attribute"
  },
  "api/Unity.Entities.ChangeVersionUtility.DidChange.html": {
    "href": "api/Unity.Entities.ChangeVersionUtility.DidChange.html",
    "title": "Method DidChange | Entities | 0.17.0-preview.18",
    "keywords": "Method DidChange DidChange(UInt32, UInt32) Declaration public static bool DidChange(uint changeVersion, uint requiredVersion) Parameters Type Name Description UInt32 changeVersion UInt32 requiredVersion Returns Type Description Boolean"
  },
  "api/Unity.Entities.ChangeVersionUtility.html": {
    "href": "api/Unity.Entities.ChangeVersionUtility.html",
    "title": "Class ChangeVersionUtility | Entities | 0.17.0-preview.18",
    "keywords": "Class ChangeVersionUtility Inheritance Object ChangeVersionUtility Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class ChangeVersionUtility Methods Name Description DidChange(UInt32, UInt32)"
  },
  "api/Unity.Entities.ChunkEntitiesDescription.html": {
    "href": "api/Unity.Entities.ChunkEntitiesDescription.html",
    "title": "Struct ChunkEntitiesDescription | Entities | 0.17.0-preview.18",
    "keywords": "Struct ChunkEntitiesDescription Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct ChunkEntitiesDescription : ISupportForEachWithUniversalDelegate Extension Methods LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0>(TDescription, R<T0>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0>(TDescription, I<T0>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0>(TDescription, V<T0>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1>(TDescription, RI<T0, T1>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1>(TDescription, RR<T0, T1>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1>(TDescription, II<T0, T1>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1>(TDescription, VI<T0, T1>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1>(TDescription, VR<T0, T1>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1>(TDescription, VV<T0, T1>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2>(TDescription, RII<T0, T1, T2>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2>(TDescription, RRI<T0, T1, T2>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2>(TDescription, RRR<T0, T1, T2>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2>(TDescription, III<T0, T1, T2>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2>(TDescription, VII<T0, T1, T2>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2>(TDescription, VRI<T0, T1, T2>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2>(TDescription, VRR<T0, T1, T2>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2>(TDescription, VVI<T0, T1, T2>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2>(TDescription, VVR<T0, T1, T2>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2>(TDescription, VVV<T0, T1, T2>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3>(TDescription, RIII<T0, T1, T2, T3>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3>(TDescription, RRII<T0, T1, T2, T3>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3>(TDescription, RRRI<T0, T1, T2, T3>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3>(TDescription, RRRR<T0, T1, T2, T3>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3>(TDescription, IIII<T0, T1, T2, T3>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3>(TDescription, VIII<T0, T1, T2, T3>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3>(TDescription, VRII<T0, T1, T2, T3>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3>(TDescription, VRRI<T0, T1, T2, T3>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3>(TDescription, VRRR<T0, T1, T2, T3>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3>(TDescription, VVII<T0, T1, T2, T3>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3>(TDescription, VVRI<T0, T1, T2, T3>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3>(TDescription, VVRR<T0, T1, T2, T3>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3>(TDescription, VVVI<T0, T1, T2, T3>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3>(TDescription, VVVR<T0, T1, T2, T3>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3>(TDescription, VVVV<T0, T1, T2, T3>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, RIIII<T0, T1, T2, T3, T4>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, RRIII<T0, T1, T2, T3, T4>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, RRRII<T0, T1, T2, T3, T4>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, RRRRI<T0, T1, T2, T3, T4>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, RRRRR<T0, T1, T2, T3, T4>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, IIIII<T0, T1, T2, T3, T4>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, VIIII<T0, T1, T2, T3, T4>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, VRIII<T0, T1, T2, T3, T4>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, VRRII<T0, T1, T2, T3, T4>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, VRRRI<T0, T1, T2, T3, T4>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, VRRRR<T0, T1, T2, T3, T4>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, VVIII<T0, T1, T2, T3, T4>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, VVRII<T0, T1, T2, T3, T4>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, VVRRI<T0, T1, T2, T3, T4>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, VVRRR<T0, T1, T2, T3, T4>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, VVVII<T0, T1, T2, T3, T4>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, VVVRI<T0, T1, T2, T3, T4>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, VVVRR<T0, T1, T2, T3, T4>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, VVVVI<T0, T1, T2, T3, T4>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, VVVVR<T0, T1, T2, T3, T4>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, VVVVV<T0, T1, T2, T3, T4>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, RIIIII<T0, T1, T2, T3, T4, T5>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, RRIIII<T0, T1, T2, T3, T4, T5>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, RRRIII<T0, T1, T2, T3, T4, T5>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, RRRRII<T0, T1, T2, T3, T4, T5>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, RRRRRI<T0, T1, T2, T3, T4, T5>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, RRRRRR<T0, T1, T2, T3, T4, T5>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, IIIIII<T0, T1, T2, T3, T4, T5>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, VIIIII<T0, T1, T2, T3, T4, T5>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, VRIIII<T0, T1, T2, T3, T4, T5>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, VRRIII<T0, T1, T2, T3, T4, T5>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, VRRRII<T0, T1, T2, T3, T4, T5>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, VRRRRI<T0, T1, T2, T3, T4, T5>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, VRRRRR<T0, T1, T2, T3, T4, T5>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, VVIIII<T0, T1, T2, T3, T4, T5>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, VVRIII<T0, T1, T2, T3, T4, T5>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, VVRRII<T0, T1, T2, T3, T4, T5>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, VVRRRI<T0, T1, T2, T3, T4, T5>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, VVRRRR<T0, T1, T2, T3, T4, T5>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, VVVIII<T0, T1, T2, T3, T4, T5>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, VVVRII<T0, T1, T2, T3, T4, T5>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, VVVRRI<T0, T1, T2, T3, T4, T5>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, VVVRRR<T0, T1, T2, T3, T4, T5>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, VVVVII<T0, T1, T2, T3, T4, T5>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, VVVVRI<T0, T1, T2, T3, T4, T5>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, VVVVRR<T0, T1, T2, T3, T4, T5>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, VVVVVI<T0, T1, T2, T3, T4, T5>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, VVVVVR<T0, T1, T2, T3, T4, T5>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, VVVVVV<T0, T1, T2, T3, T4, T5>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, RIIIIII<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, RRIIIII<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, RRRIIII<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, RRRRIII<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, RRRRRII<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, RRRRRRI<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, RRRRRRR<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, IIIIIII<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, VIIIIII<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, VRIIIII<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, VRRIIII<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, VRRRIII<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, VRRRRII<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, VRRRRRI<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, VRRRRRR<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, VVIIIII<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, VVRIIII<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, VVRRIII<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, VVRRRII<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, VVRRRRI<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, VVRRRRR<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, VVVIIII<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, VVVRIII<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, VVVRRII<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, VVVRRRI<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, VVVRRRR<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, VVVVIII<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, VVVVRII<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, VVVVRRI<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, VVVVRRR<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, VVVVVII<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, VVVVVRI<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, VVVVVRR<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, VVVVVVI<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, VVVVVVR<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, VVVVVVV<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, RIIIIIII<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, RRIIIIII<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, RRRIIIII<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, RRRRIIII<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, RRRRRIII<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, RRRRRRII<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, RRRRRRRI<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, RRRRRRRR<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, IIIIIIII<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VIIIIIII<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VRIIIIII<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VRRIIIII<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VRRRIIII<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VRRRRIII<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VRRRRRII<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VRRRRRRI<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VRRRRRRR<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VVIIIIII<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VVRIIIII<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VVRRIIII<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VVRRRIII<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VVRRRRII<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VVRRRRRI<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VVRRRRRR<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VVVIIIII<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VVVRIIII<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VVVRRIII<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VVVRRRII<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VVVRRRRI<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VVVRRRRR<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VVVVIIII<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VVVVRIII<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VVVVRRII<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VVVVRRRI<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VVVVRRRR<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VVVVVIII<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VVVVVRII<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VVVVVRRI<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VVVVVRRR<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VVVVVVII<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VVVVVVRI<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VVVVVVRR<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VVVVVVVI<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VVVVVVVR<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, VVVVVVVV<T0, T1, T2, T3, T4, T5, T6, T7>) ForEachLambdaJobDescription_SetSharedComponent.SetSharedComponentFilterOnQuery<TDescription, T>(TDescription, T, EntityQuery)"
  },
  "api/Unity.Entities.ChunkHeader.ArchetypeChunk.html": {
    "href": "api/Unity.Entities.ChunkHeader.ArchetypeChunk.html",
    "title": "Field ArchetypeChunk | Entities | 0.17.0-preview.18",
    "keywords": "Field ArchetypeChunk Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public ArchetypeChunk ArchetypeChunk Returns Type Description ArchetypeChunk"
  },
  "api/Unity.Entities.ChunkHeader.html": {
    "href": "api/Unity.Entities.ChunkHeader.html",
    "title": "Struct ChunkHeader | Entities | 0.17.0-preview.18",
    "keywords": "Struct ChunkHeader Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct ChunkHeader : ISystemStateComponentData, IComponentData Fields Name Description ArchetypeChunk Properties Name Description Null"
  },
  "api/Unity.Entities.ChunkHeader.Null.html": {
    "href": "api/Unity.Entities.ChunkHeader.Null.html",
    "title": "Property Null | Entities | 0.17.0-preview.18",
    "keywords": "Property Null Null Declaration public static ChunkHeader Null { get; } Property Value Type Description ChunkHeader"
  },
  "api/Unity.Entities.ChunkSerializableAttribute.html": {
    "href": "api/Unity.Entities.ChunkSerializableAttribute.html",
    "title": "Class ChunkSerializableAttribute | Entities | 0.17.0-preview.18",
    "keywords": "Class ChunkSerializableAttribute States that a component type is serializable. Inheritance Object Attribute ChunkSerializableAttribute Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct)] public class ChunkSerializableAttribute : Attribute, _Attribute Remarks By default, ECS does not support storing pointer types in chunks. Apply this attribute to a component declaration to allow the use of pointers as fields in the component. Note that ECS does not perform any pre- or post-serialization processing to maintain pointer validity. When using this attribute, your code assumes responsibility for handling pointer serialization and deserialization."
  },
  "api/Unity.Entities.CodeGen.FoundErrorInUserCodeException.-ctor.html": {
    "href": "api/Unity.Entities.CodeGen.FoundErrorInUserCodeException.-ctor.html",
    "title": "Constructor FoundErrorInUserCodeException | Entities | 0.17.0-preview.18",
    "keywords": "Constructor FoundErrorInUserCodeException FoundErrorInUserCodeException(DiagnosticMessage[]) Declaration public FoundErrorInUserCodeException(DiagnosticMessage[] diagnosticMessages) Parameters Type Name Description DiagnosticMessage [] diagnosticMessages"
  },
  "api/Unity.Entities.CodeGen.FoundErrorInUserCodeException.DiagnosticMessages.html": {
    "href": "api/Unity.Entities.CodeGen.FoundErrorInUserCodeException.DiagnosticMessages.html",
    "title": "Property DiagnosticMessages | Entities | 0.17.0-preview.18",
    "keywords": "Property DiagnosticMessages DiagnosticMessages Declaration public DiagnosticMessage[] DiagnosticMessages { get; } Property Value Type Description DiagnosticMessage []"
  },
  "api/Unity.Entities.CodeGen.FoundErrorInUserCodeException.html": {
    "href": "api/Unity.Entities.CodeGen.FoundErrorInUserCodeException.html",
    "title": "Class FoundErrorInUserCodeException | Entities | 0.17.0-preview.18",
    "keywords": "Class FoundErrorInUserCodeException Inheritance Object Exception FoundErrorInUserCodeException Namespace : Unity.Entities.CodeGen <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class FoundErrorInUserCodeException : Exception, _Exception, ISerializable Constructors Name Description FoundErrorInUserCodeException(DiagnosticMessage[]) Properties Name Description DiagnosticMessages Methods Name Description ToString()"
  },
  "api/Unity.Entities.CodeGen.FoundErrorInUserCodeException.ToString.html": {
    "href": "api/Unity.Entities.CodeGen.FoundErrorInUserCodeException.ToString.html",
    "title": "Method ToString | Entities | 0.17.0-preview.18",
    "keywords": "Method ToString ToString() Declaration public override string ToString() Returns Type Description String Overrides Exception.ToString()"
  },
  "api/Unity.Entities.CodeGen.html": {
    "href": "api/Unity.Entities.CodeGen.html",
    "title": "Namespace Unity.Entities.CodeGen | Entities | 0.17.0-preview.18",
    "keywords": "Namespace Unity.Entities.CodeGen Classes FoundErrorInUserCodeException"
  },
  "api/Unity.Entities.ComponentDataFromEntity-1.DidChange.html": {
    "href": "api/Unity.Entities.ComponentDataFromEntity-1.DidChange.html",
    "title": "Method DidChange | Entities | 0.17.0-preview.18",
    "keywords": "Method DidChange DidChange(Entity, UInt32) Reports whether any of IComponentData components of the type T, in the chunk containing the specified Entity , could have changed. Declaration public bool DidChange(Entity entity, uint version) Parameters Type Name Description Entity entity The entity. UInt32 version The version to compare. In a system, this parameter should be set to the current LastSystemVersion at the time the job is run or scheduled. Returns Type Description Boolean True, if the version number stored in the chunk for this component is more recent than the version passed to the version parameter. Remarks Note that for efficiency, the change version applies to whole chunks not individual entities. The change version is incremented even when another job or system that has declared write access to a component does not actually change the component value."
  },
  "api/Unity.Entities.ComponentDataFromEntity-1.HasComponent.html": {
    "href": "api/Unity.Entities.ComponentDataFromEntity-1.HasComponent.html",
    "title": "Method HasComponent | Entities | 0.17.0-preview.18",
    "keywords": "Method HasComponent HasComponent(Entity) Reports whether the specified Entity instance still refers to a valid entity and that it has a component of type T. Declaration public bool HasComponent(Entity entity) Parameters Type Name Description Entity entity The entity. Returns Type Description Boolean True if the entity has a component of type T, and false if it does not. Also returns false if the Entity instance refers to an entity that has been destroyed. Remarks To report if the provided entity has a component of type T, this function confirms whether the EntityArchetype of the provided entity includes components of type T."
  },
  "api/Unity.Entities.ComponentDataFromEntity-1.html": {
    "href": "api/Unity.Entities.ComponentDataFromEntity-1.html",
    "title": "Struct ComponentDataFromEntity<T> | Entities | 0.17.0-preview.18",
    "keywords": "Struct ComponentDataFromEntity<T> A [NativeContainer] that provides access to all instances of components of type T, indexed by Entity . Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [NativeContainer] public struct ComponentDataFromEntity<T> where T : struct, IComponentData Type Parameters Name Description T The type of IComponentData to access. Remarks ComponentDataFromEntity is a native container that provides array-like access to components of a specific type. You can use ComponentDataFromEntity to look up data associated with one entity while iterating over a different set of entities. For example, Unity.Transforms stores the Entity object of parent entities in a Parent component and looks up the parent's LocalToWorld matrix using ComponentDataFromEntity<LocalToWorld> when calculating the world positions of child entities. To get a ComponentDataFromEntity, call GetComponentDataFromEntity<T>(Boolean) . Pass a ComponentDataFromEntity container to a job by defining a public field of the appropriate type in your IJob implementation. You can safely read from ComponentDataFromEntity in any job, but by default, you cannot write to components in the container in parallel jobs (including Unity.Entities.IJobForEach`1 and IJobChunk ). If you know that two instances of a parallel job can never write to the same index in the container, you can disable the restriction on parallel writing by adding NativeDisableParallelForRestrictionAttribute to the ComponentDataFromEntity field definition in the job struct. If you would like to access an entity's components outside of a job, consider using the EntityManager methods GetComponentData<T>(Entity) and SetComponentData<T>(Entity, T) instead, to avoid the overhead of creating a ComponentDataFromEntity object. Properties Name Description Item[Entity] Gets the IComponentData instance of type T for the specified entity. Methods Name Description DidChange(Entity, UInt32) Reports whether any of IComponentData components of the type T, in the chunk containing the specified Entity , could have changed. HasComponent(Entity) Reports whether the specified Entity instance still refers to a valid entity and that it has a component of type T."
  },
  "api/Unity.Entities.ComponentDataFromEntity-1.Item.html": {
    "href": "api/Unity.Entities.ComponentDataFromEntity-1.Item.html",
    "title": "Property Item | Entities | 0.17.0-preview.18",
    "keywords": "Property Item Item[Entity] Gets the IComponentData instance of type T for the specified entity. Declaration public T this[Entity entity] { get; set; } Parameters Type Name Description Entity entity The entity. Property Value Type Description T An IComponentData type. Remarks You cannot use ComponentDataFromEntity to get zero-sized IComponentData . Use HasComponent(Entity) to check whether an entity has the zero-sized component instead. Normally, you cannot write to components accessed using a ComponentDataFromEntity instance in a parallel Job. This restriction is in place because multiple threads could write to the same component, leading to a race condition and nondeterministic results. However, when you are certain that your algorithm cannot write to the same component from different threads, you can manually disable this safety check by putting the [NativeDisableParallelForRestrictions] attribute on the ComponentDataFromEntity field in the Job. Exceptions Type Condition ArgumentException Thrown if T is zero-size."
  },
  "api/Unity.Entities.ComponentSystem.Entities.html": {
    "href": "api/Unity.Entities.ComponentSystem.Entities.html",
    "title": "Property Entities | Entities | 0.17.0-preview.18",
    "keywords": "Property Entities Entities This system's query builder object. Declaration protected EntityQueryBuilder Entities { get; } Property Value Type Description EntityQueryBuilder Use to select and iterate over entities."
  },
  "api/Unity.Entities.ComponentSystem.html": {
    "href": "api/Unity.Entities.ComponentSystem.html",
    "title": "Class ComponentSystem | Entities | 0.17.0-preview.18",
    "keywords": "Class ComponentSystem An abstract class to implement in order to create a system. Inheritance Object ComponentSystemBase ComponentSystem GameObjectConversionSystem ComponentSystemGroup ConvertToEntitySystem EntityCommandBufferSystem UpdateWorldTimeSystem SceneSystem Inherited Members ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnCreate() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.ExecutingSystemType ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetComponentTypeHandle<T>(Boolean) ComponentSystemBase.GetDynamicComponentTypeHandle(ComponentType) ComponentSystemBase.GetBufferTypeHandle<T>(Boolean) ComponentSystemBase.GetSharedComponentTypeHandle<T>() ComponentSystemBase.GetEntityTypeHandle() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.TryGetSingleton<T>(T) ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.TryGetSingletonEntity<T>(Entity) ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public abstract class ComponentSystem : ComponentSystemBase Remarks Implement a ComponentSystem subclass for systems that perform their work on the main thread or that use Jobs not specifically optimized for ECS. To use the ECS-specific Jobs, such as Unity.Entities.IJobForEach`1 or IJobChunk , implement JobComponentSystem instead. Properties Name Description Entities This system's query builder object. PostUpdateCommands This system's EntityCommandBuffer . Methods Name Description InitEntityQueryCache(Int32) Initializes this system's internal cache of EntityQuery objects to the specified number of queries. OnUpdate() Implement OnUpdate to perform the major work of this system. Update() Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Entities.ComponentSystem.InitEntityQueryCache.html": {
    "href": "api/Unity.Entities.ComponentSystem.InitEntityQueryCache.html",
    "title": "Method InitEntityQueryCache | Entities | 0.17.0-preview.18",
    "keywords": "Method InitEntityQueryCache InitEntityQueryCache(Int32) Initializes this system's internal cache of EntityQuery objects to the specified number of queries. Declaration protected void InitEntityQueryCache(int cacheSize) Parameters Type Name Description Int32 cacheSize The initial capacity of the system's EntityQuery array. Remarks A system's entity query cache expands automatically as you add additional queries. However, initializing the cache to the correct size when you initialize a system is more efficient and avoids unnecessary, garbage-collected memory allocations."
  },
  "api/Unity.Entities.ComponentSystem.OnUpdate.html": {
    "href": "api/Unity.Entities.ComponentSystem.OnUpdate.html",
    "title": "Method OnUpdate | Entities | 0.17.0-preview.18",
    "keywords": "Method OnUpdate OnUpdate() Implement OnUpdate to perform the major work of this system. Declaration protected abstract void OnUpdate() Remarks The system invokes OnUpdate once per frame on the main thread when any of this system's EntityQueries match existing entities, or if the system has the AlwaysUpdateSystemAttribute . See Also ShouldRunSystem ()"
  },
  "api/Unity.Entities.ComponentSystem.PostUpdateCommands.html": {
    "href": "api/Unity.Entities.ComponentSystem.PostUpdateCommands.html",
    "title": "Property PostUpdateCommands | Entities | 0.17.0-preview.18",
    "keywords": "Property PostUpdateCommands PostUpdateCommands This system's EntityCommandBuffer . Declaration public EntityCommandBuffer PostUpdateCommands { get; } Property Value Type Description EntityCommandBuffer A queue of entity-related commands to playback after the system's update function finishes. Remarks When iterating over a collection of entities with Entities , the system prohibits structural changes that would invalidate that collection. Such changes include creating and destroying entities, adding or removing components, and changing the value of shared components. Instead, add structural change commands to this PostUpdateCommands command buffer. The system executes commands added to this command buffer in order after this system's OnUpdate() function returns. PostUpdateCommands are created with a PlaybackPolicy.SinglePlayback and RecordingMode.Managed."
  },
  "api/Unity.Entities.ComponentSystem.Update.html": {
    "href": "api/Unity.Entities.ComponentSystem.Update.html",
    "title": "Method Update | Entities | 0.17.0-preview.18",
    "keywords": "Method Update Update() Declaration public override sealed void Update() Overrides ComponentSystemBase.Update()"
  },
  "api/Unity.Entities.ComponentSystemBase.Enabled.html": {
    "href": "api/Unity.Entities.ComponentSystemBase.Enabled.html",
    "title": "Property Enabled | Entities | 0.17.0-preview.18",
    "keywords": "Property Enabled Enabled Controls whether this system executes when its OnUpdate function is called. Declaration public bool Enabled { get; set; } Property Value Type Description Boolean True, if the system is enabled. Remarks The Enabled property is intended for debugging so that you can easily turn on and off systems from the Entity Debugger window. A system with Enabled set to false will not update, even if its ShouldRunSystem() function returns true."
  },
  "api/Unity.Entities.ComponentSystemBase.EntityManager.html": {
    "href": "api/Unity.Entities.ComponentSystemBase.EntityManager.html",
    "title": "Property EntityManager | Entities | 0.17.0-preview.18",
    "keywords": "Property EntityManager EntityManager The EntityManager object of the World in which this system exists. Declaration public EntityManager EntityManager { get; } Property Value Type Description EntityManager The EntityManager for this system."
  },
  "api/Unity.Entities.ComponentSystemBase.EntityQueries.html": {
    "href": "api/Unity.Entities.ComponentSystemBase.EntityQueries.html",
    "title": "Property EntityQueries | Entities | 0.17.0-preview.18",
    "keywords": "Property EntityQueries EntityQueries The query objects cached by this system. Declaration public EntityQuery[] EntityQueries { get; } Property Value Type Description EntityQuery [] A read-only array of the cached EntityQuery objects. Remarks A system caches any queries it implicitly creates through the IJob interfaces or EntityQueryBuilder , that you create explicitly by calling GetEntityQuery(ComponentType[]) , or that you add to the system as a required query with RequireForUpdate(EntityQuery) . Implicit queries may be created lazily and not exist before a system has run for the first time."
  },
  "api/Unity.Entities.ComponentSystemBase.ExecutingSystemType.html": {
    "href": "api/Unity.Entities.ComponentSystemBase.ExecutingSystemType.html",
    "title": "Property ExecutingSystemType | Entities | 0.17.0-preview.18",
    "keywords": "Property ExecutingSystemType ExecutingSystemType Declaration public static Type ExecutingSystemType { get; } Property Value Type Description Type"
  },
  "api/Unity.Entities.ComponentSystemBase.GetBufferFromEntity.html": {
    "href": "api/Unity.Entities.ComponentSystemBase.GetBufferFromEntity.html",
    "title": "Method GetBufferFromEntity | Entities | 0.17.0-preview.18",
    "keywords": "Method GetBufferFromEntity GetBufferFromEntity<T>(Boolean) Gets a BufferFromEntity<T> object that can access a DynamicBuffer<T> . Declaration public BufferFromEntity<T> GetBufferFromEntity<T>(bool isReadOnly = false) where T : struct, IBufferElementData Parameters Type Name Description Boolean isReadOnly Whether the buffer data is only read or is also written. Access data in a read-only fashion whenever possible. Returns Type Description BufferFromEntity <T> An array-like object that provides access to buffers, indexed by Entity . Type Parameters Name Description T The type of IBufferElementData stored in the buffer. Remarks Assign the returned object to a field of your Job struct so that you can access the contents of the buffer in a Job. See Also ComponentDataFromEntity <T>"
  },
  "api/Unity.Entities.ComponentSystemBase.GetBufferTypeHandle.html": {
    "href": "api/Unity.Entities.ComponentSystemBase.GetBufferTypeHandle.html",
    "title": "Method GetBufferTypeHandle | Entities | 0.17.0-preview.18",
    "keywords": "Method GetBufferTypeHandle GetBufferTypeHandle<T>(Boolean) Gets the run-time type information required to access an array of buffer components in a chunk. Declaration public BufferTypeHandle<T> GetBufferTypeHandle<T>(bool isReadOnly = false) where T : struct, IBufferElementData Parameters Type Name Description Boolean isReadOnly Whether the data is only read, not written. Access data as read-only whenever possible. Returns Type Description BufferTypeHandle <T> An object representing the type information required to safely access buffer components stored in a chunk. Type Parameters Name Description T A struct that implements IBufferElementData . Remarks Pass a BufferTypeHandle instance to a job that has access to chunk data, such as an IJobChunk job, to access that type of buffer component inside the job."
  },
  "api/Unity.Entities.ComponentSystemBase.GetComponentDataFromEntity.html": {
    "href": "api/Unity.Entities.ComponentSystemBase.GetComponentDataFromEntity.html",
    "title": "Method GetComponentDataFromEntity | Entities | 0.17.0-preview.18",
    "keywords": "Method GetComponentDataFromEntity GetComponentDataFromEntity<T>(Boolean) Gets an dictionary-like container containing all components of type T, keyed by Entity. Declaration public ComponentDataFromEntity<T> GetComponentDataFromEntity<T>(bool isReadOnly = false) where T : struct, IComponentData Parameters Type Name Description Boolean isReadOnly Whether the data is only read, not written. Access data as read-only whenever possible. Returns Type Description ComponentDataFromEntity <T> All component data of type T. Type Parameters Name Description T A struct that implements IComponentData ."
  },
  "api/Unity.Entities.ComponentSystemBase.GetComponentTypeHandle.html": {
    "href": "api/Unity.Entities.ComponentSystemBase.GetComponentTypeHandle.html",
    "title": "Method GetComponentTypeHandle | Entities | 0.17.0-preview.18",
    "keywords": "Method GetComponentTypeHandle GetComponentTypeHandle<T>(Boolean) Gets the run-time type information required to access an array of component data in a chunk. Declaration public ComponentTypeHandle<T> GetComponentTypeHandle<T>(bool isReadOnly = false) where T : struct, IComponentData Parameters Type Name Description Boolean isReadOnly Whether the component data is only read, not written. Access components as read-only whenever possible. Returns Type Description ComponentTypeHandle <T> An object representing the type information required to safely access component data stored in a chunk. Type Parameters Name Description T A struct that implements IComponentData . Remarks Pass an ComponentTypeHandle<T> instance to a job that has access to chunk data, such as an IJobChunk job, to access that type of component inside the job."
  },
  "api/Unity.Entities.ComponentSystemBase.GetDynamicComponentTypeHandle.html": {
    "href": "api/Unity.Entities.ComponentSystemBase.GetDynamicComponentTypeHandle.html",
    "title": "Method GetDynamicComponentTypeHandle | Entities | 0.17.0-preview.18",
    "keywords": "Method GetDynamicComponentTypeHandle GetDynamicComponentTypeHandle(ComponentType) Gets the run-time type information required to access an array of component data in a chunk. Declaration public DynamicComponentTypeHandle GetDynamicComponentTypeHandle(ComponentType componentType) Parameters Type Name Description ComponentType componentType Type of the component Returns Type Description DynamicComponentTypeHandle An object representing the type information required to safely access component data stored in a chunk. Remarks Pass an DynamicComponentTypeHandle instance to a job that has access to chunk data, such as an IJobChunk job, to access that type of component inside the job."
  },
  "api/Unity.Entities.ComponentSystemBase.GetEntityQuery.html": {
    "href": "api/Unity.Entities.ComponentSystemBase.GetEntityQuery.html",
    "title": "Method GetEntityQuery | Entities | 0.17.0-preview.18",
    "keywords": "Method GetEntityQuery GetEntityQuery(ComponentType[]) Gets the cached query for the specified component types, if one exists; otherwise, creates a new query instance and caches it. Declaration protected EntityQuery GetEntityQuery(params ComponentType[] componentTypes) Parameters Type Name Description ComponentType [] componentTypes An array or comma-separated list of component types. Returns Type Description EntityQuery The new or cached query. GetEntityQuery(NativeArray<ComponentType>) Gets the cached query for the specified component types, if one exists; otherwise, creates a new query instance and caches it. Declaration protected EntityQuery GetEntityQuery(NativeArray<ComponentType> componentTypes) Parameters Type Name Description NativeArray < ComponentType > componentTypes An array of component types. Returns Type Description EntityQuery The new or cached query. GetEntityQuery(EntityQueryDesc[]) Combines an array of query description objects into a single query. Declaration protected EntityQuery GetEntityQuery(params EntityQueryDesc[] queryDesc) Parameters Type Name Description EntityQueryDesc [] queryDesc An array of query description objects to be combined to define the query. Returns Type Description EntityQuery The new or cached query. Remarks This function looks for a cached query matching the combined query descriptions, and returns it if one exists; otherwise, the function creates a new query instance and caches it."
  },
  "api/Unity.Entities.ComponentSystemBase.GetEntityTypeHandle.html": {
    "href": "api/Unity.Entities.ComponentSystemBase.GetEntityTypeHandle.html",
    "title": "Method GetEntityTypeHandle | Entities | 0.17.0-preview.18",
    "keywords": "Method GetEntityTypeHandle GetEntityTypeHandle() Gets the run-time type information required to access the array of Entity objects in a chunk. Declaration public EntityTypeHandle GetEntityTypeHandle() Returns Type Description EntityTypeHandle An object representing the type information required to safely access Entity instances stored in a chunk."
  },
  "api/Unity.Entities.ComponentSystemBase.GetSharedComponentTypeHandle.html": {
    "href": "api/Unity.Entities.ComponentSystemBase.GetSharedComponentTypeHandle.html",
    "title": "Method GetSharedComponentTypeHandle | Entities | 0.17.0-preview.18",
    "keywords": "Method GetSharedComponentTypeHandle GetSharedComponentTypeHandle<T>() Gets the run-time type information required to access a shared component data in a chunk. Declaration public SharedComponentTypeHandle<T> GetSharedComponentTypeHandle<T>() where T : struct, ISharedComponentData Returns Type Description SharedComponentTypeHandle <T> An object representing the type information required to safely access shared component data stored in a chunk. Type Parameters Name Description T A struct that implements ISharedComponentData ."
  },
  "api/Unity.Entities.ComponentSystemBase.GetSingleton.html": {
    "href": "api/Unity.Entities.ComponentSystemBase.GetSingleton.html",
    "title": "Method GetSingleton | Entities | 0.17.0-preview.18",
    "keywords": "Method GetSingleton GetSingleton<T>() Gets the value of a singleton component. Declaration public T GetSingleton<T>() where T : struct, IComponentData Returns Type Description T The component. Type Parameters Name Description T The IComponentData subtype of the singleton component. See Also GetSingleton<T>()"
  },
  "api/Unity.Entities.ComponentSystemBase.GetSingletonEntity.html": {
    "href": "api/Unity.Entities.ComponentSystemBase.GetSingletonEntity.html",
    "title": "Method GetSingletonEntity | Entities | 0.17.0-preview.18",
    "keywords": "Method GetSingletonEntity GetSingletonEntity<T>() Gets the Entity instance for a singleton. Declaration public Entity GetSingletonEntity<T>() Returns Type Description Entity The entity associated with the specified singleton component. Type Parameters Name Description T The Type of the singleton component. See Also GetSingletonEntity()"
  },
  "api/Unity.Entities.ComponentSystemBase.GlobalSystemVersion.html": {
    "href": "api/Unity.Entities.ComponentSystemBase.GlobalSystemVersion.html",
    "title": "Property GlobalSystemVersion | Entities | 0.17.0-preview.18",
    "keywords": "Property GlobalSystemVersion GlobalSystemVersion The current change version number in this World . Declaration public uint GlobalSystemVersion { get; } Property Value Type Description UInt32 Remarks The system updates the component version numbers inside any ArchetypeChunk instances that this system accesses with write permissions to this value."
  },
  "api/Unity.Entities.ComponentSystemBase.HasSingleton.html": {
    "href": "api/Unity.Entities.ComponentSystemBase.HasSingleton.html",
    "title": "Method HasSingleton | Entities | 0.17.0-preview.18",
    "keywords": "Method HasSingleton HasSingleton<T>() Checks whether a singelton component of the specified type exists. Declaration public bool HasSingleton<T>() Returns Type Description Boolean True, if a singleton of the specified type exists in the current World . Type Parameters Name Description T The IComponentData subtype of the singleton component."
  },
  "api/Unity.Entities.ComponentSystemBase.html": {
    "href": "api/Unity.Entities.ComponentSystemBase.html",
    "title": "Class ComponentSystemBase | Entities | 0.17.0-preview.18",
    "keywords": "Class ComponentSystemBase A system provides behavior in an ECS architecture. Inheritance Object ComponentSystemBase ComponentSystem JobComponentSystem SystemBase Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public abstract class ComponentSystemBase Remarks System implementations should inherit SystemBase , which is a subclass of ComponentSystemBase. Properties Name Description Enabled Controls whether this system executes when its OnUpdate function is called. EntityManager The EntityManager object of the World in which this system exists. EntityQueries The query objects cached by this system. ExecutingSystemType GlobalSystemVersion The current change version number in this World . LastSystemVersion The current version of this system. Time The current Time data for this system's world. World The World in which this system exists. Methods Name Description GetBufferFromEntity<T>(Boolean) Gets a BufferFromEntity<T> object that can access a DynamicBuffer<T> . GetBufferTypeHandle<T>(Boolean) Gets the run-time type information required to access an array of buffer components in a chunk. GetComponentDataFromEntity<T>(Boolean) Gets an dictionary-like container containing all components of type T, keyed by Entity. GetComponentTypeHandle<T>(Boolean) Gets the run-time type information required to access an array of component data in a chunk. GetDynamicComponentTypeHandle(ComponentType) Gets the run-time type information required to access an array of component data in a chunk. GetEntityQuery(NativeArray<ComponentType>) Gets the cached query for the specified component types, if one exists; otherwise, creates a new query instance and caches it. GetEntityQuery(ComponentType[]) Gets the cached query for the specified component types, if one exists; otherwise, creates a new query instance and caches it. GetEntityQuery(EntityQueryDesc[]) Combines an array of query description objects into a single query. GetEntityTypeHandle() Gets the run-time type information required to access the array of Entity objects in a chunk. GetSharedComponentTypeHandle<T>() Gets the run-time type information required to access a shared component data in a chunk. GetSingleton<T>() Gets the value of a singleton component. GetSingletonEntity<T>() Gets the Entity instance for a singleton. HasSingleton<T>() Checks whether a singelton component of the specified type exists. OnCreate() Called when this system is created. OnCreateForCompiler() OnDestroy() Called when this system is destroyed. OnStartRunning() Called before the first call to OnUpdate and when a system resumes updating after being stopped or disabled. OnStopRunning() Called when this system stops running because no entities match the system's EntityQuery objects or because you change the system Enabled property to false. RequireForUpdate(EntityQuery) Adds a query that must return entities for the system to run. You can add multiple required queries to a system; all of them must match at least one entity for the system to run. RequireSingletonForUpdate<T>() Require that a specific singleton component exist for this system to run. SetSingleton<T>(T) Sets the value of a singleton component. ShouldRunSystem() Reports whether any of this system's entity queries currently match any chunks. This function is used internally to determine whether the system's OnUpdate function can be skipped. TryGetSingleton<T>(out T) Gets the value of a singleton component, and returns whether or not a singleton component of the specified type exists in the World . TryGetSingletonEntity<T>(out Entity) Gets the singleton Entity, and returns whether or not a singleton Entity of the specified type exists in the World . Update() Executes the system immediately. Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Entities.ComponentSystemBase.LastSystemVersion.html": {
    "href": "api/Unity.Entities.ComponentSystemBase.LastSystemVersion.html",
    "title": "Property LastSystemVersion | Entities | 0.17.0-preview.18",
    "keywords": "Property LastSystemVersion LastSystemVersion The current version of this system. Declaration public uint LastSystemVersion { get; } Property Value Type Description UInt32 The GlobalSystemVersion the last time this system ran. Remarks LastSystemVersion is updated to match the GlobalSystemVersion whenever a system runs. When you use SetChangedVersionFilter(ComponentType) or DidChange(DynamicComponentTypeHandle, UInt32) , LastSystemVersion provides the basis for determining whether a component could have changed since the last time the system ran. When a system accesses a component and has write permission, it updates the change version of that component type to the current value of LastSystemVersion. The system updates the component type's version whether or not it actually modifies data in any instances of the component type -- this is one reason why you should specify read-only access to components whenever possible. For efficiency, ECS tracks the change version of component types by chunks, not by individual entities. If a system updates the component of a given type for any entity in a chunk, then ECS assumes that the components of all entities in that chunk could have been changed. Change filtering allows you to save processing time by skipping all entities in an unchanged chunk, but does not support skipping individual entities in a chunk that does contain changes."
  },
  "api/Unity.Entities.ComponentSystemBase.OnCreate.html": {
    "href": "api/Unity.Entities.ComponentSystemBase.OnCreate.html",
    "title": "Method OnCreate | Entities | 0.17.0-preview.18",
    "keywords": "Method OnCreate OnCreate() Called when this system is created. Declaration protected virtual void OnCreate() Remarks Implement an OnCreate() function to set up system resources when it is created. OnCreate is invoked before the the first time OnStartRunning() and OnUpdate are invoked."
  },
  "api/Unity.Entities.ComponentSystemBase.OnCreateForCompiler.html": {
    "href": "api/Unity.Entities.ComponentSystemBase.OnCreateForCompiler.html",
    "title": "Method OnCreateForCompiler | Entities | 0.17.0-preview.18",
    "keywords": "Method OnCreateForCompiler OnCreateForCompiler() Declaration protected virtual void OnCreateForCompiler()"
  },
  "api/Unity.Entities.ComponentSystemBase.OnDestroy.html": {
    "href": "api/Unity.Entities.ComponentSystemBase.OnDestroy.html",
    "title": "Method OnDestroy | Entities | 0.17.0-preview.18",
    "keywords": "Method OnDestroy OnDestroy() Called when this system is destroyed. Declaration protected virtual void OnDestroy() Remarks Systems are destroyed when the application shuts down, the World is destroyed, or you call DestroySystem(ComponentSystemBase) . In the Unity Editor, system destruction occurs when you exit Play Mode and when scripts are reloaded."
  },
  "api/Unity.Entities.ComponentSystemBase.OnStartRunning.html": {
    "href": "api/Unity.Entities.ComponentSystemBase.OnStartRunning.html",
    "title": "Method OnStartRunning | Entities | 0.17.0-preview.18",
    "keywords": "Method OnStartRunning OnStartRunning() Called before the first call to OnUpdate and when a system resumes updating after being stopped or disabled. Declaration protected virtual void OnStartRunning() Remarks If the EntityQuery objects defined for a system do not match any existing entities then the system skips updates until a successful match is found. Likewise, if you set Enabled to false, then the system stops running. In both cases, OnStopRunning() is called when a running system stops updating; OnStartRunning is called when it starts updating again."
  },
  "api/Unity.Entities.ComponentSystemBase.OnStopRunning.html": {
    "href": "api/Unity.Entities.ComponentSystemBase.OnStopRunning.html",
    "title": "Method OnStopRunning | Entities | 0.17.0-preview.18",
    "keywords": "Method OnStopRunning OnStopRunning() Called when this system stops running because no entities match the system's EntityQuery objects or because you change the system Enabled property to false. Declaration protected virtual void OnStopRunning() Remarks If the EntityQuery objects defined for a system do not match any existing entities then the system skips updating until a successful match is found. Likewise, if you set Enabled to false, then the system stops running. In both cases, OnStopRunning() is called when a running system stops updating; OnStartRunning is called when it starts updating again."
  },
  "api/Unity.Entities.ComponentSystemBase.RequireForUpdate.html": {
    "href": "api/Unity.Entities.ComponentSystemBase.RequireForUpdate.html",
    "title": "Method RequireForUpdate | Entities | 0.17.0-preview.18",
    "keywords": "Method RequireForUpdate RequireForUpdate(EntityQuery) Adds a query that must return entities for the system to run. You can add multiple required queries to a system; all of them must match at least one entity for the system to run. Declaration public void RequireForUpdate(EntityQuery query) Parameters Type Name Description EntityQuery query A query that must match entities this frame in order for this system to run. Remarks Any queries added through RequireforUpdate override all other queries cached by this system. In other words, if any required query does not find matching entities, the update is skipped even if another query created for the system (either explicitly or implicitly) does match entities and vice versa."
  },
  "api/Unity.Entities.ComponentSystemBase.RequireSingletonForUpdate.html": {
    "href": "api/Unity.Entities.ComponentSystemBase.RequireSingletonForUpdate.html",
    "title": "Method RequireSingletonForUpdate | Entities | 0.17.0-preview.18",
    "keywords": "Method RequireSingletonForUpdate RequireSingletonForUpdate<T>() Require that a specific singleton component exist for this system to run. Declaration public void RequireSingletonForUpdate<T>() Type Parameters Name Description T The IComponentData subtype of the singleton component."
  },
  "api/Unity.Entities.ComponentSystemBase.SetSingleton.html": {
    "href": "api/Unity.Entities.ComponentSystemBase.SetSingleton.html",
    "title": "Method SetSingleton | Entities | 0.17.0-preview.18",
    "keywords": "Method SetSingleton SetSingleton<T>(T) Sets the value of a singleton component. Declaration public void SetSingleton<T>(T value) where T : struct, IComponentData Parameters Type Name Description T value A component containing the value to assign to the singleton. Type Parameters Name Description T The IComponentData subtype of the singleton component. See Also SetSingleton<T>(T)"
  },
  "api/Unity.Entities.ComponentSystemBase.ShouldRunSystem.html": {
    "href": "api/Unity.Entities.ComponentSystemBase.ShouldRunSystem.html",
    "title": "Method ShouldRunSystem | Entities | 0.17.0-preview.18",
    "keywords": "Method ShouldRunSystem ShouldRunSystem() Reports whether any of this system's entity queries currently match any chunks. This function is used internally to determine whether the system's OnUpdate function can be skipped. Declaration public bool ShouldRunSystem() Returns Type Description Boolean True, if the queries in this system match existing entities or the system has the AlwaysUpdateSystemAttribute . Remarks A system without any queries also returns true. Note that even if this function returns true, other factors may prevent a system from updating. For example, a system will not be updated if its Enabled property is false."
  },
  "api/Unity.Entities.ComponentSystemBase.Time.html": {
    "href": "api/Unity.Entities.ComponentSystemBase.Time.html",
    "title": "Property Time | Entities | 0.17.0-preview.18",
    "keywords": "Property Time Time The current Time data for this system's world. Declaration public TimeData Time { get; } Property Value Type Description TimeData"
  },
  "api/Unity.Entities.ComponentSystemBase.TryGetSingleton.html": {
    "href": "api/Unity.Entities.ComponentSystemBase.TryGetSingleton.html",
    "title": "Method TryGetSingleton | Entities | 0.17.0-preview.18",
    "keywords": "Method TryGetSingleton TryGetSingleton<T>(out T) Gets the value of a singleton component, and returns whether or not a singleton component of the specified type exists in the World . Declaration public bool TryGetSingleton<T>(out T value) where T : struct, IComponentData Parameters Type Name Description T value Returns Type Description Boolean True, if exactly one Entity exists in the World with the provided component type. Type Parameters Name Description T The IComponentData subtype of the singleton component."
  },
  "api/Unity.Entities.ComponentSystemBase.TryGetSingletonEntity.html": {
    "href": "api/Unity.Entities.ComponentSystemBase.TryGetSingletonEntity.html",
    "title": "Method TryGetSingletonEntity | Entities | 0.17.0-preview.18",
    "keywords": "Method TryGetSingletonEntity TryGetSingletonEntity<T>(out Entity) Gets the singleton Entity, and returns whether or not a singleton Entity of the specified type exists in the World . Declaration public bool TryGetSingletonEntity<T>(out Entity value) Parameters Type Name Description Entity value Returns Type Description Boolean True, if exactly one Entity exists in the World with the provided component type. Type Parameters Name Description T The IComponentData subtype of the singleton component."
  },
  "api/Unity.Entities.ComponentSystemBase.Update.html": {
    "href": "api/Unity.Entities.ComponentSystemBase.Update.html",
    "title": "Method Update | Entities | 0.17.0-preview.18",
    "keywords": "Method Update Update() Executes the system immediately. Declaration public abstract void Update() Remarks The exact behavior is determined by this system's specific subclass. See Also SystemBase ComponentSystemGroup EntityCommandBufferSystem"
  },
  "api/Unity.Entities.ComponentSystemBase.World.html": {
    "href": "api/Unity.Entities.ComponentSystemBase.World.html",
    "title": "Property World | Entities | 0.17.0-preview.18",
    "keywords": "Property World World The World in which this system exists. Declaration public World World { get; } Property Value Type Description World The World of this system."
  },
  "api/Unity.Entities.ComponentSystemBaseManagedComponentExtensions.GetSingleton.html": {
    "href": "api/Unity.Entities.ComponentSystemBaseManagedComponentExtensions.GetSingleton.html",
    "title": "Method GetSingleton | Entities | 0.17.0-preview.18",
    "keywords": "Method GetSingleton GetSingleton<T>(ComponentSystemBase) Gets the value of a singleton component. Declaration public static T GetSingleton<T>(this ComponentSystemBase sys) where T : class, IComponentData Parameters Type Name Description ComponentSystemBase sys Returns Type Description T The component. Type Parameters Name Description T The IComponentData subtype of the singleton component. See Also GetSingleton<T>()"
  },
  "api/Unity.Entities.ComponentSystemBaseManagedComponentExtensions.HasSingleton.html": {
    "href": "api/Unity.Entities.ComponentSystemBaseManagedComponentExtensions.HasSingleton.html",
    "title": "Method HasSingleton | Entities | 0.17.0-preview.18",
    "keywords": "Method HasSingleton HasSingleton<T>(ComponentSystemBase) Checks whether a singleton component of the specified type exists. Declaration public static bool HasSingleton<T>(this ComponentSystemBase sys) where T : class, IComponentData Parameters Type Name Description ComponentSystemBase sys Returns Type Description Boolean True, if a singleton of the specified type exists in the current World . Type Parameters Name Description T The IComponentData subtype of the singleton component."
  },
  "api/Unity.Entities.ComponentSystemBaseManagedComponentExtensions.html": {
    "href": "api/Unity.Entities.ComponentSystemBaseManagedComponentExtensions.html",
    "title": "Class ComponentSystemBaseManagedComponentExtensions | Entities | 0.17.0-preview.18",
    "keywords": "Class ComponentSystemBaseManagedComponentExtensions Inheritance Object ComponentSystemBaseManagedComponentExtensions Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class ComponentSystemBaseManagedComponentExtensions Methods Name Description GetSingleton<T>(ComponentSystemBase) Gets the value of a singleton component. HasSingleton<T>(ComponentSystemBase) Checks whether a singleton component of the specified type exists. SetSingleton<T>(ComponentSystemBase, T) Sets the value of a singleton component."
  },
  "api/Unity.Entities.ComponentSystemBaseManagedComponentExtensions.SetSingleton.html": {
    "href": "api/Unity.Entities.ComponentSystemBaseManagedComponentExtensions.SetSingleton.html",
    "title": "Method SetSingleton | Entities | 0.17.0-preview.18",
    "keywords": "Method SetSingleton SetSingleton<T>(ComponentSystemBase, T) Sets the value of a singleton component. Declaration public static void SetSingleton<T>(this ComponentSystemBase sys, T value) where T : class, IComponentData Parameters Type Name Description ComponentSystemBase sys T value A component containing the value to assign to the singleton. Type Parameters Name Description T The IComponentData subtype of the singleton component. See Also SetSingleton<T>(T)"
  },
  "api/Unity.Entities.ComponentSystemGroup.AddSystemToUpdateList.html": {
    "href": "api/Unity.Entities.ComponentSystemGroup.AddSystemToUpdateList.html",
    "title": "Method AddSystemToUpdateList | Entities | 0.17.0-preview.18",
    "keywords": "Method AddSystemToUpdateList AddSystemToUpdateList(ComponentSystemBase) Declaration public void AddSystemToUpdateList(ComponentSystemBase sys) Parameters Type Name Description ComponentSystemBase sys"
  },
  "api/Unity.Entities.ComponentSystemGroup.FixedRateManager.html": {
    "href": "api/Unity.Entities.ComponentSystemGroup.FixedRateManager.html",
    "title": "Property FixedRateManager | Entities | 0.17.0-preview.18",
    "keywords": "Property FixedRateManager FixedRateManager Declaration public IFixedRateManager FixedRateManager { get; set; } Property Value Type Description IFixedRateManager"
  },
  "api/Unity.Entities.ComponentSystemGroup.html": {
    "href": "api/Unity.Entities.ComponentSystemGroup.html",
    "title": "Class ComponentSystemGroup | Entities | 0.17.0-preview.18",
    "keywords": "Class ComponentSystemGroup Inheritance Object ComponentSystemBase ComponentSystem ComponentSystemGroup GameObjectAfterConversionGroup GameObjectBeforeConversionGroup GameObjectConversionGroup GameObjectDeclareReferencedObjectsGroup GameObjectExportGroup FixedStepSimulationSystemGroup InitializationSystemGroup LateSimulationSystemGroup PresentationSystemGroup SimulationSystemGroup ProcessAfterLoadGroup SceneSystemGroup TransformSystemGroup Inherited Members ComponentSystem.PostUpdateCommands ComponentSystem.InitEntityQueryCache(Int32) ComponentSystem.Entities ComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnStartRunning() ComponentSystemBase.ExecutingSystemType ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetComponentTypeHandle<T>(Boolean) ComponentSystemBase.GetDynamicComponentTypeHandle(ComponentType) ComponentSystemBase.GetBufferTypeHandle<T>(Boolean) ComponentSystemBase.GetSharedComponentTypeHandle<T>() ComponentSystemBase.GetEntityTypeHandle() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.TryGetSingleton<T>(T) ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.TryGetSingletonEntity<T>(Entity) ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public abstract class ComponentSystemGroup : ComponentSystem Properties Name Description FixedRateManager Systems Methods Name Description AddSystemToUpdateList(ComponentSystemBase) OnCreate() OnDestroy() OnStopRunning() OnUpdate() RemoveSystemFromUpdateList(ComponentSystemBase) SortSystems() Update the component system's sort order. Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Entities.ComponentSystemGroup.OnCreate.html": {
    "href": "api/Unity.Entities.ComponentSystemGroup.OnCreate.html",
    "title": "Method OnCreate | Entities | 0.17.0-preview.18",
    "keywords": "Method OnCreate OnCreate() Declaration protected override void OnCreate() Overrides ComponentSystemBase.OnCreate()"
  },
  "api/Unity.Entities.ComponentSystemGroup.OnDestroy.html": {
    "href": "api/Unity.Entities.ComponentSystemGroup.OnDestroy.html",
    "title": "Method OnDestroy | Entities | 0.17.0-preview.18",
    "keywords": "Method OnDestroy OnDestroy() Declaration protected override void OnDestroy() Overrides ComponentSystemBase.OnDestroy()"
  },
  "api/Unity.Entities.ComponentSystemGroup.OnStopRunning.html": {
    "href": "api/Unity.Entities.ComponentSystemGroup.OnStopRunning.html",
    "title": "Method OnStopRunning | Entities | 0.17.0-preview.18",
    "keywords": "Method OnStopRunning OnStopRunning() Declaration protected override void OnStopRunning() Overrides ComponentSystemBase.OnStopRunning()"
  },
  "api/Unity.Entities.ComponentSystemGroup.OnUpdate.html": {
    "href": "api/Unity.Entities.ComponentSystemGroup.OnUpdate.html",
    "title": "Method OnUpdate | Entities | 0.17.0-preview.18",
    "keywords": "Method OnUpdate OnUpdate() Declaration protected override void OnUpdate() Overrides ComponentSystem.OnUpdate()"
  },
  "api/Unity.Entities.ComponentSystemGroup.RemoveSystemFromUpdateList.html": {
    "href": "api/Unity.Entities.ComponentSystemGroup.RemoveSystemFromUpdateList.html",
    "title": "Method RemoveSystemFromUpdateList | Entities | 0.17.0-preview.18",
    "keywords": "Method RemoveSystemFromUpdateList RemoveSystemFromUpdateList(ComponentSystemBase) Declaration public void RemoveSystemFromUpdateList(ComponentSystemBase sys) Parameters Type Name Description ComponentSystemBase sys"
  },
  "api/Unity.Entities.ComponentSystemGroup.SortSystems.html": {
    "href": "api/Unity.Entities.ComponentSystemGroup.SortSystems.html",
    "title": "Method SortSystems | Entities | 0.17.0-preview.18",
    "keywords": "Method SortSystems SortSystems() Update the component system's sort order. Declaration public void SortSystems()"
  },
  "api/Unity.Entities.ComponentSystemGroup.Systems.html": {
    "href": "api/Unity.Entities.ComponentSystemGroup.Systems.html",
    "title": "Property Systems | Entities | 0.17.0-preview.18",
    "keywords": "Property Systems Systems Declaration public virtual IReadOnlyList<ComponentSystemBase> Systems { get; } Property Value Type Description IReadOnlyList < ComponentSystemBase >"
  },
  "api/Unity.Entities.ComponentSystemGroupExtensions.html": {
    "href": "api/Unity.Entities.ComponentSystemGroupExtensions.html",
    "title": "Class ComponentSystemGroupExtensions | Entities | 0.17.0-preview.18",
    "keywords": "Class ComponentSystemGroupExtensions Inheritance Object ComponentSystemGroupExtensions Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class ComponentSystemGroupExtensions"
  },
  "api/Unity.Entities.ComponentSystemSorter.CircularSystemDependencyException.Chain.html": {
    "href": "api/Unity.Entities.ComponentSystemSorter.CircularSystemDependencyException.Chain.html",
    "title": "Property Chain | Entities | 0.17.0-preview.18",
    "keywords": "Property Chain Chain Declaration public IEnumerable<Type> Chain { get; } Property Value Type Description IEnumerable < Type >"
  },
  "api/Unity.Entities.ComponentSystemSorter.CircularSystemDependencyException.-ctor.html": {
    "href": "api/Unity.Entities.ComponentSystemSorter.CircularSystemDependencyException.-ctor.html",
    "title": "Constructor CircularSystemDependencyException | Entities | 0.17.0-preview.18",
    "keywords": "Constructor CircularSystemDependencyException CircularSystemDependencyException(IEnumerable<Type>) Declaration public CircularSystemDependencyException(IEnumerable<Type> chain) Parameters Type Name Description IEnumerable < Type > chain"
  },
  "api/Unity.Entities.ComponentSystemSorter.CircularSystemDependencyException.html": {
    "href": "api/Unity.Entities.ComponentSystemSorter.CircularSystemDependencyException.html",
    "title": "Class ComponentSystemSorter.CircularSystemDependencyException | Entities | 0.17.0-preview.18",
    "keywords": "Class ComponentSystemSorter.CircularSystemDependencyException Inheritance Object Exception ComponentSystemSorter.CircularSystemDependencyException Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class CircularSystemDependencyException : Exception, _Exception, ISerializable Constructors Name Description CircularSystemDependencyException(IEnumerable<Type>) Properties Name Description Chain Message"
  },
  "api/Unity.Entities.ComponentSystemSorter.CircularSystemDependencyException.Message.html": {
    "href": "api/Unity.Entities.ComponentSystemSorter.CircularSystemDependencyException.Message.html",
    "title": "Property Message | Entities | 0.17.0-preview.18",
    "keywords": "Property Message Message Declaration public override string Message { get; } Property Value Type Description String Overrides Exception.Message"
  },
  "api/Unity.Entities.ComponentSystemSorter.html": {
    "href": "api/Unity.Entities.ComponentSystemSorter.html",
    "title": "Class ComponentSystemSorter | Entities | 0.17.0-preview.18",
    "keywords": "Class ComponentSystemSorter Inheritance Object ComponentSystemSorter Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class ComponentSystemSorter"
  },
  "api/Unity.Entities.ComponentSystemSorter.TypeHeapElement.CompareTo.html": {
    "href": "api/Unity.Entities.ComponentSystemSorter.TypeHeapElement.CompareTo.html",
    "title": "Method CompareTo | Entities | 0.17.0-preview.18",
    "keywords": "Method CompareTo CompareTo(ComponentSystemSorter.TypeHeapElement) Declaration public int CompareTo(ComponentSystemSorter.TypeHeapElement other) Parameters Type Name Description ComponentSystemSorter.TypeHeapElement other Returns Type Description Int32"
  },
  "api/Unity.Entities.ComponentSystemSorter.TypeHeapElement.-ctor.html": {
    "href": "api/Unity.Entities.ComponentSystemSorter.TypeHeapElement.-ctor.html",
    "title": "Constructor TypeHeapElement | Entities | 0.17.0-preview.18",
    "keywords": "Constructor TypeHeapElement TypeHeapElement(Int32, Type) Declaration public TypeHeapElement(int index, Type t) Parameters Type Name Description Int32 index Type t"
  },
  "api/Unity.Entities.ComponentSystemSorter.TypeHeapElement.html": {
    "href": "api/Unity.Entities.ComponentSystemSorter.TypeHeapElement.html",
    "title": "Struct ComponentSystemSorter.TypeHeapElement | Entities | 0.17.0-preview.18",
    "keywords": "Struct ComponentSystemSorter.TypeHeapElement Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct TypeHeapElement : IComparable<ComponentSystemSorter.TypeHeapElement> Constructors Name Description TypeHeapElement(Int32, Type) Fields Name Description unsortedIndex Methods Name Description CompareTo(ComponentSystemSorter.TypeHeapElement)"
  },
  "api/Unity.Entities.ComponentSystemSorter.TypeHeapElement.unsortedIndex.html": {
    "href": "api/Unity.Entities.ComponentSystemSorter.TypeHeapElement.unsortedIndex.html",
    "title": "Field unsortedIndex | Entities | 0.17.0-preview.18",
    "keywords": "Field unsortedIndex Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public int unsortedIndex Returns Type Description Int32"
  },
  "api/Unity.Entities.ComponentType.AccessMode.html": {
    "href": "api/Unity.Entities.ComponentType.AccessMode.html",
    "title": "Enum ComponentType.AccessMode | Entities | 0.17.0-preview.18",
    "keywords": "Enum ComponentType.AccessMode Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public enum AccessMode Fields Name Description Value ReadWrite 0 ReadOnly 1 Exclude 2 Extension Methods SourceGenHelpers.GetFlags()"
  },
  "api/Unity.Entities.ComponentType.AccessModeType.html": {
    "href": "api/Unity.Entities.ComponentType.AccessModeType.html",
    "title": "Field AccessModeType | Entities | 0.17.0-preview.18",
    "keywords": "Field AccessModeType Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public ComponentType.AccessMode AccessModeType Returns Type Description ComponentType.AccessMode"
  },
  "api/Unity.Entities.ComponentType.ChunkComponent.html": {
    "href": "api/Unity.Entities.ComponentType.ChunkComponent.html",
    "title": "Method ChunkComponent | Entities | 0.17.0-preview.18",
    "keywords": "Method ChunkComponent ChunkComponent(Type) Declaration public static ComponentType ChunkComponent(Type type) Parameters Type Name Description Type type Returns Type Description ComponentType ChunkComponent<T>() Declaration public static ComponentType ChunkComponent<T>() Returns Type Description ComponentType Type Parameters Name Description T"
  },
  "api/Unity.Entities.ComponentType.ChunkComponentExclude.html": {
    "href": "api/Unity.Entities.ComponentType.ChunkComponentExclude.html",
    "title": "Method ChunkComponentExclude | Entities | 0.17.0-preview.18",
    "keywords": "Method ChunkComponentExclude ChunkComponentExclude<T>() Declaration public static ComponentType ChunkComponentExclude<T>() Returns Type Description ComponentType Type Parameters Name Description T ChunkComponentExclude(Type) Declaration public static ComponentType ChunkComponentExclude(Type type) Parameters Type Name Description Type type Returns Type Description ComponentType"
  },
  "api/Unity.Entities.ComponentType.ChunkComponentReadOnly.html": {
    "href": "api/Unity.Entities.ComponentType.ChunkComponentReadOnly.html",
    "title": "Method ChunkComponentReadOnly | Entities | 0.17.0-preview.18",
    "keywords": "Method ChunkComponentReadOnly ChunkComponentReadOnly<T>() Declaration public static ComponentType ChunkComponentReadOnly<T>() Returns Type Description ComponentType Type Parameters Name Description T ChunkComponentReadOnly(Type) Declaration public static ComponentType ChunkComponentReadOnly(Type type) Parameters Type Name Description Type type Returns Type Description ComponentType"
  },
  "api/Unity.Entities.ComponentType.-ctor.html": {
    "href": "api/Unity.Entities.ComponentType.-ctor.html",
    "title": "Constructor ComponentType | Entities | 0.17.0-preview.18",
    "keywords": "Constructor ComponentType ComponentType(Type, ComponentType.AccessMode) Declaration public ComponentType(Type type, ComponentType.AccessMode accessModeType = ComponentType.AccessMode.ReadWrite) Parameters Type Name Description Type type ComponentType.AccessMode accessModeType"
  },
  "api/Unity.Entities.ComponentType.Equals.html": {
    "href": "api/Unity.Entities.ComponentType.Equals.html",
    "title": "Method Equals | Entities | 0.17.0-preview.18",
    "keywords": "Method Equals Equals(ComponentType) Declaration public bool Equals(ComponentType other) Parameters Type Name Description ComponentType other Returns Type Description Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object)"
  },
  "api/Unity.Entities.ComponentType.Exclude.html": {
    "href": "api/Unity.Entities.ComponentType.Exclude.html",
    "title": "Method Exclude | Entities | 0.17.0-preview.18",
    "keywords": "Method Exclude Exclude(Type) Declaration public static ComponentType Exclude(Type type) Parameters Type Name Description Type type Returns Type Description ComponentType Exclude(Int32) Declaration public static ComponentType Exclude(int typeIndex) Parameters Type Name Description Int32 typeIndex Returns Type Description ComponentType Exclude<T>() Declaration public static ComponentType Exclude<T>() Returns Type Description ComponentType Type Parameters Name Description T"
  },
  "api/Unity.Entities.ComponentType.FromTypeIndex.html": {
    "href": "api/Unity.Entities.ComponentType.FromTypeIndex.html",
    "title": "Method FromTypeIndex | Entities | 0.17.0-preview.18",
    "keywords": "Method FromTypeIndex FromTypeIndex(Int32) Declaration public static ComponentType FromTypeIndex(int typeIndex) Parameters Type Name Description Int32 typeIndex Returns Type Description ComponentType"
  },
  "api/Unity.Entities.ComponentType.GetHashCode.html": {
    "href": "api/Unity.Entities.ComponentType.GetHashCode.html",
    "title": "Method GetHashCode | Entities | 0.17.0-preview.18",
    "keywords": "Method GetHashCode GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode()"
  },
  "api/Unity.Entities.ComponentType.GetManagedType.html": {
    "href": "api/Unity.Entities.ComponentType.GetManagedType.html",
    "title": "Method GetManagedType | Entities | 0.17.0-preview.18",
    "keywords": "Method GetManagedType GetManagedType() Declaration public Type GetManagedType() Returns Type Description Type"
  },
  "api/Unity.Entities.ComponentType.HasEntityReferences.html": {
    "href": "api/Unity.Entities.ComponentType.HasEntityReferences.html",
    "title": "Property HasEntityReferences | Entities | 0.17.0-preview.18",
    "keywords": "Property HasEntityReferences HasEntityReferences Declaration public bool HasEntityReferences { get; } Property Value Type Description Boolean"
  },
  "api/Unity.Entities.ComponentType.html": {
    "href": "api/Unity.Entities.ComponentType.html",
    "title": "Struct ComponentType | Entities | 0.17.0-preview.18",
    "keywords": "Struct ComponentType Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct ComponentType : IEquatable<ComponentType> Constructors Name Description ComponentType(Type, ComponentType.AccessMode) Fields Name Description AccessModeType TypeIndex Properties Name Description HasEntityReferences IsBuffer IsChunkComponent IsManagedComponent IsSharedComponent IsSystemStateComponent IsSystemStateSharedComponent IsZeroSized Methods Name Description ChunkComponent(Type) ChunkComponent<T>() ChunkComponentExclude(Type) ChunkComponentExclude<T>() ChunkComponentReadOnly(Type) ChunkComponentReadOnly<T>() Equals(Object) Equals(ComponentType) Exclude(Int32) Exclude(Type) Exclude<T>() FromTypeIndex(Int32) GetHashCode() GetManagedType() ReadOnly(Int32) ReadOnly(Type) ReadOnly<T>() ReadWrite(Int32) ReadWrite(Type) ReadWrite<T>() Operators Name Description Equality(ComponentType, ComponentType) GreaterThan(ComponentType, ComponentType) Implicit(Type to ComponentType) Inequality(ComponentType, ComponentType) LessThan(ComponentType, ComponentType)"
  },
  "api/Unity.Entities.ComponentType.IsBuffer.html": {
    "href": "api/Unity.Entities.ComponentType.IsBuffer.html",
    "title": "Property IsBuffer | Entities | 0.17.0-preview.18",
    "keywords": "Property IsBuffer IsBuffer Declaration public bool IsBuffer { get; } Property Value Type Description Boolean"
  },
  "api/Unity.Entities.ComponentType.IsChunkComponent.html": {
    "href": "api/Unity.Entities.ComponentType.IsChunkComponent.html",
    "title": "Property IsChunkComponent | Entities | 0.17.0-preview.18",
    "keywords": "Property IsChunkComponent IsChunkComponent Declaration public bool IsChunkComponent { get; } Property Value Type Description Boolean"
  },
  "api/Unity.Entities.ComponentType.IsManagedComponent.html": {
    "href": "api/Unity.Entities.ComponentType.IsManagedComponent.html",
    "title": "Property IsManagedComponent | Entities | 0.17.0-preview.18",
    "keywords": "Property IsManagedComponent IsManagedComponent Declaration public bool IsManagedComponent { get; } Property Value Type Description Boolean"
  },
  "api/Unity.Entities.ComponentType.IsSharedComponent.html": {
    "href": "api/Unity.Entities.ComponentType.IsSharedComponent.html",
    "title": "Property IsSharedComponent | Entities | 0.17.0-preview.18",
    "keywords": "Property IsSharedComponent IsSharedComponent Declaration public bool IsSharedComponent { get; } Property Value Type Description Boolean"
  },
  "api/Unity.Entities.ComponentType.IsSystemStateComponent.html": {
    "href": "api/Unity.Entities.ComponentType.IsSystemStateComponent.html",
    "title": "Property IsSystemStateComponent | Entities | 0.17.0-preview.18",
    "keywords": "Property IsSystemStateComponent IsSystemStateComponent Declaration public bool IsSystemStateComponent { get; } Property Value Type Description Boolean"
  },
  "api/Unity.Entities.ComponentType.IsSystemStateSharedComponent.html": {
    "href": "api/Unity.Entities.ComponentType.IsSystemStateSharedComponent.html",
    "title": "Property IsSystemStateSharedComponent | Entities | 0.17.0-preview.18",
    "keywords": "Property IsSystemStateSharedComponent IsSystemStateSharedComponent Declaration public bool IsSystemStateSharedComponent { get; } Property Value Type Description Boolean"
  },
  "api/Unity.Entities.ComponentType.IsZeroSized.html": {
    "href": "api/Unity.Entities.ComponentType.IsZeroSized.html",
    "title": "Property IsZeroSized | Entities | 0.17.0-preview.18",
    "keywords": "Property IsZeroSized IsZeroSized Declaration public bool IsZeroSized { get; } Property Value Type Description Boolean"
  },
  "api/Unity.Entities.ComponentType.op_Equality.html": {
    "href": "api/Unity.Entities.ComponentType.op_Equality.html",
    "title": "Operator Equality | Entities | 0.17.0-preview.18",
    "keywords": "Operator Equality Equality(ComponentType, ComponentType) Declaration public static bool operator ==(ComponentType lhs, ComponentType rhs) Parameters Type Name Description ComponentType lhs ComponentType rhs Returns Type Description Boolean"
  },
  "api/Unity.Entities.ComponentType.op_GreaterThan.html": {
    "href": "api/Unity.Entities.ComponentType.op_GreaterThan.html",
    "title": "Operator GreaterThan | Entities | 0.17.0-preview.18",
    "keywords": "Operator GreaterThan GreaterThan(ComponentType, ComponentType) Declaration public static bool operator>(ComponentType lhs, ComponentType rhs) Parameters Type Name Description ComponentType lhs ComponentType rhs Returns Type Description Boolean"
  },
  "api/Unity.Entities.ComponentType.op_Implicit.html": {
    "href": "api/Unity.Entities.ComponentType.op_Implicit.html",
    "title": "Operator Implicit | Entities | 0.17.0-preview.18",
    "keywords": "Operator Implicit Implicit(Type to ComponentType) Declaration public static implicit operator ComponentType(Type type) Parameters Type Name Description Type type Returns Type Description ComponentType"
  },
  "api/Unity.Entities.ComponentType.op_Inequality.html": {
    "href": "api/Unity.Entities.ComponentType.op_Inequality.html",
    "title": "Operator Inequality | Entities | 0.17.0-preview.18",
    "keywords": "Operator Inequality Inequality(ComponentType, ComponentType) Declaration public static bool operator !=(ComponentType lhs, ComponentType rhs) Parameters Type Name Description ComponentType lhs ComponentType rhs Returns Type Description Boolean"
  },
  "api/Unity.Entities.ComponentType.op_LessThan.html": {
    "href": "api/Unity.Entities.ComponentType.op_LessThan.html",
    "title": "Operator LessThan | Entities | 0.17.0-preview.18",
    "keywords": "Operator LessThan LessThan(ComponentType, ComponentType) Declaration public static bool operator <(ComponentType lhs, ComponentType rhs) Parameters Type Name Description ComponentType lhs ComponentType rhs Returns Type Description Boolean"
  },
  "api/Unity.Entities.ComponentType.ReadOnly.html": {
    "href": "api/Unity.Entities.ComponentType.ReadOnly.html",
    "title": "Method ReadOnly | Entities | 0.17.0-preview.18",
    "keywords": "Method ReadOnly ReadOnly(Type) Declaration public static ComponentType ReadOnly(Type type) Parameters Type Name Description Type type Returns Type Description ComponentType ReadOnly(Int32) Declaration public static ComponentType ReadOnly(int typeIndex) Parameters Type Name Description Int32 typeIndex Returns Type Description ComponentType ReadOnly<T>() Declaration public static ComponentType ReadOnly<T>() Returns Type Description ComponentType Type Parameters Name Description T"
  },
  "api/Unity.Entities.ComponentType.ReadWrite.html": {
    "href": "api/Unity.Entities.ComponentType.ReadWrite.html",
    "title": "Method ReadWrite | Entities | 0.17.0-preview.18",
    "keywords": "Method ReadWrite ReadWrite<T>() Declaration public static ComponentType ReadWrite<T>() Returns Type Description ComponentType Type Parameters Name Description T ReadWrite(Type) Declaration public static ComponentType ReadWrite(Type type) Parameters Type Name Description Type type Returns Type Description ComponentType ReadWrite(Int32) Declaration public static ComponentType ReadWrite(int typeIndex) Parameters Type Name Description Int32 typeIndex Returns Type Description ComponentType"
  },
  "api/Unity.Entities.ComponentType.TypeIndex.html": {
    "href": "api/Unity.Entities.ComponentType.TypeIndex.html",
    "title": "Field TypeIndex | Entities | 0.17.0-preview.18",
    "keywords": "Field TypeIndex Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public int TypeIndex Returns Type Description Int32"
  },
  "api/Unity.Entities.ComponentTypeFlags.html": {
    "href": "api/Unity.Entities.ComponentTypeFlags.html",
    "title": "Enum ComponentTypeFlags | Entities | 0.17.0-preview.18",
    "keywords": "Enum ComponentTypeFlags Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Flags] public enum ComponentTypeFlags Fields Name Description Value None 0 ChunkComponent 1 Extension Methods SourceGenHelpers.GetFlags()"
  },
  "api/Unity.Entities.ComponentTypeHandle-1.GlobalSystemVersion.html": {
    "href": "api/Unity.Entities.ComponentTypeHandle-1.GlobalSystemVersion.html",
    "title": "Property GlobalSystemVersion | Entities | 0.17.0-preview.18",
    "keywords": "Property GlobalSystemVersion GlobalSystemVersion Declaration public uint GlobalSystemVersion { get; } Property Value Type Description UInt32"
  },
  "api/Unity.Entities.ComponentTypeHandle-1.html": {
    "href": "api/Unity.Entities.ComponentTypeHandle-1.html",
    "title": "Struct ComponentTypeHandle<T> | Entities | 0.17.0-preview.18",
    "keywords": "Struct ComponentTypeHandle<T> Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [NativeContainer] [NativeContainerSupportsMinMaxWriteRestriction] public struct ComponentTypeHandle<T> Type Parameters Name Description T Properties Name Description GlobalSystemVersion IsReadOnly"
  },
  "api/Unity.Entities.ComponentTypeHandle-1.IsReadOnly.html": {
    "href": "api/Unity.Entities.ComponentTypeHandle-1.IsReadOnly.html",
    "title": "Property IsReadOnly | Entities | 0.17.0-preview.18",
    "keywords": "Property IsReadOnly IsReadOnly Declaration public bool IsReadOnly { get; } Property Value Type Description Boolean"
  },
  "api/Unity.Entities.ComponentTypeHash.Equals.html": {
    "href": "api/Unity.Entities.ComponentTypeHash.Equals.html",
    "title": "Method Equals | Entities | 0.17.0-preview.18",
    "keywords": "Method Equals Equals(ComponentTypeHash) Declaration public bool Equals(ComponentTypeHash other) Parameters Type Name Description ComponentTypeHash other Returns Type Description Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object)"
  },
  "api/Unity.Entities.ComponentTypeHash.Flags.html": {
    "href": "api/Unity.Entities.ComponentTypeHash.Flags.html",
    "title": "Field Flags | Entities | 0.17.0-preview.18",
    "keywords": "Field Flags Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public ComponentTypeFlags Flags Returns Type Description ComponentTypeFlags"
  },
  "api/Unity.Entities.ComponentTypeHash.GetHashCode.html": {
    "href": "api/Unity.Entities.ComponentTypeHash.GetHashCode.html",
    "title": "Method GetHashCode | Entities | 0.17.0-preview.18",
    "keywords": "Method GetHashCode GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode()"
  },
  "api/Unity.Entities.ComponentTypeHash.html": {
    "href": "api/Unity.Entities.ComponentTypeHash.html",
    "title": "Struct ComponentTypeHash | Entities | 0.17.0-preview.18",
    "keywords": "Struct ComponentTypeHash Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct ComponentTypeHash : IEquatable<ComponentTypeHash> Fields Name Description Flags StableTypeHash Methods Name Description Equals(Object) Equals(ComponentTypeHash) GetHashCode() Operators Name Description Equality(ComponentTypeHash, ComponentTypeHash) Inequality(ComponentTypeHash, ComponentTypeHash)"
  },
  "api/Unity.Entities.ComponentTypeHash.op_Equality.html": {
    "href": "api/Unity.Entities.ComponentTypeHash.op_Equality.html",
    "title": "Operator Equality | Entities | 0.17.0-preview.18",
    "keywords": "Operator Equality Equality(ComponentTypeHash, ComponentTypeHash) Declaration public static bool operator ==(ComponentTypeHash left, ComponentTypeHash right) Parameters Type Name Description ComponentTypeHash left ComponentTypeHash right Returns Type Description Boolean"
  },
  "api/Unity.Entities.ComponentTypeHash.op_Inequality.html": {
    "href": "api/Unity.Entities.ComponentTypeHash.op_Inequality.html",
    "title": "Operator Inequality | Entities | 0.17.0-preview.18",
    "keywords": "Operator Inequality Inequality(ComponentTypeHash, ComponentTypeHash) Declaration public static bool operator !=(ComponentTypeHash left, ComponentTypeHash right) Parameters Type Name Description ComponentTypeHash left ComponentTypeHash right Returns Type Description Boolean"
  },
  "api/Unity.Entities.ComponentTypeHash.StableTypeHash.html": {
    "href": "api/Unity.Entities.ComponentTypeHash.StableTypeHash.html",
    "title": "Field StableTypeHash | Entities | 0.17.0-preview.18",
    "keywords": "Field StableTypeHash Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public ulong StableTypeHash Returns Type Description UInt64"
  },
  "api/Unity.Entities.ComponentTypes.-ctor.html": {
    "href": "api/Unity.Entities.ComponentTypes.-ctor.html",
    "title": "Constructor ComponentTypes | Entities | 0.17.0-preview.18",
    "keywords": "Constructor ComponentTypes ComponentTypes(ComponentType) Declaration public ComponentTypes(ComponentType a) Parameters Type Name Description ComponentType a ComponentTypes(ComponentType, ComponentType) Declaration public ComponentTypes(ComponentType a, ComponentType b) Parameters Type Name Description ComponentType a ComponentType b ComponentTypes(ComponentType, ComponentType, ComponentType) Declaration public ComponentTypes(ComponentType a, ComponentType b, ComponentType c) Parameters Type Name Description ComponentType a ComponentType b ComponentType c ComponentTypes(ComponentType, ComponentType, ComponentType, ComponentType) Declaration public ComponentTypes(ComponentType a, ComponentType b, ComponentType c, ComponentType d) Parameters Type Name Description ComponentType a ComponentType b ComponentType c ComponentType d ComponentTypes(ComponentType, ComponentType, ComponentType, ComponentType, ComponentType) Declaration public ComponentTypes(ComponentType a, ComponentType b, ComponentType c, ComponentType d, ComponentType e) Parameters Type Name Description ComponentType a ComponentType b ComponentType c ComponentType d ComponentType e ComponentTypes(ComponentType[]) Declaration public ComponentTypes(ComponentType[] componentType) Parameters Type Name Description ComponentType [] componentType"
  },
  "api/Unity.Entities.ComponentTypes.GetComponentType.html": {
    "href": "api/Unity.Entities.ComponentTypes.GetComponentType.html",
    "title": "Method GetComponentType | Entities | 0.17.0-preview.18",
    "keywords": "Method GetComponentType GetComponentType(Int32) Returns a ComponentType for the type stored at the index in the list. The returned ComponentType always has access mode ReadWrite. Declaration public ComponentType GetComponentType(int index) Parameters Type Name Description Int32 index Returns Type Description ComponentType"
  },
  "api/Unity.Entities.ComponentTypes.GetTypeIndex.html": {
    "href": "api/Unity.Entities.ComponentTypes.GetTypeIndex.html",
    "title": "Method GetTypeIndex | Entities | 0.17.0-preview.18",
    "keywords": "Method GetTypeIndex GetTypeIndex(Int32) Declaration public int GetTypeIndex(int index) Parameters Type Name Description Int32 index Returns Type Description Int32"
  },
  "api/Unity.Entities.ComponentTypes.html": {
    "href": "api/Unity.Entities.ComponentTypes.html",
    "title": "Struct ComponentTypes | Entities | 0.17.0-preview.18",
    "keywords": "Struct ComponentTypes An immutable list of ComponentType values. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct ComponentTypes Remarks Max numbers of types is 15 (the capacity of FixedListInt64). Values in the list are sorted by their internal type index. Only the types themselves are stored, not any access modes. Cannot contain multiple ComponentType values with the same type index (safety checks in the constructors will throw an exception). Constructors Name Description ComponentTypes(ComponentType) ComponentTypes(ComponentType, ComponentType) ComponentTypes(ComponentType, ComponentType, ComponentType) ComponentTypes(ComponentType, ComponentType, ComponentType, ComponentType) ComponentTypes(ComponentType, ComponentType, ComponentType, ComponentType, ComponentType) ComponentTypes(ComponentType[]) Fields Name Description m_masks Properties Name Description Length Methods Name Description GetComponentType(Int32) Returns a ComponentType for the type stored at the index in the list. The returned ComponentType always has access mode ReadWrite. GetTypeIndex(Int32)"
  },
  "api/Unity.Entities.ComponentTypes.Length.html": {
    "href": "api/Unity.Entities.ComponentTypes.Length.html",
    "title": "Property Length | Entities | 0.17.0-preview.18",
    "keywords": "Property Length Length Declaration public int Length { get; } Property Value Type Description Int32"
  },
  "api/Unity.Entities.ComponentTypes.m_masks.html": {
    "href": "api/Unity.Entities.ComponentTypes.m_masks.html",
    "title": "Field m_masks | Entities | 0.17.0-preview.18",
    "keywords": "Field m_masks Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public ComponentTypes.Masks m_masks Returns Type Description ComponentTypes.Masks"
  },
  "api/Unity.Entities.ComponentTypes.Masks.Buffers.html": {
    "href": "api/Unity.Entities.ComponentTypes.Masks.Buffers.html",
    "title": "Property Buffers | Entities | 0.17.0-preview.18",
    "keywords": "Property Buffers Buffers Declaration public int Buffers { get; } Property Value Type Description Int32"
  },
  "api/Unity.Entities.ComponentTypes.Masks.html": {
    "href": "api/Unity.Entities.ComponentTypes.Masks.html",
    "title": "Struct ComponentTypes.Masks | Entities | 0.17.0-preview.18",
    "keywords": "Struct ComponentTypes.Masks Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct Masks Fields Name Description m_BufferMask m_SharedComponentMask m_SystemStateComponentMask m_ZeroSizedMask Properties Name Description Buffers SharedComponents SystemStateComponents ZeroSizeds Methods Name Description IsSharedComponent(Int32) IsZeroSized(Int32)"
  },
  "api/Unity.Entities.ComponentTypes.Masks.IsSharedComponent.html": {
    "href": "api/Unity.Entities.ComponentTypes.Masks.IsSharedComponent.html",
    "title": "Method IsSharedComponent | Entities | 0.17.0-preview.18",
    "keywords": "Method IsSharedComponent IsSharedComponent(Int32) Declaration public bool IsSharedComponent(int index) Parameters Type Name Description Int32 index Returns Type Description Boolean"
  },
  "api/Unity.Entities.ComponentTypes.Masks.IsZeroSized.html": {
    "href": "api/Unity.Entities.ComponentTypes.Masks.IsZeroSized.html",
    "title": "Method IsZeroSized | Entities | 0.17.0-preview.18",
    "keywords": "Method IsZeroSized IsZeroSized(Int32) Declaration public bool IsZeroSized(int index) Parameters Type Name Description Int32 index Returns Type Description Boolean"
  },
  "api/Unity.Entities.ComponentTypes.Masks.m_BufferMask.html": {
    "href": "api/Unity.Entities.ComponentTypes.Masks.m_BufferMask.html",
    "title": "Field m_BufferMask | Entities | 0.17.0-preview.18",
    "keywords": "Field m_BufferMask Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public ushort m_BufferMask Returns Type Description UInt16"
  },
  "api/Unity.Entities.ComponentTypes.Masks.m_SharedComponentMask.html": {
    "href": "api/Unity.Entities.ComponentTypes.Masks.m_SharedComponentMask.html",
    "title": "Field m_SharedComponentMask | Entities | 0.17.0-preview.18",
    "keywords": "Field m_SharedComponentMask Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public ushort m_SharedComponentMask Returns Type Description UInt16"
  },
  "api/Unity.Entities.ComponentTypes.Masks.m_SystemStateComponentMask.html": {
    "href": "api/Unity.Entities.ComponentTypes.Masks.m_SystemStateComponentMask.html",
    "title": "Field m_SystemStateComponentMask | Entities | 0.17.0-preview.18",
    "keywords": "Field m_SystemStateComponentMask Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public ushort m_SystemStateComponentMask Returns Type Description UInt16"
  },
  "api/Unity.Entities.ComponentTypes.Masks.m_ZeroSizedMask.html": {
    "href": "api/Unity.Entities.ComponentTypes.Masks.m_ZeroSizedMask.html",
    "title": "Field m_ZeroSizedMask | Entities | 0.17.0-preview.18",
    "keywords": "Field m_ZeroSizedMask Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public ushort m_ZeroSizedMask Returns Type Description UInt16"
  },
  "api/Unity.Entities.ComponentTypes.Masks.SharedComponents.html": {
    "href": "api/Unity.Entities.ComponentTypes.Masks.SharedComponents.html",
    "title": "Property SharedComponents | Entities | 0.17.0-preview.18",
    "keywords": "Property SharedComponents SharedComponents Declaration public int SharedComponents { get; } Property Value Type Description Int32"
  },
  "api/Unity.Entities.ComponentTypes.Masks.SystemStateComponents.html": {
    "href": "api/Unity.Entities.ComponentTypes.Masks.SystemStateComponents.html",
    "title": "Property SystemStateComponents | Entities | 0.17.0-preview.18",
    "keywords": "Property SystemStateComponents SystemStateComponents Declaration public int SystemStateComponents { get; } Property Value Type Description Int32"
  },
  "api/Unity.Entities.ComponentTypes.Masks.ZeroSizeds.html": {
    "href": "api/Unity.Entities.ComponentTypes.Masks.ZeroSizeds.html",
    "title": "Property ZeroSizeds | Entities | 0.17.0-preview.18",
    "keywords": "Property ZeroSizeds ZeroSizeds Declaration public int ZeroSizeds { get; } Property Value Type Description Int32"
  },
  "api/Unity.Entities.Conversion.html": {
    "href": "api/Unity.Entities.Conversion.html",
    "title": "Namespace Unity.Entities.Conversion | Entities | 0.17.0-preview.18",
    "keywords": "Namespace Unity.Entities.Conversion Structs MultiListEnumerator<T>"
  },
  "api/Unity.Entities.Conversion.MultiListEnumerator-1.Any.html": {
    "href": "api/Unity.Entities.Conversion.MultiListEnumerator-1.Any.html",
    "title": "Property Any | Entities | 0.17.0-preview.18",
    "keywords": "Property Any Any Declaration public bool Any { get; } Property Value Type Description Boolean"
  },
  "api/Unity.Entities.Conversion.MultiListEnumerator-1.Count.html": {
    "href": "api/Unity.Entities.Conversion.MultiListEnumerator-1.Count.html",
    "title": "Method Count | Entities | 0.17.0-preview.18",
    "keywords": "Method Count Count() Declaration public int Count() Returns Type Description Int32"
  },
  "api/Unity.Entities.Conversion.MultiListEnumerator-1.Current.html": {
    "href": "api/Unity.Entities.Conversion.MultiListEnumerator-1.Current.html",
    "title": "Property Current | Entities | 0.17.0-preview.18",
    "keywords": "Property Current Current Declaration public T Current { get; } Property Value Type Description T"
  },
  "api/Unity.Entities.Conversion.MultiListEnumerator-1.Dispose.html": {
    "href": "api/Unity.Entities.Conversion.MultiListEnumerator-1.Dispose.html",
    "title": "Method Dispose | Entities | 0.17.0-preview.18",
    "keywords": "Method Dispose Dispose() Declaration public void Dispose()"
  },
  "api/Unity.Entities.Conversion.MultiListEnumerator-1.Empty.html": {
    "href": "api/Unity.Entities.Conversion.MultiListEnumerator-1.Empty.html",
    "title": "Property Empty | Entities | 0.17.0-preview.18",
    "keywords": "Property Empty Empty Declaration public static MultiListEnumerator<T> Empty { get; } Property Value Type Description MultiListEnumerator <T>"
  },
  "api/Unity.Entities.Conversion.MultiListEnumerator-1.html": {
    "href": "api/Unity.Entities.Conversion.MultiListEnumerator-1.html",
    "title": "Struct MultiListEnumerator<T> | Entities | 0.17.0-preview.18",
    "keywords": "Struct MultiListEnumerator<T> Namespace : Unity.Entities.Conversion <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct MultiListEnumerator<T> : IEnumerable<T>, IEnumerable, IEnumerator<T>, IEnumerator, IDisposable where T : struct Type Parameters Name Description T Properties Name Description Any Current Empty IsEmpty IsValid Methods Name Description Count() Dispose() MoveNext() Reset()"
  },
  "api/Unity.Entities.Conversion.MultiListEnumerator-1.IsEmpty.html": {
    "href": "api/Unity.Entities.Conversion.MultiListEnumerator-1.IsEmpty.html",
    "title": "Property IsEmpty | Entities | 0.17.0-preview.18",
    "keywords": "Property IsEmpty IsEmpty Declaration public bool IsEmpty { get; } Property Value Type Description Boolean"
  },
  "api/Unity.Entities.Conversion.MultiListEnumerator-1.IsValid.html": {
    "href": "api/Unity.Entities.Conversion.MultiListEnumerator-1.IsValid.html",
    "title": "Property IsValid | Entities | 0.17.0-preview.18",
    "keywords": "Property IsValid IsValid Declaration public bool IsValid { get; } Property Value Type Description Boolean"
  },
  "api/Unity.Entities.Conversion.MultiListEnumerator-1.MoveNext.html": {
    "href": "api/Unity.Entities.Conversion.MultiListEnumerator-1.MoveNext.html",
    "title": "Method MoveNext | Entities | 0.17.0-preview.18",
    "keywords": "Method MoveNext MoveNext() Declaration public bool MoveNext() Returns Type Description Boolean"
  },
  "api/Unity.Entities.Conversion.MultiListEnumerator-1.Reset.html": {
    "href": "api/Unity.Entities.Conversion.MultiListEnumerator-1.Reset.html",
    "title": "Method Reset | Entities | 0.17.0-preview.18",
    "keywords": "Method Reset Reset() Declaration public void Reset()"
  },
  "api/Unity.Entities.ConverterVersionAttribute.-ctor.html": {
    "href": "api/Unity.Entities.ConverterVersionAttribute.-ctor.html",
    "title": "Constructor ConverterVersionAttribute | Entities | 0.17.0-preview.18",
    "keywords": "Constructor ConverterVersionAttribute ConverterVersionAttribute(String, Int32) Declaration public ConverterVersionAttribute(string userName, int version) Parameters Type Name Description String userName Int32 version"
  },
  "api/Unity.Entities.ConverterVersionAttribute.html": {
    "href": "api/Unity.Entities.ConverterVersionAttribute.html",
    "title": "Class ConverterVersionAttribute | Entities | 0.17.0-preview.18",
    "keywords": "Class ConverterVersionAttribute By declaring a version number a ComponentSystem can ensure that any cached data by the asset pipeline was prepared using the active code. If the version number of any conversion system or optimization system changes or a new conversion system is added, then the scene will be re-converted. Inheritance Object Attribute ConverterVersionAttribute Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [AttributeUsage(AttributeTargets.Class)] public class ConverterVersionAttribute : Attribute, _Attribute Constructors Name Description ConverterVersionAttribute(String, Int32) Fields Name Description UserName An identifier for the user that made the last change. Use this to enforce a merge conflict when two different users both try to bump the version at the same time. Version The version number of the converter. Increase this to invalidate the cached versions of entity scenes that use the converter that is tagged with this attribute."
  },
  "api/Unity.Entities.ConverterVersionAttribute.UserName.html": {
    "href": "api/Unity.Entities.ConverterVersionAttribute.UserName.html",
    "title": "Field UserName | Entities | 0.17.0-preview.18",
    "keywords": "Field UserName An identifier for the user that made the last change. Use this to enforce a merge conflict when two different users both try to bump the version at the same time. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public string UserName Returns Type Description String"
  },
  "api/Unity.Entities.ConverterVersionAttribute.Version.html": {
    "href": "api/Unity.Entities.ConverterVersionAttribute.Version.html",
    "title": "Field Version | Entities | 0.17.0-preview.18",
    "keywords": "Field Version The version number of the converter. Increase this to invalidate the cached versions of entity scenes that use the converter that is tagged with this attribute. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public int Version Returns Type Description Int32"
  },
  "api/Unity.Entities.ConvertToEntity.ConversionMode.html": {
    "href": "api/Unity.Entities.ConvertToEntity.ConversionMode.html",
    "title": "Field ConversionMode | Entities | 0.17.0-preview.18",
    "keywords": "Field ConversionMode Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public ConvertToEntity.Mode ConversionMode Returns Type Description ConvertToEntity.Mode"
  },
  "api/Unity.Entities.ConvertToEntity.html": {
    "href": "api/Unity.Entities.ConvertToEntity.html",
    "title": "Class ConvertToEntity | Entities | 0.17.0-preview.18",
    "keywords": "Class ConvertToEntity Inheritance Object Object Component Behaviour MonoBehaviour ConvertToEntity Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(String, Single) MonoBehaviour.InvokeRepeating(String, Single, Single) MonoBehaviour.CancelInvoke(String) MonoBehaviour.IsInvoking(String) MonoBehaviour.StartCoroutine(String) MonoBehaviour.StartCoroutine(String, Object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(String) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(Object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, Component) Component.TryGetComponent<T>(T) Component.GetComponent(String) Component.GetComponentInChildren(Type, Boolean) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(Boolean) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, Boolean) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(Boolean) Component.GetComponentsInChildren<T>(Boolean, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, Boolean) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(Boolean) Component.GetComponentsInParent<T>(Boolean, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(String) Component.SendMessageUpwards(String, Object, SendMessageOptions) Component.SendMessageUpwards(String, Object) Component.SendMessageUpwards(String) Component.SendMessageUpwards(String, SendMessageOptions) Component.SendMessage(String, Object) Component.SendMessage(String) Component.SendMessage(String, Object, SendMessageOptions) Component.SendMessage(String, SendMessageOptions) Component.BroadcastMessage(String, Object, SendMessageOptions) Component.BroadcastMessage(String, Object) Component.BroadcastMessage(String) Component.BroadcastMessage(String, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) Object.Destroy(Object) Object.DestroyImmediate(Object, Boolean) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, Boolean) Object.DontDestroyOnLoad(Object) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectOfType(Type) Object.FindObjectOfType(Type, Boolean) Object.ToString() Object.name Object.hideFlags Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [DisallowMultipleComponent] [AddComponentMenu(\"DOTS/Convert To Entity\")] public class ConvertToEntity : MonoBehaviour Fields Name Description ConversionMode"
  },
  "api/Unity.Entities.ConvertToEntity.Mode.html": {
    "href": "api/Unity.Entities.ConvertToEntity.Mode.html",
    "title": "Enum ConvertToEntity.Mode | Entities | 0.17.0-preview.18",
    "keywords": "Enum ConvertToEntity.Mode Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public enum Mode Fields Name Description Value ConvertAndDestroy 0 ConvertAndInjectGameObject 1 Extension Methods SourceGenHelpers.GetFlags()"
  },
  "api/Unity.Entities.ConvertToEntitySystem.AddToBeConverted.html": {
    "href": "api/Unity.Entities.ConvertToEntitySystem.AddToBeConverted.html",
    "title": "Method AddToBeConverted | Entities | 0.17.0-preview.18",
    "keywords": "Method AddToBeConverted AddToBeConverted(World, ConvertToEntity) Declaration public void AddToBeConverted(World world, ConvertToEntity convertToEntity) Parameters Type Name Description World world ConvertToEntity convertToEntity"
  },
  "api/Unity.Entities.ConvertToEntitySystem.BlobAssetStore.html": {
    "href": "api/Unity.Entities.ConvertToEntitySystem.BlobAssetStore.html",
    "title": "Property BlobAssetStore | Entities | 0.17.0-preview.18",
    "keywords": "Property BlobAssetStore BlobAssetStore Declaration public BlobAssetStore BlobAssetStore { get; } Property Value Type Description BlobAssetStore"
  },
  "api/Unity.Entities.ConvertToEntitySystem.html": {
    "href": "api/Unity.Entities.ConvertToEntitySystem.html",
    "title": "Class ConvertToEntitySystem | Entities | 0.17.0-preview.18",
    "keywords": "Class ConvertToEntitySystem Inheritance Object ComponentSystemBase ComponentSystem ConvertToEntitySystem Inherited Members ComponentSystem.PostUpdateCommands ComponentSystem.InitEntityQueryCache(Int32) ComponentSystem.Entities ComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.ExecutingSystemType ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetComponentTypeHandle<T>(Boolean) ComponentSystemBase.GetDynamicComponentTypeHandle(ComponentType) ComponentSystemBase.GetBufferTypeHandle<T>(Boolean) ComponentSystemBase.GetSharedComponentTypeHandle<T>() ComponentSystemBase.GetEntityTypeHandle() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.TryGetSingleton<T>(T) ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.TryGetSingletonEntity<T>(Entity) ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [UpdateInGroup(typeof(InitializationSystemGroup))] public class ConvertToEntitySystem : ComponentSystem Properties Name Description BlobAssetStore Methods Name Description AddToBeConverted(World, ConvertToEntity) OnCreate() OnDestroy() OnUpdate() Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Entities.ConvertToEntitySystem.OnCreate.html": {
    "href": "api/Unity.Entities.ConvertToEntitySystem.OnCreate.html",
    "title": "Method OnCreate | Entities | 0.17.0-preview.18",
    "keywords": "Method OnCreate OnCreate() Declaration protected override void OnCreate() Overrides ComponentSystemBase.OnCreate()"
  },
  "api/Unity.Entities.ConvertToEntitySystem.OnDestroy.html": {
    "href": "api/Unity.Entities.ConvertToEntitySystem.OnDestroy.html",
    "title": "Method OnDestroy | Entities | 0.17.0-preview.18",
    "keywords": "Method OnDestroy OnDestroy() Declaration protected override void OnDestroy() Overrides ComponentSystemBase.OnDestroy()"
  },
  "api/Unity.Entities.ConvertToEntitySystem.OnUpdate.html": {
    "href": "api/Unity.Entities.ConvertToEntitySystem.OnUpdate.html",
    "title": "Method OnUpdate | Entities | 0.17.0-preview.18",
    "keywords": "Method OnUpdate OnUpdate() Declaration protected override void OnUpdate() Overrides ComponentSystem.OnUpdate()"
  },
  "api/Unity.Entities.DefaultWorldInitialization.AddSystemsToRootLevelSystemGroups.html": {
    "href": "api/Unity.Entities.DefaultWorldInitialization.AddSystemsToRootLevelSystemGroups.html",
    "title": "Method AddSystemsToRootLevelSystemGroups | Entities | 0.17.0-preview.18",
    "keywords": "Method AddSystemsToRootLevelSystemGroups AddSystemsToRootLevelSystemGroups(World, IEnumerable<Type>) Adds the collection of systems to the world by injecting them into the root level system groups (InitializationSystemGroup, SimulationSystemGroup and PresentationSystemGroup) Declaration public static void AddSystemsToRootLevelSystemGroups(World world, IEnumerable<Type> systemTypes) Parameters Type Name Description World world IEnumerable < Type > systemTypes AddSystemsToRootLevelSystemGroups(World, Type[]) Adds the collection of systems to the world by injecting them into the root level system groups (InitializationSystemGroup, SimulationSystemGroup and PresentationSystemGroup) Declaration public static void AddSystemsToRootLevelSystemGroups(World world, params Type[] systemTypes) Parameters Type Name Description World world Type [] systemTypes AddSystemsToRootLevelSystemGroups(World, IReadOnlyList<Type>) Adds the collection of systems to the world by injecting them into the root level system groups (InitializationSystemGroup, SimulationSystemGroup and PresentationSystemGroup) Declaration public static void AddSystemsToRootLevelSystemGroups(World world, IReadOnlyList<Type> systemTypes) Parameters Type Name Description World world IReadOnlyList < Type > systemTypes"
  },
  "api/Unity.Entities.DefaultWorldInitialization.DefaultLazyEditModeInitialize.html": {
    "href": "api/Unity.Entities.DefaultWorldInitialization.DefaultLazyEditModeInitialize.html",
    "title": "Method DefaultLazyEditModeInitialize | Entities | 0.17.0-preview.18",
    "keywords": "Method DefaultLazyEditModeInitialize DefaultLazyEditModeInitialize() Can be called when in edit mode in the editor to initialize a the default world. Declaration public static void DefaultLazyEditModeInitialize()"
  },
  "api/Unity.Entities.DefaultWorldInitialization.GetAllSystems.html": {
    "href": "api/Unity.Entities.DefaultWorldInitialization.GetAllSystems.html",
    "title": "Method GetAllSystems | Entities | 0.17.0-preview.18",
    "keywords": "Method GetAllSystems GetAllSystems(WorldSystemFilterFlags, Boolean) Calculates a list of all systems filtered with WorldSystemFilterFlags, [DisableAutoCreation] etc. Declaration public static IReadOnlyList<Type> GetAllSystems(WorldSystemFilterFlags filterFlags, bool requireExecuteAlways = false) Parameters Type Name Description WorldSystemFilterFlags filterFlags Boolean requireExecuteAlways Optionally require that [ExecuteAlways] is present on the system. This is used when creating edit mode worlds. Returns Type Description IReadOnlyList < Type > The list of filtered systems"
  },
  "api/Unity.Entities.DefaultWorldInitialization.html": {
    "href": "api/Unity.Entities.DefaultWorldInitialization.html",
    "title": "Class DefaultWorldInitialization | Entities | 0.17.0-preview.18",
    "keywords": "Class DefaultWorldInitialization Inheritance Object DefaultWorldInitialization Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class DefaultWorldInitialization Methods Name Description AddSystemsToRootLevelSystemGroups(World, IReadOnlyList<Type>) Adds the collection of systems to the world by injecting them into the root level system groups (InitializationSystemGroup, SimulationSystemGroup and PresentationSystemGroup) AddSystemsToRootLevelSystemGroups(World, IEnumerable<Type>) Adds the collection of systems to the world by injecting them into the root level system groups (InitializationSystemGroup, SimulationSystemGroup and PresentationSystemGroup) AddSystemsToRootLevelSystemGroups(World, Type[]) Adds the collection of systems to the world by injecting them into the root level system groups (InitializationSystemGroup, SimulationSystemGroup and PresentationSystemGroup) DefaultLazyEditModeInitialize() Can be called when in edit mode in the editor to initialize a the default world. GetAllSystems(WorldSystemFilterFlags, Boolean) Calculates a list of all systems filtered with WorldSystemFilterFlags, [DisableAutoCreation] etc. Initialize(String, Boolean) Initializes the default world or runs ICustomBootstrap if one is available."
  },
  "api/Unity.Entities.DefaultWorldInitialization.Initialize.html": {
    "href": "api/Unity.Entities.DefaultWorldInitialization.Initialize.html",
    "title": "Method Initialize | Entities | 0.17.0-preview.18",
    "keywords": "Method Initialize Initialize(String, Boolean) Initializes the default world or runs ICustomBootstrap if one is available. Declaration public static World Initialize(string defaultWorldName, bool editorWorld = false) Parameters Type Name Description String defaultWorldName The name of the world that will be created. Unless there is a custom bootstrap. Boolean editorWorld Editor worlds by default only include systems with [ExecuteAlways]. If editorWorld is true, ICustomBootstrap will not be used. Returns Type Description World"
  },
  "api/Unity.Entities.DisableAutoCreationAttribute.html": {
    "href": "api/Unity.Entities.DisableAutoCreationAttribute.html",
    "title": "Class DisableAutoCreationAttribute | Entities | 0.17.0-preview.18",
    "keywords": "Class DisableAutoCreationAttribute Prevents a system from being automatically created and run. Inheritance Object Attribute DisableAutoCreationAttribute Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class)] public sealed class DisableAutoCreationAttribute : Attribute, _Attribute Remarks By default, all systems (classes derived from ComponentSystemBase ) are automatically discovered, instantiated, and added to the default World when that World is created. Add this attribute to a system class that you do not want created automatically. Note that the attribute is not inherited by any subclasses. using Unity.Entities; [DisableAutoCreation] public class CustomSystem : JobComponentSystem { // Implementation... } You can also apply this attribute to an entire assembly to prevent any system class in that assembly from being created automatically. This is useful for test assemblies containing many systems that expect to be tested in isolation. To declare an assembly attribute, place it in any C# file compiled into the assembly, outside the namespace declaration: using Unity.Entities; [assembly: DisableAutoCreation] namespace Tests{}"
  },
  "api/Unity.Entities.DisableAutoTypeRegistration.html": {
    "href": "api/Unity.Entities.DisableAutoTypeRegistration.html",
    "title": "Class DisableAutoTypeRegistration | Entities | 0.17.0-preview.18",
    "keywords": "Class DisableAutoTypeRegistration [DisableAutoTypeRegistration] prevents a Component Type from being registered in the TypeManager during TypeManager.Initialize(). Types that are not registered will not be recognized by EntityManager. Inheritance Object Attribute DisableAutoTypeRegistration Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class DisableAutoTypeRegistration : Attribute, _Attribute"
  },
  "api/Unity.Entities.Disabled.html": {
    "href": "api/Unity.Entities.Disabled.html",
    "title": "Struct Disabled | Entities | 0.17.0-preview.18",
    "keywords": "Struct Disabled Disables the entity. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct Disabled : IComponentData Remarks By default, an EntityQuery ignores all entities that have a Disabled component. You can override this default behavior by setting the IncludeDisabled flag of the EntityQueryDesc object used to create the query. When using the EntityQueryBuilder class in a ComponentSystem, set this flag by calling the With(EntityQueryOptions) function."
  },
  "api/Unity.Entities.DisallowRefReturnCrossingThisAttribute.html": {
    "href": "api/Unity.Entities.DisallowRefReturnCrossingThisAttribute.html",
    "title": "Class DisallowRefReturnCrossingThisAttribute | Entities | 0.17.0-preview.18",
    "keywords": "Class DisallowRefReturnCrossingThisAttribute What is this : Attribute signaling that ref returned values, of a type that has this attribute, cannot intersect with calls to methods that also have this attribute. Motivation(s): ref returns of values that are backed by native memory (unsafe), like IComponentData in ecs chunks, can have the referenced memory invalidated by certain methods. A way is needed to detect these situations a compilation time to prevent accessing invalidated references. Notes: This attribute is used/feeds a Static Analyzer at compilation time. Attribute transfers with aggragations: struct A has this attribute, struct B has a field of type A; both A and B are concidered to have the attribute. Inheritance Object Attribute DisallowRefReturnCrossingThisAttribute Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [AttributeUsage(AttributeTargets.Interface | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Struct)] public class DisallowRefReturnCrossingThisAttribute : Attribute, _Attribute"
  },
  "api/Unity.Entities.DynamicBuffer-1.Add.html": {
    "href": "api/Unity.Entities.DynamicBuffer-1.Add.html",
    "title": "Method Add | Entities | 0.17.0-preview.18",
    "keywords": "Method Add Add(T) Adds an element to the end of the buffer, resizing as necessary. Declaration public int Add(T elem) Parameters Type Name Description T elem The element to add to the buffer. Returns Type Description Int32 The new length of the buffer. Remarks The buffer is resized if it has no additional capacity. Examples buffer.Add(5);"
  },
  "api/Unity.Entities.DynamicBuffer-1.AddRange.html": {
    "href": "api/Unity.Entities.DynamicBuffer-1.AddRange.html",
    "title": "Method AddRange | Entities | 0.17.0-preview.18",
    "keywords": "Method AddRange AddRange(NativeArray<T>) Adds all the elements from newElems to the end of the buffer, resizing as necessary. Declaration public void AddRange(NativeArray<T> newElems) Parameters Type Name Description NativeArray <T> newElems The native array of elements to insert. Remarks The buffer is resized if it has no additional capacity. Examples int[] source = {1, 2, 3, 4, 5}; NativeArray<int> newElements = new NativeArray<int>(source, Allocator.Persistent); buffer.AddRange(newElements);"
  },
  "api/Unity.Entities.DynamicBuffer-1.AsNativeArray.html": {
    "href": "api/Unity.Entities.DynamicBuffer-1.AsNativeArray.html",
    "title": "Method AsNativeArray | Entities | 0.17.0-preview.18",
    "keywords": "Method AsNativeArray AsNativeArray() Return a native array that aliases the original buffer contents. Declaration public NativeArray<T> AsNativeArray() Returns Type Description NativeArray <T> Remarks You can only access the native array as long as the the buffer memory has not been reallocated. Several dynamic buffer operations, such as Add(T) and TrimExcess() can result in buffer reallocation. Examples int[] intArray = {1, 2, 3, 4, 5}; NativeArray<int>.Copy(intArray, buffer.AsNativeArray());"
  },
  "api/Unity.Entities.DynamicBuffer-1.Capacity.html": {
    "href": "api/Unity.Entities.DynamicBuffer-1.Capacity.html",
    "title": "Property Capacity | Entities | 0.17.0-preview.18",
    "keywords": "Property Capacity Capacity The number of elements the buffer can hold. Declaration public int Capacity { get; set; } Property Value Type Description Int32 Implements Unity.Collections.INativeList<T>.Capacity Remarks Capacity can not be set lower than Length - this will raise an exception. If Capacity grows greater than the internal capacity of the DynamicBuffer, memory external to the DynamicBuffer will be allocated. If Capacity shrinks to the internal capacity of the DynamicBuffer or smaller, memory external to the DynamicBuffer will be freed. No effort is made to avoid costly reallocations when Capacity changes slightly; if Capacity is incremented by 1, an array 1 element bigger is allocated."
  },
  "api/Unity.Entities.DynamicBuffer-1.Clear.html": {
    "href": "api/Unity.Entities.DynamicBuffer-1.Clear.html",
    "title": "Method Clear | Entities | 0.17.0-preview.18",
    "keywords": "Method Clear Clear() Sets the buffer length to zero. Declaration public void Clear() Implements Unity.Collections.INativeList<T>.Clear() Remarks The capacity of the buffer remains unchanged. Buffer memory is not overwritten. Examples buffer.Clear();"
  },
  "api/Unity.Entities.DynamicBuffer-1.CopyFrom.html": {
    "href": "api/Unity.Entities.DynamicBuffer-1.CopyFrom.html",
    "title": "Method CopyFrom | Entities | 0.17.0-preview.18",
    "keywords": "Method CopyFrom CopyFrom(NativeArray<T>) Copies all the elements from the specified native array into this dynamic buffer. Declaration public void CopyFrom(NativeArray<T> v) Parameters Type Name Description NativeArray <T> v The native array containing the elements to copy. Examples int[] sourceArray = {1, 2, 3, 4, 5}; NativeArray<int> nativeArray = new NativeArray<int>(source, Allocator.Persistent); buffer.CopyFrom(nativeArray); CopyFrom(NativeSlice<T>) Copies all the elements from the specified native slice into this dynamic buffer. Declaration public void CopyFrom(NativeSlice<T> v) Parameters Type Name Description NativeSlice <T> v The native slice containing the elements to copy. Examples NativeSlice<int> nativeSlice = new NativeSlice<int>(nativeArray, 1, 3); buffer.CopyFrom(nativeSlice); CopyFrom(DynamicBuffer<T>) Copies all the elements from another dynamic buffer. Declaration public void CopyFrom(DynamicBuffer<T> v) Parameters Type Name Description DynamicBuffer <T> v The dynamic buffer containing the elements to copy. Examples buffer.CopyFrom(secondBuffer); CopyFrom(T[]) Copies all the elements from an array. Declaration public void CopyFrom(T[] v) Parameters Type Name Description T[] v A C# array containing the elements to copy. Examples int[] integerArray = {1, 2, 3, 4, 5}; buffer.CopyFrom(integerArray); Exceptions Type Condition ArgumentNullException"
  },
  "api/Unity.Entities.DynamicBuffer-1.ElementAt.html": {
    "href": "api/Unity.Entities.DynamicBuffer-1.ElementAt.html",
    "title": "Method ElementAt | Entities | 0.17.0-preview.18",
    "keywords": "Method ElementAt ElementAt(Int32) Return a reference to the element at index. Declaration public T ElementAt(int index) Parameters Type Name Description Int32 index The zero-based index. Returns Type Description T Implements Unity.Collections.INativeList<T>.ElementAt(System.Int32)"
  },
  "api/Unity.Entities.DynamicBuffer-1.EnsureCapacity.html": {
    "href": "api/Unity.Entities.DynamicBuffer-1.EnsureCapacity.html",
    "title": "Method EnsureCapacity | Entities | 0.17.0-preview.18",
    "keywords": "Method EnsureCapacity EnsureCapacity(Int32) Ensures that the buffer has at least the specified capacity. Declaration public void EnsureCapacity(int length) Parameters Type Name Description Int32 length The buffer capacity is ensured to be at least this big. Remarks If length is greater than the current Capacity of this buffer and greater than the capacity reserved with InternalBufferCapacityAttribute , this function allocates a new memory block and copies the current buffer to it. The number of elements in the buffer remains unchanged. Examples buffer.EnsureCapacity(buffer.Capacity + 10);"
  },
  "api/Unity.Entities.DynamicBuffer-1.GetEnumerator.html": {
    "href": "api/Unity.Entities.DynamicBuffer-1.GetEnumerator.html",
    "title": "Method GetEnumerator | Entities | 0.17.0-preview.18",
    "keywords": "Method GetEnumerator GetEnumerator() Provides an enumerator for iterating over the buffer elements. Declaration public NativeArray<T>.Enumerator GetEnumerator() Returns Type Description Unity.Collections.NativeArray.Enumerator <> The enumerator. Examples foreach (var element in buffer) { //Use element... }"
  },
  "api/Unity.Entities.DynamicBuffer-1.GetUnsafePtr.html": {
    "href": "api/Unity.Entities.DynamicBuffer-1.GetUnsafePtr.html",
    "title": "Method GetUnsafePtr | Entities | 0.17.0-preview.18",
    "keywords": "Method GetUnsafePtr GetUnsafePtr() Gets an unsafe read/write pointer to the contents of the buffer. Declaration public void *GetUnsafePtr() Returns Type Description Void * A typed, unsafe pointer to the first element in the buffer. Remarks This function can only be called in unsafe code contexts."
  },
  "api/Unity.Entities.DynamicBuffer-1.GetUnsafeReadOnlyPtr.html": {
    "href": "api/Unity.Entities.DynamicBuffer-1.GetUnsafeReadOnlyPtr.html",
    "title": "Method GetUnsafeReadOnlyPtr | Entities | 0.17.0-preview.18",
    "keywords": "Method GetUnsafeReadOnlyPtr GetUnsafeReadOnlyPtr() Gets an unsafe read-only pointer to the contents of the buffer. Declaration public void *GetUnsafeReadOnlyPtr() Returns Type Description Void * A typed, unsafe pointer to the first element in the buffer. Remarks This function can only be called in unsafe code contexts."
  },
  "api/Unity.Entities.DynamicBuffer-1.html": {
    "href": "api/Unity.Entities.DynamicBuffer-1.html",
    "title": "Struct DynamicBuffer<T> | Entities | 0.17.0-preview.18",
    "keywords": "Struct DynamicBuffer<T> An array-like data structure that can be used as a component. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [NativeContainer] public struct DynamicBuffer<T> : IEnumerable<T>, IEnumerable, INativeList<T> where T : struct Type Parameters Name Description T The data type stored in the buffer. Must be a value type. Examples [InternalBufferCapacity(8)] public struct FloatBufferElement : IBufferElementData { // Actual value each buffer element will store. public float Value; // The following implicit conversions are optional, but can be convenient. public static implicit operator float(FloatBufferElement e) { return e.Value; } public static implicit operator FloatBufferElement(float e) { return new FloatBufferElement {Value = e}; } } public class DynamicBufferExample : ComponentSystem { protected override void OnUpdate() { float sum = 0; Entities.ForEach((DynamicBuffer<FloatBufferElement> buffer) => { for(int i = 0; i < buffer.Length; i++) { sum += buffer[i].Value; } }); Debug.Log(\"Sum of all buffers: \" + sum); } } Properties Name Description Capacity The number of elements the buffer can hold. IsCreated Whether the memory for this dynamic buffer has been allocated. IsEmpty Reports whether container is empty. Item[Int32] Array-like indexing operator. Length The number of elements the buffer holds. Methods Name Description Add(T) Adds an element to the end of the buffer, resizing as necessary. AddRange(NativeArray<T>) Adds all the elements from newElems to the end of the buffer, resizing as necessary. AsNativeArray() Return a native array that aliases the original buffer contents. Clear() Sets the buffer length to zero. CopyFrom(T[]) Copies all the elements from an array. CopyFrom(NativeArray<T>) Copies all the elements from the specified native array into this dynamic buffer. CopyFrom(NativeSlice<T>) Copies all the elements from the specified native slice into this dynamic buffer. CopyFrom(DynamicBuffer<T>) Copies all the elements from another dynamic buffer. ElementAt(Int32) Return a reference to the element at index. EnsureCapacity(Int32) Ensures that the buffer has at least the specified capacity. GetEnumerator() Provides an enumerator for iterating over the buffer elements. GetUnsafePtr() Gets an unsafe read/write pointer to the contents of the buffer. GetUnsafeReadOnlyPtr() Gets an unsafe read-only pointer to the contents of the buffer. Insert(Int32, T) Inserts an element at the specified index, resizing as necessary. Reinterpret<U>() Returns a dynamic buffer of a different type, pointing to the same buffer memory. RemoveAt(Int32) Removes the element at the specified index. RemoveAtSwapBack(Int32) Removes the element at the specified index and swaps the last element into its place. This is more efficient than moving all elements following the removed element, but does change the order of elements in the buffer. RemoveRange(Int32, Int32) Removes the specified number of elements, starting with the element at the specified index. RemoveRangeSwapBack(Int32, Int32) Removes the specified number of elements, starting with the element at the specified index. It replaces the elements that were removed with a range of elements from the back of the buffer. This is more efficient than moving all elements following the removed elements, but does change the order of elements in the buffer. ResizeUninitialized(Int32) Increases the buffer capacity and length. ToNativeArray(Allocator) Copies the buffer into a new native array. TrimExcess() Removes any excess capacity in the buffer."
  },
  "api/Unity.Entities.DynamicBuffer-1.Insert.html": {
    "href": "api/Unity.Entities.DynamicBuffer-1.Insert.html",
    "title": "Method Insert | Entities | 0.17.0-preview.18",
    "keywords": "Method Insert Insert(Int32, T) Inserts an element at the specified index, resizing as necessary. Declaration public void Insert(int index, T elem) Parameters Type Name Description Int32 index The position at which to insert the new element. T elem The element to add to the buffer. Remarks The buffer is resized if it has no additional capacity. Examples if (insertionIndex < buffer.Length) buffer.Insert(insertionIndex, 6);"
  },
  "api/Unity.Entities.DynamicBuffer-1.IsCreated.html": {
    "href": "api/Unity.Entities.DynamicBuffer-1.IsCreated.html",
    "title": "Property IsCreated | Entities | 0.17.0-preview.18",
    "keywords": "Property IsCreated IsCreated Whether the memory for this dynamic buffer has been allocated. Declaration public bool IsCreated { get; } Property Value Type Description Boolean"
  },
  "api/Unity.Entities.DynamicBuffer-1.IsEmpty.html": {
    "href": "api/Unity.Entities.DynamicBuffer-1.IsEmpty.html",
    "title": "Property IsEmpty | Entities | 0.17.0-preview.18",
    "keywords": "Property IsEmpty IsEmpty Reports whether container is empty. Declaration public bool IsEmpty { get; } Property Value Type Description Boolean True if this container empty. Implements Unity.Collections.INativeList<T>.IsEmpty"
  },
  "api/Unity.Entities.DynamicBuffer-1.Item.html": {
    "href": "api/Unity.Entities.DynamicBuffer-1.Item.html",
    "title": "Property Item | Entities | 0.17.0-preview.18",
    "keywords": "Property Item Item[Int32] Array-like indexing operator. Declaration public T this[int index] { get; set; } Parameters Type Name Description Int32 index The zero-based index. Property Value Type Description T Implements Unity.Collections.INativeList<T>.Item[System.Int32] Examples for (int i = 0; i < buffer.Length; i++) { buffer[i] = i * i; }"
  },
  "api/Unity.Entities.DynamicBuffer-1.Length.html": {
    "href": "api/Unity.Entities.DynamicBuffer-1.Length.html",
    "title": "Property Length | Entities | 0.17.0-preview.18",
    "keywords": "Property Length Length The number of elements the buffer holds. Declaration public int Length { get; set; } Property Value Type Description Int32 Implements Unity.Collections.INativeList<T>.Length Examples for (int i = 0; i < buffer.Length; i++) { buffer[i] = i * i; }"
  },
  "api/Unity.Entities.DynamicBuffer-1.Reinterpret.html": {
    "href": "api/Unity.Entities.DynamicBuffer-1.Reinterpret.html",
    "title": "Method Reinterpret | Entities | 0.17.0-preview.18",
    "keywords": "Method Reinterpret Reinterpret<U>() Returns a dynamic buffer of a different type, pointing to the same buffer memory. Declaration public DynamicBuffer<U> Reinterpret<U>() where U : struct Returns Type Description DynamicBuffer <U> A dynamic buffer of the reinterpreted type. Type Parameters Name Description U The reinterpreted type. Remarks No memory modification occurs. The reinterpreted type must be the same size in memory as the original type. Examples Entities.ForEach((DynamicBuffer<FloatBufferElement> buffer) => { DynamicBuffer<float> floatBuffer = buffer.Reinterpret<float>(); for (int i = 0; i < floatBuffer.Length; i++) { floatBuffer[i] = i * 1.2f; } }).ScheduleParallel(); Exceptions Type Condition InvalidOperationException If the reinterpreted type is a different size than the original."
  },
  "api/Unity.Entities.DynamicBuffer-1.RemoveAt.html": {
    "href": "api/Unity.Entities.DynamicBuffer-1.RemoveAt.html",
    "title": "Method RemoveAt | Entities | 0.17.0-preview.18",
    "keywords": "Method RemoveAt RemoveAt(Int32) Removes the element at the specified index. Declaration public void RemoveAt(int index) Parameters Type Name Description Int32 index The index of the element to remove. Examples if (insertionIndex < buffer.Length) buffer.RemoveAt(insertionIndex);"
  },
  "api/Unity.Entities.DynamicBuffer-1.RemoveAtSwapBack.html": {
    "href": "api/Unity.Entities.DynamicBuffer-1.RemoveAtSwapBack.html",
    "title": "Method RemoveAtSwapBack | Entities | 0.17.0-preview.18",
    "keywords": "Method RemoveAtSwapBack RemoveAtSwapBack(Int32) Removes the element at the specified index and swaps the last element into its place. This is more efficient than moving all elements following the removed element, but does change the order of elements in the buffer. Declaration public void RemoveAtSwapBack(int index) Parameters Type Name Description Int32 index The index of the element to remove."
  },
  "api/Unity.Entities.DynamicBuffer-1.RemoveRange.html": {
    "href": "api/Unity.Entities.DynamicBuffer-1.RemoveRange.html",
    "title": "Method RemoveRange | Entities | 0.17.0-preview.18",
    "keywords": "Method RemoveRange RemoveRange(Int32, Int32) Removes the specified number of elements, starting with the element at the specified index. Declaration public void RemoveRange(int index, int count) Parameters Type Name Description Int32 index The first element to remove. Int32 count How many elements tot remove. Remarks The buffer capacity remains unchanged. Examples buffer.RemoveRange(start, 5);"
  },
  "api/Unity.Entities.DynamicBuffer-1.RemoveRangeSwapBack.html": {
    "href": "api/Unity.Entities.DynamicBuffer-1.RemoveRangeSwapBack.html",
    "title": "Method RemoveRangeSwapBack | Entities | 0.17.0-preview.18",
    "keywords": "Method RemoveRangeSwapBack RemoveRangeSwapBack(Int32, Int32) Removes the specified number of elements, starting with the element at the specified index. It replaces the elements that were removed with a range of elements from the back of the buffer. This is more efficient than moving all elements following the removed elements, but does change the order of elements in the buffer. Declaration public void RemoveRangeSwapBack(int index, int count) Parameters Type Name Description Int32 index The first element to remove. Int32 count How many elements tot remove. Remarks The buffer capacity remains unchanged."
  },
  "api/Unity.Entities.DynamicBuffer-1.ResizeUninitialized.html": {
    "href": "api/Unity.Entities.DynamicBuffer-1.ResizeUninitialized.html",
    "title": "Method ResizeUninitialized | Entities | 0.17.0-preview.18",
    "keywords": "Method ResizeUninitialized ResizeUninitialized(Int32) Increases the buffer capacity and length. Declaration public void ResizeUninitialized(int length) Parameters Type Name Description Int32 length The new length of the buffer. Remarks If length is less than the current length of the buffer, the length of the buffer is reduced while the capacity remains unchanged. Examples buffer.ResizeUninitialized(buffer.Length + 10);"
  },
  "api/Unity.Entities.DynamicBuffer-1.ToNativeArray.html": {
    "href": "api/Unity.Entities.DynamicBuffer-1.ToNativeArray.html",
    "title": "Method ToNativeArray | Entities | 0.17.0-preview.18",
    "keywords": "Method ToNativeArray ToNativeArray(Allocator) Copies the buffer into a new native array. Declaration public NativeArray<T> ToNativeArray(Allocator allocator) Parameters Type Name Description Allocator allocator The type of memory allocation to use when creating the native array. Returns Type Description NativeArray <T> A native array containing copies of the buffer elements. Examples NativeArray<int> copy = buffer.ToNativeArray(Allocator.Persistent);"
  },
  "api/Unity.Entities.DynamicBuffer-1.TrimExcess.html": {
    "href": "api/Unity.Entities.DynamicBuffer-1.TrimExcess.html",
    "title": "Method TrimExcess | Entities | 0.17.0-preview.18",
    "keywords": "Method TrimExcess TrimExcess() Removes any excess capacity in the buffer. Declaration public void TrimExcess() Remarks Sets the buffer capacity to the current length. If the buffer memory size changes, the current contents of the buffer are copied to a new block of memory and the old memory is freed. If the buffer now fits in the space in the chunk reserved with InternalBufferCapacityAttribute , then the buffer contents are moved to the chunk. Examples if (buffer.Capacity > buffer.Length) buffer.TrimExcess();"
  },
  "api/Unity.Entities.DynamicComponentTypeHandle.GlobalSystemVersion.html": {
    "href": "api/Unity.Entities.DynamicComponentTypeHandle.GlobalSystemVersion.html",
    "title": "Property GlobalSystemVersion | Entities | 0.17.0-preview.18",
    "keywords": "Property GlobalSystemVersion GlobalSystemVersion Declaration public uint GlobalSystemVersion { get; } Property Value Type Description UInt32"
  },
  "api/Unity.Entities.DynamicComponentTypeHandle.html": {
    "href": "api/Unity.Entities.DynamicComponentTypeHandle.html",
    "title": "Struct DynamicComponentTypeHandle | Entities | 0.17.0-preview.18",
    "keywords": "Struct DynamicComponentTypeHandle Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [NativeContainer] [NativeContainerSupportsMinMaxWriteRestriction] public struct DynamicComponentTypeHandle Fields Name Description m_TypeLookupCache Properties Name Description GlobalSystemVersion IsReadOnly"
  },
  "api/Unity.Entities.DynamicComponentTypeHandle.IsReadOnly.html": {
    "href": "api/Unity.Entities.DynamicComponentTypeHandle.IsReadOnly.html",
    "title": "Property IsReadOnly | Entities | 0.17.0-preview.18",
    "keywords": "Property IsReadOnly IsReadOnly Declaration public bool IsReadOnly { get; } Property Value Type Description Boolean"
  },
  "api/Unity.Entities.DynamicComponentTypeHandle.m_TypeLookupCache.html": {
    "href": "api/Unity.Entities.DynamicComponentTypeHandle.m_TypeLookupCache.html",
    "title": "Field m_TypeLookupCache | Entities | 0.17.0-preview.18",
    "keywords": "Field m_TypeLookupCache Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public short m_TypeLookupCache Returns Type Description Int16"
  },
  "api/Unity.Entities.EarlyInitHelpers.AddEarlyInitFunction.html": {
    "href": "api/Unity.Entities.EarlyInitHelpers.AddEarlyInitFunction.html",
    "title": "Method AddEarlyInitFunction | Entities | 0.17.0-preview.18",
    "keywords": "Method AddEarlyInitFunction AddEarlyInitFunction(EarlyInitHelpers.EarlyInitFunction) Declaration public static void AddEarlyInitFunction(EarlyInitHelpers.EarlyInitFunction f) Parameters Type Name Description EarlyInitHelpers.EarlyInitFunction f"
  },
  "api/Unity.Entities.EarlyInitHelpers.EarlyInitFunction.html": {
    "href": "api/Unity.Entities.EarlyInitHelpers.EarlyInitFunction.html",
    "title": "Delegate EarlyInitHelpers.EarlyInitFunction | Entities | 0.17.0-preview.18",
    "keywords": "Delegate EarlyInitHelpers.EarlyInitFunction Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void EarlyInitFunction();"
  },
  "api/Unity.Entities.EarlyInitHelpers.FlushEarlyInits.html": {
    "href": "api/Unity.Entities.EarlyInitHelpers.FlushEarlyInits.html",
    "title": "Method FlushEarlyInits | Entities | 0.17.0-preview.18",
    "keywords": "Method FlushEarlyInits FlushEarlyInits() Declaration public static void FlushEarlyInits()"
  },
  "api/Unity.Entities.EarlyInitHelpers.html": {
    "href": "api/Unity.Entities.EarlyInitHelpers.html",
    "title": "Class EarlyInitHelpers | Entities | 0.17.0-preview.18",
    "keywords": "Class EarlyInitHelpers Used by automatically generated code. Do not use in projects. Inheritance Object EarlyInitHelpers Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class EarlyInitHelpers Methods Name Description AddEarlyInitFunction(EarlyInitHelpers.EarlyInitFunction) FlushEarlyInits() JobReflectionDataCreationFailed(Exception, Type)"
  },
  "api/Unity.Entities.EarlyInitHelpers.JobReflectionDataCreationFailed.html": {
    "href": "api/Unity.Entities.EarlyInitHelpers.JobReflectionDataCreationFailed.html",
    "title": "Method JobReflectionDataCreationFailed | Entities | 0.17.0-preview.18",
    "keywords": "Method JobReflectionDataCreationFailed JobReflectionDataCreationFailed(Exception, Type) Declaration public static void JobReflectionDataCreationFailed(Exception ex, Type jobType) Parameters Type Name Description Exception ex Type jobType"
  },
  "api/Unity.Entities.Editor.EntitySelectionProxy.Container.html": {
    "href": "api/Unity.Entities.Editor.EntitySelectionProxy.Container.html",
    "title": "Property Container | Entities | 0.17.0-preview.18",
    "keywords": "Property Container Container Declaration public EntityContainer Container { get; } Property Value Type Description EntityContainer"
  },
  "api/Unity.Entities.Editor.EntitySelectionProxy.Entity.html": {
    "href": "api/Unity.Entities.Editor.EntitySelectionProxy.Entity.html",
    "title": "Property Entity | Entities | 0.17.0-preview.18",
    "keywords": "Property Entity Entity Declaration public Entity Entity { get; } Property Value Type Description Entity"
  },
  "api/Unity.Entities.Editor.EntitySelectionProxy.EntityControlSelectButton.html": {
    "href": "api/Unity.Entities.Editor.EntitySelectionProxy.EntityControlSelectButton.html",
    "title": "Event EntityControlSelectButton | Entities | 0.17.0-preview.18",
    "keywords": "Event EntityControlSelectButton Namespace : Unity.Entities.Editor <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public event EntitySelectionProxy.EntityControlSelectButtonHandler EntityControlSelectButton Returns Type Description EntitySelectionProxy.EntityControlSelectButtonHandler"
  },
  "api/Unity.Entities.Editor.EntitySelectionProxy.EntityControlSelectButtonHandler.html": {
    "href": "api/Unity.Entities.Editor.EntitySelectionProxy.EntityControlSelectButtonHandler.html",
    "title": "Delegate EntitySelectionProxy.EntityControlSelectButtonHandler | Entities | 0.17.0-preview.18",
    "keywords": "Delegate EntitySelectionProxy.EntityControlSelectButtonHandler Namespace : Unity.Entities.Editor <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void EntityControlSelectButtonHandler(World world, Entity entity); Parameters Type Name Description World world Entity entity"
  },
  "api/Unity.Entities.Editor.EntitySelectionProxy.EntityManager.html": {
    "href": "api/Unity.Entities.Editor.EntitySelectionProxy.EntityManager.html",
    "title": "Property EntityManager | Entities | 0.17.0-preview.18",
    "keywords": "Property EntityManager EntityManager Declaration public EntityManager EntityManager { get; } Property Value Type Description EntityManager"
  },
  "api/Unity.Entities.Editor.EntitySelectionProxy.Exists.html": {
    "href": "api/Unity.Entities.Editor.EntitySelectionProxy.Exists.html",
    "title": "Property Exists | Entities | 0.17.0-preview.18",
    "keywords": "Property Exists Exists Declaration public bool Exists { get; } Property Value Type Description Boolean"
  },
  "api/Unity.Entities.Editor.EntitySelectionProxy.html": {
    "href": "api/Unity.Entities.Editor.EntitySelectionProxy.html",
    "title": "Class EntitySelectionProxy | Entities | 0.17.0-preview.18",
    "keywords": "Class EntitySelectionProxy Inheritance Object Object ScriptableObject EntitySelectionProxy Inherited Members ScriptableObject.CreateInstance(String) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) Object.Destroy(Object) Object.DestroyImmediate(Object, Boolean) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, Boolean) Object.DontDestroyOnLoad(Object) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectOfType(Type) Object.FindObjectOfType(Type, Boolean) Object.ToString() Object.name Object.hideFlags Namespace : Unity.Entities.Editor <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class EntitySelectionProxy : ScriptableObject Properties Name Description Container Entity EntityManager Exists World Methods Name Description OnEntityControlSelectButton(World, Entity) SetEntity(World, Entity) Events Name Description EntityControlSelectButton"
  },
  "api/Unity.Entities.Editor.EntitySelectionProxy.OnEntityControlSelectButton.html": {
    "href": "api/Unity.Entities.Editor.EntitySelectionProxy.OnEntityControlSelectButton.html",
    "title": "Method OnEntityControlSelectButton | Entities | 0.17.0-preview.18",
    "keywords": "Method OnEntityControlSelectButton OnEntityControlSelectButton(World, Entity) Declaration public void OnEntityControlSelectButton(World world, Entity entity) Parameters Type Name Description World world Entity entity"
  },
  "api/Unity.Entities.Editor.EntitySelectionProxy.SetEntity.html": {
    "href": "api/Unity.Entities.Editor.EntitySelectionProxy.SetEntity.html",
    "title": "Method SetEntity | Entities | 0.17.0-preview.18",
    "keywords": "Method SetEntity SetEntity(World, Entity) Declaration public void SetEntity(World world, Entity entity) Parameters Type Name Description World world Entity entity"
  },
  "api/Unity.Entities.Editor.EntitySelectionProxy.World.html": {
    "href": "api/Unity.Entities.Editor.EntitySelectionProxy.World.html",
    "title": "Property World | Entities | 0.17.0-preview.18",
    "keywords": "Property World World Declaration public World World { get; } Property Value Type Description World"
  },
  "api/Unity.Entities.Editor.ExtraTypesProvider.html": {
    "href": "api/Unity.Entities.Editor.ExtraTypesProvider.html",
    "title": "Class ExtraTypesProvider | Entities | 0.17.0-preview.18",
    "keywords": "Class ExtraTypesProvider Inheritance Object ExtraTypesProvider Namespace : Unity.Entities.Editor <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [InitializeOnLoad] public sealed class ExtraTypesProvider"
  },
  "api/Unity.Entities.Editor.GameObjectEntityEditor.html": {
    "href": "api/Unity.Entities.Editor.GameObjectEntityEditor.html",
    "title": "Class GameObjectEntityEditor | Entities | 0.17.0-preview.18",
    "keywords": "Class GameObjectEntityEditor Inheritance Object Object ScriptableObject Editor GameObjectEntityEditor Inherited Members Editor.CreateEditorWithContext(Object[], Object, Type) Editor.CreateEditorWithContext(Object[], Object) Editor.CreateCachedEditorWithContext(Object, Object, Type, Editor) Editor.CreateCachedEditorWithContext(Object[], Object, Type, Editor) Editor.CreateCachedEditor(Object, Type, Editor) Editor.CreateCachedEditor(Object[], Type, Editor) Editor.CreateEditor(Object) Editor.CreateEditor(Object, Type) Editor.CreateEditor(Object[]) Editor.CreateEditor(Object[], Type) Editor.DrawPropertiesExcluding(SerializedObject, String[]) Editor.DrawDefaultInspector() Editor.Repaint() Editor.CreateInspectorGUI() Editor.RequiresConstantRepaint() Editor.DrawHeader() Editor.OnHeaderGUI() Editor.ShouldHideOpenButton() Editor.DrawFoldoutInspector(Object, Editor) Editor.HasPreviewGUI() Editor.GetPreviewTitle() Editor.RenderStaticPreview(String, Object[], Int32, Int32) Editor.OnPreviewGUI(Rect, GUIStyle) Editor.OnInteractivePreviewGUI(Rect, GUIStyle) Editor.OnPreviewSettings() Editor.GetInfoString() Editor.DrawPreview(Rect) Editor.ReloadPreviewInstances() Editor.UseDefaultMargins() Editor.Initialize(Object[]) Editor.MoveNextTarget() Editor.ResetTarget() Editor.target Editor.targets Editor.serializedObject Editor.finishedDefaultHeaderGUI ScriptableObject.CreateInstance(String) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) Object.Destroy(Object) Object.DestroyImmediate(Object, Boolean) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, Boolean) Object.DontDestroyOnLoad(Object) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectOfType(Type) Object.FindObjectOfType(Type, Boolean) Object.ToString() Object.name Object.hideFlags Namespace : Unity.Entities.Editor <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [CustomEditor(typeof(GameObjectEntity))] public class GameObjectEntityEditor : Editor, IPreviewable, IToolModeOwner Methods Name Description OnInspectorGUI()"
  },
  "api/Unity.Entities.Editor.GameObjectEntityEditor.OnInspectorGUI.html": {
    "href": "api/Unity.Entities.Editor.GameObjectEntityEditor.OnInspectorGUI.html",
    "title": "Method OnInspectorGUI | Entities | 0.17.0-preview.18",
    "keywords": "Method OnInspectorGUI OnInspectorGUI() Declaration public override void OnInspectorGUI() Overrides Editor.OnInspectorGUI()"
  },
  "api/Unity.Entities.Editor.html": {
    "href": "api/Unity.Entities.Editor.html",
    "title": "Namespace Unity.Entities.Editor | Entities | 0.17.0-preview.18",
    "keywords": "Namespace Unity.Entities.Editor Classes EntitySelectionProxy ExtraTypesProvider GameObjectEntityEditor StartLiveLinkWindow Delegates EntitySelectionProxy.EntityControlSelectButtonHandler"
  },
  "api/Unity.Entities.Editor.StartLiveLinkWindow.html": {
    "href": "api/Unity.Entities.Editor.StartLiveLinkWindow.html",
    "title": "Class StartLiveLinkWindow | Entities | 0.17.0-preview.18",
    "keywords": "Class StartLiveLinkWindow Inheritance Object Object ScriptableObject EditorWindow StartLiveLinkWindow Inherited Members EditorWindow.BeginWindows() EditorWindow.EndWindows() EditorWindow.ShowNotification(GUIContent) EditorWindow.ShowNotification(GUIContent, Double) EditorWindow.RemoveNotification() UnityEditor.EditorWindow.ShowTab() EditorWindow.Focus() EditorWindow.ShowUtility() EditorWindow.ShowPopup() EditorWindow.ShowModalUtility() EditorWindow.ShowAsDropDown(Rect, Vector2) EditorWindow.Show() EditorWindow.Show(Boolean) EditorWindow.ShowAuxWindow() EditorWindow.ShowModal() EditorWindow.GetWindow(Type, Boolean, String, Boolean) EditorWindow.GetWindow(Type, Boolean, String) EditorWindow.GetWindow(Type, Boolean) EditorWindow.GetWindow(Type) EditorWindow.GetWindowWithRect(Type, Rect, Boolean, String) EditorWindow.GetWindowWithRect(Type, Rect, Boolean) EditorWindow.GetWindowWithRect(Type, Rect) UnityEditor.EditorWindow.GetWindow<T>() UnityEditor.EditorWindow.GetWindow<T>(System.Boolean) UnityEditor.EditorWindow.GetWindow<T>(System.Boolean, System.String) UnityEditor.EditorWindow.GetWindow<T>(System.String) UnityEditor.EditorWindow.GetWindow<T>(System.String, System.Boolean) UnityEditor.EditorWindow.GetWindow<T>(System.Boolean, System.String, System.Boolean) UnityEditor.EditorWindow.GetWindow<T>(System.Type[]) UnityEditor.EditorWindow.GetWindow<T>(System.String, System.Type[]) UnityEditor.EditorWindow.GetWindow<T>(System.String, System.Boolean, System.Type[]) UnityEditor.EditorWindow.CreateWindow<T>(System.Type[]) UnityEditor.EditorWindow.CreateWindow<T>(System.String, System.Type[]) UnityEditor.EditorWindow.HasOpenInstances<T>() EditorWindow.FocusWindowIfItsOpen(Type) UnityEditor.EditorWindow.FocusWindowIfItsOpen<T>() UnityEditor.EditorWindow.GetWindowWithRect<T>(UnityEngine.Rect) UnityEditor.EditorWindow.GetWindowWithRect<T>(UnityEngine.Rect, System.Boolean) UnityEditor.EditorWindow.GetWindowWithRect<T>(UnityEngine.Rect, System.Boolean, System.String) UnityEditor.EditorWindow.GetWindowWithRect<T>(UnityEngine.Rect, System.Boolean, System.String, System.Boolean) EditorWindow.Close() EditorWindow.Repaint() EditorWindow.SendEvent(Event) EditorWindow.GetExtraPaneTypes() EditorWindow.rootVisualElement EditorWindow.wantsMouseMove EditorWindow.wantsMouseEnterLeaveWindow EditorWindow.wantsLessLayoutEvents EditorWindow.autoRepaintOnSceneChange EditorWindow.maximized EditorWindow.hasFocus EditorWindow.docked EditorWindow.focusedWindow EditorWindow.mouseOverWindow EditorWindow.minSize EditorWindow.maxSize EditorWindow.titleContent UnityEditor.EditorWindow.depthBufferBits EditorWindow.position ScriptableObject.CreateInstance(String) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) Object.Destroy(Object) Object.DestroyImmediate(Object, Boolean) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, Boolean) Object.DontDestroyOnLoad(Object) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectOfType(Type) Object.FindObjectOfType(Type, Boolean) Object.ToString() Object.name Object.hideFlags Namespace : Unity.Entities.Editor <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class StartLiveLinkWindow : EditorWindow Methods Name Description OpenWindow()"
  },
  "api/Unity.Entities.Editor.StartLiveLinkWindow.OpenWindow.html": {
    "href": "api/Unity.Entities.Editor.StartLiveLinkWindow.OpenWindow.html",
    "title": "Method OpenWindow | Entities | 0.17.0-preview.18",
    "keywords": "Method OpenWindow OpenWindow() Declaration public static void OpenWindow()"
  },
  "api/Unity.Entities.EditorRenderData.Equals.html": {
    "href": "api/Unity.Entities.EditorRenderData.Equals.html",
    "title": "Method Equals | Entities | 0.17.0-preview.18",
    "keywords": "Method Equals Equals(EditorRenderData) Declaration public bool Equals(EditorRenderData other) Parameters Type Name Description EditorRenderData other Returns Type Description Boolean"
  },
  "api/Unity.Entities.EditorRenderData.GetHashCode.html": {
    "href": "api/Unity.Entities.EditorRenderData.GetHashCode.html",
    "title": "Method GetHashCode | Entities | 0.17.0-preview.18",
    "keywords": "Method GetHashCode GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode()"
  },
  "api/Unity.Entities.EditorRenderData.html": {
    "href": "api/Unity.Entities.EditorRenderData.html",
    "title": "Struct EditorRenderData | Entities | 0.17.0-preview.18",
    "keywords": "Struct EditorRenderData Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct EditorRenderData : ISharedComponentData, IEquatable<EditorRenderData> Fields Name Description PickableObject SceneCullingMask Methods Name Description Equals(EditorRenderData) GetHashCode()"
  },
  "api/Unity.Entities.EditorRenderData.PickableObject.html": {
    "href": "api/Unity.Entities.EditorRenderData.PickableObject.html",
    "title": "Field PickableObject | Entities | 0.17.0-preview.18",
    "keywords": "Field PickableObject Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public GameObject PickableObject Returns Type Description GameObject"
  },
  "api/Unity.Entities.EditorRenderData.SceneCullingMask.html": {
    "href": "api/Unity.Entities.EditorRenderData.SceneCullingMask.html",
    "title": "Field SceneCullingMask | Entities | 0.17.0-preview.18",
    "keywords": "Field SceneCullingMask Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public ulong SceneCullingMask Returns Type Description UInt64"
  },
  "api/Unity.Entities.EndFixedStepSimulationEntityCommandBufferSystem.html": {
    "href": "api/Unity.Entities.EndFixedStepSimulationEntityCommandBufferSystem.html",
    "title": "Class EndFixedStepSimulationEntityCommandBufferSystem | Entities | 0.17.0-preview.18",
    "keywords": "Class EndFixedStepSimulationEntityCommandBufferSystem Inheritance Object ComponentSystemBase ComponentSystem EntityCommandBufferSystem EndFixedStepSimulationEntityCommandBufferSystem Inherited Members EntityCommandBufferSystem.CreateCommandBuffer() EntityCommandBufferSystem.AddJobHandleForProducer(JobHandle) EntityCommandBufferSystem.OnCreate() EntityCommandBufferSystem.OnDestroy() EntityCommandBufferSystem.OnUpdate() ComponentSystem.PostUpdateCommands ComponentSystem.InitEntityQueryCache(Int32) ComponentSystem.Entities ComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.ExecutingSystemType ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetComponentTypeHandle<T>(Boolean) ComponentSystemBase.GetDynamicComponentTypeHandle(ComponentType) ComponentSystemBase.GetBufferTypeHandle<T>(Boolean) ComponentSystemBase.GetSharedComponentTypeHandle<T>() ComponentSystemBase.GetEntityTypeHandle() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.TryGetSingleton<T>(T) ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.TryGetSingletonEntity<T>(Entity) ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [ExecuteAlways] [UpdateInGroup(typeof(FixedStepSimulationSystemGroup), OrderLast = true)] public class EndFixedStepSimulationEntityCommandBufferSystem : EntityCommandBufferSystem Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Entities.EndInitializationEntityCommandBufferSystem.html": {
    "href": "api/Unity.Entities.EndInitializationEntityCommandBufferSystem.html",
    "title": "Class EndInitializationEntityCommandBufferSystem | Entities | 0.17.0-preview.18",
    "keywords": "Class EndInitializationEntityCommandBufferSystem Inheritance Object ComponentSystemBase ComponentSystem EntityCommandBufferSystem EndInitializationEntityCommandBufferSystem Inherited Members EntityCommandBufferSystem.CreateCommandBuffer() EntityCommandBufferSystem.AddJobHandleForProducer(JobHandle) EntityCommandBufferSystem.OnCreate() EntityCommandBufferSystem.OnDestroy() EntityCommandBufferSystem.OnUpdate() ComponentSystem.PostUpdateCommands ComponentSystem.InitEntityQueryCache(Int32) ComponentSystem.Entities ComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.ExecutingSystemType ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetComponentTypeHandle<T>(Boolean) ComponentSystemBase.GetDynamicComponentTypeHandle(ComponentType) ComponentSystemBase.GetBufferTypeHandle<T>(Boolean) ComponentSystemBase.GetSharedComponentTypeHandle<T>() ComponentSystemBase.GetEntityTypeHandle() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.TryGetSingleton<T>(T) ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.TryGetSingletonEntity<T>(Entity) ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [ExecuteAlways] [UpdateInGroup(typeof(InitializationSystemGroup), OrderLast = true)] public class EndInitializationEntityCommandBufferSystem : EntityCommandBufferSystem Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Entities.EndSimulationEntityCommandBufferSystem.html": {
    "href": "api/Unity.Entities.EndSimulationEntityCommandBufferSystem.html",
    "title": "Class EndSimulationEntityCommandBufferSystem | Entities | 0.17.0-preview.18",
    "keywords": "Class EndSimulationEntityCommandBufferSystem Inheritance Object ComponentSystemBase ComponentSystem EntityCommandBufferSystem EndSimulationEntityCommandBufferSystem Inherited Members EntityCommandBufferSystem.CreateCommandBuffer() EntityCommandBufferSystem.AddJobHandleForProducer(JobHandle) EntityCommandBufferSystem.OnCreate() EntityCommandBufferSystem.OnDestroy() EntityCommandBufferSystem.OnUpdate() ComponentSystem.PostUpdateCommands ComponentSystem.InitEntityQueryCache(Int32) ComponentSystem.Entities ComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.ExecutingSystemType ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetComponentTypeHandle<T>(Boolean) ComponentSystemBase.GetDynamicComponentTypeHandle(ComponentType) ComponentSystemBase.GetBufferTypeHandle<T>(Boolean) ComponentSystemBase.GetSharedComponentTypeHandle<T>() ComponentSystemBase.GetEntityTypeHandle() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.TryGetSingleton<T>(T) ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.TryGetSingletonEntity<T>(Entity) ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [ExecuteAlways] [UpdateInGroup(typeof(SimulationSystemGroup), OrderLast = true)] public class EndSimulationEntityCommandBufferSystem : EntityCommandBufferSystem Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Entities.Entity.CompareTo.html": {
    "href": "api/Unity.Entities.Entity.CompareTo.html",
    "title": "Method CompareTo | Entities | 0.17.0-preview.18",
    "keywords": "Method CompareTo CompareTo(Entity) Compare this entity against a given one Declaration public int CompareTo(Entity other) Parameters Type Name Description Entity other The other entity to compare to Returns Type Description Int32 Difference based on the Entity Index value"
  },
  "api/Unity.Entities.Entity.Equals.html": {
    "href": "api/Unity.Entities.Entity.Equals.html",
    "title": "Method Equals | Entities | 0.17.0-preview.18",
    "keywords": "Method Equals Equals(Object) Entity instances are equal if they refer to the same entity. Declaration public override bool Equals(object compare) Parameters Type Name Description Object compare The object to compare to this Entity. Returns Type Description Boolean True, if the compare parameter contains an Entity object having the same Index and Version as this Entity. Overrides ValueType.Equals(Object) Equals(Entity) Entity instances are equal if they represent the same entity. Declaration public bool Equals(Entity entity) Parameters Type Name Description Entity entity The other Entity. Returns Type Description Boolean True, if the Entity instances have the same Index and Version."
  },
  "api/Unity.Entities.Entity.GetHashCode.html": {
    "href": "api/Unity.Entities.Entity.GetHashCode.html",
    "title": "Method GetHashCode | Entities | 0.17.0-preview.18",
    "keywords": "Method GetHashCode GetHashCode() A hash used for comparisons. Declaration public override int GetHashCode() Returns Type Description Int32 A unique hash code. Overrides ValueType.GetHashCode()"
  },
  "api/Unity.Entities.Entity.html": {
    "href": "api/Unity.Entities.Entity.html",
    "title": "Struct Entity | Entities | 0.17.0-preview.18",
    "keywords": "Struct Entity Identifies an entity. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct Entity : IEquatable<Entity>, IComparable<Entity> Remarks The entity is a fundamental part of the Entity Component System. Everything in your game that has data or an identity of its own is an entity. However, an entity does not contain either data or behavior itself. Instead, the data is stored in the components and the behavior is provided by the systems that process those components. The entity acts as an identifier or key to the data stored in components. Entities are managed by the EntityManager class and exist within a World . An Entity struct refers to an entity, but is not a reference. Rather the Entity struct contains an Index used to access entity data and a Version used to check whether the Index is still valid. Note that you generally do not use the Index or Version values directly, but instead pass the Entity struct to the relevant API methods. Pass an Entity struct to methods of the EntityManager , the EntityCommandBuffer , or the ComponentSystem in order to add or remove components, to access components, or to destroy the entity. Fields Name Description Index The ID of an entity. Version The generational version of the entity. Properties Name Description Null A \"blank\" Entity object that does not refer to an actual entity. Methods Name Description CompareTo(Entity) Compare this entity against a given one Equals(Object) Entity instances are equal if they refer to the same entity. Equals(Entity) Entity instances are equal if they represent the same entity. GetHashCode() A hash used for comparisons. ToString() Provides a debugging string. Operators Name Description Equality(Entity, Entity) Entity instances are equal if they refer to the same entity. Inequality(Entity, Entity) Entity instances are equal if they refer to the same entity."
  },
  "api/Unity.Entities.Entity.Index.html": {
    "href": "api/Unity.Entities.Entity.Index.html",
    "title": "Field Index | Entities | 0.17.0-preview.18",
    "keywords": "Field Index The ID of an entity. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public int Index Returns Type Description Int32 The index into the internal list of entities. Remarks Entity indexes are recycled when an entity is destroyed. When an entity is destroyed, the EntityManager increments the version identifier. To represent the same entity, both the Index and the Version fields of the Entity object must match. If the Index is the same, but the Version is different, then the entity has been recycled."
  },
  "api/Unity.Entities.Entity.Null.html": {
    "href": "api/Unity.Entities.Entity.Null.html",
    "title": "Property Null | Entities | 0.17.0-preview.18",
    "keywords": "Property Null Null A \"blank\" Entity object that does not refer to an actual entity. Declaration public static Entity Null { get; } Property Value Type Description Entity"
  },
  "api/Unity.Entities.Entity.op_Equality.html": {
    "href": "api/Unity.Entities.Entity.op_Equality.html",
    "title": "Operator Equality | Entities | 0.17.0-preview.18",
    "keywords": "Operator Equality Equality(Entity, Entity) Entity instances are equal if they refer to the same entity. Declaration public static bool operator ==(Entity lhs, Entity rhs) Parameters Type Name Description Entity lhs An Entity object. Entity rhs Another Entity object. Returns Type Description Boolean True, if both Index and Version are identical."
  },
  "api/Unity.Entities.Entity.op_Inequality.html": {
    "href": "api/Unity.Entities.Entity.op_Inequality.html",
    "title": "Operator Inequality | Entities | 0.17.0-preview.18",
    "keywords": "Operator Inequality Inequality(Entity, Entity) Entity instances are equal if they refer to the same entity. Declaration public static bool operator !=(Entity lhs, Entity rhs) Parameters Type Name Description Entity lhs An Entity object. Entity rhs Another Entity object. Returns Type Description Boolean True, if either Index or Version are different."
  },
  "api/Unity.Entities.Entity.ToString.html": {
    "href": "api/Unity.Entities.Entity.ToString.html",
    "title": "Method ToString | Entities | 0.17.0-preview.18",
    "keywords": "Method ToString ToString() Provides a debugging string. Declaration public override string ToString() Returns Type Description String A string containing the entity index and generational version. Overrides ValueType.ToString()"
  },
  "api/Unity.Entities.Entity.Version.html": {
    "href": "api/Unity.Entities.Entity.Version.html",
    "title": "Field Version | Entities | 0.17.0-preview.18",
    "keywords": "Field Version The generational version of the entity. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public int Version Returns Type Description Int32 Used to determine whether this Entity object still identifies an existing entity. Remarks The Version number can, theoretically, overflow and wrap around within the lifetime of an application. For this reason, you cannot assume that an Entity instance with a larger Version is a more recent incarnation of the entity than one with a smaller Version (and the same Index)."
  },
  "api/Unity.Entities.EntityArchetype.ChunkCapacity.html": {
    "href": "api/Unity.Entities.EntityArchetype.ChunkCapacity.html",
    "title": "Property ChunkCapacity | Entities | 0.17.0-preview.18",
    "keywords": "Property ChunkCapacity ChunkCapacity The number of entities having this archetype that can fit into a single chunk of memory. Declaration public int ChunkCapacity { get; } Property Value Type Description Int32 Capacity is determined by the fixed, 16KB size of the memory blocks allocated by the ECS framework and the total storage size of all the component types in the archetype."
  },
  "api/Unity.Entities.EntityArchetype.ChunkCount.html": {
    "href": "api/Unity.Entities.EntityArchetype.ChunkCount.html",
    "title": "Property ChunkCount | Entities | 0.17.0-preview.18",
    "keywords": "Property ChunkCount ChunkCount The current number of chunks storing entities having this archetype. Declaration public int ChunkCount { get; } Property Value Type Description Int32 The number of chunks. Remarks This value can change whenever structural changes occur. Structural changes include creating or destroying entities, adding components to or removing them from an entity, and changing the value of shared components, all of which alter where entities are stored."
  },
  "api/Unity.Entities.EntityArchetype.Disabled.html": {
    "href": "api/Unity.Entities.EntityArchetype.Disabled.html",
    "title": "Property Disabled | Entities | 0.17.0-preview.18",
    "keywords": "Property Disabled Disabled Reports whether this EntityArchetype instance contains disabled entities. Declaration public bool Disabled { get; } Property Value Type Description Boolean True, if the archetype is a disabled archetype."
  },
  "api/Unity.Entities.EntityArchetype.Equals.html": {
    "href": "api/Unity.Entities.EntityArchetype.Equals.html",
    "title": "Method Equals | Entities | 0.17.0-preview.18",
    "keywords": "Method Equals Equals(Object) Reports whether this EntityArchetype references the same archetype as another object. Declaration public override bool Equals(object compare) Parameters Type Name Description Object compare The object to compare. Returns Type Description Boolean True, if the compare parameter is a EntityArchetype instance that points to the same archetype. Overrides ValueType.Equals(Object) Equals(EntityArchetype) Compares archetypes for equality. Declaration public bool Equals(EntityArchetype entityArchetype) Parameters Type Name Description EntityArchetype entityArchetype The EntityArchetype to compare. Returns Type Description Boolean Returns true, if both EntityArchetype instances reference the same archetype."
  },
  "api/Unity.Entities.EntityArchetype.GetComponentTypes.html": {
    "href": "api/Unity.Entities.EntityArchetype.GetComponentTypes.html",
    "title": "Method GetComponentTypes | Entities | 0.17.0-preview.18",
    "keywords": "Method GetComponentTypes GetComponentTypes(Allocator) Gets the types of the components making up this archetype. Declaration public NativeArray<ComponentType> GetComponentTypes(Allocator allocator = Allocator.Temp) Parameters Type Name Description Allocator allocator The allocation type to use for the returned NativeArray. Returns Type Description NativeArray < ComponentType > A native array containing the ComponentType objects of this archetype. Remarks The set of component types in an archetype cannot change; adding components to an entity or removing components from an entity changes the archetype of that entity (possibly resulting in the creation of a new archetype). The original archetype remains unchanged."
  },
  "api/Unity.Entities.EntityArchetype.GetHashCode.html": {
    "href": "api/Unity.Entities.EntityArchetype.GetHashCode.html",
    "title": "Method GetHashCode | Entities | 0.17.0-preview.18",
    "keywords": "Method GetHashCode GetHashCode() Returns the hash of the archetype. Declaration public override int GetHashCode() Returns Type Description Int32 An integer hash code. Overrides ValueType.GetHashCode() Remarks Two EntityArchetype instances referencing the same archetype return the same hash."
  },
  "api/Unity.Entities.EntityArchetype.html": {
    "href": "api/Unity.Entities.EntityArchetype.html",
    "title": "Struct EntityArchetype | Entities | 0.17.0-preview.18",
    "keywords": "Struct EntityArchetype An EntityArchetype is a unique combination of component types. The EntityManager uses the archetype to group all entities that have the same sets of components. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct EntityArchetype : IEquatable<EntityArchetype> Remarks An entity can change archetype fluidly over its lifespan. For example, when you add or remove components, the archetype of the affected entity changes. An archetype object is not a container; rather it is an identifier to each unique combination of component types that an application has created at run time, either directly or implicitly. You can create archetypes directly using CreateArchetype(ComponentType[]) . You also implicitly create archetypes whenever you add or remove a component from an entity. An EntityArchetype object is an immutable singleton; creating an archetype with the same set of components, either directly or implicitly, results in the same archetype for a given EntityManager. The ECS framework uses archetypes to group entities that have the same structure together. The ECS framework stores component data in blocks of memory called chunks . A given chunk stores only entities having the same archetype. You can get the EntityArchetype object for a chunk from its Archetype property. Instead of using new EntityArchetype(), use EntityManager.CreateArchetype() to create EntityArchetype values. Properties Name Description ChunkCapacity The number of entities having this archetype that can fit into a single chunk of memory. ChunkCount The current number of chunks storing entities having this archetype. Disabled Reports whether this EntityArchetype instance contains disabled entities. Prefab Reports whether this EntityArchetype instance describes a Prefab. Valid Reports whether this EntityArchetype instance references a non-null archetype. Methods Name Description Equals(Object) Reports whether this EntityArchetype references the same archetype as another object. Equals(EntityArchetype) Compares archetypes for equality. GetComponentTypes(Allocator) Gets the types of the components making up this archetype. GetHashCode() Returns the hash of the archetype. Operators Name Description Equality(EntityArchetype, EntityArchetype) Compares the archetypes for equality. Inequality(EntityArchetype, EntityArchetype) Compares the archetypes for inequality."
  },
  "api/Unity.Entities.EntityArchetype.op_Equality.html": {
    "href": "api/Unity.Entities.EntityArchetype.op_Equality.html",
    "title": "Operator Equality | Entities | 0.17.0-preview.18",
    "keywords": "Operator Equality Equality(EntityArchetype, EntityArchetype) Compares the archetypes for equality. Declaration public static bool operator ==(EntityArchetype lhs, EntityArchetype rhs) Parameters Type Name Description EntityArchetype lhs A EntityArchetype object. EntityArchetype rhs Another EntityArchetype object. Returns Type Description Boolean True, if these EntityArchetype instances reference the same archetype."
  },
  "api/Unity.Entities.EntityArchetype.op_Inequality.html": {
    "href": "api/Unity.Entities.EntityArchetype.op_Inequality.html",
    "title": "Operator Inequality | Entities | 0.17.0-preview.18",
    "keywords": "Operator Inequality Inequality(EntityArchetype, EntityArchetype) Compares the archetypes for inequality. Declaration public static bool operator !=(EntityArchetype lhs, EntityArchetype rhs) Parameters Type Name Description EntityArchetype lhs A EntityArchetype object. EntityArchetype rhs Another EntityArchetype object. Returns Type Description Boolean True, if these EntityArchetype instances reference different archetypes."
  },
  "api/Unity.Entities.EntityArchetype.Prefab.html": {
    "href": "api/Unity.Entities.EntityArchetype.Prefab.html",
    "title": "Property Prefab | Entities | 0.17.0-preview.18",
    "keywords": "Property Prefab Prefab Reports whether this EntityArchetype instance describes a Prefab. Declaration public bool Prefab { get; } Property Value Type Description Boolean True, if the archetype is a prefab archetype."
  },
  "api/Unity.Entities.EntityArchetype.Valid.html": {
    "href": "api/Unity.Entities.EntityArchetype.Valid.html",
    "title": "Property Valid | Entities | 0.17.0-preview.18",
    "keywords": "Property Valid Valid Reports whether this EntityArchetype instance references a non-null archetype. Declaration public bool Valid { get; } Property Value Type Description Boolean True, if the archetype is valid."
  },
  "api/Unity.Entities.EntityChanges.AnyChanges.html": {
    "href": "api/Unity.Entities.EntityChanges.AnyChanges.html",
    "title": "Property AnyChanges | Entities | 0.17.0-preview.18",
    "keywords": "Property AnyChanges AnyChanges Declaration public bool AnyChanges { get; } Property Value Type Description Boolean"
  },
  "api/Unity.Entities.EntityChanges.-ctor.html": {
    "href": "api/Unity.Entities.EntityChanges.-ctor.html",
    "title": "Constructor EntityChanges | Entities | 0.17.0-preview.18",
    "keywords": "Constructor EntityChanges EntityChanges(EntityChangeSet, EntityChangeSet) Declaration public EntityChanges(EntityChangeSet forwardChangeSet, EntityChangeSet reverseChangeSet) Parameters Type Name Description EntityChangeSet forwardChangeSet EntityChangeSet reverseChangeSet"
  },
  "api/Unity.Entities.EntityChanges.Dispose.html": {
    "href": "api/Unity.Entities.EntityChanges.Dispose.html",
    "title": "Method Dispose | Entities | 0.17.0-preview.18",
    "keywords": "Method Dispose Dispose() Declaration public void Dispose()"
  },
  "api/Unity.Entities.EntityChanges.ForwardChangeSet.html": {
    "href": "api/Unity.Entities.EntityChanges.ForwardChangeSet.html",
    "title": "Property ForwardChangeSet | Entities | 0.17.0-preview.18",
    "keywords": "Property ForwardChangeSet ForwardChangeSet Declaration public EntityChangeSet ForwardChangeSet { get; } Property Value Type Description EntityChangeSet"
  },
  "api/Unity.Entities.EntityChanges.HasForwardChangeSet.html": {
    "href": "api/Unity.Entities.EntityChanges.HasForwardChangeSet.html",
    "title": "Property HasForwardChangeSet | Entities | 0.17.0-preview.18",
    "keywords": "Property HasForwardChangeSet HasForwardChangeSet Declaration public bool HasForwardChangeSet { get; } Property Value Type Description Boolean"
  },
  "api/Unity.Entities.EntityChanges.HasReverseChangeSet.html": {
    "href": "api/Unity.Entities.EntityChanges.HasReverseChangeSet.html",
    "title": "Property HasReverseChangeSet | Entities | 0.17.0-preview.18",
    "keywords": "Property HasReverseChangeSet HasReverseChangeSet Declaration public bool HasReverseChangeSet { get; } Property Value Type Description Boolean"
  },
  "api/Unity.Entities.EntityChanges.html": {
    "href": "api/Unity.Entities.EntityChanges.html",
    "title": "Struct EntityChanges | Entities | 0.17.0-preview.18",
    "keywords": "Struct EntityChanges Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct EntityChanges : IDisposable Constructors Name Description EntityChanges(EntityChangeSet, EntityChangeSet) Properties Name Description AnyChanges ForwardChangeSet HasForwardChangeSet HasReverseChangeSet ReverseChangeSet Methods Name Description Dispose()"
  },
  "api/Unity.Entities.EntityChanges.ReverseChangeSet.html": {
    "href": "api/Unity.Entities.EntityChanges.ReverseChangeSet.html",
    "title": "Property ReverseChangeSet | Entities | 0.17.0-preview.18",
    "keywords": "Property ReverseChangeSet ReverseChangeSet Declaration public EntityChangeSet ReverseChangeSet { get; } Property Value Type Description EntityChangeSet"
  },
  "api/Unity.Entities.EntityChangeSet.AddComponents.html": {
    "href": "api/Unity.Entities.EntityChangeSet.AddComponents.html",
    "title": "Field AddComponents | Entities | 0.17.0-preview.18",
    "keywords": "Field AddComponents A set of all component additions in this change-set. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public readonly NativeArray<PackedComponent> AddComponents Returns Type Description NativeArray < PackedComponent >"
  },
  "api/Unity.Entities.EntityChangeSet.BlobAssetData.html": {
    "href": "api/Unity.Entities.EntityChangeSet.BlobAssetData.html",
    "title": "Field BlobAssetData | Entities | 0.17.0-preview.18",
    "keywords": "Field BlobAssetData The payload for all blob assets in this change set. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public readonly NativeArray<byte> BlobAssetData Returns Type Description NativeArray < Byte >"
  },
  "api/Unity.Entities.EntityChangeSet.BlobAssetReferenceChanges.html": {
    "href": "api/Unity.Entities.EntityChangeSet.BlobAssetReferenceChanges.html",
    "title": "Field BlobAssetReferenceChanges | Entities | 0.17.0-preview.18",
    "keywords": "Field BlobAssetReferenceChanges A packed set of all blob asset references to patch. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public readonly NativeArray<BlobAssetReferenceChange> BlobAssetReferenceChanges Returns Type Description NativeArray < BlobAssetReferenceChange >"
  },
  "api/Unity.Entities.EntityChangeSet.ComponentData.html": {
    "href": "api/Unity.Entities.EntityChangeSet.ComponentData.html",
    "title": "Field ComponentData | Entities | 0.17.0-preview.18",
    "keywords": "Field ComponentData Data payload for all component changes specified in SetComponents Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public readonly NativeArray<byte> ComponentData Returns Type Description NativeArray < Byte > Remarks Data changes are tightly packed. Use the Size to read back."
  },
  "api/Unity.Entities.EntityChangeSet.CreatedBlobAssets.html": {
    "href": "api/Unity.Entities.EntityChangeSet.CreatedBlobAssets.html",
    "title": "Field CreatedBlobAssets | Entities | 0.17.0-preview.18",
    "keywords": "Field CreatedBlobAssets A set of all blob asset creations in this change set. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public readonly NativeArray<BlobAssetChange> CreatedBlobAssets Returns Type Description NativeArray < BlobAssetChange > Remarks The BlobAssetChange is used to describe the payload within the BlobAssetData array."
  },
  "api/Unity.Entities.EntityChangeSet.CreatedEntityCount.html": {
    "href": "api/Unity.Entities.EntityChangeSet.CreatedEntityCount.html",
    "title": "Field CreatedEntityCount | Entities | 0.17.0-preview.18",
    "keywords": "Field CreatedEntityCount Number of entities from the start of Entities that should be considered as created. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public readonly int CreatedEntityCount Returns Type Description Int32"
  },
  "api/Unity.Entities.EntityChangeSet.-ctor.html": {
    "href": "api/Unity.Entities.EntityChangeSet.-ctor.html",
    "title": "Constructor EntityChangeSet | Entities | 0.17.0-preview.18",
    "keywords": "Constructor EntityChangeSet EntityChangeSet(Int32, Int32, NativeArray<EntityGuid>, NativeArray<ComponentTypeHash>, NativeArray<FixedString64>, NativeArray<PackedComponent>, NativeArray<PackedComponent>, NativeArray<PackedComponentDataChange>, NativeArray<Byte>, NativeArray<EntityReferenceChange>, NativeArray<BlobAssetReferenceChange>, PackedManagedComponentDataChange[], PackedSharedComponentDataChange[], NativeArray<LinkedEntityGroupChange>, NativeArray<LinkedEntityGroupChange>, NativeArray<BlobAssetChange>, NativeArray<UInt64>, NativeArray<Byte>) Declaration public EntityChangeSet(int createdEntityCount, int destroyedEntityCount, NativeArray<EntityGuid> entities, NativeArray<ComponentTypeHash> typeHashes, NativeArray<FixedString64> names, NativeArray<PackedComponent> addComponents, NativeArray<PackedComponent> removeComponents, NativeArray<PackedComponentDataChange> setComponents, NativeArray<byte> componentData, NativeArray<EntityReferenceChange> entityReferenceChanges, NativeArray<BlobAssetReferenceChange> blobAssetReferenceChanges, PackedManagedComponentDataChange[] setManagedComponents, PackedSharedComponentDataChange[] setSharedComponents, NativeArray<LinkedEntityGroupChange> linkedEntityGroupAdditions, NativeArray<LinkedEntityGroupChange> linkedEntityGroupRemovals, NativeArray<BlobAssetChange> createdBlobAssets, NativeArray<ulong> destroyedBlobAssets, NativeArray<byte> blobAssetData) Parameters Type Name Description Int32 createdEntityCount Int32 destroyedEntityCount NativeArray < EntityGuid > entities NativeArray < ComponentTypeHash > typeHashes NativeArray < Unity.Collections.FixedString64 > names NativeArray < PackedComponent > addComponents NativeArray < PackedComponent > removeComponents NativeArray < PackedComponentDataChange > setComponents NativeArray < Byte > componentData NativeArray < EntityReferenceChange > entityReferenceChanges NativeArray < BlobAssetReferenceChange > blobAssetReferenceChanges PackedManagedComponentDataChange [] setManagedComponents PackedSharedComponentDataChange [] setSharedComponents NativeArray < LinkedEntityGroupChange > linkedEntityGroupAdditions NativeArray < LinkedEntityGroupChange > linkedEntityGroupRemovals NativeArray < BlobAssetChange > createdBlobAssets NativeArray < UInt64 > destroyedBlobAssets NativeArray < Byte > blobAssetData"
  },
  "api/Unity.Entities.EntityChangeSet.DestroyedBlobAssets.html": {
    "href": "api/Unity.Entities.EntityChangeSet.DestroyedBlobAssets.html",
    "title": "Field DestroyedBlobAssets | Entities | 0.17.0-preview.18",
    "keywords": "Field DestroyedBlobAssets A set of all blob assets destroyed in this change set. Identified by the content hash. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public readonly NativeArray<ulong> DestroyedBlobAssets Returns Type Description NativeArray < UInt64 >"
  },
  "api/Unity.Entities.EntityChangeSet.DestroyedEntityCount.html": {
    "href": "api/Unity.Entities.EntityChangeSet.DestroyedEntityCount.html",
    "title": "Field DestroyedEntityCount | Entities | 0.17.0-preview.18",
    "keywords": "Field DestroyedEntityCount Number of entities from the end of Entities that should be considered as destroyed. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public readonly int DestroyedEntityCount Returns Type Description Int32"
  },
  "api/Unity.Entities.EntityChangeSet.Dispose.html": {
    "href": "api/Unity.Entities.EntityChangeSet.Dispose.html",
    "title": "Method Dispose | Entities | 0.17.0-preview.18",
    "keywords": "Method Dispose Dispose() Declaration public void Dispose()"
  },
  "api/Unity.Entities.EntityChangeSet.Entities.html": {
    "href": "api/Unity.Entities.EntityChangeSet.Entities.html",
    "title": "Field Entities | Entities | 0.17.0-preview.18",
    "keywords": "Field Entities A packed array of all entities in this change-set. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public readonly NativeArray<EntityGuid> Entities Returns Type Description NativeArray < EntityGuid >"
  },
  "api/Unity.Entities.EntityChangeSet.EntityReferenceChanges.html": {
    "href": "api/Unity.Entities.EntityChangeSet.EntityReferenceChanges.html",
    "title": "Field EntityReferenceChanges | Entities | 0.17.0-preview.18",
    "keywords": "Field EntityReferenceChanges A packed set of all entity references to patch. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public readonly NativeArray<EntityReferenceChange> EntityReferenceChanges Returns Type Description NativeArray < EntityReferenceChange >"
  },
  "api/Unity.Entities.EntityChangeSet.HasChanges.html": {
    "href": "api/Unity.Entities.EntityChangeSet.HasChanges.html",
    "title": "Property HasChanges | Entities | 0.17.0-preview.18",
    "keywords": "Property HasChanges HasChanges Declaration public bool HasChanges { get; } Property Value Type Description Boolean"
  },
  "api/Unity.Entities.EntityChangeSet.html": {
    "href": "api/Unity.Entities.EntityChangeSet.html",
    "title": "Struct EntityChangeSet | Entities | 0.17.0-preview.18",
    "keywords": "Struct EntityChangeSet An atomic package of changes to entity and component data. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct EntityChangeSet : IDisposable Constructors Name Description EntityChangeSet(Int32, Int32, NativeArray<EntityGuid>, NativeArray<ComponentTypeHash>, NativeArray<FixedString64>, NativeArray<PackedComponent>, NativeArray<PackedComponent>, NativeArray<PackedComponentDataChange>, NativeArray<Byte>, NativeArray<EntityReferenceChange>, NativeArray<BlobAssetReferenceChange>, PackedManagedComponentDataChange[], PackedSharedComponentDataChange[], NativeArray<LinkedEntityGroupChange>, NativeArray<LinkedEntityGroupChange>, NativeArray<BlobAssetChange>, NativeArray<UInt64>, NativeArray<Byte>) Fields Name Description AddComponents A set of all component additions in this change-set. BlobAssetData The payload for all blob assets in this change set. BlobAssetReferenceChanges A packed set of all blob asset references to patch. ComponentData Data payload for all component changes specified in SetComponents CreatedBlobAssets A set of all blob asset creations in this change set. CreatedEntityCount Number of entities from the start of Entities that should be considered as created. DestroyedBlobAssets A set of all blob assets destroyed in this change set. Identified by the content hash. DestroyedEntityCount Number of entities from the end of Entities that should be considered as destroyed. Entities A packed array of all entities in this change-set. EntityReferenceChanges A packed set of all entity references to patch. LinkedEntityGroupAdditions A set of all linked entity group additions. LinkedEntityGroupRemovals A set of all linked entity group removals. Names Names for each entity in this change-set. RemoveComponents A set of all component removals in this change-set. SetComponents A set of all component data modifications in this change-set. SetManagedComponents A set of all managed component data changes. SetSharedComponents A set of all shared component data changes. TypeHashes A packed array of all types in this change-set. Properties Name Description HasChanges IsCreated Returns true if this object is allocated. Methods Name Description Dispose()"
  },
  "api/Unity.Entities.EntityChangeSet.IsCreated.html": {
    "href": "api/Unity.Entities.EntityChangeSet.IsCreated.html",
    "title": "Property IsCreated | Entities | 0.17.0-preview.18",
    "keywords": "Property IsCreated IsCreated Returns true if this object is allocated. Declaration public bool IsCreated { get; } Property Value Type Description Boolean"
  },
  "api/Unity.Entities.EntityChangeSet.LinkedEntityGroupAdditions.html": {
    "href": "api/Unity.Entities.EntityChangeSet.LinkedEntityGroupAdditions.html",
    "title": "Field LinkedEntityGroupAdditions | Entities | 0.17.0-preview.18",
    "keywords": "Field LinkedEntityGroupAdditions A set of all linked entity group additions. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public readonly NativeArray<LinkedEntityGroupChange> LinkedEntityGroupAdditions Returns Type Description NativeArray < LinkedEntityGroupChange >"
  },
  "api/Unity.Entities.EntityChangeSet.LinkedEntityGroupRemovals.html": {
    "href": "api/Unity.Entities.EntityChangeSet.LinkedEntityGroupRemovals.html",
    "title": "Field LinkedEntityGroupRemovals | Entities | 0.17.0-preview.18",
    "keywords": "Field LinkedEntityGroupRemovals A set of all linked entity group removals. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public readonly NativeArray<LinkedEntityGroupChange> LinkedEntityGroupRemovals Returns Type Description NativeArray < LinkedEntityGroupChange >"
  },
  "api/Unity.Entities.EntityChangeSet.Names.html": {
    "href": "api/Unity.Entities.EntityChangeSet.Names.html",
    "title": "Field Names | Entities | 0.17.0-preview.18",
    "keywords": "Field Names Names for each entity in this change-set. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public readonly NativeArray<FixedString64> Names Returns Type Description NativeArray < Unity.Collections.FixedString64 >"
  },
  "api/Unity.Entities.EntityChangeSet.RemoveComponents.html": {
    "href": "api/Unity.Entities.EntityChangeSet.RemoveComponents.html",
    "title": "Field RemoveComponents | Entities | 0.17.0-preview.18",
    "keywords": "Field RemoveComponents A set of all component removals in this change-set. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public readonly NativeArray<PackedComponent> RemoveComponents Returns Type Description NativeArray < PackedComponent >"
  },
  "api/Unity.Entities.EntityChangeSet.SetComponents.html": {
    "href": "api/Unity.Entities.EntityChangeSet.SetComponents.html",
    "title": "Field SetComponents | Entities | 0.17.0-preview.18",
    "keywords": "Field SetComponents A set of all component data modifications in this change-set. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public readonly NativeArray<PackedComponentDataChange> SetComponents Returns Type Description NativeArray < PackedComponentDataChange >"
  },
  "api/Unity.Entities.EntityChangeSet.SetManagedComponents.html": {
    "href": "api/Unity.Entities.EntityChangeSet.SetManagedComponents.html",
    "title": "Field SetManagedComponents | Entities | 0.17.0-preview.18",
    "keywords": "Field SetManagedComponents A set of all managed component data changes. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public readonly PackedManagedComponentDataChange[] SetManagedComponents Returns Type Description PackedManagedComponentDataChange []"
  },
  "api/Unity.Entities.EntityChangeSet.SetSharedComponents.html": {
    "href": "api/Unity.Entities.EntityChangeSet.SetSharedComponents.html",
    "title": "Field SetSharedComponents | Entities | 0.17.0-preview.18",
    "keywords": "Field SetSharedComponents A set of all shared component data changes. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public readonly PackedSharedComponentDataChange[] SetSharedComponents Returns Type Description PackedSharedComponentDataChange []"
  },
  "api/Unity.Entities.EntityChangeSet.TypeHashes.html": {
    "href": "api/Unity.Entities.EntityChangeSet.TypeHashes.html",
    "title": "Field TypeHashes | Entities | 0.17.0-preview.18",
    "keywords": "Field TypeHashes A packed array of all types in this change-set. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public readonly NativeArray<ComponentTypeHash> TypeHashes Returns Type Description NativeArray < ComponentTypeHash >"
  },
  "api/Unity.Entities.EntityCommandBuffer.AddBuffer.html": {
    "href": "api/Unity.Entities.EntityCommandBuffer.AddBuffer.html",
    "title": "Method AddBuffer | Entities | 0.17.0-preview.18",
    "keywords": "Method AddBuffer AddBuffer<T>(Entity) Declaration public DynamicBuffer<T> AddBuffer<T>(Entity e) where T : struct, IBufferElementData Parameters Type Name Description Entity e Returns Type Description DynamicBuffer <T> Type Parameters Name Description T"
  },
  "api/Unity.Entities.EntityCommandBuffer.AddComponent.html": {
    "href": "api/Unity.Entities.EntityCommandBuffer.AddComponent.html",
    "title": "Method AddComponent | Entities | 0.17.0-preview.18",
    "keywords": "Method AddComponent AddComponent<T>(Entity, T) Declaration public void AddComponent<T>(Entity e, T component) where T : struct, IComponentData Parameters Type Name Description Entity e T component Type Parameters Name Description T AddComponent<T>(Entity) Declaration public void AddComponent<T>(Entity e) where T : struct, IComponentData Parameters Type Name Description Entity e Type Parameters Name Description T AddComponent(Entity, ComponentType) Declaration public void AddComponent(Entity e, ComponentType componentType) Parameters Type Name Description Entity e ComponentType componentType AddComponent(Entity, ComponentTypes) Records a command to add one or more components to an entity. Declaration public void AddComponent(Entity e, ComponentTypes componentTypes) Parameters Type Name Description Entity e The entity to get additional components. ComponentTypes componentTypes The types of components to add. AddComponent(EntityQuery, ComponentType) Records a command to add a component to all entities matching a query. Declaration public void AddComponent(EntityQuery entityQuery, ComponentType componentType) Parameters Type Name Description EntityQuery entityQuery The query specifying which entities to add the component to. ComponentType componentType The type of component to add. Remarks The query is performed at playback time, not when the method is called. AddComponent(EntityQuery, ComponentTypes) Records a command to add one or more components to all entities matching a query. Declaration public void AddComponent(EntityQuery entityQuery, ComponentTypes types) Parameters Type Name Description EntityQuery entityQuery The query specifying which entities get the added components. ComponentTypes types Remarks The query is performed at playback time, not when the method is called. AddComponent<T>(EntityQuery) Records a command to add a component to all entities matching a query. Declaration public void AddComponent<T>(EntityQuery entityQuery) Parameters Type Name Description EntityQuery entityQuery The query specifying which entities get the added component. Type Parameters Name Description T The type of component to add. Remarks The query is performed at playback time, not when the method is called."
  },
  "api/Unity.Entities.EntityCommandBuffer.AddSharedComponent.html": {
    "href": "api/Unity.Entities.EntityCommandBuffer.AddSharedComponent.html",
    "title": "Method AddSharedComponent | Entities | 0.17.0-preview.18",
    "keywords": "Method AddSharedComponent AddSharedComponent<T>(Entity, T) Declaration public void AddSharedComponent<T>(Entity e, T component) where T : struct, ISharedComponentData Parameters Type Name Description Entity e T component Type Parameters Name Description T AddSharedComponent<T>(EntityQuery, T) Records a command to add a shared component to all entities matching a query. Declaration public void AddSharedComponent<T>(EntityQuery entityQuery, T component) where T : struct, ISharedComponentData Parameters Type Name Description EntityQuery entityQuery The query specifying which entities to add the component value to. T component The component value to add. Type Parameters Name Description T Remarks The query is performed at playback time, not when the method is called. For entities matching the query which already have this component type, the value is updated."
  },
  "api/Unity.Entities.EntityCommandBuffer.AppendToBuffer.html": {
    "href": "api/Unity.Entities.EntityCommandBuffer.AppendToBuffer.html",
    "title": "Method AppendToBuffer | Entities | 0.17.0-preview.18",
    "keywords": "Method AppendToBuffer AppendToBuffer<T>(Entity, T) Appends a single element to the end of a dynamic buffer component. Declaration public void AppendToBuffer<T>(Entity e, T element) where T : struct, IBufferElementData Parameters Type Name Description Entity e The entity to which the dynamic buffer belongs. T element The new element to add to the DynamicBuffer<T> component. Type Parameters Name Description T The IBufferElementData type stored by the DynamicBuffer<T> . Remarks At Playback(EntityManager) , this command throws an InvalidOperationException if the entity doesn't have a DynamicBuffer<T> component storing elements of type T. Exceptions Type Condition InvalidOperationException Thrown if the entity does not have a DynamicBuffer<T> component storing elements of type T at the time the entity command buffer executes this append-to-buffer command."
  },
  "api/Unity.Entities.EntityCommandBuffer.AsParallelWriter.html": {
    "href": "api/Unity.Entities.EntityCommandBuffer.AsParallelWriter.html",
    "title": "Method AsParallelWriter | Entities | 0.17.0-preview.18",
    "keywords": "Method AsParallelWriter AsParallelWriter() Declaration public EntityCommandBuffer.ParallelWriter AsParallelWriter() Returns Type Description EntityCommandBuffer.ParallelWriter"
  },
  "api/Unity.Entities.EntityCommandBuffer.CreateEntity.html": {
    "href": "api/Unity.Entities.EntityCommandBuffer.CreateEntity.html",
    "title": "Method CreateEntity | Entities | 0.17.0-preview.18",
    "keywords": "Method CreateEntity CreateEntity(EntityArchetype) Create an entity with specified archetype. Declaration public Entity CreateEntity(EntityArchetype archetype) Parameters Type Name Description EntityArchetype archetype The archetype of the new entity. Returns Type Description Entity CreateEntity() Create an entity with no components. Declaration public Entity CreateEntity() Returns Type Description Entity"
  },
  "api/Unity.Entities.EntityCommandBuffer.-ctor.html": {
    "href": "api/Unity.Entities.EntityCommandBuffer.-ctor.html",
    "title": "Constructor EntityCommandBuffer | Entities | 0.17.0-preview.18",
    "keywords": "Constructor EntityCommandBuffer EntityCommandBuffer(Allocator) Creates a new command buffer. Declaration public EntityCommandBuffer(Allocator label) Parameters Type Name Description Allocator label Memory allocator to use for chunks and data EntityCommandBuffer(Allocator, PlaybackPolicy) Creates a new command buffer. Declaration public EntityCommandBuffer(Allocator label, PlaybackPolicy playbackPolicy) Parameters Type Name Description Allocator label Memory allocator to use for chunks and data PlaybackPolicy playbackPolicy Specifies if the EntityCommandBuffer can be played a single time or more than once."
  },
  "api/Unity.Entities.EntityCommandBuffer.DestroyEntity.html": {
    "href": "api/Unity.Entities.EntityCommandBuffer.DestroyEntity.html",
    "title": "Method DestroyEntity | Entities | 0.17.0-preview.18",
    "keywords": "Method DestroyEntity DestroyEntity(Entity) Declaration public void DestroyEntity(Entity e) Parameters Type Name Description Entity e DestroyEntity(EntityQuery) Records a command to destroy all entities matching a query. Declaration public void DestroyEntity(EntityQuery entityQuery) Parameters Type Name Description EntityQuery entityQuery The query specifying which entities from which the component is removed. Remarks The query is performed at playback time, not when the method is called."
  },
  "api/Unity.Entities.EntityCommandBuffer.Dispose.html": {
    "href": "api/Unity.Entities.EntityCommandBuffer.Dispose.html",
    "title": "Method Dispose | Entities | 0.17.0-preview.18",
    "keywords": "Method Dispose Dispose() Declaration public void Dispose()"
  },
  "api/Unity.Entities.EntityCommandBuffer.html": {
    "href": "api/Unity.Entities.EntityCommandBuffer.html",
    "title": "Struct EntityCommandBuffer | Entities | 0.17.0-preview.18",
    "keywords": "Struct EntityCommandBuffer A thread-safe command buffer that can buffer commands that affect entities and components for later playback. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [NativeContainer] [GenerateBurstMonoInterop(\"EntityCommandBuffer\")] public struct EntityCommandBuffer : IDisposable Constructors Name Description EntityCommandBuffer(Allocator) Creates a new command buffer. EntityCommandBuffer(Allocator, PlaybackPolicy) Creates a new command buffer. Properties Name Description IsCreated MinimumChunkSize Allows controlling the size of chunks allocated from the temp job allocator to back the command buffer. ShouldPlayback Controls whether this command buffer should play back. Methods Name Description AddBuffer<T>(Entity) AddComponent(Entity, ComponentType) AddComponent(Entity, ComponentTypes) Records a command to add one or more components to an entity. AddComponent(EntityQuery, ComponentType) Records a command to add a component to all entities matching a query. AddComponent(EntityQuery, ComponentTypes) Records a command to add one or more components to all entities matching a query. AddComponent<T>(Entity) AddComponent<T>(Entity, T) AddComponent<T>(EntityQuery) Records a command to add a component to all entities matching a query. AddSharedComponent<T>(Entity, T) AddSharedComponent<T>(EntityQuery, T) Records a command to add a shared component to all entities matching a query. AppendToBuffer<T>(Entity, T) Appends a single element to the end of a dynamic buffer component. AsParallelWriter() CreateEntity() Create an entity with no components. CreateEntity(EntityArchetype) Create an entity with specified archetype. DestroyEntity(Entity) DestroyEntity(EntityQuery) Records a command to destroy all entities matching a query. Dispose() Instantiate(Entity) Playback(EntityManager) Play back all recorded operations against an entity manager. Playback(ExclusiveEntityTransaction) Play back all recorded operations with an exclusive entity transaction. BeginExclusiveEntityTransaction() . RemoveComponent(Entity, ComponentType) RemoveComponent(Entity, ComponentTypes) Records a command to remove one or more components from an entity. RemoveComponent(EntityQuery, ComponentType) Records a command to remove a component from all entities matching a query. RemoveComponent(EntityQuery, ComponentTypes) Records a command to remove one or more components from all entities matching a query. RemoveComponent<T>(Entity) RemoveComponent<T>(EntityQuery) Records a command to remove a component from all entities matching a query. SetBuffer<T>(Entity) SetComponent<T>(Entity, T) SetSharedComponent<T>(Entity, T) Extension Methods EntityCommandBufferManagedComponentExtensions.AddComponent<T>(EntityCommandBuffer, Entity, T) EntityCommandBufferManagedComponentExtensions.AddComponent<T>(EntityCommandBuffer, Entity) EntityCommandBufferManagedComponentExtensions.SetComponent<T>(EntityCommandBuffer, Entity, T)"
  },
  "api/Unity.Entities.EntityCommandBuffer.Instantiate.html": {
    "href": "api/Unity.Entities.EntityCommandBuffer.Instantiate.html",
    "title": "Method Instantiate | Entities | 0.17.0-preview.18",
    "keywords": "Method Instantiate Instantiate(Entity) Declaration public Entity Instantiate(Entity e) Parameters Type Name Description Entity e Returns Type Description Entity"
  },
  "api/Unity.Entities.EntityCommandBuffer.IsCreated.html": {
    "href": "api/Unity.Entities.EntityCommandBuffer.IsCreated.html",
    "title": "Property IsCreated | Entities | 0.17.0-preview.18",
    "keywords": "Property IsCreated IsCreated Declaration public bool IsCreated { get; } Property Value Type Description Boolean"
  },
  "api/Unity.Entities.EntityCommandBuffer.MinimumChunkSize.html": {
    "href": "api/Unity.Entities.EntityCommandBuffer.MinimumChunkSize.html",
    "title": "Property MinimumChunkSize | Entities | 0.17.0-preview.18",
    "keywords": "Property MinimumChunkSize MinimumChunkSize Allows controlling the size of chunks allocated from the temp job allocator to back the command buffer. Declaration public int MinimumChunkSize { get; set; } Property Value Type Description Int32"
  },
  "api/Unity.Entities.EntityCommandBuffer.ParallelWriter.AddBuffer.html": {
    "href": "api/Unity.Entities.EntityCommandBuffer.ParallelWriter.AddBuffer.html",
    "title": "Method AddBuffer | Entities | 0.17.0-preview.18",
    "keywords": "Method AddBuffer AddBuffer<T>(Int32, Entity) Declaration public DynamicBuffer<T> AddBuffer<T>(int sortKey, Entity e) where T : struct, IBufferElementData Parameters Type Name Description Int32 sortKey Entity e Returns Type Description DynamicBuffer <T> Type Parameters Name Description T"
  },
  "api/Unity.Entities.EntityCommandBuffer.ParallelWriter.AddComponent.html": {
    "href": "api/Unity.Entities.EntityCommandBuffer.ParallelWriter.AddComponent.html",
    "title": "Method AddComponent | Entities | 0.17.0-preview.18",
    "keywords": "Method AddComponent AddComponent<T>(Int32, Entity, T) Declaration public void AddComponent<T>(int sortKey, Entity e, T component) where T : struct, IComponentData Parameters Type Name Description Int32 sortKey Entity e T component Type Parameters Name Description T AddComponent<T>(Int32, Entity) Declaration public void AddComponent<T>(int sortKey, Entity e) where T : struct, IComponentData Parameters Type Name Description Int32 sortKey Entity e Type Parameters Name Description T AddComponent(Int32, Entity, ComponentType) Declaration public void AddComponent(int sortKey, Entity e, ComponentType componentType) Parameters Type Name Description Int32 sortKey Entity e ComponentType componentType AddComponent(Int32, Entity, ComponentTypes) Records a command to add one or more components to an entity. Declaration public void AddComponent(int sortKey, Entity e, ComponentTypes types) Parameters Type Name Description Int32 sortKey Entity e The entity to get additional components. ComponentTypes types The types of components to add."
  },
  "api/Unity.Entities.EntityCommandBuffer.ParallelWriter.AddSharedComponent.html": {
    "href": "api/Unity.Entities.EntityCommandBuffer.ParallelWriter.AddSharedComponent.html",
    "title": "Method AddSharedComponent | Entities | 0.17.0-preview.18",
    "keywords": "Method AddSharedComponent AddSharedComponent<T>(Int32, Entity, T) Declaration public void AddSharedComponent<T>(int sortKey, Entity e, T component) where T : struct, ISharedComponentData Parameters Type Name Description Int32 sortKey Entity e T component Type Parameters Name Description T"
  },
  "api/Unity.Entities.EntityCommandBuffer.ParallelWriter.AppendToBuffer.html": {
    "href": "api/Unity.Entities.EntityCommandBuffer.ParallelWriter.AppendToBuffer.html",
    "title": "Method AppendToBuffer | Entities | 0.17.0-preview.18",
    "keywords": "Method AppendToBuffer AppendToBuffer<T>(Int32, Entity, T) Appends a single element to the end of a dynamic buffer component. Declaration public void AppendToBuffer<T>(int sortKey, Entity e, T element) where T : struct, IBufferElementData Parameters Type Name Description Int32 sortKey A unique index for each set of commands added to the concurrent command buffer across all parallel jobs writing commands to this buffer. The entityInQueryIndex argument provided by Entities is an appropriate value to use for this parameter. You can calculate a similar index in an IJobChunk by adding the current entity index within a chunk to the Execute(ArchetypeChunk, Int32, Int32) method's firstEntityIndex argument. Entity e The entity to which the dynamic buffer belongs. T element The new element to add to the DynamicBuffer<T> component. Type Parameters Name Description T The IBufferElementData type stored by the DynamicBuffer<T> . Remarks At Playback(EntityManager) , this command throws an InvalidOperationException if the entity doesn't have a DynamicBuffer<T> component storing elements of type T. Exceptions Type Condition InvalidOperationException Thrown if the entity does not have a DynamicBuffer<T> component storing elements of type T at the time the entity command buffer executes this append-to-buffer command."
  },
  "api/Unity.Entities.EntityCommandBuffer.ParallelWriter.CreateEntity.html": {
    "href": "api/Unity.Entities.EntityCommandBuffer.ParallelWriter.CreateEntity.html",
    "title": "Method CreateEntity | Entities | 0.17.0-preview.18",
    "keywords": "Method CreateEntity CreateEntity(Int32, EntityArchetype) Create an entity with specified archetype. Declaration public Entity CreateEntity(int sortKey, EntityArchetype archetype) Parameters Type Name Description Int32 sortKey A unique index for each set of commands added to the concurrent command buffer across all parallel jobs writing commands to this buffer. The entityInQueryIndex argument provided by Entities is an appropriate value to use for this parameter. You can calculate a similar index in an IJobChunk by adding the current entity index within a chunk to the Execute(ArchetypeChunk, Int32, Int32) method's firstEntityIndex argument. EntityArchetype archetype The archetype of the new entity. Returns Type Description Entity Remarks Returns the new Entity. CreateEntity(Int32) Create an entity with no components. Declaration public Entity CreateEntity(int sortKey) Parameters Type Name Description Int32 sortKey A unique index for each set of commands added to the concurrent command buffer across all parallel jobs writing commands to this buffer. The entityInQueryIndex argument provided by Entities is an appropriate value to use for this parameter. You can calculate a similar index in an IJobChunk by adding the current entity index within a chunk to the Execute(ArchetypeChunk, Int32, Int32) method's firstEntityIndex argument. Returns Type Description Entity Remarks Returns the new Entity."
  },
  "api/Unity.Entities.EntityCommandBuffer.ParallelWriter.DestroyEntity.html": {
    "href": "api/Unity.Entities.EntityCommandBuffer.ParallelWriter.DestroyEntity.html",
    "title": "Method DestroyEntity | Entities | 0.17.0-preview.18",
    "keywords": "Method DestroyEntity DestroyEntity(Int32, Entity) Declaration public void DestroyEntity(int sortKey, Entity e) Parameters Type Name Description Int32 sortKey Entity e"
  },
  "api/Unity.Entities.EntityCommandBuffer.ParallelWriter.html": {
    "href": "api/Unity.Entities.EntityCommandBuffer.ParallelWriter.html",
    "title": "Struct EntityCommandBuffer.ParallelWriter | Entities | 0.17.0-preview.18",
    "keywords": "Struct EntityCommandBuffer.ParallelWriter Allows concurrent (deterministic) command buffer recording. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [NativeContainer] [NativeContainerIsAtomicWriteOnly] public struct ParallelWriter Methods Name Description AddBuffer<T>(Int32, Entity) AddComponent(Int32, Entity, ComponentType) AddComponent(Int32, Entity, ComponentTypes) Records a command to add one or more components to an entity. AddComponent<T>(Int32, Entity) AddComponent<T>(Int32, Entity, T) AddSharedComponent<T>(Int32, Entity, T) AppendToBuffer<T>(Int32, Entity, T) Appends a single element to the end of a dynamic buffer component. CreateEntity(Int32) Create an entity with no components. CreateEntity(Int32, EntityArchetype) Create an entity with specified archetype. DestroyEntity(Int32, Entity) Instantiate(Int32, Entity) RemoveComponent(Int32, Entity, ComponentType) RemoveComponent(Int32, Entity, ComponentTypes) Records a command to remove one or more components from an entity. RemoveComponent<T>(Int32, Entity) SetBuffer<T>(Int32, Entity) SetComponent<T>(Int32, Entity, T) SetSharedComponent<T>(Int32, Entity, T)"
  },
  "api/Unity.Entities.EntityCommandBuffer.ParallelWriter.Instantiate.html": {
    "href": "api/Unity.Entities.EntityCommandBuffer.ParallelWriter.Instantiate.html",
    "title": "Method Instantiate | Entities | 0.17.0-preview.18",
    "keywords": "Method Instantiate Instantiate(Int32, Entity) Declaration public Entity Instantiate(int sortKey, Entity e) Parameters Type Name Description Int32 sortKey Entity e Returns Type Description Entity"
  },
  "api/Unity.Entities.EntityCommandBuffer.ParallelWriter.RemoveComponent.html": {
    "href": "api/Unity.Entities.EntityCommandBuffer.ParallelWriter.RemoveComponent.html",
    "title": "Method RemoveComponent | Entities | 0.17.0-preview.18",
    "keywords": "Method RemoveComponent RemoveComponent<T>(Int32, Entity) Declaration public void RemoveComponent<T>(int sortKey, Entity e) Parameters Type Name Description Int32 sortKey Entity e Type Parameters Name Description T RemoveComponent(Int32, Entity, ComponentType) Declaration public void RemoveComponent(int sortKey, Entity e, ComponentType componentType) Parameters Type Name Description Int32 sortKey Entity e ComponentType componentType RemoveComponent(Int32, Entity, ComponentTypes) Records a command to remove one or more components from an entity. Declaration public void RemoveComponent(int sortKey, Entity e, ComponentTypes types) Parameters Type Name Description Int32 sortKey Entity e The entity to have the components removed. ComponentTypes types The types of components to remove."
  },
  "api/Unity.Entities.EntityCommandBuffer.ParallelWriter.SetBuffer.html": {
    "href": "api/Unity.Entities.EntityCommandBuffer.ParallelWriter.SetBuffer.html",
    "title": "Method SetBuffer | Entities | 0.17.0-preview.18",
    "keywords": "Method SetBuffer SetBuffer<T>(Int32, Entity) Declaration public DynamicBuffer<T> SetBuffer<T>(int sortKey, Entity e) where T : struct, IBufferElementData Parameters Type Name Description Int32 sortKey Entity e Returns Type Description DynamicBuffer <T> Type Parameters Name Description T"
  },
  "api/Unity.Entities.EntityCommandBuffer.ParallelWriter.SetComponent.html": {
    "href": "api/Unity.Entities.EntityCommandBuffer.ParallelWriter.SetComponent.html",
    "title": "Method SetComponent | Entities | 0.17.0-preview.18",
    "keywords": "Method SetComponent SetComponent<T>(Int32, Entity, T) Declaration public void SetComponent<T>(int sortKey, Entity e, T component) where T : struct, IComponentData Parameters Type Name Description Int32 sortKey Entity e T component Type Parameters Name Description T"
  },
  "api/Unity.Entities.EntityCommandBuffer.ParallelWriter.SetSharedComponent.html": {
    "href": "api/Unity.Entities.EntityCommandBuffer.ParallelWriter.SetSharedComponent.html",
    "title": "Method SetSharedComponent | Entities | 0.17.0-preview.18",
    "keywords": "Method SetSharedComponent SetSharedComponent<T>(Int32, Entity, T) Declaration public void SetSharedComponent<T>(int sortKey, Entity e, T component) where T : struct, ISharedComponentData Parameters Type Name Description Int32 sortKey Entity e T component Type Parameters Name Description T"
  },
  "api/Unity.Entities.EntityCommandBuffer.Playback.html": {
    "href": "api/Unity.Entities.EntityCommandBuffer.Playback.html",
    "title": "Method Playback | Entities | 0.17.0-preview.18",
    "keywords": "Method Playback Playback(EntityManager) Play back all recorded operations against an entity manager. Declaration public void Playback(EntityManager mgr) Parameters Type Name Description EntityManager mgr The entity manager that will receive the operations Playback(ExclusiveEntityTransaction) Play back all recorded operations with an exclusive entity transaction. BeginExclusiveEntityTransaction() . Declaration public void Playback(ExclusiveEntityTransaction mgr) Parameters Type Name Description ExclusiveEntityTransaction mgr The exclusive entity transaction that will process the operations"
  },
  "api/Unity.Entities.EntityCommandBuffer.RemoveComponent.html": {
    "href": "api/Unity.Entities.EntityCommandBuffer.RemoveComponent.html",
    "title": "Method RemoveComponent | Entities | 0.17.0-preview.18",
    "keywords": "Method RemoveComponent RemoveComponent<T>(Entity) Declaration public void RemoveComponent<T>(Entity e) Parameters Type Name Description Entity e Type Parameters Name Description T RemoveComponent(Entity, ComponentType) Declaration public void RemoveComponent(Entity e, ComponentType componentType) Parameters Type Name Description Entity e ComponentType componentType RemoveComponent(Entity, ComponentTypes) Records a command to remove one or more components from an entity. Declaration public void RemoveComponent(Entity e, ComponentTypes componentTypes) Parameters Type Name Description Entity e The entity to have components removed. ComponentTypes componentTypes The types of components to remove. RemoveComponent(EntityQuery, ComponentTypes) Records a command to remove one or more components from all entities matching a query. Declaration public void RemoveComponent(EntityQuery entityQuery, ComponentTypes componentTypes) Parameters Type Name Description EntityQuery entityQuery The query specifying which entities to remove the components from. ComponentTypes componentTypes The types of components to remove. Remarks The query is performed at playback time, not when the method is called. RemoveComponent(EntityQuery, ComponentType) Records a command to remove a component from all entities matching a query. Declaration public void RemoveComponent(EntityQuery entityQuery, ComponentType componentType) Parameters Type Name Description EntityQuery entityQuery The query specifying which entities from which the component is removed. ComponentType componentType Remarks The query is performed at playback time, not when the method is called. RemoveComponent<T>(EntityQuery) Records a command to remove a component from all entities matching a query. Declaration public void RemoveComponent<T>(EntityQuery entityQuery) Parameters Type Name Description EntityQuery entityQuery The query specifying which entities from which the component is removed. Type Parameters Name Description T The type of component to remove. Remarks The query is performed at playback time, not when the method is called."
  },
  "api/Unity.Entities.EntityCommandBuffer.SetBuffer.html": {
    "href": "api/Unity.Entities.EntityCommandBuffer.SetBuffer.html",
    "title": "Method SetBuffer | Entities | 0.17.0-preview.18",
    "keywords": "Method SetBuffer SetBuffer<T>(Entity) Declaration public DynamicBuffer<T> SetBuffer<T>(Entity e) where T : struct, IBufferElementData Parameters Type Name Description Entity e Returns Type Description DynamicBuffer <T> Type Parameters Name Description T"
  },
  "api/Unity.Entities.EntityCommandBuffer.SetComponent.html": {
    "href": "api/Unity.Entities.EntityCommandBuffer.SetComponent.html",
    "title": "Method SetComponent | Entities | 0.17.0-preview.18",
    "keywords": "Method SetComponent SetComponent<T>(Entity, T) Declaration public void SetComponent<T>(Entity e, T component) where T : struct, IComponentData Parameters Type Name Description Entity e T component Type Parameters Name Description T"
  },
  "api/Unity.Entities.EntityCommandBuffer.SetSharedComponent.html": {
    "href": "api/Unity.Entities.EntityCommandBuffer.SetSharedComponent.html",
    "title": "Method SetSharedComponent | Entities | 0.17.0-preview.18",
    "keywords": "Method SetSharedComponent SetSharedComponent<T>(Entity, T) Declaration public void SetSharedComponent<T>(Entity e, T component) where T : struct, ISharedComponentData Parameters Type Name Description Entity e T component Type Parameters Name Description T"
  },
  "api/Unity.Entities.EntityCommandBuffer.ShouldPlayback.html": {
    "href": "api/Unity.Entities.EntityCommandBuffer.ShouldPlayback.html",
    "title": "Property ShouldPlayback | Entities | 0.17.0-preview.18",
    "keywords": "Property ShouldPlayback ShouldPlayback Controls whether this command buffer should play back. Declaration public bool ShouldPlayback { get; set; } Property Value Type Description Boolean"
  },
  "api/Unity.Entities.EntityCommandBufferManagedComponentExtensions.AddComponent.html": {
    "href": "api/Unity.Entities.EntityCommandBufferManagedComponentExtensions.AddComponent.html",
    "title": "Method AddComponent | Entities | 0.17.0-preview.18",
    "keywords": "Method AddComponent AddComponent<T>(EntityCommandBuffer, Entity, T) Declaration public static void AddComponent<T>(this EntityCommandBuffer ecb, Entity e, T component) where T : class, IComponentData Parameters Type Name Description EntityCommandBuffer ecb Entity e T component Type Parameters Name Description T AddComponent<T>(EntityCommandBuffer, Entity) Declaration public static void AddComponent<T>(this EntityCommandBuffer ecb, Entity e) where T : class, IComponentData Parameters Type Name Description EntityCommandBuffer ecb Entity e Type Parameters Name Description T"
  },
  "api/Unity.Entities.EntityCommandBufferManagedComponentExtensions.html": {
    "href": "api/Unity.Entities.EntityCommandBufferManagedComponentExtensions.html",
    "title": "Class EntityCommandBufferManagedComponentExtensions | Entities | 0.17.0-preview.18",
    "keywords": "Class EntityCommandBufferManagedComponentExtensions Inheritance Object EntityCommandBufferManagedComponentExtensions Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class EntityCommandBufferManagedComponentExtensions Methods Name Description AddComponent<T>(EntityCommandBuffer, Entity) AddComponent<T>(EntityCommandBuffer, Entity, T) SetComponent<T>(EntityCommandBuffer, Entity, T)"
  },
  "api/Unity.Entities.EntityCommandBufferManagedComponentExtensions.SetComponent.html": {
    "href": "api/Unity.Entities.EntityCommandBufferManagedComponentExtensions.SetComponent.html",
    "title": "Method SetComponent | Entities | 0.17.0-preview.18",
    "keywords": "Method SetComponent SetComponent<T>(EntityCommandBuffer, Entity, T) Declaration public static void SetComponent<T>(this EntityCommandBuffer ecb, Entity e, T component) where T : class, IComponentData Parameters Type Name Description EntityCommandBuffer ecb Entity e T component Type Parameters Name Description T"
  },
  "api/Unity.Entities.EntityCommandBufferSystem.AddJobHandleForProducer.html": {
    "href": "api/Unity.Entities.EntityCommandBufferSystem.AddJobHandleForProducer.html",
    "title": "Method AddJobHandleForProducer | Entities | 0.17.0-preview.18",
    "keywords": "Method AddJobHandleForProducer AddJobHandleForProducer(JobHandle) Adds the specified JobHandle to this system's list of dependencies. Declaration public void AddJobHandleForProducer(JobHandle producerJob) Parameters Type Name Description JobHandle producerJob The JobHandle of a Job which this buffer system should wait for before playing back its pending command buffers. Remarks When you write to a command buffer from a Job, you must add the JobHandle of that Job to this buffer system's dependency list by calling this function. Otherwise, the buffer system could execute the commands currently in the command buffer while the writing Job is still in progress. Examples The following example illustrates how to use one of the default EntityCommandBuffer systems. The code selects all entities that have one custom component, in this case, AsyncProcessInfo , and processes each entity in the Execute() function of an Unity.Entities.IJobForEachWithEntity`1 Job (the actual process is not shown since that part of the example is hypothetical). After processing, the Job uses an EntityCommandBuffer to remove the ProcessInfo component and add an ProcessCompleteTag component. Another system could use the ProcessCompleteTag to find entities that represent the end results of the process. public struct ProcessInfo: IComponentData{ public float Value; } public struct ProcessCompleteTag : IComponentData{} public class AsyncProcessJobSystem : JobComponentSystem { [BurstCompile] public struct ProcessInBackgroundJob : IJobForEachWithEntity<ProcessInfo> { [ReadOnly] public EntityCommandBuffer.ParallelWriter ConcurrentCommands; public void Execute(Entity entity, int index, [ReadOnly] ref ProcessInfo info) { // Process based on the ProcessInfo component, // then remove ProcessInfo and add a ProcessCompleteTag... ConcurrentCommands.RemoveComponent<ProcessInfo>(index, entity); ConcurrentCommands.AddComponent(index, entity, new ProcessCompleteTag()); } } protected override JobHandle OnUpdate(JobHandle inputDeps) { var job = new ProcessInBackgroundJob(); var ecbSystem = World.GetOrCreateSystem<EndSimulationEntityCommandBufferSystem>(); job.ConcurrentCommands = ecbSystem.CreateCommandBuffer().AsParallelWriter(); var handle = job.Schedule(this, inputDeps); ecbSystem.AddJobHandleForProducer(handle); return handle; } }"
  },
  "api/Unity.Entities.EntityCommandBufferSystem.CreateCommandBuffer.html": {
    "href": "api/Unity.Entities.EntityCommandBufferSystem.CreateCommandBuffer.html",
    "title": "Method CreateCommandBuffer | Entities | 0.17.0-preview.18",
    "keywords": "Method CreateCommandBuffer CreateCommandBuffer() Creates an EntityCommandBuffer and adds it to this system's list of command buffers. Declaration public EntityCommandBuffer CreateCommandBuffer() Returns Type Description EntityCommandBuffer A command buffer that will be executed by this system. Remarks This buffer system executes its list of command buffers during its OnUpdate() function in the order you created the command buffers. If you write to a command buffer in a Job, you must add the Job as a dependency of this system by calling AddJobHandleForProducer(JobHandle) . The dependency ensures that the buffer system waits for the Job to complete before executing the command buffer. If you write to a command buffer from a parallel Job, such as Unity.Entities.IJobForEach`1 or IJobChunk , you must use the concurrent version of the command buffer, provided by EntityCommandBuffer.ParallelWriter ."
  },
  "api/Unity.Entities.EntityCommandBufferSystem.html": {
    "href": "api/Unity.Entities.EntityCommandBufferSystem.html",
    "title": "Class EntityCommandBufferSystem | Entities | 0.17.0-preview.18",
    "keywords": "Class EntityCommandBufferSystem A system that provides EntityCommandBuffer objects for other systems. Inheritance Object ComponentSystemBase ComponentSystem EntityCommandBufferSystem BeginFixedStepSimulationEntityCommandBufferSystem BeginInitializationEntityCommandBufferSystem BeginPresentationEntityCommandBufferSystem BeginSimulationEntityCommandBufferSystem EndFixedStepSimulationEntityCommandBufferSystem EndInitializationEntityCommandBufferSystem EndSimulationEntityCommandBufferSystem Inherited Members ComponentSystem.PostUpdateCommands ComponentSystem.InitEntityQueryCache(Int32) ComponentSystem.Entities ComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.ExecutingSystemType ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetComponentTypeHandle<T>(Boolean) ComponentSystemBase.GetDynamicComponentTypeHandle(ComponentType) ComponentSystemBase.GetBufferTypeHandle<T>(Boolean) ComponentSystemBase.GetSharedComponentTypeHandle<T>() ComponentSystemBase.GetEntityTypeHandle() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.TryGetSingleton<T>(T) ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.TryGetSingletonEntity<T>(Entity) ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public abstract class EntityCommandBufferSystem : ComponentSystem Remarks Each system that uses the EntityCommandBuffer provided by a command buffer system must call CreateCommandBuffer() to create its own command buffer instance. This buffer system executes each of these separate command buffers in the order that you created them. The commands are executed during this system's OnUpdate() function. When you write to a command buffer from a Job, you must add the JobHandle of that Job to the buffer system's dependency list with AddJobHandleForProducer(JobHandle) . If you write to a command buffer from a Job that runs in parallel (and this includes both Unity.Entities.IJobForEach`1 and IJobChunk ), you must use the concurrent version of the command buffer ( AsParallelWriter() ). Executing the commands in an EntityCommandBuffer invokes the corresponding functions of the EntityManager . Any structural change, such as adding or removing entities, adding or removing components from entities, or changing shared component values, creates a sync-point in your application. At a sync point, all Jobs accessing entity components must complete before new Jobs can start. Such sync points make it difficult for the Job scheduler to fully utilize available computing power. To avoid sync points, you should use as few entity command buffer systems as possible. The default ECS World code creates a ComponentSystemGroup setup with three main groups, InitializationSystemGroup , SimulationSystemGroup , and PresentationSystemGroup . Each of these main groups provides an existing EntityCommandBufferSystem executed at the start and the end of other, child systems. Note that unused command buffers systems do not create sync points because there are no commands to execute and thus no structural changes created. The EntityCommandBufferSystem class is abstract, so you must implement a subclass to create your own entity command buffer system. However, none of its methods are abstract, so you do not need to implement your own logic. Typically, you create an EntityCommandBufferSystem subclass to create a named buffer system for other systems to use and update it at an appropriate place in a custom ComponentSystemGroup setup. Methods Name Description AddJobHandleForProducer(JobHandle) Adds the specified JobHandle to this system's list of dependencies. CreateCommandBuffer() Creates an EntityCommandBuffer and adds it to this system's list of command buffers. OnCreate() Initializes this command buffer system. OnDestroy() Destroys this system, executing any pending command buffers first. OnUpdate() Executes the command buffers in this system in the order they were created. Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Entities.EntityCommandBufferSystem.OnCreate.html": {
    "href": "api/Unity.Entities.EntityCommandBufferSystem.OnCreate.html",
    "title": "Method OnCreate | Entities | 0.17.0-preview.18",
    "keywords": "Method OnCreate OnCreate() Initializes this command buffer system. Declaration protected override void OnCreate() Overrides ComponentSystemBase.OnCreate() Remarks If you override this method, you should call base.OnCreate() to retain the default initialization logic."
  },
  "api/Unity.Entities.EntityCommandBufferSystem.OnDestroy.html": {
    "href": "api/Unity.Entities.EntityCommandBufferSystem.OnDestroy.html",
    "title": "Method OnDestroy | Entities | 0.17.0-preview.18",
    "keywords": "Method OnDestroy OnDestroy() Destroys this system, executing any pending command buffers first. Declaration protected override void OnDestroy() Overrides ComponentSystemBase.OnDestroy() Remarks If you override this method, you should call base.OnDestroy() to retain the default destruction logic."
  },
  "api/Unity.Entities.EntityCommandBufferSystem.OnUpdate.html": {
    "href": "api/Unity.Entities.EntityCommandBufferSystem.OnUpdate.html",
    "title": "Method OnUpdate | Entities | 0.17.0-preview.18",
    "keywords": "Method OnUpdate OnUpdate() Executes the command buffers in this system in the order they were created. Declaration protected override void OnUpdate() Overrides ComponentSystem.OnUpdate() Remarks If you override this method, you should call base.OnUpdate() to retain the default update logic."
  },
  "api/Unity.Entities.EntityContainer.-ctor.html": {
    "href": "api/Unity.Entities.EntityContainer.-ctor.html",
    "title": "Constructor EntityContainer | Entities | 0.17.0-preview.18",
    "keywords": "Constructor EntityContainer EntityContainer(EntityManager, Entity, Boolean) Declaration public EntityContainer(EntityManager entityManager, Entity entity, bool readOnly = true) Parameters Type Name Description EntityManager entityManager Entity entity Boolean readOnly"
  },
  "api/Unity.Entities.EntityContainer.Entity.html": {
    "href": "api/Unity.Entities.EntityContainer.Entity.html",
    "title": "Field Entity | Entities | 0.17.0-preview.18",
    "keywords": "Field Entity Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public readonly Entity Entity Returns Type Description Entity"
  },
  "api/Unity.Entities.EntityContainer.EntityManager.html": {
    "href": "api/Unity.Entities.EntityContainer.EntityManager.html",
    "title": "Field EntityManager | Entities | 0.17.0-preview.18",
    "keywords": "Field EntityManager Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public readonly EntityManager EntityManager Returns Type Description EntityManager"
  },
  "api/Unity.Entities.EntityContainer.GetComponentCount.html": {
    "href": "api/Unity.Entities.EntityContainer.GetComponentCount.html",
    "title": "Method GetComponentCount | Entities | 0.17.0-preview.18",
    "keywords": "Method GetComponentCount GetComponentCount() Declaration public int GetComponentCount() Returns Type Description Int32"
  },
  "api/Unity.Entities.EntityContainer.html": {
    "href": "api/Unity.Entities.EntityContainer.html",
    "title": "Struct EntityContainer | Entities | 0.17.0-preview.18",
    "keywords": "Struct EntityContainer Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct EntityContainer Constructors Name Description EntityContainer(EntityManager, Entity, Boolean) Fields Name Description Entity EntityManager IsReadOnly Methods Name Description GetComponentCount()"
  },
  "api/Unity.Entities.EntityContainer.IsReadOnly.html": {
    "href": "api/Unity.Entities.EntityContainer.IsReadOnly.html",
    "title": "Field IsReadOnly | Entities | 0.17.0-preview.18",
    "keywords": "Field IsReadOnly Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public readonly bool IsReadOnly Returns Type Description Boolean"
  },
  "api/Unity.Entities.EntityGuid.a.html": {
    "href": "api/Unity.Entities.EntityGuid.a.html",
    "title": "Field a | Entities | 0.17.0-preview.18",
    "keywords": "Field a This field, when combined with b , is for working with EntityGuid as opaque bits (the packing may change again in the future, as there are still unused bits remaining). Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public ulong a Returns Type Description UInt64"
  },
  "api/Unity.Entities.EntityGuid.b.html": {
    "href": "api/Unity.Entities.EntityGuid.b.html",
    "title": "Field b | Entities | 0.17.0-preview.18",
    "keywords": "Field b Use same as a field. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public ulong b Returns Type Description UInt64"
  },
  "api/Unity.Entities.EntityGuid.CompareTo.html": {
    "href": "api/Unity.Entities.EntityGuid.CompareTo.html",
    "title": "Method CompareTo | Entities | 0.17.0-preview.18",
    "keywords": "Method CompareTo CompareTo(EntityGuid) Declaration public int CompareTo(EntityGuid other) Parameters Type Name Description EntityGuid other Returns Type Description Int32"
  },
  "api/Unity.Entities.EntityGuid.-ctor.html": {
    "href": "api/Unity.Entities.EntityGuid.-ctor.html",
    "title": "Constructor EntityGuid | Entities | 0.17.0-preview.18",
    "keywords": "Constructor EntityGuid EntityGuid(Int32, Byte, UInt32) Declaration public EntityGuid(int originatingId, byte namespaceId, uint serial) Parameters Type Name Description Int32 originatingId Byte namespaceId UInt32 serial"
  },
  "api/Unity.Entities.EntityGuid.Equals.html": {
    "href": "api/Unity.Entities.EntityGuid.Equals.html",
    "title": "Method Equals | Entities | 0.17.0-preview.18",
    "keywords": "Method Equals Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object) Equals(EntityGuid) Declaration public bool Equals(EntityGuid other) Parameters Type Name Description EntityGuid other Returns Type Description Boolean"
  },
  "api/Unity.Entities.EntityGuid.GetHashCode.html": {
    "href": "api/Unity.Entities.EntityGuid.GetHashCode.html",
    "title": "Method GetHashCode | Entities | 0.17.0-preview.18",
    "keywords": "Method GetHashCode GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode()"
  },
  "api/Unity.Entities.EntityGuid.html": {
    "href": "api/Unity.Entities.EntityGuid.html",
    "title": "Struct EntityGuid | Entities | 0.17.0-preview.18",
    "keywords": "Struct EntityGuid This component is attached to converted Entities and is guaranteed to be unique within a World. It can be used to map back to the authoring GameObject from which it was converted. Note that an EntityGuid does not have enough information to be persistent across sessions. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] public struct EntityGuid : IComponentData, IEquatable<EntityGuid>, IComparable<EntityGuid> Constructors Name Description EntityGuid(Int32, Byte, UInt32) Fields Name Description a This field, when combined with b , is for working with EntityGuid as opaque bits (the packing may change again in the future, as there are still unused bits remaining). b Use same as a field. Null Properties Name Description OriginatingId Session-unique ID for originating object (typically the authoring GameObject's InstanceID). Serial A unique number used to differentiate Entities associated with the same originating object and namespace. Methods Name Description CompareTo(EntityGuid) Equals(Object) Equals(EntityGuid) GetHashCode() ToString() Operators Name Description Equality(EntityGuid, EntityGuid) Inequality(EntityGuid, EntityGuid)"
  },
  "api/Unity.Entities.EntityGuid.Null.html": {
    "href": "api/Unity.Entities.EntityGuid.Null.html",
    "title": "Field Null | Entities | 0.17.0-preview.18",
    "keywords": "Field Null Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static readonly EntityGuid Null Returns Type Description EntityGuid"
  },
  "api/Unity.Entities.EntityGuid.op_Equality.html": {
    "href": "api/Unity.Entities.EntityGuid.op_Equality.html",
    "title": "Operator Equality | Entities | 0.17.0-preview.18",
    "keywords": "Operator Equality Equality(EntityGuid, EntityGuid) Declaration public static bool operator ==(in EntityGuid lhs, in EntityGuid rhs) Parameters Type Name Description EntityGuid lhs EntityGuid rhs Returns Type Description Boolean"
  },
  "api/Unity.Entities.EntityGuid.op_Inequality.html": {
    "href": "api/Unity.Entities.EntityGuid.op_Inequality.html",
    "title": "Operator Inequality | Entities | 0.17.0-preview.18",
    "keywords": "Operator Inequality Inequality(EntityGuid, EntityGuid) Declaration public static bool operator !=(in EntityGuid lhs, in EntityGuid rhs) Parameters Type Name Description EntityGuid lhs EntityGuid rhs Returns Type Description Boolean"
  },
  "api/Unity.Entities.EntityGuid.OriginatingId.html": {
    "href": "api/Unity.Entities.EntityGuid.OriginatingId.html",
    "title": "Property OriginatingId | Entities | 0.17.0-preview.18",
    "keywords": "Property OriginatingId OriginatingId Session-unique ID for originating object (typically the authoring GameObject's InstanceID). Declaration public int OriginatingId { get; } Property Value Type Description Int32"
  },
  "api/Unity.Entities.EntityGuid.Serial.html": {
    "href": "api/Unity.Entities.EntityGuid.Serial.html",
    "title": "Property Serial | Entities | 0.17.0-preview.18",
    "keywords": "Property Serial Serial A unique number used to differentiate Entities associated with the same originating object and namespace. Declaration public uint Serial { get; } Property Value Type Description UInt32"
  },
  "api/Unity.Entities.EntityGuid.ToString.html": {
    "href": "api/Unity.Entities.EntityGuid.ToString.html",
    "title": "Method ToString | Entities | 0.17.0-preview.18",
    "keywords": "Method ToString ToString() Declaration public override string ToString() Returns Type Description String Overrides ValueType.ToString()"
  },
  "api/Unity.Entities.EntityInChunk.CompareTo.html": {
    "href": "api/Unity.Entities.EntityInChunk.CompareTo.html",
    "title": "Method CompareTo | Entities | 0.17.0-preview.18",
    "keywords": "Method CompareTo CompareTo(EntityInChunk) Declaration public int CompareTo(EntityInChunk other) Parameters Type Name Description EntityInChunk other Returns Type Description Int32"
  },
  "api/Unity.Entities.EntityInChunk.Equals.html": {
    "href": "api/Unity.Entities.EntityInChunk.Equals.html",
    "title": "Method Equals | Entities | 0.17.0-preview.18",
    "keywords": "Method Equals Equals(EntityInChunk) Declaration public bool Equals(EntityInChunk other) Parameters Type Name Description EntityInChunk other Returns Type Description Boolean"
  },
  "api/Unity.Entities.EntityInChunk.html": {
    "href": "api/Unity.Entities.EntityInChunk.html",
    "title": "Struct EntityInChunk | Entities | 0.17.0-preview.18",
    "keywords": "Struct EntityInChunk Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct EntityInChunk : IComparable<EntityInChunk>, IEquatable<EntityInChunk> Methods Name Description CompareTo(EntityInChunk) Equals(EntityInChunk)"
  },
  "api/Unity.Entities.EntityManager.AddBuffer.html": {
    "href": "api/Unity.Entities.EntityManager.AddBuffer.html",
    "title": "Method AddBuffer | Entities | 0.17.0-preview.18",
    "keywords": "Method AddBuffer AddBuffer<T>(Entity) Adds a dynamic buffer component to an entity. Declaration public DynamicBuffer<T> AddBuffer<T>(Entity entity) where T : struct, IBufferElementData Parameters Type Name Description Entity entity The entity. Returns Type Description DynamicBuffer <T> The buffer. Type Parameters Name Description T The type of buffer element. Must implement IBufferElementData. Remarks A buffer component stores the number of elements inside the chunk defined by the [InternalBufferCapacity] attribute applied to the buffer element type declaration. Any additional elements are stored in a separate memory block that is managed by the EntityManager. Adding a component changes an entity's archetype and results in the entity being moved to a different chunk. (You can add a buffer component with the regular AddComponent methods, but unlike those methods, this method conveniently also returns the new buffer.) Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before adding the buffer and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. See Also InternalBufferCapacityAttribute"
  },
  "api/Unity.Entities.EntityManager.AddChunkComponentData.html": {
    "href": "api/Unity.Entities.EntityManager.AddChunkComponentData.html",
    "title": "Method AddChunkComponentData | Entities | 0.17.0-preview.18",
    "keywords": "Method AddChunkComponentData AddChunkComponentData<T>(Entity) Adds a chunk component to the specified entity. Returns true if the chunk component was added, false if the entity already had the chunk component. (The chunk component's data is set either way.) Declaration public bool AddChunkComponentData<T>(Entity entity) where T : struct, IComponentData Parameters Type Name Description Entity entity The entity. Returns Type Description Boolean Type Parameters Name Description T The type of component, which must implement IComponentData. Remarks Adding a chunk component to an entity changes that entity's archetype and results in the entity being moved to a different chunk, either one that already has an archetype containing the chunk component or a new chunk. A chunk component is common to all entities in a chunk. You can access a chunk IComponentData instance through either the chunk itself or through an entity stored in that chunk. In either case, getting or setting the component reads or writes the same data. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before adding the component and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. AddChunkComponentData<T>(EntityQuery, T) Adds a component to each of the chunks identified by a EntityQuery and set the component values. Declaration public void AddChunkComponentData<T>(EntityQuery entityQuery, T componentData) where T : struct, IComponentData Parameters Type Name Description EntityQuery entityQuery The EntityQuery identifying the chunks to modify. T componentData The data to set. Type Parameters Name Description T The type of component, which must implement IComponentData. Remarks This function finds all chunks whose archetype satisfies the EntityQuery and adds the specified component to them. A chunk component is common to all entities in a chunk. You can access a chunk IComponentData instance through either the chunk itself or through an entity stored in that chunk. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before adding the component and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores."
  },
  "api/Unity.Entities.EntityManager.AddComponent.html": {
    "href": "api/Unity.Entities.EntityManager.AddComponent.html",
    "title": "Method AddComponent | Entities | 0.17.0-preview.18",
    "keywords": "Method AddComponent AddComponent(Entity, ComponentType) Adds a component to an entity. Declaration public bool AddComponent(Entity entity, ComponentType componentType) Parameters Type Name Description Entity entity The Entity object. ComponentType componentType The type of component to add. Returns Type Description Boolean Remarks This method can add any kind of component except chunk components and component objects. For chunk components, use AddChunkComponentData<T>(Entity) . For component objects, use AddComponentObject(Entity, Object) . Adding a component changes the entity's archetype and results in the entity being moved to a different chunk. The added component has the default values for the type. If the Entity object refers to an entity that has been destroyed, this function throws an ArgumentError exception. If the Entity object refers to an entity that already has the specified ComponentType , the function returns false without performing any modifications. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before adding the component and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. AddComponent<T>(Entity) Adds a component to an entity. Declaration public bool AddComponent<T>(Entity entity) Parameters Type Name Description Entity entity The Entity object. Returns Type Description Boolean Type Parameters Name Description T The type of component to add. Remarks This method can add any kind of component except chunk components and component objects. For chunk components, use AddChunkComponentData<T>(Entity) . For component objects, use AddComponentObject(Entity, Object) . Adding a component changes the entity's archetype and results in the entity being moved to a different chunk. The added component has the default values for the type. If the Entity object refers to an entity that has been destroyed, this function throws an ArgumentError exception. If the Entity object refers to an entity that already has the specified ComponentType of type T, the function returns false without performing any modifications. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before adding the component and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. AddComponent(EntityQuery, ComponentType) Adds a component to a set of entities defined by a EntityQuery. Declaration public void AddComponent(EntityQuery entityQuery, ComponentType componentType) Parameters Type Name Description EntityQuery entityQuery The EntityQuery defining the entities to modify. ComponentType componentType The type of component to add. Remarks Adding a component changes an entity's archetype and results in the entity being moved to a different chunk. The added components have the default values for the type. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before adding the component and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. AddComponent(EntityQuery, ComponentTypes) Adds components to a set of entities defined by a EntityQuery. Declaration public void AddComponent(EntityQuery entityQuery, ComponentTypes componentTypes) Parameters Type Name Description EntityQuery entityQuery The EntityQuery defining the entities to modify. ComponentTypes componentTypes The type of components to add. Remarks Adding a component changes an entity's archetype and results in the entity being moved to a different chunk. The added components have the default values for the type. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before adding the component and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. AddComponent<T>(EntityQuery) Adds a component to a set of entities defined by a EntityQuery. Declaration public void AddComponent<T>(EntityQuery entityQuery) Parameters Type Name Description EntityQuery entityQuery The EntityQuery defining the entities to modify. Type Parameters Name Description T The type of component to add. Remarks Adding a component changes an entity's archetype and results in the entity being moved to a different chunk. The added components have the default values for the type. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before adding the component and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. AddComponent(NativeArray<Entity>, ComponentType) Adds a component to a set of entities. Declaration public void AddComponent(NativeArray<Entity> entities, ComponentType componentType) Parameters Type Name Description NativeArray < Entity > entities An array of Entity objects. ComponentType componentType The type of component to add. Remarks Adding a component changes an entity's archetype and results in the entity being moved to a different chunk. The added components have the default values for the type. If an Entity object in the entities array refers to an entity that has been destroyed, this function throws an ArgumentError exception. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before creating these chunks and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. AddComponent<T>(NativeArray<Entity>) Adds a component to a set of entities. Declaration public void AddComponent<T>(NativeArray<Entity> entities) Parameters Type Name Description NativeArray < Entity > entities An array of Entity objects. Type Parameters Name Description T The type of component to add. Remarks Adding a component changes an entity's archetype and results in the entity being moved to a different chunk. The added components have the default values for the type. If an Entity object in the entities array refers to an entity that has been destroyed, this function throws an ArgumentError exception. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before creating these chunks and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores."
  },
  "api/Unity.Entities.EntityManager.AddComponentData.html": {
    "href": "api/Unity.Entities.EntityManager.AddComponentData.html",
    "title": "Method AddComponentData | Entities | 0.17.0-preview.18",
    "keywords": "Method AddComponentData AddComponentData<T>(EntityQuery, NativeArray<T>) Adds a component to a set of entities defines by the EntityQuery and sets the component of each entity in the query to the value in the component array. componentArray.Length must match entityQuery.ToEntityArray().Length. Declaration public void AddComponentData<T>(EntityQuery entityQuery, NativeArray<T> componentArray) where T : struct, IComponentData Parameters Type Name Description EntityQuery entityQuery THe EntityQuery defining the entities to add component to NativeArray <T> componentArray Type Parameters Name Description T AddComponentData<T>(Entity, T) Adds a component to an entity and set the value of that component. Returns true if the component was added, false if the entity already had the component. (The component's data is set either way.) Declaration public bool AddComponentData<T>(Entity entity, T componentData) where T : struct, IComponentData Parameters Type Name Description Entity entity The entity. T componentData The data to set. Returns Type Description Boolean Type Parameters Name Description T The type of component. Remarks Adding a component changes an entity's archetype and results in the entity being moved to a different chunk. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before adding the component and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores."
  },
  "api/Unity.Entities.EntityManager.AddComponentObject.html": {
    "href": "api/Unity.Entities.EntityManager.AddComponentObject.html",
    "title": "Method AddComponentObject | Entities | 0.17.0-preview.18",
    "keywords": "Method AddComponentObject AddComponentObject(Entity, Object) Adds a managed UnityEngine.Component object to an entity. Declaration public void AddComponentObject(Entity entity, object componentData) Parameters Type Name Description Entity entity The entity to modify. Object componentData An object inheriting UnityEngine.Component. Remarks Accessing data in a managed object forfeits many opportunities for increased performance. Adding managed objects to an entity should be avoided or used sparingly. Adding a component changes an entity's archetype and results in the entity being moved to a different chunk. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before adding the object and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. Exceptions Type Condition ArgumentNullException If the componentData object is not an instance of UnityEngine.Component."
  },
  "api/Unity.Entities.EntityManager.AddComponents.html": {
    "href": "api/Unity.Entities.EntityManager.AddComponents.html",
    "title": "Method AddComponents | Entities | 0.17.0-preview.18",
    "keywords": "Method AddComponents AddComponents(Entity, ComponentTypes) Adds a set of component to an entity. Declaration public void AddComponents(Entity entity, ComponentTypes types) Parameters Type Name Description Entity entity The entity to modify. ComponentTypes types The types of components to add. Remarks Adding components changes the entity's archetype and results in the entity being moved to a different chunk. The added components have the default values for the type. If the Entity object refers to an entity that has been destroyed, this function throws an ArgumentError exception. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before adding these components and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores."
  },
  "api/Unity.Entities.EntityManager.AddSharedComponentData.html": {
    "href": "api/Unity.Entities.EntityManager.AddSharedComponentData.html",
    "title": "Method AddSharedComponentData | Entities | 0.17.0-preview.18",
    "keywords": "Method AddSharedComponentData AddSharedComponentData<T>(Entity, T) Adds a shared component to an entity. Returns true if the shared component was added, false if the entity already had the shared component. (The shared component's data is set either way.) Declaration public bool AddSharedComponentData<T>(Entity entity, T componentData) where T : struct, ISharedComponentData Parameters Type Name Description Entity entity The entity. T componentData An instance of the shared component having the values to set. Returns Type Description Boolean Type Parameters Name Description T The shared component type. Remarks The fields of the componentData parameter are assigned to the added shared component. Adding a component to an entity changes its archetype and results in the entity being moved to a different chunk. The entity moves to a chunk with other entities that have the same shared component values. A new chunk is created if no chunk with the same archetype and shared component values currently exists. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before adding the component and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. AddSharedComponentData<T>(EntityQuery, T) Adds a shared component to a set of entities defined by a EntityQuery. Declaration public void AddSharedComponentData<T>(EntityQuery entityQuery, T componentData) where T : struct, ISharedComponentData Parameters Type Name Description EntityQuery entityQuery The EntityQuery defining a set of entities to modify. T componentData The data to set. Type Parameters Name Description T The data type of the shared component. Remarks The fields of the componentData parameter are assigned to all of the added shared components. Adding a component to an entity changes its archetype and results in the entity being moved to a different chunk. The entity moves to a chunk with other entities that have the same shared component values. A new chunk is created if no chunk with the same archetype and shared component values currently exists. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before adding the component and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores."
  },
  "api/Unity.Entities.EntityManager.BeginExclusiveEntityTransaction.html": {
    "href": "api/Unity.Entities.EntityManager.BeginExclusiveEntityTransaction.html",
    "title": "Method BeginExclusiveEntityTransaction | Entities | 0.17.0-preview.18",
    "keywords": "Method BeginExclusiveEntityTransaction BeginExclusiveEntityTransaction() Begins an exclusive entity transaction, which allows you to make structural changes inside a Job. Declaration public ExclusiveEntityTransaction BeginExclusiveEntityTransaction() Returns Type Description ExclusiveEntityTransaction A transaction object that provides an functions for making structural changes. Remarks ExclusiveEntityTransaction allows you to create and destroy entities from a job. The purpose is to enable procedural generation scenarios where instantiation on big scale must happen on jobs. As the name implies it is exclusive to any other access to the EntityManager. An exclusive entity transaction should be used on a manually created World that acts as a staging area to construct and setup entities. After the job has completed you can end the transaction and use MoveEntitiesFrom(EntityManager) to move the entities to an active World ."
  },
  "api/Unity.Entities.EntityManager.CompleteAllJobs.html": {
    "href": "api/Unity.Entities.EntityManager.CompleteAllJobs.html",
    "title": "Method CompleteAllJobs | Entities | 0.17.0-preview.18",
    "keywords": "Method CompleteAllJobs CompleteAllJobs() Waits for all Jobs to complete. Declaration public void CompleteAllJobs() Remarks Calling CompleteAllJobs() blocks the main thread until all currently running Jobs finish."
  },
  "api/Unity.Entities.EntityManager.CopyAndReplaceEntitiesFrom.html": {
    "href": "api/Unity.Entities.EntityManager.CopyAndReplaceEntitiesFrom.html",
    "title": "Method CopyAndReplaceEntitiesFrom | Entities | 0.17.0-preview.18",
    "keywords": "Method CopyAndReplaceEntitiesFrom CopyAndReplaceEntitiesFrom(EntityManager) Copies all entities from srcEntityManager and replaces all entities in this EntityManager Declaration public void CopyAndReplaceEntitiesFrom(EntityManager srcEntityManager) Parameters Type Name Description EntityManager srcEntityManager Remarks Guarantees that the chunk layout and order of the entities will match exactly, thus this method can be used for deterministic rollback. This feature is not complete and only supports a subset of the EntityManager features at the moment: Currently it copies all SystemStateComponents (They should not be copied) Currently does not support class based components"
  },
  "api/Unity.Entities.EntityManager.CopyEntities.html": {
    "href": "api/Unity.Entities.EntityManager.CopyEntities.html",
    "title": "Method CopyEntities | Entities | 0.17.0-preview.18",
    "keywords": "Method CopyEntities CopyEntities(NativeArray<Entity>, NativeArray<Entity>) Clones a set of entities, different from Instantiate because it does not remove the prefab tag component. Declaration public void CopyEntities(NativeArray<Entity> srcEntities, NativeArray<Entity> outputEntities) Parameters Type Name Description NativeArray < Entity > srcEntities The set of entities to clone NativeArray < Entity > outputEntities the set of entities that were cloned. outputEntities.Length must match srcEntities.Length Remarks The new entity has the same archetype and component values as the original, however system state components are removed from the clone. Entity references on components that are being cloned to entities inside the set are remapped to the instantiated entities. This method overload ignores the LinkedEntityGroup component, since the group of entities that will be cloned is passed explicitly. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before creating the entity and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores."
  },
  "api/Unity.Entities.EntityManager.CopyEntitiesFrom.html": {
    "href": "api/Unity.Entities.EntityManager.CopyEntitiesFrom.html",
    "title": "Method CopyEntitiesFrom | Entities | 0.17.0-preview.18",
    "keywords": "Method CopyEntitiesFrom CopyEntitiesFrom(EntityManager, NativeArray<Entity>, NativeArray<Entity>) Instantiates / Copies all entities from srcEntityManager and copies them into this EntityManager. Entity references on components that are being cloned to entities inside the srcEntities set are remapped to the instantiated entities. Declaration public void CopyEntitiesFrom(EntityManager srcEntityManager, NativeArray<Entity> srcEntities, NativeArray<Entity> outputEntities = default(NativeArray<Entity>)) Parameters Type Name Description EntityManager srcEntityManager NativeArray < Entity > srcEntities NativeArray < Entity > outputEntities"
  },
  "api/Unity.Entities.EntityManager.CreateArchetype.html": {
    "href": "api/Unity.Entities.EntityManager.CreateArchetype.html",
    "title": "Method CreateArchetype | Entities | 0.17.0-preview.18",
    "keywords": "Method CreateArchetype CreateArchetype(ComponentType[]) Creates an archetype from a set of component types. Declaration public EntityArchetype CreateArchetype(params ComponentType[] types) Parameters Type Name Description ComponentType [] types The component types to include as part of the archetype. Returns Type Description EntityArchetype The EntityArchetype object for the archetype. Remarks Creates a new archetype in the ECS framework's internal type registry, unless the archetype already exists."
  },
  "api/Unity.Entities.EntityManager.CreateEntity.html": {
    "href": "api/Unity.Entities.EntityManager.CreateEntity.html",
    "title": "Method CreateEntity | Entities | 0.17.0-preview.18",
    "keywords": "Method CreateEntity CreateEntity(EntityArchetype) Creates an entity having the specified archetype. Declaration public Entity CreateEntity(EntityArchetype archetype) Parameters Type Name Description EntityArchetype archetype The archetype for the new entity. Returns Type Description Entity The Entity object that you can use to access the entity. Remarks The EntityManager creates the entity in the first available chunk with the matching archetype that has enough space. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before creating the entity and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. CreateEntity(ComponentType[]) Creates an entity having components of the specified types. Declaration public Entity CreateEntity(params ComponentType[] types) Parameters Type Name Description ComponentType [] types The types of components to add to the new entity. Returns Type Description Entity The Entity object that you can use to access the entity. Remarks The EntityManager creates the entity in the first available chunk with the matching archetype that has enough space. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before creating the entity and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. CreateEntity() Creates an entity with no components. Declaration public Entity CreateEntity() Returns Type Description Entity The Entity object that you can use to access the entity. Remarks The EntityManager creates the entity in the first available chunk with the archetype having no components. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before creating the entity and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. CreateEntity(EntityArchetype, NativeArray<Entity>) Creates a set of entities of the specified archetype. Declaration public void CreateEntity(EntityArchetype archetype, NativeArray<Entity> entities) Parameters Type Name Description EntityArchetype archetype The archetype defining the structure for the new entities. NativeArray < Entity > entities An array to hold the Entity objects needed to access the new entities. The length of the array determines how many entities are created. Remarks Fills the NativeArray object assigned to the entities parameter with the Entity objects of the created entities. Each entity has the components specified by the EntityArchetype object assigned to the archetype parameter. The EntityManager adds these entities to the World entity list. Use the Entity objects in the array for further processing, such as setting the component values. CreateEntity(EntityArchetype, Int32, Allocator) Creates a set of entities of the specified archetype. Declaration public NativeArray<Entity> CreateEntity(EntityArchetype archetype, int entityCount, Allocator allocator) Parameters Type Name Description EntityArchetype archetype The archetype defining the structure for the new entities. Int32 entityCount The number of entities to create with the specified archetype. Allocator allocator How the created native array should be allocated. Returns Type Description NativeArray < Entity > A NativeArray of entities with the given archetype. Remarks Creates a NativeArray of entities, each of which has the components specified by the EntityArchetype object assigned to the archetype parameter. The EntityManager adds these entities to the World entity list. CreateEntity(EntityArchetype, Int32) Creates a set of entities of the specified archetype. Declaration public void CreateEntity(EntityArchetype archetype, int entityCount) Parameters Type Name Description EntityArchetype archetype The archetype defining the structure for the new entities. Int32 entityCount The number of entities to create with the specified archetype. Remarks Unlike the other overloads, this does not create an array of Entity values. You don't always need the Entity value of a newly created entity because maybe you only need to access the entity through queries."
  },
  "api/Unity.Entities.EntityManager.CreateEntityQuery.html": {
    "href": "api/Unity.Entities.EntityManager.CreateEntityQuery.html",
    "title": "Method CreateEntityQuery | Entities | 0.17.0-preview.18",
    "keywords": "Method CreateEntityQuery CreateEntityQuery(ComponentType[]) Creates a EntityQuery from an array of component types. Declaration public EntityQuery CreateEntityQuery(params ComponentType[] requiredComponents) Parameters Type Name Description ComponentType [] requiredComponents An array containing the component types. Returns Type Description EntityQuery The EntityQuery derived from the specified array of component types. See Also EntityQueryDesc CreateEntityQuery(EntityQueryDesc[]) Creates a EntityQuery from an EntityQueryDesc. Declaration public EntityQuery CreateEntityQuery(params EntityQueryDesc[] queriesDesc) Parameters Type Name Description EntityQueryDesc [] queriesDesc A queryDesc identifying a set of component types. Returns Type Description EntityQuery The EntityQuery corresponding to the queryDesc."
  },
  "api/Unity.Entities.EntityManager.CreateEntityRemapArray.html": {
    "href": "api/Unity.Entities.EntityManager.CreateEntityRemapArray.html",
    "title": "Method CreateEntityRemapArray | Entities | 0.17.0-preview.18",
    "keywords": "Method CreateEntityRemapArray CreateEntityRemapArray(Allocator) Creates a remapping array with one element for each entity in the World . Declaration public NativeArray<EntityRemapUtility.EntityRemapInfo> CreateEntityRemapArray(Allocator allocator) Parameters Type Name Description Allocator allocator The type of memory allocation to use when creating the array. Returns Type Description NativeArray < EntityRemapUtility.EntityRemapInfo > An array containing a no-op identity transformation for each entity."
  },
  "api/Unity.Entities.EntityManager.Debug.html": {
    "href": "api/Unity.Entities.EntityManager.Debug.html",
    "title": "Property Debug | Entities | 0.17.0-preview.18",
    "keywords": "Property Debug Debug An object providing debugging information and operations. Declaration public EntityManager.EntityManagerDebug Debug { get; } Property Value Type Description EntityManager.EntityManagerDebug"
  },
  "api/Unity.Entities.EntityManager.DestroyAndResetAllEntities.html": {
    "href": "api/Unity.Entities.EntityManager.DestroyAndResetAllEntities.html",
    "title": "Method DestroyAndResetAllEntities | Entities | 0.17.0-preview.18",
    "keywords": "Method DestroyAndResetAllEntities DestroyAndResetAllEntities() Destroys all entities in the EntityManager and resets the internal entity ID version table. Declaration public void DestroyAndResetAllEntities() Remarks This method can be used to reset an EntityManager for the purpose of creating data that can be written to disk with a deterministic, exact matching file on disk. It resets all chunk and entity version state so that it can be serialized to disk back to a state that is the same as a clean world. Archetypes and EntityQuery are not reset since they are often cached / owned by systems, but these are also not stored on disk."
  },
  "api/Unity.Entities.EntityManager.DestroyEntity.html": {
    "href": "api/Unity.Entities.EntityManager.DestroyEntity.html",
    "title": "Method DestroyEntity | Entities | 0.17.0-preview.18",
    "keywords": "Method DestroyEntity DestroyEntity(EntityQuery) Destroy all entities having a common set of component types. Declaration public void DestroyEntity(EntityQuery entityQuery) Parameters Type Name Description EntityQuery entityQuery Remarks Since entities in the same chunk share the same component structure, this function effectively destroys the chunks holding any entities identified by the entityQueryFilter parameter. DestroyEntity(NativeArray<Entity>) Destroys all entities in an array. Declaration public void DestroyEntity(NativeArray<Entity> entities) Parameters Type Name Description NativeArray < Entity > entities An array containing the Entity objects of the entities to destroy. Remarks Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before destroying the entity and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. DestroyEntity(NativeSlice<Entity>) Destroys all entities in a slice of an array. Declaration public void DestroyEntity(NativeSlice<Entity> entities) Parameters Type Name Description NativeSlice < Entity > entities The slice of an array containing the Entity objects of the entities to destroy. Remarks Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before destroying the entity and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. DestroyEntity(Entity) Destroys an entity. Declaration public void DestroyEntity(Entity entity) Parameters Type Name Description Entity entity The Entity object of the entity to destroy. Remarks Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before destroying the entity and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores."
  },
  "api/Unity.Entities.EntityManager.EndExclusiveEntityTransaction.html": {
    "href": "api/Unity.Entities.EntityManager.EndExclusiveEntityTransaction.html",
    "title": "Method EndExclusiveEntityTransaction | Entities | 0.17.0-preview.18",
    "keywords": "Method EndExclusiveEntityTransaction EndExclusiveEntityTransaction() Ends an exclusive entity transaction. Declaration public void EndExclusiveEntityTransaction() See Also ExclusiveEntityTransaction BeginExclusiveEntityTransaction()"
  },
  "api/Unity.Entities.EntityManager.EntityCapacity.html": {
    "href": "api/Unity.Entities.EntityManager.EntityCapacity.html",
    "title": "Property EntityCapacity | Entities | 0.17.0-preview.18",
    "keywords": "Property EntityCapacity EntityCapacity The capacity of the internal entities array. Declaration public int EntityCapacity { get; } Property Value Type Description Int32 The number of entities the array can hold before it must be resized. Remarks The entities array automatically resizes itself when the entity count approaches the capacity. You should rarely need to set this value directly. Important: when you set this value (or when the array automatically resizes), the EntityManager first ensures that all Jobs finish. This can prevent the Job scheduler from utilizing available CPU cores and threads, resulting in a temporary performance drop."
  },
  "api/Unity.Entities.EntityManager.EntityManagerDebug.CheckInternalConsistency.html": {
    "href": "api/Unity.Entities.EntityManager.EntityManagerDebug.CheckInternalConsistency.html",
    "title": "Method CheckInternalConsistency | Entities | 0.17.0-preview.18",
    "keywords": "Method CheckInternalConsistency CheckInternalConsistency() Declaration [Conditional(\"ENABLE_UNITY_COLLECTIONS_CHECKS\")] public void CheckInternalConsistency()"
  },
  "api/Unity.Entities.EntityManager.EntityManagerDebug.-ctor.html": {
    "href": "api/Unity.Entities.EntityManager.EntityManagerDebug.-ctor.html",
    "title": "Constructor EntityManagerDebug | Entities | 0.17.0-preview.18",
    "keywords": "Constructor EntityManagerDebug EntityManagerDebug(EntityManager) Declaration public EntityManagerDebug(EntityManager entityManager) Parameters Type Name Description EntityManager entityManager"
  },
  "api/Unity.Entities.EntityManager.EntityManagerDebug.EntityCount.html": {
    "href": "api/Unity.Entities.EntityManager.EntityManagerDebug.EntityCount.html",
    "title": "Property EntityCount | Entities | 0.17.0-preview.18",
    "keywords": "Property EntityCount EntityCount Declaration public int EntityCount { get; } Property Value Type Description Int32"
  },
  "api/Unity.Entities.EntityManager.EntityManagerDebug.GetComponentBoxed.html": {
    "href": "api/Unity.Entities.EntityManager.EntityManagerDebug.GetComponentBoxed.html",
    "title": "Method GetComponentBoxed | Entities | 0.17.0-preview.18",
    "keywords": "Method GetComponentBoxed GetComponentBoxed(Entity, ComponentType) Declaration public object GetComponentBoxed(Entity entity, ComponentType type) Parameters Type Name Description Entity entity ComponentType type Returns Type Description Object GetComponentBoxed(Entity, Type) Declaration public object GetComponentBoxed(Entity entity, Type type) Parameters Type Name Description Entity entity Type type Returns Type Description Object"
  },
  "api/Unity.Entities.EntityManager.EntityManagerDebug.GetEntityInfo.html": {
    "href": "api/Unity.Entities.EntityManager.EntityManagerDebug.GetEntityInfo.html",
    "title": "Method GetEntityInfo | Entities | 0.17.0-preview.18",
    "keywords": "Method GetEntityInfo GetEntityInfo(Entity) Declaration public string GetEntityInfo(Entity entity) Parameters Type Name Description Entity entity Returns Type Description String"
  },
  "api/Unity.Entities.EntityManager.EntityManagerDebug.html": {
    "href": "api/Unity.Entities.EntityManager.EntityManagerDebug.html",
    "title": "Class EntityManager.EntityManagerDebug | Entities | 0.17.0-preview.18",
    "keywords": "Class EntityManager.EntityManagerDebug Provides information and utility functions for debugging. Inheritance Object EntityManager.EntityManagerDebug Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class EntityManagerDebug Constructors Name Description EntityManagerDebug(EntityManager) Properties Name Description EntityCount MemoryInitPattern UseMemoryInitPattern Methods Name Description CheckInternalConsistency() GetComponentBoxed(Entity, Type) GetComponentBoxed(Entity, ComponentType) GetEntityInfo(Entity) IsSharedComponentManagerEmpty() LogEntityInfo(Entity) PoisonUnusedDataInAllChunks(EntityArchetype, Byte) SetGlobalSystemVersion(UInt32)"
  },
  "api/Unity.Entities.EntityManager.EntityManagerDebug.IsSharedComponentManagerEmpty.html": {
    "href": "api/Unity.Entities.EntityManager.EntityManagerDebug.IsSharedComponentManagerEmpty.html",
    "title": "Method IsSharedComponentManagerEmpty | Entities | 0.17.0-preview.18",
    "keywords": "Method IsSharedComponentManagerEmpty IsSharedComponentManagerEmpty() Declaration public bool IsSharedComponentManagerEmpty() Returns Type Description Boolean"
  },
  "api/Unity.Entities.EntityManager.EntityManagerDebug.LogEntityInfo.html": {
    "href": "api/Unity.Entities.EntityManager.EntityManagerDebug.LogEntityInfo.html",
    "title": "Method LogEntityInfo | Entities | 0.17.0-preview.18",
    "keywords": "Method LogEntityInfo LogEntityInfo(Entity) Declaration public void LogEntityInfo(Entity entity) Parameters Type Name Description Entity entity"
  },
  "api/Unity.Entities.EntityManager.EntityManagerDebug.MemoryInitPattern.html": {
    "href": "api/Unity.Entities.EntityManager.EntityManagerDebug.MemoryInitPattern.html",
    "title": "Property MemoryInitPattern | Entities | 0.17.0-preview.18",
    "keywords": "Property MemoryInitPattern MemoryInitPattern Declaration public byte MemoryInitPattern { get; set; } Property Value Type Description Byte"
  },
  "api/Unity.Entities.EntityManager.EntityManagerDebug.PoisonUnusedDataInAllChunks.html": {
    "href": "api/Unity.Entities.EntityManager.EntityManagerDebug.PoisonUnusedDataInAllChunks.html",
    "title": "Method PoisonUnusedDataInAllChunks | Entities | 0.17.0-preview.18",
    "keywords": "Method PoisonUnusedDataInAllChunks PoisonUnusedDataInAllChunks(EntityArchetype, Byte) Declaration public void PoisonUnusedDataInAllChunks(EntityArchetype archetype, byte value) Parameters Type Name Description EntityArchetype archetype Byte value"
  },
  "api/Unity.Entities.EntityManager.EntityManagerDebug.SetGlobalSystemVersion.html": {
    "href": "api/Unity.Entities.EntityManager.EntityManagerDebug.SetGlobalSystemVersion.html",
    "title": "Method SetGlobalSystemVersion | Entities | 0.17.0-preview.18",
    "keywords": "Method SetGlobalSystemVersion SetGlobalSystemVersion(UInt32) Declaration public void SetGlobalSystemVersion(uint version) Parameters Type Name Description UInt32 version"
  },
  "api/Unity.Entities.EntityManager.EntityManagerDebug.UseMemoryInitPattern.html": {
    "href": "api/Unity.Entities.EntityManager.EntityManagerDebug.UseMemoryInitPattern.html",
    "title": "Property UseMemoryInitPattern | Entities | 0.17.0-preview.18",
    "keywords": "Property UseMemoryInitPattern UseMemoryInitPattern Declaration public bool UseMemoryInitPattern { get; set; } Property Value Type Description Boolean"
  },
  "api/Unity.Entities.EntityManager.Equals.html": {
    "href": "api/Unity.Entities.EntityManager.Equals.html",
    "title": "Method Equals | Entities | 0.17.0-preview.18",
    "keywords": "Method Equals Equals(EntityManager) Declaration public bool Equals(EntityManager other) Parameters Type Name Description EntityManager other Returns Type Description Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object)"
  },
  "api/Unity.Entities.EntityManager.ExclusiveEntityTransactionDependency.html": {
    "href": "api/Unity.Entities.EntityManager.ExclusiveEntityTransactionDependency.html",
    "title": "Property ExclusiveEntityTransactionDependency | Entities | 0.17.0-preview.18",
    "keywords": "Property ExclusiveEntityTransactionDependency ExclusiveEntityTransactionDependency Declaration public JobHandle ExclusiveEntityTransactionDependency { get; set; } Property Value Type Description JobHandle"
  },
  "api/Unity.Entities.EntityManager.Exists.html": {
    "href": "api/Unity.Entities.EntityManager.Exists.html",
    "title": "Method Exists | Entities | 0.17.0-preview.18",
    "keywords": "Method Exists Exists(Entity) Reports whether an Entity object is still valid. Declaration public bool Exists(Entity entity) Parameters Type Name Description Entity entity The Entity object to check. Returns Type Description Boolean True, if Version matches the version of the current entity at Index in the entities array. Remarks An Entity object does not contain a reference to its entity. Instead, the Entity struct contains an index and a generational version number. When an entity is destroyed, the EntityManager increments the version of the entity within the internal array of entities. The index of a destroyed entity is recycled when a new entity is created. After an entity is destroyed, any existing Entity objects will still contain the older version number. This function compares the version numbers of the specified Entity object and the current version of the entity recorded in the entities array. If the versions are different, the Entity object no longer refers to an existing entity and cannot be used."
  },
  "api/Unity.Entities.EntityManager.GetAllArchetypes.html": {
    "href": "api/Unity.Entities.EntityManager.GetAllArchetypes.html",
    "title": "Method GetAllArchetypes | Entities | 0.17.0-preview.18",
    "keywords": "Method GetAllArchetypes GetAllArchetypes(NativeList<EntityArchetype>) Gets all the archetypes. Declaration public void GetAllArchetypes(NativeList<EntityArchetype> allArchetypes) Parameters Type Name Description Unity.Collections.NativeList < EntityArchetype > allArchetypes A native list to receive the EntityArchetype objects. Remarks The function adds the archetype objects to the existing contents of the list. The list is not cleared."
  },
  "api/Unity.Entities.EntityManager.GetAllChunks.html": {
    "href": "api/Unity.Entities.EntityManager.GetAllChunks.html",
    "title": "Method GetAllChunks | Entities | 0.17.0-preview.18",
    "keywords": "Method GetAllChunks GetAllChunks(Allocator) Gets all the chunks managed by this EntityManager. Declaration public NativeArray<ArchetypeChunk> GetAllChunks(Allocator allocator = Allocator.TempJob) Parameters Type Name Description Allocator allocator The type of allocation for creating the NativeArray to hold the ArchetypeChunk objects. Returns Type Description NativeArray < ArchetypeChunk > An array of ArchetypeChunk objects referring to all the chunks in the World . Remarks Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before getting these chunks and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores."
  },
  "api/Unity.Entities.EntityManager.GetAllEntities.html": {
    "href": "api/Unity.Entities.EntityManager.GetAllEntities.html",
    "title": "Method GetAllEntities | Entities | 0.17.0-preview.18",
    "keywords": "Method GetAllEntities GetAllEntities(Allocator) Gets all the entities managed by this EntityManager. Declaration public NativeArray<Entity> GetAllEntities(Allocator allocator = Allocator.Temp) Parameters Type Name Description Allocator allocator The type of allocation for creating the NativeArray to hold the Entity objects. Returns Type Description NativeArray < Entity > An array of Entity objects referring to all the entities in the World. Remarks Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before getting the entities and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores."
  },
  "api/Unity.Entities.EntityManager.GetAllUniqueSharedComponentData.html": {
    "href": "api/Unity.Entities.EntityManager.GetAllUniqueSharedComponentData.html",
    "title": "Method GetAllUniqueSharedComponentData | Entities | 0.17.0-preview.18",
    "keywords": "Method GetAllUniqueSharedComponentData GetAllUniqueSharedComponentData<T>(List<T>) Gets a list of all the unique instances of a shared component type. Declaration public void GetAllUniqueSharedComponentData<T>(List<T> sharedComponentValues) where T : struct, ISharedComponentData Parameters Type Name Description List <T> sharedComponentValues A List<T> object to receive the unique instances of the shared component of type T. Type Parameters Name Description T The type of shared component. Remarks All entities with the same archetype and the same values for a shared component are stored in the same set of chunks. This function finds the unique shared components existing across chunks and archetype and fills a list with copies of those components. GetAllUniqueSharedComponentData<T>(List<T>, List<Int32>) Gets a list of all unique shared components of the same type and a corresponding list of indices into the internal shared component list. Declaration public void GetAllUniqueSharedComponentData<T>(List<T> sharedComponentValues, List<int> sharedComponentIndices) where T : struct, ISharedComponentData Parameters Type Name Description List <T> sharedComponentValues List < Int32 > sharedComponentIndices Type Parameters Name Description T Remarks All entities with the same archetype and the same values for a shared component are stored in the same set of chunks. This function finds the unique shared components existing across chunks and archetype and fills a list with copies of those components and fills in a separate list with the indices of those components in the internal shared component list. You can use the indices to ask the same shared components directly by calling GetSharedComponentData<T>(Int32) , passing in the index. An index remains valid until the shared component order version changes. Check this version using GetSharedComponentOrderVersion<T>(T) ."
  },
  "api/Unity.Entities.EntityManager.GetAssignableComponentTypes.html": {
    "href": "api/Unity.Entities.EntityManager.GetAssignableComponentTypes.html",
    "title": "Method GetAssignableComponentTypes | Entities | 0.17.0-preview.18",
    "keywords": "Method GetAssignableComponentTypes GetAssignableComponentTypes(Type, List<Type>) Gets a list of the types of components that can be assigned to the specified component. Declaration public List<Type> GetAssignableComponentTypes(Type interfaceType, List<Type> listOut) Parameters Type Name Description Type interfaceType The type to check. List < Type > listOut The list to receive the output. Returns Type Description List < Type > The list that was passed in, containing the System.Types that can be assigned to interfaceType . Remarks Assignable components include those with the same compile-time type and those that inherit from the same compile-time type. GetAssignableComponentTypes(Type) Gets a list of the types of components that can be assigned to the specified component. Declaration public List<Type> GetAssignableComponentTypes(Type interfaceType) Parameters Type Name Description Type interfaceType The type to check. Returns Type Description List < Type > A new List object containing the System.Types that can be assigned to interfaceType . Remarks Assignable components include those with the same compile-time type and those that inherit from the same compile-time type."
  },
  "api/Unity.Entities.EntityManager.GetBuffer.html": {
    "href": "api/Unity.Entities.EntityManager.GetBuffer.html",
    "title": "Method GetBuffer | Entities | 0.17.0-preview.18",
    "keywords": "Method GetBuffer GetBuffer<T>(Entity) Gets the dynamic buffer of an entity. Declaration public DynamicBuffer<T> GetBuffer<T>(Entity entity) where T : struct, IBufferElementData Parameters Type Name Description Entity entity The entity. Returns Type Description DynamicBuffer <T> The DynamicBuffer object for accessing the buffer contents. Type Parameters Name Description T The type of the buffer's elements. Exceptions Type Condition ArgumentException Thrown if T is an unsupported type."
  },
  "api/Unity.Entities.EntityManager.GetBufferTypeHandle.html": {
    "href": "api/Unity.Entities.EntityManager.GetBufferTypeHandle.html",
    "title": "Method GetBufferTypeHandle | Entities | 0.17.0-preview.18",
    "keywords": "Method GetBufferTypeHandle GetBufferTypeHandle<T>(Boolean) Gets the dynamic type object required to access a chunk buffer containing elements of type T. Declaration public BufferTypeHandle<T> GetBufferTypeHandle<T>(bool isReadOnly) where T : struct, IBufferElementData Parameters Type Name Description Boolean isReadOnly Specify whether the access to the component through this object is read only or read and write. Returns Type Description BufferTypeHandle <T> The run-time type information of the buffer component. Type Parameters Name Description T The compile-time type of the buffer elements. Remarks To access a component stored in a chunk, you must have the type registry information for the component. This function provides that information for buffer components. Use the returned ComponentTypeHandle<T> object with the functions of an ArchetypeChunk object to get information about the components in that chunk and to access the component values."
  },
  "api/Unity.Entities.EntityManager.GetChunk.html": {
    "href": "api/Unity.Entities.EntityManager.GetChunk.html",
    "title": "Method GetChunk | Entities | 0.17.0-preview.18",
    "keywords": "Method GetChunk GetChunk(Entity) Gets the chunk in which the specified entity is stored. Declaration public ArchetypeChunk GetChunk(Entity entity) Parameters Type Name Description Entity entity The entity. Returns Type Description ArchetypeChunk The chunk containing the entity."
  },
  "api/Unity.Entities.EntityManager.GetChunkComponentData.html": {
    "href": "api/Unity.Entities.EntityManager.GetChunkComponentData.html",
    "title": "Method GetChunkComponentData | Entities | 0.17.0-preview.18",
    "keywords": "Method GetChunkComponentData GetChunkComponentData<T>(ArchetypeChunk) Gets the value of a chunk component. Declaration public T GetChunkComponentData<T>(ArchetypeChunk chunk) where T : struct, IComponentData Parameters Type Name Description ArchetypeChunk chunk The chunk. Returns Type Description T A struct of type T containing the component value. Type Parameters Name Description T The component type. Remarks A chunk component is common to all entities in a chunk. You can access a chunk IComponentData instance through either the chunk itself or through an entity stored in that chunk. Exceptions Type Condition ArgumentException Thrown if the ArchetypeChunk object is invalid. GetChunkComponentData<T>(Entity) Gets the value of chunk component for the chunk containing the specified entity. Declaration public T GetChunkComponentData<T>(Entity entity) where T : struct, IComponentData Parameters Type Name Description Entity entity The entity. Returns Type Description T A struct of type T containing the component value. Type Parameters Name Description T The component type. Remarks A chunk component is common to all entities in a chunk. You can access a chunk IComponentData instance through either the chunk itself or through an entity stored in that chunk."
  },
  "api/Unity.Entities.EntityManager.GetComponentCount.html": {
    "href": "api/Unity.Entities.EntityManager.GetComponentCount.html",
    "title": "Method GetComponentCount | Entities | 0.17.0-preview.18",
    "keywords": "Method GetComponentCount GetComponentCount(Entity) Gets the number of component types associated with an entity. Declaration public int GetComponentCount(Entity entity) Parameters Type Name Description Entity entity The entity. Returns Type Description Int32 The number of components."
  },
  "api/Unity.Entities.EntityManager.GetComponentData.html": {
    "href": "api/Unity.Entities.EntityManager.GetComponentData.html",
    "title": "Method GetComponentData | Entities | 0.17.0-preview.18",
    "keywords": "Method GetComponentData GetComponentData<T>(Entity) Gets the value of a component for an entity. Declaration public T GetComponentData<T>(Entity entity) where T : struct, IComponentData Parameters Type Name Description Entity entity The entity. Returns Type Description T A struct of type T containing the component value. Type Parameters Name Description T The type of component to retrieve. Exceptions Type Condition ArgumentException Thrown if the component type has no fields."
  },
  "api/Unity.Entities.EntityManager.GetComponentObject.html": {
    "href": "api/Unity.Entities.EntityManager.GetComponentObject.html",
    "title": "Method GetComponentObject | Entities | 0.17.0-preview.18",
    "keywords": "Method GetComponentObject GetComponentObject<T>(Entity) Gets the managed UnityEngine.Component object from an entity. Declaration public T GetComponentObject<T>(Entity entity) Parameters Type Name Description Entity entity The entity. Returns Type Description T The managed object, cast to type T. Type Parameters Name Description T The type of the managed object. GetComponentObject<T>(Entity, ComponentType) Declaration public T GetComponentObject<T>(Entity entity, ComponentType componentType) Parameters Type Name Description Entity entity ComponentType componentType Returns Type Description T Type Parameters Name Description T"
  },
  "api/Unity.Entities.EntityManager.GetComponentOrderVersion.html": {
    "href": "api/Unity.Entities.EntityManager.GetComponentOrderVersion.html",
    "title": "Method GetComponentOrderVersion | Entities | 0.17.0-preview.18",
    "keywords": "Method GetComponentOrderVersion GetComponentOrderVersion<T>() Gets the version number of the specified component type. Declaration public int GetComponentOrderVersion<T>() Returns Type Description Int32 The current version number. Type Parameters Name Description T The component type. Remarks This version number is incremented each time there is a structural change involving the specified type of component. Such changes include creating or destroying entities that have this component and adding or removing the component type from an entity. Shared components are not covered by this version; see GetSharedComponentOrderVersion<T>(T) . Version numbers can overflow. To compare if one version is more recent than another use a calculation such as: bool VersionBisNewer = (VersionB - VersionA) > 0;"
  },
  "api/Unity.Entities.EntityManager.GetComponentTypeHandle.html": {
    "href": "api/Unity.Entities.EntityManager.GetComponentTypeHandle.html",
    "title": "Method GetComponentTypeHandle | Entities | 0.17.0-preview.18",
    "keywords": "Method GetComponentTypeHandle GetComponentTypeHandle<T>(Boolean) Gets the dynamic type object required to access a chunk component of type T. Declaration public ComponentTypeHandle<T> GetComponentTypeHandle<T>(bool isReadOnly) Parameters Type Name Description Boolean isReadOnly Specify whether the access to the component through this object is read only or read and write. For managed components isReadonly will always be treated as false. Returns Type Description ComponentTypeHandle <T> The run-time type information of the component. Type Parameters Name Description T The compile-time type of the component. Remarks To access a component stored in a chunk, you must have the type registry information for the component. This function provides that information. Use the returned ComponentTypeHandle<T> object with the functions of an ArchetypeChunk object to get information about the components in that chunk and to access the component values."
  },
  "api/Unity.Entities.EntityManager.GetComponentTypes.html": {
    "href": "api/Unity.Entities.EntityManager.GetComponentTypes.html",
    "title": "Method GetComponentTypes | Entities | 0.17.0-preview.18",
    "keywords": "Method GetComponentTypes GetComponentTypes(Entity, Allocator) Gets an entity's component types. Declaration public NativeArray<ComponentType> GetComponentTypes(Entity entity, Allocator allocator = Allocator.Temp) Parameters Type Name Description Entity entity The entity. Allocator allocator The type of allocation for creating the NativeArray to hold the ComponentType objects. Returns Type Description NativeArray < ComponentType > An array of ComponentType containing all the types of components associated with the entity."
  },
  "api/Unity.Entities.EntityManager.GetCreatedAndDestroyedEntities.html": {
    "href": "api/Unity.Entities.EntityManager.GetCreatedAndDestroyedEntities.html",
    "title": "Method GetCreatedAndDestroyedEntities | Entities | 0.17.0-preview.18",
    "keywords": "Method GetCreatedAndDestroyedEntities GetCreatedAndDestroyedEntities(NativeList<Int32>, NativeList<Entity>, NativeList<Entity>) Detects the created and destroyed entities compared to last time the method was called with the given state. Declaration public void GetCreatedAndDestroyedEntities(NativeList<int> state, NativeList<Entity> createdEntities, NativeList<Entity> destroyedEntities) Parameters Type Name Description Unity.Collections.NativeList < Int32 > state The same state list must be passed when you call this method, it remembers the entities that were already notified created and destroyed. Unity.Collections.NativeList < Entity > createdEntities The entities that were created. Unity.Collections.NativeList < Entity > destroyedEntities The entities that were destroyed. Remarks Entities must be fully destroyed, if system state components keep it alive it still counts as not yet destroyed. EntityCommandBuffer instances that have not been played back will have no effect on this until they are played back."
  },
  "api/Unity.Entities.EntityManager.GetCreatedAndDestroyedEntitiesAsync.html": {
    "href": "api/Unity.Entities.EntityManager.GetCreatedAndDestroyedEntitiesAsync.html",
    "title": "Method GetCreatedAndDestroyedEntitiesAsync | Entities | 0.17.0-preview.18",
    "keywords": "Method GetCreatedAndDestroyedEntitiesAsync GetCreatedAndDestroyedEntitiesAsync(NativeList<Int32>, NativeList<Entity>, NativeList<Entity>) Detects the created and destroyed entities compared to last time the method was called with the given state. Declaration public JobHandle GetCreatedAndDestroyedEntitiesAsync(NativeList<int> state, NativeList<Entity> createdEntities, NativeList<Entity> destroyedEntities) Parameters Type Name Description Unity.Collections.NativeList < Int32 > state The same state list must be passed when you call this method, it remembers the entities that were already notified created and destroyed. Unity.Collections.NativeList < Entity > createdEntities The entities that were created. Unity.Collections.NativeList < Entity > destroyedEntities The entities that were destroyed. Returns Type Description JobHandle Remarks Entities must be fully destroyed, if system state components keep it alive it still counts as not yet destroyed. EntityCommandBuffer instances that have not been played back will have no effect on this until they are played back."
  },
  "api/Unity.Entities.EntityManager.GetDynamicComponentTypeHandle.html": {
    "href": "api/Unity.Entities.EntityManager.GetDynamicComponentTypeHandle.html",
    "title": "Method GetDynamicComponentTypeHandle | Entities | 0.17.0-preview.18",
    "keywords": "Method GetDynamicComponentTypeHandle GetDynamicComponentTypeHandle(ComponentType) Gets the dynamic type object required to access a chunk component of dynamic type acquired from reflection. Declaration public DynamicComponentTypeHandle GetDynamicComponentTypeHandle(ComponentType componentType) Parameters Type Name Description ComponentType componentType Type of the component Returns Type Description DynamicComponentTypeHandle The run-time type information of the component. Remarks To access a component stored in a chunk, you must have the type registry information for the component. This function provides that information. Use the returned DynamicComponentTypeHandle object with the functions of an ArchetypeChunk object to get information about the components in that chunk and to access the component values."
  },
  "api/Unity.Entities.EntityManager.GetEnabled.html": {
    "href": "api/Unity.Entities.EntityManager.GetEnabled.html",
    "title": "Method GetEnabled | Entities | 0.17.0-preview.18",
    "keywords": "Method GetEnabled GetEnabled(Entity) Declaration public bool GetEnabled(Entity entity) Parameters Type Name Description Entity entity Returns Type Description Boolean"
  },
  "api/Unity.Entities.EntityManager.GetEntityQueryMask.html": {
    "href": "api/Unity.Entities.EntityManager.GetEntityQueryMask.html",
    "title": "Method GetEntityQueryMask | Entities | 0.17.0-preview.18",
    "keywords": "Method GetEntityQueryMask GetEntityQueryMask(EntityQuery) Gets an EntityQueryMask that can be used to quickly match if an entity belongs to an EntityQuery. There is a maximum limit of 1024 EntityQueryMasks that can be created. EntityQueryMasks cannot be created from EntityQueries with filters. Declaration public EntityQueryMask GetEntityQueryMask(EntityQuery query) Parameters Type Name Description EntityQuery query The EntityQuery that describes the EntityQueryMask. Returns Type Description EntityQueryMask The EntityQueryMask corresponding to the EntityQuery. Remarks Note that EntityQueryMask only filters by Archetype, it doesn't support EntityQuery shared component or change filtering."
  },
  "api/Unity.Entities.EntityManager.GetEntityTypeHandle.html": {
    "href": "api/Unity.Entities.EntityManager.GetEntityTypeHandle.html",
    "title": "Method GetEntityTypeHandle | Entities | 0.17.0-preview.18",
    "keywords": "Method GetEntityTypeHandle GetEntityTypeHandle() Gets the dynamic type object required to access the Entity component of a chunk. Declaration public EntityTypeHandle GetEntityTypeHandle() Returns Type Description EntityTypeHandle The run-time type information of the Entity component. Remarks All chunks have an implicit Entity component referring to the entities in that chunk. To access any component stored in a chunk, you must have the type registry information for the component. This function provides that information for the implicit Entity component. Use the returned ComponentTypeHandle<T> object with the functions of an ArchetypeChunk object to access the component values."
  },
  "api/Unity.Entities.EntityManager.GetHashCode.html": {
    "href": "api/Unity.Entities.EntityManager.GetHashCode.html",
    "title": "Method GetHashCode | Entities | 0.17.0-preview.18",
    "keywords": "Method GetHashCode GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode()"
  },
  "api/Unity.Entities.EntityManager.GetSharedComponentCount.html": {
    "href": "api/Unity.Entities.EntityManager.GetSharedComponentCount.html",
    "title": "Method GetSharedComponentCount | Entities | 0.17.0-preview.18",
    "keywords": "Method GetSharedComponentCount GetSharedComponentCount() Gets the number of shared components managed by this EntityManager. Declaration public int GetSharedComponentCount() Returns Type Description Int32 The shared component count"
  },
  "api/Unity.Entities.EntityManager.GetSharedComponentData.html": {
    "href": "api/Unity.Entities.EntityManager.GetSharedComponentData.html",
    "title": "Method GetSharedComponentData | Entities | 0.17.0-preview.18",
    "keywords": "Method GetSharedComponentData GetSharedComponentData<T>(Entity) Gets a shared component from an entity. Declaration public T GetSharedComponentData<T>(Entity entity) where T : struct, ISharedComponentData Parameters Type Name Description Entity entity The entity. Returns Type Description T A copy of the shared component. Type Parameters Name Description T The type of shared component. GetSharedComponentData<T>(Int32) Gets a shared component by index. Declaration public T GetSharedComponentData<T>(int sharedComponentIndex) where T : struct, ISharedComponentData Parameters Type Name Description Int32 sharedComponentIndex The index of the shared component in the internal shared component list. Returns Type Description T A copy of the shared component. Type Parameters Name Description T The data type of the shared component. Remarks The ECS framework maintains an internal list of unique shared components. You can get the components in this list, along with their indices using GetAllUniqueSharedComponentData<T>(List<T>, List<Int32>) . An index in the list is valid and points to the same shared component index as long as the shared component order version from GetSharedComponentOrderVersion<T>(T) remains the same."
  },
  "api/Unity.Entities.EntityManager.GetSharedComponentDataIndex.html": {
    "href": "api/Unity.Entities.EntityManager.GetSharedComponentDataIndex.html",
    "title": "Method GetSharedComponentDataIndex | Entities | 0.17.0-preview.18",
    "keywords": "Method GetSharedComponentDataIndex GetSharedComponentDataIndex<T>(Entity) Declaration public int GetSharedComponentDataIndex<T>(Entity entity) where T : struct, ISharedComponentData Parameters Type Name Description Entity entity Returns Type Description Int32 Type Parameters Name Description T"
  },
  "api/Unity.Entities.EntityManager.GetSharedComponentOrderVersion.html": {
    "href": "api/Unity.Entities.EntityManager.GetSharedComponentOrderVersion.html",
    "title": "Method GetSharedComponentOrderVersion | Entities | 0.17.0-preview.18",
    "keywords": "Method GetSharedComponentOrderVersion GetSharedComponentOrderVersion<T>(T) Gets the version number of the specified shared component. Declaration public int GetSharedComponentOrderVersion<T>(T sharedComponent) where T : struct, ISharedComponentData Parameters Type Name Description T sharedComponent The shared component instance. Returns Type Description Int32 The current version number. Type Parameters Name Description T The shared component type. Remarks This version number is incremented each time there is a structural change involving entities in the chunk of the specified shared component. Such changes include creating or destroying entities or anything that changes the archetype of an entity. Version numbers can overflow. To compare if one version is more recent than another use a calculation such as: bool VersionBisNewer = (VersionB - VersionA) > 0;"
  },
  "api/Unity.Entities.EntityManager.GetSharedComponentTypeHandle.html": {
    "href": "api/Unity.Entities.EntityManager.GetSharedComponentTypeHandle.html",
    "title": "Method GetSharedComponentTypeHandle | Entities | 0.17.0-preview.18",
    "keywords": "Method GetSharedComponentTypeHandle GetSharedComponentTypeHandle<T>() Gets the dynamic type object required to access a shared component of type T. Declaration public SharedComponentTypeHandle<T> GetSharedComponentTypeHandle<T>() where T : struct, ISharedComponentData Returns Type Description SharedComponentTypeHandle <T> The run-time type information of the shared component. Type Parameters Name Description T The compile-time type of the shared component. Remarks To access a component stored in a chunk, you must have the type registry information for the component. This function provides that information for shared components. Use the returned ComponentTypeHandle<T> object with the functions of an ArchetypeChunk object to get information about the components in that chunk and to access the component values."
  },
  "api/Unity.Entities.EntityManager.GlobalSystemVersion.html": {
    "href": "api/Unity.Entities.EntityManager.GlobalSystemVersion.html",
    "title": "Property GlobalSystemVersion | Entities | 0.17.0-preview.18",
    "keywords": "Property GlobalSystemVersion GlobalSystemVersion A counter that increments after every system update. Declaration public uint GlobalSystemVersion { get; } Property Value Type Description UInt32 Remarks The ECS framework uses the GlobalSystemVersion to track changes in a conservative, efficient fashion. Changes are recorded per component per chunk. See Also DidChange(DynamicComponentTypeHandle, UInt32) ChangedFilterAttribute"
  },
  "api/Unity.Entities.EntityManager.HasChunkComponent.html": {
    "href": "api/Unity.Entities.EntityManager.HasChunkComponent.html",
    "title": "Method HasChunkComponent | Entities | 0.17.0-preview.18",
    "keywords": "Method HasChunkComponent HasChunkComponent<T>(Entity) Checks whether the chunk containing an entity has a specific type of component. Declaration public bool HasChunkComponent<T>(Entity entity) Parameters Type Name Description Entity entity The Entity object. Returns Type Description Boolean True, if the chunk containing the specified entity has the component. Type Parameters Name Description T The data type of the chunk component. Remarks Always returns false for an entity that has been destroyed."
  },
  "api/Unity.Entities.EntityManager.HasComponent.html": {
    "href": "api/Unity.Entities.EntityManager.HasComponent.html",
    "title": "Method HasComponent | Entities | 0.17.0-preview.18",
    "keywords": "Method HasComponent HasComponent<T>(Entity) Checks whether an entity has a specific type of component. Declaration public bool HasComponent<T>(Entity entity) Parameters Type Name Description Entity entity The Entity object. Returns Type Description Boolean True, if the specified entity has the component. Type Parameters Name Description T The data type of the component. Remarks Always returns false for an entity that has been destroyed. HasComponent(Entity, ComponentType) Checks whether an entity has a specific type of component. Declaration public bool HasComponent(Entity entity, ComponentType type) Parameters Type Name Description Entity entity The Entity object. ComponentType type The data type of the component. Returns Type Description Boolean True, if the specified entity has the component. Remarks Always returns false for an entity that has been destroyed."
  },
  "api/Unity.Entities.EntityManager.html": {
    "href": "api/Unity.Entities.EntityManager.html",
    "title": "Struct EntityManager | Entities | 0.17.0-preview.18",
    "keywords": "Struct EntityManager The EntityManager manages entities and components in a World. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Preserve] [NativeContainer] public struct EntityManager : IEquatable<EntityManager> Remarks The EntityManager provides an API to create, read, update, and destroy entities. A World has one EntityManager, which manages all the entities for that World. Many EntityManager operations result in structural changes that change the layout of entities in memory. Before it can perform such operations, the EntityManager must wait for all running Jobs to complete, an event called a sync point . A sync point both blocks the main thread and prevents the application from taking advantage of all available cores as the running Jobs wind down. Although you cannot prevent sync points entirely, you should avoid them as much as possible. To this end, the ECS framework provides the EntityCommandBuffer , which allows you to queue structural changes so that they all occur at one time in the frame. Properties Name Description Debug An object providing debugging information and operations. EntityCapacity The capacity of the internal entities array. ExclusiveEntityTransactionDependency GlobalSystemVersion A counter that increments after every system update. TotalChunkAddressSpaceInBytes The total reserved address space for all Chunks in all Worlds. UniversalQuery A EntityQuery instance that matches all components. Version The latest entity generational version. World The World of this EntityManager. Methods Name Description AddBuffer<T>(Entity) Adds a dynamic buffer component to an entity. AddChunkComponentData<T>(Entity) Adds a chunk component to the specified entity. Returns true if the chunk component was added, false if the entity already had the chunk component. (The chunk component's data is set either way.) AddChunkComponentData<T>(EntityQuery, T) Adds a component to each of the chunks identified by a EntityQuery and set the component values. AddComponent(NativeArray<Entity>, ComponentType) Adds a component to a set of entities. AddComponent(Entity, ComponentType) Adds a component to an entity. AddComponent(EntityQuery, ComponentType) Adds a component to a set of entities defined by a EntityQuery. AddComponent(EntityQuery, ComponentTypes) Adds components to a set of entities defined by a EntityQuery. AddComponent<T>(NativeArray<Entity>) Adds a component to a set of entities. AddComponent<T>(Entity) Adds a component to an entity. AddComponent<T>(EntityQuery) Adds a component to a set of entities defined by a EntityQuery. AddComponentData<T>(Entity, T) Adds a component to an entity and set the value of that component. Returns true if the component was added, false if the entity already had the component. (The component's data is set either way.) AddComponentData<T>(EntityQuery, NativeArray<T>) Adds a component to a set of entities defines by the EntityQuery and sets the component of each entity in the query to the value in the component array. componentArray.Length must match entityQuery.ToEntityArray().Length. AddComponentObject(Entity, Object) Adds a managed UnityEngine.Component object to an entity. AddComponents(Entity, ComponentTypes) Adds a set of component to an entity. AddSharedComponentData<T>(Entity, T) Adds a shared component to an entity. Returns true if the shared component was added, false if the entity already had the shared component. (The shared component's data is set either way.) AddSharedComponentData<T>(EntityQuery, T) Adds a shared component to a set of entities defined by a EntityQuery. BeginExclusiveEntityTransaction() Begins an exclusive entity transaction, which allows you to make structural changes inside a Job. CompleteAllJobs() Waits for all Jobs to complete. CopyAndReplaceEntitiesFrom(EntityManager) Copies all entities from srcEntityManager and replaces all entities in this EntityManager CopyEntities(NativeArray<Entity>, NativeArray<Entity>) Clones a set of entities, different from Instantiate because it does not remove the prefab tag component. CopyEntitiesFrom(EntityManager, NativeArray<Entity>, NativeArray<Entity>) Instantiates / Copies all entities from srcEntityManager and copies them into this EntityManager. Entity references on components that are being cloned to entities inside the srcEntities set are remapped to the instantiated entities. CreateArchetype(ComponentType[]) Creates an archetype from a set of component types. CreateEntity() Creates an entity with no components. CreateEntity(ComponentType[]) Creates an entity having components of the specified types. CreateEntity(EntityArchetype) Creates an entity having the specified archetype. CreateEntity(EntityArchetype, Int32) Creates a set of entities of the specified archetype. CreateEntity(EntityArchetype, Int32, Allocator) Creates a set of entities of the specified archetype. CreateEntity(EntityArchetype, NativeArray<Entity>) Creates a set of entities of the specified archetype. CreateEntityQuery(ComponentType[]) Creates a EntityQuery from an array of component types. CreateEntityQuery(EntityQueryDesc[]) Creates a EntityQuery from an EntityQueryDesc. CreateEntityRemapArray(Allocator) Creates a remapping array with one element for each entity in the World . DestroyAndResetAllEntities() Destroys all entities in the EntityManager and resets the internal entity ID version table. DestroyEntity(NativeArray<Entity>) Destroys all entities in an array. DestroyEntity(NativeSlice<Entity>) Destroys all entities in a slice of an array. DestroyEntity(Entity) Destroys an entity. DestroyEntity(EntityQuery) Destroy all entities having a common set of component types. EndExclusiveEntityTransaction() Ends an exclusive entity transaction. Equals(Object) Equals(EntityManager) Exists(Entity) Reports whether an Entity object is still valid. GetAllArchetypes(NativeList<EntityArchetype>) Gets all the archetypes. GetAllChunks(Allocator) Gets all the chunks managed by this EntityManager. GetAllEntities(Allocator) Gets all the entities managed by this EntityManager. GetAllUniqueSharedComponentData<T>(List<T>) Gets a list of all the unique instances of a shared component type. GetAllUniqueSharedComponentData<T>(List<T>, List<Int32>) Gets a list of all unique shared components of the same type and a corresponding list of indices into the internal shared component list. GetAssignableComponentTypes(Type) Gets a list of the types of components that can be assigned to the specified component. GetAssignableComponentTypes(Type, List<Type>) Gets a list of the types of components that can be assigned to the specified component. GetBuffer<T>(Entity) Gets the dynamic buffer of an entity. GetBufferTypeHandle<T>(Boolean) Gets the dynamic type object required to access a chunk buffer containing elements of type T. GetChunk(Entity) Gets the chunk in which the specified entity is stored. GetChunkComponentData<T>(ArchetypeChunk) Gets the value of a chunk component. GetChunkComponentData<T>(Entity) Gets the value of chunk component for the chunk containing the specified entity. GetComponentCount(Entity) Gets the number of component types associated with an entity. GetComponentData<T>(Entity) Gets the value of a component for an entity. GetComponentObject<T>(Entity) Gets the managed UnityEngine.Component object from an entity. GetComponentObject<T>(Entity, ComponentType) GetComponentOrderVersion<T>() Gets the version number of the specified component type. GetComponentTypeHandle<T>(Boolean) Gets the dynamic type object required to access a chunk component of type T. GetComponentTypes(Entity, Allocator) Gets an entity's component types. GetCreatedAndDestroyedEntities(NativeList<Int32>, NativeList<Entity>, NativeList<Entity>) Detects the created and destroyed entities compared to last time the method was called with the given state. GetCreatedAndDestroyedEntitiesAsync(NativeList<Int32>, NativeList<Entity>, NativeList<Entity>) Detects the created and destroyed entities compared to last time the method was called with the given state. GetDynamicComponentTypeHandle(ComponentType) Gets the dynamic type object required to access a chunk component of dynamic type acquired from reflection. GetEnabled(Entity) GetEntityQueryMask(EntityQuery) Gets an EntityQueryMask that can be used to quickly match if an entity belongs to an EntityQuery. There is a maximum limit of 1024 EntityQueryMasks that can be created. EntityQueryMasks cannot be created from EntityQueries with filters. GetEntityTypeHandle() Gets the dynamic type object required to access the Entity component of a chunk. GetHashCode() GetSharedComponentCount() Gets the number of shared components managed by this EntityManager. GetSharedComponentData<T>(Int32) Gets a shared component by index. GetSharedComponentData<T>(Entity) Gets a shared component from an entity. GetSharedComponentDataIndex<T>(Entity) GetSharedComponentOrderVersion<T>(T) Gets the version number of the specified shared component. GetSharedComponentTypeHandle<T>() Gets the dynamic type object required to access a shared component of type T. HasChunkComponent<T>(Entity) Checks whether the chunk containing an entity has a specific type of component. HasComponent(Entity, ComponentType) Checks whether an entity has a specific type of component. HasComponent<T>(Entity) Checks whether an entity has a specific type of component. Instantiate(NativeArray<Entity>, NativeArray<Entity>) Clones a set of entities. Instantiate(Entity) Clones an entity. Instantiate(Entity, Int32, Allocator) Makes multiple clones of an entity. Instantiate(Entity, NativeArray<Entity>) Makes multiple clones of an entity. IsQueryValid(EntityQuery) Check if an entity query is still valid MoveEntitiesFrom(out NativeArray<Entity>, EntityManager) Moves all entities managed by the specified EntityManager to the World of this EntityManager and fills an array with their Entity objects. MoveEntitiesFrom(out NativeArray<Entity>, EntityManager, NativeArray<EntityRemapUtility.EntityRemapInfo>) Moves all entities managed by the specified EntityManager to the World of this EntityManager and fills an array with their Entity objects. MoveEntitiesFrom(out NativeArray<Entity>, EntityManager, EntityQuery) Moves a selection of the entities managed by the specified EntityManager to the World of this EntityManager and fills an array with their Entity objects. MoveEntitiesFrom(out NativeArray<Entity>, EntityManager, EntityQuery, NativeArray<EntityRemapUtility.EntityRemapInfo>) Moves a selection of the entities managed by the specified EntityManager to the World of this EntityManager and fills an array with their Entity objects. MoveEntitiesFrom(EntityManager) Moves all entities managed by the specified EntityManager to the world of this EntityManager. MoveEntitiesFrom(EntityManager, NativeArray<EntityRemapUtility.EntityRemapInfo>) Moves all entities managed by the specified EntityManager to the World of this EntityManager. MoveEntitiesFrom(EntityManager, EntityQuery) Moves a selection of the entities managed by the specified EntityManager to the World of this EntityManager and fills an array with their Entity objects. MoveEntitiesFrom(EntityManager, EntityQuery, NativeArray<EntityRemapUtility.EntityRemapInfo>) Moves a selection of the entities managed by the specified EntityManager to the World of this EntityManager. MoveEntitiesFromInternalAll(EntityManager, NativeArray<EntityRemapUtility.EntityRemapInfo>) PrepareForDeserialize() Prepares an empty World to load serialized entities. RemoveChunkComponent<T>(Entity) Removes a chunk component from the specified entity. Returns false if the entity did not have the component. RemoveChunkComponentData<T>(EntityQuery) Removes a component from the chunks identified by a EntityQuery. RemoveComponent(NativeArray<Entity>, ComponentType) Remove a component from a set of entities. RemoveComponent(Entity, ComponentType) Removes a component from an entity. Returns false if the entity did not have the component. RemoveComponent(Entity, ComponentTypes) Removes multiple components from an entity. RemoveComponent(EntityQuery, ComponentType) Removes a component from a set of entities defined by a EntityQuery. RemoveComponent(EntityQuery, ComponentTypes) Removes a set of components from a set of entities defined by a EntityQuery. RemoveComponent<T>(NativeArray<Entity>) Removes a component from a set of entities. RemoveComponent<T>(Entity) Removes a component from an entity. Returns false if the entity did not have the component. RemoveComponent<T>(EntityQuery) Removes a component from a set of entities defined by a EntityQuery. SetArchetype(Entity, EntityArchetype) Adds and removes components of an entity to match the specified EntityArchetype. SetChunkComponentData<T>(ArchetypeChunk, T) Sets the value of a chunk component. SetComponentData<T>(Entity, T) Sets the value of a component of an entity. SetEnabled(Entity, Boolean) Enabled entities are processed by systems, disabled entities are not. Adds or removes the Disabled component. By default EntityQuery does not include entities containing the Disabled component. If the entity was converted from a prefab and thus has a LinkedEntityGroup component, the entire group will enabled or disabled. SetSharedComponentData<T>(Entity, T) Sets the shared component of an entity. SetSharedComponentData<T>(EntityQuery, T) Sets the shared component of all entities in the query. SwapComponents(ArchetypeChunk, Int32, ArchetypeChunk, Int32) Swaps the components of two entities. Operators Name Description Equality(EntityManager, EntityManager) Inequality(EntityManager, EntityManager) Extension Methods EntityManagerManagedComponentExtensions.GetComponentData<T>(EntityManager, Entity) EntityManagerManagedComponentExtensions.SetComponentData<T>(EntityManager, Entity, T) EntityManagerManagedComponentExtensions.GetChunkComponentData<T>(EntityManager, ArchetypeChunk) EntityManagerManagedComponentExtensions.GetChunkComponentData<T>(EntityManager, Entity) EntityManagerManagedComponentExtensions.SetChunkComponentData<T>(EntityManager, ArchetypeChunk, T) EntityManagerManagedComponentExtensions.AddComponentData<T>(EntityManager, Entity, T) EntityManagerManagedComponentExtensions.AddChunkComponentData<T>(EntityManager, Entity) EntityManagerManagedComponentExtensions.AddChunkComponentData<T>(EntityManager, EntityQuery, T) EntityManagerExtensions.GetComponentObject<T>(EntityManager, Entity)"
  },
  "api/Unity.Entities.EntityManager.Instantiate.html": {
    "href": "api/Unity.Entities.EntityManager.Instantiate.html",
    "title": "Method Instantiate | Entities | 0.17.0-preview.18",
    "keywords": "Method Instantiate Instantiate(Entity) Clones an entity. Declaration public Entity Instantiate(Entity srcEntity) Parameters Type Name Description Entity srcEntity The entity to clone. Returns Type Description Entity The Entity object for the new entity. Remarks The new entity has the same archetype and component values as the original; however, ISystemStateComponentData and Prefab components are removed from the clone. If the source entity was converted from a prefab and thus has a LinkedEntityGroup component, the entire group is cloned as a new set of entities. Entity references on components that are being cloned to entities inside the set are remapped to the instantiated entities. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before creating the entity and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. Instantiate(Entity, NativeArray<Entity>) Makes multiple clones of an entity. Declaration public void Instantiate(Entity srcEntity, NativeArray<Entity> outputEntities) Parameters Type Name Description Entity srcEntity The entity to clone. NativeArray < Entity > outputEntities An array to receive the Entity objects of the root entity in each clone. The length of this array determines the number of clones. Remarks The new entity has the same archetype and component values as the original, however system state and prefab tag components are removed from the clone. If the source entity has a LinkedEntityGroup component, the entire group is cloned as a new set of entities. Entity references on components that are being cloned to entities inside the set are remapped to the instantiated entities. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before creating these entities and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. Instantiate(Entity, Int32, Allocator) Makes multiple clones of an entity. Declaration public NativeArray<Entity> Instantiate(Entity srcEntity, int instanceCount, Allocator allocator) Parameters Type Name Description Entity srcEntity The entity to clone. Int32 instanceCount The number of entities to instantiate with the same components as the source entity. Allocator allocator How the created native array should be allocated. Returns Type Description NativeArray < Entity > A NativeArray of entities. Remarks The new entity has the same archetype and component values as the original, however system state and prefab tag components are removed from the clone. If the source entity has a LinkedEntityGroup component, the entire group is cloned as a new set of entities. Entity references on components that are being cloned to entities inside the set are remapped to the instantiated entities. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before creating these entities and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. Instantiate(NativeArray<Entity>, NativeArray<Entity>) Clones a set of entities. Declaration public void Instantiate(NativeArray<Entity> srcEntities, NativeArray<Entity> outputEntities) Parameters Type Name Description NativeArray < Entity > srcEntities The set of entities to clone NativeArray < Entity > outputEntities the set of entities that were cloned. outputEntities.Length must match srcEntities.Length Remarks The new entity has the same archetype and component values as the original, however system state and prefab tag components are removed from the clone. Entity references on components that are being cloned to entities inside the set are remapped to the instantiated entities. This method overload ignores the LinkedEntityGroup component, since the group of entities that will be cloned is passed explicitly. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before creating the entity and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores."
  },
  "api/Unity.Entities.EntityManager.IsQueryValid.html": {
    "href": "api/Unity.Entities.EntityManager.IsQueryValid.html",
    "title": "Method IsQueryValid | Entities | 0.17.0-preview.18",
    "keywords": "Method IsQueryValid IsQueryValid(EntityQuery) Check if an entity query is still valid Declaration public bool IsQueryValid(EntityQuery query) Parameters Type Name Description EntityQuery query Returns Type Description Boolean Return true if the specified query handle is still valid (and can be disposed)"
  },
  "api/Unity.Entities.EntityManager.MoveEntitiesFrom.html": {
    "href": "api/Unity.Entities.EntityManager.MoveEntitiesFrom.html",
    "title": "Method MoveEntitiesFrom | Entities | 0.17.0-preview.18",
    "keywords": "Method MoveEntitiesFrom MoveEntitiesFrom(EntityManager) Moves all entities managed by the specified EntityManager to the world of this EntityManager. Declaration public void MoveEntitiesFrom(EntityManager srcEntities) Parameters Type Name Description EntityManager srcEntities The EntityManager whose entities are appropriated. Remarks The entities moved are owned by this EntityManager. Each World has one EntityManager, which manages all the entities in that world. This function allows you to transfer entities from one World to another. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before moving the entities and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. MoveEntitiesFrom(out NativeArray<Entity>, EntityManager) Moves all entities managed by the specified EntityManager to the World of this EntityManager and fills an array with their Entity objects. Declaration public void MoveEntitiesFrom(out NativeArray<Entity> output, EntityManager srcEntities) Parameters Type Name Description NativeArray < Entity > output An array to receive the Entity objects of the transferred entities. EntityManager srcEntities The EntityManager whose entities are appropriated. Remarks After the move, the entities are managed by this EntityManager. Use the output array to make post-move changes to the transferred entities. Each world has one EntityManager, which manages all the entities in that world. This function allows you to transfer entities from one World to another. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before moving the entities and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. MoveEntitiesFrom(out NativeArray<Entity>, EntityManager, NativeArray<EntityRemapUtility.EntityRemapInfo>) Moves all entities managed by the specified EntityManager to the World of this EntityManager and fills an array with their Entity objects. Declaration public void MoveEntitiesFrom(out NativeArray<Entity> output, EntityManager srcEntities, NativeArray<EntityRemapUtility.EntityRemapInfo> entityRemapping) Parameters Type Name Description NativeArray < Entity > output An array to receive the Entity objects of the transferred entities. EntityManager srcEntities The EntityManager whose entities are appropriated. NativeArray < EntityRemapUtility.EntityRemapInfo > entityRemapping A set of entity transformations to make during the transfer. Remarks After the move, the entities are managed by this EntityManager. Use the output array to make post-move changes to the transferred entities. Each world has one EntityManager, which manages all the entities in that world. This function allows you to transfer entities from one World to another. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before moving the entities and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. Exceptions Type Condition ArgumentException MoveEntitiesFrom(EntityManager, NativeArray<EntityRemapUtility.EntityRemapInfo>) Moves all entities managed by the specified EntityManager to the World of this EntityManager. Declaration public void MoveEntitiesFrom(EntityManager srcEntities, NativeArray<EntityRemapUtility.EntityRemapInfo> entityRemapping) Parameters Type Name Description EntityManager srcEntities The EntityManager whose entities are appropriated. NativeArray < EntityRemapUtility.EntityRemapInfo > entityRemapping A set of entity transformations to make during the transfer. Remarks After the move, the entities are managed by this EntityManager. Each World has one EntityManager, which manages all the entities in that world. This function allows you to transfer entities from one world to another. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before moving the entities and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. Exceptions Type Condition ArgumentException Thrown if you attempt to transfer entities to the EntityManager that already owns them. MoveEntitiesFrom(EntityManager, EntityQuery) Moves a selection of the entities managed by the specified EntityManager to the World of this EntityManager and fills an array with their Entity objects. Declaration public void MoveEntitiesFrom(EntityManager srcEntities, EntityQuery filter) Parameters Type Name Description EntityManager srcEntities The EntityManager whose entities are appropriated. EntityQuery filter A EntityQuery that defines the entities to move. Must be part of the source World. Remarks After the move, the entities are managed by this EntityManager. Use the output array to make post-move changes to the transferred entities. Each world has one EntityManager, which manages all the entities in that world. This function allows you to transfer entities from one World to another. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before moving the entities and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. Exceptions Type Condition ArgumentException MoveEntitiesFrom(out NativeArray<Entity>, EntityManager, EntityQuery, NativeArray<EntityRemapUtility.EntityRemapInfo>) Moves a selection of the entities managed by the specified EntityManager to the World of this EntityManager and fills an array with their Entity objects. Declaration public void MoveEntitiesFrom(out NativeArray<Entity> output, EntityManager srcEntities, EntityQuery filter, NativeArray<EntityRemapUtility.EntityRemapInfo> entityRemapping) Parameters Type Name Description NativeArray < Entity > output An array to receive the Entity objects of the transferred entities. EntityManager srcEntities The EntityManager whose entities are appropriated. EntityQuery filter A EntityQuery that defines the entities to move. Must be part of the source World. NativeArray < EntityRemapUtility.EntityRemapInfo > entityRemapping A set of entity transformations to make during the transfer. Remarks After the move, the entities are managed by this EntityManager. Use the output array to make post-move changes to the transferred entities. Each world has one EntityManager, which manages all the entities in that world. This function allows you to transfer entities from one World to another. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before moving the entities and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. Exceptions Type Condition ArgumentException MoveEntitiesFrom(EntityManager, EntityQuery, NativeArray<EntityRemapUtility.EntityRemapInfo>) Moves a selection of the entities managed by the specified EntityManager to the World of this EntityManager. Declaration public void MoveEntitiesFrom(EntityManager srcEntities, EntityQuery filter, NativeArray<EntityRemapUtility.EntityRemapInfo> entityRemapping) Parameters Type Name Description EntityManager srcEntities The EntityManager whose entities are appropriated. EntityQuery filter A EntityQuery that defines the entities to move. Must be part of the source World. NativeArray < EntityRemapUtility.EntityRemapInfo > entityRemapping A set of entity transformations to make during the transfer. Remarks After the move, the entities are managed by this EntityManager. Each world has one EntityManager, which manages all the entities in that world. This function allows you to transfer entities from one World to another. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before moving the entities and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. Exceptions Type Condition ArgumentException Thrown if the EntityQuery object used as the filter comes from a different world than the srcEntities EntityManager. MoveEntitiesFrom(out NativeArray<Entity>, EntityManager, EntityQuery) Moves a selection of the entities managed by the specified EntityManager to the World of this EntityManager and fills an array with their Entity objects. Declaration public void MoveEntitiesFrom(out NativeArray<Entity> output, EntityManager srcEntities, EntityQuery filter) Parameters Type Name Description NativeArray < Entity > output An array to receive the Entity objects of the transferred entities. EntityManager srcEntities The EntityManager whose entities are appropriated. EntityQuery filter A EntityQuery that defines the entities to move. Must be part of the source World. Remarks After the move, the entities are managed by this EntityManager. Use the output array to make post-move changes to the transferred entities. Each world has one EntityManager, which manages all the entities in that world. This function allows you to transfer entities from one World to another. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before moving the entities and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. Exceptions Type Condition ArgumentException"
  },
  "api/Unity.Entities.EntityManager.MoveEntitiesFromInternalAll.html": {
    "href": "api/Unity.Entities.EntityManager.MoveEntitiesFromInternalAll.html",
    "title": "Method MoveEntitiesFromInternalAll | Entities | 0.17.0-preview.18",
    "keywords": "Method MoveEntitiesFromInternalAll MoveEntitiesFromInternalAll(EntityManager, NativeArray<EntityRemapUtility.EntityRemapInfo>) Declaration public void MoveEntitiesFromInternalAll(EntityManager srcEntities, NativeArray<EntityRemapUtility.EntityRemapInfo> entityRemapping) Parameters Type Name Description EntityManager srcEntities NativeArray < EntityRemapUtility.EntityRemapInfo > entityRemapping"
  },
  "api/Unity.Entities.EntityManager.op_Equality.html": {
    "href": "api/Unity.Entities.EntityManager.op_Equality.html",
    "title": "Operator Equality | Entities | 0.17.0-preview.18",
    "keywords": "Operator Equality Equality(EntityManager, EntityManager) Declaration public static bool operator ==(EntityManager lhs, EntityManager rhs) Parameters Type Name Description EntityManager lhs EntityManager rhs Returns Type Description Boolean"
  },
  "api/Unity.Entities.EntityManager.op_Inequality.html": {
    "href": "api/Unity.Entities.EntityManager.op_Inequality.html",
    "title": "Operator Inequality | Entities | 0.17.0-preview.18",
    "keywords": "Operator Inequality Inequality(EntityManager, EntityManager) Declaration public static bool operator !=(EntityManager lhs, EntityManager rhs) Parameters Type Name Description EntityManager lhs EntityManager rhs Returns Type Description Boolean"
  },
  "api/Unity.Entities.EntityManager.PrepareForDeserialize.html": {
    "href": "api/Unity.Entities.EntityManager.PrepareForDeserialize.html",
    "title": "Method PrepareForDeserialize | Entities | 0.17.0-preview.18",
    "keywords": "Method PrepareForDeserialize PrepareForDeserialize() Prepares an empty World to load serialized entities. Declaration public void PrepareForDeserialize()"
  },
  "api/Unity.Entities.EntityManager.RemoveChunkComponent.html": {
    "href": "api/Unity.Entities.EntityManager.RemoveChunkComponent.html",
    "title": "Method RemoveChunkComponent | Entities | 0.17.0-preview.18",
    "keywords": "Method RemoveChunkComponent RemoveChunkComponent<T>(Entity) Removes a chunk component from the specified entity. Returns false if the entity did not have the component. Declaration public bool RemoveChunkComponent<T>(Entity entity) Parameters Type Name Description Entity entity The entity. Returns Type Description Boolean Type Parameters Name Description T The type of component to remove. Remarks A chunk component is common to all entities in a chunk. Removing the chunk component from an entity changes that entity's archetype and results in the entity being moved to a different chunk (that does not have the removed component). Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before removing the component and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores."
  },
  "api/Unity.Entities.EntityManager.RemoveChunkComponentData.html": {
    "href": "api/Unity.Entities.EntityManager.RemoveChunkComponentData.html",
    "title": "Method RemoveChunkComponentData | Entities | 0.17.0-preview.18",
    "keywords": "Method RemoveChunkComponentData RemoveChunkComponentData<T>(EntityQuery) Removes a component from the chunks identified by a EntityQuery. Declaration public void RemoveChunkComponentData<T>(EntityQuery entityQuery) Parameters Type Name Description EntityQuery entityQuery The EntityQuery identifying the chunks to modify. Type Parameters Name Description T The type of component to remove. Remarks A chunk component is common to all entities in a chunk. You can access a chunk IComponentData instance through either the chunk itself or through an entity stored in that chunk. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before removing the component and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores."
  },
  "api/Unity.Entities.EntityManager.RemoveComponent.html": {
    "href": "api/Unity.Entities.EntityManager.RemoveComponent.html",
    "title": "Method RemoveComponent | Entities | 0.17.0-preview.18",
    "keywords": "Method RemoveComponent RemoveComponent(NativeArray<Entity>, ComponentType) Remove a component from a set of entities. Declaration public void RemoveComponent(NativeArray<Entity> entities, ComponentType componentType) Parameters Type Name Description NativeArray < Entity > entities An array of Entity objects. ComponentType componentType The type of component to remove. Remarks Removing a component changes an entity's archetype and results in the entity being moved to a different chunk. If an Entity object in the entities array refers to an entity that has been destroyed, this function throws an ArgumentError exception. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before creating these chunks and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. RemoveComponent(Entity, ComponentType) Removes a component from an entity. Returns false if the entity did not have the component. Declaration public bool RemoveComponent(Entity entity, ComponentType componentType) Parameters Type Name Description Entity entity The entity to modify. ComponentType componentType The type of component to remove. Returns Type Description Boolean Remarks Removing a component changes an entity's archetype and results in the entity being moved to a different chunk. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before removing the component and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. RemoveComponent(Entity, ComponentTypes) Removes multiple components from an entity. Declaration public void RemoveComponent(Entity entity, ComponentTypes componentTypes) Parameters Type Name Description Entity entity The entity to modify. ComponentTypes componentTypes The types of components to remove. Remarks If the entity has none of the specified components, the call will do nothing. Removing components changes an entity's archetype and results in the entity being moved to a different chunk. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before removing the component and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. RemoveComponent(EntityQuery, ComponentType) Removes a component from a set of entities defined by a EntityQuery. Declaration public void RemoveComponent(EntityQuery entityQuery, ComponentType componentType) Parameters Type Name Description EntityQuery entityQuery The EntityQuery defining the entities to modify. ComponentType componentType The type of component to remove. Remarks Removing a component changes an entity's archetype and results in the entity being moved to a different chunk. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before removing the component and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. RemoveComponent(EntityQuery, ComponentTypes) Removes a set of components from a set of entities defined by a EntityQuery. Declaration public void RemoveComponent(EntityQuery entityQuery, ComponentTypes types) Parameters Type Name Description EntityQuery entityQuery The EntityQuery defining the entities to modify. ComponentTypes types The types of components to add. Remarks Removing a component changes an entity's archetype and results in the entity being moved to a different chunk. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before removing the component and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. RemoveComponent<T>(Entity) Removes a component from an entity. Returns false if the entity did not have the component. Declaration public bool RemoveComponent<T>(Entity entity) Parameters Type Name Description Entity entity The entity. Returns Type Description Boolean Type Parameters Name Description T The type of component to remove. Remarks Removing a component changes an entity's archetype and results in the entity being moved to a different chunk. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before removing the component and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. RemoveComponent<T>(EntityQuery) Removes a component from a set of entities defined by a EntityQuery. Declaration public void RemoveComponent<T>(EntityQuery entityQuery) Parameters Type Name Description EntityQuery entityQuery The EntityQuery defining the entities to modify. Type Parameters Name Description T The type of component to remove. Remarks Removing a component changes an entity's archetype and results in the entity being moved to a different chunk. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before removing the component and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. RemoveComponent<T>(NativeArray<Entity>) Removes a component from a set of entities. Declaration public void RemoveComponent<T>(NativeArray<Entity> entities) Parameters Type Name Description NativeArray < Entity > entities An array identifying the entities to modify. Type Parameters Name Description T The type of component to remove. Remarks Removing a component changes an entity's archetype and results in the entity being moved to a different chunk. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before removing the component and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores."
  },
  "api/Unity.Entities.EntityManager.SetArchetype.html": {
    "href": "api/Unity.Entities.EntityManager.SetArchetype.html",
    "title": "Method SetArchetype | Entities | 0.17.0-preview.18",
    "keywords": "Method SetArchetype SetArchetype(Entity, EntityArchetype) Adds and removes components of an entity to match the specified EntityArchetype. Declaration public void SetArchetype(Entity entity, EntityArchetype archetype) Parameters Type Name Description Entity entity The entity whose archetype to change. EntityArchetype archetype The new archetype for the entity. Remarks Components of the archetype which the entity already has will preserve their values. Components of the archetype which the entity does not have will get the default value for their types. Adding a component to an entity changes its archetype and results in the entity being moved to a different chunk. The entity moves to a chunk with other entities that have the same shared component values. A new chunk is created if no chunk with the same archetype and shared component values currently exists. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before adding the component and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores."
  },
  "api/Unity.Entities.EntityManager.SetChunkComponentData.html": {
    "href": "api/Unity.Entities.EntityManager.SetChunkComponentData.html",
    "title": "Method SetChunkComponentData | Entities | 0.17.0-preview.18",
    "keywords": "Method SetChunkComponentData SetChunkComponentData<T>(ArchetypeChunk, T) Sets the value of a chunk component. Declaration public void SetChunkComponentData<T>(ArchetypeChunk chunk, T componentValue) where T : struct, IComponentData Parameters Type Name Description ArchetypeChunk chunk The chunk to modify. T componentValue The component data to set. Type Parameters Name Description T The component type. Remarks A chunk component is common to all entities in a chunk. You can access a chunk IComponentData instance through either the chunk itself or through an entity stored in that chunk. Exceptions Type Condition ArgumentException Thrown if the ArchetypeChunk object is invalid."
  },
  "api/Unity.Entities.EntityManager.SetComponentData.html": {
    "href": "api/Unity.Entities.EntityManager.SetComponentData.html",
    "title": "Method SetComponentData | Entities | 0.17.0-preview.18",
    "keywords": "Method SetComponentData SetComponentData<T>(Entity, T) Sets the value of a component of an entity. Declaration public void SetComponentData<T>(Entity entity, T componentData) where T : struct, IComponentData Parameters Type Name Description Entity entity The entity. T componentData The data to set. Type Parameters Name Description T The component type. Exceptions Type Condition ArgumentException Thrown if the component type has no fields."
  },
  "api/Unity.Entities.EntityManager.SetEnabled.html": {
    "href": "api/Unity.Entities.EntityManager.SetEnabled.html",
    "title": "Method SetEnabled | Entities | 0.17.0-preview.18",
    "keywords": "Method SetEnabled SetEnabled(Entity, Boolean) Enabled entities are processed by systems, disabled entities are not. Adds or removes the Disabled component. By default EntityQuery does not include entities containing the Disabled component. If the entity was converted from a prefab and thus has a LinkedEntityGroup component, the entire group will enabled or disabled. Declaration public void SetEnabled(Entity entity, bool enabled) Parameters Type Name Description Entity entity The entity to enable or disable Boolean enabled True if the entity should be enabled"
  },
  "api/Unity.Entities.EntityManager.SetSharedComponentData.html": {
    "href": "api/Unity.Entities.EntityManager.SetSharedComponentData.html",
    "title": "Method SetSharedComponentData | Entities | 0.17.0-preview.18",
    "keywords": "Method SetSharedComponentData SetSharedComponentData<T>(Entity, T) Sets the shared component of an entity. Declaration public void SetSharedComponentData<T>(Entity entity, T componentData) where T : struct, ISharedComponentData Parameters Type Name Description Entity entity The entity T componentData A shared component object containing the values to set. Type Parameters Name Description T The shared component type. Remarks Changing a shared component value of an entity results in the entity being moved to a different chunk. The entity moves to a chunk with other entities that have the same shared component values. A new chunk is created if no chunk with the same archetype and shared component values currently exists. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before setting the component and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. SetSharedComponentData<T>(EntityQuery, T) Sets the shared component of all entities in the query. Declaration public void SetSharedComponentData<T>(EntityQuery query, T componentData) where T : struct, ISharedComponentData Parameters Type Name Description EntityQuery query T componentData A shared component object containing the values to set. Type Parameters Name Description T The shared component type. Remarks The component data stays in the same chunk, the internal shared component data indices will be adjusted. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before setting the component and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores."
  },
  "api/Unity.Entities.EntityManager.SwapComponents.html": {
    "href": "api/Unity.Entities.EntityManager.SwapComponents.html",
    "title": "Method SwapComponents | Entities | 0.17.0-preview.18",
    "keywords": "Method SwapComponents SwapComponents(ArchetypeChunk, Int32, ArchetypeChunk, Int32) Swaps the components of two entities. Declaration public void SwapComponents(ArchetypeChunk leftChunk, int leftIndex, ArchetypeChunk rightChunk, int rightIndex) Parameters Type Name Description ArchetypeChunk leftChunk A chunk containing one of the entities to swap. Int32 leftIndex The index within the leftChunk of the entity and components to swap. ArchetypeChunk rightChunk The chunk containing the other entity to swap. This chunk can be the same as the leftChunk . It also does not need to be in the same World as leftChunk . Int32 rightIndex The index within the rightChunk of the entity and components to swap. Remarks The entities must have the same components. However, this function can swap the components of entities in different worlds, so they do not need to have identical archetype instances. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before swapping the components and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores."
  },
  "api/Unity.Entities.EntityManager.TotalChunkAddressSpaceInBytes.html": {
    "href": "api/Unity.Entities.EntityManager.TotalChunkAddressSpaceInBytes.html",
    "title": "Property TotalChunkAddressSpaceInBytes | Entities | 0.17.0-preview.18",
    "keywords": "Property TotalChunkAddressSpaceInBytes TotalChunkAddressSpaceInBytes The total reserved address space for all Chunks in all Worlds. Declaration public static ulong TotalChunkAddressSpaceInBytes { get; set; } Property Value Type Description UInt64"
  },
  "api/Unity.Entities.EntityManager.UniversalQuery.html": {
    "href": "api/Unity.Entities.EntityManager.UniversalQuery.html",
    "title": "Property UniversalQuery | Entities | 0.17.0-preview.18",
    "keywords": "Property UniversalQuery UniversalQuery A EntityQuery instance that matches all components. Declaration public EntityQuery UniversalQuery { get; } Property Value Type Description EntityQuery"
  },
  "api/Unity.Entities.EntityManager.Version.html": {
    "href": "api/Unity.Entities.EntityManager.Version.html",
    "title": "Property Version | Entities | 0.17.0-preview.18",
    "keywords": "Property Version Version The latest entity generational version. Declaration public int Version { get; } Property Value Type Description Int32 This is the version number that is assigned to a new entity. See Version ."
  },
  "api/Unity.Entities.EntityManager.World.html": {
    "href": "api/Unity.Entities.EntityManager.World.html",
    "title": "Property World | Entities | 0.17.0-preview.18",
    "keywords": "Property World World The World of this EntityManager. Declaration public World World { get; } Property Value Type Description World A World has one EntityManager and an EntityManager manages the entities of one World."
  },
  "api/Unity.Entities.EntityManagerDiffer.-ctor.html": {
    "href": "api/Unity.Entities.EntityManagerDiffer.-ctor.html",
    "title": "Constructor EntityManagerDiffer | Entities | 0.17.0-preview.18",
    "keywords": "Constructor EntityManagerDiffer EntityManagerDiffer(EntityManager, Allocator, EntityQueryDesc) Declaration public EntityManagerDiffer(EntityManager sourceEntityManager, Allocator allocator, EntityQueryDesc entityQueryDesc = null) Parameters Type Name Description EntityManager sourceEntityManager Allocator allocator EntityQueryDesc entityQueryDesc"
  },
  "api/Unity.Entities.EntityManagerDiffer.Dispose.html": {
    "href": "api/Unity.Entities.EntityManagerDiffer.Dispose.html",
    "title": "Method Dispose | Entities | 0.17.0-preview.18",
    "keywords": "Method Dispose Dispose() Declaration public void Dispose()"
  },
  "api/Unity.Entities.EntityManagerDiffer.GetChanges.html": {
    "href": "api/Unity.Entities.EntityManagerDiffer.GetChanges.html",
    "title": "Method GetChanges | Entities | 0.17.0-preview.18",
    "keywords": "Method GetChanges GetChanges(EntityManagerDifferOptions, Allocator) Generates a detailed change set for the world. All entities to be considered for diffing must have the EntityGuid component with a unique value. Declaration public EntityChanges GetChanges(EntityManagerDifferOptions options, Allocator allocator) Parameters Type Name Description EntityManagerDifferOptions options A set of options which can be toggled. Allocator allocator The allocator to use for the results object. Returns Type Description EntityChanges A set of changes for the world since the last fast-forward. Remarks The resulting EntityChanges must be disposed when no longer needed."
  },
  "api/Unity.Entities.EntityManagerDiffer.html": {
    "href": "api/Unity.Entities.EntityManagerDiffer.html",
    "title": "Struct EntityManagerDiffer | Entities | 0.17.0-preview.18",
    "keywords": "Struct EntityManagerDiffer The EntityManagerDiffer is used to efficiently track changes to a given world over time. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct EntityManagerDiffer : IDisposable Constructors Name Description EntityManagerDiffer(EntityManager, Allocator, EntityQueryDesc) Methods Name Description Dispose() GetChanges(EntityManagerDifferOptions, Allocator) Generates a detailed change set for the world. All entities to be considered for diffing must have the EntityGuid component with a unique value."
  },
  "api/Unity.Entities.EntityManagerDifferOptions.html": {
    "href": "api/Unity.Entities.EntityManagerDifferOptions.html",
    "title": "Enum EntityManagerDifferOptions | Entities | 0.17.0-preview.18",
    "keywords": "Enum EntityManagerDifferOptions Parameters used to configure the the execution of the differ. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Flags] public enum EntityManagerDifferOptions Fields Name Description Value None 0 IncludeForwardChangeSet If set; the resulting EntityChanges will include the forward change set. 2 IncludeReverseChangeSet If set; the resulting EntityChanges will include the reverse change set. This can be applied to the world to reverse the changes (i.e. undo). 4 FastForwardShadowWorld If set; the shadow world will be updated with the latest changes. 8 ClearMissingReferences If set; all references to destroyed or missing entities will be set to Entity.Null before computing changes. When applying a change this is needed to patch references to restored entities (they were destroyed but are being brought back by the change set). 16 ValidateUniqueEntityGuid If this flag is set; the entire world is checks for duplicate EntityGuid components. 32 Default The default set of options used by the Unity.Entities.EntityDiffer 62 UseReferentialEquality If set, components are not compared bit-wise. Bit-wise comparison implies that two components that have references to entities that have the same GUID but different indices/versions are different. Similarly blob asset references to blob assets that have the same hash but live at different addresses will be considered different as well. This is often not desirable. For these cases, it is more apt to check that GUIDs and hashes match. 64 Extension Methods SourceGenHelpers.GetFlags()"
  },
  "api/Unity.Entities.EntityManagerExtensions.GetComponentObject.html": {
    "href": "api/Unity.Entities.EntityManagerExtensions.GetComponentObject.html",
    "title": "Method GetComponentObject | Entities | 0.17.0-preview.18",
    "keywords": "Method GetComponentObject GetComponentObject<T>(EntityManager, Entity) Declaration public static T GetComponentObject<T>(this EntityManager entityManager, Entity entity) where T : Component Parameters Type Name Description EntityManager entityManager Entity entity Returns Type Description T Type Parameters Name Description T"
  },
  "api/Unity.Entities.EntityManagerExtensions.html": {
    "href": "api/Unity.Entities.EntityManagerExtensions.html",
    "title": "Class EntityManagerExtensions | Entities | 0.17.0-preview.18",
    "keywords": "Class EntityManagerExtensions Inheritance Object EntityManagerExtensions Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class EntityManagerExtensions Methods Name Description GetComponentObject<T>(EntityManager, Entity)"
  },
  "api/Unity.Entities.EntityManagerManagedComponentExtensions.AddChunkComponentData.html": {
    "href": "api/Unity.Entities.EntityManagerManagedComponentExtensions.AddChunkComponentData.html",
    "title": "Method AddChunkComponentData | Entities | 0.17.0-preview.18",
    "keywords": "Method AddChunkComponentData AddChunkComponentData<T>(EntityManager, Entity) Adds a chunk component to the specified entity. Declaration public static void AddChunkComponentData<T>(this EntityManager manager, Entity entity) where T : class, IComponentData Parameters Type Name Description EntityManager manager Entity entity The entity. Type Parameters Name Description T The type of component, which must implement IComponentData. Remarks Adding a chunk component to an entity changes that entity's archetype and results in the entity being moved to a different chunk, either one that already has an archetype containing the chunk component or a new chunk. A chunk component is common to all entities in a chunk. You can access a chunk IComponentData instance through either the chunk itself or through an entity stored in that chunk. In either case, getting or setting the component reads or writes the same data. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before adding the component and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. AddChunkComponentData<T>(EntityManager, EntityQuery, T) Adds a component to each of the chunks identified by a EntityQuery and set the component values. Declaration public static void AddChunkComponentData<T>(this EntityManager manager, EntityQuery entityQuery, T componentData) where T : class, IComponentData Parameters Type Name Description EntityManager manager EntityQuery entityQuery The EntityQuery identifying the chunks to modify. T componentData The data to set. Type Parameters Name Description T The type of component, which must implement IComponentData. Remarks This function finds all chunks whose archetype satisfies the EntityQuery and adds the specified component to them. A chunk component is common to all entities in a chunk. You can access a chunk IComponentData instance through either the chunk itself or through an entity stored in that chunk. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before adding the component and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores."
  },
  "api/Unity.Entities.EntityManagerManagedComponentExtensions.AddComponentData.html": {
    "href": "api/Unity.Entities.EntityManagerManagedComponentExtensions.AddComponentData.html",
    "title": "Method AddComponentData | Entities | 0.17.0-preview.18",
    "keywords": "Method AddComponentData AddComponentData<T>(EntityManager, Entity, T) Adds a component to an entity and set the value of that component. Declaration public static void AddComponentData<T>(this EntityManager manager, Entity entity, T componentData) where T : class, IComponentData Parameters Type Name Description EntityManager manager Entity entity The entity. T componentData The data to set. Type Parameters Name Description T The type of component. Remarks Adding a component changes an entity's archetype and results in the entity being moved to a different chunk. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before adding the component and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores."
  },
  "api/Unity.Entities.EntityManagerManagedComponentExtensions.GetChunkComponentData.html": {
    "href": "api/Unity.Entities.EntityManagerManagedComponentExtensions.GetChunkComponentData.html",
    "title": "Method GetChunkComponentData | Entities | 0.17.0-preview.18",
    "keywords": "Method GetChunkComponentData GetChunkComponentData<T>(EntityManager, ArchetypeChunk) Gets the value of a chunk component. Declaration public static T GetChunkComponentData<T>(this EntityManager manager, ArchetypeChunk chunk) where T : class, IComponentData Parameters Type Name Description EntityManager manager ArchetypeChunk chunk The chunk. Returns Type Description T A struct of type T containing the component value. Type Parameters Name Description T The component type. Remarks A chunk component is common to all entities in a chunk. You can access a chunk IComponentData instance through either the chunk itself or through an entity stored in that chunk. Exceptions Type Condition ArgumentException Thrown if the ArchetypeChunk object is invalid. GetChunkComponentData<T>(EntityManager, Entity) Gets the value of chunk component for the chunk containing the specified entity. Declaration public static T GetChunkComponentData<T>(this EntityManager manager, Entity entity) where T : class, IComponentData Parameters Type Name Description EntityManager manager Entity entity The entity. Returns Type Description T A struct of type T containing the component value. Type Parameters Name Description T The component type. Remarks A chunk component is common to all entities in a chunk. You can access a chunk IComponentData instance through either the chunk itself or through an entity stored in that chunk."
  },
  "api/Unity.Entities.EntityManagerManagedComponentExtensions.GetComponentData.html": {
    "href": "api/Unity.Entities.EntityManagerManagedComponentExtensions.GetComponentData.html",
    "title": "Method GetComponentData | Entities | 0.17.0-preview.18",
    "keywords": "Method GetComponentData GetComponentData<T>(EntityManager, Entity) Gets the value of a component for an entity. Declaration public static T GetComponentData<T>(this EntityManager manager, Entity entity) where T : class, IComponentData Parameters Type Name Description EntityManager manager Entity entity The entity. Returns Type Description T A struct of type T containing the component value. Type Parameters Name Description T The type of component to retrieve. Exceptions Type Condition ArgumentException Thrown if the component type has no fields."
  },
  "api/Unity.Entities.EntityManagerManagedComponentExtensions.html": {
    "href": "api/Unity.Entities.EntityManagerManagedComponentExtensions.html",
    "title": "Class EntityManagerManagedComponentExtensions | Entities | 0.17.0-preview.18",
    "keywords": "Class EntityManagerManagedComponentExtensions Inheritance Object EntityManagerManagedComponentExtensions Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class EntityManagerManagedComponentExtensions Methods Name Description AddChunkComponentData<T>(EntityManager, Entity) Adds a chunk component to the specified entity. AddChunkComponentData<T>(EntityManager, EntityQuery, T) Adds a component to each of the chunks identified by a EntityQuery and set the component values. AddComponentData<T>(EntityManager, Entity, T) Adds a component to an entity and set the value of that component. GetChunkComponentData<T>(EntityManager, ArchetypeChunk) Gets the value of a chunk component. GetChunkComponentData<T>(EntityManager, Entity) Gets the value of chunk component for the chunk containing the specified entity. GetComponentData<T>(EntityManager, Entity) Gets the value of a component for an entity. SetChunkComponentData<T>(EntityManager, ArchetypeChunk, T) Sets the value of a chunk component. SetComponentData<T>(EntityManager, Entity, T) Sets the value of a component of an entity."
  },
  "api/Unity.Entities.EntityManagerManagedComponentExtensions.SetChunkComponentData.html": {
    "href": "api/Unity.Entities.EntityManagerManagedComponentExtensions.SetChunkComponentData.html",
    "title": "Method SetChunkComponentData | Entities | 0.17.0-preview.18",
    "keywords": "Method SetChunkComponentData SetChunkComponentData<T>(EntityManager, ArchetypeChunk, T) Sets the value of a chunk component. Declaration public static void SetChunkComponentData<T>(this EntityManager manager, ArchetypeChunk chunk, T componentValue) where T : class, IComponentData Parameters Type Name Description EntityManager manager ArchetypeChunk chunk The chunk to modify. T componentValue The component data to set. Type Parameters Name Description T The component type. Remarks A chunk component is common to all entities in a chunk. You can access a chunk IComponentData instance through either the chunk itself or through an entity stored in that chunk. Exceptions Type Condition ArgumentException Thrown if the ArchetypeChunk object is invalid."
  },
  "api/Unity.Entities.EntityManagerManagedComponentExtensions.SetComponentData.html": {
    "href": "api/Unity.Entities.EntityManagerManagedComponentExtensions.SetComponentData.html",
    "title": "Method SetComponentData | Entities | 0.17.0-preview.18",
    "keywords": "Method SetComponentData SetComponentData<T>(EntityManager, Entity, T) Sets the value of a component of an entity. Declaration public static void SetComponentData<T>(this EntityManager manager, Entity entity, T componentData) where T : class, IComponentData Parameters Type Name Description EntityManager manager Entity entity The entity. T componentData The data to set. Type Parameters Name Description T The component type. Exceptions Type Condition ArgumentException Thrown if the component type has no fields."
  },
  "api/Unity.Entities.EntityPatcher.ApplyChangeSet.html": {
    "href": "api/Unity.Entities.EntityPatcher.ApplyChangeSet.html",
    "title": "Method ApplyChangeSet | Entities | 0.17.0-preview.18",
    "keywords": "Method ApplyChangeSet ApplyChangeSet(EntityManager, EntityChangeSet) Applies the given change set to the given entity manager. Declaration public static void ApplyChangeSet(EntityManager entityManager, EntityChangeSet changeSet) Parameters Type Name Description EntityManager entityManager The EntityManager to apply the change set to. EntityChangeSet changeSet The EntityChangeSet to apply."
  },
  "api/Unity.Entities.EntityPatcher.html": {
    "href": "api/Unity.Entities.EntityPatcher.html",
    "title": "Class EntityPatcher | Entities | 0.17.0-preview.18",
    "keywords": "Class EntityPatcher Inheritance Object EntityPatcher Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class EntityPatcher Methods Name Description ApplyChangeSet(EntityManager, EntityChangeSet) Applies the given change set to the given entity manager."
  },
  "api/Unity.Entities.EntityQuery.AddChangedVersionFilter.html": {
    "href": "api/Unity.Entities.EntityQuery.AddChangedVersionFilter.html",
    "title": "Method AddChangedVersionFilter | Entities | 0.17.0-preview.18",
    "keywords": "Method AddChangedVersionFilter AddChangedVersionFilter(ComponentType) Filters out entities in chunks for which the specified component has not changed. Additive with other filter functions. Declaration public void AddChangedVersionFilter(ComponentType componentType) Parameters Type Name Description ComponentType componentType ComponentType to mark as changed on this EntityQuery's filter. Remarks Saves a given ComponentType's index in RequiredComponents in this group's Changed filter."
  },
  "api/Unity.Entities.EntityQuery.AddDependency.html": {
    "href": "api/Unity.Entities.EntityQuery.AddDependency.html",
    "title": "Method AddDependency | Entities | 0.17.0-preview.18",
    "keywords": "Method AddDependency AddDependency(JobHandle) Adds another job handle to this EntityQuery's dependencies. Declaration public JobHandle AddDependency(JobHandle job) Parameters Type Name Description JobHandle job Returns Type Description JobHandle Remarks An entity query uses jobs internally when required to create arrays of entities and chunks. This junction adds an external job as a dependency for those internal jobs."
  },
  "api/Unity.Entities.EntityQuery.AddOrderVersionFilter.html": {
    "href": "api/Unity.Entities.EntityQuery.AddOrderVersionFilter.html",
    "title": "Method AddOrderVersionFilter | Entities | 0.17.0-preview.18",
    "keywords": "Method AddOrderVersionFilter AddOrderVersionFilter() Filters out entities in chunks for which no structural changes have occurred. Additive with other filter functions. Declaration public void AddOrderVersionFilter()"
  },
  "api/Unity.Entities.EntityQuery.AddSharedComponentFilter.html": {
    "href": "api/Unity.Entities.EntityQuery.AddSharedComponentFilter.html",
    "title": "Method AddSharedComponentFilter | Entities | 0.17.0-preview.18",
    "keywords": "Method AddSharedComponentFilter AddSharedComponentFilter<SharedComponent>(SharedComponent) Filters this EntityQuery so that it only selects entities with shared component values matching the values specified by the sharedComponent1 parameter. Additive with other filter functions. Declaration public void AddSharedComponentFilter<SharedComponent>(SharedComponent sharedComponent) where SharedComponent : struct, ISharedComponentData Parameters Type Name Description SharedComponent sharedComponent Type Parameters Name Description SharedComponent"
  },
  "api/Unity.Entities.EntityQuery.CalculateChunkCount.html": {
    "href": "api/Unity.Entities.EntityQuery.CalculateChunkCount.html",
    "title": "Method CalculateChunkCount | Entities | 0.17.0-preview.18",
    "keywords": "Method CalculateChunkCount CalculateChunkCount() Calculates the number of chunks that match this EntityQuery. Declaration public int CalculateChunkCount() Returns Type Description Int32 The number of chunks based on the current EntityQuery properties. Remarks The EntityQuery must execute and apply any filters to calculate the chunk count."
  },
  "api/Unity.Entities.EntityQuery.CalculateChunkCountWithoutFiltering.html": {
    "href": "api/Unity.Entities.EntityQuery.CalculateChunkCountWithoutFiltering.html",
    "title": "Method CalculateChunkCountWithoutFiltering | Entities | 0.17.0-preview.18",
    "keywords": "Method CalculateChunkCountWithoutFiltering CalculateChunkCountWithoutFiltering() Calculates the number of chunks that match this EntityQuery, ignoring any set filters. Declaration public int CalculateChunkCountWithoutFiltering() Returns Type Description Int32 The number of chunks based on the current EntityQuery properties. Remarks The EntityQuery must execute to calculate the chunk count."
  },
  "api/Unity.Entities.EntityQuery.CalculateEntityCount.html": {
    "href": "api/Unity.Entities.EntityQuery.CalculateEntityCount.html",
    "title": "Method CalculateEntityCount | Entities | 0.17.0-preview.18",
    "keywords": "Method CalculateEntityCount CalculateEntityCount() Calculates the number of entities selected by this EntityQuery. Declaration public int CalculateEntityCount() Returns Type Description Int32 The number of entities based on the current EntityQuery properties. Remarks The EntityQuery must execute and apply any filters to calculate the entity count. If you are checking for whether the entity count equals zero, consider the more efficient IsEmpty property. CalculateEntityCount(NativeArray<Entity>) Calculates the number of entities in the input entity list which match this EntityQuery. Declaration public int CalculateEntityCount(NativeArray<Entity> entityArray) Parameters Type Name Description NativeArray < Entity > entityArray A list of entities to limit execution to. Only entities in the list will be considered. Returns Type Description Int32 The number of entities based on the current EntityQuery properties. Remarks The EntityQuery must execute and apply any filters to calculate the entity count. If you are checking for whether the entity count equals zero, consider the more efficient IsEmpty property."
  },
  "api/Unity.Entities.EntityQuery.CalculateEntityCountWithoutFiltering.html": {
    "href": "api/Unity.Entities.EntityQuery.CalculateEntityCountWithoutFiltering.html",
    "title": "Method CalculateEntityCountWithoutFiltering | Entities | 0.17.0-preview.18",
    "keywords": "Method CalculateEntityCountWithoutFiltering CalculateEntityCountWithoutFiltering() Calculates the number of entities selected by this EntityQuery, ignoring any set filters. Declaration public int CalculateEntityCountWithoutFiltering() Returns Type Description Int32 The number of entities based on the current EntityQuery properties. Remarks The EntityQuery must execute to calculate the entity count. If you are checking for whether the entity count equals zero, consider the more efficient IsEmptyIgnoreFilter property. CalculateEntityCountWithoutFiltering(NativeArray<Entity>) Calculates the number of entities in the input entity list which match this EntityQuery, ignoring any filters. Declaration public int CalculateEntityCountWithoutFiltering(NativeArray<Entity> entityArray) Parameters Type Name Description NativeArray < Entity > entityArray A list of entities to limit execution to. Only entities in the list will be considered. Returns Type Description Int32 The number of entities based on the current EntityQuery properties. Remarks The EntityQuery must execute and apply any filters to calculate the entity count. If you are checking for whether the entity count equals zero, consider the more efficient IsEmpty property."
  },
  "api/Unity.Entities.EntityQuery.CompareComponents.html": {
    "href": "api/Unity.Entities.EntityQuery.CompareComponents.html",
    "title": "Method CompareComponents | Entities | 0.17.0-preview.18",
    "keywords": "Method CompareComponents CompareComponents(ComponentType[]) Compares a list of component types to the types defining this EntityQuery. Declaration public bool CompareComponents(ComponentType[] componentTypes) Parameters Type Name Description ComponentType [] componentTypes An array of ComponentType objects. Returns Type Description Boolean True, if the list of types, including any read/write access specifiers, matches the list of required component types of this EntityQuery. Remarks Only required types in the query are used as the basis for the comparison. If you include types that the query excludes or only includes as optional, the comparison returns false. CompareComponents(NativeArray<ComponentType>) Compares a list of component types to the types defining this EntityQuery. Declaration public bool CompareComponents(NativeArray<ComponentType> componentTypes) Parameters Type Name Description NativeArray < ComponentType > componentTypes An array of ComponentType objects. Returns Type Description Boolean True, if the list of types, including any read/write access specifiers, matches the list of required component types of this EntityQuery. Remarks Only required types in the query are used as the basis for the comparison. If you include types that the query excludes or only includes as optional, the comparison returns false. Do not include the Entity type, which is included implicitly."
  },
  "api/Unity.Entities.EntityQuery.CompareQuery.html": {
    "href": "api/Unity.Entities.EntityQuery.CompareQuery.html",
    "title": "Method CompareQuery | Entities | 0.17.0-preview.18",
    "keywords": "Method CompareQuery CompareQuery(EntityQueryDesc[]) Compares a query description to the description defining this EntityQuery. Declaration public bool CompareQuery(EntityQueryDesc[] queryDesc) Parameters Type Name Description EntityQueryDesc [] queryDesc The query description to compare. Returns Type Description Boolean True, if the query description contains the same components with the same read/write access modifiers as this EntityQuery. Remarks The All , Any , and None components in the query description are compared to the corresponding list in this EntityQuery."
  },
  "api/Unity.Entities.EntityQuery.CompleteDependency.html": {
    "href": "api/Unity.Entities.EntityQuery.CompleteDependency.html",
    "title": "Method CompleteDependency | Entities | 0.17.0-preview.18",
    "keywords": "Method CompleteDependency CompleteDependency() Ensures all jobs running on this EntityQuery complete. Declaration public void CompleteDependency() Remarks An entity query uses jobs internally when required to create arrays of entities and chunks. This function completes those jobs and returns when they are finished."
  },
  "api/Unity.Entities.EntityQuery.CopyFromComponentDataArray.html": {
    "href": "api/Unity.Entities.EntityQuery.CopyFromComponentDataArray.html",
    "title": "Method CopyFromComponentDataArray | Entities | 0.17.0-preview.18",
    "keywords": "Method CopyFromComponentDataArray CopyFromComponentDataArray<T>(NativeArray<T>) Declaration public void CopyFromComponentDataArray<T>(NativeArray<T> componentDataArray) where T : struct, IComponentData Parameters Type Name Description NativeArray <T> componentDataArray Type Parameters Name Description T"
  },
  "api/Unity.Entities.EntityQuery.CopyFromComponentDataArrayAsync.html": {
    "href": "api/Unity.Entities.EntityQuery.CopyFromComponentDataArrayAsync.html",
    "title": "Method CopyFromComponentDataArrayAsync | Entities | 0.17.0-preview.18",
    "keywords": "Method CopyFromComponentDataArrayAsync CopyFromComponentDataArrayAsync<T>(NativeArray<T>, out JobHandle) Declaration public void CopyFromComponentDataArrayAsync<T>(NativeArray<T> componentDataArray, out JobHandle jobhandle) where T : struct, IComponentData Parameters Type Name Description NativeArray <T> componentDataArray JobHandle jobhandle Type Parameters Name Description T"
  },
  "api/Unity.Entities.EntityQuery.CreateArchetypeChunkArray.html": {
    "href": "api/Unity.Entities.EntityQuery.CreateArchetypeChunkArray.html",
    "title": "Method CreateArchetypeChunkArray | Entities | 0.17.0-preview.18",
    "keywords": "Method CreateArchetypeChunkArray CreateArchetypeChunkArray(Allocator) Synchronously creates an array of the chunks containing entities matching this EntityQuery. Declaration public NativeArray<ArchetypeChunk> CreateArchetypeChunkArray(Allocator allocator) Parameters Type Name Description Allocator allocator Allocator to use for the array. Returns Type Description NativeArray < ArchetypeChunk > NativeArray of all the chunks in this ComponentChunkIterator. Remarks This method blocks until the internal job that performs the query completes. CreateArchetypeChunkArrayAsync(Allocator, out JobHandle)"
  },
  "api/Unity.Entities.EntityQuery.CreateArchetypeChunkArrayAsync.html": {
    "href": "api/Unity.Entities.EntityQuery.CreateArchetypeChunkArrayAsync.html",
    "title": "Method CreateArchetypeChunkArrayAsync | Entities | 0.17.0-preview.18",
    "keywords": "Method CreateArchetypeChunkArrayAsync CreateArchetypeChunkArrayAsync(Allocator, out JobHandle) Asynchronously creates an array of the chunks containing entities matching this EntityQuery. Declaration public NativeArray<ArchetypeChunk> CreateArchetypeChunkArrayAsync(Allocator allocator, out JobHandle jobhandle) Parameters Type Name Description Allocator allocator Allocator to use for the array. JobHandle jobhandle An out parameter assigned the handle to the internal job that gathers the chunks matching this EntityQuery. Returns Type Description NativeArray < ArchetypeChunk > NativeArray of all the chunks containing entities matching this query. Remarks Use jobhandle as a dependency for jobs that use the returned chunk array. CreateArchetypeChunkArray(Allocator) ."
  },
  "api/Unity.Entities.EntityQuery.Dispose.html": {
    "href": "api/Unity.Entities.EntityQuery.Dispose.html",
    "title": "Method Dispose | Entities | 0.17.0-preview.18",
    "keywords": "Method Dispose Dispose() Disposes this EntityQuery instance. Declaration public void Dispose() Remarks Do not dispose EntityQuery instances accessed using GetEntityQuery(ComponentType[]) . Systems automatically dispose of their own entity queries. Exceptions Type Condition InvalidOperationException Thrown if you attempt to dispose an EntityQuery belonging to a system."
  },
  "api/Unity.Entities.EntityQuery.Equals.html": {
    "href": "api/Unity.Entities.EntityQuery.Equals.html",
    "title": "Method Equals | Entities | 0.17.0-preview.18",
    "keywords": "Method Equals Equals(EntityQuery) Declaration public bool Equals(EntityQuery other) Parameters Type Name Description EntityQuery other Returns Type Description Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object)"
  },
  "api/Unity.Entities.EntityQuery.GetArchetypeChunkIterator.html": {
    "href": "api/Unity.Entities.EntityQuery.GetArchetypeChunkIterator.html",
    "title": "Method GetArchetypeChunkIterator | Entities | 0.17.0-preview.18",
    "keywords": "Method GetArchetypeChunkIterator GetArchetypeChunkIterator() Gets an ArchetypeChunkIterator which can be used to iterate over every chunk returned by this EntityQuery. Declaration public ArchetypeChunkIterator GetArchetypeChunkIterator() Returns Type Description ArchetypeChunkIterator ArchetypeChunkIterator for this EntityQuery"
  },
  "api/Unity.Entities.EntityQuery.GetCombinedComponentOrderVersion.html": {
    "href": "api/Unity.Entities.EntityQuery.GetCombinedComponentOrderVersion.html",
    "title": "Method GetCombinedComponentOrderVersion | Entities | 0.17.0-preview.18",
    "keywords": "Method GetCombinedComponentOrderVersion GetCombinedComponentOrderVersion() Declaration public int GetCombinedComponentOrderVersion() Returns Type Description Int32"
  },
  "api/Unity.Entities.EntityQuery.GetDependency.html": {
    "href": "api/Unity.Entities.EntityQuery.GetDependency.html",
    "title": "Method GetDependency | Entities | 0.17.0-preview.18",
    "keywords": "Method GetDependency GetDependency() Combines all dependencies in this EntityQuery into a single JobHandle. Declaration public JobHandle GetDependency() Returns Type Description JobHandle JobHandle that represents the combined dependencies of this EntityQuery Remarks An entity query uses jobs internally when required to create arrays of entities and chunks."
  },
  "api/Unity.Entities.EntityQuery.GetEntityQueryMask.html": {
    "href": "api/Unity.Entities.EntityQuery.GetEntityQueryMask.html",
    "title": "Method GetEntityQueryMask | Entities | 0.17.0-preview.18",
    "keywords": "Method GetEntityQueryMask GetEntityQueryMask() Returns an EntityQueryMask, which can be used to quickly determine if an entity matches the query. Declaration public EntityQueryMask GetEntityQueryMask() Returns Type Description EntityQueryMask Remarks A maximum of 1024 EntityQueryMasks can be allocated per World."
  },
  "api/Unity.Entities.EntityQuery.GetHashCode.html": {
    "href": "api/Unity.Entities.EntityQuery.GetHashCode.html",
    "title": "Method GetHashCode | Entities | 0.17.0-preview.18",
    "keywords": "Method GetHashCode GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode()"
  },
  "api/Unity.Entities.EntityQuery.GetSingleton.html": {
    "href": "api/Unity.Entities.EntityQuery.GetSingleton.html",
    "title": "Method GetSingleton | Entities | 0.17.0-preview.18",
    "keywords": "Method GetSingleton GetSingleton<T>() Gets the value of a singleton component. Declaration public T GetSingleton<T>() where T : struct, IComponentData Returns Type Description T A copy of the singleton component. Type Parameters Name Description T The component type. Remarks A singleton component is a component of which only one instance exists that satisfies this query. Exceptions Type Condition InvalidOperationException See Also SetSingleton<T>(T) GetSingletonEntity() GetSingleton<T> ()"
  },
  "api/Unity.Entities.EntityQuery.GetSingletonEntity.html": {
    "href": "api/Unity.Entities.EntityQuery.GetSingletonEntity.html",
    "title": "Method GetSingletonEntity | Entities | 0.17.0-preview.18",
    "keywords": "Method GetSingletonEntity GetSingletonEntity() Declaration public Entity GetSingletonEntity() Returns Type Description Entity"
  },
  "api/Unity.Entities.EntityQuery.HasFilter.html": {
    "href": "api/Unity.Entities.EntityQuery.HasFilter.html",
    "title": "Method HasFilter | Entities | 0.17.0-preview.18",
    "keywords": "Method HasFilter HasFilter() Reports whether this entity query has a filter applied to it. Declaration public bool HasFilter() Returns Type Description Boolean Returns true if the query has a filter, returns false if the query does not have a filter."
  },
  "api/Unity.Entities.EntityQuery.html": {
    "href": "api/Unity.Entities.EntityQuery.html",
    "title": "Struct EntityQuery | Entities | 0.17.0-preview.18",
    "keywords": "Struct EntityQuery Use an EntityQuery object to select entities with components that meet specific requirements. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct EntityQuery : IDisposable Remarks An entity query defines the set of component types that an archetype must contain in order for its chunks and entities to be selected and specifies whether the components accessed through the query are read-only or read-write. For simple queries, you can create an EntityQuery based on an array of component types. The following example defines a EntityQuery that finds all entities with both Rotation and RotationSpeed components. EntityQuery query = GetEntityQuery(typeof(Rotation), ComponentType.ReadOnly<RotationSpeed>()); The query uses ComponentType.ReadOnly instead of the simpler typeof expression to designate that the system does not write to RotationSpeed. Always specify read-only when possible, since there are fewer constraints on read-only access to data, which can help the Job scheduler execute your Jobs more efficiently. For more complex queries, you can use an EntityQueryDesc object to create the entity query. A query description provides a flexible query mechanism to specify which archetypes to select based on the following sets of components: All = All component types in this array must exist in the archetype Any = At least one of the component types in this array must exist in the archetype None = None of the component types in this array can exist in the archetype For example, the following query includes archetypes containing Rotation and RotationSpeed components, but excludes any archetypes containing a Frozen component: EntityQueryDesc description = new EntityQueryDesc { None = new ComponentType[] { typeof(Frozen) }, All = new ComponentType[] { typeof(Rotation), ComponentType.ReadOnly<RotationSpeed>() } }; EntityQuery query = GetEntityQuery(description); Note: Do not include completely optional components in the query description. To handle optional components, use IJobChunk and the ArchetypeChunk.Has() method to determine whether a chunk contains the optional component or not. Since all entities within the same chunk have the same components, you only need to check whether an optional component exists once per chunk -- not once per entity. Within a system class, use the ComponentSystemBase.GetEntityQuery() function to get a EntityQuery instance. Outside a system, use the EntityManager.CreateEntityQuery() function. You can filter entities based on whether they have changed or whether they have a specific value for a shared component . Once you have created an EntityQuery object, you can reset and change the filter settings, but you cannot modify the base query. Use an EntityQuery for the following purposes: To get a native array of a the values for a specific IComponentData type for all entities matching the query To get an native array of the ArchetypeChunk objects matching the query To schedule an IJobChunk job To control whether a system updates using [ComponentSystemBase.RequireForUpdate(query)] Note that Entities.ForEach defines an entity query implicitly based on the methods you call. You can access this implicit EntityQuery object using Entities.WithStoreEntityQueryInField . However, you cannot create an Entities.ForEach construction based on an existing EntityQuery object. Properties Name Description IsEmpty Reports whether this query would currently select zero entities. IsEmptyIgnoreFilter Reports whether this query would currently select zero entities. This will ignore any filters set on the EntityQuery. Methods Name Description AddChangedVersionFilter(ComponentType) Filters out entities in chunks for which the specified component has not changed. Additive with other filter functions. AddDependency(JobHandle) Adds another job handle to this EntityQuery's dependencies. AddOrderVersionFilter() Filters out entities in chunks for which no structural changes have occurred. Additive with other filter functions. AddSharedComponentFilter<SharedComponent>(SharedComponent) Filters this EntityQuery so that it only selects entities with shared component values matching the values specified by the sharedComponent1 parameter. Additive with other filter functions. CalculateChunkCount() Calculates the number of chunks that match this EntityQuery. CalculateChunkCountWithoutFiltering() Calculates the number of chunks that match this EntityQuery, ignoring any set filters. CalculateEntityCount() Calculates the number of entities selected by this EntityQuery. CalculateEntityCount(NativeArray<Entity>) Calculates the number of entities in the input entity list which match this EntityQuery. CalculateEntityCountWithoutFiltering() Calculates the number of entities selected by this EntityQuery, ignoring any set filters. CalculateEntityCountWithoutFiltering(NativeArray<Entity>) Calculates the number of entities in the input entity list which match this EntityQuery, ignoring any filters. CompareComponents(NativeArray<ComponentType>) Compares a list of component types to the types defining this EntityQuery. CompareComponents(ComponentType[]) Compares a list of component types to the types defining this EntityQuery. CompareQuery(EntityQueryDesc[]) Compares a query description to the description defining this EntityQuery. CompleteDependency() Ensures all jobs running on this EntityQuery complete. CopyFromComponentDataArray<T>(NativeArray<T>) CopyFromComponentDataArrayAsync<T>(NativeArray<T>, out JobHandle) CreateArchetypeChunkArray(Allocator) Synchronously creates an array of the chunks containing entities matching this EntityQuery. CreateArchetypeChunkArrayAsync(Allocator, out JobHandle) Asynchronously creates an array of the chunks containing entities matching this EntityQuery. Dispose() Disposes this EntityQuery instance. Equals(Object) Equals(EntityQuery) GetArchetypeChunkIterator() Gets an ArchetypeChunkIterator which can be used to iterate over every chunk returned by this EntityQuery. GetCombinedComponentOrderVersion() GetDependency() Combines all dependencies in this EntityQuery into a single JobHandle. GetEntityQueryMask() Returns an EntityQueryMask, which can be used to quickly determine if an entity matches the query. GetHashCode() GetSingleton<T>() Gets the value of a singleton component. GetSingletonEntity() HasFilter() Reports whether this entity query has a filter applied to it. Matches(Entity) Returns true if the entity matches the query, false if it does not. Applies any filters MatchesAny(NativeArray<Entity>) Fast path to determine if any entities in the input entity list match this EntityQuery. MatchesAnyIgnoreFilter(NativeArray<Entity>) Fast path to determine if any entities in the input entity list match this EntityQuery, ignoring any filters. MatchesNoFilter(Entity) Returns true if the entity matches the query, false if it does not. Applies any filters ResetFilter() Resets this EntityQuery's filter. SetChangedVersionFilter(ComponentType) Filters out entities in chunks for which the specified component has not changed. SetChangedVersionFilter(ComponentType[]) Filters out entities in chunks for which the specified component has not changed. SetOrderVersionFilter() Filters out entities in chunks for which no structural changes have occurred. SetSharedComponentFilter<SharedComponent1>(SharedComponent1) Filters this EntityQuery so that it only selects entities with shared component values matching the values specified by the sharedComponent1 parameter. SetSharedComponentFilter<SharedComponent1, SharedComponent2>(SharedComponent1, SharedComponent2) Filters this EntityQuery based on the values of two separate shared components. SetSingleton<T>(T) Sets the value of a singleton component. ToComponentDataArray<T>() ToComponentDataArray<T>(Allocator) Creates a NativeArray containing the components of type T for the selected entities. ToComponentDataArray<T>(NativeArray<Entity>, Allocator) Creates a NativeArray containing the components of type T for the selected entities, given an input entity list to limit the search. ToComponentDataArrayAsync<T>(Allocator, out JobHandle) Creates a NativeArray containing the components of type T for the selected entities. ToEntityArray(Allocator) Creates a NativeArray containing the selected entities. ToEntityArray(NativeArray<Entity>, Allocator) Creates a NativeArray containing the selected entities, given an input entity list to limit the search. ToEntityArrayAsync(Allocator, out JobHandle) Creates a NativeArray containing the selected entities. Operators Name Description Equality(EntityQuery, EntityQuery) Inequality(EntityQuery, EntityQuery) Extension Methods EntityQueryManagedComponentExtensions.GetSingleton<T>(EntityQuery) EntityQueryManagedComponentExtensions.SetSingleton<T>(EntityQuery, T) EntityQueryExtensionsForComponentArray.ToComponentArray<T>(EntityQuery) EntityQueryExtensionsForTransformAccessArray.GetTransformAccessArray(EntityQuery)"
  },
  "api/Unity.Entities.EntityQuery.IsEmpty.html": {
    "href": "api/Unity.Entities.EntityQuery.IsEmpty.html",
    "title": "Property IsEmpty | Entities | 0.17.0-preview.18",
    "keywords": "Property IsEmpty IsEmpty Reports whether this query would currently select zero entities. Declaration public bool IsEmpty { get; } Property Value Type Description Boolean True, if this EntityQuery matches zero existing entities. False, if it matches one or more entities."
  },
  "api/Unity.Entities.EntityQuery.IsEmptyIgnoreFilter.html": {
    "href": "api/Unity.Entities.EntityQuery.IsEmptyIgnoreFilter.html",
    "title": "Property IsEmptyIgnoreFilter | Entities | 0.17.0-preview.18",
    "keywords": "Property IsEmptyIgnoreFilter IsEmptyIgnoreFilter Reports whether this query would currently select zero entities. This will ignore any filters set on the EntityQuery. Declaration public bool IsEmptyIgnoreFilter { get; } Property Value Type Description Boolean True, if this EntityQuery matches zero existing entities. False, if it matches one or more entities."
  },
  "api/Unity.Entities.EntityQuery.Matches.html": {
    "href": "api/Unity.Entities.EntityQuery.Matches.html",
    "title": "Method Matches | Entities | 0.17.0-preview.18",
    "keywords": "Method Matches Matches(Entity) Returns true if the entity matches the query, false if it does not. Applies any filters Declaration public bool Matches(Entity e) Parameters Type Name Description Entity e The entity to check for match Returns Type Description Boolean Remarks This function creates an EntityQueryMask, if one does not exist for this query already. A maximum of 1024 EntityQueryMasks can be allocated per World."
  },
  "api/Unity.Entities.EntityQuery.MatchesAny.html": {
    "href": "api/Unity.Entities.EntityQuery.MatchesAny.html",
    "title": "Method MatchesAny | Entities | 0.17.0-preview.18",
    "keywords": "Method MatchesAny MatchesAny(NativeArray<Entity>) Fast path to determine if any entities in the input entity list match this EntityQuery. Declaration public bool MatchesAny(NativeArray<Entity> entityArray) Parameters Type Name Description NativeArray < Entity > entityArray A list of entities to limit execution to. Only entities in the list will be considered. Returns Type Description Boolean True if any entity in the list matches the query, false if no entities match the query"
  },
  "api/Unity.Entities.EntityQuery.MatchesAnyIgnoreFilter.html": {
    "href": "api/Unity.Entities.EntityQuery.MatchesAnyIgnoreFilter.html",
    "title": "Method MatchesAnyIgnoreFilter | Entities | 0.17.0-preview.18",
    "keywords": "Method MatchesAnyIgnoreFilter MatchesAnyIgnoreFilter(NativeArray<Entity>) Fast path to determine if any entities in the input entity list match this EntityQuery, ignoring any filters. Declaration public bool MatchesAnyIgnoreFilter(NativeArray<Entity> entityArray) Parameters Type Name Description NativeArray < Entity > entityArray A list of entities to limit execution to. Only entities in the list will be considered. Returns Type Description Boolean True if any entity in the list matches the query, false if no entities match the query"
  },
  "api/Unity.Entities.EntityQuery.MatchesNoFilter.html": {
    "href": "api/Unity.Entities.EntityQuery.MatchesNoFilter.html",
    "title": "Method MatchesNoFilter | Entities | 0.17.0-preview.18",
    "keywords": "Method MatchesNoFilter MatchesNoFilter(Entity) Returns true if the entity matches the query, false if it does not. Applies any filters Declaration public bool MatchesNoFilter(Entity e) Parameters Type Name Description Entity e The entity to check for match Returns Type Description Boolean Remarks This function creates an EntityQueryMask, if one does not exist for this query already. A maximum of 1024 EntityQueryMasks can be allocated per World."
  },
  "api/Unity.Entities.EntityQuery.op_Equality.html": {
    "href": "api/Unity.Entities.EntityQuery.op_Equality.html",
    "title": "Operator Equality | Entities | 0.17.0-preview.18",
    "keywords": "Operator Equality Equality(EntityQuery, EntityQuery) Declaration public static bool operator ==(EntityQuery lhs, EntityQuery rhs) Parameters Type Name Description EntityQuery lhs EntityQuery rhs Returns Type Description Boolean"
  },
  "api/Unity.Entities.EntityQuery.op_Inequality.html": {
    "href": "api/Unity.Entities.EntityQuery.op_Inequality.html",
    "title": "Operator Inequality | Entities | 0.17.0-preview.18",
    "keywords": "Operator Inequality Inequality(EntityQuery, EntityQuery) Declaration public static bool operator !=(EntityQuery lhs, EntityQuery rhs) Parameters Type Name Description EntityQuery lhs EntityQuery rhs Returns Type Description Boolean"
  },
  "api/Unity.Entities.EntityQuery.ResetFilter.html": {
    "href": "api/Unity.Entities.EntityQuery.ResetFilter.html",
    "title": "Method ResetFilter | Entities | 0.17.0-preview.18",
    "keywords": "Method ResetFilter ResetFilter() Resets this EntityQuery's filter. Declaration public void ResetFilter() Remarks Removes references to shared component data, if applicable, then resets the filter type to None."
  },
  "api/Unity.Entities.EntityQuery.SetChangedVersionFilter.html": {
    "href": "api/Unity.Entities.EntityQuery.SetChangedVersionFilter.html",
    "title": "Method SetChangedVersionFilter | Entities | 0.17.0-preview.18",
    "keywords": "Method SetChangedVersionFilter SetChangedVersionFilter(ComponentType) Filters out entities in chunks for which the specified component has not changed. Declaration public void SetChangedVersionFilter(ComponentType componentType) Parameters Type Name Description ComponentType componentType ComponentType to mark as changed on this EntityQuery's filter. Remarks Saves a given ComponentType's index in RequiredComponents in this group's Changed filter. SetChangedVersionFilter(ComponentType[]) Filters out entities in chunks for which the specified component has not changed. Declaration public void SetChangedVersionFilter(ComponentType[] componentType) Parameters Type Name Description ComponentType [] componentType ComponentTypes to mark as changed on this EntityQuery's filter. Remarks Saves a given ComponentType's index in RequiredComponents in this group's Changed filter."
  },
  "api/Unity.Entities.EntityQuery.SetOrderVersionFilter.html": {
    "href": "api/Unity.Entities.EntityQuery.SetOrderVersionFilter.html",
    "title": "Method SetOrderVersionFilter | Entities | 0.17.0-preview.18",
    "keywords": "Method SetOrderVersionFilter SetOrderVersionFilter() Filters out entities in chunks for which no structural changes have occurred. Declaration public void SetOrderVersionFilter()"
  },
  "api/Unity.Entities.EntityQuery.SetSharedComponentFilter.html": {
    "href": "api/Unity.Entities.EntityQuery.SetSharedComponentFilter.html",
    "title": "Method SetSharedComponentFilter | Entities | 0.17.0-preview.18",
    "keywords": "Method SetSharedComponentFilter SetSharedComponentFilter<SharedComponent1>(SharedComponent1) Filters this EntityQuery so that it only selects entities with shared component values matching the values specified by the sharedComponent1 parameter. Declaration public void SetSharedComponentFilter<SharedComponent1>(SharedComponent1 sharedComponent1) where SharedComponent1 : struct, ISharedComponentData Parameters Type Name Description SharedComponent1 sharedComponent1 The shared component values on which to filter. Type Parameters Name Description SharedComponent1 The type of shared component. (The type must also be one of the types used to create the EntityQuery. SetSharedComponentFilter<SharedComponent1, SharedComponent2>(SharedComponent1, SharedComponent2) Filters this EntityQuery based on the values of two separate shared components. Declaration public void SetSharedComponentFilter<SharedComponent1, SharedComponent2>(SharedComponent1 sharedComponent1, SharedComponent2 sharedComponent2) where SharedComponent1 : struct, ISharedComponentData where SharedComponent2 : struct, ISharedComponentData Parameters Type Name Description SharedComponent1 sharedComponent1 Shared component values on which to filter. SharedComponent2 sharedComponent2 Shared component values on which to filter. Type Parameters Name Description SharedComponent1 The type of shared component. (The type must also be one of the types used to create the EntityQuery. SharedComponent2 The type of shared component. (The type must also be one of the types used to create the EntityQuery. Remarks The filter only selects entities for which both shared component values specified by the sharedComponent1 and sharedComponent2 parameters match."
  },
  "api/Unity.Entities.EntityQuery.SetSingleton.html": {
    "href": "api/Unity.Entities.EntityQuery.SetSingleton.html",
    "title": "Method SetSingleton | Entities | 0.17.0-preview.18",
    "keywords": "Method SetSingleton SetSingleton<T>(T) Sets the value of a singleton component. Declaration public void SetSingleton<T>(T value) where T : struct, IComponentData Parameters Type Name Description T value An instance of type T containing the values to set. Type Parameters Name Description T The component type. Remarks For a component to be a singleton, there can be only one instance of that component that satisfies this query. Note: singletons are otherwise normal entities. The EntityQuery and ComponentSystemBase singleton functions add checks that you have not created two instances of a type that can be accessed by this singleton query, but other APIs do not prevent such accidental creation. To create a singleton, create an entity with the singleton component. For example, if you had a component defined as: public struct Singlet : IComponentData { public int Value; } You could create a singleton as follows: Entity singletonEntity = entityManager.CreateEntity(typeof(Singlet)); entityManager.SetComponentData(singletonEntity, new Singlet { Value = 1 }); To update the singleton component after creation, you can use an EntityQuery object that selects the singleton entity and call this SetSingleton() function: queryForSingleton.SetSingleton<Singlet>(new Singlet {Value = 1}); You can set and get the singleton value from a system: see SetSingleton<T>(T) and GetSingleton<T>() . Exceptions Type Condition InvalidOperationException Thrown if more than one instance of this component type exists in the world or the component type appears in more than one archetype. See Also GetSingleton<T>() GetSingletonEntity()"
  },
  "api/Unity.Entities.EntityQuery.ToComponentDataArray.html": {
    "href": "api/Unity.Entities.EntityQuery.ToComponentDataArray.html",
    "title": "Method ToComponentDataArray | Entities | 0.17.0-preview.18",
    "keywords": "Method ToComponentDataArray ToComponentDataArray<T>(Allocator) Creates a NativeArray containing the components of type T for the selected entities. Declaration public NativeArray<T> ToComponentDataArray<T>(Allocator allocator) where T : struct, IComponentData Parameters Type Name Description Allocator allocator The type of memory to allocate. Returns Type Description NativeArray <T> An array containing the specified component for all the entities selected by the EntityQuery. Type Parameters Name Description T The component type. Exceptions Type Condition InvalidOperationException Thrown if you ask for a component that is not part of the group. ToComponentDataArray<T>(NativeArray<Entity>, Allocator) Creates a NativeArray containing the components of type T for the selected entities, given an input entity list to limit the search. Declaration public NativeArray<T> ToComponentDataArray<T>(NativeArray<Entity> entityArray, Allocator allocator) where T : struct, IComponentData Parameters Type Name Description NativeArray < Entity > entityArray The list of entities to be considered. Only entities in this list will be considered as output. Allocator allocator The type of memory to allocate. Returns Type Description NativeArray <T> An array containing all the entities selected by the EntityQuery. Type Parameters Name Description T Remarks This version of the function blocks until the Job used to fill the array is complete. ToComponentDataArray<T>() Declaration public T[] ToComponentDataArray<T>() where T : class, IComponentData Returns Type Description T[] Type Parameters Name Description T"
  },
  "api/Unity.Entities.EntityQuery.ToComponentDataArrayAsync.html": {
    "href": "api/Unity.Entities.EntityQuery.ToComponentDataArrayAsync.html",
    "title": "Method ToComponentDataArrayAsync | Entities | 0.17.0-preview.18",
    "keywords": "Method ToComponentDataArrayAsync ToComponentDataArrayAsync<T>(Allocator, out JobHandle) Creates a NativeArray containing the components of type T for the selected entities. Declaration public NativeArray<T> ToComponentDataArrayAsync<T>(Allocator allocator, out JobHandle jobhandle) where T : struct, IComponentData Parameters Type Name Description Allocator allocator The type of memory to allocate. JobHandle jobhandle An out parameter assigned a handle that you can use as a dependency for a Job that uses the NativeArray. Returns Type Description NativeArray <T> An array containing the specified component for all the entities selected by the EntityQuery. Type Parameters Name Description T The component type."
  },
  "api/Unity.Entities.EntityQuery.ToEntityArray.html": {
    "href": "api/Unity.Entities.EntityQuery.ToEntityArray.html",
    "title": "Method ToEntityArray | Entities | 0.17.0-preview.18",
    "keywords": "Method ToEntityArray ToEntityArray(Allocator) Creates a NativeArray containing the selected entities. Declaration public NativeArray<Entity> ToEntityArray(Allocator allocator) Parameters Type Name Description Allocator allocator The type of memory to allocate. Returns Type Description NativeArray < Entity > An array containing all the entities selected by the EntityQuery. Remarks This version of the function blocks until the Job used to fill the array is complete. ToEntityArray(NativeArray<Entity>, Allocator) Creates a NativeArray containing the selected entities, given an input entity list to limit the search. Declaration public NativeArray<Entity> ToEntityArray(NativeArray<Entity> entityArray, Allocator allocator) Parameters Type Name Description NativeArray < Entity > entityArray The list of entities to be considered. Only entities in this list will be considered as output. Allocator allocator The type of memory to allocate. Returns Type Description NativeArray < Entity > An array containing all the entities selected by the EntityQuery. Remarks This version of the function blocks until the Job used to fill the array is complete."
  },
  "api/Unity.Entities.EntityQuery.ToEntityArrayAsync.html": {
    "href": "api/Unity.Entities.EntityQuery.ToEntityArrayAsync.html",
    "title": "Method ToEntityArrayAsync | Entities | 0.17.0-preview.18",
    "keywords": "Method ToEntityArrayAsync ToEntityArrayAsync(Allocator, out JobHandle) Creates a NativeArray containing the selected entities. Declaration public NativeArray<Entity> ToEntityArrayAsync(Allocator allocator, out JobHandle jobhandle) Parameters Type Name Description Allocator allocator The type of memory to allocate. JobHandle jobhandle An out parameter assigned a handle that you can use as a dependency for a Job that uses the NativeArray. Returns Type Description NativeArray < Entity > An array containing all the entities selected by the EntityQuery."
  },
  "api/Unity.Entities.EntityQueryBuilder.Equals.html": {
    "href": "api/Unity.Entities.EntityQueryBuilder.Equals.html",
    "title": "Method Equals | Entities | 0.17.0-preview.18",
    "keywords": "Method Equals Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object)"
  },
  "api/Unity.Entities.EntityQueryBuilder.ForEach.html": {
    "href": "api/Unity.Entities.EntityQueryBuilder.ForEach.html",
    "title": "Method ForEach | Entities | 0.17.0-preview.18",
    "keywords": "Method ForEach ForEach(EntityQueryBuilder.F_E) Declaration public void ForEach(EntityQueryBuilder.F_E action) Parameters Type Name Description Unity.Entities.EntityQueryBuilder.F_E action"
  },
  "api/Unity.Entities.EntityQueryBuilder.GetHashCode.html": {
    "href": "api/Unity.Entities.EntityQueryBuilder.GetHashCode.html",
    "title": "Method GetHashCode | Entities | 0.17.0-preview.18",
    "keywords": "Method GetHashCode GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode()"
  },
  "api/Unity.Entities.EntityQueryBuilder.html": {
    "href": "api/Unity.Entities.EntityQueryBuilder.html",
    "title": "Struct EntityQueryBuilder | Entities | 0.17.0-preview.18",
    "keywords": "Struct EntityQueryBuilder Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct EntityQueryBuilder Methods Name Description Equals(Object) ForEach(EntityQueryBuilder.F_E) GetHashCode() ToEntityQuery() ToEntityQueryDesc() With(EntityQuery) With(EntityQueryOptions) WithAll(ComponentType) WithAll(ComponentType, ComponentType) WithAll(ComponentType, ComponentType, ComponentType) WithAll(ComponentType, ComponentType, ComponentType, ComponentType) WithAll(ComponentType, ComponentType, ComponentType, ComponentType, ComponentType) WithAll<T0>() WithAll<T0, T1>() WithAll<T0, T1, T2>() WithAll<T0, T1, T2, T3>() WithAll<T0, T1, T2, T3, T4>() WithAllReadOnly(ComponentType) WithAllReadOnly(ComponentType, ComponentType) WithAllReadOnly(ComponentType, ComponentType, ComponentType) WithAllReadOnly(ComponentType, ComponentType, ComponentType, ComponentType) WithAllReadOnly(ComponentType, ComponentType, ComponentType, ComponentType, ComponentType) WithAllReadOnly<T0>() WithAllReadOnly<T0, T1>() WithAllReadOnly<T0, T1, T2>() WithAllReadOnly<T0, T1, T2, T3>() WithAllReadOnly<T0, T1, T2, T3, T4>() WithAny(ComponentType) WithAny(ComponentType, ComponentType) WithAny(ComponentType, ComponentType, ComponentType) WithAny(ComponentType, ComponentType, ComponentType, ComponentType) WithAny(ComponentType, ComponentType, ComponentType, ComponentType, ComponentType) WithAny<T0>() WithAny<T0, T1>() WithAny<T0, T1, T2>() WithAny<T0, T1, T2, T3>() WithAny<T0, T1, T2, T3, T4>() WithAnyReadOnly(ComponentType) WithAnyReadOnly(ComponentType, ComponentType) WithAnyReadOnly(ComponentType, ComponentType, ComponentType) WithAnyReadOnly(ComponentType, ComponentType, ComponentType, ComponentType) WithAnyReadOnly(ComponentType, ComponentType, ComponentType, ComponentType, ComponentType) WithAnyReadOnly<T0>() WithAnyReadOnly<T0, T1>() WithAnyReadOnly<T0, T1, T2>() WithAnyReadOnly<T0, T1, T2, T3>() WithAnyReadOnly<T0, T1, T2, T3, T4>() WithIncludeAll() This sets the options IncludeDisabled and EntityQueryOptions.IncludePrefab so that Entities with Disabled or Prefab components will not be hidden from the query. WithNone(ComponentType) WithNone(ComponentType, ComponentType) WithNone(ComponentType, ComponentType, ComponentType) WithNone(ComponentType, ComponentType, ComponentType, ComponentType) WithNone(ComponentType, ComponentType, ComponentType, ComponentType, ComponentType) WithNone<T0>() WithNone<T0, T1>() WithNone<T0, T1, T2>() WithNone<T0, T1, T2, T3>() WithNone<T0, T1, T2, T3, T4>()"
  },
  "api/Unity.Entities.EntityQueryBuilder.ToEntityQuery.html": {
    "href": "api/Unity.Entities.EntityQueryBuilder.ToEntityQuery.html",
    "title": "Method ToEntityQuery | Entities | 0.17.0-preview.18",
    "keywords": "Method ToEntityQuery ToEntityQuery() Declaration public EntityQuery ToEntityQuery() Returns Type Description EntityQuery"
  },
  "api/Unity.Entities.EntityQueryBuilder.ToEntityQueryDesc.html": {
    "href": "api/Unity.Entities.EntityQueryBuilder.ToEntityQueryDesc.html",
    "title": "Method ToEntityQueryDesc | Entities | 0.17.0-preview.18",
    "keywords": "Method ToEntityQueryDesc ToEntityQueryDesc() Declaration public EntityQueryDesc ToEntityQueryDesc() Returns Type Description EntityQueryDesc"
  },
  "api/Unity.Entities.EntityQueryBuilder.With.html": {
    "href": "api/Unity.Entities.EntityQueryBuilder.With.html",
    "title": "Method With | Entities | 0.17.0-preview.18",
    "keywords": "Method With With(EntityQuery) Declaration public EntityQueryBuilder With(EntityQuery entityQuery) Parameters Type Name Description EntityQuery entityQuery Returns Type Description EntityQueryBuilder With(EntityQueryOptions) Declaration public EntityQueryBuilder With(EntityQueryOptions options) Parameters Type Name Description EntityQueryOptions options Returns Type Description EntityQueryBuilder"
  },
  "api/Unity.Entities.EntityQueryBuilder.WithAll.html": {
    "href": "api/Unity.Entities.EntityQueryBuilder.WithAll.html",
    "title": "Method WithAll | Entities | 0.17.0-preview.18",
    "keywords": "Method WithAll WithAll<T0>() Declaration public EntityQueryBuilder WithAll<T0>() Returns Type Description EntityQueryBuilder Type Parameters Name Description T0 WithAll(ComponentType) Declaration public EntityQueryBuilder WithAll(ComponentType type0) Parameters Type Name Description ComponentType type0 Returns Type Description EntityQueryBuilder WithAll<T0, T1>() Declaration public EntityQueryBuilder WithAll<T0, T1>() Returns Type Description EntityQueryBuilder Type Parameters Name Description T0 T1 WithAll(ComponentType, ComponentType) Declaration public EntityQueryBuilder WithAll(ComponentType type0, ComponentType type1) Parameters Type Name Description ComponentType type0 ComponentType type1 Returns Type Description EntityQueryBuilder WithAll<T0, T1, T2>() Declaration public EntityQueryBuilder WithAll<T0, T1, T2>() Returns Type Description EntityQueryBuilder Type Parameters Name Description T0 T1 T2 WithAll(ComponentType, ComponentType, ComponentType) Declaration public EntityQueryBuilder WithAll(ComponentType type0, ComponentType type1, ComponentType type2) Parameters Type Name Description ComponentType type0 ComponentType type1 ComponentType type2 Returns Type Description EntityQueryBuilder WithAll<T0, T1, T2, T3>() Declaration public EntityQueryBuilder WithAll<T0, T1, T2, T3>() Returns Type Description EntityQueryBuilder Type Parameters Name Description T0 T1 T2 T3 WithAll(ComponentType, ComponentType, ComponentType, ComponentType) Declaration public EntityQueryBuilder WithAll(ComponentType type0, ComponentType type1, ComponentType type2, ComponentType type3) Parameters Type Name Description ComponentType type0 ComponentType type1 ComponentType type2 ComponentType type3 Returns Type Description EntityQueryBuilder WithAll<T0, T1, T2, T3, T4>() Declaration public EntityQueryBuilder WithAll<T0, T1, T2, T3, T4>() Returns Type Description EntityQueryBuilder Type Parameters Name Description T0 T1 T2 T3 T4 WithAll(ComponentType, ComponentType, ComponentType, ComponentType, ComponentType) Declaration public EntityQueryBuilder WithAll(ComponentType type0, ComponentType type1, ComponentType type2, ComponentType type3, ComponentType type4) Parameters Type Name Description ComponentType type0 ComponentType type1 ComponentType type2 ComponentType type3 ComponentType type4 Returns Type Description EntityQueryBuilder"
  },
  "api/Unity.Entities.EntityQueryBuilder.WithAllReadOnly.html": {
    "href": "api/Unity.Entities.EntityQueryBuilder.WithAllReadOnly.html",
    "title": "Method WithAllReadOnly | Entities | 0.17.0-preview.18",
    "keywords": "Method WithAllReadOnly WithAllReadOnly<T0>() Declaration public EntityQueryBuilder WithAllReadOnly<T0>() Returns Type Description EntityQueryBuilder Type Parameters Name Description T0 WithAllReadOnly(ComponentType) Declaration public EntityQueryBuilder WithAllReadOnly(ComponentType type0) Parameters Type Name Description ComponentType type0 Returns Type Description EntityQueryBuilder WithAllReadOnly<T0, T1>() Declaration public EntityQueryBuilder WithAllReadOnly<T0, T1>() Returns Type Description EntityQueryBuilder Type Parameters Name Description T0 T1 WithAllReadOnly(ComponentType, ComponentType) Declaration public EntityQueryBuilder WithAllReadOnly(ComponentType type0, ComponentType type1) Parameters Type Name Description ComponentType type0 ComponentType type1 Returns Type Description EntityQueryBuilder WithAllReadOnly<T0, T1, T2>() Declaration public EntityQueryBuilder WithAllReadOnly<T0, T1, T2>() Returns Type Description EntityQueryBuilder Type Parameters Name Description T0 T1 T2 WithAllReadOnly(ComponentType, ComponentType, ComponentType) Declaration public EntityQueryBuilder WithAllReadOnly(ComponentType type0, ComponentType type1, ComponentType type2) Parameters Type Name Description ComponentType type0 ComponentType type1 ComponentType type2 Returns Type Description EntityQueryBuilder WithAllReadOnly<T0, T1, T2, T3>() Declaration public EntityQueryBuilder WithAllReadOnly<T0, T1, T2, T3>() Returns Type Description EntityQueryBuilder Type Parameters Name Description T0 T1 T2 T3 WithAllReadOnly(ComponentType, ComponentType, ComponentType, ComponentType) Declaration public EntityQueryBuilder WithAllReadOnly(ComponentType type0, ComponentType type1, ComponentType type2, ComponentType type3) Parameters Type Name Description ComponentType type0 ComponentType type1 ComponentType type2 ComponentType type3 Returns Type Description EntityQueryBuilder WithAllReadOnly<T0, T1, T2, T3, T4>() Declaration public EntityQueryBuilder WithAllReadOnly<T0, T1, T2, T3, T4>() Returns Type Description EntityQueryBuilder Type Parameters Name Description T0 T1 T2 T3 T4 WithAllReadOnly(ComponentType, ComponentType, ComponentType, ComponentType, ComponentType) Declaration public EntityQueryBuilder WithAllReadOnly(ComponentType type0, ComponentType type1, ComponentType type2, ComponentType type3, ComponentType type4) Parameters Type Name Description ComponentType type0 ComponentType type1 ComponentType type2 ComponentType type3 ComponentType type4 Returns Type Description EntityQueryBuilder"
  },
  "api/Unity.Entities.EntityQueryBuilder.WithAny.html": {
    "href": "api/Unity.Entities.EntityQueryBuilder.WithAny.html",
    "title": "Method WithAny | Entities | 0.17.0-preview.18",
    "keywords": "Method WithAny WithAny<T0>() Declaration public EntityQueryBuilder WithAny<T0>() Returns Type Description EntityQueryBuilder Type Parameters Name Description T0 WithAny(ComponentType) Declaration public EntityQueryBuilder WithAny(ComponentType type0) Parameters Type Name Description ComponentType type0 Returns Type Description EntityQueryBuilder WithAny<T0, T1>() Declaration public EntityQueryBuilder WithAny<T0, T1>() Returns Type Description EntityQueryBuilder Type Parameters Name Description T0 T1 WithAny(ComponentType, ComponentType) Declaration public EntityQueryBuilder WithAny(ComponentType type0, ComponentType type1) Parameters Type Name Description ComponentType type0 ComponentType type1 Returns Type Description EntityQueryBuilder WithAny<T0, T1, T2>() Declaration public EntityQueryBuilder WithAny<T0, T1, T2>() Returns Type Description EntityQueryBuilder Type Parameters Name Description T0 T1 T2 WithAny(ComponentType, ComponentType, ComponentType) Declaration public EntityQueryBuilder WithAny(ComponentType type0, ComponentType type1, ComponentType type2) Parameters Type Name Description ComponentType type0 ComponentType type1 ComponentType type2 Returns Type Description EntityQueryBuilder WithAny<T0, T1, T2, T3>() Declaration public EntityQueryBuilder WithAny<T0, T1, T2, T3>() Returns Type Description EntityQueryBuilder Type Parameters Name Description T0 T1 T2 T3 WithAny(ComponentType, ComponentType, ComponentType, ComponentType) Declaration public EntityQueryBuilder WithAny(ComponentType type0, ComponentType type1, ComponentType type2, ComponentType type3) Parameters Type Name Description ComponentType type0 ComponentType type1 ComponentType type2 ComponentType type3 Returns Type Description EntityQueryBuilder WithAny<T0, T1, T2, T3, T4>() Declaration public EntityQueryBuilder WithAny<T0, T1, T2, T3, T4>() Returns Type Description EntityQueryBuilder Type Parameters Name Description T0 T1 T2 T3 T4 WithAny(ComponentType, ComponentType, ComponentType, ComponentType, ComponentType) Declaration public EntityQueryBuilder WithAny(ComponentType type0, ComponentType type1, ComponentType type2, ComponentType type3, ComponentType type4) Parameters Type Name Description ComponentType type0 ComponentType type1 ComponentType type2 ComponentType type3 ComponentType type4 Returns Type Description EntityQueryBuilder"
  },
  "api/Unity.Entities.EntityQueryBuilder.WithAnyReadOnly.html": {
    "href": "api/Unity.Entities.EntityQueryBuilder.WithAnyReadOnly.html",
    "title": "Method WithAnyReadOnly | Entities | 0.17.0-preview.18",
    "keywords": "Method WithAnyReadOnly WithAnyReadOnly<T0>() Declaration public EntityQueryBuilder WithAnyReadOnly<T0>() Returns Type Description EntityQueryBuilder Type Parameters Name Description T0 WithAnyReadOnly(ComponentType) Declaration public EntityQueryBuilder WithAnyReadOnly(ComponentType type0) Parameters Type Name Description ComponentType type0 Returns Type Description EntityQueryBuilder WithAnyReadOnly<T0, T1>() Declaration public EntityQueryBuilder WithAnyReadOnly<T0, T1>() Returns Type Description EntityQueryBuilder Type Parameters Name Description T0 T1 WithAnyReadOnly(ComponentType, ComponentType) Declaration public EntityQueryBuilder WithAnyReadOnly(ComponentType type0, ComponentType type1) Parameters Type Name Description ComponentType type0 ComponentType type1 Returns Type Description EntityQueryBuilder WithAnyReadOnly<T0, T1, T2>() Declaration public EntityQueryBuilder WithAnyReadOnly<T0, T1, T2>() Returns Type Description EntityQueryBuilder Type Parameters Name Description T0 T1 T2 WithAnyReadOnly(ComponentType, ComponentType, ComponentType) Declaration public EntityQueryBuilder WithAnyReadOnly(ComponentType type0, ComponentType type1, ComponentType type2) Parameters Type Name Description ComponentType type0 ComponentType type1 ComponentType type2 Returns Type Description EntityQueryBuilder WithAnyReadOnly<T0, T1, T2, T3>() Declaration public EntityQueryBuilder WithAnyReadOnly<T0, T1, T2, T3>() Returns Type Description EntityQueryBuilder Type Parameters Name Description T0 T1 T2 T3 WithAnyReadOnly(ComponentType, ComponentType, ComponentType, ComponentType) Declaration public EntityQueryBuilder WithAnyReadOnly(ComponentType type0, ComponentType type1, ComponentType type2, ComponentType type3) Parameters Type Name Description ComponentType type0 ComponentType type1 ComponentType type2 ComponentType type3 Returns Type Description EntityQueryBuilder WithAnyReadOnly<T0, T1, T2, T3, T4>() Declaration public EntityQueryBuilder WithAnyReadOnly<T0, T1, T2, T3, T4>() Returns Type Description EntityQueryBuilder Type Parameters Name Description T0 T1 T2 T3 T4 WithAnyReadOnly(ComponentType, ComponentType, ComponentType, ComponentType, ComponentType) Declaration public EntityQueryBuilder WithAnyReadOnly(ComponentType type0, ComponentType type1, ComponentType type2, ComponentType type3, ComponentType type4) Parameters Type Name Description ComponentType type0 ComponentType type1 ComponentType type2 ComponentType type3 ComponentType type4 Returns Type Description EntityQueryBuilder"
  },
  "api/Unity.Entities.EntityQueryBuilder.WithIncludeAll.html": {
    "href": "api/Unity.Entities.EntityQueryBuilder.WithIncludeAll.html",
    "title": "Method WithIncludeAll | Entities | 0.17.0-preview.18",
    "keywords": "Method WithIncludeAll WithIncludeAll() This sets the options IncludeDisabled and EntityQueryOptions.IncludePrefab so that Entities with Disabled or Prefab components will not be hidden from the query. Declaration public EntityQueryBuilder WithIncludeAll() Returns Type Description EntityQueryBuilder"
  },
  "api/Unity.Entities.EntityQueryBuilder.WithNone.html": {
    "href": "api/Unity.Entities.EntityQueryBuilder.WithNone.html",
    "title": "Method WithNone | Entities | 0.17.0-preview.18",
    "keywords": "Method WithNone WithNone<T0>() Declaration public EntityQueryBuilder WithNone<T0>() Returns Type Description EntityQueryBuilder Type Parameters Name Description T0 WithNone(ComponentType) Declaration public EntityQueryBuilder WithNone(ComponentType type0) Parameters Type Name Description ComponentType type0 Returns Type Description EntityQueryBuilder WithNone<T0, T1>() Declaration public EntityQueryBuilder WithNone<T0, T1>() Returns Type Description EntityQueryBuilder Type Parameters Name Description T0 T1 WithNone(ComponentType, ComponentType) Declaration public EntityQueryBuilder WithNone(ComponentType type0, ComponentType type1) Parameters Type Name Description ComponentType type0 ComponentType type1 Returns Type Description EntityQueryBuilder WithNone<T0, T1, T2>() Declaration public EntityQueryBuilder WithNone<T0, T1, T2>() Returns Type Description EntityQueryBuilder Type Parameters Name Description T0 T1 T2 WithNone(ComponentType, ComponentType, ComponentType) Declaration public EntityQueryBuilder WithNone(ComponentType type0, ComponentType type1, ComponentType type2) Parameters Type Name Description ComponentType type0 ComponentType type1 ComponentType type2 Returns Type Description EntityQueryBuilder WithNone<T0, T1, T2, T3>() Declaration public EntityQueryBuilder WithNone<T0, T1, T2, T3>() Returns Type Description EntityQueryBuilder Type Parameters Name Description T0 T1 T2 T3 WithNone(ComponentType, ComponentType, ComponentType, ComponentType) Declaration public EntityQueryBuilder WithNone(ComponentType type0, ComponentType type1, ComponentType type2, ComponentType type3) Parameters Type Name Description ComponentType type0 ComponentType type1 ComponentType type2 ComponentType type3 Returns Type Description EntityQueryBuilder WithNone<T0, T1, T2, T3, T4>() Declaration public EntityQueryBuilder WithNone<T0, T1, T2, T3, T4>() Returns Type Description EntityQueryBuilder Type Parameters Name Description T0 T1 T2 T3 T4 WithNone(ComponentType, ComponentType, ComponentType, ComponentType, ComponentType) Declaration public EntityQueryBuilder WithNone(ComponentType type0, ComponentType type1, ComponentType type2, ComponentType type3, ComponentType type4) Parameters Type Name Description ComponentType type0 ComponentType type1 ComponentType type2 ComponentType type3 ComponentType type4 Returns Type Description EntityQueryBuilder"
  },
  "api/Unity.Entities.EntityQueryDesc.All.html": {
    "href": "api/Unity.Entities.EntityQueryDesc.All.html",
    "title": "Field All | Entities | 0.17.0-preview.18",
    "keywords": "Field All Include archetypes that contain all of the component types in the All list. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public ComponentType[] All Returns Type Description ComponentType []"
  },
  "api/Unity.Entities.EntityQueryDesc.Any.html": {
    "href": "api/Unity.Entities.EntityQueryDesc.Any.html",
    "title": "Field Any | Entities | 0.17.0-preview.18",
    "keywords": "Field Any Include archetypes that contain at least one (but possibly more) of the component types in the Any list. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public ComponentType[] Any Returns Type Description ComponentType []"
  },
  "api/Unity.Entities.EntityQueryDesc.html": {
    "href": "api/Unity.Entities.EntityQueryDesc.html",
    "title": "Class EntityQueryDesc | Entities | 0.17.0-preview.18",
    "keywords": "Class EntityQueryDesc Describes a query to find archetypes in terms of required, optional, and excluded components. Inheritance Object EntityQueryDesc Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class EntityQueryDesc Remarks Define an EntityQueryDesc object to describe complex queries. Inside a system, pass an EntityQueryDesc object to GetEntityQuery(EntityQueryDesc[]) to create the EntityQuery . Outside a system, use CreateEntityQuery(EntityQueryDesc[]) . A query description combines the component types you specify in All , Any , and None sets according to the following rules: All - Includes archetypes that have every component in this set Any - Includes archetypes that have at least one component in this set None - Excludes archetypes that have any component in this set For example, given entities with the following components: Player has components: Position, Rotation, Player Enemy1 has components: Position, Rotation, Melee Enemy2 has components: Position, Rotation, Ranger The query description below matches all of the archetypes that: have any of [Melee or Ranger], AND have none of [Player], AND have all of [Position and Rotation] EntityQueryDesc description = new EntityQueryDesc { Any = new ComponentType[] { typeof(Melee), typeof(Ranger) }, None = new ComponentType[] { typeof(Player) }, All = new ComponentType[] { typeof(Position), typeof(Rotation) } }; In other words, the query created from this description selects the Enemy1 and Enemy2 entities, but not the Player entity. Fields Name Description All Include archetypes that contain all of the component types in the All list. Any Include archetypes that contain at least one (but possibly more) of the component types in the Any list. None Exclude archetypes that contain any of the component types in the None list. Options Specialized query options. Methods Name Description Validate()"
  },
  "api/Unity.Entities.EntityQueryDesc.None.html": {
    "href": "api/Unity.Entities.EntityQueryDesc.None.html",
    "title": "Field None | Entities | 0.17.0-preview.18",
    "keywords": "Field None Exclude archetypes that contain any of the component types in the None list. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public ComponentType[] None Returns Type Description ComponentType []"
  },
  "api/Unity.Entities.EntityQueryDesc.Options.html": {
    "href": "api/Unity.Entities.EntityQueryDesc.Options.html",
    "title": "Field Options | Entities | 0.17.0-preview.18",
    "keywords": "Field Options Specialized query options. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public EntityQueryOptions Options Returns Type Description EntityQueryOptions Remarks You should not need to set these options for most queries. Options is a bit mask; use the bitwise OR operator to combine multiple options."
  },
  "api/Unity.Entities.EntityQueryDesc.Validate.html": {
    "href": "api/Unity.Entities.EntityQueryDesc.Validate.html",
    "title": "Method Validate | Entities | 0.17.0-preview.18",
    "keywords": "Method Validate Validate() Declaration [Conditional(\"ENABLE_UNITY_COLLECTIONS_CHECKS\")] public void Validate()"
  },
  "api/Unity.Entities.EntityQueryDescValidationException.-ctor.html": {
    "href": "api/Unity.Entities.EntityQueryDescValidationException.-ctor.html",
    "title": "Constructor EntityQueryDescValidationException | Entities | 0.17.0-preview.18",
    "keywords": "Constructor EntityQueryDescValidationException EntityQueryDescValidationException(String) Declaration public EntityQueryDescValidationException(string message) Parameters Type Name Description String message"
  },
  "api/Unity.Entities.EntityQueryDescValidationException.html": {
    "href": "api/Unity.Entities.EntityQueryDescValidationException.html",
    "title": "Class EntityQueryDescValidationException | Entities | 0.17.0-preview.18",
    "keywords": "Class EntityQueryDescValidationException Inheritance Object Exception EntityQueryDescValidationException Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class EntityQueryDescValidationException : Exception, _Exception, ISerializable Constructors Name Description EntityQueryDescValidationException(String)"
  },
  "api/Unity.Entities.EntityQueryExtensionsForComponentArray.html": {
    "href": "api/Unity.Entities.EntityQueryExtensionsForComponentArray.html",
    "title": "Class EntityQueryExtensionsForComponentArray | Entities | 0.17.0-preview.18",
    "keywords": "Class EntityQueryExtensionsForComponentArray Inheritance Object EntityQueryExtensionsForComponentArray Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class EntityQueryExtensionsForComponentArray Methods Name Description ToComponentArray<T>(EntityQuery)"
  },
  "api/Unity.Entities.EntityQueryExtensionsForComponentArray.ToComponentArray.html": {
    "href": "api/Unity.Entities.EntityQueryExtensionsForComponentArray.ToComponentArray.html",
    "title": "Method ToComponentArray | Entities | 0.17.0-preview.18",
    "keywords": "Method ToComponentArray ToComponentArray<T>(EntityQuery) Declaration public static T[] ToComponentArray<T>(this EntityQuery group) where T : Component Parameters Type Name Description EntityQuery group Returns Type Description T[] Type Parameters Name Description T"
  },
  "api/Unity.Entities.EntityQueryExtensionsForTransformAccessArray.GetTransformAccessArray.html": {
    "href": "api/Unity.Entities.EntityQueryExtensionsForTransformAccessArray.GetTransformAccessArray.html",
    "title": "Method GetTransformAccessArray | Entities | 0.17.0-preview.18",
    "keywords": "Method GetTransformAccessArray GetTransformAccessArray(EntityQuery) Declaration public static TransformAccessArray GetTransformAccessArray(this EntityQuery group) Parameters Type Name Description EntityQuery group Returns Type Description TransformAccessArray"
  },
  "api/Unity.Entities.EntityQueryExtensionsForTransformAccessArray.html": {
    "href": "api/Unity.Entities.EntityQueryExtensionsForTransformAccessArray.html",
    "title": "Class EntityQueryExtensionsForTransformAccessArray | Entities | 0.17.0-preview.18",
    "keywords": "Class EntityQueryExtensionsForTransformAccessArray Inheritance Object EntityQueryExtensionsForTransformAccessArray Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class EntityQueryExtensionsForTransformAccessArray Methods Name Description GetTransformAccessArray(EntityQuery)"
  },
  "api/Unity.Entities.EntityQueryManagedComponentExtensions.GetSingleton.html": {
    "href": "api/Unity.Entities.EntityQueryManagedComponentExtensions.GetSingleton.html",
    "title": "Method GetSingleton | Entities | 0.17.0-preview.18",
    "keywords": "Method GetSingleton GetSingleton<T>(EntityQuery) Gets the value of a singleton component. Declaration public static T GetSingleton<T>(this EntityQuery query) where T : class, IComponentData Parameters Type Name Description EntityQuery query Returns Type Description T A copy of the singleton component. Type Parameters Name Description T The component type. Remarks A singleton component is a component of which only one instance exists that satisfies this query. Exceptions Type Condition InvalidOperationException See Also SetSingleton<T> ( EntityQuery , T) GetSingleton<T>(EntityQuery) GetSingleton<T> ()"
  },
  "api/Unity.Entities.EntityQueryManagedComponentExtensions.html": {
    "href": "api/Unity.Entities.EntityQueryManagedComponentExtensions.html",
    "title": "Class EntityQueryManagedComponentExtensions | Entities | 0.17.0-preview.18",
    "keywords": "Class EntityQueryManagedComponentExtensions Inheritance Object EntityQueryManagedComponentExtensions Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class EntityQueryManagedComponentExtensions Methods Name Description GetSingleton<T>(EntityQuery) Gets the value of a singleton component. SetSingleton<T>(EntityQuery, T) Sets the value of a singleton component."
  },
  "api/Unity.Entities.EntityQueryManagedComponentExtensions.SetSingleton.html": {
    "href": "api/Unity.Entities.EntityQueryManagedComponentExtensions.SetSingleton.html",
    "title": "Method SetSingleton | Entities | 0.17.0-preview.18",
    "keywords": "Method SetSingleton SetSingleton<T>(EntityQuery, T) Sets the value of a singleton component. Declaration public static void SetSingleton<T>(this EntityQuery query, T value) where T : class, IComponentData Parameters Type Name Description EntityQuery query T value An instance of type T containing the values to set. Type Parameters Name Description T The component type. Remarks For a component to be a singleton, there can be only one instance of that component that satisfies this query. Note: singletons are otherwise normal entities. The EntityQuery and ComponentSystemBase singleton functions add checks that you have not created two instances of a type that can be accessed by this singleton query, but other APIs do not prevent such accidental creation. To create a singleton, create an entity with the singleton component. For example, if you had a component defined as: public struct Singlet : IComponentData { public int Value; } You could create a singleton as follows: Entity singletonEntity = entityManager.CreateEntity(typeof(Singlet)); entityManager.SetComponentData(singletonEntity, new Singlet { Value = 1 }); To update the singleton component after creation, you can use an EntityQuery object that selects the singleton entity and call this SetSingleton() function: queryForSingleton.SetSingleton<Singlet>(new Singlet {Value = 1}); You can set and get the singleton value from a system: see SetSingleton<T>(T) and GetSingleton<T>() . Exceptions Type Condition InvalidOperationException Thrown if more than one instance of this component type exists in the world or the component type appears in more than one archetype. See Also GetSingleton<T> ( EntityQuery ) GetSingletonEntity()"
  },
  "api/Unity.Entities.EntityQueryMask.html": {
    "href": "api/Unity.Entities.EntityQueryMask.html",
    "title": "Struct EntityQueryMask | Entities | 0.17.0-preview.18",
    "keywords": "Struct EntityQueryMask Provides an efficient test of whether a specific entity would be selected by an EntityQuery. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct EntityQueryMask Remarks Use a mask to quickly identify whether an entity would be selected by an EntityQuery. var mask = EntityManager.GetEntityQueryMask(query); bool doesMatch = mask.Matches(entity); You can create up to 1024 unique EntityQueryMasks in an application. Note that EntityQueryMask only filters by Archetype, it doesn't support EntityQuery shared component or change filtering. Methods Name Description Matches(Entity) Reports whether an entity would be selected by the EntityQuery instance used to create this entity query mask. See Also GetEntityQueryMask(EntityQuery)"
  },
  "api/Unity.Entities.EntityQueryMask.Matches.html": {
    "href": "api/Unity.Entities.EntityQueryMask.Matches.html",
    "title": "Method Matches | Entities | 0.17.0-preview.18",
    "keywords": "Method Matches Matches(Entity) Reports whether an entity would be selected by the EntityQuery instance used to create this entity query mask. Declaration public bool Matches(Entity entity) Parameters Type Name Description Entity entity The entity to check. Returns Type Description Boolean True if the entity would be returned by the EntityQuery, false if it would not. Remarks The match does not consider any filter settings of the EntityQuery."
  },
  "api/Unity.Entities.EntityQueryOptions.html": {
    "href": "api/Unity.Entities.EntityQueryOptions.html",
    "title": "Enum EntityQueryOptions | Entities | 0.17.0-preview.18",
    "keywords": "Enum EntityQueryOptions The bit flags to use for the Options field. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Flags] public enum EntityQueryOptions Fields Name Description Value Default No options specified. 0 IncludePrefab The query does not exclude the special Prefab component. 1 IncludeDisabled The query does not exclude the special Disabled component. 2 FilterWriteGroup The query filters selected entities based on the WriteGroupAttribute settings of the components specified in the query description. 4 Extension Methods SourceGenHelpers.GetFlags()"
  },
  "api/Unity.Entities.EntityReferenceChange.Component.html": {
    "href": "api/Unity.Entities.EntityReferenceChange.Component.html",
    "title": "Field Component | Entities | 0.17.0-preview.18",
    "keywords": "Field Component The entity and component this patched is targeted at. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public PackedComponent Component Returns Type Description PackedComponent"
  },
  "api/Unity.Entities.EntityReferenceChange.html": {
    "href": "api/Unity.Entities.EntityReferenceChange.html",
    "title": "Struct EntityReferenceChange | Entities | 0.17.0-preview.18",
    "keywords": "Struct EntityReferenceChange Represents an entity reference that was changed within a EntityChangeSet This structure references the entity by it's unique EntityGuid . Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct EntityReferenceChange Remarks Multiple patches could exist for the same component with different offsets. Fields Name Description Component The entity and component this patched is targeted at. Offset The field offset for the Entity field. Value The entity that the field should reference. Identified by the unique EntityGuid ."
  },
  "api/Unity.Entities.EntityReferenceChange.Offset.html": {
    "href": "api/Unity.Entities.EntityReferenceChange.Offset.html",
    "title": "Field Offset | Entities | 0.17.0-preview.18",
    "keywords": "Field Offset The field offset for the Entity field. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public int Offset Returns Type Description Int32"
  },
  "api/Unity.Entities.EntityReferenceChange.Value.html": {
    "href": "api/Unity.Entities.EntityReferenceChange.Value.html",
    "title": "Field Value | Entities | 0.17.0-preview.18",
    "keywords": "Field Value The entity that the field should reference. Identified by the unique EntityGuid . Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public EntityGuid Value Returns Type Description EntityGuid"
  },
  "api/Unity.Entities.EntityRemapUtility.AddEntityRemapping.html": {
    "href": "api/Unity.Entities.EntityRemapUtility.AddEntityRemapping.html",
    "title": "Method AddEntityRemapping | Entities | 0.17.0-preview.18",
    "keywords": "Method AddEntityRemapping AddEntityRemapping(ref NativeArray<EntityRemapUtility.EntityRemapInfo>, Entity, Entity) Declaration public static void AddEntityRemapping(ref NativeArray<EntityRemapUtility.EntityRemapInfo> remapping, Entity source, Entity target) Parameters Type Name Description NativeArray < EntityRemapUtility.EntityRemapInfo > remapping Entity source Entity target"
  },
  "api/Unity.Entities.EntityRemapUtility.AppendBufferEntityPatches.html": {
    "href": "api/Unity.Entities.EntityRemapUtility.AppendBufferEntityPatches.html",
    "title": "Method AppendBufferEntityPatches | Entities | 0.17.0-preview.18",
    "keywords": "Method AppendBufferEntityPatches AppendBufferEntityPatches(EntityRemapUtility.BufferEntityPatchInfo*, TypeManager.EntityOffsetInfo*, Int32, Int32, Int32, Int32) Declaration public static EntityRemapUtility.BufferEntityPatchInfo*AppendBufferEntityPatches(EntityRemapUtility.BufferEntityPatchInfo*patches, TypeManager.EntityOffsetInfo*offsets, int offsetCount, int bufferBaseOffset, int bufferStride, int elementStride) Parameters Type Name Description EntityRemapUtility.BufferEntityPatchInfo * patches TypeManager.EntityOffsetInfo * offsets Int32 offsetCount Int32 bufferBaseOffset Int32 bufferStride Int32 elementStride Returns Type Description EntityRemapUtility.BufferEntityPatchInfo *"
  },
  "api/Unity.Entities.EntityRemapUtility.AppendEntityPatches.html": {
    "href": "api/Unity.Entities.EntityRemapUtility.AppendEntityPatches.html",
    "title": "Method AppendEntityPatches | Entities | 0.17.0-preview.18",
    "keywords": "Method AppendEntityPatches AppendEntityPatches(EntityRemapUtility.EntityPatchInfo*, TypeManager.EntityOffsetInfo*, Int32, Int32, Int32) Declaration public static EntityRemapUtility.EntityPatchInfo*AppendEntityPatches(EntityRemapUtility.EntityPatchInfo*patches, TypeManager.EntityOffsetInfo*offsets, int offsetCount, int baseOffset, int stride) Parameters Type Name Description EntityRemapUtility.EntityPatchInfo * patches TypeManager.EntityOffsetInfo * offsets Int32 offsetCount Int32 baseOffset Int32 stride Returns Type Description EntityRemapUtility.EntityPatchInfo *"
  },
  "api/Unity.Entities.EntityRemapUtility.BufferEntityPatchInfo.BufferOffset.html": {
    "href": "api/Unity.Entities.EntityRemapUtility.BufferEntityPatchInfo.BufferOffset.html",
    "title": "Field BufferOffset | Entities | 0.17.0-preview.18",
    "keywords": "Field BufferOffset Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public int BufferOffset Returns Type Description Int32"
  },
  "api/Unity.Entities.EntityRemapUtility.BufferEntityPatchInfo.BufferStride.html": {
    "href": "api/Unity.Entities.EntityRemapUtility.BufferEntityPatchInfo.BufferStride.html",
    "title": "Field BufferStride | Entities | 0.17.0-preview.18",
    "keywords": "Field BufferStride Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public int BufferStride Returns Type Description Int32"
  },
  "api/Unity.Entities.EntityRemapUtility.BufferEntityPatchInfo.ElementOffset.html": {
    "href": "api/Unity.Entities.EntityRemapUtility.BufferEntityPatchInfo.ElementOffset.html",
    "title": "Field ElementOffset | Entities | 0.17.0-preview.18",
    "keywords": "Field ElementOffset Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public int ElementOffset Returns Type Description Int32"
  },
  "api/Unity.Entities.EntityRemapUtility.BufferEntityPatchInfo.ElementStride.html": {
    "href": "api/Unity.Entities.EntityRemapUtility.BufferEntityPatchInfo.ElementStride.html",
    "title": "Field ElementStride | Entities | 0.17.0-preview.18",
    "keywords": "Field ElementStride Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public int ElementStride Returns Type Description Int32"
  },
  "api/Unity.Entities.EntityRemapUtility.BufferEntityPatchInfo.html": {
    "href": "api/Unity.Entities.EntityRemapUtility.BufferEntityPatchInfo.html",
    "title": "Struct EntityRemapUtility.BufferEntityPatchInfo | Entities | 0.17.0-preview.18",
    "keywords": "Struct EntityRemapUtility.BufferEntityPatchInfo Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct BufferEntityPatchInfo Fields Name Description BufferOffset BufferStride ElementOffset ElementStride"
  },
  "api/Unity.Entities.EntityRemapUtility.CalculateEntityAndBlobOffsetsUnmanaged.html": {
    "href": "api/Unity.Entities.EntityRemapUtility.CalculateEntityAndBlobOffsetsUnmanaged.html",
    "title": "Method CalculateEntityAndBlobOffsetsUnmanaged | Entities | 0.17.0-preview.18",
    "keywords": "Method CalculateEntityAndBlobOffsetsUnmanaged CalculateEntityAndBlobOffsetsUnmanaged(Type, out Boolean, out Boolean, ref NativeList<TypeManager.EntityOffsetInfo>, ref NativeList<TypeManager.EntityOffsetInfo>) Declaration public static void CalculateEntityAndBlobOffsetsUnmanaged(Type type, out bool hasEntityRefs, out bool hasBlobRefs, ref NativeList<TypeManager.EntityOffsetInfo> entityOffsets, ref NativeList<TypeManager.EntityOffsetInfo> blobOffsets) Parameters Type Name Description Type type Boolean hasEntityRefs Boolean hasBlobRefs Unity.Collections.NativeList < TypeManager.EntityOffsetInfo > entityOffsets Unity.Collections.NativeList < TypeManager.EntityOffsetInfo > blobOffsets"
  },
  "api/Unity.Entities.EntityRemapUtility.EntityPatchInfo.html": {
    "href": "api/Unity.Entities.EntityRemapUtility.EntityPatchInfo.html",
    "title": "Struct EntityRemapUtility.EntityPatchInfo | Entities | 0.17.0-preview.18",
    "keywords": "Struct EntityRemapUtility.EntityPatchInfo Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct EntityPatchInfo Fields Name Description Offset Stride"
  },
  "api/Unity.Entities.EntityRemapUtility.EntityPatchInfo.Offset.html": {
    "href": "api/Unity.Entities.EntityRemapUtility.EntityPatchInfo.Offset.html",
    "title": "Field Offset | Entities | 0.17.0-preview.18",
    "keywords": "Field Offset Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public int Offset Returns Type Description Int32"
  },
  "api/Unity.Entities.EntityRemapUtility.EntityPatchInfo.Stride.html": {
    "href": "api/Unity.Entities.EntityRemapUtility.EntityPatchInfo.Stride.html",
    "title": "Field Stride | Entities | 0.17.0-preview.18",
    "keywords": "Field Stride Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public int Stride Returns Type Description Int32"
  },
  "api/Unity.Entities.EntityRemapUtility.EntityRemapInfo.html": {
    "href": "api/Unity.Entities.EntityRemapUtility.EntityRemapInfo.html",
    "title": "Struct EntityRemapUtility.EntityRemapInfo | Entities | 0.17.0-preview.18",
    "keywords": "Struct EntityRemapUtility.EntityRemapInfo Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct EntityRemapInfo Fields Name Description SourceVersion Target"
  },
  "api/Unity.Entities.EntityRemapUtility.EntityRemapInfo.SourceVersion.html": {
    "href": "api/Unity.Entities.EntityRemapUtility.EntityRemapInfo.SourceVersion.html",
    "title": "Field SourceVersion | Entities | 0.17.0-preview.18",
    "keywords": "Field SourceVersion Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public int SourceVersion Returns Type Description Int32"
  },
  "api/Unity.Entities.EntityRemapUtility.EntityRemapInfo.Target.html": {
    "href": "api/Unity.Entities.EntityRemapUtility.EntityRemapInfo.Target.html",
    "title": "Field Target | Entities | 0.17.0-preview.18",
    "keywords": "Field Target Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public Entity Target Returns Type Description Entity"
  },
  "api/Unity.Entities.EntityRemapUtility.GetTargets.html": {
    "href": "api/Unity.Entities.EntityRemapUtility.GetTargets.html",
    "title": "Method GetTargets | Entities | 0.17.0-preview.18",
    "keywords": "Method GetTargets GetTargets(out NativeArray<Entity>, NativeArray<EntityRemapUtility.EntityRemapInfo>) Declaration public static void GetTargets(out NativeArray<Entity> output, NativeArray<EntityRemapUtility.EntityRemapInfo> remapping) Parameters Type Name Description NativeArray < Entity > output NativeArray < EntityRemapUtility.EntityRemapInfo > remapping"
  },
  "api/Unity.Entities.EntityRemapUtility.HasEntityReferencesManaged.html": {
    "href": "api/Unity.Entities.EntityRemapUtility.HasEntityReferencesManaged.html",
    "title": "Method HasEntityReferencesManaged | Entities | 0.17.0-preview.18",
    "keywords": "Method HasEntityReferencesManaged HasEntityReferencesManaged(Type, out Boolean, out Boolean) Declaration public static void HasEntityReferencesManaged(Type type, out bool hasEntityReferences, out bool hasBlobReferences) Parameters Type Name Description Type type Boolean hasEntityReferences Boolean hasBlobReferences"
  },
  "api/Unity.Entities.EntityRemapUtility.html": {
    "href": "api/Unity.Entities.EntityRemapUtility.html",
    "title": "Class EntityRemapUtility | Entities | 0.17.0-preview.18",
    "keywords": "Class EntityRemapUtility Inheritance Object EntityRemapUtility Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class EntityRemapUtility Methods Name Description AddEntityRemapping(ref NativeArray<EntityRemapUtility.EntityRemapInfo>, Entity, Entity) AppendBufferEntityPatches(EntityRemapUtility.BufferEntityPatchInfo*, TypeManager.EntityOffsetInfo*, Int32, Int32, Int32, Int32) AppendEntityPatches(EntityRemapUtility.EntityPatchInfo*, TypeManager.EntityOffsetInfo*, Int32, Int32, Int32) CalculateEntityAndBlobOffsetsUnmanaged(Type, out Boolean, out Boolean, ref NativeList<TypeManager.EntityOffsetInfo>, ref NativeList<TypeManager.EntityOffsetInfo>) GetTargets(out NativeArray<Entity>, NativeArray<EntityRemapUtility.EntityRemapInfo>) HasEntityReferencesManaged(Type, out Boolean, out Boolean) PatchEntities(EntityRemapUtility.EntityPatchInfo*, Int32, EntityRemapUtility.BufferEntityPatchInfo*, Int32, Byte*, Int32, ref NativeArray<EntityRemapUtility.EntityRemapInfo>) PatchEntitiesForPrefab(EntityRemapUtility.EntityPatchInfo*, Int32, EntityRemapUtility.BufferEntityPatchInfo*, Int32, Byte*, Int32, Int32, Entity*, Entity*, Int32) RemapEntity(ref NativeArray<EntityRemapUtility.EntityRemapInfo>, Entity) RemapEntity(EntityRemapUtility.EntityRemapInfo*, Entity) RemapEntityForPrefab(Entity*, Entity*, Int32, Entity)"
  },
  "api/Unity.Entities.EntityRemapUtility.PatchEntities.html": {
    "href": "api/Unity.Entities.EntityRemapUtility.PatchEntities.html",
    "title": "Method PatchEntities | Entities | 0.17.0-preview.18",
    "keywords": "Method PatchEntities PatchEntities(EntityRemapUtility.EntityPatchInfo*, Int32, EntityRemapUtility.BufferEntityPatchInfo*, Int32, Byte*, Int32, ref NativeArray<EntityRemapUtility.EntityRemapInfo>) Declaration public static void PatchEntities(EntityRemapUtility.EntityPatchInfo*scalarPatches, int scalarPatchCount, EntityRemapUtility.BufferEntityPatchInfo*bufferPatches, int bufferPatchCount, byte *chunkBuffer, int entityCount, ref NativeArray<EntityRemapUtility.EntityRemapInfo> remapping) Parameters Type Name Description EntityRemapUtility.EntityPatchInfo * scalarPatches Int32 scalarPatchCount EntityRemapUtility.BufferEntityPatchInfo * bufferPatches Int32 bufferPatchCount Byte * chunkBuffer Int32 entityCount NativeArray < EntityRemapUtility.EntityRemapInfo > remapping"
  },
  "api/Unity.Entities.EntityRemapUtility.PatchEntitiesForPrefab.html": {
    "href": "api/Unity.Entities.EntityRemapUtility.PatchEntitiesForPrefab.html",
    "title": "Method PatchEntitiesForPrefab | Entities | 0.17.0-preview.18",
    "keywords": "Method PatchEntitiesForPrefab PatchEntitiesForPrefab(EntityRemapUtility.EntityPatchInfo*, Int32, EntityRemapUtility.BufferEntityPatchInfo*, Int32, Byte*, Int32, Int32, Entity*, Entity*, Int32) Declaration public static void PatchEntitiesForPrefab(EntityRemapUtility.EntityPatchInfo*scalarPatches, int scalarPatchCount, EntityRemapUtility.BufferEntityPatchInfo*bufferPatches, int bufferPatchCount, byte *chunkBuffer, int indexInChunk, int entityCount, Entity*remapSrc, Entity*remapDst, int remappingCount) Parameters Type Name Description EntityRemapUtility.EntityPatchInfo * scalarPatches Int32 scalarPatchCount EntityRemapUtility.BufferEntityPatchInfo * bufferPatches Int32 bufferPatchCount Byte * chunkBuffer Int32 indexInChunk Int32 entityCount Entity * remapSrc Entity * remapDst Int32 remappingCount"
  },
  "api/Unity.Entities.EntityRemapUtility.RemapEntity.html": {
    "href": "api/Unity.Entities.EntityRemapUtility.RemapEntity.html",
    "title": "Method RemapEntity | Entities | 0.17.0-preview.18",
    "keywords": "Method RemapEntity RemapEntity(ref NativeArray<EntityRemapUtility.EntityRemapInfo>, Entity) Declaration public static Entity RemapEntity(ref NativeArray<EntityRemapUtility.EntityRemapInfo> remapping, Entity source) Parameters Type Name Description NativeArray < EntityRemapUtility.EntityRemapInfo > remapping Entity source Returns Type Description Entity RemapEntity(EntityRemapUtility.EntityRemapInfo*, Entity) Declaration public static Entity RemapEntity(EntityRemapUtility.EntityRemapInfo*remapping, Entity source) Parameters Type Name Description EntityRemapUtility.EntityRemapInfo * remapping Entity source Returns Type Description Entity"
  },
  "api/Unity.Entities.EntityRemapUtility.RemapEntityForPrefab.html": {
    "href": "api/Unity.Entities.EntityRemapUtility.RemapEntityForPrefab.html",
    "title": "Method RemapEntityForPrefab | Entities | 0.17.0-preview.18",
    "keywords": "Method RemapEntityForPrefab RemapEntityForPrefab(Entity*, Entity*, Int32, Entity) Declaration public static Entity RemapEntityForPrefab(Entity*remapSrc, Entity*remapDst, int remappingCount, Entity source) Parameters Type Name Description Entity * remapSrc Entity * remapDst Int32 remappingCount Entity source Returns Type Description Entity"
  },
  "api/Unity.Entities.EntityTypeHandle.html": {
    "href": "api/Unity.Entities.EntityTypeHandle.html",
    "title": "Struct EntityTypeHandle | Entities | 0.17.0-preview.18",
    "keywords": "Struct EntityTypeHandle Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [NativeContainer] [NativeContainerSupportsMinMaxWriteRestriction] public struct EntityTypeHandle"
  },
  "api/Unity.Entities.ExcludeComponent-1.html": {
    "href": "api/Unity.Entities.ExcludeComponent-1.html",
    "title": "Struct ExcludeComponent<T> | Entities | 0.17.0-preview.18",
    "keywords": "Struct ExcludeComponent<T> Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct ExcludeComponent<T> Type Parameters Name Description T"
  },
  "api/Unity.Entities.ExcludeComponentAttribute.-ctor.html": {
    "href": "api/Unity.Entities.ExcludeComponentAttribute.-ctor.html",
    "title": "Constructor ExcludeComponentAttribute | Entities | 0.17.0-preview.18",
    "keywords": "Constructor ExcludeComponentAttribute ExcludeComponentAttribute(Type[]) Declaration public ExcludeComponentAttribute(params Type[] excludeComponents) Parameters Type Name Description Type [] excludeComponents"
  },
  "api/Unity.Entities.ExcludeComponentAttribute.ExcludeComponents.html": {
    "href": "api/Unity.Entities.ExcludeComponentAttribute.ExcludeComponents.html",
    "title": "Field ExcludeComponents | Entities | 0.17.0-preview.18",
    "keywords": "Field ExcludeComponents Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public Type[] ExcludeComponents Returns Type Description Type []"
  },
  "api/Unity.Entities.ExcludeComponentAttribute.html": {
    "href": "api/Unity.Entities.ExcludeComponentAttribute.html",
    "title": "Class ExcludeComponentAttribute | Entities | 0.17.0-preview.18",
    "keywords": "Class ExcludeComponentAttribute Inheritance Object Attribute ExcludeComponentAttribute Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [AttributeUsage(AttributeTargets.Struct)] public class ExcludeComponentAttribute : Attribute, _Attribute Constructors Name Description ExcludeComponentAttribute(Type[]) Fields Name Description ExcludeComponents"
  },
  "api/Unity.Entities.ExclusiveEntityTransaction.AddBuffer.html": {
    "href": "api/Unity.Entities.ExclusiveEntityTransaction.AddBuffer.html",
    "title": "Method AddBuffer | Entities | 0.17.0-preview.18",
    "keywords": "Method AddBuffer AddBuffer<T>(Entity) Declaration public DynamicBuffer<T> AddBuffer<T>(Entity entity) where T : struct, IBufferElementData Parameters Type Name Description Entity entity Returns Type Description DynamicBuffer <T> Type Parameters Name Description T"
  },
  "api/Unity.Entities.ExclusiveEntityTransaction.AddComponent.html": {
    "href": "api/Unity.Entities.ExclusiveEntityTransaction.AddComponent.html",
    "title": "Method AddComponent | Entities | 0.17.0-preview.18",
    "keywords": "Method AddComponent AddComponent(Entity, ComponentType) Declaration public void AddComponent(Entity entity, ComponentType componentType) Parameters Type Name Description Entity entity ComponentType componentType"
  },
  "api/Unity.Entities.ExclusiveEntityTransaction.CreateArchetype.html": {
    "href": "api/Unity.Entities.ExclusiveEntityTransaction.CreateArchetype.html",
    "title": "Method CreateArchetype | Entities | 0.17.0-preview.18",
    "keywords": "Method CreateArchetype CreateArchetype(ComponentType[]) Declaration public EntityArchetype CreateArchetype(params ComponentType[] types) Parameters Type Name Description ComponentType [] types Returns Type Description EntityArchetype"
  },
  "api/Unity.Entities.ExclusiveEntityTransaction.CreateEntity.html": {
    "href": "api/Unity.Entities.ExclusiveEntityTransaction.CreateEntity.html",
    "title": "Method CreateEntity | Entities | 0.17.0-preview.18",
    "keywords": "Method CreateEntity CreateEntity(EntityArchetype) Declaration public Entity CreateEntity(EntityArchetype archetype) Parameters Type Name Description EntityArchetype archetype Returns Type Description Entity CreateEntity(EntityArchetype, NativeArray<Entity>) Declaration public void CreateEntity(EntityArchetype archetype, NativeArray<Entity> entities) Parameters Type Name Description EntityArchetype archetype NativeArray < Entity > entities CreateEntity(ComponentType[]) Declaration public Entity CreateEntity(params ComponentType[] types) Parameters Type Name Description ComponentType [] types Returns Type Description Entity"
  },
  "api/Unity.Entities.ExclusiveEntityTransaction.DestroyEntity.html": {
    "href": "api/Unity.Entities.ExclusiveEntityTransaction.DestroyEntity.html",
    "title": "Method DestroyEntity | Entities | 0.17.0-preview.18",
    "keywords": "Method DestroyEntity DestroyEntity(NativeArray<Entity>) Declaration public void DestroyEntity(NativeArray<Entity> entities) Parameters Type Name Description NativeArray < Entity > entities DestroyEntity(NativeSlice<Entity>) Declaration public void DestroyEntity(NativeSlice<Entity> entities) Parameters Type Name Description NativeSlice < Entity > entities DestroyEntity(Entity) Declaration public void DestroyEntity(Entity entity) Parameters Type Name Description Entity entity"
  },
  "api/Unity.Entities.ExclusiveEntityTransaction.EntityManager.html": {
    "href": "api/Unity.Entities.ExclusiveEntityTransaction.EntityManager.html",
    "title": "Property EntityManager | Entities | 0.17.0-preview.18",
    "keywords": "Property EntityManager EntityManager Return the entity manager this transaction operates upon Declaration public EntityManager EntityManager { get; } Property Value Type Description EntityManager"
  },
  "api/Unity.Entities.ExclusiveEntityTransaction.Exists.html": {
    "href": "api/Unity.Entities.ExclusiveEntityTransaction.Exists.html",
    "title": "Method Exists | Entities | 0.17.0-preview.18",
    "keywords": "Method Exists Exists(Entity) Declaration public bool Exists(Entity entity) Parameters Type Name Description Entity entity Returns Type Description Boolean"
  },
  "api/Unity.Entities.ExclusiveEntityTransaction.GetBuffer.html": {
    "href": "api/Unity.Entities.ExclusiveEntityTransaction.GetBuffer.html",
    "title": "Method GetBuffer | Entities | 0.17.0-preview.18",
    "keywords": "Method GetBuffer GetBuffer<T>(Entity) Declaration public DynamicBuffer<T> GetBuffer<T>(Entity entity) where T : struct, IBufferElementData Parameters Type Name Description Entity entity Returns Type Description DynamicBuffer <T> Type Parameters Name Description T"
  },
  "api/Unity.Entities.ExclusiveEntityTransaction.GetComponentData.html": {
    "href": "api/Unity.Entities.ExclusiveEntityTransaction.GetComponentData.html",
    "title": "Method GetComponentData | Entities | 0.17.0-preview.18",
    "keywords": "Method GetComponentData GetComponentData<T>(Entity) Declaration public T GetComponentData<T>(Entity entity) where T : struct, IComponentData Parameters Type Name Description Entity entity Returns Type Description T Type Parameters Name Description T"
  },
  "api/Unity.Entities.ExclusiveEntityTransaction.GetSharedComponentData.html": {
    "href": "api/Unity.Entities.ExclusiveEntityTransaction.GetSharedComponentData.html",
    "title": "Method GetSharedComponentData | Entities | 0.17.0-preview.18",
    "keywords": "Method GetSharedComponentData GetSharedComponentData<T>(Entity) Declaration public T GetSharedComponentData<T>(Entity entity) where T : struct, ISharedComponentData Parameters Type Name Description Entity entity Returns Type Description T Type Parameters Name Description T"
  },
  "api/Unity.Entities.ExclusiveEntityTransaction.HasComponent.html": {
    "href": "api/Unity.Entities.ExclusiveEntityTransaction.HasComponent.html",
    "title": "Method HasComponent | Entities | 0.17.0-preview.18",
    "keywords": "Method HasComponent HasComponent(Entity, ComponentType) Declaration public bool HasComponent(Entity entity, ComponentType type) Parameters Type Name Description Entity entity ComponentType type Returns Type Description Boolean"
  },
  "api/Unity.Entities.ExclusiveEntityTransaction.html": {
    "href": "api/Unity.Entities.ExclusiveEntityTransaction.html",
    "title": "Struct ExclusiveEntityTransaction | Entities | 0.17.0-preview.18",
    "keywords": "Struct ExclusiveEntityTransaction Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct ExclusiveEntityTransaction Properties Name Description EntityManager Return the entity manager this transaction operates upon Methods Name Description AddBuffer<T>(Entity) AddComponent(Entity, ComponentType) CreateArchetype(ComponentType[]) CreateEntity(ComponentType[]) CreateEntity(EntityArchetype) CreateEntity(EntityArchetype, NativeArray<Entity>) DestroyEntity(NativeArray<Entity>) DestroyEntity(NativeSlice<Entity>) DestroyEntity(Entity) Exists(Entity) GetBuffer<T>(Entity) GetComponentData<T>(Entity) GetSharedComponentData<T>(Entity) HasComponent(Entity, ComponentType) Instantiate(Entity) Instantiate(Entity, NativeArray<Entity>) RemoveComponent(Entity, ComponentType) SetComponentData<T>(Entity, T) SetSharedComponentData<T>(Entity, T) SwapComponents(ArchetypeChunk, Int32, ArchetypeChunk, Int32)"
  },
  "api/Unity.Entities.ExclusiveEntityTransaction.Instantiate.html": {
    "href": "api/Unity.Entities.ExclusiveEntityTransaction.Instantiate.html",
    "title": "Method Instantiate | Entities | 0.17.0-preview.18",
    "keywords": "Method Instantiate Instantiate(Entity) Declaration public Entity Instantiate(Entity srcEntity) Parameters Type Name Description Entity srcEntity Returns Type Description Entity Instantiate(Entity, NativeArray<Entity>) Declaration public void Instantiate(Entity srcEntity, NativeArray<Entity> outputEntities) Parameters Type Name Description Entity srcEntity NativeArray < Entity > outputEntities"
  },
  "api/Unity.Entities.ExclusiveEntityTransaction.RemoveComponent.html": {
    "href": "api/Unity.Entities.ExclusiveEntityTransaction.RemoveComponent.html",
    "title": "Method RemoveComponent | Entities | 0.17.0-preview.18",
    "keywords": "Method RemoveComponent RemoveComponent(Entity, ComponentType) Declaration public void RemoveComponent(Entity entity, ComponentType type) Parameters Type Name Description Entity entity ComponentType type"
  },
  "api/Unity.Entities.ExclusiveEntityTransaction.SetComponentData.html": {
    "href": "api/Unity.Entities.ExclusiveEntityTransaction.SetComponentData.html",
    "title": "Method SetComponentData | Entities | 0.17.0-preview.18",
    "keywords": "Method SetComponentData SetComponentData<T>(Entity, T) Declaration public void SetComponentData<T>(Entity entity, T componentData) where T : struct, IComponentData Parameters Type Name Description Entity entity T componentData Type Parameters Name Description T"
  },
  "api/Unity.Entities.ExclusiveEntityTransaction.SetSharedComponentData.html": {
    "href": "api/Unity.Entities.ExclusiveEntityTransaction.SetSharedComponentData.html",
    "title": "Method SetSharedComponentData | Entities | 0.17.0-preview.18",
    "keywords": "Method SetSharedComponentData SetSharedComponentData<T>(Entity, T) Declaration public void SetSharedComponentData<T>(Entity entity, T componentData) where T : struct, ISharedComponentData Parameters Type Name Description Entity entity T componentData Type Parameters Name Description T"
  },
  "api/Unity.Entities.ExclusiveEntityTransaction.SwapComponents.html": {
    "href": "api/Unity.Entities.ExclusiveEntityTransaction.SwapComponents.html",
    "title": "Method SwapComponents | Entities | 0.17.0-preview.18",
    "keywords": "Method SwapComponents SwapComponents(ArchetypeChunk, Int32, ArchetypeChunk, Int32) Declaration public void SwapComponents(ArchetypeChunk leftChunk, int leftIndex, ArchetypeChunk rightChunk, int rightIndex) Parameters Type Name Description ArchetypeChunk leftChunk Int32 leftIndex ArchetypeChunk rightChunk Int32 rightIndex"
  },
  "api/Unity.Entities.FastEquality.AddExtraAOTTypes.html": {
    "href": "api/Unity.Entities.FastEquality.AddExtraAOTTypes.html",
    "title": "Method AddExtraAOTTypes | Entities | 0.17.0-preview.18",
    "keywords": "Method AddExtraAOTTypes AddExtraAOTTypes(Type, HashSet<String>) Declaration public static void AddExtraAOTTypes(Type type, HashSet<string> output) Parameters Type Name Description Type type HashSet < String > output"
  },
  "api/Unity.Entities.FastEquality.Equals.html": {
    "href": "api/Unity.Entities.FastEquality.Equals.html",
    "title": "Method Equals | Entities | 0.17.0-preview.18",
    "keywords": "Method Equals Equals<T>(T, T, FastEquality.TypeInfo) Declaration public static bool Equals<T>(T lhs, T rhs, FastEquality.TypeInfo typeInfo) where T : struct Parameters Type Name Description T lhs T rhs FastEquality.TypeInfo typeInfo Returns Type Description Boolean Type Parameters Name Description T Equals<T>(ref T, ref T, FastEquality.TypeInfo) Declaration public static bool Equals<T>(ref T lhs, ref T rhs, FastEquality.TypeInfo typeInfo) where T : struct Parameters Type Name Description T lhs T rhs FastEquality.TypeInfo typeInfo Returns Type Description Boolean Type Parameters Name Description T Equals(Void*, Void*, FastEquality.TypeInfo) Declaration public static bool Equals(void *lhsPtr, void *rhsPtr, FastEquality.TypeInfo typeInfo) Parameters Type Name Description Void * lhsPtr Void * rhsPtr FastEquality.TypeInfo typeInfo Returns Type Description Boolean"
  },
  "api/Unity.Entities.FastEquality.GetHashCode.html": {
    "href": "api/Unity.Entities.FastEquality.GetHashCode.html",
    "title": "Method GetHashCode | Entities | 0.17.0-preview.18",
    "keywords": "Method GetHashCode GetHashCode<T>(T, FastEquality.TypeInfo) Declaration public static int GetHashCode<T>(T lhs, FastEquality.TypeInfo typeInfo) where T : struct Parameters Type Name Description T lhs FastEquality.TypeInfo typeInfo Returns Type Description Int32 Type Parameters Name Description T GetHashCode<T>(ref T, FastEquality.TypeInfo) Declaration public static int GetHashCode<T>(ref T lhs, FastEquality.TypeInfo typeInfo) where T : struct Parameters Type Name Description T lhs FastEquality.TypeInfo typeInfo Returns Type Description Int32 Type Parameters Name Description T GetHashCode(Void*, FastEquality.TypeInfo) Declaration public static int GetHashCode(void *dataPtr, FastEquality.TypeInfo typeInfo) Parameters Type Name Description Void * dataPtr FastEquality.TypeInfo typeInfo Returns Type Description Int32"
  },
  "api/Unity.Entities.FastEquality.html": {
    "href": "api/Unity.Entities.FastEquality.html",
    "title": "Struct FastEquality | Entities | 0.17.0-preview.18",
    "keywords": "Struct FastEquality Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [GenerateBurstMonoInterop(\"FastEquality\")] public struct FastEquality Methods Name Description AddExtraAOTTypes(Type, HashSet<String>) Equals(Void*, Void*, FastEquality.TypeInfo) Equals<T>(T, T, FastEquality.TypeInfo) Equals<T>(ref T, ref T, FastEquality.TypeInfo) GetHashCode(Void*, FastEquality.TypeInfo) GetHashCode<T>(T, FastEquality.TypeInfo) GetHashCode<T>(ref T, FastEquality.TypeInfo) ManagedEquals(Object, Object, FastEquality.TypeInfo) ManagedGetHashCode(Object, FastEquality.TypeInfo)"
  },
  "api/Unity.Entities.FastEquality.ManagedEquals.html": {
    "href": "api/Unity.Entities.FastEquality.ManagedEquals.html",
    "title": "Method ManagedEquals | Entities | 0.17.0-preview.18",
    "keywords": "Method ManagedEquals ManagedEquals(Object, Object, FastEquality.TypeInfo) Declaration public static bool ManagedEquals(object lhs, object rhs, FastEquality.TypeInfo typeInfo) Parameters Type Name Description Object lhs Object rhs FastEquality.TypeInfo typeInfo Returns Type Description Boolean"
  },
  "api/Unity.Entities.FastEquality.ManagedGetHashCode.html": {
    "href": "api/Unity.Entities.FastEquality.ManagedGetHashCode.html",
    "title": "Method ManagedGetHashCode | Entities | 0.17.0-preview.18",
    "keywords": "Method ManagedGetHashCode ManagedGetHashCode(Object, FastEquality.TypeInfo) Declaration public static int ManagedGetHashCode(object lhs, FastEquality.TypeInfo typeInfo) Parameters Type Name Description Object lhs FastEquality.TypeInfo typeInfo Returns Type Description Int32"
  },
  "api/Unity.Entities.FastEquality.TypeInfo.CompareEqualDelegate.html": {
    "href": "api/Unity.Entities.FastEquality.TypeInfo.CompareEqualDelegate.html",
    "title": "Delegate FastEquality.TypeInfo.CompareEqualDelegate | Entities | 0.17.0-preview.18",
    "keywords": "Delegate FastEquality.TypeInfo.CompareEqualDelegate Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate bool CompareEqualDelegate(void *lhs, void *rhs); Parameters Type Name Description Void * lhs Void * rhs Returns Type Description Boolean"
  },
  "api/Unity.Entities.FastEquality.TypeInfo.EqualFn.html": {
    "href": "api/Unity.Entities.FastEquality.TypeInfo.EqualFn.html",
    "title": "Field EqualFn | Entities | 0.17.0-preview.18",
    "keywords": "Field EqualFn Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public Delegate EqualFn Returns Type Description Delegate"
  },
  "api/Unity.Entities.FastEquality.TypeInfo.GetHashCodeDelegate.html": {
    "href": "api/Unity.Entities.FastEquality.TypeInfo.GetHashCodeDelegate.html",
    "title": "Delegate FastEquality.TypeInfo.GetHashCodeDelegate | Entities | 0.17.0-preview.18",
    "keywords": "Delegate FastEquality.TypeInfo.GetHashCodeDelegate Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate int GetHashCodeDelegate(void *obj); Parameters Type Name Description Void * obj Returns Type Description Int32"
  },
  "api/Unity.Entities.FastEquality.TypeInfo.GetHashFn.html": {
    "href": "api/Unity.Entities.FastEquality.TypeInfo.GetHashFn.html",
    "title": "Field GetHashFn | Entities | 0.17.0-preview.18",
    "keywords": "Field GetHashFn Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public Delegate GetHashFn Returns Type Description Delegate"
  },
  "api/Unity.Entities.FastEquality.TypeInfo.html": {
    "href": "api/Unity.Entities.FastEquality.TypeInfo.html",
    "title": "Struct FastEquality.TypeInfo | Entities | 0.17.0-preview.18",
    "keywords": "Struct FastEquality.TypeInfo Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct TypeInfo Fields Name Description EqualFn GetHashFn TypeSize Properties Name Description Null"
  },
  "api/Unity.Entities.FastEquality.TypeInfo.ManagedCompareEqualDelegate.html": {
    "href": "api/Unity.Entities.FastEquality.TypeInfo.ManagedCompareEqualDelegate.html",
    "title": "Delegate FastEquality.TypeInfo.ManagedCompareEqualDelegate | Entities | 0.17.0-preview.18",
    "keywords": "Delegate FastEquality.TypeInfo.ManagedCompareEqualDelegate Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate bool ManagedCompareEqualDelegate(object lhs, object rhs); Parameters Type Name Description Object lhs Object rhs Returns Type Description Boolean"
  },
  "api/Unity.Entities.FastEquality.TypeInfo.ManagedGetHashCodeDelegate.html": {
    "href": "api/Unity.Entities.FastEquality.TypeInfo.ManagedGetHashCodeDelegate.html",
    "title": "Delegate FastEquality.TypeInfo.ManagedGetHashCodeDelegate | Entities | 0.17.0-preview.18",
    "keywords": "Delegate FastEquality.TypeInfo.ManagedGetHashCodeDelegate Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate int ManagedGetHashCodeDelegate(object obj); Parameters Type Name Description Object obj Returns Type Description Int32"
  },
  "api/Unity.Entities.FastEquality.TypeInfo.Null.html": {
    "href": "api/Unity.Entities.FastEquality.TypeInfo.Null.html",
    "title": "Property Null | Entities | 0.17.0-preview.18",
    "keywords": "Property Null Null Declaration public static FastEquality.TypeInfo Null { get; } Property Value Type Description FastEquality.TypeInfo"
  },
  "api/Unity.Entities.FastEquality.TypeInfo.TypeSize.html": {
    "href": "api/Unity.Entities.FastEquality.TypeInfo.TypeSize.html",
    "title": "Field TypeSize | Entities | 0.17.0-preview.18",
    "keywords": "Field TypeSize Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public uint TypeSize Returns Type Description UInt32"
  },
  "api/Unity.Entities.FixedRateUtils.FixedRateCatchUpManager.-ctor.html": {
    "href": "api/Unity.Entities.FixedRateUtils.FixedRateCatchUpManager.-ctor.html",
    "title": "Constructor FixedRateCatchUpManager | Entities | 0.17.0-preview.18",
    "keywords": "Constructor FixedRateCatchUpManager FixedRateCatchUpManager(Single) Declaration public FixedRateCatchUpManager(float fixedDeltaTime) Parameters Type Name Description Single fixedDeltaTime"
  },
  "api/Unity.Entities.FixedRateUtils.FixedRateCatchUpManager.html": {
    "href": "api/Unity.Entities.FixedRateUtils.FixedRateCatchUpManager.html",
    "title": "Class FixedRateUtils.FixedRateCatchUpManager | Entities | 0.17.0-preview.18",
    "keywords": "Class FixedRateUtils.FixedRateCatchUpManager Inheritance Object FixedRateUtils.FixedRateCatchUpManager Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class FixedRateCatchUpManager : IFixedRateManager Constructors Name Description FixedRateCatchUpManager(Single) Properties Name Description MaximumDeltaTime Timestep Methods Name Description ShouldGroupUpdate(ComponentSystemGroup)"
  },
  "api/Unity.Entities.FixedRateUtils.FixedRateCatchUpManager.MaximumDeltaTime.html": {
    "href": "api/Unity.Entities.FixedRateUtils.FixedRateCatchUpManager.MaximumDeltaTime.html",
    "title": "Property MaximumDeltaTime | Entities | 0.17.0-preview.18",
    "keywords": "Property MaximumDeltaTime MaximumDeltaTime Declaration public float MaximumDeltaTime { get; set; } Property Value Type Description Single"
  },
  "api/Unity.Entities.FixedRateUtils.FixedRateCatchUpManager.ShouldGroupUpdate.html": {
    "href": "api/Unity.Entities.FixedRateUtils.FixedRateCatchUpManager.ShouldGroupUpdate.html",
    "title": "Method ShouldGroupUpdate | Entities | 0.17.0-preview.18",
    "keywords": "Method ShouldGroupUpdate ShouldGroupUpdate(ComponentSystemGroup) Declaration public bool ShouldGroupUpdate(ComponentSystemGroup group) Parameters Type Name Description ComponentSystemGroup group Returns Type Description Boolean Implements IFixedRateManager.ShouldGroupUpdate(ComponentSystemGroup)"
  },
  "api/Unity.Entities.FixedRateUtils.FixedRateCatchUpManager.Timestep.html": {
    "href": "api/Unity.Entities.FixedRateUtils.FixedRateCatchUpManager.Timestep.html",
    "title": "Property Timestep | Entities | 0.17.0-preview.18",
    "keywords": "Property Timestep Timestep Declaration public float Timestep { get; set; } Property Value Type Description Single Implements IFixedRateManager.Timestep"
  },
  "api/Unity.Entities.FixedRateUtils.FixedRateSimpleManager.-ctor.html": {
    "href": "api/Unity.Entities.FixedRateUtils.FixedRateSimpleManager.-ctor.html",
    "title": "Constructor FixedRateSimpleManager | Entities | 0.17.0-preview.18",
    "keywords": "Constructor FixedRateSimpleManager FixedRateSimpleManager(Single) Declaration public FixedRateSimpleManager(float fixedDeltaTime) Parameters Type Name Description Single fixedDeltaTime"
  },
  "api/Unity.Entities.FixedRateUtils.FixedRateSimpleManager.html": {
    "href": "api/Unity.Entities.FixedRateUtils.FixedRateSimpleManager.html",
    "title": "Class FixedRateUtils.FixedRateSimpleManager | Entities | 0.17.0-preview.18",
    "keywords": "Class FixedRateUtils.FixedRateSimpleManager Inheritance Object FixedRateUtils.FixedRateSimpleManager Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class FixedRateSimpleManager : IFixedRateManager Constructors Name Description FixedRateSimpleManager(Single) Properties Name Description Timestep Methods Name Description ShouldGroupUpdate(ComponentSystemGroup)"
  },
  "api/Unity.Entities.FixedRateUtils.FixedRateSimpleManager.ShouldGroupUpdate.html": {
    "href": "api/Unity.Entities.FixedRateUtils.FixedRateSimpleManager.ShouldGroupUpdate.html",
    "title": "Method ShouldGroupUpdate | Entities | 0.17.0-preview.18",
    "keywords": "Method ShouldGroupUpdate ShouldGroupUpdate(ComponentSystemGroup) Declaration public bool ShouldGroupUpdate(ComponentSystemGroup group) Parameters Type Name Description ComponentSystemGroup group Returns Type Description Boolean Implements IFixedRateManager.ShouldGroupUpdate(ComponentSystemGroup)"
  },
  "api/Unity.Entities.FixedRateUtils.FixedRateSimpleManager.Timestep.html": {
    "href": "api/Unity.Entities.FixedRateUtils.FixedRateSimpleManager.Timestep.html",
    "title": "Property Timestep | Entities | 0.17.0-preview.18",
    "keywords": "Property Timestep Timestep Declaration public float Timestep { get; set; } Property Value Type Description Single Implements IFixedRateManager.Timestep"
  },
  "api/Unity.Entities.FixedRateUtils.html": {
    "href": "api/Unity.Entities.FixedRateUtils.html",
    "title": "Class FixedRateUtils | Entities | 0.17.0-preview.18",
    "keywords": "Class FixedRateUtils Inheritance Object FixedRateUtils Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class FixedRateUtils"
  },
  "api/Unity.Entities.FixedStepSimulationSystemGroup.-ctor.html": {
    "href": "api/Unity.Entities.FixedStepSimulationSystemGroup.-ctor.html",
    "title": "Constructor FixedStepSimulationSystemGroup | Entities | 0.17.0-preview.18",
    "keywords": "Constructor FixedStepSimulationSystemGroup FixedStepSimulationSystemGroup() Declaration [Preserve] public FixedStepSimulationSystemGroup()"
  },
  "api/Unity.Entities.FixedStepSimulationSystemGroup.html": {
    "href": "api/Unity.Entities.FixedStepSimulationSystemGroup.html",
    "title": "Class FixedStepSimulationSystemGroup | Entities | 0.17.0-preview.18",
    "keywords": "Class FixedStepSimulationSystemGroup This system group is configured by default to use a fixed timestep for the duration of its updates. Inheritance Object ComponentSystemBase ComponentSystem ComponentSystemGroup FixedStepSimulationSystemGroup Inherited Members ComponentSystemGroup.Systems ComponentSystemGroup.OnCreate() ComponentSystemGroup.OnDestroy() ComponentSystemGroup.AddSystemToUpdateList(ComponentSystemBase) ComponentSystemGroup.RemoveSystemFromUpdateList(ComponentSystemBase) ComponentSystemGroup.SortSystems() ComponentSystemGroup.OnStopRunning() ComponentSystemGroup.FixedRateManager ComponentSystemGroup.OnUpdate() ComponentSystem.PostUpdateCommands ComponentSystem.InitEntityQueryCache(Int32) ComponentSystem.Entities ComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnStartRunning() ComponentSystemBase.ExecutingSystemType ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetComponentTypeHandle<T>(Boolean) ComponentSystemBase.GetDynamicComponentTypeHandle(ComponentType) ComponentSystemBase.GetBufferTypeHandle<T>(Boolean) ComponentSystemBase.GetSharedComponentTypeHandle<T>() ComponentSystemBase.GetEntityTypeHandle() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.TryGetSingleton<T>(T) ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.TryGetSingletonEntity<T>(Entity) ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [ExecuteAlways] [UpdateInGroup(typeof(SimulationSystemGroup), OrderFirst = true)] [UpdateAfter(typeof(BeginSimulationEntityCommandBufferSystem))] public class FixedStepSimulationSystemGroup : ComponentSystemGroup Remarks The value of Time.ElapsedTime and Time.DeltaTime will be temporarily overriden while this group is updating. The systems in this group will update as many times as necessary at the fixed timestep in order to \"catch up\" to the actual elapsed time since the previous frame. The default fixed timestep is 1/60 seconds. This value can be overriden at runtime by modifying the system group's Timestep property. Constructors Name Description FixedStepSimulationSystemGroup() Properties Name Description Timestep Set the timestep use by this group, in seconds. The default value is 1/60 seconds. This value will be clamped to the range [0.0001f ... 10.0f]. Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Entities.FixedStepSimulationSystemGroup.Timestep.html": {
    "href": "api/Unity.Entities.FixedStepSimulationSystemGroup.Timestep.html",
    "title": "Property Timestep | Entities | 0.17.0-preview.18",
    "keywords": "Property Timestep Timestep Set the timestep use by this group, in seconds. The default value is 1/60 seconds. This value will be clamped to the range [0.0001f ... 10.0f]. Declaration public float Timestep { get; set; } Property Value Type Description Single"
  },
  "api/Unity.Entities.ForEachLambdaJobDescription_SetSharedComponent.html": {
    "href": "api/Unity.Entities.ForEachLambdaJobDescription_SetSharedComponent.html",
    "title": "Class ForEachLambdaJobDescription_SetSharedComponent | Entities | 0.17.0-preview.18",
    "keywords": "Class ForEachLambdaJobDescription_SetSharedComponent Inheritance Object ForEachLambdaJobDescription_SetSharedComponent Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class ForEachLambdaJobDescription_SetSharedComponent Methods Name Description SetSharedComponentFilterOnQuery<TDescription, T>(TDescription, T, EntityQuery)"
  },
  "api/Unity.Entities.ForEachLambdaJobDescription_SetSharedComponent.SetSharedComponentFilterOnQuery.html": {
    "href": "api/Unity.Entities.ForEachLambdaJobDescription_SetSharedComponent.SetSharedComponentFilterOnQuery.html",
    "title": "Method SetSharedComponentFilterOnQuery | Entities | 0.17.0-preview.18",
    "keywords": "Method SetSharedComponentFilterOnQuery SetSharedComponentFilterOnQuery<TDescription, T>(TDescription, T, EntityQuery) Declaration public static TDescription SetSharedComponentFilterOnQuery<TDescription, T>(this TDescription description, T sharedComponent, EntityQuery query) where TDescription : struct, ISupportForEachWithUniversalDelegate where T : struct, ISharedComponentData Parameters Type Name Description TDescription description T sharedComponent EntityQuery query Returns Type Description TDescription Type Parameters Name Description TDescription T"
  },
  "api/Unity.Entities.GameObjectConversionSettings.BlobAssetStore.html": {
    "href": "api/Unity.Entities.GameObjectConversionSettings.BlobAssetStore.html",
    "title": "Property BlobAssetStore | Entities | 0.17.0-preview.18",
    "keywords": "Property BlobAssetStore BlobAssetStore Declaration public BlobAssetStore BlobAssetStore { get; protected set; } Property Value Type Description BlobAssetStore"
  },
  "api/Unity.Entities.GameObjectConversionSettings.ConversionFlags.html": {
    "href": "api/Unity.Entities.GameObjectConversionSettings.ConversionFlags.html",
    "title": "Field ConversionFlags | Entities | 0.17.0-preview.18",
    "keywords": "Field ConversionFlags Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public GameObjectConversionUtility.ConversionFlags ConversionFlags Returns Type Description GameObjectConversionUtility.ConversionFlags"
  },
  "api/Unity.Entities.GameObjectConversionSettings.ConversionWorldCreated.html": {
    "href": "api/Unity.Entities.GameObjectConversionSettings.ConversionWorldCreated.html",
    "title": "Field ConversionWorldCreated | Entities | 0.17.0-preview.18",
    "keywords": "Field ConversionWorldCreated Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public Action<World> ConversionWorldCreated Returns Type Description Action < World >"
  },
  "api/Unity.Entities.GameObjectConversionSettings.ConversionWorldPreDispose.html": {
    "href": "api/Unity.Entities.GameObjectConversionSettings.ConversionWorldPreDispose.html",
    "title": "Field ConversionWorldPreDispose | Entities | 0.17.0-preview.18",
    "keywords": "Field ConversionWorldPreDispose Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public Action<World> ConversionWorldPreDispose Returns Type Description Action < World >"
  },
  "api/Unity.Entities.GameObjectConversionSettings.CreateConversionWorld.html": {
    "href": "api/Unity.Entities.GameObjectConversionSettings.CreateConversionWorld.html",
    "title": "Method CreateConversionWorld | Entities | 0.17.0-preview.18",
    "keywords": "Method CreateConversionWorld CreateConversionWorld() Declaration public World CreateConversionWorld() Returns Type Description World"
  },
  "api/Unity.Entities.GameObjectConversionSettings.-ctor.html": {
    "href": "api/Unity.Entities.GameObjectConversionSettings.-ctor.html",
    "title": "Constructor GameObjectConversionSettings | Entities | 0.17.0-preview.18",
    "keywords": "Constructor GameObjectConversionSettings GameObjectConversionSettings() Declaration public GameObjectConversionSettings() GameObjectConversionSettings(World, GameObjectConversionUtility.ConversionFlags, BlobAssetStore) Declaration public GameObjectConversionSettings(World destinationWorld, GameObjectConversionUtility.ConversionFlags conversionFlags, BlobAssetStore blobAssetStore = null) Parameters Type Name Description World destinationWorld GameObjectConversionUtility.ConversionFlags conversionFlags BlobAssetStore blobAssetStore"
  },
  "api/Unity.Entities.GameObjectConversionSettings.DebugConversionName.html": {
    "href": "api/Unity.Entities.GameObjectConversionSettings.DebugConversionName.html",
    "title": "Field DebugConversionName | Entities | 0.17.0-preview.18",
    "keywords": "Field DebugConversionName Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public string DebugConversionName Returns Type Description String"
  },
  "api/Unity.Entities.GameObjectConversionSettings.DestinationWorld.html": {
    "href": "api/Unity.Entities.GameObjectConversionSettings.DestinationWorld.html",
    "title": "Field DestinationWorld | Entities | 0.17.0-preview.18",
    "keywords": "Field DestinationWorld Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public World DestinationWorld Returns Type Description World"
  },
  "api/Unity.Entities.GameObjectConversionSettings.ExtraSystems.html": {
    "href": "api/Unity.Entities.GameObjectConversionSettings.ExtraSystems.html",
    "title": "Field ExtraSystems | Entities | 0.17.0-preview.18",
    "keywords": "Field ExtraSystems Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public Type[] ExtraSystems Returns Type Description Type []"
  },
  "api/Unity.Entities.GameObjectConversionSettings.FilterFlags.html": {
    "href": "api/Unity.Entities.GameObjectConversionSettings.FilterFlags.html",
    "title": "Field FilterFlags | Entities | 0.17.0-preview.18",
    "keywords": "Field FilterFlags Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public WorldSystemFilterFlags FilterFlags Returns Type Description WorldSystemFilterFlags"
  },
  "api/Unity.Entities.GameObjectConversionSettings.FromHash.html": {
    "href": "api/Unity.Entities.GameObjectConversionSettings.FromHash.html",
    "title": "Method FromHash | Entities | 0.17.0-preview.18",
    "keywords": "Method FromHash FromHash(Hash128, BlobAssetStore) Declaration public static GameObjectConversionSettings FromHash(Hash128 hash, BlobAssetStore blobAssetStore) Parameters Type Name Description Hash128 hash BlobAssetStore blobAssetStore Returns Type Description GameObjectConversionSettings"
  },
  "api/Unity.Entities.GameObjectConversionSettings.FromWorld.html": {
    "href": "api/Unity.Entities.GameObjectConversionSettings.FromWorld.html",
    "title": "Method FromWorld | Entities | 0.17.0-preview.18",
    "keywords": "Method FromWorld FromWorld(World, BlobAssetStore) Declaration public static GameObjectConversionSettings FromWorld(World destinationWorld, BlobAssetStore blobAssetStore) Parameters Type Name Description World destinationWorld BlobAssetStore blobAssetStore Returns Type Description GameObjectConversionSettings"
  },
  "api/Unity.Entities.GameObjectConversionSettings.GetGuidForAssetExport.html": {
    "href": "api/Unity.Entities.GameObjectConversionSettings.GetGuidForAssetExport.html",
    "title": "Method GetGuidForAssetExport | Entities | 0.17.0-preview.18",
    "keywords": "Method GetGuidForAssetExport GetGuidForAssetExport(Object) Declaration public virtual Hash128 GetGuidForAssetExport(Object uobject) Parameters Type Name Description Object uobject Returns Type Description Hash128"
  },
  "api/Unity.Entities.GameObjectConversionSettings.html": {
    "href": "api/Unity.Entities.GameObjectConversionSettings.html",
    "title": "Class GameObjectConversionSettings | Entities | 0.17.0-preview.18",
    "keywords": "Class GameObjectConversionSettings Inheritance Object GameObjectConversionSettings Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class GameObjectConversionSettings Constructors Name Description GameObjectConversionSettings() GameObjectConversionSettings(World, GameObjectConversionUtility.ConversionFlags, BlobAssetStore) Fields Name Description ConversionFlags ConversionWorldCreated ConversionWorldPreDispose DebugConversionName DestinationWorld ExtraSystems FilterFlags SceneGUID Systems Properties Name Description BlobAssetStore SupportsExporting Methods Name Description CreateConversionWorld() FromHash(Hash128, BlobAssetStore) FromWorld(World, BlobAssetStore) GetGuidForAssetExport(Object) TryCreateAssetExportWriter(Object) WithExtraSystem<T>() WithExtraSystems(Type[]) WithExtraSystems<T1, T2>() WithExtraSystems<T1, T2, T3>()"
  },
  "api/Unity.Entities.GameObjectConversionSettings.SceneGUID.html": {
    "href": "api/Unity.Entities.GameObjectConversionSettings.SceneGUID.html",
    "title": "Field SceneGUID | Entities | 0.17.0-preview.18",
    "keywords": "Field SceneGUID Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public Hash128 SceneGUID Returns Type Description Hash128"
  },
  "api/Unity.Entities.GameObjectConversionSettings.SupportsExporting.html": {
    "href": "api/Unity.Entities.GameObjectConversionSettings.SupportsExporting.html",
    "title": "Property SupportsExporting | Entities | 0.17.0-preview.18",
    "keywords": "Property SupportsExporting SupportsExporting Declaration public bool SupportsExporting { get; } Property Value Type Description Boolean"
  },
  "api/Unity.Entities.GameObjectConversionSettings.Systems.html": {
    "href": "api/Unity.Entities.GameObjectConversionSettings.Systems.html",
    "title": "Field Systems | Entities | 0.17.0-preview.18",
    "keywords": "Field Systems Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public List<Type> Systems Returns Type Description List < Type >"
  },
  "api/Unity.Entities.GameObjectConversionSettings.TryCreateAssetExportWriter.html": {
    "href": "api/Unity.Entities.GameObjectConversionSettings.TryCreateAssetExportWriter.html",
    "title": "Method TryCreateAssetExportWriter | Entities | 0.17.0-preview.18",
    "keywords": "Method TryCreateAssetExportWriter TryCreateAssetExportWriter(Object) Declaration public virtual Stream TryCreateAssetExportWriter(Object uobject) Parameters Type Name Description Object uobject Returns Type Description Stream"
  },
  "api/Unity.Entities.GameObjectConversionSettings.WithExtraSystem.html": {
    "href": "api/Unity.Entities.GameObjectConversionSettings.WithExtraSystem.html",
    "title": "Method WithExtraSystem | Entities | 0.17.0-preview.18",
    "keywords": "Method WithExtraSystem WithExtraSystem<T>() Declaration public GameObjectConversionSettings WithExtraSystem<T>() Returns Type Description GameObjectConversionSettings Type Parameters Name Description T"
  },
  "api/Unity.Entities.GameObjectConversionSettings.WithExtraSystems.html": {
    "href": "api/Unity.Entities.GameObjectConversionSettings.WithExtraSystems.html",
    "title": "Method WithExtraSystems | Entities | 0.17.0-preview.18",
    "keywords": "Method WithExtraSystems WithExtraSystems(Type[]) Declaration public GameObjectConversionSettings WithExtraSystems(params Type[] extraSystems) Parameters Type Name Description Type [] extraSystems Returns Type Description GameObjectConversionSettings WithExtraSystems<T1, T2>() Declaration public GameObjectConversionSettings WithExtraSystems<T1, T2>() Returns Type Description GameObjectConversionSettings Type Parameters Name Description T1 T2 WithExtraSystems<T1, T2, T3>() Declaration public GameObjectConversionSettings WithExtraSystems<T1, T2, T3>() Returns Type Description GameObjectConversionSettings Type Parameters Name Description T1 T2 T3"
  },
  "api/Unity.Entities.GameObjectConversionUtility.ConversionFlags.html": {
    "href": "api/Unity.Entities.GameObjectConversionUtility.ConversionFlags.html",
    "title": "Enum GameObjectConversionUtility.ConversionFlags | Entities | 0.17.0-preview.18",
    "keywords": "Enum GameObjectConversionUtility.ConversionFlags Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Flags] public enum ConversionFlags : uint Fields Name Description Value AddEntityGUID 1 ForceStaticOptimization 2 AssignName 4 SceneViewLiveLink 8 GameViewLiveLink 16 IsBuildingForPlayer 32 Extension Methods SourceGenHelpers.GetFlags()"
  },
  "api/Unity.Entities.GameObjectConversionUtility.ConvertGameObjectHierarchy.html": {
    "href": "api/Unity.Entities.GameObjectConversionUtility.ConvertGameObjectHierarchy.html",
    "title": "Method ConvertGameObjectHierarchy | Entities | 0.17.0-preview.18",
    "keywords": "Method ConvertGameObjectHierarchy ConvertGameObjectHierarchy(GameObject, GameObjectConversionSettings) Declaration public static Entity ConvertGameObjectHierarchy(GameObject root, GameObjectConversionSettings settings) Parameters Type Name Description GameObject root GameObjectConversionSettings settings Returns Type Description Entity"
  },
  "api/Unity.Entities.GameObjectConversionUtility.ConvertGameObjectsToEntitiesField.html": {
    "href": "api/Unity.Entities.GameObjectConversionUtility.ConvertGameObjectsToEntitiesField.html",
    "title": "Method ConvertGameObjectsToEntitiesField | Entities | 0.17.0-preview.18",
    "keywords": "Method ConvertGameObjectsToEntitiesField ConvertGameObjectsToEntitiesField(GameObjectConversionSystem, GameObject[], out Entity[]) Declaration public static void ConvertGameObjectsToEntitiesField(GameObjectConversionSystem conversionSystem, GameObject[] gameObjects, out Entity[] entities) Parameters Type Name Description GameObjectConversionSystem conversionSystem GameObject [] gameObjects Entity [] entities"
  },
  "api/Unity.Entities.GameObjectConversionUtility.ConvertScene.html": {
    "href": "api/Unity.Entities.GameObjectConversionUtility.ConvertScene.html",
    "title": "Method ConvertScene | Entities | 0.17.0-preview.18",
    "keywords": "Method ConvertScene ConvertScene(Scene, GameObjectConversionSettings) Declaration public static void ConvertScene(Scene scene, GameObjectConversionSettings settings) Parameters Type Name Description Scene scene GameObjectConversionSettings settings"
  },
  "api/Unity.Entities.GameObjectConversionUtility.html": {
    "href": "api/Unity.Entities.GameObjectConversionUtility.html",
    "title": "Class GameObjectConversionUtility | Entities | 0.17.0-preview.18",
    "keywords": "Class GameObjectConversionUtility Inheritance Object GameObjectConversionUtility Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class GameObjectConversionUtility Methods Name Description ConvertGameObjectHierarchy(GameObject, GameObjectConversionSettings) ConvertGameObjectsToEntitiesField(GameObjectConversionSystem, GameObject[], out Entity[]) ConvertScene(Scene, GameObjectConversionSettings)"
  },
  "api/Unity.Entities.GameObjectEntity.AddToEntity.html": {
    "href": "api/Unity.Entities.GameObjectEntity.AddToEntity.html",
    "title": "Method AddToEntity | Entities | 0.17.0-preview.18",
    "keywords": "Method AddToEntity AddToEntity(EntityManager, GameObject, Entity) Declaration public static void AddToEntity(EntityManager entityManager, GameObject gameObject, Entity entity) Parameters Type Name Description EntityManager entityManager GameObject gameObject Entity entity"
  },
  "api/Unity.Entities.GameObjectEntity.AddToEntityManager.html": {
    "href": "api/Unity.Entities.GameObjectEntity.AddToEntityManager.html",
    "title": "Method AddToEntityManager | Entities | 0.17.0-preview.18",
    "keywords": "Method AddToEntityManager AddToEntityManager(EntityManager, GameObject) Declaration public static Entity AddToEntityManager(EntityManager entityManager, GameObject gameObject) Parameters Type Name Description EntityManager entityManager GameObject gameObject Returns Type Description Entity"
  },
  "api/Unity.Entities.GameObjectEntity.Entity.html": {
    "href": "api/Unity.Entities.GameObjectEntity.Entity.html",
    "title": "Property Entity | Entities | 0.17.0-preview.18",
    "keywords": "Property Entity Entity Declaration public Entity Entity { get; } Property Value Type Description Entity"
  },
  "api/Unity.Entities.GameObjectEntity.EntityManager.html": {
    "href": "api/Unity.Entities.GameObjectEntity.EntityManager.html",
    "title": "Property EntityManager | Entities | 0.17.0-preview.18",
    "keywords": "Property EntityManager EntityManager Declaration public EntityManager EntityManager { get; } Property Value Type Description EntityManager"
  },
  "api/Unity.Entities.GameObjectEntity.html": {
    "href": "api/Unity.Entities.GameObjectEntity.html",
    "title": "Class GameObjectEntity | Entities | 0.17.0-preview.18",
    "keywords": "Class GameObjectEntity Inheritance Object Object Component Behaviour MonoBehaviour GameObjectEntity Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(String, Single) MonoBehaviour.InvokeRepeating(String, Single, Single) MonoBehaviour.CancelInvoke(String) MonoBehaviour.IsInvoking(String) MonoBehaviour.StartCoroutine(String) MonoBehaviour.StartCoroutine(String, Object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(String) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(Object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, Component) Component.TryGetComponent<T>(T) Component.GetComponent(String) Component.GetComponentInChildren(Type, Boolean) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(Boolean) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, Boolean) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(Boolean) Component.GetComponentsInChildren<T>(Boolean, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, Boolean) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(Boolean) Component.GetComponentsInParent<T>(Boolean, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(String) Component.SendMessageUpwards(String, Object, SendMessageOptions) Component.SendMessageUpwards(String, Object) Component.SendMessageUpwards(String) Component.SendMessageUpwards(String, SendMessageOptions) Component.SendMessage(String, Object) Component.SendMessage(String) Component.SendMessage(String, Object, SendMessageOptions) Component.SendMessage(String, SendMessageOptions) Component.BroadcastMessage(String, Object, SendMessageOptions) Component.BroadcastMessage(String, Object) Component.BroadcastMessage(String) Component.BroadcastMessage(String, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) Object.Destroy(Object) Object.DestroyImmediate(Object, Boolean) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, Boolean) Object.DontDestroyOnLoad(Object) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectOfType(Type) Object.FindObjectOfType(Type, Boolean) Object.ToString() Object.name Object.hideFlags Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [DisallowMultipleComponent] [ExecuteAlways] [AddComponentMenu(\"\")] public class GameObjectEntity : MonoBehaviour Properties Name Description Entity EntityManager World Methods Name Description AddToEntity(EntityManager, GameObject, Entity) AddToEntityManager(EntityManager, GameObject) OnDisable() OnEnable()"
  },
  "api/Unity.Entities.GameObjectEntity.OnDisable.html": {
    "href": "api/Unity.Entities.GameObjectEntity.OnDisable.html",
    "title": "Method OnDisable | Entities | 0.17.0-preview.18",
    "keywords": "Method OnDisable OnDisable() Declaration protected virtual void OnDisable()"
  },
  "api/Unity.Entities.GameObjectEntity.OnEnable.html": {
    "href": "api/Unity.Entities.GameObjectEntity.OnEnable.html",
    "title": "Method OnEnable | Entities | 0.17.0-preview.18",
    "keywords": "Method OnEnable OnEnable() Declaration protected virtual void OnEnable()"
  },
  "api/Unity.Entities.GameObjectEntity.World.html": {
    "href": "api/Unity.Entities.GameObjectEntity.World.html",
    "title": "Property World | Entities | 0.17.0-preview.18",
    "keywords": "Property World World Declaration public World World { get; } Property Value Type Description World"
  },
  "api/Unity.Entities.GenerateAuthoringComponentAttribute.html": {
    "href": "api/Unity.Entities.GenerateAuthoringComponentAttribute.html",
    "title": "Class GenerateAuthoringComponentAttribute | Entities | 0.17.0-preview.18",
    "keywords": "Class GenerateAuthoringComponentAttribute Inheritance Object Attribute GenerateAuthoringComponentAttribute Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct)] public class GenerateAuthoringComponentAttribute : Attribute, _Attribute"
  },
  "api/Unity.Entities.GenerateBurstMonoInteropAttribute.AssetName.html": {
    "href": "api/Unity.Entities.GenerateBurstMonoInteropAttribute.AssetName.html",
    "title": "Property AssetName | Entities | 0.17.0-preview.18",
    "keywords": "Property AssetName AssetName Declaration public string AssetName { get; } Property Value Type Description String"
  },
  "api/Unity.Entities.GenerateBurstMonoInteropAttribute.-ctor.html": {
    "href": "api/Unity.Entities.GenerateBurstMonoInteropAttribute.-ctor.html",
    "title": "Constructor GenerateBurstMonoInteropAttribute | Entities | 0.17.0-preview.18",
    "keywords": "Constructor GenerateBurstMonoInteropAttribute GenerateBurstMonoInteropAttribute(String) Declaration public GenerateBurstMonoInteropAttribute(string assetName) Parameters Type Name Description String assetName"
  },
  "api/Unity.Entities.GenerateBurstMonoInteropAttribute.html": {
    "href": "api/Unity.Entities.GenerateBurstMonoInteropAttribute.html",
    "title": "Class GenerateBurstMonoInteropAttribute | Entities | 0.17.0-preview.18",
    "keywords": "Class GenerateBurstMonoInteropAttribute Inheritance Object Attribute GenerateBurstMonoInteropAttribute Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct, Inherited = false, AllowMultiple = false)] public sealed class GenerateBurstMonoInteropAttribute : Attribute, _Attribute Constructors Name Description GenerateBurstMonoInteropAttribute(String) Properties Name Description AssetName"
  },
  "api/Unity.Entities.Hash128.CompareTo.html": {
    "href": "api/Unity.Entities.Hash128.CompareTo.html",
    "title": "Method CompareTo | Entities | 0.17.0-preview.18",
    "keywords": "Method CompareTo CompareTo(Hash128) Declaration public int CompareTo(Hash128 other) Parameters Type Name Description Hash128 other Returns Type Description Int32"
  },
  "api/Unity.Entities.Hash128.-ctor.html": {
    "href": "api/Unity.Entities.Hash128.-ctor.html",
    "title": "Constructor Hash128 | Entities | 0.17.0-preview.18",
    "keywords": "Constructor Hash128 Hash128(uint4) Declaration public Hash128(uint4 value) Parameters Type Name Description Unity.Mathematics.uint4 value Hash128(UInt32, UInt32, UInt32, UInt32) Declaration public Hash128(uint x, uint y, uint z, uint w) Parameters Type Name Description UInt32 x UInt32 y UInt32 z UInt32 w Hash128(String) Construct a hash from a 32 character hex string If the string has the incorrect length or non-hex characters the Value will be all 0 Declaration public Hash128(string value) Parameters Type Name Description String value"
  },
  "api/Unity.Entities.Hash128.Equals.html": {
    "href": "api/Unity.Entities.Hash128.Equals.html",
    "title": "Method Equals | Entities | 0.17.0-preview.18",
    "keywords": "Method Equals Equals(Hash128) Declaration public bool Equals(Hash128 obj) Parameters Type Name Description Hash128 obj Returns Type Description Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object)"
  },
  "api/Unity.Entities.Hash128.GetHashCode.html": {
    "href": "api/Unity.Entities.Hash128.GetHashCode.html",
    "title": "Method GetHashCode | Entities | 0.17.0-preview.18",
    "keywords": "Method GetHashCode GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode()"
  },
  "api/Unity.Entities.Hash128.html": {
    "href": "api/Unity.Entities.Hash128.html",
    "title": "Struct Hash128 | Entities | 0.17.0-preview.18",
    "keywords": "Struct Hash128 Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] public struct Hash128 : IEquatable<Hash128>, IComparable<Hash128> Constructors Name Description Hash128(String) Construct a hash from a 32 character hex string If the string has the incorrect length or non-hex characters the Value will be all 0 Hash128(UInt32, UInt32, UInt32, UInt32) Hash128(uint4) Fields Name Description Value Properties Name Description IsValid Methods Name Description CompareTo(Hash128) Equals(Object) Equals(Hash128) GetHashCode() ToString() Operators Name Description Equality(Hash128, Hash128) GreaterThan(Hash128, Hash128) Inequality(Hash128, Hash128) LessThan(Hash128, Hash128)"
  },
  "api/Unity.Entities.Hash128.IsValid.html": {
    "href": "api/Unity.Entities.Hash128.IsValid.html",
    "title": "Property IsValid | Entities | 0.17.0-preview.18",
    "keywords": "Property IsValid IsValid Declaration public bool IsValid { get; } Property Value Type Description Boolean"
  },
  "api/Unity.Entities.Hash128.op_Equality.html": {
    "href": "api/Unity.Entities.Hash128.op_Equality.html",
    "title": "Operator Equality | Entities | 0.17.0-preview.18",
    "keywords": "Operator Equality Equality(Hash128, Hash128) Declaration public static bool operator ==(Hash128 obj1, Hash128 obj2) Parameters Type Name Description Hash128 obj1 Hash128 obj2 Returns Type Description Boolean"
  },
  "api/Unity.Entities.Hash128.op_GreaterThan.html": {
    "href": "api/Unity.Entities.Hash128.op_GreaterThan.html",
    "title": "Operator GreaterThan | Entities | 0.17.0-preview.18",
    "keywords": "Operator GreaterThan GreaterThan(Hash128, Hash128) Declaration public static bool operator>(Hash128 a, Hash128 b) Parameters Type Name Description Hash128 a Hash128 b Returns Type Description Boolean"
  },
  "api/Unity.Entities.Hash128.op_Inequality.html": {
    "href": "api/Unity.Entities.Hash128.op_Inequality.html",
    "title": "Operator Inequality | Entities | 0.17.0-preview.18",
    "keywords": "Operator Inequality Inequality(Hash128, Hash128) Declaration public static bool operator !=(Hash128 obj1, Hash128 obj2) Parameters Type Name Description Hash128 obj1 Hash128 obj2 Returns Type Description Boolean"
  },
  "api/Unity.Entities.Hash128.op_LessThan.html": {
    "href": "api/Unity.Entities.Hash128.op_LessThan.html",
    "title": "Operator LessThan | Entities | 0.17.0-preview.18",
    "keywords": "Operator LessThan LessThan(Hash128, Hash128) Declaration public static bool operator <(Hash128 a, Hash128 b) Parameters Type Name Description Hash128 a Hash128 b Returns Type Description Boolean"
  },
  "api/Unity.Entities.Hash128.ToString.html": {
    "href": "api/Unity.Entities.Hash128.ToString.html",
    "title": "Method ToString | Entities | 0.17.0-preview.18",
    "keywords": "Method ToString ToString() Declaration public override string ToString() Returns Type Description String Overrides ValueType.ToString()"
  },
  "api/Unity.Entities.Hash128.Value.html": {
    "href": "api/Unity.Entities.Hash128.Value.html",
    "title": "Field Value | Entities | 0.17.0-preview.18",
    "keywords": "Field Value Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public uint4 Value Returns Type Description Unity.Mathematics.uint4"
  },
  "api/Unity.Entities.html": {
    "href": "api/Unity.Entities.html",
    "title": "Namespace Unity.Entities | Entities | 0.17.0-preview.18",
    "keywords": "Namespace Unity.Entities Classes AlwaysSynchronizeSystemAttribute AlwaysSynchronizeSystem can be applied to a JobComponentSystem to force it to synchronize on all of its dependencies before every update. This attribute should only be applied when a synchronization point is necessary every frame. AlwaysUpdateSystemAttribute BeginFixedStepSimulationEntityCommandBufferSystem BeginInitializationEntityCommandBufferSystem BeginPresentationEntityCommandBufferSystem BeginSimulationEntityCommandBufferSystem BlobAssetSerializeExtensions Extensions for supporting serialization and deserialization of blob assets. BlobAssetStore Purpose of this class is to provide a consistent cache of BlobAsset object in order to avoid rebuilding them when it is not necessary BlobStringExtensions Extensions that allow the creation of BlobString instances by a BlobBuilder . BurstMonoInteropMethodAttribute ChangedFilterAttribute ChangeVersionUtility ChunkSerializableAttribute States that a component type is serializable. ComponentSystem An abstract class to implement in order to create a system. ComponentSystemBase A system provides behavior in an ECS architecture. ComponentSystemBaseManagedComponentExtensions ComponentSystemGroup ComponentSystemGroupExtensions ComponentSystemSorter ComponentSystemSorter.CircularSystemDependencyException ConverterVersionAttribute By declaring a version number a ComponentSystem can ensure that any cached data by the asset pipeline was prepared using the active code. If the version number of any conversion system or optimization system changes or a new conversion system is added, then the scene will be re-converted. ConvertToEntity ConvertToEntitySystem DefaultWorldInitialization DisableAutoCreationAttribute Prevents a system from being automatically created and run. DisableAutoTypeRegistration [DisableAutoTypeRegistration] prevents a Component Type from being registered in the TypeManager during TypeManager.Initialize(). Types that are not registered will not be recognized by EntityManager. DisallowRefReturnCrossingThisAttribute What is this : Attribute signaling that ref returned values, of a type that has this attribute, cannot intersect with calls to methods that also have this attribute. Motivation(s): ref returns of values that are backed by native memory (unsafe), like IComponentData in ecs chunks, can have the referenced memory invalidated by certain methods. A way is needed to detect these situations a compilation time to prevent accessing invalidated references. Notes: This attribute is used/feeds a Static Analyzer at compilation time. Attribute transfers with aggragations: struct A has this attribute, struct B has a field of type A; both A and B are concidered to have the attribute. EarlyInitHelpers Used by automatically generated code. Do not use in projects. EndFixedStepSimulationEntityCommandBufferSystem EndInitializationEntityCommandBufferSystem EndSimulationEntityCommandBufferSystem EntityCommandBufferManagedComponentExtensions EntityCommandBufferSystem A system that provides EntityCommandBuffer objects for other systems. EntityManager.EntityManagerDebug Provides information and utility functions for debugging. EntityManagerExtensions EntityManagerManagedComponentExtensions EntityPatcher EntityQueryDesc Describes a query to find archetypes in terms of required, optional, and excluded components. EntityQueryDescValidationException EntityQueryExtensionsForComponentArray EntityQueryExtensionsForTransformAccessArray EntityQueryManagedComponentExtensions EntityRemapUtility ExcludeComponentAttribute FixedRateUtils FixedRateUtils.FixedRateCatchUpManager FixedRateUtils.FixedRateSimpleManager FixedStepSimulationSystemGroup This system group is configured by default to use a fixed timestep for the duration of its updates. ForEachLambdaJobDescription_SetSharedComponent GameObjectConversionSettings GameObjectConversionUtility GameObjectEntity GenerateAuthoringComponentAttribute GenerateBurstMonoInteropAttribute InitializationSystemGroup InternalBufferCapacityAttribute Specifies the maximum number of elements to store inside a chunk. InternalCompilerInterface JobChunkExtensions Extensions for scheduling and running IJobChunk Jobs. JobComponentSystem An abstract class to implement in order to create a system that uses ECS-specific Jobs. JobEntityBatchExtensions Extensions for scheduling and running IJobEntityBatch jobs. JobEntityBatchIndexExtensions Extensions for scheduling and running IJobEntityBatchWithIndex jobs. JobForEachExtensions LambdaJobChunkDescription_SetSharedComponent LambdaJobChunkDescriptionConstructionMethods LambdaJobDescriptionConstructionMethods LambdaJobDescriptionExecutionMethods LambdaJobDescriptionExecutionMethodsJCS LambdaJobQueryConstructionMethods LambdaSingleJobDescriptionConstructionMethods LambdaSingleJobDescriptionExecutionMethods LambdaSingleJobDescriptionExecutionMethodsJCS LateSimulationSystemGroup LayerFieldAttribute Attribute used to make an int field display as a layer selector drop-down. MaximumChunkCapacityAttribute Specifies the maximum number of components of a type that can be stored in the same chunk. MayOnlyLiveInBlobStorageAttribute Use this attribute if you have structs that use offset pointers that are only valid when they live inside the blob storage. It will turn ensure a compiler error is generated for every time a reference to the struct is copied, or a field is read from a reference to the struct this attribute is applied on. PostLoadCommandBuffer PresentationSystemGroup RegisterGenericComponentTypeAttribute RegisterGenericJobTypeAttribute When added as an assembly-level attribute, allows creating job reflection data for instances of generic jobs. RequireComponentTagAttribute RestrictAuthoringInputToAttribute SceneViewWorldPositionAttribute ScriptBehaviourUpdateOrder SimulationSystemGroup StaticOptimizeEntity SystemBase Implement SystemBase to create a systems in ECS. SystemBaseDelegates SystemBaseRegistry TypeHash TypeManager TypeManager.ForcedMemoryOrderingAttribute TypeManager.TypeVersionAttribute UpdateAfterAttribute UpdateBeforeAttribute UpdateInGroupAttribute The specified Type must be a ComponentSystemGroup. Updating in a group means this system will be automatically updated by the specified ComponentSystemGroup when the group is updated. The system may order itself relative to other systems in the group with UpdateBefore and UpdateAfter. This ordering takes effect when the system group is sorted. If the optional OrderFirst parameter is set to true, this system will act as if it has an implicit [UpdateBefore] targeting all other systems in the group that do not have OrderFirst=true, but it may still order itself relative to other systems with OrderFirst=true. If the optional OrderLast parameter is set to true, this system will act as if it has an implicit [UpdateAfter] targeting all other systems in the group that do not have OrderLast=true, but it may still order itself relative to other systems with OrderLast=true. An UpdateInGroup attribute with both OrderFirst=true and OrderLast=true is invalid, and will throw an exception. UpdateWorldTimeSystem World WorldExtensions WorldSystemFilterAttribute For internal use only. WriteGroupAttribute [WriteGroup] Can exclude components which are unknown at the time of creating the query that have been declared to write to the same component. This allows for extending systems of components safely without editing the previously existing systems. The goal is to have a way for systems that expect to transform data from one set of components (inputs) to another (output[s]) be able to declare that explicit transform, and they exclusively know about one set of inputs. If there are other inputs that want to write to the same output, the query shouldn't match because it's a nonsensical/unhandled setup. It's both a way to guard against nonsensical components (having two systems write to the same output value), and a way to \"turn off\" existing systems/queries by putting a component with the same write lock on an entity, letting another system handle it. Structs ArchetypeChunk A block of unmanaged memory containing the components for entities sharing the same Archetype . ArchetypeChunkArray ArchetypeChunkIterator Can be passed into IJobChunk.RunWithoutJobs to iterate over an entity query without running any jobs. Asset Marks the entity as an asset, which is used for the Export phase of GameObject conversion. BlobArray<T> An immutable array of value types stored in a blob asset. BlobAssetChange Header for a changed blob asset. BlobAssetComputationContext<TS, TB> The BlobAssetComputationContext must be used during Authoring to ECS conversion process to detect which BlobAsset should be computed and to declare their association with a UnityObject BlobAssetReference<T> A reference to a blob asset stored in unmanaged memory. BlobAssetReferenceChange Represents a blob asset reference that was changed within a EntityChangeSet BlobBuilder Creates blob assets. BlobBuilderArray<T> Used by the BlobBuilder methods to reference the arrays within a blob asset. BlobPtr<T> A pointer referencing a struct, array, or field inside a blob asset. BlobString An immutable, variable-length string stored in a blob asset. BufferAccessor<T> BufferFromEntity<T> BufferTypeHandle<T> ChunkEntitiesDescription ChunkHeader ComponentDataFromEntity<T> A [NativeContainer] that provides access to all instances of components of type T, indexed by Entity . ComponentSystemSorter.TypeHeapElement ComponentType ComponentTypeHandle<T> ComponentTypeHash ComponentTypes An immutable list of ComponentType values. ComponentTypes.Masks Disabled Disables the entity. DynamicBuffer<T> An array-like data structure that can be used as a component. DynamicComponentTypeHandle EditorRenderData Entity Identifies an entity. EntityArchetype An EntityArchetype is a unique combination of component types. The EntityManager uses the archetype to group all entities that have the same sets of components. EntityChanges EntityChangeSet An atomic package of changes to entity and component data. EntityCommandBuffer A thread-safe command buffer that can buffer commands that affect entities and components for later playback. EntityCommandBuffer.ParallelWriter Allows concurrent (deterministic) command buffer recording. EntityContainer EntityGuid This component is attached to converted Entities and is guaranteed to be unique within a World. It can be used to map back to the authoring GameObject from which it was converted. Note that an EntityGuid does not have enough information to be persistent across sessions. EntityInChunk EntityManager The EntityManager manages entities and components in a World. EntityManagerDiffer The EntityManagerDiffer is used to efficiently track changes to a given world over time. EntityQuery Use an EntityQuery object to select entities with components that meet specific requirements. EntityQueryBuilder EntityQueryMask Provides an efficient test of whether a specific entity would be selected by an EntityQuery. EntityReferenceChange Represents an entity reference that was changed within a EntityChangeSet This structure references the entity by it's unique EntityGuid . EntityRemapUtility.BufferEntityPatchInfo EntityRemapUtility.EntityPatchInfo EntityRemapUtility.EntityRemapInfo EntityTypeHandle ExcludeComponent<T> ExclusiveEntityTransaction FastEquality FastEquality.TypeInfo Hash128 LayoutUtility Low-level utility functions for AOS->SOA (scatter) and SOA->AOS (gather) conversions. LayoutUtilityManaged LinkedEntityGroup The LinkedEntityGroup buffer makes the entity be the root of a set of connected entities. LinkedEntityGroupChange ManagedComponentAccessor<T> MemsetNativeArray<T> Assign Value to each element of NativeArray NativeArraySharedInt Merge sort index list referencing NativeArray values. Provide list of shared values, indices to shared values, and lists of source i value indices with identical shared value. As an example: Given Source NativeArray: [A,A,A,B,B,C,C,A,B] Provides: Shared value indices: [0,0,0,1,1,2,2,0,1] Shared value counts: [4,3,2] (number of occurrences of a shared value) Shared values: [A,B,C] (not stored in this structure) Sorted indices: [0,1,2,7,3,4,8,5,6] (using these indices to look up values in the source array would give you [A,A,A,A,B,B,B,C,C]) Shared value start offsets (into sorted indices): [0,4,7] PackedComponent Represents a packed component within an EntityChangeSet PackedComponentDataChange Represents a packed component data change within a EntityChangeSet PackedManagedComponentDataChange PackedSharedComponentDataChange Prefab Marks the entity as a prefab, which implicitly disables the entity. RequestSceneLoaded SceneReference SceneSection SceneSectionData SceneTag A Unity-defined shared component assigned to all entities in the same subscene. SectionMetadataSetup SharedComponentTypeHandle<T> SOAFieldInfo SystemState Contains raw entity system state. Used by unmanaged systems (ISystemBase) as well as managed systems behind the scenes. TypeManager.EntityOffsetInfo TypeManager.TypeInfo World.NoAllocReadOnlyCollection<T> Read only collection that doesn't generate garbage when used in a foreach. WorldUnmanaged Interfaces IBufferElementData An interface for creating structs that can be stored in a DynamicBuffer<T> . IComponentData An interface for implementing general-purpose components. IConvertGameObjectToEntity ICustomBootstrap When entering playmode or the game starts in the Player a default world is created. Sometimes you need multiple worlds to be setup when the game starts or perform some custom world initialization. This lets you override the bootstrap of game code world creation. IDeclareReferencedPrefabs IFixedRateManager IJobChunk IJobChunk is a type of Job that iterates over a set of ArchetypeChunk instances. IJobEntityBatch IJobEntityBatch is a type of IJob that iterates over a set of ArchetypeChunk instances, where each instance represents a contiguous batch of entities within a chunk . IJobEntityBatchWithIndex IJobEntityBatchWithIndex is a variant of [IJobEntityBatch] that provides an additional indexOfFirstEntityInQuery parameter, which provides a per-batch index that is the aggregate of all previous batch counts. IRefCounted ISharedComponentData An interface for a component type whose value is shared by all entities in the same chunk. ISystemBase Interface implemented by unmanaged component systems. ISystemStateBufferElementData An interface for a component type that stores system-specific data in a buffer. ISystemStateComponentData An interface for a component type that stores system-specific data. ISystemStateSharedComponentData An interface for a component type that stores shared system-specific data. JobForEachExtensions.IBaseJobForEach Enums ComponentType.AccessMode ComponentTypeFlags ConvertToEntity.Mode EntityManagerDifferOptions Parameters used to configure the the execution of the differ. EntityQueryOptions The bit flags to use for the Options field. GameObjectConversionUtility.ConversionFlags PlaybackPolicy Specifies if the EntityCommandBuffer can be played a single time or multiple times. SceneLoadFlags TypeManager.TypeCategory WorldFlags Specify all traits a World can have. WorldSystemFilterFlags For internal use only. Delegates EarlyInitHelpers.EarlyInitFunction FastEquality.TypeInfo.CompareEqualDelegate FastEquality.TypeInfo.GetHashCodeDelegate FastEquality.TypeInfo.ManagedCompareEqualDelegate FastEquality.TypeInfo.ManagedGetHashCodeDelegate InternalCompilerInterface.JobChunkRunWithoutJobSystemDelegate InternalCompilerInterface.JobRunWithoutJobSystemDelegate LambdaJobChunkDescriptionConstructionMethods.JobChunkDelegate LambdaSingleJobDescriptionConstructionMethods.WithCodeAction SystemBaseDelegates.Function SystemBaseRegistry.ForwardingFunc"
  },
  "api/Unity.Entities.Hybrid.Internal.GeneratedAuthoringComponentImplementation.AddReferencedPrefab.html": {
    "href": "api/Unity.Entities.Hybrid.Internal.GeneratedAuthoringComponentImplementation.AddReferencedPrefab.html",
    "title": "Method AddReferencedPrefab | Entities | 0.17.0-preview.18",
    "keywords": "Method AddReferencedPrefab AddReferencedPrefab(List<GameObject>, GameObject) Declaration public static void AddReferencedPrefab(List<GameObject> referencedPrefabs, GameObject gameObject) Parameters Type Name Description List < GameObject > referencedPrefabs GameObject gameObject"
  },
  "api/Unity.Entities.Hybrid.Internal.GeneratedAuthoringComponentImplementation.AddReferencedPrefabs.html": {
    "href": "api/Unity.Entities.Hybrid.Internal.GeneratedAuthoringComponentImplementation.AddReferencedPrefabs.html",
    "title": "Method AddReferencedPrefabs | Entities | 0.17.0-preview.18",
    "keywords": "Method AddReferencedPrefabs AddReferencedPrefabs(List<GameObject>, IEnumerable<GameObject>) Declaration public static void AddReferencedPrefabs(List<GameObject> referencedPrefabs, IEnumerable<GameObject> gameObjects) Parameters Type Name Description List < GameObject > referencedPrefabs IEnumerable < GameObject > gameObjects"
  },
  "api/Unity.Entities.Hybrid.Internal.GeneratedAuthoringComponentImplementation.html": {
    "href": "api/Unity.Entities.Hybrid.Internal.GeneratedAuthoringComponentImplementation.html",
    "title": "Class GeneratedAuthoringComponentImplementation | Entities | 0.17.0-preview.18",
    "keywords": "Class GeneratedAuthoringComponentImplementation These methods are only used by CodeGen. Treat them as implementation details. Inheritance Object GeneratedAuthoringComponentImplementation Namespace : Unity.Entities.Hybrid.Internal <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class GeneratedAuthoringComponentImplementation Methods Name Description AddReferencedPrefab(List<GameObject>, GameObject) AddReferencedPrefabs(List<GameObject>, IEnumerable<GameObject>)"
  },
  "api/Unity.Entities.Hybrid.Internal.html": {
    "href": "api/Unity.Entities.Hybrid.Internal.html",
    "title": "Namespace Unity.Entities.Hybrid.Internal | Entities | 0.17.0-preview.18",
    "keywords": "Namespace Unity.Entities.Hybrid.Internal Classes GeneratedAuthoringComponentImplementation These methods are only used by CodeGen. Treat them as implementation details."
  },
  "api/Unity.Entities.IBufferElementData.html": {
    "href": "api/Unity.Entities.IBufferElementData.html",
    "title": "Interface IBufferElementData | Entities | 0.17.0-preview.18",
    "keywords": "Interface IBufferElementData An interface for creating structs that can be stored in a DynamicBuffer<T> . Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface IBufferElementData Remarks IBufferElementData implementations are subject to the same constraints as IComponentData . Create a DynamicBuffer<T> containing a given type T by adding that IBufferElementData type to an entity. The DynamicBuffer container is created automatically. You can specify the maximum number of elements a buffer stores inside a chunk by placing an InternalBufferCapacityAttribute on the IBufferElementData declaration. When the number of elements exceeds the internal capacity, the entire is moved outside the chunk into heap memory. (In either case, you access an element the same way through the dynamic buffer API.) To remove a buffer from an entity, remove that entity's IBufferElementData component. (To remove an individual element from a buffer, call RemoveAt(Int32) .) You can find entities with a particular type of buffer using either EntityQuery or EntityQueryBuilder in the same way you select entities with specific types of IComponentData . Use the IBufferElementData type in the query (not DynamicBuffer). To access the buffer of an entity in a ComponentSystem , use GetBuffer<T>(Entity) , where T is the IBufferElementData subtype. To access the buffer of an entity in a ComponentSystemBase instance, define a field of type, GetBufferFromEntity<T>(Boolean) , as part of the Job struct. Set the field value when you schedule the Job with Unity.Entities.EntityManager.GetBufferFromEntity``1(System.Boolean) . The DynamicBuffer interface provides array-like access to buffer contents. You can treat a buffer like a NativeArray . You can also use Reinterpret<U>() to treat the buffer as a container of the underlying type, rather than a container of IBufferElementData. See Dynamic Buffers for additional information."
  },
  "api/Unity.Entities.IComponentData.html": {
    "href": "api/Unity.Entities.IComponentData.html",
    "title": "Interface IComponentData | Entities | 0.17.0-preview.18",
    "keywords": "Interface IComponentData An interface for implementing general-purpose components. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface IComponentData Remarks An IComponentData implementation must be a struct and can only contain unmanaged, blittable types, including: C#-defined blittable types bool char BlobAssetReference<T> (a reference to a Blob data structure) Unity.Collections.FixedString (a fixed-sized character buffer) Unity.Collections.FixedList fixed arrays (in an unsafe context) structs containing these unmanaged, blittable fields Note that you can also use a separate, IBufferElementData component in a DynamicBuffer<T> as an array-like data structure. A single IComponentData implementation should only contain fields for data that is always, or almost always, accessed at the same time. In general, using a greater number of smaller component types is more efficient than using fewer, larger component types. Add, set, and remove the components of an entity using the EntityManager or an EntityCommandBuffer . (You can also update the fields of an IComponentData struct normally when you have a reference to it.) IComponentData objects are stored in chunks ( ArchetypeChunk ), indexed by Entity . You can implement systems ( ComponentSystemBase ) to select and iterate over a set of entities having specific components. Use EntityQueryBuilder with ComponentSystem for non-Job based systems. Use EntityQuery with JobComponentSystem for Unity.Entities.IJobForEach`1 and IJobChunk based systems. All the components of an entity must fit into a single chunk and thus cannot exceed 16 KB. (Some components, such as DynamicBuffer<T> and BlobArray<T> can store data outside the chunk, so may not fully count against that limit.) While, most of the components that you add to entities implement IComponentData, ECS also provides several, specialized component types. These specialized types include: IBufferElementData -- for use in a DynamicBuffer<T> ISharedComponentData -- a component whose value is shared by all entities in the same chunk ISystemStateComponentData -- a component for storing internal system state associated with an entity. ISystemStateSharedComponentData -- the system state version of the shared component interface. ISystemStateBufferElementData -- the system state version of the buffer element interface. Note: Chunk components, which you can use to store data associated with a chunk (see AddChunkComponentData<T>(Entity) ) and singleton components, which are components for which only one instance of a type is allowed (see SetSingleton<T>(T) ), use the IComponentData interface. See General-purpose components for additional information."
  },
  "api/Unity.Entities.IConvertGameObjectToEntity.Convert.html": {
    "href": "api/Unity.Entities.IConvertGameObjectToEntity.Convert.html",
    "title": "Method Convert | Entities | 0.17.0-preview.18",
    "keywords": "Method Convert Convert(Entity, EntityManager, GameObjectConversionSystem) Declaration void Convert(Entity entity, EntityManager dstManager, GameObjectConversionSystem conversionSystem) Parameters Type Name Description Entity entity EntityManager dstManager GameObjectConversionSystem conversionSystem"
  },
  "api/Unity.Entities.IConvertGameObjectToEntity.html": {
    "href": "api/Unity.Entities.IConvertGameObjectToEntity.html",
    "title": "Interface IConvertGameObjectToEntity | Entities | 0.17.0-preview.18",
    "keywords": "Interface IConvertGameObjectToEntity Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface IConvertGameObjectToEntity Methods Name Description Convert(Entity, EntityManager, GameObjectConversionSystem)"
  },
  "api/Unity.Entities.ICustomBootstrap.html": {
    "href": "api/Unity.Entities.ICustomBootstrap.html",
    "title": "Interface ICustomBootstrap | Entities | 0.17.0-preview.18",
    "keywords": "Interface ICustomBootstrap When entering playmode or the game starts in the Player a default world is created. Sometimes you need multiple worlds to be setup when the game starts or perform some custom world initialization. This lets you override the bootstrap of game code world creation. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface ICustomBootstrap Methods Name Description Initialize(String)"
  },
  "api/Unity.Entities.ICustomBootstrap.Initialize.html": {
    "href": "api/Unity.Entities.ICustomBootstrap.Initialize.html",
    "title": "Method Initialize | Entities | 0.17.0-preview.18",
    "keywords": "Method Initialize Initialize(String) Declaration bool Initialize(string defaultWorldName) Parameters Type Name Description String defaultWorldName Returns Type Description Boolean"
  },
  "api/Unity.Entities.IDeclareReferencedPrefabs.DeclareReferencedPrefabs.html": {
    "href": "api/Unity.Entities.IDeclareReferencedPrefabs.DeclareReferencedPrefabs.html",
    "title": "Method DeclareReferencedPrefabs | Entities | 0.17.0-preview.18",
    "keywords": "Method DeclareReferencedPrefabs DeclareReferencedPrefabs(List<GameObject>) Declaration void DeclareReferencedPrefabs(List<GameObject> referencedPrefabs) Parameters Type Name Description List < GameObject > referencedPrefabs"
  },
  "api/Unity.Entities.IDeclareReferencedPrefabs.html": {
    "href": "api/Unity.Entities.IDeclareReferencedPrefabs.html",
    "title": "Interface IDeclareReferencedPrefabs | Entities | 0.17.0-preview.18",
    "keywords": "Interface IDeclareReferencedPrefabs Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface IDeclareReferencedPrefabs Methods Name Description DeclareReferencedPrefabs(List<GameObject>)"
  },
  "api/Unity.Entities.IFixedRateManager.html": {
    "href": "api/Unity.Entities.IFixedRateManager.html",
    "title": "Interface IFixedRateManager | Entities | 0.17.0-preview.18",
    "keywords": "Interface IFixedRateManager Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface IFixedRateManager Properties Name Description Timestep Methods Name Description ShouldGroupUpdate(ComponentSystemGroup)"
  },
  "api/Unity.Entities.IFixedRateManager.ShouldGroupUpdate.html": {
    "href": "api/Unity.Entities.IFixedRateManager.ShouldGroupUpdate.html",
    "title": "Method ShouldGroupUpdate | Entities | 0.17.0-preview.18",
    "keywords": "Method ShouldGroupUpdate ShouldGroupUpdate(ComponentSystemGroup) Declaration bool ShouldGroupUpdate(ComponentSystemGroup group) Parameters Type Name Description ComponentSystemGroup group Returns Type Description Boolean"
  },
  "api/Unity.Entities.IFixedRateManager.Timestep.html": {
    "href": "api/Unity.Entities.IFixedRateManager.Timestep.html",
    "title": "Property Timestep | Entities | 0.17.0-preview.18",
    "keywords": "Property Timestep Timestep Declaration float Timestep { get; set; } Property Value Type Description Single"
  },
  "api/Unity.Entities.IJobChunk.Execute.html": {
    "href": "api/Unity.Entities.IJobChunk.Execute.html",
    "title": "Method Execute | Entities | 0.17.0-preview.18",
    "keywords": "Method Execute Execute(ArchetypeChunk, Int32, Int32) Implement the Execute() function to perform a unit of work on an ArchetypeChunk . Declaration void Execute(ArchetypeChunk chunk, int chunkIndex, int firstEntityIndex) Parameters Type Name Description ArchetypeChunk chunk The current chunk. Int32 chunkIndex The index of the current chunk within the list of all chunks found by the Job's EntityQuery . Note that chunks are not processed in index order, except by chance. Int32 firstEntityIndex The index of the first entity in the current chunk within the list of all entities in all the chunks found by the Job's EntityQuery . Remarks The Job component system calls the Execute function once for each EntityArchetype found by the EntityQuery used to schedule the Job."
  },
  "api/Unity.Entities.IJobChunk.html": {
    "href": "api/Unity.Entities.IJobChunk.html",
    "title": "Interface IJobChunk | Entities | 0.17.0-preview.18",
    "keywords": "Interface IJobChunk IJobChunk is a type of Job that iterates over a set of ArchetypeChunk instances. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [JobProducerType(typeof(JobChunkExtensions.JobChunkProducer<>))] public interface IJobChunk Remarks Create and schedule an IJobChunk Job inside the OnUpdate() function of a SystemBase implementation. The Job component system calls the Execute function once for each ArchetypeChunk found by the EntityQuery used to schedule the Job. To pass data to the Execute function beyond the parameters of the Execute() function, add public fields to the IJobChunk struct declaration and set those fields immediately before scheduling the Job. You must pass the component type information for any components that the Job reads or writes using a field of type, ComponentTypeHandle<T> . Get this type information by calling the appropriate GetComponentTypeHandle<T>(Boolean) function for the type of component. For more information see Using IJobChunk . [GenerateAuthoringComponent] public struct Target : IComponentData { public Entity entity; } public class ChaserSystem : SystemBase { private EntityQuery query; // Initialized in Oncreate() [BurstCompile] private struct ChaserSystemJob : IJobChunk { // Read-write data in the current chunk public ComponentTypeHandle<Translation> PositionTypeHandle; // Read-only data in the current chunk [ReadOnly] public ComponentTypeHandle<Target> TargetTypeHandle; // Read-only data stored (potentially) in other chunks [ReadOnly] //[NativeDisableParallelForRestriction] public ComponentDataFromEntity<LocalToWorld> EntityPositions; // Non-entity data public float deltaTime; public void Execute(ArchetypeChunk chunk, int chunkIndex, int firstEntityIndex) { NativeArray<Translation> positions = chunk.GetNativeArray<Translation>(PositionTypeHandle); NativeArray<Target> targets = chunk.GetNativeArray<Target>(TargetTypeHandle); for (int i = 0; i < positions.Length; i++) { Entity targetEntity = targets[i].entity; float3 targetPosition = EntityPositions[targetEntity].Position; float3 chaserPosition = positions[i].Value; float3 displacement = (targetPosition - chaserPosition); positions[i] = new Translation { Value = chaserPosition + displacement * deltaTime }; } } } protected override void OnCreate() { query = this.GetEntityQuery(typeof(Translation), ComponentType.ReadOnly<Target>()); } protected override void OnUpdate() { var job = new ChaserSystemJob(); job.PositionTypeHandle = this.GetComponentTypeHandle<Translation>(false); job.TargetTypeHandle = this.GetComponentTypeHandle<Target>(true); job.EntityPositions = this.GetComponentDataFromEntity<LocalToWorld>(true); job.deltaTime = this.Time.DeltaTime; this.Dependency = job.Schedule(query, this.Dependency); } } Methods Name Description Execute(ArchetypeChunk, Int32, Int32) Implement the Execute() function to perform a unit of work on an ArchetypeChunk ."
  },
  "api/Unity.Entities.IJobEntityBatch.Execute.html": {
    "href": "api/Unity.Entities.IJobEntityBatch.Execute.html",
    "title": "Method Execute | Entities | 0.17.0-preview.18",
    "keywords": "Method Execute Execute(ArchetypeChunk, Int32) Implement the Execute function to perform a unit of work on an ArchetypeChunk representing a contiguous batch of entities within a chunk. Declaration void Execute(ArchetypeChunk batchInChunk, int batchIndex) Parameters Type Name Description ArchetypeChunk batchInChunk An object providing access to a batch of entities within a chunk. Int32 batchIndex The index of the current batch within the list of all batches in all chunks found by the job's EntityQuery . If the batch count is one, this list contains one entry for each selected chunk; if the batch count is two, the list contains two entries per chunk; and so on. Note that batches are not processed in index order, except by chance. Remarks The chunks selected by the EntityQuery used to schedule the job are the input to your Execute function. If you use ScheduleParallel<T>(T, EntityQuery, Int32, JobHandle) to schedule the job, the entities in each matching chunk are partitioned into contiguous batches based on the batchesInChunk parameter, and the Execute function is called once for each batch. When you use one of the other scheduling or run methods, the Execute function is called once per matching chunk (in other words, the batch count is one)."
  },
  "api/Unity.Entities.IJobEntityBatch.html": {
    "href": "api/Unity.Entities.IJobEntityBatch.html",
    "title": "Interface IJobEntityBatch | Entities | 0.17.0-preview.18",
    "keywords": "Interface IJobEntityBatch IJobEntityBatch is a type of IJob that iterates over a set of ArchetypeChunk instances, where each instance represents a contiguous batch of entities within a chunk . Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [JobProducerType(typeof(JobEntityBatchExtensions.JobEntityBatchProducer<>))] public interface IJobEntityBatch Remarks Schedule or run an IJobEntityBatch job inside the OnUpdate() function of a SystemBase implementation. When the system schedules or runs an IJobEntityBatch job, it uses the specified EntityQuery to select a set of chunks . These selected chunks are divided into batches of entities. A batch is a contiguous set of entities, always stored in the same chunk. The job struct's Execute function is called for each batch. When you schedule or run the job with one of the following methods: Schedule<T>(T, EntityQuery, JobHandle) , ScheduleParallel<T>(T, EntityQuery, Int32, JobHandle) , or Run<T>(T, EntityQuery) all the entities of each chunk are processed as a single batch. The ArchetypeChunk object passed to the Execute function of your job struct provides access to the components of all the entities in the chunk. Use ScheduleParallel<T>(T, EntityQuery, Int32, JobHandle) to divide each chunk selected by your query into (approximately) equal batches of contiguous entities. For example, if you use a batch count of two, one batch provides access to the first half of the component arrays in a chunk and the other provides access to the second half. When you use batching, the ArchetypeChunk object only provides access to the components in the current batch of entities -- not those of all entities in a chunk. In general, processing whole chunks at a time (setting batch count to one) is the most efficient. However, in cases where the algorithm itself is relatively expensive for each entity, executing smaller batches in parallel can provide better overall performance, especially when the entities are contained in a small number of chunks. As always, you should profile your job to find the best arrangement for your specific application. To pass data to your Execute function (beyond the Execute parameters), add public fields to the IJobEntityBatch struct declaration and set those fields immediately before scheduling the job. You must always pass the component type information for any components that the job reads or writes using a field of type, ComponentTypeHandle<T> . Get this type information by calling the appropriate GetComponentTypeHandle<T>(Boolean) function for the type of component. For more information see Using IJobEntityBatch . [GenerateAuthoringComponent] public struct ExpensiveTarget : IComponentData { public Entity entity; } public class BatchedChaserSystem : SystemBase { private EntityQuery query; // Initialized in Oncreate() [BurstCompile] private struct BatchedChaserSystemJob : IJobEntityBatch { // Read-write data in the current chunk public ComponentTypeHandle<Translation> PositionTypeHandleAccessor; // Read-only data in the current chunk [ReadOnly] public ComponentTypeHandle<Target> TargetTypeHandleAccessor; // Read-only data stored (potentially) in other chunks [ReadOnly] //[NativeDisableParallelForRestriction] public ComponentDataFromEntity<LocalToWorld> EntityPositions; // Non-entity data public float deltaTime; public void Execute(ArchetypeChunk batchInChunk, int batchIndex) { // Within Execute(), the scope of the ArchetypeChunk is limited to the current batch. // For example, these NativeArrays will have Length = batchInChunk.BatchEntityCount, // where batchInChunk.BatchEntityCount is roughly batchInChunk.Capacity divided by the // batchesInChunk parameter passed to ScheduleParallelBatched(). NativeArray<Translation> positions = batchInChunk.GetNativeArray<Translation>(PositionTypeHandleAccessor); NativeArray<Target> targets = batchInChunk.GetNativeArray<Target>(TargetTypeHandleAccessor); for (int i = 0; i < positions.Length; i++) { Entity targetEntity = targets[i].entity; float3 targetPosition = EntityPositions[targetEntity].Position; float3 chaserPosition = positions[i].Value; float3 displacement = (targetPosition - chaserPosition); positions[i] = new Translation { Value = chaserPosition + displacement * deltaTime }; } } } protected override void OnCreate() { query = this.GetEntityQuery(typeof(Translation), ComponentType.ReadOnly<Target>()); } protected override void OnUpdate() { var job = new BatchedChaserSystemJob(); job.PositionTypeHandleAccessor = this.GetComponentTypeHandle<Translation>(false); job.TargetTypeHandleAccessor = this.GetComponentTypeHandle<Target>(true); job.EntityPositions = this.GetComponentDataFromEntity<LocalToWorld>(true); job.deltaTime = this.Time.DeltaTime; int batchesPerChunk = 4; // Partition each chunk into this many batches. Each batch will be processed concurrently. this.Dependency = job.ScheduleParallel(query, batchesPerChunk, this.Dependency); } } Methods Name Description Execute(ArchetypeChunk, Int32) Implement the Execute function to perform a unit of work on an ArchetypeChunk representing a contiguous batch of entities within a chunk. See Also JobEntityBatchExtensions IJobEntityBatchWithIndex"
  },
  "api/Unity.Entities.IJobEntityBatchWithIndex.Execute.html": {
    "href": "api/Unity.Entities.IJobEntityBatchWithIndex.Execute.html",
    "title": "Method Execute | Entities | 0.17.0-preview.18",
    "keywords": "Method Execute Execute(ArchetypeChunk, Int32, Int32) Implement the Execute function to perform a unit of work on an ArchetypeChunk representing a contiguous batch of entities within a chunk. Declaration void Execute(ArchetypeChunk batchInChunk, int batchIndex, int indexOfFirstEntityInQuery) Parameters Type Name Description ArchetypeChunk batchInChunk An object providing access to a batch of entities within a chunk. Int32 batchIndex The index of the current batch within the list of all batches in all chunks found by the job's EntityQuery . If the batch count is one, this list contains one entry for each selected chunk; if the batch count is two, the list contains two entries per chunk; and so on. Note that batches are not processed in index order, except by chance. Int32 indexOfFirstEntityInQuery The index of the first entity in the current chunk within the list of all entities in all the chunks found by the Job's EntityQuery . Remarks The chunks selected by the EntityQuery used to schedule the job are the input to your Execute function. If you use ScheduleParallel<T>(T, EntityQuery, Int32, JobHandle) to schedule the job, the entities in each matching chunk are partitioned into contiguous batches based on the batchesInChunk parameter, and the Execute function is called once for each batch. When you use one of the other scheduling or run methods, the Execute function is called once per matching chunk (in other words, the batch count is one)."
  },
  "api/Unity.Entities.IJobEntityBatchWithIndex.html": {
    "href": "api/Unity.Entities.IJobEntityBatchWithIndex.html",
    "title": "Interface IJobEntityBatchWithIndex | Entities | 0.17.0-preview.18",
    "keywords": "Interface IJobEntityBatchWithIndex IJobEntityBatchWithIndex is a variant of [IJobEntityBatch] that provides an additional indexOfFirstEntityInQuery parameter, which provides a per-batch index that is the aggregate of all previous batch counts. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [JobProducerType(typeof(JobEntityBatchIndexExtensions.JobEntityBatchIndexProducer<>))] public interface IJobEntityBatchWithIndex Remarks Schedule or run an IJobEntityBatchWithIndex job inside the OnUpdate() function of a SystemBase implementation. When the system schedules or runs an IJobEntityBatchWithIndex job, it uses the specified EntityQuery to select a set of chunks . These selected chunks are divided into batches of entities. A batch is a contiguous set of entities, always stored in the same chunk. The job struct's Execute function is called for each batch. When you schedule or run the job with one of the following methods: Schedule<T>(T, EntityQuery, JobHandle) , ScheduleParallel<T>(T, EntityQuery, Int32, JobHandle) , or Run<T>(T, EntityQuery) all the entities of each chunk are processed as a single batch. The ArchetypeChunk object passed to the Execute function of your job struct provides access to the components of all the entities in the chunk. Use ScheduleParallel<T>(T, EntityQuery, Int32, JobHandle) to divide each chunk selected by your query into (approximately) equal batches of contiguous entities. For example, if you use a batch count of two, one batch provides access to the first half of the component arrays in a chunk and the other provides access to the second half. When you use batching, the ArchetypeChunk object only provides access to the components in the current batch of entities -- not those of all entities in a chunk. In general, processing whole chunks at a time (setting batch count to one) is the most efficient. However, in cases where the algorithm itself is relatively expensive for each entity, executing smaller batches in parallel can provide better overall performance, especially when the entities are contained in a small number of chunks. As always, you should profile your job to find the best arrangement for your specific application. To pass data to your Execute function (beyond the Execute parameters), add public fields to the IJobEntityBatchWithIndex struct declaration and set those fields immediately before scheduling the job. You must always pass the component type information for any components that the job reads or writes using a field of type, ComponentTypeHandle<T> . Get this type information by calling the appropriate GetComponentTypeHandle<T>(Boolean) function for the type of component. For more information see Using IJobEntityBatch . Methods Name Description Execute(ArchetypeChunk, Int32, Int32) Implement the Execute function to perform a unit of work on an ArchetypeChunk representing a contiguous batch of entities within a chunk. See Also JobEntityBatchIndexExtensions IJobEntityBatch"
  },
  "api/Unity.Entities.IL2CPPProcessing.ComponentSystemProcessing.callbackOrder.html": {
    "href": "api/Unity.Entities.IL2CPPProcessing.ComponentSystemProcessing.callbackOrder.html",
    "title": "Property callbackOrder | Entities | 0.17.0-preview.18",
    "keywords": "Property callbackOrder callbackOrder Declaration public int callbackOrder { get; } Property Value Type Description Int32 Implements IOrderedCallback.callbackOrder"
  },
  "api/Unity.Entities.IL2CPPProcessing.ComponentSystemProcessing.GenerateAdditionalLinkXmlFile.html": {
    "href": "api/Unity.Entities.IL2CPPProcessing.ComponentSystemProcessing.GenerateAdditionalLinkXmlFile.html",
    "title": "Method GenerateAdditionalLinkXmlFile | Entities | 0.17.0-preview.18",
    "keywords": "Method GenerateAdditionalLinkXmlFile GenerateAdditionalLinkXmlFile(BuildReport, UnityLinkerBuildPipelineData) Declaration public string GenerateAdditionalLinkXmlFile(BuildReport report, UnityLinkerBuildPipelineData data) Parameters Type Name Description BuildReport report UnityLinkerBuildPipelineData data Returns Type Description String Implements IUnityLinkerProcessor.GenerateAdditionalLinkXmlFile(BuildReport, UnityLinkerBuildPipelineData)"
  },
  "api/Unity.Entities.IL2CPPProcessing.ComponentSystemProcessing.html": {
    "href": "api/Unity.Entities.IL2CPPProcessing.ComponentSystemProcessing.html",
    "title": "Class ComponentSystemProcessing | Entities | 0.17.0-preview.18",
    "keywords": "Class ComponentSystemProcessing Inheritance Object ComponentSystemProcessing Namespace : Unity.Entities.IL2CPPProcessing <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class ComponentSystemProcessing : IUnityLinkerProcessor, IOrderedCallback Properties Name Description callbackOrder Methods Name Description GenerateAdditionalLinkXmlFile(BuildReport, UnityLinkerBuildPipelineData) OnAfterRun(BuildReport, UnityLinkerBuildPipelineData) OnBeforeRun(BuildReport, UnityLinkerBuildPipelineData)"
  },
  "api/Unity.Entities.IL2CPPProcessing.ComponentSystemProcessing.OnAfterRun.html": {
    "href": "api/Unity.Entities.IL2CPPProcessing.ComponentSystemProcessing.OnAfterRun.html",
    "title": "Method OnAfterRun | Entities | 0.17.0-preview.18",
    "keywords": "Method OnAfterRun OnAfterRun(BuildReport, UnityLinkerBuildPipelineData) Declaration public void OnAfterRun(BuildReport report, UnityLinkerBuildPipelineData data) Parameters Type Name Description BuildReport report UnityLinkerBuildPipelineData data Implements IUnityLinkerProcessor.OnAfterRun(BuildReport, UnityLinkerBuildPipelineData)"
  },
  "api/Unity.Entities.IL2CPPProcessing.ComponentSystemProcessing.OnBeforeRun.html": {
    "href": "api/Unity.Entities.IL2CPPProcessing.ComponentSystemProcessing.OnBeforeRun.html",
    "title": "Method OnBeforeRun | Entities | 0.17.0-preview.18",
    "keywords": "Method OnBeforeRun OnBeforeRun(BuildReport, UnityLinkerBuildPipelineData) Declaration public void OnBeforeRun(BuildReport report, UnityLinkerBuildPipelineData data) Parameters Type Name Description BuildReport report UnityLinkerBuildPipelineData data Implements IUnityLinkerProcessor.OnBeforeRun(BuildReport, UnityLinkerBuildPipelineData)"
  },
  "api/Unity.Entities.IL2CPPProcessing.html": {
    "href": "api/Unity.Entities.IL2CPPProcessing.html",
    "title": "Namespace Unity.Entities.IL2CPPProcessing | Entities | 0.17.0-preview.18",
    "keywords": "Namespace Unity.Entities.IL2CPPProcessing Classes ComponentSystemProcessing"
  },
  "api/Unity.Entities.InitializationSystemGroup.-ctor.html": {
    "href": "api/Unity.Entities.InitializationSystemGroup.-ctor.html",
    "title": "Constructor InitializationSystemGroup | Entities | 0.17.0-preview.18",
    "keywords": "Constructor InitializationSystemGroup InitializationSystemGroup() Declaration [Preserve] public InitializationSystemGroup()"
  },
  "api/Unity.Entities.InitializationSystemGroup.html": {
    "href": "api/Unity.Entities.InitializationSystemGroup.html",
    "title": "Class InitializationSystemGroup | Entities | 0.17.0-preview.18",
    "keywords": "Class InitializationSystemGroup Inheritance Object ComponentSystemBase ComponentSystem ComponentSystemGroup InitializationSystemGroup Inherited Members ComponentSystemGroup.Systems ComponentSystemGroup.OnCreate() ComponentSystemGroup.OnDestroy() ComponentSystemGroup.AddSystemToUpdateList(ComponentSystemBase) ComponentSystemGroup.RemoveSystemFromUpdateList(ComponentSystemBase) ComponentSystemGroup.SortSystems() ComponentSystemGroup.OnStopRunning() ComponentSystemGroup.FixedRateManager ComponentSystemGroup.OnUpdate() ComponentSystem.PostUpdateCommands ComponentSystem.InitEntityQueryCache(Int32) ComponentSystem.Entities ComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnStartRunning() ComponentSystemBase.ExecutingSystemType ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetComponentTypeHandle<T>(Boolean) ComponentSystemBase.GetDynamicComponentTypeHandle(ComponentType) ComponentSystemBase.GetBufferTypeHandle<T>(Boolean) ComponentSystemBase.GetSharedComponentTypeHandle<T>() ComponentSystemBase.GetEntityTypeHandle() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.TryGetSingleton<T>(T) ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.TryGetSingletonEntity<T>(Entity) ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class InitializationSystemGroup : ComponentSystemGroup Constructors Name Description InitializationSystemGroup() Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Entities.InternalBufferCapacityAttribute.Capacity.html": {
    "href": "api/Unity.Entities.InternalBufferCapacityAttribute.Capacity.html",
    "title": "Field Capacity | Entities | 0.17.0-preview.18",
    "keywords": "Field Capacity The number of elements stored inside the chunk. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public readonly int Capacity Returns Type Description Int32"
  },
  "api/Unity.Entities.InternalBufferCapacityAttribute.-ctor.html": {
    "href": "api/Unity.Entities.InternalBufferCapacityAttribute.-ctor.html",
    "title": "Constructor InternalBufferCapacityAttribute | Entities | 0.17.0-preview.18",
    "keywords": "Constructor InternalBufferCapacityAttribute InternalBufferCapacityAttribute(Int32) The number of elements stored inside the chunk. Declaration public InternalBufferCapacityAttribute(int capacity) Parameters Type Name Description Int32 capacity"
  },
  "api/Unity.Entities.InternalBufferCapacityAttribute.html": {
    "href": "api/Unity.Entities.InternalBufferCapacityAttribute.html",
    "title": "Class InternalBufferCapacityAttribute | Entities | 0.17.0-preview.18",
    "keywords": "Class InternalBufferCapacityAttribute Specifies the maximum number of elements to store inside a chunk. Inheritance Object Attribute InternalBufferCapacityAttribute Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [AttributeUsage(AttributeTargets.Struct)] public class InternalBufferCapacityAttribute : Attribute, _Attribute Remarks Use this attribute on the declaration of your IBufferElementData subtype: [InternalBufferCapacity(10)] public struct FloatBufferElement : IBufferElementData { public float Value; } All DynamicBuffer<T> with this type of element store the specified number of elements inside the chunk along with other component types in the same archetype. When the number of elements in the buffer exceeds this limit, the entire buffer is moved outside the chunk. Constructors Name Description InternalBufferCapacityAttribute(Int32) The number of elements stored inside the chunk. Fields Name Description Capacity The number of elements stored inside the chunk."
  },
  "api/Unity.Entities.InternalCompilerInterface.BurstCompile.html": {
    "href": "api/Unity.Entities.InternalCompilerInterface.BurstCompile.html",
    "title": "Method BurstCompile | Entities | 0.17.0-preview.18",
    "keywords": "Method BurstCompile BurstCompile(InternalCompilerInterface.JobRunWithoutJobSystemDelegate) Declaration public static InternalCompilerInterface.JobRunWithoutJobSystemDelegate BurstCompile(InternalCompilerInterface.JobRunWithoutJobSystemDelegate d) Parameters Type Name Description InternalCompilerInterface.JobRunWithoutJobSystemDelegate d Returns Type Description InternalCompilerInterface.JobRunWithoutJobSystemDelegate BurstCompile(InternalCompilerInterface.JobChunkRunWithoutJobSystemDelegate) Declaration public static InternalCompilerInterface.JobChunkRunWithoutJobSystemDelegate BurstCompile(InternalCompilerInterface.JobChunkRunWithoutJobSystemDelegate d) Parameters Type Name Description InternalCompilerInterface.JobChunkRunWithoutJobSystemDelegate d Returns Type Description InternalCompilerInterface.JobChunkRunWithoutJobSystemDelegate"
  },
  "api/Unity.Entities.InternalCompilerInterface.html": {
    "href": "api/Unity.Entities.InternalCompilerInterface.html",
    "title": "Class InternalCompilerInterface | Entities | 0.17.0-preview.18",
    "keywords": "Class InternalCompilerInterface Inheritance Object InternalCompilerInterface Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class InternalCompilerInterface Methods Name Description BurstCompile(InternalCompilerInterface.JobChunkRunWithoutJobSystemDelegate) BurstCompile(InternalCompilerInterface.JobRunWithoutJobSystemDelegate) RunIJob<T>(ref T, InternalCompilerInterface.JobRunWithoutJobSystemDelegate) RunJobChunk<T>(ref T, EntityQuery, InternalCompilerInterface.JobChunkRunWithoutJobSystemDelegate)"
  },
  "api/Unity.Entities.InternalCompilerInterface.JobChunkRunWithoutJobSystemDelegate.html": {
    "href": "api/Unity.Entities.InternalCompilerInterface.JobChunkRunWithoutJobSystemDelegate.html",
    "title": "Delegate InternalCompilerInterface.JobChunkRunWithoutJobSystemDelegate | Entities | 0.17.0-preview.18",
    "keywords": "Delegate InternalCompilerInterface.JobChunkRunWithoutJobSystemDelegate Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void JobChunkRunWithoutJobSystemDelegate(ArchetypeChunkIterator*iterator, void *job); Parameters Type Name Description ArchetypeChunkIterator * iterator Void * job"
  },
  "api/Unity.Entities.InternalCompilerInterface.JobRunWithoutJobSystemDelegate.html": {
    "href": "api/Unity.Entities.InternalCompilerInterface.JobRunWithoutJobSystemDelegate.html",
    "title": "Delegate InternalCompilerInterface.JobRunWithoutJobSystemDelegate | Entities | 0.17.0-preview.18",
    "keywords": "Delegate InternalCompilerInterface.JobRunWithoutJobSystemDelegate Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void JobRunWithoutJobSystemDelegate(void *job); Parameters Type Name Description Void * job"
  },
  "api/Unity.Entities.InternalCompilerInterface.RunIJob.html": {
    "href": "api/Unity.Entities.InternalCompilerInterface.RunIJob.html",
    "title": "Method RunIJob | Entities | 0.17.0-preview.18",
    "keywords": "Method RunIJob RunIJob<T>(ref T, InternalCompilerInterface.JobRunWithoutJobSystemDelegate) Declaration public static void RunIJob<T>(ref T jobData, InternalCompilerInterface.JobRunWithoutJobSystemDelegate functionPointer) where T : struct, IJob Parameters Type Name Description T jobData InternalCompilerInterface.JobRunWithoutJobSystemDelegate functionPointer Type Parameters Name Description T"
  },
  "api/Unity.Entities.InternalCompilerInterface.RunJobChunk.html": {
    "href": "api/Unity.Entities.InternalCompilerInterface.RunJobChunk.html",
    "title": "Method RunJobChunk | Entities | 0.17.0-preview.18",
    "keywords": "Method RunJobChunk RunJobChunk<T>(ref T, EntityQuery, InternalCompilerInterface.JobChunkRunWithoutJobSystemDelegate) Declaration public static void RunJobChunk<T>(ref T jobData, EntityQuery query, InternalCompilerInterface.JobChunkRunWithoutJobSystemDelegate functionPointer) where T : struct, IJobChunk Parameters Type Name Description T jobData EntityQuery query InternalCompilerInterface.JobChunkRunWithoutJobSystemDelegate functionPointer Type Parameters Name Description T"
  },
  "api/Unity.Entities.IRefCounted.html": {
    "href": "api/Unity.Entities.IRefCounted.html",
    "title": "Interface IRefCounted | Entities | 0.17.0-preview.18",
    "keywords": "Interface IRefCounted Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface IRefCounted Methods Name Description Release() Retain()"
  },
  "api/Unity.Entities.IRefCounted.Release.html": {
    "href": "api/Unity.Entities.IRefCounted.Release.html",
    "title": "Method Release | Entities | 0.17.0-preview.18",
    "keywords": "Method Release Release() Declaration void Release()"
  },
  "api/Unity.Entities.IRefCounted.Retain.html": {
    "href": "api/Unity.Entities.IRefCounted.Retain.html",
    "title": "Method Retain | Entities | 0.17.0-preview.18",
    "keywords": "Method Retain Retain() Declaration void Retain()"
  },
  "api/Unity.Entities.ISharedComponentData.html": {
    "href": "api/Unity.Entities.ISharedComponentData.html",
    "title": "Interface ISharedComponentData | Entities | 0.17.0-preview.18",
    "keywords": "Interface ISharedComponentData An interface for a component type whose value is shared by all entities in the same chunk. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface ISharedComponentData Remarks ISharedComponentData implementations are subject to the same constraints as IComponentData . ISharedComponent implementations must implement IEquatable<T> and GetHashCode() . Note: Currently, the ISharedComponentData interface allows fields having reference types. However, we plan to restrict ISharedComponentData to unmanaged, blittable types only in a future version of the Entities package. When you add a shared component to an EntityArchetype , ECS stores entities assigned the same values of that shared component in the same chunks. Thus, shared components further categorize entities within the same archetype. Use shared components when many entities share the same data values and it is more efficient to process all the entities of a given value together. For example, the RenderMesh shared component (in the Hybrid.Rendering package) defines a set of fields whose values can be shared by many 3D objects. Since all the entities with the same values for the RenderMesh fields are stored in the same chunks, the renderer can efficiently batch the draw calls for those entities based on the shared values. You must set the value of a shared component on the main thread using either the EntityManager or an EntityCommandBuffer . When you change a shared component value, the affected entity is moved to a different chunk. If a chunk already exists with the same values, and has enough room, the entity is moved to that chunk. Otherwise, a new chunk is allocated. Changing a shared component value is a structural change that potentially creates a sync-point in your application. You can find entities with a particular type of shared component using either EntityQuery or EntityQueryBuilder in the same way you select entities with specific types of IComponentData . You can also filter an entity query to select only entities with a specific shared component value using SetSharedComponentFilter<SharedComponent1>(SharedComponent1) . You can filter based on two different shared components. (EntityQueryBuilder does not support filtering queries by shared component value.) Avoid too many shared components and values on the same archetype. Since each combination of values, whether in the same component type or in different shared components, is stored in different chunks, too many combinations can lead to poor chunk utilization. Use the Entity Debugger window in the Unity Editor (menu: Window > Analysis > Entity Debugger ) to monitor chunk utilization. See Shared Component Data for additional information."
  },
  "api/Unity.Entities.ISystemBase.html": {
    "href": "api/Unity.Entities.ISystemBase.html",
    "title": "Interface ISystemBase | Entities | 0.17.0-preview.18",
    "keywords": "Interface ISystemBase Interface implemented by unmanaged component systems. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface ISystemBase Methods Name Description OnCreate(ref SystemState) OnDestroy(ref SystemState) OnUpdate(ref SystemState)"
  },
  "api/Unity.Entities.ISystemBase.OnCreate.html": {
    "href": "api/Unity.Entities.ISystemBase.OnCreate.html",
    "title": "Method OnCreate | Entities | 0.17.0-preview.18",
    "keywords": "Method OnCreate OnCreate(ref SystemState) Declaration void OnCreate(ref SystemState state) Parameters Type Name Description SystemState state"
  },
  "api/Unity.Entities.ISystemBase.OnDestroy.html": {
    "href": "api/Unity.Entities.ISystemBase.OnDestroy.html",
    "title": "Method OnDestroy | Entities | 0.17.0-preview.18",
    "keywords": "Method OnDestroy OnDestroy(ref SystemState) Declaration void OnDestroy(ref SystemState state) Parameters Type Name Description SystemState state"
  },
  "api/Unity.Entities.ISystemBase.OnUpdate.html": {
    "href": "api/Unity.Entities.ISystemBase.OnUpdate.html",
    "title": "Method OnUpdate | Entities | 0.17.0-preview.18",
    "keywords": "Method OnUpdate OnUpdate(ref SystemState) Declaration void OnUpdate(ref SystemState state) Parameters Type Name Description SystemState state"
  },
  "api/Unity.Entities.ISystemStateBufferElementData.html": {
    "href": "api/Unity.Entities.ISystemStateBufferElementData.html",
    "title": "Interface ISystemStateBufferElementData | Entities | 0.17.0-preview.18",
    "keywords": "Interface ISystemStateBufferElementData An interface for a component type that stores system-specific data in a buffer. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface ISystemStateBufferElementData : IBufferElementData See Also ISystemStateComponentData IBufferElementData"
  },
  "api/Unity.Entities.ISystemStateComponentData.html": {
    "href": "api/Unity.Entities.ISystemStateComponentData.html",
    "title": "Interface ISystemStateComponentData | Entities | 0.17.0-preview.18",
    "keywords": "Interface ISystemStateComponentData An interface for a component type that stores system-specific data. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface ISystemStateComponentData : IComponentData Remarks ISystemStateComponentData implementations are subject to the same constraints as IComponentData : they can only contain blittable data types. System state components are specialized components designed to allow systems to store their own stateful data on an entity. The functional difference between a general-purpose component and a system state component is that the presence of a system state component delays entity destruction until the system explicitly removes the component. This delay allows a system to cleanup any state or persistent resources it has created and associated with an entity. The typical pattern for using a system state component is for the system to find new entities by querying for entities with specific archetype, that do not have the component. The system can add a system state component to the entity and then set state values or create resources for the new entity. A system can then detect entity destruction by querying for entities that have the system state component, but not the other components in the original archetype. The system must then cleanup any state or resources and then remove the system state component. The ECS code only fully deletes the entity after the system removes the system state component. See System State Components for additional information."
  },
  "api/Unity.Entities.ISystemStateSharedComponentData.html": {
    "href": "api/Unity.Entities.ISystemStateSharedComponentData.html",
    "title": "Interface ISystemStateSharedComponentData | Entities | 0.17.0-preview.18",
    "keywords": "Interface ISystemStateSharedComponentData An interface for a component type that stores shared system-specific data. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface ISystemStateSharedComponentData : ISharedComponentData See Also ISystemStateComponentData ISharedComponentData"
  },
  "api/Unity.Entities.JobChunkExtensions.html": {
    "href": "api/Unity.Entities.JobChunkExtensions.html",
    "title": "Class JobChunkExtensions | Entities | 0.17.0-preview.18",
    "keywords": "Class JobChunkExtensions Extensions for scheduling and running IJobChunk Jobs. Inheritance Object JobChunkExtensions Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class JobChunkExtensions Methods Name Description Run<T>(T, EntityQuery) Runs the Job immediately on the current thread. RunWithoutJobs<T>(ref T, ref ArchetypeChunkIterator) Runs the job using an ArchetypeChunkIterator instead of the jobs API. Schedule<T>(T, EntityQuery, JobHandle) Adds an IJobChunk instance to the Job scheduler queue for parallel execution. Note: This method is being replaced with use of ScheduleParallel to make non-sequential execution explicit. ScheduleParallel<T>(T, EntityQuery, JobHandle) Adds an IJobChunk instance to the Job scheduler queue for parallel execution. ScheduleSingle<T>(T, EntityQuery, JobHandle) Adds an IJobChunk instance to the Job scheduler queue for sequential (non-parallel) execution."
  },
  "api/Unity.Entities.JobChunkExtensions.Run.html": {
    "href": "api/Unity.Entities.JobChunkExtensions.Run.html",
    "title": "Method Run | Entities | 0.17.0-preview.18",
    "keywords": "Method Run Run<T>(T, EntityQuery) Runs the Job immediately on the current thread. Declaration public static void Run<T>(this T jobData, EntityQuery query) where T : struct, IJobChunk Parameters Type Name Description T jobData An IJobChunk instance. EntityQuery query The query selecting chunks with the necessary components. Type Parameters Name Description T The specific IJobChunk implementation type."
  },
  "api/Unity.Entities.JobChunkExtensions.RunWithoutJobs.html": {
    "href": "api/Unity.Entities.JobChunkExtensions.RunWithoutJobs.html",
    "title": "Method RunWithoutJobs | Entities | 0.17.0-preview.18",
    "keywords": "Method RunWithoutJobs RunWithoutJobs<T>(ref T, ref ArchetypeChunkIterator) Runs the job using an ArchetypeChunkIterator instead of the jobs API. Declaration public static void RunWithoutJobs<T>(this ref T jobData, ref ArchetypeChunkIterator chunkIterator) where T : struct, IJobChunk Parameters Type Name Description T jobData The job to execute. ArchetypeChunkIterator chunkIterator The ArchetypeChunkIterator of the EntityQuery to run over. Type Parameters Name Description T The specific IJobChunk implementation type."
  },
  "api/Unity.Entities.JobChunkExtensions.Schedule.html": {
    "href": "api/Unity.Entities.JobChunkExtensions.Schedule.html",
    "title": "Method Schedule | Entities | 0.17.0-preview.18",
    "keywords": "Method Schedule Schedule<T>(T, EntityQuery, JobHandle) Adds an IJobChunk instance to the Job scheduler queue for parallel execution. Note: This method is being replaced with use of ScheduleParallel to make non-sequential execution explicit. Declaration public static JobHandle Schedule<T>(this T jobData, EntityQuery query, JobHandle dependsOn = default(JobHandle)) where T : struct, IJobChunk Parameters Type Name Description T jobData An IJobChunk instance. EntityQuery query The query selecting chunks with the necessary components. JobHandle dependsOn The handle identifying already scheduled Jobs that could constrain this Job. A Job that writes to a component must run before other Jobs that read or write that component. Jobs that only read the same components can run in parallel. Returns Type Description JobHandle A handle that combines the current Job with previous dependencies identified by the dependsOn parameter. Type Parameters Name Description T The specific IJobChunk implementation type."
  },
  "api/Unity.Entities.JobChunkExtensions.ScheduleParallel.html": {
    "href": "api/Unity.Entities.JobChunkExtensions.ScheduleParallel.html",
    "title": "Method ScheduleParallel | Entities | 0.17.0-preview.18",
    "keywords": "Method ScheduleParallel ScheduleParallel<T>(T, EntityQuery, JobHandle) Adds an IJobChunk instance to the Job scheduler queue for parallel execution. Declaration public static JobHandle ScheduleParallel<T>(this T jobData, EntityQuery query, JobHandle dependsOn = default(JobHandle)) where T : struct, IJobChunk Parameters Type Name Description T jobData An IJobChunk instance. EntityQuery query The query selecting chunks with the necessary components. JobHandle dependsOn The handle identifying already scheduled Jobs that could constrain this Job. A Job that writes to a component must run before other Jobs that read or write that component. Jobs that only read the same components can run in parallel. Returns Type Description JobHandle A handle that combines the current Job with previous dependencies identified by the dependsOn parameter. Type Parameters Name Description T The specific IJobChunk implementation type."
  },
  "api/Unity.Entities.JobChunkExtensions.ScheduleSingle.html": {
    "href": "api/Unity.Entities.JobChunkExtensions.ScheduleSingle.html",
    "title": "Method ScheduleSingle | Entities | 0.17.0-preview.18",
    "keywords": "Method ScheduleSingle ScheduleSingle<T>(T, EntityQuery, JobHandle) Adds an IJobChunk instance to the Job scheduler queue for sequential (non-parallel) execution. Declaration public static JobHandle ScheduleSingle<T>(this T jobData, EntityQuery query, JobHandle dependsOn = default(JobHandle)) where T : struct, IJobChunk Parameters Type Name Description T jobData An IJobChunk instance. EntityQuery query The query selecting chunks with the necessary components. JobHandle dependsOn The handle identifying already scheduled Jobs that could constrain this Job. A Job that writes to a component must run before other Jobs that read or write that component. Jobs that only read the same components can run in parallel. Returns Type Description JobHandle A handle that combines the current Job with previous dependencies identified by the dependsOn parameter. Type Parameters Name Description T The specific IJobChunk implementation type."
  },
  "api/Unity.Entities.JobComponentSystem.Entities.html": {
    "href": "api/Unity.Entities.JobComponentSystem.Entities.html",
    "title": "Property Entities | Entities | 0.17.0-preview.18",
    "keywords": "Property Entities Entities Use Entities.ForEach((ref Translation translation, in Velocity velocity) => { translation.Value += velocity.Value * dt; }).Schedule(inputDependencies); Declaration protected ForEachLambdaJobDescriptionJCS Entities { get; } Property Value Type Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescriptionJCS"
  },
  "api/Unity.Entities.JobComponentSystem.html": {
    "href": "api/Unity.Entities.JobComponentSystem.html",
    "title": "Class JobComponentSystem | Entities | 0.17.0-preview.18",
    "keywords": "Class JobComponentSystem An abstract class to implement in order to create a system that uses ECS-specific Jobs. Inheritance Object ComponentSystemBase JobComponentSystem CompanionGameObjectUpdateTransformSystem CompositeRotationSystem CompositeScaleSystem CopyInitialTransformFromGameObjectSystem CopyTransformFromGameObjectSystem CopyTransformToGameObjectSystem LocalToParentSystem ParentScaleInverseSystem ParentSystem PostRotationEulerSystem RotationEulerSystem TRSToLocalToParentSystem TRSToLocalToWorldSystem WorldToLocalSystem Inherited Members ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnCreate() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.ExecutingSystemType ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetComponentTypeHandle<T>(Boolean) ComponentSystemBase.GetDynamicComponentTypeHandle(ComponentType) ComponentSystemBase.GetBufferTypeHandle<T>(Boolean) ComponentSystemBase.GetSharedComponentTypeHandle<T>() ComponentSystemBase.GetEntityTypeHandle() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.TryGetSingleton<T>(T) ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.TryGetSingletonEntity<T>(Entity) ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public abstract class JobComponentSystem : ComponentSystemBase Remarks Implement a JobComponentSystem subclass for systems that perform their work using Unity.Entities.IJobForEach`1 or IJobChunk . Properties Name Description Entities Use Entities.ForEach((ref Translation translation, in Velocity velocity) => { translation.Value += velocity.Value * dt; }).Schedule(inputDependencies); Job Use Job.WithCode(() => { YourCodeGoesHere(); }).Schedule(inputDependencies); Methods Name Description OnUpdate(JobHandle) Implement OnUpdate to perform the major work of this system. Update() Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type) See Also ComponentSystem"
  },
  "api/Unity.Entities.JobComponentSystem.Job.html": {
    "href": "api/Unity.Entities.JobComponentSystem.Job.html",
    "title": "Property Job | Entities | 0.17.0-preview.18",
    "keywords": "Property Job Job Use Job.WithCode(() => { YourCodeGoesHere(); }).Schedule(inputDependencies); Declaration protected LambdaSingleJobDescriptionJCS Job { get; } Property Value Type Description Unity.Entities.CodeGeneratedJobForEach.LambdaSingleJobDescriptionJCS"
  },
  "api/Unity.Entities.JobComponentSystem.OnUpdate.html": {
    "href": "api/Unity.Entities.JobComponentSystem.OnUpdate.html",
    "title": "Method OnUpdate | Entities | 0.17.0-preview.18",
    "keywords": "Method OnUpdate OnUpdate(JobHandle) Implement OnUpdate to perform the major work of this system. Declaration protected abstract JobHandle OnUpdate(JobHandle inputDeps) Parameters Type Name Description JobHandle inputDeps Existing dependencies for this system. Returns Type Description JobHandle A Job handle that contains the dependencies of the Jobs in this system. Remarks The system invokes OnUpdate once per frame on the main thread when any of this system's EntityQueries match existing entities, or if the system has the AlwaysUpdate attribute. To run a Job, create an instance of the Job struct, assign appropriate values to the struct fields and call one of the Job schedule functions. The system passes any current dependencies between Jobs -- which can include Jobs internal to this system, such as gathering entities or chunks, as well as Jobs external to this system, such as Jobs that write to the components read by this system -- in the inputDeps parameter. Your function must combine the input dependencies with any dependencies of the Jobs created in OnUpdate and return the combined JobHandle object."
  },
  "api/Unity.Entities.JobComponentSystem.Update.html": {
    "href": "api/Unity.Entities.JobComponentSystem.Update.html",
    "title": "Method Update | Entities | 0.17.0-preview.18",
    "keywords": "Method Update Update() Declaration public override sealed void Update() Overrides ComponentSystemBase.Update()"
  },
  "api/Unity.Entities.JobEntityBatchExtensions.html": {
    "href": "api/Unity.Entities.JobEntityBatchExtensions.html",
    "title": "Class JobEntityBatchExtensions | Entities | 0.17.0-preview.18",
    "keywords": "Class JobEntityBatchExtensions Extensions for scheduling and running IJobEntityBatch jobs. Inheritance Object JobEntityBatchExtensions Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class JobEntityBatchExtensions Methods Name Description Run<T>(T, EntityQuery) Runs the job immediately on the current thread. Run<T>(T, EntityQuery, NativeArray<Entity>) Runs the job immediately on the current thread. Schedule<T>(T, EntityQuery, NativeArray<Entity>, JobHandle) Adds an IJobEntityBatch instance to the job scheduler queue for sequential (non-parallel) execution. Schedule<T>(T, EntityQuery, JobHandle) Adds an IJobEntityBatch instance to the job scheduler queue for sequential (non-parallel) execution. ScheduleParallel<T>(T, EntityQuery, Int32, JobHandle) Adds an IJobEntityBatch instance to the job scheduler queue for parallel execution. ScheduleParallel<T>(T, EntityQuery, NativeArray<Entity>, JobHandle) Adds an IJobEntityBatch instance to the job scheduler queue for parallel execution."
  },
  "api/Unity.Entities.JobEntityBatchExtensions.Run.html": {
    "href": "api/Unity.Entities.JobEntityBatchExtensions.Run.html",
    "title": "Method Run | Entities | 0.17.0-preview.18",
    "keywords": "Method Run Run<T>(T, EntityQuery) Runs the job immediately on the current thread. Declaration public static void Run<T>(this T jobData, EntityQuery query) where T : struct, IJobEntityBatch Parameters Type Name Description T jobData An IJobEntityBatch instance. EntityQuery query The query selecting chunks with the necessary components. Type Parameters Name Description T The specific IJobEntityBatch implementation type. Remarks This scheduling variant processes each matching chunk as a single batch. All chunks execute sequentially on the current thread. Run<T>(T, EntityQuery, NativeArray<Entity>) Runs the job immediately on the current thread. Declaration public static void Run<T>(this T jobData, EntityQuery query, NativeArray<Entity> limitToEntityArray) where T : struct, IJobEntityBatch Parameters Type Name Description T jobData An IJobEntityBatch instance. EntityQuery query The query selecting chunks with the necessary components. NativeArray < Entity > limitToEntityArray A list of entities to limit execution to. Only entities in the list will be processed. Type Parameters Name Description T The specific IJobEntityBatch implementation type. Remarks This scheduling variant processes each batch found in the input array. All batches are processed sequentially on the current thread."
  },
  "api/Unity.Entities.JobEntityBatchExtensions.Schedule.html": {
    "href": "api/Unity.Entities.JobEntityBatchExtensions.Schedule.html",
    "title": "Method Schedule | Entities | 0.17.0-preview.18",
    "keywords": "Method Schedule Schedule<T>(T, EntityQuery, JobHandle) Adds an IJobEntityBatch instance to the job scheduler queue for sequential (non-parallel) execution. Declaration public static JobHandle Schedule<T>(this T jobData, EntityQuery query, JobHandle dependsOn = default(JobHandle)) where T : struct, IJobEntityBatch Parameters Type Name Description T jobData An IJobEntityBatch instance. EntityQuery query The query selecting chunks with the necessary components. JobHandle dependsOn The handle identifying already scheduled jobs that could constrain this job. A job that writes to a component cannot run in parallel with other jobs that read or write that component. Jobs that only read the same components can run in parallel. Returns Type Description JobHandle A handle that combines the current Job with previous dependencies identified by the dependsOn parameter. Type Parameters Name Description T The specific IJobEntityBatch implementation type. Remarks This scheduling variant processes each matching chunk as a single batch. All chunks execute sequentially. Schedule<T>(T, EntityQuery, NativeArray<Entity>, JobHandle) Adds an IJobEntityBatch instance to the job scheduler queue for sequential (non-parallel) execution. Declaration public static JobHandle Schedule<T>(this T jobData, EntityQuery query, NativeArray<Entity> limitToEntityArray, JobHandle dependsOn = default(JobHandle)) where T : struct, IJobEntityBatch Parameters Type Name Description T jobData An IJobEntityBatch instance. EntityQuery query The query selecting chunks with the necessary components. NativeArray < Entity > limitToEntityArray A list of entities to limit execution to. Only entities in the list will be processed. JobHandle dependsOn The handle identifying already scheduled jobs that could constrain this job. A job that writes to a component cannot run in parallel with other jobs that read or write that component. Jobs that only read the same components can run in parallel. Returns Type Description JobHandle A handle that combines the current Job with previous dependencies identified by the dependsOn parameter. Type Parameters Name Description T The specific IJobEntityBatch implementation type. Remarks This scheduling variant processes each batch found in the entity array. All batches are processed sequentially."
  },
  "api/Unity.Entities.JobEntityBatchExtensions.ScheduleParallel.html": {
    "href": "api/Unity.Entities.JobEntityBatchExtensions.ScheduleParallel.html",
    "title": "Method ScheduleParallel | Entities | 0.17.0-preview.18",
    "keywords": "Method ScheduleParallel ScheduleParallel<T>(T, EntityQuery, Int32, JobHandle) Adds an IJobEntityBatch instance to the job scheduler queue for parallel execution. Declaration public static JobHandle ScheduleParallel<T>(this T jobData, EntityQuery query, int batchesPerChunk = 1, JobHandle dependsOn = default(JobHandle)) where T : struct, IJobEntityBatch Parameters Type Name Description T jobData An IJobEntityBatch instance. EntityQuery query The query selecting chunks with the necessary components. Int32 batchesPerChunk JobHandle dependsOn The handle identifying already scheduled jobs that could constrain this job. A job that writes to a component cannot run in parallel with other jobs that read or write that component. Jobs that only read the same components can run in parallel. Returns Type Description JobHandle A handle that combines the current Job with previous dependencies identified by the dependsOn parameter. Type Parameters Name Description T The specific IJobEntityBatch implementation type. Remarks This scheduling variant processes each matching chunk as a single batch. Each chunk can execute in parallel. This scheduling method is equivalent to calling ScheduleParallel<T>(T, EntityQuery, Int32, JobHandle) with the batchesPerChunk parameter set to 1. ScheduleParallel<T>(T, EntityQuery, NativeArray<Entity>, JobHandle) Adds an IJobEntityBatch instance to the job scheduler queue for parallel execution. Declaration public static JobHandle ScheduleParallel<T>(this T jobData, EntityQuery query, NativeArray<Entity> limitToEntityArray, JobHandle dependsOn = default(JobHandle)) where T : struct, IJobEntityBatch Parameters Type Name Description T jobData An IJobEntityBatch instance. EntityQuery query The query selecting chunks with the necessary components. NativeArray < Entity > limitToEntityArray A list of entities to limit execution to. Only entities in the list will be processed. JobHandle dependsOn The handle identifying already scheduled jobs that could constrain this job. A job that writes to a component cannot run in parallel with other jobs that read or write that component. Jobs that only read the same components can run in parallel. Returns Type Description JobHandle A handle that combines the current Job with previous dependencies identified by the dependsOn parameter. Type Parameters Name Description T The specific IJobEntityBatch implementation type. Remarks This scheduling variant processes each batch found in the entity array. Each batch can execute in parallel."
  },
  "api/Unity.Entities.JobEntityBatchIndexExtensions.html": {
    "href": "api/Unity.Entities.JobEntityBatchIndexExtensions.html",
    "title": "Class JobEntityBatchIndexExtensions | Entities | 0.17.0-preview.18",
    "keywords": "Class JobEntityBatchIndexExtensions Extensions for scheduling and running IJobEntityBatchWithIndex jobs. Inheritance Object JobEntityBatchIndexExtensions Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class JobEntityBatchIndexExtensions Methods Name Description Run<T>(T, EntityQuery) Runs the job immediately on the current thread. Run<T>(T, EntityQuery, NativeArray<Entity>) Runs the job immediately on the current thread. Schedule<T>(T, EntityQuery, NativeArray<Entity>, JobHandle) Adds an IJobEntityBatchWithIndex instance to the job scheduler queue for sequential (non-parallel) execution. Schedule<T>(T, EntityQuery, JobHandle) Adds an IJobEntityBatchWithIndex instance to the job scheduler queue for sequential (non-parallel) execution. ScheduleParallel<T>(T, EntityQuery, Int32, JobHandle) Adds an IJobEntityBatchWithIndex instance to the job scheduler queue for parallel execution. ScheduleParallel<T>(T, EntityQuery, NativeArray<Entity>, JobHandle) Adds an IJobEntityBatchWithIndex instance to the job scheduler queue for parallel execution."
  },
  "api/Unity.Entities.JobEntityBatchIndexExtensions.Run.html": {
    "href": "api/Unity.Entities.JobEntityBatchIndexExtensions.Run.html",
    "title": "Method Run | Entities | 0.17.0-preview.18",
    "keywords": "Method Run Run<T>(T, EntityQuery) Runs the job immediately on the current thread. Declaration public static void Run<T>(this T jobData, EntityQuery query) where T : struct, IJobEntityBatchWithIndex Parameters Type Name Description T jobData An IJobEntityBatchWithIndex instance. EntityQuery query The query selecting chunks with the necessary components. Type Parameters Name Description T The specific IJobEntityBatchWithIndex implementation type. Remarks This scheduling variant processes each matching chunk as a single batch. All chunks execute sequentially on the current thread. Run<T>(T, EntityQuery, NativeArray<Entity>) Runs the job immediately on the current thread. Declaration public static void Run<T>(this T jobData, EntityQuery query, NativeArray<Entity> limitToEntityArray) where T : struct, IJobEntityBatchWithIndex Parameters Type Name Description T jobData An IJobEntityBatchWithIndex instance. EntityQuery query The query selecting chunks with the necessary components. NativeArray < Entity > limitToEntityArray A list of entities to limit execution to. Only entities in the list will be processed. Type Parameters Name Description T The specific IJobEntityBatchWithIndex implementation type. Remarks This scheduling variant processes each batch found in the input array. All batches are processed sequentially on the current thread."
  },
  "api/Unity.Entities.JobEntityBatchIndexExtensions.Schedule.html": {
    "href": "api/Unity.Entities.JobEntityBatchIndexExtensions.Schedule.html",
    "title": "Method Schedule | Entities | 0.17.0-preview.18",
    "keywords": "Method Schedule Schedule<T>(T, EntityQuery, JobHandle) Adds an IJobEntityBatchWithIndex instance to the job scheduler queue for sequential (non-parallel) execution. Declaration public static JobHandle Schedule<T>(this T jobData, EntityQuery query, JobHandle dependsOn = default(JobHandle)) where T : struct, IJobEntityBatchWithIndex Parameters Type Name Description T jobData An IJobEntityBatchWithIndex instance. EntityQuery query The query selecting chunks with the necessary components. JobHandle dependsOn The handle identifying already scheduled jobs that could constrain this job. A job that writes to a component cannot run in parallel with other jobs that read or write that component. Jobs that only read the same components can run in parallel. Returns Type Description JobHandle A handle that combines the current Job with previous dependencies identified by the dependsOn parameter. Type Parameters Name Description T The specific IJobEntityBatchWithIndex implementation type. Remarks This scheduling variant processes each matching chunk as a single batch. All chunks execute sequentially. Schedule<T>(T, EntityQuery, NativeArray<Entity>, JobHandle) Adds an IJobEntityBatchWithIndex instance to the job scheduler queue for sequential (non-parallel) execution. Declaration public static JobHandle Schedule<T>(this T jobData, EntityQuery query, NativeArray<Entity> limitToEntityArray, JobHandle dependsOn = default(JobHandle)) where T : struct, IJobEntityBatchWithIndex Parameters Type Name Description T jobData An IJobEntityBatchWithIndex instance. EntityQuery query The query selecting chunks with the necessary components. NativeArray < Entity > limitToEntityArray A list of entities to limit execution to. Only entities in the list will be processed. JobHandle dependsOn The handle identifying already scheduled jobs that could constrain this job. A job that writes to a component cannot run in parallel with other jobs that read or write that component. Jobs that only read the same components can run in parallel. Returns Type Description JobHandle A handle that combines the current Job with previous dependencies identified by the dependsOn parameter. Type Parameters Name Description T The specific IJobEntityBatchWithIndex implementation type. Remarks This scheduling variant processes each batch found in the entity array. All batches are processed sequentially."
  },
  "api/Unity.Entities.JobEntityBatchIndexExtensions.ScheduleParallel.html": {
    "href": "api/Unity.Entities.JobEntityBatchIndexExtensions.ScheduleParallel.html",
    "title": "Method ScheduleParallel | Entities | 0.17.0-preview.18",
    "keywords": "Method ScheduleParallel ScheduleParallel<T>(T, EntityQuery, Int32, JobHandle) Adds an IJobEntityBatchWithIndex instance to the job scheduler queue for parallel execution. Declaration public static JobHandle ScheduleParallel<T>(this T jobData, EntityQuery query, int batchesPerChunk = 1, JobHandle dependsOn = default(JobHandle)) where T : struct, IJobEntityBatchWithIndex Parameters Type Name Description T jobData An IJobEntityBatchWithIndex instance. EntityQuery query The query selecting chunks with the necessary components. Int32 batchesPerChunk JobHandle dependsOn The handle identifying already scheduled jobs that could constrain this job. A job that writes to a component cannot run in parallel with other jobs that read or write that component. Jobs that only read the same components can run in parallel. Returns Type Description JobHandle A handle that combines the current Job with previous dependencies identified by the dependsOn parameter. Type Parameters Name Description T The specific IJobEntityBatchWithIndex implementation type. Remarks This scheduling variant processes each matching chunk as a single batch. Each chunk can execute in parallel. This scheduling method is equivalent to calling ScheduleParallel<T>(T, EntityQuery, Int32, JobHandle) with the batchesPerChunk parameter set to 1. ScheduleParallel<T>(T, EntityQuery, NativeArray<Entity>, JobHandle) Adds an IJobEntityBatchWithIndex instance to the job scheduler queue for parallel execution. Declaration public static JobHandle ScheduleParallel<T>(this T jobData, EntityQuery query, NativeArray<Entity> limitToEntityArray, JobHandle dependsOn = default(JobHandle)) where T : struct, IJobEntityBatchWithIndex Parameters Type Name Description T jobData An IJobEntityBatchWithIndex instance. EntityQuery query The query selecting chunks with the necessary components. NativeArray < Entity > limitToEntityArray A list of entities to limit execution to. Only entities in the list will be processed. JobHandle dependsOn The handle identifying already scheduled jobs that could constrain this job. A job that writes to a component cannot run in parallel with other jobs that read or write that component. Jobs that only read the same components can run in parallel. Returns Type Description JobHandle A handle that combines the current Job with previous dependencies identified by the dependsOn parameter. Type Parameters Name Description T The specific IJobEntityBatchWithIndex implementation type. Remarks This scheduling variant processes each batch found in the entity array. Each batch can execute in parallel."
  },
  "api/Unity.Entities.JobForEachExtensions.CalculateEntityCount.html": {
    "href": "api/Unity.Entities.JobForEachExtensions.CalculateEntityCount.html",
    "title": "Method CalculateEntityCount | Entities | 0.17.0-preview.18",
    "keywords": "Method CalculateEntityCount CalculateEntityCount<T>(T, ComponentSystemBase) Declaration public static int CalculateEntityCount<T>(this T jobData, ComponentSystemBase system) where T : struct, JobForEachExtensions.IBaseJobForEach Parameters Type Name Description T jobData ComponentSystemBase system Returns Type Description Int32 Type Parameters Name Description T"
  },
  "api/Unity.Entities.JobForEachExtensions.GetEntityQueryForIJobForEach.html": {
    "href": "api/Unity.Entities.JobForEachExtensions.GetEntityQueryForIJobForEach.html",
    "title": "Method GetEntityQueryForIJobForEach | Entities | 0.17.0-preview.18",
    "keywords": "Method GetEntityQueryForIJobForEach GetEntityQueryForIJobForEach(ComponentSystemBase, Type) Declaration public static EntityQuery GetEntityQueryForIJobForEach(this ComponentSystemBase system, Type jobType) Parameters Type Name Description ComponentSystemBase system Type jobType Returns Type Description EntityQuery"
  },
  "api/Unity.Entities.JobForEachExtensions.html": {
    "href": "api/Unity.Entities.JobForEachExtensions.html",
    "title": "Class JobForEachExtensions | Entities | 0.17.0-preview.18",
    "keywords": "Class JobForEachExtensions Inheritance Object JobForEachExtensions Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class JobForEachExtensions Methods Name Description CalculateEntityCount<T>(T, ComponentSystemBase) GetEntityQueryForIJobForEach(ComponentSystemBase, Type) PrepareEntityQuery<T>(T, ComponentSystemBase) Run<T>(T, ComponentSystemBase, JobHandle) Run<T>(T, EntityQuery, JobHandle) Schedule<T>(T, ComponentSystemBase, JobHandle) Schedule<T>(T, EntityQuery, JobHandle) ScheduleSingle<T>(T, ComponentSystemBase, JobHandle) ScheduleSingle<T>(T, EntityQuery, JobHandle)"
  },
  "api/Unity.Entities.JobForEachExtensions.IBaseJobForEach.html": {
    "href": "api/Unity.Entities.JobForEachExtensions.IBaseJobForEach.html",
    "title": "Interface JobForEachExtensions.IBaseJobForEach | Entities | 0.17.0-preview.18",
    "keywords": "Interface JobForEachExtensions.IBaseJobForEach Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface IBaseJobForEach"
  },
  "api/Unity.Entities.JobForEachExtensions.PrepareEntityQuery.html": {
    "href": "api/Unity.Entities.JobForEachExtensions.PrepareEntityQuery.html",
    "title": "Method PrepareEntityQuery | Entities | 0.17.0-preview.18",
    "keywords": "Method PrepareEntityQuery PrepareEntityQuery<T>(T, ComponentSystemBase) Declaration public static void PrepareEntityQuery<T>(this T jobData, ComponentSystemBase system) where T : struct, JobForEachExtensions.IBaseJobForEach Parameters Type Name Description T jobData ComponentSystemBase system Type Parameters Name Description T"
  },
  "api/Unity.Entities.JobForEachExtensions.Run.html": {
    "href": "api/Unity.Entities.JobForEachExtensions.Run.html",
    "title": "Method Run | Entities | 0.17.0-preview.18",
    "keywords": "Method Run Run<T>(T, ComponentSystemBase, JobHandle) Declaration public static JobHandle Run<T>(this T jobData, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle)) where T : struct, JobForEachExtensions.IBaseJobForEach Parameters Type Name Description T jobData ComponentSystemBase system JobHandle dependsOn Returns Type Description JobHandle Type Parameters Name Description T Run<T>(T, EntityQuery, JobHandle) Declaration public static JobHandle Run<T>(this T jobData, EntityQuery query, JobHandle dependsOn = default(JobHandle)) where T : struct, JobForEachExtensions.IBaseJobForEach Parameters Type Name Description T jobData EntityQuery query JobHandle dependsOn Returns Type Description JobHandle Type Parameters Name Description T"
  },
  "api/Unity.Entities.JobForEachExtensions.Schedule.html": {
    "href": "api/Unity.Entities.JobForEachExtensions.Schedule.html",
    "title": "Method Schedule | Entities | 0.17.0-preview.18",
    "keywords": "Method Schedule Schedule<T>(T, ComponentSystemBase, JobHandle) Declaration public static JobHandle Schedule<T>(this T jobData, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle)) where T : struct, JobForEachExtensions.IBaseJobForEach Parameters Type Name Description T jobData ComponentSystemBase system JobHandle dependsOn Returns Type Description JobHandle Type Parameters Name Description T Schedule<T>(T, EntityQuery, JobHandle) Declaration public static JobHandle Schedule<T>(this T jobData, EntityQuery query, JobHandle dependsOn = default(JobHandle)) where T : struct, JobForEachExtensions.IBaseJobForEach Parameters Type Name Description T jobData EntityQuery query JobHandle dependsOn Returns Type Description JobHandle Type Parameters Name Description T"
  },
  "api/Unity.Entities.JobForEachExtensions.ScheduleSingle.html": {
    "href": "api/Unity.Entities.JobForEachExtensions.ScheduleSingle.html",
    "title": "Method ScheduleSingle | Entities | 0.17.0-preview.18",
    "keywords": "Method ScheduleSingle ScheduleSingle<T>(T, ComponentSystemBase, JobHandle) Declaration public static JobHandle ScheduleSingle<T>(this T jobData, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle)) where T : struct, JobForEachExtensions.IBaseJobForEach Parameters Type Name Description T jobData ComponentSystemBase system JobHandle dependsOn Returns Type Description JobHandle Type Parameters Name Description T ScheduleSingle<T>(T, EntityQuery, JobHandle) Declaration public static JobHandle ScheduleSingle<T>(this T jobData, EntityQuery query, JobHandle dependsOn = default(JobHandle)) where T : struct, JobForEachExtensions.IBaseJobForEach Parameters Type Name Description T jobData EntityQuery query JobHandle dependsOn Returns Type Description JobHandle Type Parameters Name Description T"
  },
  "api/Unity.Entities.LambdaJobChunkDescription_SetSharedComponent.html": {
    "href": "api/Unity.Entities.LambdaJobChunkDescription_SetSharedComponent.html",
    "title": "Class LambdaJobChunkDescription_SetSharedComponent | Entities | 0.17.0-preview.18",
    "keywords": "Class LambdaJobChunkDescription_SetSharedComponent Inheritance Object LambdaJobChunkDescription_SetSharedComponent Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class LambdaJobChunkDescription_SetSharedComponent Methods Name Description SetSharedComponentFilterOnQuery<T>(LambdaJobChunkDescription, T, EntityQuery)"
  },
  "api/Unity.Entities.LambdaJobChunkDescription_SetSharedComponent.SetSharedComponentFilterOnQuery.html": {
    "href": "api/Unity.Entities.LambdaJobChunkDescription_SetSharedComponent.SetSharedComponentFilterOnQuery.html",
    "title": "Method SetSharedComponentFilterOnQuery | Entities | 0.17.0-preview.18",
    "keywords": "Method SetSharedComponentFilterOnQuery SetSharedComponentFilterOnQuery<T>(LambdaJobChunkDescription, T, EntityQuery) Declaration public static LambdaJobChunkDescription SetSharedComponentFilterOnQuery<T>(LambdaJobChunkDescription description, T sharedComponent, EntityQuery query) where T : struct, ISharedComponentData Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription description T sharedComponent EntityQuery query Returns Type Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription Type Parameters Name Description T"
  },
  "api/Unity.Entities.LambdaJobChunkDescriptionConstructionMethods.ForEach.html": {
    "href": "api/Unity.Entities.LambdaJobChunkDescriptionConstructionMethods.ForEach.html",
    "title": "Method ForEach | Entities | 0.17.0-preview.18",
    "keywords": "Method ForEach ForEach(LambdaJobChunkDescription, LambdaJobChunkDescriptionConstructionMethods.JobChunkDelegate) Declaration public static LambdaJobChunkDescription ForEach(this LambdaJobChunkDescription description, LambdaJobChunkDescriptionConstructionMethods.JobChunkDelegate code) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription description LambdaJobChunkDescriptionConstructionMethods.JobChunkDelegate code Returns Type Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription"
  },
  "api/Unity.Entities.LambdaJobChunkDescriptionConstructionMethods.html": {
    "href": "api/Unity.Entities.LambdaJobChunkDescriptionConstructionMethods.html",
    "title": "Class LambdaJobChunkDescriptionConstructionMethods | Entities | 0.17.0-preview.18",
    "keywords": "Class LambdaJobChunkDescriptionConstructionMethods Inheritance Object LambdaJobChunkDescriptionConstructionMethods Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class LambdaJobChunkDescriptionConstructionMethods Methods Name Description ForEach(LambdaJobChunkDescription, LambdaJobChunkDescriptionConstructionMethods.JobChunkDelegate)"
  },
  "api/Unity.Entities.LambdaJobChunkDescriptionConstructionMethods.JobChunkDelegate.html": {
    "href": "api/Unity.Entities.LambdaJobChunkDescriptionConstructionMethods.JobChunkDelegate.html",
    "title": "Delegate LambdaJobChunkDescriptionConstructionMethods.JobChunkDelegate | Entities | 0.17.0-preview.18",
    "keywords": "Delegate LambdaJobChunkDescriptionConstructionMethods.JobChunkDelegate Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void JobChunkDelegate(ArchetypeChunk chunk, int chunkIndex, int queryIndexOfFirstEntityInChunk); Parameters Type Name Description ArchetypeChunk chunk Int32 chunkIndex Int32 queryIndexOfFirstEntityInChunk"
  },
  "api/Unity.Entities.LambdaJobDescriptionConstructionMethods.html": {
    "href": "api/Unity.Entities.LambdaJobDescriptionConstructionMethods.html",
    "title": "Class LambdaJobDescriptionConstructionMethods | Entities | 0.17.0-preview.18",
    "keywords": "Class LambdaJobDescriptionConstructionMethods Inheritance Object LambdaJobDescriptionConstructionMethods Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class LambdaJobDescriptionConstructionMethods Methods Name Description WithBurst<TDescription>(TDescription, FloatMode, FloatPrecision, Boolean) WithDisposeOnCompletion<TDescription, TCapturedVariableType>(TDescription, TCapturedVariableType) WithName<TDescription>(TDescription, String) WithNativeDisableContainerSafetyRestriction<TDescription, TCapturedVariableType>(TDescription, TCapturedVariableType) WithNativeDisableParallelForRestriction<TDescription, TCapturedVariableType>(TDescription, TCapturedVariableType) WithNativeDisableUnsafePtrRestriction<TDescription, TCapturedVariableType>(TDescription, TCapturedVariableType*) WithoutBurst<TDescription>(TDescription) WithReadOnly<TDescription, TCapturedVariableType>(TDescription, TCapturedVariableType) WithStructuralChanges<TDescription>(TDescription)"
  },
  "api/Unity.Entities.LambdaJobDescriptionConstructionMethods.WithBurst.html": {
    "href": "api/Unity.Entities.LambdaJobDescriptionConstructionMethods.WithBurst.html",
    "title": "Method WithBurst | Entities | 0.17.0-preview.18",
    "keywords": "Method WithBurst WithBurst<TDescription>(TDescription, FloatMode, FloatPrecision, Boolean) Declaration public static TDescription WithBurst<TDescription>(this TDescription description, FloatMode floatMode = null, FloatPrecision floatPrecision = null, bool synchronousCompilation = false) where TDescription : ILambdaJobDescription Parameters Type Name Description TDescription description FloatMode floatMode FloatPrecision floatPrecision Boolean synchronousCompilation Returns Type Description TDescription Type Parameters Name Description TDescription"
  },
  "api/Unity.Entities.LambdaJobDescriptionConstructionMethods.WithDisposeOnCompletion.html": {
    "href": "api/Unity.Entities.LambdaJobDescriptionConstructionMethods.WithDisposeOnCompletion.html",
    "title": "Method WithDisposeOnCompletion | Entities | 0.17.0-preview.18",
    "keywords": "Method WithDisposeOnCompletion WithDisposeOnCompletion<TDescription, TCapturedVariableType>(TDescription, TCapturedVariableType) Declaration public static TDescription WithDisposeOnCompletion<TDescription, TCapturedVariableType>(this TDescription description, TCapturedVariableType capturedVariable) where TDescription : ILambdaJobDescription Parameters Type Name Description TDescription description TCapturedVariableType capturedVariable Returns Type Description TDescription Type Parameters Name Description TDescription TCapturedVariableType"
  },
  "api/Unity.Entities.LambdaJobDescriptionConstructionMethods.WithName.html": {
    "href": "api/Unity.Entities.LambdaJobDescriptionConstructionMethods.WithName.html",
    "title": "Method WithName | Entities | 0.17.0-preview.18",
    "keywords": "Method WithName WithName<TDescription>(TDescription, String) Declaration public static TDescription WithName<TDescription>(this TDescription description, string name) where TDescription : ILambdaJobDescription Parameters Type Name Description TDescription description String name Returns Type Description TDescription Type Parameters Name Description TDescription"
  },
  "api/Unity.Entities.LambdaJobDescriptionConstructionMethods.WithNativeDisableContainerSafetyRestriction.html": {
    "href": "api/Unity.Entities.LambdaJobDescriptionConstructionMethods.WithNativeDisableContainerSafetyRestriction.html",
    "title": "Method WithNativeDisableContainerSafetyRestriction | Entities | 0.17.0-preview.18",
    "keywords": "Method WithNativeDisableContainerSafetyRestriction WithNativeDisableContainerSafetyRestriction<TDescription, TCapturedVariableType>(TDescription, TCapturedVariableType) Declaration public static TDescription WithNativeDisableContainerSafetyRestriction<TDescription, TCapturedVariableType>(this TDescription description, TCapturedVariableType capturedVariable) where TDescription : ILambdaJobDescription Parameters Type Name Description TDescription description TCapturedVariableType capturedVariable Returns Type Description TDescription Type Parameters Name Description TDescription TCapturedVariableType"
  },
  "api/Unity.Entities.LambdaJobDescriptionConstructionMethods.WithNativeDisableParallelForRestriction.html": {
    "href": "api/Unity.Entities.LambdaJobDescriptionConstructionMethods.WithNativeDisableParallelForRestriction.html",
    "title": "Method WithNativeDisableParallelForRestriction | Entities | 0.17.0-preview.18",
    "keywords": "Method WithNativeDisableParallelForRestriction WithNativeDisableParallelForRestriction<TDescription, TCapturedVariableType>(TDescription, TCapturedVariableType) Declaration public static TDescription WithNativeDisableParallelForRestriction<TDescription, TCapturedVariableType>(this TDescription description, TCapturedVariableType capturedVariable) where TDescription : ILambdaJobDescription Parameters Type Name Description TDescription description TCapturedVariableType capturedVariable Returns Type Description TDescription Type Parameters Name Description TDescription TCapturedVariableType"
  },
  "api/Unity.Entities.LambdaJobDescriptionConstructionMethods.WithNativeDisableUnsafePtrRestriction.html": {
    "href": "api/Unity.Entities.LambdaJobDescriptionConstructionMethods.WithNativeDisableUnsafePtrRestriction.html",
    "title": "Method WithNativeDisableUnsafePtrRestriction | Entities | 0.17.0-preview.18",
    "keywords": "Method WithNativeDisableUnsafePtrRestriction WithNativeDisableUnsafePtrRestriction<TDescription, TCapturedVariableType>(TDescription, TCapturedVariableType*) Declaration public static TDescription WithNativeDisableUnsafePtrRestriction<TDescription, TCapturedVariableType>(this TDescription description, TCapturedVariableType*capturedVariable) where TDescription : ILambdaJobDescription where TCapturedVariableType : struct Parameters Type Name Description TDescription description TCapturedVariableType* capturedVariable Returns Type Description TDescription Type Parameters Name Description TDescription TCapturedVariableType"
  },
  "api/Unity.Entities.LambdaJobDescriptionConstructionMethods.WithoutBurst.html": {
    "href": "api/Unity.Entities.LambdaJobDescriptionConstructionMethods.WithoutBurst.html",
    "title": "Method WithoutBurst | Entities | 0.17.0-preview.18",
    "keywords": "Method WithoutBurst WithoutBurst<TDescription>(TDescription) Declaration public static TDescription WithoutBurst<TDescription>(this TDescription description) where TDescription : ILambdaJobDescription Parameters Type Name Description TDescription description Returns Type Description TDescription Type Parameters Name Description TDescription"
  },
  "api/Unity.Entities.LambdaJobDescriptionConstructionMethods.WithReadOnly.html": {
    "href": "api/Unity.Entities.LambdaJobDescriptionConstructionMethods.WithReadOnly.html",
    "title": "Method WithReadOnly | Entities | 0.17.0-preview.18",
    "keywords": "Method WithReadOnly WithReadOnly<TDescription, TCapturedVariableType>(TDescription, TCapturedVariableType) Declaration public static TDescription WithReadOnly<TDescription, TCapturedVariableType>(this TDescription description, TCapturedVariableType capturedVariable) where TDescription : ILambdaJobDescription Parameters Type Name Description TDescription description TCapturedVariableType capturedVariable Returns Type Description TDescription Type Parameters Name Description TDescription TCapturedVariableType"
  },
  "api/Unity.Entities.LambdaJobDescriptionConstructionMethods.WithStructuralChanges.html": {
    "href": "api/Unity.Entities.LambdaJobDescriptionConstructionMethods.WithStructuralChanges.html",
    "title": "Method WithStructuralChanges | Entities | 0.17.0-preview.18",
    "keywords": "Method WithStructuralChanges WithStructuralChanges<TDescription>(TDescription) Declaration public static TDescription WithStructuralChanges<TDescription>(this TDescription description) where TDescription : ILambdaJobDescription Parameters Type Name Description TDescription description Returns Type Description TDescription Type Parameters Name Description TDescription"
  },
  "api/Unity.Entities.LambdaJobDescriptionExecutionMethods.html": {
    "href": "api/Unity.Entities.LambdaJobDescriptionExecutionMethods.html",
    "title": "Class LambdaJobDescriptionExecutionMethods | Entities | 0.17.0-preview.18",
    "keywords": "Class LambdaJobDescriptionExecutionMethods Inheritance Object LambdaJobDescriptionExecutionMethods Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class LambdaJobDescriptionExecutionMethods Methods Name Description Run<TDescription>(TDescription) Schedule<TDescription>(TDescription) Schedule<TDescription>(TDescription, JobHandle) ScheduleParallel<TDescription>(TDescription) ScheduleParallel<TDescription>(TDescription, JobHandle)"
  },
  "api/Unity.Entities.LambdaJobDescriptionExecutionMethods.Run.html": {
    "href": "api/Unity.Entities.LambdaJobDescriptionExecutionMethods.Run.html",
    "title": "Method Run | Entities | 0.17.0-preview.18",
    "keywords": "Method Run Run<TDescription>(TDescription) Declaration public static void Run<TDescription>(this TDescription description) where TDescription : ILambdaJobExecutionDescription Parameters Type Name Description TDescription description Type Parameters Name Description TDescription"
  },
  "api/Unity.Entities.LambdaJobDescriptionExecutionMethods.Schedule.html": {
    "href": "api/Unity.Entities.LambdaJobDescriptionExecutionMethods.Schedule.html",
    "title": "Method Schedule | Entities | 0.17.0-preview.18",
    "keywords": "Method Schedule Schedule<TDescription>(TDescription, JobHandle) Declaration public static JobHandle Schedule<TDescription>(this TDescription description, JobHandle dependency) where TDescription : ILambdaJobExecutionDescription Parameters Type Name Description TDescription description JobHandle dependency Returns Type Description JobHandle Type Parameters Name Description TDescription Schedule<TDescription>(TDescription) Declaration public static void Schedule<TDescription>(this TDescription description) where TDescription : ILambdaJobExecutionDescription Parameters Type Name Description TDescription description Type Parameters Name Description TDescription"
  },
  "api/Unity.Entities.LambdaJobDescriptionExecutionMethods.ScheduleParallel.html": {
    "href": "api/Unity.Entities.LambdaJobDescriptionExecutionMethods.ScheduleParallel.html",
    "title": "Method ScheduleParallel | Entities | 0.17.0-preview.18",
    "keywords": "Method ScheduleParallel ScheduleParallel<TDescription>(TDescription, JobHandle) Declaration public static JobHandle ScheduleParallel<TDescription>(this TDescription description, JobHandle dependency) where TDescription : ILambdaJobExecutionDescription Parameters Type Name Description TDescription description JobHandle dependency Returns Type Description JobHandle Type Parameters Name Description TDescription ScheduleParallel<TDescription>(TDescription) Declaration public static void ScheduleParallel<TDescription>(this TDescription description) where TDescription : ILambdaJobExecutionDescription Parameters Type Name Description TDescription description Type Parameters Name Description TDescription"
  },
  "api/Unity.Entities.LambdaJobDescriptionExecutionMethodsJCS.html": {
    "href": "api/Unity.Entities.LambdaJobDescriptionExecutionMethodsJCS.html",
    "title": "Class LambdaJobDescriptionExecutionMethodsJCS | Entities | 0.17.0-preview.18",
    "keywords": "Class LambdaJobDescriptionExecutionMethodsJCS Inheritance Object LambdaJobDescriptionExecutionMethodsJCS Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class LambdaJobDescriptionExecutionMethodsJCS Methods Name Description Run<TDescription>(TDescription) Schedule<TDescription>(TDescription, JobHandle)"
  },
  "api/Unity.Entities.LambdaJobDescriptionExecutionMethodsJCS.Run.html": {
    "href": "api/Unity.Entities.LambdaJobDescriptionExecutionMethodsJCS.Run.html",
    "title": "Method Run | Entities | 0.17.0-preview.18",
    "keywords": "Method Run Run<TDescription>(TDescription) Declaration public static void Run<TDescription>(this TDescription description) where TDescription : ILambdaJobExecutionDescriptionJCS Parameters Type Name Description TDescription description Type Parameters Name Description TDescription"
  },
  "api/Unity.Entities.LambdaJobDescriptionExecutionMethodsJCS.Schedule.html": {
    "href": "api/Unity.Entities.LambdaJobDescriptionExecutionMethodsJCS.Schedule.html",
    "title": "Method Schedule | Entities | 0.17.0-preview.18",
    "keywords": "Method Schedule Schedule<TDescription>(TDescription, JobHandle) Declaration public static JobHandle Schedule<TDescription>(this TDescription description, JobHandle dependency) where TDescription : ILambdaJobExecutionDescriptionJCS Parameters Type Name Description TDescription description JobHandle dependency Returns Type Description JobHandle Type Parameters Name Description TDescription"
  },
  "api/Unity.Entities.LambdaJobQueryConstructionMethods.html": {
    "href": "api/Unity.Entities.LambdaJobQueryConstructionMethods.html",
    "title": "Class LambdaJobQueryConstructionMethods | Entities | 0.17.0-preview.18",
    "keywords": "Class LambdaJobQueryConstructionMethods Inheritance Object LambdaJobQueryConstructionMethods Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class LambdaJobQueryConstructionMethods Methods Name Description WithAll<T>(ForEachLambdaJobDescription) WithAll<T>(ForEachLambdaJobDescriptionJCS) WithAll<T>(LambdaJobChunkDescription) WithAll<T1, T2>(ForEachLambdaJobDescription) WithAll<T1, T2>(ForEachLambdaJobDescriptionJCS) WithAll<T1, T2>(LambdaJobChunkDescription) WithAll<T1, T2, T3>(ForEachLambdaJobDescription) WithAll<T1, T2, T3>(ForEachLambdaJobDescriptionJCS) WithAll<T1, T2, T3>(LambdaJobChunkDescription) WithAny<T>(ForEachLambdaJobDescription) WithAny<T>(ForEachLambdaJobDescriptionJCS) WithAny<T>(LambdaJobChunkDescription) WithAny<T1, T2>(ForEachLambdaJobDescription) WithAny<T1, T2>(ForEachLambdaJobDescriptionJCS) WithAny<T1, T2>(LambdaJobChunkDescription) WithAny<T1, T2, T3>(ForEachLambdaJobDescription) WithAny<T1, T2, T3>(ForEachLambdaJobDescriptionJCS) WithAny<T1, T2, T3>(LambdaJobChunkDescription) WithChangeFilter<T>(ForEachLambdaJobDescription) WithChangeFilter<T>(ForEachLambdaJobDescriptionJCS) WithChangeFilter<T>(LambdaJobChunkDescription) WithChangeFilter<T1, T2>(ForEachLambdaJobDescription) WithChangeFilter<T1, T2>(ForEachLambdaJobDescriptionJCS) WithChangeFilter<T1, T2>(LambdaJobChunkDescription) WithEntityQueryOptions(ForEachLambdaJobDescription, EntityQueryOptions) WithEntityQueryOptions(ForEachLambdaJobDescriptionJCS, EntityQueryOptions) WithEntityQueryOptions(LambdaJobChunkDescription, EntityQueryOptions) WithNone<T>(ForEachLambdaJobDescription) WithNone<T>(ForEachLambdaJobDescriptionJCS) WithNone<T>(LambdaJobChunkDescription) WithNone<T1, T2>(ForEachLambdaJobDescription) WithNone<T1, T2>(ForEachLambdaJobDescriptionJCS) WithNone<T1, T2>(LambdaJobChunkDescription) WithNone<T1, T2, T3>(ForEachLambdaJobDescription) WithNone<T1, T2, T3>(ForEachLambdaJobDescriptionJCS) WithNone<T1, T2, T3>(LambdaJobChunkDescription) WithSharedComponentFilter<T>(ForEachLambdaJobDescription, T) WithSharedComponentFilter<T>(ForEachLambdaJobDescriptionJCS, T) WithSharedComponentFilter<T>(LambdaJobChunkDescription, T) WithStoreEntityQueryInField(ForEachLambdaJobDescription, ref EntityQuery) You can use this method to store the EntityQuery generated for this Entities.ForEach invocation in a variable that you can then reuse for other purposes, such as calculating entity counts. Note: The EntityQuery is created in OnCreate. This method gives a copy of that query that can be used at any time (even before the Entities.ForEach is invoked). Also, this EntityQuery does not have any of the filters that the Entities.ForEach invocation sets up. WithStoreEntityQueryInField(ForEachLambdaJobDescriptionJCS, ref EntityQuery) WithStoreEntityQueryInField(LambdaJobChunkDescription, ref EntityQuery)"
  },
  "api/Unity.Entities.LambdaJobQueryConstructionMethods.WithAll.html": {
    "href": "api/Unity.Entities.LambdaJobQueryConstructionMethods.WithAll.html",
    "title": "Method WithAll | Entities | 0.17.0-preview.18",
    "keywords": "Method WithAll WithAll<T>(ForEachLambdaJobDescription) Declaration public static ForEachLambdaJobDescription WithAll<T>(this ForEachLambdaJobDescription description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription Type Parameters Name Description T WithAll<T1, T2>(ForEachLambdaJobDescription) Declaration public static ForEachLambdaJobDescription WithAll<T1, T2>(this ForEachLambdaJobDescription description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription Type Parameters Name Description T1 T2 WithAll<T1, T2, T3>(ForEachLambdaJobDescription) Declaration public static ForEachLambdaJobDescription WithAll<T1, T2, T3>(this ForEachLambdaJobDescription description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription Type Parameters Name Description T1 T2 T3 WithAll<T>(LambdaJobChunkDescription) Declaration public static LambdaJobChunkDescription WithAll<T>(this LambdaJobChunkDescription description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription Type Parameters Name Description T WithAll<T1, T2>(LambdaJobChunkDescription) Declaration public static LambdaJobChunkDescription WithAll<T1, T2>(this LambdaJobChunkDescription description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription Type Parameters Name Description T1 T2 WithAll<T1, T2, T3>(LambdaJobChunkDescription) Declaration public static LambdaJobChunkDescription WithAll<T1, T2, T3>(this LambdaJobChunkDescription description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription Type Parameters Name Description T1 T2 T3 WithAll<T>(ForEachLambdaJobDescriptionJCS) Declaration public static ForEachLambdaJobDescriptionJCS WithAll<T>(this ForEachLambdaJobDescriptionJCS description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescriptionJCS description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescriptionJCS Type Parameters Name Description T WithAll<T1, T2>(ForEachLambdaJobDescriptionJCS) Declaration public static ForEachLambdaJobDescriptionJCS WithAll<T1, T2>(this ForEachLambdaJobDescriptionJCS description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescriptionJCS description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescriptionJCS Type Parameters Name Description T1 T2 WithAll<T1, T2, T3>(ForEachLambdaJobDescriptionJCS) Declaration public static ForEachLambdaJobDescriptionJCS WithAll<T1, T2, T3>(this ForEachLambdaJobDescriptionJCS description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescriptionJCS description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescriptionJCS Type Parameters Name Description T1 T2 T3"
  },
  "api/Unity.Entities.LambdaJobQueryConstructionMethods.WithAny.html": {
    "href": "api/Unity.Entities.LambdaJobQueryConstructionMethods.WithAny.html",
    "title": "Method WithAny | Entities | 0.17.0-preview.18",
    "keywords": "Method WithAny WithAny<T>(ForEachLambdaJobDescription) Declaration public static ForEachLambdaJobDescription WithAny<T>(this ForEachLambdaJobDescription description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription Type Parameters Name Description T WithAny<T1, T2>(ForEachLambdaJobDescription) Declaration public static ForEachLambdaJobDescription WithAny<T1, T2>(this ForEachLambdaJobDescription description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription Type Parameters Name Description T1 T2 WithAny<T1, T2, T3>(ForEachLambdaJobDescription) Declaration public static ForEachLambdaJobDescription WithAny<T1, T2, T3>(this ForEachLambdaJobDescription description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription Type Parameters Name Description T1 T2 T3 WithAny<T>(LambdaJobChunkDescription) Declaration public static LambdaJobChunkDescription WithAny<T>(this LambdaJobChunkDescription description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription Type Parameters Name Description T WithAny<T1, T2>(LambdaJobChunkDescription) Declaration public static LambdaJobChunkDescription WithAny<T1, T2>(this LambdaJobChunkDescription description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription Type Parameters Name Description T1 T2 WithAny<T1, T2, T3>(LambdaJobChunkDescription) Declaration public static LambdaJobChunkDescription WithAny<T1, T2, T3>(this LambdaJobChunkDescription description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription Type Parameters Name Description T1 T2 T3 WithAny<T>(ForEachLambdaJobDescriptionJCS) Declaration public static ForEachLambdaJobDescriptionJCS WithAny<T>(this ForEachLambdaJobDescriptionJCS description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescriptionJCS description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescriptionJCS Type Parameters Name Description T WithAny<T1, T2>(ForEachLambdaJobDescriptionJCS) Declaration public static ForEachLambdaJobDescriptionJCS WithAny<T1, T2>(this ForEachLambdaJobDescriptionJCS description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescriptionJCS description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescriptionJCS Type Parameters Name Description T1 T2 WithAny<T1, T2, T3>(ForEachLambdaJobDescriptionJCS) Declaration public static ForEachLambdaJobDescriptionJCS WithAny<T1, T2, T3>(this ForEachLambdaJobDescriptionJCS description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescriptionJCS description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescriptionJCS Type Parameters Name Description T1 T2 T3"
  },
  "api/Unity.Entities.LambdaJobQueryConstructionMethods.WithChangeFilter.html": {
    "href": "api/Unity.Entities.LambdaJobQueryConstructionMethods.WithChangeFilter.html",
    "title": "Method WithChangeFilter | Entities | 0.17.0-preview.18",
    "keywords": "Method WithChangeFilter WithChangeFilter<T>(ForEachLambdaJobDescription) Declaration public static ForEachLambdaJobDescription WithChangeFilter<T>(this ForEachLambdaJobDescription description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription Type Parameters Name Description T WithChangeFilter<T1, T2>(ForEachLambdaJobDescription) Declaration public static ForEachLambdaJobDescription WithChangeFilter<T1, T2>(this ForEachLambdaJobDescription description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription Type Parameters Name Description T1 T2 WithChangeFilter<T>(LambdaJobChunkDescription) Declaration public static LambdaJobChunkDescription WithChangeFilter<T>(this LambdaJobChunkDescription description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription Type Parameters Name Description T WithChangeFilter<T1, T2>(LambdaJobChunkDescription) Declaration public static LambdaJobChunkDescription WithChangeFilter<T1, T2>(this LambdaJobChunkDescription description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription Type Parameters Name Description T1 T2 WithChangeFilter<T>(ForEachLambdaJobDescriptionJCS) Declaration public static ForEachLambdaJobDescriptionJCS WithChangeFilter<T>(this ForEachLambdaJobDescriptionJCS description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescriptionJCS description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescriptionJCS Type Parameters Name Description T WithChangeFilter<T1, T2>(ForEachLambdaJobDescriptionJCS) Declaration public static ForEachLambdaJobDescriptionJCS WithChangeFilter<T1, T2>(this ForEachLambdaJobDescriptionJCS description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescriptionJCS description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescriptionJCS Type Parameters Name Description T1 T2"
  },
  "api/Unity.Entities.LambdaJobQueryConstructionMethods.WithEntityQueryOptions.html": {
    "href": "api/Unity.Entities.LambdaJobQueryConstructionMethods.WithEntityQueryOptions.html",
    "title": "Method WithEntityQueryOptions | Entities | 0.17.0-preview.18",
    "keywords": "Method WithEntityQueryOptions WithEntityQueryOptions(ForEachLambdaJobDescription, EntityQueryOptions) Declaration public static ForEachLambdaJobDescription WithEntityQueryOptions(this ForEachLambdaJobDescription description, EntityQueryOptions options) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription description EntityQueryOptions options Returns Type Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription WithEntityQueryOptions(LambdaJobChunkDescription, EntityQueryOptions) Declaration public static LambdaJobChunkDescription WithEntityQueryOptions(this LambdaJobChunkDescription description, EntityQueryOptions options) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription description EntityQueryOptions options Returns Type Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription WithEntityQueryOptions(ForEachLambdaJobDescriptionJCS, EntityQueryOptions) Declaration public static ForEachLambdaJobDescriptionJCS WithEntityQueryOptions(this ForEachLambdaJobDescriptionJCS description, EntityQueryOptions options) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescriptionJCS description EntityQueryOptions options Returns Type Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescriptionJCS"
  },
  "api/Unity.Entities.LambdaJobQueryConstructionMethods.WithNone.html": {
    "href": "api/Unity.Entities.LambdaJobQueryConstructionMethods.WithNone.html",
    "title": "Method WithNone | Entities | 0.17.0-preview.18",
    "keywords": "Method WithNone WithNone<T>(ForEachLambdaJobDescription) Declaration public static ForEachLambdaJobDescription WithNone<T>(this ForEachLambdaJobDescription description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription Type Parameters Name Description T WithNone<T1, T2>(ForEachLambdaJobDescription) Declaration public static ForEachLambdaJobDescription WithNone<T1, T2>(this ForEachLambdaJobDescription description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription Type Parameters Name Description T1 T2 WithNone<T1, T2, T3>(ForEachLambdaJobDescription) Declaration public static ForEachLambdaJobDescription WithNone<T1, T2, T3>(this ForEachLambdaJobDescription description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription Type Parameters Name Description T1 T2 T3 WithNone<T>(LambdaJobChunkDescription) Declaration public static LambdaJobChunkDescription WithNone<T>(this LambdaJobChunkDescription description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription Type Parameters Name Description T WithNone<T1, T2>(LambdaJobChunkDescription) Declaration public static LambdaJobChunkDescription WithNone<T1, T2>(this LambdaJobChunkDescription description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription Type Parameters Name Description T1 T2 WithNone<T1, T2, T3>(LambdaJobChunkDescription) Declaration public static LambdaJobChunkDescription WithNone<T1, T2, T3>(this LambdaJobChunkDescription description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription Type Parameters Name Description T1 T2 T3 WithNone<T>(ForEachLambdaJobDescriptionJCS) Declaration public static ForEachLambdaJobDescriptionJCS WithNone<T>(this ForEachLambdaJobDescriptionJCS description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescriptionJCS description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescriptionJCS Type Parameters Name Description T WithNone<T1, T2>(ForEachLambdaJobDescriptionJCS) Declaration public static ForEachLambdaJobDescriptionJCS WithNone<T1, T2>(this ForEachLambdaJobDescriptionJCS description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescriptionJCS description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescriptionJCS Type Parameters Name Description T1 T2 WithNone<T1, T2, T3>(ForEachLambdaJobDescriptionJCS) Declaration public static ForEachLambdaJobDescriptionJCS WithNone<T1, T2, T3>(this ForEachLambdaJobDescriptionJCS description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescriptionJCS description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescriptionJCS Type Parameters Name Description T1 T2 T3"
  },
  "api/Unity.Entities.LambdaJobQueryConstructionMethods.WithSharedComponentFilter.html": {
    "href": "api/Unity.Entities.LambdaJobQueryConstructionMethods.WithSharedComponentFilter.html",
    "title": "Method WithSharedComponentFilter | Entities | 0.17.0-preview.18",
    "keywords": "Method WithSharedComponentFilter WithSharedComponentFilter<T>(ForEachLambdaJobDescription, T) Declaration public static ForEachLambdaJobDescription WithSharedComponentFilter<T>(this ForEachLambdaJobDescription description, T sharedComponent) where T : struct, ISharedComponentData Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription description T sharedComponent Returns Type Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription Type Parameters Name Description T WithSharedComponentFilter<T>(LambdaJobChunkDescription, T) Declaration public static LambdaJobChunkDescription WithSharedComponentFilter<T>(this LambdaJobChunkDescription description, T sharedComponent) where T : struct, ISharedComponentData Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription description T sharedComponent Returns Type Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription Type Parameters Name Description T WithSharedComponentFilter<T>(ForEachLambdaJobDescriptionJCS, T) Declaration public static ForEachLambdaJobDescriptionJCS WithSharedComponentFilter<T>(this ForEachLambdaJobDescriptionJCS description, T sharedComponent) where T : struct, ISharedComponentData Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescriptionJCS description T sharedComponent Returns Type Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescriptionJCS Type Parameters Name Description T"
  },
  "api/Unity.Entities.LambdaJobQueryConstructionMethods.WithStoreEntityQueryInField.html": {
    "href": "api/Unity.Entities.LambdaJobQueryConstructionMethods.WithStoreEntityQueryInField.html",
    "title": "Method WithStoreEntityQueryInField | Entities | 0.17.0-preview.18",
    "keywords": "Method WithStoreEntityQueryInField WithStoreEntityQueryInField(ForEachLambdaJobDescription, ref EntityQuery) You can use this method to store the EntityQuery generated for this Entities.ForEach invocation in a variable that you can then reuse for other purposes, such as calculating entity counts. Note: The EntityQuery is created in OnCreate. This method gives a copy of that query that can be used at any time (even before the Entities.ForEach is invoked). Also, this EntityQuery does not have any of the filters that the Entities.ForEach invocation sets up. Declaration public static ForEachLambdaJobDescription WithStoreEntityQueryInField(this ForEachLambdaJobDescription description, ref EntityQuery query) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription description EntityQuery query Reference to EntityQuery object to store the EntityQuery created for this Entities.ForEach invocation. Returns Type Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription WithStoreEntityQueryInField(LambdaJobChunkDescription, ref EntityQuery) Declaration public static LambdaJobChunkDescription WithStoreEntityQueryInField(this LambdaJobChunkDescription description, ref EntityQuery query) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription description EntityQuery query Returns Type Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription WithStoreEntityQueryInField(ForEachLambdaJobDescriptionJCS, ref EntityQuery) Declaration public static ForEachLambdaJobDescriptionJCS WithStoreEntityQueryInField(this ForEachLambdaJobDescriptionJCS description, ref EntityQuery query) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescriptionJCS description EntityQuery query Returns Type Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescriptionJCS"
  },
  "api/Unity.Entities.LambdaSingleJobDescriptionConstructionMethods.html": {
    "href": "api/Unity.Entities.LambdaSingleJobDescriptionConstructionMethods.html",
    "title": "Class LambdaSingleJobDescriptionConstructionMethods | Entities | 0.17.0-preview.18",
    "keywords": "Class LambdaSingleJobDescriptionConstructionMethods Inheritance Object LambdaSingleJobDescriptionConstructionMethods Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class LambdaSingleJobDescriptionConstructionMethods Methods Name Description WithCode<TDescription>(TDescription, LambdaSingleJobDescriptionConstructionMethods.WithCodeAction)"
  },
  "api/Unity.Entities.LambdaSingleJobDescriptionConstructionMethods.WithCode.html": {
    "href": "api/Unity.Entities.LambdaSingleJobDescriptionConstructionMethods.WithCode.html",
    "title": "Method WithCode | Entities | 0.17.0-preview.18",
    "keywords": "Method WithCode WithCode<TDescription>(TDescription, LambdaSingleJobDescriptionConstructionMethods.WithCodeAction) Declaration public static TDescription WithCode<TDescription>(this TDescription description, LambdaSingleJobDescriptionConstructionMethods.WithCodeAction code) where TDescription : ISingleJobDescription Parameters Type Name Description TDescription description LambdaSingleJobDescriptionConstructionMethods.WithCodeAction code Returns Type Description TDescription Type Parameters Name Description TDescription"
  },
  "api/Unity.Entities.LambdaSingleJobDescriptionConstructionMethods.WithCodeAction.html": {
    "href": "api/Unity.Entities.LambdaSingleJobDescriptionConstructionMethods.WithCodeAction.html",
    "title": "Delegate LambdaSingleJobDescriptionConstructionMethods.WithCodeAction | Entities | 0.17.0-preview.18",
    "keywords": "Delegate LambdaSingleJobDescriptionConstructionMethods.WithCodeAction Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void WithCodeAction();"
  },
  "api/Unity.Entities.LambdaSingleJobDescriptionExecutionMethods.html": {
    "href": "api/Unity.Entities.LambdaSingleJobDescriptionExecutionMethods.html",
    "title": "Class LambdaSingleJobDescriptionExecutionMethods | Entities | 0.17.0-preview.18",
    "keywords": "Class LambdaSingleJobDescriptionExecutionMethods Inheritance Object LambdaSingleJobDescriptionExecutionMethods Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class LambdaSingleJobDescriptionExecutionMethods Methods Name Description Run<TDescription>(TDescription) Schedule<TDescription>(TDescription) Schedule<TDescription>(TDescription, JobHandle)"
  },
  "api/Unity.Entities.LambdaSingleJobDescriptionExecutionMethods.Run.html": {
    "href": "api/Unity.Entities.LambdaSingleJobDescriptionExecutionMethods.Run.html",
    "title": "Method Run | Entities | 0.17.0-preview.18",
    "keywords": "Method Run Run<TDescription>(TDescription) Declaration public static void Run<TDescription>(this TDescription description) where TDescription : ILambdaSingleJobExecutionDescription Parameters Type Name Description TDescription description Type Parameters Name Description TDescription"
  },
  "api/Unity.Entities.LambdaSingleJobDescriptionExecutionMethods.Schedule.html": {
    "href": "api/Unity.Entities.LambdaSingleJobDescriptionExecutionMethods.Schedule.html",
    "title": "Method Schedule | Entities | 0.17.0-preview.18",
    "keywords": "Method Schedule Schedule<TDescription>(TDescription, JobHandle) Declaration public static JobHandle Schedule<TDescription>(this TDescription description, JobHandle dependency) where TDescription : ILambdaSingleJobExecutionDescription Parameters Type Name Description TDescription description JobHandle dependency Returns Type Description JobHandle Type Parameters Name Description TDescription Schedule<TDescription>(TDescription) Declaration public static void Schedule<TDescription>(this TDescription description) where TDescription : ILambdaSingleJobExecutionDescription Parameters Type Name Description TDescription description Type Parameters Name Description TDescription"
  },
  "api/Unity.Entities.LambdaSingleJobDescriptionExecutionMethodsJCS.html": {
    "href": "api/Unity.Entities.LambdaSingleJobDescriptionExecutionMethodsJCS.html",
    "title": "Class LambdaSingleJobDescriptionExecutionMethodsJCS | Entities | 0.17.0-preview.18",
    "keywords": "Class LambdaSingleJobDescriptionExecutionMethodsJCS Inheritance Object LambdaSingleJobDescriptionExecutionMethodsJCS Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class LambdaSingleJobDescriptionExecutionMethodsJCS Methods Name Description Run<TDescription>(TDescription) Schedule<TDescription>(TDescription, JobHandle)"
  },
  "api/Unity.Entities.LambdaSingleJobDescriptionExecutionMethodsJCS.Run.html": {
    "href": "api/Unity.Entities.LambdaSingleJobDescriptionExecutionMethodsJCS.Run.html",
    "title": "Method Run | Entities | 0.17.0-preview.18",
    "keywords": "Method Run Run<TDescription>(TDescription) Declaration public static void Run<TDescription>(this TDescription description) where TDescription : ILambdaSingleJobExecutionDescriptionJCS Parameters Type Name Description TDescription description Type Parameters Name Description TDescription"
  },
  "api/Unity.Entities.LambdaSingleJobDescriptionExecutionMethodsJCS.Schedule.html": {
    "href": "api/Unity.Entities.LambdaSingleJobDescriptionExecutionMethodsJCS.Schedule.html",
    "title": "Method Schedule | Entities | 0.17.0-preview.18",
    "keywords": "Method Schedule Schedule<TDescription>(TDescription, JobHandle) Declaration public static JobHandle Schedule<TDescription>(this TDescription description, JobHandle dependency) where TDescription : ILambdaSingleJobExecutionDescriptionJCS Parameters Type Name Description TDescription description JobHandle dependency Returns Type Description JobHandle Type Parameters Name Description TDescription"
  },
  "api/Unity.Entities.LateSimulationSystemGroup.html": {
    "href": "api/Unity.Entities.LateSimulationSystemGroup.html",
    "title": "Class LateSimulationSystemGroup | Entities | 0.17.0-preview.18",
    "keywords": "Class LateSimulationSystemGroup Inheritance Object ComponentSystemBase ComponentSystem ComponentSystemGroup LateSimulationSystemGroup Inherited Members ComponentSystemGroup.Systems ComponentSystemGroup.OnCreate() ComponentSystemGroup.OnDestroy() ComponentSystemGroup.AddSystemToUpdateList(ComponentSystemBase) ComponentSystemGroup.RemoveSystemFromUpdateList(ComponentSystemBase) ComponentSystemGroup.SortSystems() ComponentSystemGroup.OnStopRunning() ComponentSystemGroup.FixedRateManager ComponentSystemGroup.OnUpdate() ComponentSystem.PostUpdateCommands ComponentSystem.InitEntityQueryCache(Int32) ComponentSystem.Entities ComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnStartRunning() ComponentSystemBase.ExecutingSystemType ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetComponentTypeHandle<T>(Boolean) ComponentSystemBase.GetDynamicComponentTypeHandle(ComponentType) ComponentSystemBase.GetBufferTypeHandle<T>(Boolean) ComponentSystemBase.GetSharedComponentTypeHandle<T>() ComponentSystemBase.GetEntityTypeHandle() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.TryGetSingleton<T>(T) ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.TryGetSingletonEntity<T>(Entity) ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [ExecuteAlways] [UpdateInGroup(typeof(SimulationSystemGroup), OrderLast = true)] [UpdateBefore(typeof(EndSimulationEntityCommandBufferSystem))] public class LateSimulationSystemGroup : ComponentSystemGroup Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Entities.LayerFieldAttribute.html": {
    "href": "api/Unity.Entities.LayerFieldAttribute.html",
    "title": "Class LayerFieldAttribute | Entities | 0.17.0-preview.18",
    "keywords": "Class LayerFieldAttribute Attribute used to make an int field display as a layer selector drop-down. Inheritance Object Attribute PropertyAttribute LayerFieldAttribute Inherited Members PropertyAttribute.order Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public sealed class LayerFieldAttribute : PropertyAttribute, _Attribute"
  },
  "api/Unity.Entities.LayoutUtility.GatherChunkedSOA8.html": {
    "href": "api/Unity.Entities.LayoutUtility.GatherChunkedSOA8.html",
    "title": "Method GatherChunkedSOA8 | Entities | 0.17.0-preview.18",
    "keywords": "Method GatherChunkedSOA8 GatherChunkedSOA8(NativeArray<SOAFieldInfo>, Int32, Byte*, Void*, Int32) Declaration public static void GatherChunkedSOA8(NativeArray<SOAFieldInfo> fields, int fieldSizeSum, byte *sourceBaseAddress, void *target, int sourceIndex) Parameters Type Name Description NativeArray < SOAFieldInfo > fields Int32 fieldSizeSum Byte * sourceBaseAddress Void * target Int32 sourceIndex"
  },
  "api/Unity.Entities.LayoutUtility.GatherFullSOA.html": {
    "href": "api/Unity.Entities.LayoutUtility.GatherFullSOA.html",
    "title": "Method GatherFullSOA | Entities | 0.17.0-preview.18",
    "keywords": "Method GatherFullSOA GatherFullSOA(NativeArray<SOAFieldInfo>, Byte*, Void*, Int32, Int32) Gather AOS data from fully parallel arrays of fields. Declaration public static void GatherFullSOA(NativeArray<SOAFieldInfo> fields, byte *sourceBaseAddress, void *target, int sourceIndex, int sourceArraySize) Parameters Type Name Description NativeArray < SOAFieldInfo > fields Struct type descriptor Byte * sourceBaseAddress Pointer to first byte of source SOA array Void * target Pointer to target AOS struct instance to be gathered into Int32 sourceIndex The index of the SOA element to be gathered Int32 sourceArraySize The number of elements in the SOA data"
  },
  "api/Unity.Entities.LayoutUtility.html": {
    "href": "api/Unity.Entities.LayoutUtility.html",
    "title": "Struct LayoutUtility | Entities | 0.17.0-preview.18",
    "keywords": "Struct LayoutUtility Low-level utility functions for AOS->SOA (scatter) and SOA->AOS (gather) conversions. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct LayoutUtility Methods Name Description GatherChunkedSOA8(NativeArray<SOAFieldInfo>, Int32, Byte*, Void*, Int32) GatherFullSOA(NativeArray<SOAFieldInfo>, Byte*, Void*, Int32, Int32) Gather AOS data from fully parallel arrays of fields. ScatterChunkedSOA8(NativeArray<SOAFieldInfo>, Int32, Byte*, Void*, Int32) ScatterFullSOA(NativeArray<SOAFieldInfo>, Byte*, Void*, Int32, Int32)"
  },
  "api/Unity.Entities.LayoutUtility.ScatterChunkedSOA8.html": {
    "href": "api/Unity.Entities.LayoutUtility.ScatterChunkedSOA8.html",
    "title": "Method ScatterChunkedSOA8 | Entities | 0.17.0-preview.18",
    "keywords": "Method ScatterChunkedSOA8 ScatterChunkedSOA8(NativeArray<SOAFieldInfo>, Int32, Byte*, Void*, Int32) Declaration public static void ScatterChunkedSOA8(NativeArray<SOAFieldInfo> fields, int fieldSizeSum, byte *targetBaseAddress, void *source, int targetIndex) Parameters Type Name Description NativeArray < SOAFieldInfo > fields Int32 fieldSizeSum Byte * targetBaseAddress Void * source Int32 targetIndex"
  },
  "api/Unity.Entities.LayoutUtility.ScatterFullSOA.html": {
    "href": "api/Unity.Entities.LayoutUtility.ScatterFullSOA.html",
    "title": "Method ScatterFullSOA | Entities | 0.17.0-preview.18",
    "keywords": "Method ScatterFullSOA ScatterFullSOA(NativeArray<SOAFieldInfo>, Byte*, Void*, Int32, Int32) Declaration public static void ScatterFullSOA(NativeArray<SOAFieldInfo> fields, byte *targetBaseAddress, void *source, int targetIndex, int targetArraySize) Parameters Type Name Description NativeArray < SOAFieldInfo > fields Byte * targetBaseAddress Void * source Int32 targetIndex Int32 targetArraySize"
  },
  "api/Unity.Entities.LayoutUtilityManaged.CreateDescriptor.html": {
    "href": "api/Unity.Entities.LayoutUtilityManaged.CreateDescriptor.html",
    "title": "Method CreateDescriptor | Entities | 0.17.0-preview.18",
    "keywords": "Method CreateDescriptor CreateDescriptor(Type, Allocator) Declaration public static NativeArray<SOAFieldInfo> CreateDescriptor(Type type, Allocator allocator) Parameters Type Name Description Type type Allocator allocator Returns Type Description NativeArray < SOAFieldInfo >"
  },
  "api/Unity.Entities.LayoutUtilityManaged.html": {
    "href": "api/Unity.Entities.LayoutUtilityManaged.html",
    "title": "Struct LayoutUtilityManaged | Entities | 0.17.0-preview.18",
    "keywords": "Struct LayoutUtilityManaged Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct LayoutUtilityManaged Methods Name Description CreateDescriptor(Type, Allocator)"
  },
  "api/Unity.Entities.LinkedEntityGroup.html": {
    "href": "api/Unity.Entities.LinkedEntityGroup.html",
    "title": "Struct LinkedEntityGroup | Entities | 0.17.0-preview.18",
    "keywords": "Struct LinkedEntityGroup The LinkedEntityGroup buffer makes the entity be the root of a set of connected entities. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct LinkedEntityGroup : IBufferElementData Remarks Referenced Prefabs automatically add a LinkedEntityGroup with the complete child hierarchy. EntityManager.Instantiate uses LinkedEntityGroup to instantiate the whole set of entities automatically. EntityManager.SetEnabled uses LinkedEntityGroup to enable the whole set of entities. Fields Name Description Value A child entity. Operators Name Description Implicit(Entity to LinkedEntityGroup) Provides implicit conversion of an Entity to a LinkedEntityGroup element."
  },
  "api/Unity.Entities.LinkedEntityGroup.op_Implicit.html": {
    "href": "api/Unity.Entities.LinkedEntityGroup.op_Implicit.html",
    "title": "Operator Implicit | Entities | 0.17.0-preview.18",
    "keywords": "Operator Implicit Implicit(Entity to LinkedEntityGroup) Provides implicit conversion of an Entity to a LinkedEntityGroup element. Declaration public static implicit operator LinkedEntityGroup(Entity e) Parameters Type Name Description Entity e The entity to convert Returns Type Description LinkedEntityGroup A new buffer element."
  },
  "api/Unity.Entities.LinkedEntityGroup.Value.html": {
    "href": "api/Unity.Entities.LinkedEntityGroup.Value.html",
    "title": "Field Value | Entities | 0.17.0-preview.18",
    "keywords": "Field Value A child entity. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public Entity Value Returns Type Description Entity"
  },
  "api/Unity.Entities.LinkedEntityGroupChange.ChildEntityGuid.html": {
    "href": "api/Unity.Entities.LinkedEntityGroupChange.ChildEntityGuid.html",
    "title": "Field ChildEntityGuid | Entities | 0.17.0-preview.18",
    "keywords": "Field ChildEntityGuid Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public EntityGuid ChildEntityGuid Returns Type Description EntityGuid"
  },
  "api/Unity.Entities.LinkedEntityGroupChange.html": {
    "href": "api/Unity.Entities.LinkedEntityGroupChange.html",
    "title": "Struct LinkedEntityGroupChange | Entities | 0.17.0-preview.18",
    "keywords": "Struct LinkedEntityGroupChange Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct LinkedEntityGroupChange Fields Name Description ChildEntityGuid RootEntityGuid"
  },
  "api/Unity.Entities.LinkedEntityGroupChange.RootEntityGuid.html": {
    "href": "api/Unity.Entities.LinkedEntityGroupChange.RootEntityGuid.html",
    "title": "Field RootEntityGuid | Entities | 0.17.0-preview.18",
    "keywords": "Field RootEntityGuid Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public EntityGuid RootEntityGuid Returns Type Description EntityGuid"
  },
  "api/Unity.Entities.LowLevel.Unsafe.html": {
    "href": "api/Unity.Entities.LowLevel.Unsafe.html",
    "title": "Namespace Unity.Entities.LowLevel.Unsafe | Entities | 0.17.0-preview.18",
    "keywords": "Namespace Unity.Entities.LowLevel.Unsafe Structs UnsafeUntypedBlobAssetReference An untyped reference to a blob assets. UnsafeUntypedBlobAssetReference can be cast to specific typed BlobAssetReferences. UnsafeUntypedBufferAccessor Allow untyped access to buffers data in a chunk. The use of untyped accessor is in general not recommended and should be exploited only in very specific use case scenario."
  },
  "api/Unity.Entities.LowLevel.Unsafe.UnsafeUntypedBlobAssetReference.Create.html": {
    "href": "api/Unity.Entities.LowLevel.Unsafe.UnsafeUntypedBlobAssetReference.Create.html",
    "title": "Method Create | Entities | 0.17.0-preview.18",
    "keywords": "Method Create Create<T>(BlobAssetReference<T>) Declaration public static UnsafeUntypedBlobAssetReference Create<T>(BlobAssetReference<T> blob) where T : struct Parameters Type Name Description BlobAssetReference <T> blob Returns Type Description UnsafeUntypedBlobAssetReference Type Parameters Name Description T"
  },
  "api/Unity.Entities.LowLevel.Unsafe.UnsafeUntypedBlobAssetReference.Dispose.html": {
    "href": "api/Unity.Entities.LowLevel.Unsafe.UnsafeUntypedBlobAssetReference.Dispose.html",
    "title": "Method Dispose | Entities | 0.17.0-preview.18",
    "keywords": "Method Dispose Dispose() Declaration public void Dispose()"
  },
  "api/Unity.Entities.LowLevel.Unsafe.UnsafeUntypedBlobAssetReference.Equals.html": {
    "href": "api/Unity.Entities.LowLevel.Unsafe.UnsafeUntypedBlobAssetReference.Equals.html",
    "title": "Method Equals | Entities | 0.17.0-preview.18",
    "keywords": "Method Equals Equals(UnsafeUntypedBlobAssetReference) Declaration public bool Equals(UnsafeUntypedBlobAssetReference other) Parameters Type Name Description UnsafeUntypedBlobAssetReference other Returns Type Description Boolean"
  },
  "api/Unity.Entities.LowLevel.Unsafe.UnsafeUntypedBlobAssetReference.html": {
    "href": "api/Unity.Entities.LowLevel.Unsafe.UnsafeUntypedBlobAssetReference.html",
    "title": "Struct UnsafeUntypedBlobAssetReference | Entities | 0.17.0-preview.18",
    "keywords": "Struct UnsafeUntypedBlobAssetReference An untyped reference to a blob assets. UnsafeUntypedBlobAssetReference can be cast to specific typed BlobAssetReferences. Namespace : Unity.Entities.LowLevel.Unsafe <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct UnsafeUntypedBlobAssetReference : IDisposable, IEquatable<UnsafeUntypedBlobAssetReference> Methods Name Description Create<T>(BlobAssetReference<T>) Dispose() Equals(UnsafeUntypedBlobAssetReference) Reinterpret<T>()"
  },
  "api/Unity.Entities.LowLevel.Unsafe.UnsafeUntypedBlobAssetReference.Reinterpret.html": {
    "href": "api/Unity.Entities.LowLevel.Unsafe.UnsafeUntypedBlobAssetReference.Reinterpret.html",
    "title": "Method Reinterpret | Entities | 0.17.0-preview.18",
    "keywords": "Method Reinterpret Reinterpret<T>() Declaration public BlobAssetReference<T> Reinterpret<T>() where T : struct Returns Type Description BlobAssetReference <T> Type Parameters Name Description T"
  },
  "api/Unity.Entities.LowLevel.Unsafe.UnsafeUntypedBufferAccessor.ElementSize.html": {
    "href": "api/Unity.Entities.LowLevel.Unsafe.UnsafeUntypedBufferAccessor.ElementSize.html",
    "title": "Property ElementSize | Entities | 0.17.0-preview.18",
    "keywords": "Property ElementSize ElementSize Declaration public int ElementSize { get; } Property Value Type Description Int32"
  },
  "api/Unity.Entities.LowLevel.Unsafe.UnsafeUntypedBufferAccessor.GetBufferCapacity.html": {
    "href": "api/Unity.Entities.LowLevel.Unsafe.UnsafeUntypedBufferAccessor.GetBufferCapacity.html",
    "title": "Method GetBufferCapacity | Entities | 0.17.0-preview.18",
    "keywords": "Method GetBufferCapacity GetBufferCapacity(Int32) Return the current capacity of the buffer at the given index in the chunk Declaration public int GetBufferCapacity(int index) Parameters Type Name Description Int32 index Returns Type Description Int32 Exceptions Type Condition InvalidOperationException"
  },
  "api/Unity.Entities.LowLevel.Unsafe.UnsafeUntypedBufferAccessor.GetBufferLength.html": {
    "href": "api/Unity.Entities.LowLevel.Unsafe.UnsafeUntypedBufferAccessor.GetBufferLength.html",
    "title": "Method GetBufferLength | Entities | 0.17.0-preview.18",
    "keywords": "Method GetBufferLength GetBufferLength(Int32) Return the current size of the buffer at the given index in the chunk Declaration public int GetBufferLength(int index) Parameters Type Name Description Int32 index Returns Type Description Int32 Exceptions Type Condition InvalidOperationException"
  },
  "api/Unity.Entities.LowLevel.Unsafe.UnsafeUntypedBufferAccessor.GetUnsafePtr.html": {
    "href": "api/Unity.Entities.LowLevel.Unsafe.UnsafeUntypedBufferAccessor.GetUnsafePtr.html",
    "title": "Method GetUnsafePtr | Entities | 0.17.0-preview.18",
    "keywords": "Method GetUnsafePtr GetUnsafePtr(Int32) The unsafe pointer to buffer elements at the given index in the chunk Declaration public void *GetUnsafePtr(int index) Parameters Type Name Description Int32 index Returns Type Description Void * Exceptions Type Condition InvalidOperationException"
  },
  "api/Unity.Entities.LowLevel.Unsafe.UnsafeUntypedBufferAccessor.GetUnsafePtrAndLength.html": {
    "href": "api/Unity.Entities.LowLevel.Unsafe.UnsafeUntypedBufferAccessor.GetUnsafePtrAndLength.html",
    "title": "Method GetUnsafePtrAndLength | Entities | 0.17.0-preview.18",
    "keywords": "Method GetUnsafePtrAndLength GetUnsafePtrAndLength(Int32, out Int32) The unsafe pointer and length for the buffer at the given index in the chunk Declaration public void *GetUnsafePtrAndLength(int index, out int length) Parameters Type Name Description Int32 index Int32 length Returns Type Description Void * Exceptions Type Condition InvalidOperationException"
  },
  "api/Unity.Entities.LowLevel.Unsafe.UnsafeUntypedBufferAccessor.GetUnsafeReadOnlyPtr.html": {
    "href": "api/Unity.Entities.LowLevel.Unsafe.UnsafeUntypedBufferAccessor.GetUnsafeReadOnlyPtr.html",
    "title": "Method GetUnsafeReadOnlyPtr | Entities | 0.17.0-preview.18",
    "keywords": "Method GetUnsafeReadOnlyPtr GetUnsafeReadOnlyPtr(Int32) The unsafe pointer to buffer elements at the given index in the chunk Declaration public void *GetUnsafeReadOnlyPtr(int index) Parameters Type Name Description Int32 index Returns Type Description Void * Exceptions Type Condition InvalidOperationException"
  },
  "api/Unity.Entities.LowLevel.Unsafe.UnsafeUntypedBufferAccessor.GetUnsafeReadOnlyPtrAndLength.html": {
    "href": "api/Unity.Entities.LowLevel.Unsafe.UnsafeUntypedBufferAccessor.GetUnsafeReadOnlyPtrAndLength.html",
    "title": "Method GetUnsafeReadOnlyPtrAndLength | Entities | 0.17.0-preview.18",
    "keywords": "Method GetUnsafeReadOnlyPtrAndLength GetUnsafeReadOnlyPtrAndLength(Int32, out Int32) The unsafe pointer and length for the buffer at the given index in the chunk Declaration public void *GetUnsafeReadOnlyPtrAndLength(int index, out int length) Parameters Type Name Description Int32 index Int32 length Returns Type Description Void * Exceptions Type Condition InvalidOperationException"
  },
  "api/Unity.Entities.LowLevel.Unsafe.UnsafeUntypedBufferAccessor.html": {
    "href": "api/Unity.Entities.LowLevel.Unsafe.UnsafeUntypedBufferAccessor.html",
    "title": "Struct UnsafeUntypedBufferAccessor | Entities | 0.17.0-preview.18",
    "keywords": "Struct UnsafeUntypedBufferAccessor Allow untyped access to buffers data in a chunk. The use of untyped accessor is in general not recommended and should be exploited only in very specific use case scenario. Namespace : Unity.Entities.LowLevel.Unsafe <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct UnsafeUntypedBufferAccessor Properties Name Description ElementSize Length The number of buffers in the chunk. Methods Name Description GetBufferCapacity(Int32) Return the current capacity of the buffer at the given index in the chunk GetBufferLength(Int32) Return the current size of the buffer at the given index in the chunk GetUnsafePtr(Int32) The unsafe pointer to buffer elements at the given index in the chunk GetUnsafePtrAndLength(Int32, out Int32) The unsafe pointer and length for the buffer at the given index in the chunk GetUnsafeReadOnlyPtr(Int32) The unsafe pointer to buffer elements at the given index in the chunk GetUnsafeReadOnlyPtrAndLength(Int32, out Int32) The unsafe pointer and length for the buffer at the given index in the chunk ResizeUninitialized(Int32, Int32) Increases the buffer capacity and length of the buffer associated to the entity at the given index in the chunk"
  },
  "api/Unity.Entities.LowLevel.Unsafe.UnsafeUntypedBufferAccessor.Length.html": {
    "href": "api/Unity.Entities.LowLevel.Unsafe.UnsafeUntypedBufferAccessor.Length.html",
    "title": "Property Length | Entities | 0.17.0-preview.18",
    "keywords": "Property Length Length The number of buffers in the chunk. Declaration public int Length { get; } Property Value Type Description Int32"
  },
  "api/Unity.Entities.LowLevel.Unsafe.UnsafeUntypedBufferAccessor.ResizeUninitialized.html": {
    "href": "api/Unity.Entities.LowLevel.Unsafe.UnsafeUntypedBufferAccessor.ResizeUninitialized.html",
    "title": "Method ResizeUninitialized | Entities | 0.17.0-preview.18",
    "keywords": "Method ResizeUninitialized ResizeUninitialized(Int32, Int32) Increases the buffer capacity and length of the buffer associated to the entity at the given index in the chunk Declaration public void ResizeUninitialized(int index, int length) Parameters Type Name Description Int32 index Int32 length Remarks If length is less than the current length of the buffer at index index , the length of the buffer is reduced while the capacity remains unchanged. Exceptions Type Condition InvalidOperationException"
  },
  "api/Unity.Entities.ManagedComponentAccessor-1.html": {
    "href": "api/Unity.Entities.ManagedComponentAccessor-1.html",
    "title": "Struct ManagedComponentAccessor<T> | Entities | 0.17.0-preview.18",
    "keywords": "Struct ManagedComponentAccessor<T> Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct ManagedComponentAccessor<T> where T : class Type Parameters Name Description T Properties Name Description Item[Int32] Length"
  },
  "api/Unity.Entities.ManagedComponentAccessor-1.Item.html": {
    "href": "api/Unity.Entities.ManagedComponentAccessor-1.Item.html",
    "title": "Property Item | Entities | 0.17.0-preview.18",
    "keywords": "Property Item Item[Int32] Declaration public T this[int index] { get; set; } Parameters Type Name Description Int32 index Property Value Type Description T Exceptions Type Condition IndexOutOfRangeException"
  },
  "api/Unity.Entities.ManagedComponentAccessor-1.Length.html": {
    "href": "api/Unity.Entities.ManagedComponentAccessor-1.Length.html",
    "title": "Property Length | Entities | 0.17.0-preview.18",
    "keywords": "Property Length Length Declaration public int Length { get; } Property Value Type Description Int32"
  },
  "api/Unity.Entities.MaximumChunkCapacityAttribute.Capacity.html": {
    "href": "api/Unity.Entities.MaximumChunkCapacityAttribute.Capacity.html",
    "title": "Field Capacity | Entities | 0.17.0-preview.18",
    "keywords": "Field Capacity The maximum number of entities having this component type in an ArchetypeChunk . Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public readonly int Capacity Returns Type Description Int32"
  },
  "api/Unity.Entities.MaximumChunkCapacityAttribute.-ctor.html": {
    "href": "api/Unity.Entities.MaximumChunkCapacityAttribute.-ctor.html",
    "title": "Constructor MaximumChunkCapacityAttribute | Entities | 0.17.0-preview.18",
    "keywords": "Constructor MaximumChunkCapacityAttribute MaximumChunkCapacityAttribute(Int32) The maximum number of entities having this component type in an ArchetypeChunk . Declaration public MaximumChunkCapacityAttribute(int capacity) Parameters Type Name Description Int32 capacity"
  },
  "api/Unity.Entities.MaximumChunkCapacityAttribute.html": {
    "href": "api/Unity.Entities.MaximumChunkCapacityAttribute.html",
    "title": "Class MaximumChunkCapacityAttribute | Entities | 0.17.0-preview.18",
    "keywords": "Class MaximumChunkCapacityAttribute Specifies the maximum number of components of a type that can be stored in the same chunk. Inheritance Object Attribute MaximumChunkCapacityAttribute Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct)] public class MaximumChunkCapacityAttribute : Attribute, _Attribute Remarks Place this attribute on the declaration of a component, such as IComponentData , to limit the number of entities with that component which can be stored in a single chunk. Note that the actual limit on the number of entities in a chunk can be smaller, based on the actual size of all the components in the same EntityArchetype as the component defining this limit. If an archetype contains more than one component type specifying a chunk capacity limit, then the lowest limit is used. Constructors Name Description MaximumChunkCapacityAttribute(Int32) The maximum number of entities having this component type in an ArchetypeChunk . Fields Name Description Capacity The maximum number of entities having this component type in an ArchetypeChunk ."
  },
  "api/Unity.Entities.MayOnlyLiveInBlobStorageAttribute.html": {
    "href": "api/Unity.Entities.MayOnlyLiveInBlobStorageAttribute.html",
    "title": "Class MayOnlyLiveInBlobStorageAttribute | Entities | 0.17.0-preview.18",
    "keywords": "Class MayOnlyLiveInBlobStorageAttribute Use this attribute if you have structs that use offset pointers that are only valid when they live inside the blob storage. It will turn ensure a compiler error is generated for every time a reference to the struct is copied, or a field is read from a reference to the struct this attribute is applied on. Inheritance Object Attribute MayOnlyLiveInBlobStorageAttribute Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class MayOnlyLiveInBlobStorageAttribute : Attribute, _Attribute"
  },
  "api/Unity.Entities.MemsetNativeArray-1.Execute.html": {
    "href": "api/Unity.Entities.MemsetNativeArray-1.Execute.html",
    "title": "Method Execute | Entities | 0.17.0-preview.18",
    "keywords": "Method Execute Execute(Int32) Declaration public void Execute(int index) Parameters Type Name Description Int32 index Implements IJobParallelFor.Execute(Int32)"
  },
  "api/Unity.Entities.MemsetNativeArray-1.html": {
    "href": "api/Unity.Entities.MemsetNativeArray-1.html",
    "title": "Struct MemsetNativeArray<T> | Entities | 0.17.0-preview.18",
    "keywords": "Struct MemsetNativeArray<T> Assign Value to each element of NativeArray Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct MemsetNativeArray<T> : IJobParallelFor where T : struct Type Parameters Name Description T Type of element in NativeArray Fields Name Description Source Value Methods Name Description Execute(Int32)"
  },
  "api/Unity.Entities.MemsetNativeArray-1.Source.html": {
    "href": "api/Unity.Entities.MemsetNativeArray-1.Source.html",
    "title": "Field Source | Entities | 0.17.0-preview.18",
    "keywords": "Field Source Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public NativeArray<T> Source Returns Type Description NativeArray <T>"
  },
  "api/Unity.Entities.MemsetNativeArray-1.Value.html": {
    "href": "api/Unity.Entities.MemsetNativeArray-1.Value.html",
    "title": "Field Value | Entities | 0.17.0-preview.18",
    "keywords": "Field Value Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public T Value Returns Type Description T"
  },
  "api/Unity.Entities.NativeArraySharedInt.-ctor.html": {
    "href": "api/Unity.Entities.NativeArraySharedInt.-ctor.html",
    "title": "Constructor NativeArraySharedInt | Entities | 0.17.0-preview.18",
    "keywords": "Constructor NativeArraySharedInt NativeArraySharedInt(NativeArray<Int32>, Allocator) Declaration public NativeArraySharedInt(NativeArray<int> sourceBuffer, Allocator allocator) Parameters Type Name Description NativeArray < Int32 > sourceBuffer Allocator allocator"
  },
  "api/Unity.Entities.NativeArraySharedInt.Dispose.html": {
    "href": "api/Unity.Entities.NativeArraySharedInt.Dispose.html",
    "title": "Method Dispose | Entities | 0.17.0-preview.18",
    "keywords": "Method Dispose Dispose() Declaration public void Dispose()"
  },
  "api/Unity.Entities.NativeArraySharedInt.GetSharedIndexArray.html": {
    "href": "api/Unity.Entities.NativeArraySharedInt.GetSharedIndexArray.html",
    "title": "Method GetSharedIndexArray | Entities | 0.17.0-preview.18",
    "keywords": "Method GetSharedIndexArray GetSharedIndexArray() Indices into shared values. For example, given source array: [A,A,A,B,B,C,C,A,B] shared values are: [A,B,C] shared index array would contain: [0,0,0,1,1,2,2,0,1] Declaration public NativeArray<int> GetSharedIndexArray() Returns Type Description NativeArray < Int32 > Index NativeArray where each element refers to the index of a shared value in a list of shared (unique) values."
  },
  "api/Unity.Entities.NativeArraySharedInt.GetSharedIndexBySourceIndex.html": {
    "href": "api/Unity.Entities.NativeArraySharedInt.GetSharedIndexBySourceIndex.html",
    "title": "Method GetSharedIndexBySourceIndex | Entities | 0.17.0-preview.18",
    "keywords": "Method GetSharedIndexBySourceIndex GetSharedIndexBySourceIndex(Int32) Index of shared value associated with an element in the source buffer. For example, given source array: [A,A,A,B,B,C,C,A,B] shared values are: [A,B,C] Given the index 2 into the source array (A), the return value would be 0 (A in shared values). Declaration public int GetSharedIndexBySourceIndex(int indexIntoSourceBuffer) Parameters Type Name Description Int32 indexIntoSourceBuffer Index of source value Returns Type Description Int32 Index into the list of shared values"
  },
  "api/Unity.Entities.NativeArraySharedInt.GetSharedValueIndexCountArray.html": {
    "href": "api/Unity.Entities.NativeArraySharedInt.GetSharedValueIndexCountArray.html",
    "title": "Method GetSharedValueIndexCountArray | Entities | 0.17.0-preview.18",
    "keywords": "Method GetSharedValueIndexCountArray GetSharedValueIndexCountArray() Array of number of occurrences of all shared values. For example, given source array: [A,A,A,B,B,C,C,A,B] shared values are: [A,B,C] Shared value counts: [4,3,2] (number of occurrences of a shared value) Declaration public NativeArray<int> GetSharedValueIndexCountArray() Returns Type Description NativeArray < Int32 > Count NativeArray where each element refers to the number of occurrences of each shared value."
  },
  "api/Unity.Entities.NativeArraySharedInt.GetSharedValueIndexCountBySourceIndex.html": {
    "href": "api/Unity.Entities.NativeArraySharedInt.GetSharedValueIndexCountBySourceIndex.html",
    "title": "Method GetSharedValueIndexCountBySourceIndex | Entities | 0.17.0-preview.18",
    "keywords": "Method GetSharedValueIndexCountBySourceIndex GetSharedValueIndexCountBySourceIndex(Int32) Number of occurrences of a shared (unique) value shared by a given a source index. For example, given source array: [A,A,A,B,B,C,C,A,B] shared values are: [A,B,C] Shared value counts: [4,3,2] (number of occurrences of a shared value) Given the index 2 into the source array (A), the return value would be 4 (for 4 occurrences of A in the source buffer). Declaration public int GetSharedValueIndexCountBySourceIndex(int indexIntoSourceBuffer) Parameters Type Name Description Int32 indexIntoSourceBuffer Index of source value. Returns Type Description Int32 Count of total occurrences of the shared value at a source buffer index in the source buffer."
  },
  "api/Unity.Entities.NativeArraySharedInt.GetSharedValueIndicesBySharedIndex.html": {
    "href": "api/Unity.Entities.NativeArraySharedInt.GetSharedValueIndicesBySharedIndex.html",
    "title": "Method GetSharedValueIndicesBySharedIndex | Entities | 0.17.0-preview.18",
    "keywords": "Method GetSharedValueIndicesBySharedIndex GetSharedValueIndicesBySharedIndex(Int32) Array of indices into source NativeArray which share the same shared value For example, given source array: [A,A,A,B,B,C,C,A,B] shared values are: [A,B,C] Shared value counts: [4,3,2] (number of occurrences of a shared value) Shared value start offsets (into sorted indices): [0,4,7] Given the index 0 into the shared value array (A), the returned array would contain [0,1,2,7] (indices into the source array which point to the shared value A). Declaration public NativeArray<int> GetSharedValueIndicesBySharedIndex(int sharedValueIndex) Parameters Type Name Description Int32 sharedValueIndex Index of shared value Returns Type Description NativeArray < Int32 > Index NativeArray where each element refers to an index into the source array."
  },
  "api/Unity.Entities.NativeArraySharedInt.GetSharedValueIndicesBySourceIndex.html": {
    "href": "api/Unity.Entities.NativeArraySharedInt.GetSharedValueIndicesBySourceIndex.html",
    "title": "Method GetSharedValueIndicesBySourceIndex | Entities | 0.17.0-preview.18",
    "keywords": "Method GetSharedValueIndicesBySourceIndex GetSharedValueIndicesBySourceIndex(Int32) Array of indices into shared value indices NativeArray which share the same source value For example, given Source NativeArray: [A,A,A,B,B,C,C,A,B] shared values are: [A,B,C] Shared value indices: [0,0,0,1,1,2,2,0,1] Given the index 2 into the source array (A), the returned array would contain: [0,1,2,7] (indices in SharedValueIndices that have a value of 0, i.e. where A is in the shared values) Declaration public NativeArray<int> GetSharedValueIndicesBySourceIndex(int indexIntoSourceBuffer) Parameters Type Name Description Int32 indexIntoSourceBuffer Index of source value Returns Type Description NativeArray < Int32 > Index NativeArray where each element refers to an index into the shared value indices array."
  },
  "api/Unity.Entities.NativeArraySharedInt.GetSortedIndices.html": {
    "href": "api/Unity.Entities.NativeArraySharedInt.GetSortedIndices.html",
    "title": "Method GetSortedIndices | Entities | 0.17.0-preview.18",
    "keywords": "Method GetSortedIndices GetSortedIndices() Indices into source NativeArray sorted by value Declaration public NativeArray<int> GetSortedIndices() Returns Type Description NativeArray < Int32 > Index NativeArray where each element refers to an element in the source NativeArray"
  },
  "api/Unity.Entities.NativeArraySharedInt.html": {
    "href": "api/Unity.Entities.NativeArraySharedInt.html",
    "title": "Struct NativeArraySharedInt | Entities | 0.17.0-preview.18",
    "keywords": "Struct NativeArraySharedInt Merge sort index list referencing NativeArray values. Provide list of shared values, indices to shared values, and lists of source i value indices with identical shared value. As an example: Given Source NativeArray: [A,A,A,B,B,C,C,A,B] Provides: Shared value indices: [0,0,0,1,1,2,2,0,1] Shared value counts: [4,3,2] (number of occurrences of a shared value) Shared values: [A,B,C] (not stored in this structure) Sorted indices: [0,1,2,7,3,4,8,5,6] (using these indices to look up values in the source array would give you [A,A,A,A,B,B,B,C,C]) Shared value start offsets (into sorted indices): [0,4,7] Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct NativeArraySharedInt : IDisposable Constructors Name Description NativeArraySharedInt(NativeArray<Int32>, Allocator) Properties Name Description SharedValueCount Number of shared (unique) values in source NativeArray SourceBuffer Original Source Values (passed into constructor) Methods Name Description Dispose() GetSharedIndexArray() Indices into shared values. For example, given source array: [A,A,A,B,B,C,C,A,B] shared values are: [A,B,C] shared index array would contain: [0,0,0,1,1,2,2,0,1] GetSharedIndexBySourceIndex(Int32) Index of shared value associated with an element in the source buffer. For example, given source array: [A,A,A,B,B,C,C,A,B] shared values are: [A,B,C] Given the index 2 into the source array (A), the return value would be 0 (A in shared values). GetSharedValueIndexCountArray() Array of number of occurrences of all shared values. For example, given source array: [A,A,A,B,B,C,C,A,B] shared values are: [A,B,C] Shared value counts: [4,3,2] (number of occurrences of a shared value) GetSharedValueIndexCountBySourceIndex(Int32) Number of occurrences of a shared (unique) value shared by a given a source index. For example, given source array: [A,A,A,B,B,C,C,A,B] shared values are: [A,B,C] Shared value counts: [4,3,2] (number of occurrences of a shared value) Given the index 2 into the source array (A), the return value would be 4 (for 4 occurrences of A in the source buffer). GetSharedValueIndicesBySharedIndex(Int32) Array of indices into source NativeArray which share the same shared value For example, given source array: [A,A,A,B,B,C,C,A,B] shared values are: [A,B,C] Shared value counts: [4,3,2] (number of occurrences of a shared value) Shared value start offsets (into sorted indices): [0,4,7] Given the index 0 into the shared value array (A), the returned array would contain [0,1,2,7] (indices into the source array which point to the shared value A). GetSharedValueIndicesBySourceIndex(Int32) Array of indices into shared value indices NativeArray which share the same source value For example, given Source NativeArray: [A,A,A,B,B,C,C,A,B] shared values are: [A,B,C] Shared value indices: [0,0,0,1,1,2,2,0,1] Given the index 2 into the source array (A), the returned array would contain: [0,1,2,7] (indices in SharedValueIndices that have a value of 0, i.e. where A is in the shared values) GetSortedIndices() Indices into source NativeArray sorted by value Schedule(JobHandle) Schedule jobs to collect and sort shared values."
  },
  "api/Unity.Entities.NativeArraySharedInt.Schedule.html": {
    "href": "api/Unity.Entities.NativeArraySharedInt.Schedule.html",
    "title": "Method Schedule | Entities | 0.17.0-preview.18",
    "keywords": "Method Schedule Schedule(JobHandle) Schedule jobs to collect and sort shared values. Declaration public JobHandle Schedule(JobHandle inputDeps) Parameters Type Name Description JobHandle inputDeps Dependent JobHandle Returns Type Description JobHandle JobHandle"
  },
  "api/Unity.Entities.NativeArraySharedInt.SharedValueCount.html": {
    "href": "api/Unity.Entities.NativeArraySharedInt.SharedValueCount.html",
    "title": "Property SharedValueCount | Entities | 0.17.0-preview.18",
    "keywords": "Property SharedValueCount SharedValueCount Number of shared (unique) values in source NativeArray Declaration public int SharedValueCount { get; } Property Value Type Description Int32"
  },
  "api/Unity.Entities.NativeArraySharedInt.SourceBuffer.html": {
    "href": "api/Unity.Entities.NativeArraySharedInt.SourceBuffer.html",
    "title": "Property SourceBuffer | Entities | 0.17.0-preview.18",
    "keywords": "Property SourceBuffer SourceBuffer Original Source Values (passed into constructor) Declaration public NativeArray<int> SourceBuffer { get; } Property Value Type Description NativeArray < Int32 >"
  },
  "api/Unity.Entities.PackedComponent.html": {
    "href": "api/Unity.Entities.PackedComponent.html",
    "title": "Struct PackedComponent | Entities | 0.17.0-preview.18",
    "keywords": "Struct PackedComponent Represents a packed component within an EntityChangeSet Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct PackedComponent Fields Name Description PackedEntityIndex Entity index in the packed entities array. Entities PackedTypeIndex Type index in the packed stableTypeHash array. TypeHashes"
  },
  "api/Unity.Entities.PackedComponent.PackedEntityIndex.html": {
    "href": "api/Unity.Entities.PackedComponent.PackedEntityIndex.html",
    "title": "Field PackedEntityIndex | Entities | 0.17.0-preview.18",
    "keywords": "Field PackedEntityIndex Entity index in the packed entities array. Entities Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public int PackedEntityIndex Returns Type Description Int32"
  },
  "api/Unity.Entities.PackedComponent.PackedTypeIndex.html": {
    "href": "api/Unity.Entities.PackedComponent.PackedTypeIndex.html",
    "title": "Field PackedTypeIndex | Entities | 0.17.0-preview.18",
    "keywords": "Field PackedTypeIndex Type index in the packed stableTypeHash array. TypeHashes Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public int PackedTypeIndex Returns Type Description Int32"
  },
  "api/Unity.Entities.PackedComponentDataChange.Component.html": {
    "href": "api/Unity.Entities.PackedComponentDataChange.Component.html",
    "title": "Field Component | Entities | 0.17.0-preview.18",
    "keywords": "Field Component The entity and component this change is targeted. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public PackedComponent Component Returns Type Description PackedComponent"
  },
  "api/Unity.Entities.PackedComponentDataChange.html": {
    "href": "api/Unity.Entities.PackedComponentDataChange.html",
    "title": "Struct PackedComponentDataChange | Entities | 0.17.0-preview.18",
    "keywords": "Struct PackedComponentDataChange Represents a packed component data change within a EntityChangeSet Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct PackedComponentDataChange Fields Name Description Component The entity and component this change is targeted. Offset The start offset for this data change. Size The size of this data change. This is be the size in ComponentData for this entry."
  },
  "api/Unity.Entities.PackedComponentDataChange.Offset.html": {
    "href": "api/Unity.Entities.PackedComponentDataChange.Offset.html",
    "title": "Field Offset | Entities | 0.17.0-preview.18",
    "keywords": "Field Offset The start offset for this data change. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public int Offset Returns Type Description Int32 Remarks This is the field offset and NOT the payload offset."
  },
  "api/Unity.Entities.PackedComponentDataChange.Size.html": {
    "href": "api/Unity.Entities.PackedComponentDataChange.Size.html",
    "title": "Field Size | Entities | 0.17.0-preview.18",
    "keywords": "Field Size The size of this data change. This is be the size in ComponentData for this entry. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public int Size Returns Type Description Int32"
  },
  "api/Unity.Entities.PackedManagedComponentDataChange.BoxedValue.html": {
    "href": "api/Unity.Entities.PackedManagedComponentDataChange.BoxedValue.html",
    "title": "Field BoxedValue | Entities | 0.17.0-preview.18",
    "keywords": "Field BoxedValue Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public object BoxedValue Returns Type Description Object"
  },
  "api/Unity.Entities.PackedManagedComponentDataChange.Component.html": {
    "href": "api/Unity.Entities.PackedManagedComponentDataChange.Component.html",
    "title": "Field Component | Entities | 0.17.0-preview.18",
    "keywords": "Field Component Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public PackedComponent Component Returns Type Description PackedComponent"
  },
  "api/Unity.Entities.PackedManagedComponentDataChange.html": {
    "href": "api/Unity.Entities.PackedManagedComponentDataChange.html",
    "title": "Struct PackedManagedComponentDataChange | Entities | 0.17.0-preview.18",
    "keywords": "Struct PackedManagedComponentDataChange Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct PackedManagedComponentDataChange Fields Name Description BoxedValue Component"
  },
  "api/Unity.Entities.PackedSharedComponentDataChange.BoxedSharedValue.html": {
    "href": "api/Unity.Entities.PackedSharedComponentDataChange.BoxedSharedValue.html",
    "title": "Field BoxedSharedValue | Entities | 0.17.0-preview.18",
    "keywords": "Field BoxedSharedValue Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public object BoxedSharedValue Returns Type Description Object"
  },
  "api/Unity.Entities.PackedSharedComponentDataChange.Component.html": {
    "href": "api/Unity.Entities.PackedSharedComponentDataChange.Component.html",
    "title": "Field Component | Entities | 0.17.0-preview.18",
    "keywords": "Field Component Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public PackedComponent Component Returns Type Description PackedComponent"
  },
  "api/Unity.Entities.PackedSharedComponentDataChange.html": {
    "href": "api/Unity.Entities.PackedSharedComponentDataChange.html",
    "title": "Struct PackedSharedComponentDataChange | Entities | 0.17.0-preview.18",
    "keywords": "Struct PackedSharedComponentDataChange Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct PackedSharedComponentDataChange Fields Name Description BoxedSharedValue Component"
  },
  "api/Unity.Entities.PlaybackPolicy.html": {
    "href": "api/Unity.Entities.PlaybackPolicy.html",
    "title": "Enum PlaybackPolicy | Entities | 0.17.0-preview.18",
    "keywords": "Enum PlaybackPolicy Specifies if the EntityCommandBuffer can be played a single time or multiple times. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public enum PlaybackPolicy Fields Name Description Value SinglePlayback The EntityCommandBuffer can only be played once. After a first playback, the EntityCommandBuffer must be disposed. 0 MultiPlayback The EntityCommandBuffer can be played back more than once. 1 Extension Methods SourceGenHelpers.GetFlags()"
  },
  "api/Unity.Entities.PostLoadCommandBuffer.Clone.html": {
    "href": "api/Unity.Entities.PostLoadCommandBuffer.Clone.html",
    "title": "Method Clone | Entities | 0.17.0-preview.18",
    "keywords": "Method Clone Clone() Declaration public object Clone() Returns Type Description Object"
  },
  "api/Unity.Entities.PostLoadCommandBuffer.CommandBuffer.html": {
    "href": "api/Unity.Entities.PostLoadCommandBuffer.CommandBuffer.html",
    "title": "Field CommandBuffer | Entities | 0.17.0-preview.18",
    "keywords": "Field CommandBuffer Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public EntityCommandBuffer CommandBuffer Returns Type Description EntityCommandBuffer"
  },
  "api/Unity.Entities.PostLoadCommandBuffer.-ctor.html": {
    "href": "api/Unity.Entities.PostLoadCommandBuffer.-ctor.html",
    "title": "Constructor PostLoadCommandBuffer | Entities | 0.17.0-preview.18",
    "keywords": "Constructor PostLoadCommandBuffer PostLoadCommandBuffer() Declaration public PostLoadCommandBuffer()"
  },
  "api/Unity.Entities.PostLoadCommandBuffer.Dispose.html": {
    "href": "api/Unity.Entities.PostLoadCommandBuffer.Dispose.html",
    "title": "Method Dispose | Entities | 0.17.0-preview.18",
    "keywords": "Method Dispose Dispose() Declaration public void Dispose()"
  },
  "api/Unity.Entities.PostLoadCommandBuffer.html": {
    "href": "api/Unity.Entities.PostLoadCommandBuffer.html",
    "title": "Class PostLoadCommandBuffer | Entities | 0.17.0-preview.18",
    "keywords": "Class PostLoadCommandBuffer Inheritance Object PostLoadCommandBuffer Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class PostLoadCommandBuffer : IComponentData, IDisposable, ICloneable Constructors Name Description PostLoadCommandBuffer() Fields Name Description CommandBuffer Methods Name Description Clone() Dispose()"
  },
  "api/Unity.Entities.Prefab.html": {
    "href": "api/Unity.Entities.Prefab.html",
    "title": "Struct Prefab | Entities | 0.17.0-preview.18",
    "keywords": "Struct Prefab Marks the entity as a prefab, which implicitly disables the entity. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct Prefab : IComponentData Remarks By default, an EntityQuery ignores all entities that have a Prefab component. You can override this default behavior by setting the IncludePrefab flag of the EntityQueryDesc object used to create the query. When using the EntityQueryBuilder class in a ComponentSystem, set this flag by calling the With(EntityQueryOptions) function."
  },
  "api/Unity.Entities.PresentationSystemGroup.-ctor.html": {
    "href": "api/Unity.Entities.PresentationSystemGroup.-ctor.html",
    "title": "Constructor PresentationSystemGroup | Entities | 0.17.0-preview.18",
    "keywords": "Constructor PresentationSystemGroup PresentationSystemGroup() Declaration [Preserve] public PresentationSystemGroup()"
  },
  "api/Unity.Entities.PresentationSystemGroup.html": {
    "href": "api/Unity.Entities.PresentationSystemGroup.html",
    "title": "Class PresentationSystemGroup | Entities | 0.17.0-preview.18",
    "keywords": "Class PresentationSystemGroup Inheritance Object ComponentSystemBase ComponentSystem ComponentSystemGroup PresentationSystemGroup Inherited Members ComponentSystemGroup.Systems ComponentSystemGroup.OnCreate() ComponentSystemGroup.OnDestroy() ComponentSystemGroup.AddSystemToUpdateList(ComponentSystemBase) ComponentSystemGroup.RemoveSystemFromUpdateList(ComponentSystemBase) ComponentSystemGroup.SortSystems() ComponentSystemGroup.OnStopRunning() ComponentSystemGroup.FixedRateManager ComponentSystemGroup.OnUpdate() ComponentSystem.PostUpdateCommands ComponentSystem.InitEntityQueryCache(Int32) ComponentSystem.Entities ComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnStartRunning() ComponentSystemBase.ExecutingSystemType ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetComponentTypeHandle<T>(Boolean) ComponentSystemBase.GetDynamicComponentTypeHandle(ComponentType) ComponentSystemBase.GetBufferTypeHandle<T>(Boolean) ComponentSystemBase.GetSharedComponentTypeHandle<T>() ComponentSystemBase.GetEntityTypeHandle() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.TryGetSingleton<T>(T) ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.TryGetSingletonEntity<T>(Entity) ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class PresentationSystemGroup : ComponentSystemGroup Constructors Name Description PresentationSystemGroup() Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Entities.RegisterGenericComponentTypeAttribute.ConcreteType.html": {
    "href": "api/Unity.Entities.RegisterGenericComponentTypeAttribute.ConcreteType.html",
    "title": "Field ConcreteType | Entities | 0.17.0-preview.18",
    "keywords": "Field ConcreteType Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public Type ConcreteType Returns Type Description Type"
  },
  "api/Unity.Entities.RegisterGenericComponentTypeAttribute.-ctor.html": {
    "href": "api/Unity.Entities.RegisterGenericComponentTypeAttribute.-ctor.html",
    "title": "Constructor RegisterGenericComponentTypeAttribute | Entities | 0.17.0-preview.18",
    "keywords": "Constructor RegisterGenericComponentTypeAttribute RegisterGenericComponentTypeAttribute(Type) Declaration public RegisterGenericComponentTypeAttribute(Type type) Parameters Type Name Description Type type"
  },
  "api/Unity.Entities.RegisterGenericComponentTypeAttribute.html": {
    "href": "api/Unity.Entities.RegisterGenericComponentTypeAttribute.html",
    "title": "Class RegisterGenericComponentTypeAttribute | Entities | 0.17.0-preview.18",
    "keywords": "Class RegisterGenericComponentTypeAttribute Inheritance Object Attribute RegisterGenericComponentTypeAttribute Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [AttributeUsage(AttributeTargets.Assembly, AllowMultiple = true)] public class RegisterGenericComponentTypeAttribute : Attribute, _Attribute Constructors Name Description RegisterGenericComponentTypeAttribute(Type) Fields Name Description ConcreteType"
  },
  "api/Unity.Entities.RegisterGenericJobTypeAttribute.ConcreteType.html": {
    "href": "api/Unity.Entities.RegisterGenericJobTypeAttribute.ConcreteType.html",
    "title": "Field ConcreteType | Entities | 0.17.0-preview.18",
    "keywords": "Field ConcreteType Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public Type ConcreteType Returns Type Description Type"
  },
  "api/Unity.Entities.RegisterGenericJobTypeAttribute.-ctor.html": {
    "href": "api/Unity.Entities.RegisterGenericJobTypeAttribute.-ctor.html",
    "title": "Constructor RegisterGenericJobTypeAttribute | Entities | 0.17.0-preview.18",
    "keywords": "Constructor RegisterGenericJobTypeAttribute RegisterGenericJobTypeAttribute(Type) Declaration public RegisterGenericJobTypeAttribute(Type type) Parameters Type Name Description Type type"
  },
  "api/Unity.Entities.RegisterGenericJobTypeAttribute.html": {
    "href": "api/Unity.Entities.RegisterGenericJobTypeAttribute.html",
    "title": "Class RegisterGenericJobTypeAttribute | Entities | 0.17.0-preview.18",
    "keywords": "Class RegisterGenericJobTypeAttribute When added as an assembly-level attribute, allows creating job reflection data for instances of generic jobs. Inheritance Object Attribute RegisterGenericJobTypeAttribute Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [AttributeUsage(AttributeTargets.Assembly, AllowMultiple = true)] public class RegisterGenericJobTypeAttribute : Attribute, _Attribute Remarks This attribute allows specific instances of generic jobs to be registered for reflection data generation. Constructors Name Description RegisterGenericJobTypeAttribute(Type) Fields Name Description ConcreteType"
  },
  "api/Unity.Entities.RequestSceneLoaded.html": {
    "href": "api/Unity.Entities.RequestSceneLoaded.html",
    "title": "Struct RequestSceneLoaded | Entities | 0.17.0-preview.18",
    "keywords": "Struct RequestSceneLoaded Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct RequestSceneLoaded : IComponentData Fields Name Description LoadFlags"
  },
  "api/Unity.Entities.RequestSceneLoaded.LoadFlags.html": {
    "href": "api/Unity.Entities.RequestSceneLoaded.LoadFlags.html",
    "title": "Field LoadFlags | Entities | 0.17.0-preview.18",
    "keywords": "Field LoadFlags Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public SceneLoadFlags LoadFlags Returns Type Description SceneLoadFlags"
  },
  "api/Unity.Entities.RequireComponentTagAttribute.-ctor.html": {
    "href": "api/Unity.Entities.RequireComponentTagAttribute.-ctor.html",
    "title": "Constructor RequireComponentTagAttribute | Entities | 0.17.0-preview.18",
    "keywords": "Constructor RequireComponentTagAttribute RequireComponentTagAttribute(Type[]) Declaration public RequireComponentTagAttribute(params Type[] tagComponents) Parameters Type Name Description Type [] tagComponents"
  },
  "api/Unity.Entities.RequireComponentTagAttribute.html": {
    "href": "api/Unity.Entities.RequireComponentTagAttribute.html",
    "title": "Class RequireComponentTagAttribute | Entities | 0.17.0-preview.18",
    "keywords": "Class RequireComponentTagAttribute Inheritance Object Attribute RequireComponentTagAttribute Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [AttributeUsage(AttributeTargets.Struct)] public class RequireComponentTagAttribute : Attribute, _Attribute Constructors Name Description RequireComponentTagAttribute(Type[]) Fields Name Description TagComponents"
  },
  "api/Unity.Entities.RequireComponentTagAttribute.TagComponents.html": {
    "href": "api/Unity.Entities.RequireComponentTagAttribute.TagComponents.html",
    "title": "Field TagComponents | Entities | 0.17.0-preview.18",
    "keywords": "Field TagComponents Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public Type[] TagComponents Returns Type Description Type []"
  },
  "api/Unity.Entities.RestrictAuthoringInputToAttribute.-ctor.html": {
    "href": "api/Unity.Entities.RestrictAuthoringInputToAttribute.-ctor.html",
    "title": "Constructor RestrictAuthoringInputToAttribute | Entities | 0.17.0-preview.18",
    "keywords": "Constructor RestrictAuthoringInputToAttribute RestrictAuthoringInputToAttribute(Type) Declaration public RestrictAuthoringInputToAttribute(Type type) Parameters Type Name Description Type type"
  },
  "api/Unity.Entities.RestrictAuthoringInputToAttribute.html": {
    "href": "api/Unity.Entities.RestrictAuthoringInputToAttribute.html",
    "title": "Class RestrictAuthoringInputToAttribute | Entities | 0.17.0-preview.18",
    "keywords": "Class RestrictAuthoringInputToAttribute Inheritance Object Attribute PropertyAttribute RestrictAuthoringInputToAttribute Inherited Members PropertyAttribute.order Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [AttributeUsage(AttributeTargets.Field)] public class RestrictAuthoringInputToAttribute : PropertyAttribute, _Attribute Constructors Name Description RestrictAuthoringInputToAttribute(Type) Properties Name Description Type"
  },
  "api/Unity.Entities.RestrictAuthoringInputToAttribute.Type.html": {
    "href": "api/Unity.Entities.RestrictAuthoringInputToAttribute.Type.html",
    "title": "Property Type | Entities | 0.17.0-preview.18",
    "keywords": "Property Type Type Declaration public Type Type { get; } Property Value Type Description Type"
  },
  "api/Unity.Entities.SceneLoadFlags.html": {
    "href": "api/Unity.Entities.SceneLoadFlags.html",
    "title": "Enum SceneLoadFlags | Entities | 0.17.0-preview.18",
    "keywords": "Enum SceneLoadFlags Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Flags] public enum SceneLoadFlags Fields Name Description Value DisableAutoLoad Prevents adding a RequestSceneLoaded to the SubScene section entities when it gets created. If loading a GameObject scene, setting this flag is equivalent to setting activateOnlLoad to false. 1 BlockOnImport Wait for the SubScene to be fully converted (only relevant for Editor and LiveLink) 2 BlockOnStreamIn Disable asynchronous streaming, SubScene section will be fully loaded during the next update of the streaming system 4 LoadAdditive Set whether to load additive or not. This only applies to GameObject based scenes, not subscenes. 8 NewInstance Loads a new instance of the subscene 16 LoadAsGOScene Temporary flag to indicate that the scene is a GameObject based scene. Once addressables are in place, this information will be stored there. 512 Extension Methods SourceGenHelpers.GetFlags()"
  },
  "api/Unity.Entities.SceneReference.Equals.html": {
    "href": "api/Unity.Entities.SceneReference.Equals.html",
    "title": "Method Equals | Entities | 0.17.0-preview.18",
    "keywords": "Method Equals Equals(SceneReference) Declaration public bool Equals(SceneReference other) Parameters Type Name Description SceneReference other Returns Type Description Boolean"
  },
  "api/Unity.Entities.SceneReference.GetHashCode.html": {
    "href": "api/Unity.Entities.SceneReference.GetHashCode.html",
    "title": "Method GetHashCode | Entities | 0.17.0-preview.18",
    "keywords": "Method GetHashCode GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode()"
  },
  "api/Unity.Entities.SceneReference.html": {
    "href": "api/Unity.Entities.SceneReference.html",
    "title": "Struct SceneReference | Entities | 0.17.0-preview.18",
    "keywords": "Struct SceneReference Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct SceneReference : IComponentData, IEquatable<SceneReference> Fields Name Description SceneGUID Methods Name Description Equals(SceneReference) GetHashCode()"
  },
  "api/Unity.Entities.SceneReference.SceneGUID.html": {
    "href": "api/Unity.Entities.SceneReference.SceneGUID.html",
    "title": "Field SceneGUID | Entities | 0.17.0-preview.18",
    "keywords": "Field SceneGUID Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public Hash128 SceneGUID Returns Type Description Hash128"
  },
  "api/Unity.Entities.SceneSection.Equals.html": {
    "href": "api/Unity.Entities.SceneSection.Equals.html",
    "title": "Method Equals | Entities | 0.17.0-preview.18",
    "keywords": "Method Equals Equals(SceneSection) Declaration public bool Equals(SceneSection other) Parameters Type Name Description SceneSection other Returns Type Description Boolean"
  },
  "api/Unity.Entities.SceneSection.GetHashCode.html": {
    "href": "api/Unity.Entities.SceneSection.GetHashCode.html",
    "title": "Method GetHashCode | Entities | 0.17.0-preview.18",
    "keywords": "Method GetHashCode GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode()"
  },
  "api/Unity.Entities.SceneSection.html": {
    "href": "api/Unity.Entities.SceneSection.html",
    "title": "Struct SceneSection | Entities | 0.17.0-preview.18",
    "keywords": "Struct SceneSection Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] public struct SceneSection : ISharedComponentData, IEquatable<SceneSection> Fields Name Description SceneGUID Section Methods Name Description Equals(SceneSection) GetHashCode()"
  },
  "api/Unity.Entities.SceneSection.SceneGUID.html": {
    "href": "api/Unity.Entities.SceneSection.SceneGUID.html",
    "title": "Field SceneGUID | Entities | 0.17.0-preview.18",
    "keywords": "Field SceneGUID Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public Hash128 SceneGUID Returns Type Description Hash128"
  },
  "api/Unity.Entities.SceneSection.Section.html": {
    "href": "api/Unity.Entities.SceneSection.Section.html",
    "title": "Field Section | Entities | 0.17.0-preview.18",
    "keywords": "Field Section Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public int Section Returns Type Description Int32"
  },
  "api/Unity.Entities.SceneSectionData.BoundingVolume.html": {
    "href": "api/Unity.Entities.SceneSectionData.BoundingVolume.html",
    "title": "Field BoundingVolume | Entities | 0.17.0-preview.18",
    "keywords": "Field BoundingVolume Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public MinMaxAABB BoundingVolume Returns Type Description MinMaxAABB"
  },
  "api/Unity.Entities.SceneSectionData.FileSize.html": {
    "href": "api/Unity.Entities.SceneSectionData.FileSize.html",
    "title": "Field FileSize | Entities | 0.17.0-preview.18",
    "keywords": "Field FileSize Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public int FileSize Returns Type Description Int32"
  },
  "api/Unity.Entities.SceneSectionData.html": {
    "href": "api/Unity.Entities.SceneSectionData.html",
    "title": "Struct SceneSectionData | Entities | 0.17.0-preview.18",
    "keywords": "Struct SceneSectionData Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] public struct SceneSectionData : IComponentData Fields Name Description BoundingVolume FileSize ObjectReferenceCount SceneGUID SubSectionIndex"
  },
  "api/Unity.Entities.SceneSectionData.ObjectReferenceCount.html": {
    "href": "api/Unity.Entities.SceneSectionData.ObjectReferenceCount.html",
    "title": "Field ObjectReferenceCount | Entities | 0.17.0-preview.18",
    "keywords": "Field ObjectReferenceCount Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public int ObjectReferenceCount Returns Type Description Int32"
  },
  "api/Unity.Entities.SceneSectionData.SceneGUID.html": {
    "href": "api/Unity.Entities.SceneSectionData.SceneGUID.html",
    "title": "Field SceneGUID | Entities | 0.17.0-preview.18",
    "keywords": "Field SceneGUID Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public Hash128 SceneGUID Returns Type Description Hash128"
  },
  "api/Unity.Entities.SceneSectionData.SubSectionIndex.html": {
    "href": "api/Unity.Entities.SceneSectionData.SubSectionIndex.html",
    "title": "Field SubSectionIndex | Entities | 0.17.0-preview.18",
    "keywords": "Field SubSectionIndex Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public int SubSectionIndex Returns Type Description Int32"
  },
  "api/Unity.Entities.SceneTag.Equals.html": {
    "href": "api/Unity.Entities.SceneTag.Equals.html",
    "title": "Method Equals | Entities | 0.17.0-preview.18",
    "keywords": "Method Equals Equals(SceneTag) Two SceneTags are equal if they have the same root subscene entity. Declaration public bool Equals(SceneTag other) Parameters Type Name Description SceneTag other The other SceneTag. Returns Type Description Boolean True if both SceneTags refer to the same Subscene. False, otherwise."
  },
  "api/Unity.Entities.SceneTag.GetHashCode.html": {
    "href": "api/Unity.Entities.SceneTag.GetHashCode.html",
    "title": "Method GetHashCode | Entities | 0.17.0-preview.18",
    "keywords": "Method GetHashCode GetHashCode() A unique hash code for comparison. Declaration public override int GetHashCode() Returns Type Description Int32 The scene entity has code. Overrides ValueType.GetHashCode()"
  },
  "api/Unity.Entities.SceneTag.html": {
    "href": "api/Unity.Entities.SceneTag.html",
    "title": "Struct SceneTag | Entities | 0.17.0-preview.18",
    "keywords": "Struct SceneTag A Unity-defined shared component assigned to all entities in the same subscene. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] public struct SceneTag : ISharedComponentData, IEquatable<SceneTag> Fields Name Description SceneEntity The root entity of the subscene. Methods Name Description Equals(SceneTag) Two SceneTags are equal if they have the same root subscene entity. GetHashCode() A unique hash code for comparison. ToString() A string for logging."
  },
  "api/Unity.Entities.SceneTag.SceneEntity.html": {
    "href": "api/Unity.Entities.SceneTag.SceneEntity.html",
    "title": "Field SceneEntity | Entities | 0.17.0-preview.18",
    "keywords": "Field SceneEntity The root entity of the subscene. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public Entity SceneEntity Returns Type Description Entity"
  },
  "api/Unity.Entities.SceneTag.ToString.html": {
    "href": "api/Unity.Entities.SceneTag.ToString.html",
    "title": "Method ToString | Entities | 0.17.0-preview.18",
    "keywords": "Method ToString ToString() A string for logging. Declaration public override string ToString() Returns Type Description String A string identifying the root subscene entity. Overrides ValueType.ToString()"
  },
  "api/Unity.Entities.SceneViewWorldPositionAttribute.html": {
    "href": "api/Unity.Entities.SceneViewWorldPositionAttribute.html",
    "title": "Class SceneViewWorldPositionAttribute | Entities | 0.17.0-preview.18",
    "keywords": "Class SceneViewWorldPositionAttribute Inheritance Object Attribute SceneViewWorldPositionAttribute Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class SceneViewWorldPositionAttribute : Attribute, _Attribute"
  },
  "api/Unity.Entities.ScriptBehaviourUpdateOrder.AddWorldToCurrentPlayerLoop.html": {
    "href": "api/Unity.Entities.ScriptBehaviourUpdateOrder.AddWorldToCurrentPlayerLoop.html",
    "title": "Method AddWorldToCurrentPlayerLoop | Entities | 0.17.0-preview.18",
    "keywords": "Method AddWorldToCurrentPlayerLoop AddWorldToCurrentPlayerLoop(World) Add this World's three default top-level system groups to the current Unity player loop. Declaration public static void AddWorldToCurrentPlayerLoop(World world) Parameters Type Name Description World world The three top-level system groups from this World will be added to the provided player loop. Remarks This is a convenience wrapper around AddWorldToPlayerLoop() that retrieves the current player loop, adds a World's top-level system groups to it, and sets the modified copy as the new active player loop. Note that modifications to the active player loop do not take effect until to the next iteration through the player loop."
  },
  "api/Unity.Entities.ScriptBehaviourUpdateOrder.AddWorldToPlayerLoop.html": {
    "href": "api/Unity.Entities.ScriptBehaviourUpdateOrder.AddWorldToPlayerLoop.html",
    "title": "Method AddWorldToPlayerLoop | Entities | 0.17.0-preview.18",
    "keywords": "Method AddWorldToPlayerLoop AddWorldToPlayerLoop(World, ref PlayerLoopSystem) Add this World's three default top-level system groups to a PlayerLoopSystem object. Declaration public static void AddWorldToPlayerLoop(World world, ref PlayerLoopSystem playerLoop) Parameters Type Name Description World world The three top-level system groups from this World will be added to the provided player loop. PlayerLoopSystem playerLoop Existing player loop to modify (e.g. (e.g. PlayerLoop.GetCurrentPlayerLoop()) Remarks This function performs the following modifications to the provided PlayerLoopSystem: If an instance of InitializationSystemGroup exists in this World, it is appended to the Initialization player loop phase. If an instance of SimulationSystemGroup exists in this World, it is appended to the Update player loop phase. If an instance of PresentationSystemGroup exists in this World, it is appended to the PreLateUpdate player loop phase. If instances of any or all of these system groups don't exist in this World, then no entry is added to the player loop for that system group. This function does not change the currently active player loop. If this behavior is desired, it's necessary to call PlayerLoop.SetPlayerLoop(playerLoop) after the systems have been removed."
  },
  "api/Unity.Entities.ScriptBehaviourUpdateOrder.AppendSystemToPlayerLoopList.html": {
    "href": "api/Unity.Entities.ScriptBehaviourUpdateOrder.AppendSystemToPlayerLoopList.html",
    "title": "Method AppendSystemToPlayerLoopList | Entities | 0.17.0-preview.18",
    "keywords": "Method AppendSystemToPlayerLoopList AppendSystemToPlayerLoopList(ComponentSystemBase, ref PlayerLoopSystem, Type) Add an ECS system to a specific point in the Unity player loop, so that it is updated every frame. Declaration public static void AppendSystemToPlayerLoopList(ComponentSystemBase system, ref PlayerLoopSystem playerLoop, Type playerLoopSystemType) Parameters Type Name Description ComponentSystemBase system The ECS system to add to the player loop. PlayerLoopSystem playerLoop Existing player loop to modify (e.g. PlayerLoop.GetCurrentPlayerLoop()) Type playerLoopSystemType The Type of the PlayerLoopSystem subsystem to which the ECS system should be appended. See the UnityEngine.PlayerLoop namespace for valid values. Remarks This function does not change the currently active player loop. If this behavior is desired, it's necessary to call PlayerLoop.SetPlayerLoop(playerLoop) after the systems have been removed."
  },
  "api/Unity.Entities.ScriptBehaviourUpdateOrder.html": {
    "href": "api/Unity.Entities.ScriptBehaviourUpdateOrder.html",
    "title": "Class ScriptBehaviourUpdateOrder | Entities | 0.17.0-preview.18",
    "keywords": "Class ScriptBehaviourUpdateOrder Inheritance Object ScriptBehaviourUpdateOrder Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class ScriptBehaviourUpdateOrder Methods Name Description AddWorldToCurrentPlayerLoop(World) Add this World's three default top-level system groups to the current Unity player loop. AddWorldToPlayerLoop(World, ref PlayerLoopSystem) Add this World's three default top-level system groups to a PlayerLoopSystem object. AppendSystemToPlayerLoopList(ComponentSystemBase, ref PlayerLoopSystem, Type) Add an ECS system to a specific point in the Unity player loop, so that it is updated every frame. IsWorldInCurrentPlayerLoop(World) Search the currently active player loop for any systems added by this World. IsWorldInPlayerLoop(World, PlayerLoopSystem) Search the provided player loop for any systems added by this World. RemoveWorldFromCurrentPlayerLoop(World) Remove all of this World's systems from the currently active player loop. RemoveWorldFromPlayerLoop(World, ref PlayerLoopSystem) Remove all of this World's systems from the specified player loop."
  },
  "api/Unity.Entities.ScriptBehaviourUpdateOrder.IsWorldInCurrentPlayerLoop.html": {
    "href": "api/Unity.Entities.ScriptBehaviourUpdateOrder.IsWorldInCurrentPlayerLoop.html",
    "title": "Method IsWorldInCurrentPlayerLoop | Entities | 0.17.0-preview.18",
    "keywords": "Method IsWorldInCurrentPlayerLoop IsWorldInCurrentPlayerLoop(World) Search the currently active player loop for any systems added by this World. Declaration public static bool IsWorldInCurrentPlayerLoop(World world) Parameters Type Name Description World world The function will search the currently active player loop for systems owned by this World. Returns Type Description Boolean Remarks This is a convenience wrapper around IsWorldInPlayerLoop() that always searches the currently active player loop."
  },
  "api/Unity.Entities.ScriptBehaviourUpdateOrder.IsWorldInPlayerLoop.html": {
    "href": "api/Unity.Entities.ScriptBehaviourUpdateOrder.IsWorldInPlayerLoop.html",
    "title": "Method IsWorldInPlayerLoop | Entities | 0.17.0-preview.18",
    "keywords": "Method IsWorldInPlayerLoop IsWorldInPlayerLoop(World, PlayerLoopSystem) Search the provided player loop for any systems added by this World. Declaration public static bool IsWorldInPlayerLoop(World world, PlayerLoopSystem playerLoop) Parameters Type Name Description World world The function will search the provided PlayerLoopSystem for systems owned by this World. PlayerLoopSystem playerLoop Existing player loop to search (e.g. PlayerLoop.GetCurrentPlayerLoop()) Returns Type Description Boolean True if any of this World's systems are found in the provided player loop; otherwise, false. Remarks Note that systems are not added to the player loop directly; they are wrapped by a DummyDelegate object that calls the system's Update() method. Any systems added to the loop using other wrapper mechanisms will not be detected by this function."
  },
  "api/Unity.Entities.ScriptBehaviourUpdateOrder.RemoveWorldFromCurrentPlayerLoop.html": {
    "href": "api/Unity.Entities.ScriptBehaviourUpdateOrder.RemoveWorldFromCurrentPlayerLoop.html",
    "title": "Method RemoveWorldFromCurrentPlayerLoop | Entities | 0.17.0-preview.18",
    "keywords": "Method RemoveWorldFromCurrentPlayerLoop RemoveWorldFromCurrentPlayerLoop(World) Remove all of this World's systems from the currently active player loop. Declaration public static void RemoveWorldFromCurrentPlayerLoop(World world) Parameters Type Name Description World world All systems in the current player loop owned by this World will be removed from the player loop. Remarks This is a convenience wrapper around RemoveWorldToPlayerLoop() that retrieves the current player loop, removes a World's systems from it, and sets the modified copy as the new active player loop. Note that modifications to the active player loop do not take effect until to the next iteration through the player loop."
  },
  "api/Unity.Entities.ScriptBehaviourUpdateOrder.RemoveWorldFromPlayerLoop.html": {
    "href": "api/Unity.Entities.ScriptBehaviourUpdateOrder.RemoveWorldFromPlayerLoop.html",
    "title": "Method RemoveWorldFromPlayerLoop | Entities | 0.17.0-preview.18",
    "keywords": "Method RemoveWorldFromPlayerLoop RemoveWorldFromPlayerLoop(World, ref PlayerLoopSystem) Remove all of this World's systems from the specified player loop. Declaration public static void RemoveWorldFromPlayerLoop(World world, ref PlayerLoopSystem playerLoop) Parameters Type Name Description World world All systems in the provided player loop owned by this World will be removed from the player loop. PlayerLoopSystem playerLoop Existing player loop to modify (e.g. PlayerLoop.GetCurrentPlayerLoop()) Remarks Only the systems from this World will be removed; other player loop modifications (including systems added by other Worlds) will not be affected. This function does not change the currently active player loop. If this behavior is desired, it's necessary to call PlayerLoop.SetPlayerLoop(playerLoop) after the systems have been removed."
  },
  "api/Unity.Entities.SectionMetadataSetup.html": {
    "href": "api/Unity.Entities.SectionMetadataSetup.html",
    "title": "Struct SectionMetadataSetup | Entities | 0.17.0-preview.18",
    "keywords": "Struct SectionMetadataSetup Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct SectionMetadataSetup : ISharedComponentData Fields Name Description SceneSectionIndex"
  },
  "api/Unity.Entities.SectionMetadataSetup.SceneSectionIndex.html": {
    "href": "api/Unity.Entities.SectionMetadataSetup.SceneSectionIndex.html",
    "title": "Field SceneSectionIndex | Entities | 0.17.0-preview.18",
    "keywords": "Field SceneSectionIndex Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public int SceneSectionIndex Returns Type Description Int32"
  },
  "api/Unity.Entities.Serialization.BinaryReader.html": {
    "href": "api/Unity.Entities.Serialization.BinaryReader.html",
    "title": "Interface BinaryReader | Entities | 0.17.0-preview.18",
    "keywords": "Interface BinaryReader Namespace : Unity.Entities.Serialization <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface BinaryReader : IDisposable Methods Name Description ReadBytes(Void*, Int32) Extension Methods BlobAssetSerializeExtensions.Read<T>(BinaryReader) BinaryReaderExtensions.ReadByte(BinaryReader) BinaryReaderExtensions.ReadInt(BinaryReader) BinaryReaderExtensions.ReadULong(BinaryReader) BinaryReaderExtensions.ReadBytes(BinaryReader, NativeArray<Byte>, Int32, Int32) BinaryReaderExtensions.ReadArray<T>(BinaryReader, NativeArray<T>, Int32)"
  },
  "api/Unity.Entities.Serialization.BinaryReader.ReadBytes.html": {
    "href": "api/Unity.Entities.Serialization.BinaryReader.ReadBytes.html",
    "title": "Method ReadBytes | Entities | 0.17.0-preview.18",
    "keywords": "Method ReadBytes ReadBytes(Void*, Int32) Declaration void ReadBytes(void *data, int bytes) Parameters Type Name Description Void * data Int32 bytes"
  },
  "api/Unity.Entities.Serialization.BinaryReaderExtensions.html": {
    "href": "api/Unity.Entities.Serialization.BinaryReaderExtensions.html",
    "title": "Class BinaryReaderExtensions | Entities | 0.17.0-preview.18",
    "keywords": "Class BinaryReaderExtensions Inheritance Object BinaryReaderExtensions Namespace : Unity.Entities.Serialization <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class BinaryReaderExtensions Methods Name Description ReadArray<T>(BinaryReader, NativeArray<T>, Int32) ReadByte(BinaryReader) ReadBytes(BinaryReader, NativeArray<Byte>, Int32, Int32) ReadInt(BinaryReader) ReadULong(BinaryReader)"
  },
  "api/Unity.Entities.Serialization.BinaryReaderExtensions.ReadArray.html": {
    "href": "api/Unity.Entities.Serialization.BinaryReaderExtensions.ReadArray.html",
    "title": "Method ReadArray | Entities | 0.17.0-preview.18",
    "keywords": "Method ReadArray ReadArray<T>(BinaryReader, NativeArray<T>, Int32) Declaration public static void ReadArray<T>(this BinaryReader reader, NativeArray<T> elements, int count) where T : struct Parameters Type Name Description BinaryReader reader NativeArray <T> elements Int32 count Type Parameters Name Description T"
  },
  "api/Unity.Entities.Serialization.BinaryReaderExtensions.ReadByte.html": {
    "href": "api/Unity.Entities.Serialization.BinaryReaderExtensions.ReadByte.html",
    "title": "Method ReadByte | Entities | 0.17.0-preview.18",
    "keywords": "Method ReadByte ReadByte(BinaryReader) Declaration public static byte ReadByte(this BinaryReader reader) Parameters Type Name Description BinaryReader reader Returns Type Description Byte"
  },
  "api/Unity.Entities.Serialization.BinaryReaderExtensions.ReadBytes.html": {
    "href": "api/Unity.Entities.Serialization.BinaryReaderExtensions.ReadBytes.html",
    "title": "Method ReadBytes | Entities | 0.17.0-preview.18",
    "keywords": "Method ReadBytes ReadBytes(BinaryReader, NativeArray<Byte>, Int32, Int32) Declaration public static void ReadBytes(this BinaryReader writer, NativeArray<byte> elements, int count, int offset = 0) Parameters Type Name Description BinaryReader writer NativeArray < Byte > elements Int32 count Int32 offset"
  },
  "api/Unity.Entities.Serialization.BinaryReaderExtensions.ReadInt.html": {
    "href": "api/Unity.Entities.Serialization.BinaryReaderExtensions.ReadInt.html",
    "title": "Method ReadInt | Entities | 0.17.0-preview.18",
    "keywords": "Method ReadInt ReadInt(BinaryReader) Declaration public static int ReadInt(this BinaryReader reader) Parameters Type Name Description BinaryReader reader Returns Type Description Int32"
  },
  "api/Unity.Entities.Serialization.BinaryReaderExtensions.ReadULong.html": {
    "href": "api/Unity.Entities.Serialization.BinaryReaderExtensions.ReadULong.html",
    "title": "Method ReadULong | Entities | 0.17.0-preview.18",
    "keywords": "Method ReadULong ReadULong(BinaryReader) Declaration public static ulong ReadULong(this BinaryReader reader) Parameters Type Name Description BinaryReader reader Returns Type Description UInt64"
  },
  "api/Unity.Entities.Serialization.BinaryWriter.html": {
    "href": "api/Unity.Entities.Serialization.BinaryWriter.html",
    "title": "Interface BinaryWriter | Entities | 0.17.0-preview.18",
    "keywords": "Interface BinaryWriter Namespace : Unity.Entities.Serialization <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface BinaryWriter : IDisposable Methods Name Description WriteBytes(Void*, Int32) Extension Methods BlobAssetSerializeExtensions.Write<T>(BinaryWriter, BlobAssetReference<T>) BinaryWriterExtensions.Write(BinaryWriter, Byte) BinaryWriterExtensions.Write(BinaryWriter, Int32) BinaryWriterExtensions.Write(BinaryWriter, UInt64) BinaryWriterExtensions.Write(BinaryWriter, Byte[]) BinaryWriterExtensions.WriteArray<T>(BinaryWriter, NativeArray<T>) BinaryWriterExtensions.WriteList<T>(BinaryWriter, NativeList<T>)"
  },
  "api/Unity.Entities.Serialization.BinaryWriter.WriteBytes.html": {
    "href": "api/Unity.Entities.Serialization.BinaryWriter.WriteBytes.html",
    "title": "Method WriteBytes | Entities | 0.17.0-preview.18",
    "keywords": "Method WriteBytes WriteBytes(Void*, Int32) Declaration void WriteBytes(void *data, int bytes) Parameters Type Name Description Void * data Int32 bytes"
  },
  "api/Unity.Entities.Serialization.BinaryWriterExtensions.html": {
    "href": "api/Unity.Entities.Serialization.BinaryWriterExtensions.html",
    "title": "Class BinaryWriterExtensions | Entities | 0.17.0-preview.18",
    "keywords": "Class BinaryWriterExtensions Inheritance Object BinaryWriterExtensions Namespace : Unity.Entities.Serialization <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class BinaryWriterExtensions Methods Name Description Write(BinaryWriter, Byte) Write(BinaryWriter, Byte[]) Write(BinaryWriter, Int32) Write(BinaryWriter, UInt64) WriteArray<T>(BinaryWriter, NativeArray<T>) WriteList<T>(BinaryWriter, NativeList<T>)"
  },
  "api/Unity.Entities.Serialization.BinaryWriterExtensions.Write.html": {
    "href": "api/Unity.Entities.Serialization.BinaryWriterExtensions.Write.html",
    "title": "Method Write | Entities | 0.17.0-preview.18",
    "keywords": "Method Write Write(BinaryWriter, Byte) Declaration public static void Write(this BinaryWriter writer, byte value) Parameters Type Name Description BinaryWriter writer Byte value Write(BinaryWriter, Int32) Declaration public static void Write(this BinaryWriter writer, int value) Parameters Type Name Description BinaryWriter writer Int32 value Write(BinaryWriter, UInt64) Declaration public static void Write(this BinaryWriter writer, ulong value) Parameters Type Name Description BinaryWriter writer UInt64 value Write(BinaryWriter, Byte[]) Declaration public static void Write(this BinaryWriter writer, byte[] bytes) Parameters Type Name Description BinaryWriter writer Byte [] bytes"
  },
  "api/Unity.Entities.Serialization.BinaryWriterExtensions.WriteArray.html": {
    "href": "api/Unity.Entities.Serialization.BinaryWriterExtensions.WriteArray.html",
    "title": "Method WriteArray | Entities | 0.17.0-preview.18",
    "keywords": "Method WriteArray WriteArray<T>(BinaryWriter, NativeArray<T>) Declaration public static void WriteArray<T>(this BinaryWriter writer, NativeArray<T> data) where T : struct Parameters Type Name Description BinaryWriter writer NativeArray <T> data Type Parameters Name Description T"
  },
  "api/Unity.Entities.Serialization.BinaryWriterExtensions.WriteList.html": {
    "href": "api/Unity.Entities.Serialization.BinaryWriterExtensions.WriteList.html",
    "title": "Method WriteList | Entities | 0.17.0-preview.18",
    "keywords": "Method WriteList WriteList<T>(BinaryWriter, NativeList<T>) Declaration public static void WriteList<T>(this BinaryWriter writer, NativeList<T> data) where T : struct Parameters Type Name Description BinaryWriter writer Unity.Collections.NativeList <T> data Type Parameters Name Description T"
  },
  "api/Unity.Entities.Serialization.html": {
    "href": "api/Unity.Entities.Serialization.html",
    "title": "Namespace Unity.Entities.Serialization | Entities | 0.17.0-preview.18",
    "keywords": "Namespace Unity.Entities.Serialization Classes BinaryReaderExtensions BinaryWriterExtensions MemoryBinaryReader MemoryBinaryWriter SerializeUtility StreamBinaryReader StreamBinaryWriter Interfaces BinaryReader BinaryWriter"
  },
  "api/Unity.Entities.Serialization.MemoryBinaryReader.-ctor.html": {
    "href": "api/Unity.Entities.Serialization.MemoryBinaryReader.-ctor.html",
    "title": "Constructor MemoryBinaryReader | Entities | 0.17.0-preview.18",
    "keywords": "Constructor MemoryBinaryReader MemoryBinaryReader(Byte*) Declaration public MemoryBinaryReader(byte *content) Parameters Type Name Description Byte * content"
  },
  "api/Unity.Entities.Serialization.MemoryBinaryReader.Dispose.html": {
    "href": "api/Unity.Entities.Serialization.MemoryBinaryReader.Dispose.html",
    "title": "Method Dispose | Entities | 0.17.0-preview.18",
    "keywords": "Method Dispose Dispose() Declaration public void Dispose()"
  },
  "api/Unity.Entities.Serialization.MemoryBinaryReader.html": {
    "href": "api/Unity.Entities.Serialization.MemoryBinaryReader.html",
    "title": "Class MemoryBinaryReader | Entities | 0.17.0-preview.18",
    "keywords": "Class MemoryBinaryReader Inheritance Object MemoryBinaryReader Namespace : Unity.Entities.Serialization <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class MemoryBinaryReader : BinaryReader, IDisposable Constructors Name Description MemoryBinaryReader(Byte*) Methods Name Description Dispose() ReadBytes(Void*, Int32) Extension Methods BlobAssetSerializeExtensions.Read<T>(BinaryReader) BinaryReaderExtensions.ReadByte(BinaryReader) BinaryReaderExtensions.ReadInt(BinaryReader) BinaryReaderExtensions.ReadULong(BinaryReader) BinaryReaderExtensions.ReadBytes(BinaryReader, NativeArray<Byte>, Int32, Int32) BinaryReaderExtensions.ReadArray<T>(BinaryReader, NativeArray<T>, Int32)"
  },
  "api/Unity.Entities.Serialization.MemoryBinaryReader.ReadBytes.html": {
    "href": "api/Unity.Entities.Serialization.MemoryBinaryReader.ReadBytes.html",
    "title": "Method ReadBytes | Entities | 0.17.0-preview.18",
    "keywords": "Method ReadBytes ReadBytes(Void*, Int32) Declaration public void ReadBytes(void *data, int bytes) Parameters Type Name Description Void * data Int32 bytes Implements BinaryReader.ReadBytes(Void*, Int32)"
  },
  "api/Unity.Entities.Serialization.MemoryBinaryWriter.Data.html": {
    "href": "api/Unity.Entities.Serialization.MemoryBinaryWriter.Data.html",
    "title": "Property Data | Entities | 0.17.0-preview.18",
    "keywords": "Property Data Data Declaration public byte *Data { get; } Property Value Type Description Byte *"
  },
  "api/Unity.Entities.Serialization.MemoryBinaryWriter.Dispose.html": {
    "href": "api/Unity.Entities.Serialization.MemoryBinaryWriter.Dispose.html",
    "title": "Method Dispose | Entities | 0.17.0-preview.18",
    "keywords": "Method Dispose Dispose() Declaration public void Dispose()"
  },
  "api/Unity.Entities.Serialization.MemoryBinaryWriter.html": {
    "href": "api/Unity.Entities.Serialization.MemoryBinaryWriter.html",
    "title": "Class MemoryBinaryWriter | Entities | 0.17.0-preview.18",
    "keywords": "Class MemoryBinaryWriter Inheritance Object MemoryBinaryWriter Namespace : Unity.Entities.Serialization <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class MemoryBinaryWriter : BinaryWriter, IDisposable Properties Name Description Data Length Methods Name Description Dispose() WriteBytes(Void*, Int32) Extension Methods BlobAssetSerializeExtensions.Write<T>(BinaryWriter, BlobAssetReference<T>) BinaryWriterExtensions.Write(BinaryWriter, Byte) BinaryWriterExtensions.Write(BinaryWriter, Int32) BinaryWriterExtensions.Write(BinaryWriter, UInt64) BinaryWriterExtensions.Write(BinaryWriter, Byte[]) BinaryWriterExtensions.WriteArray<T>(BinaryWriter, NativeArray<T>) BinaryWriterExtensions.WriteList<T>(BinaryWriter, NativeList<T>)"
  },
  "api/Unity.Entities.Serialization.MemoryBinaryWriter.Length.html": {
    "href": "api/Unity.Entities.Serialization.MemoryBinaryWriter.Length.html",
    "title": "Property Length | Entities | 0.17.0-preview.18",
    "keywords": "Property Length Length Declaration public int Length { get; } Property Value Type Description Int32"
  },
  "api/Unity.Entities.Serialization.MemoryBinaryWriter.WriteBytes.html": {
    "href": "api/Unity.Entities.Serialization.MemoryBinaryWriter.WriteBytes.html",
    "title": "Method WriteBytes | Entities | 0.17.0-preview.18",
    "keywords": "Method WriteBytes WriteBytes(Void*, Int32) Declaration public void WriteBytes(void *data, int bytes) Parameters Type Name Description Void * data Int32 bytes Implements BinaryWriter.WriteBytes(Void*, Int32)"
  },
  "api/Unity.Entities.Serialization.SerializeUtility.CurrentFileFormatVersion.html": {
    "href": "api/Unity.Entities.Serialization.SerializeUtility.CurrentFileFormatVersion.html",
    "title": "Field CurrentFileFormatVersion | Entities | 0.17.0-preview.18",
    "keywords": "Field CurrentFileFormatVersion Namespace : Unity.Entities.Serialization <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static int CurrentFileFormatVersion Returns Type Description Int32"
  },
  "api/Unity.Entities.Serialization.SerializeUtility.DeserializeWorld.html": {
    "href": "api/Unity.Entities.Serialization.SerializeUtility.DeserializeWorld.html",
    "title": "Method DeserializeWorld | Entities | 0.17.0-preview.18",
    "keywords": "Method DeserializeWorld DeserializeWorld(ExclusiveEntityTransaction, BinaryReader, Object[]) Declaration public static void DeserializeWorld(ExclusiveEntityTransaction manager, BinaryReader reader, object[] unityObjects = null) Parameters Type Name Description ExclusiveEntityTransaction manager BinaryReader reader Object [] unityObjects"
  },
  "api/Unity.Entities.Serialization.SerializeUtility.GetSceneSectionEntity.html": {
    "href": "api/Unity.Entities.Serialization.SerializeUtility.GetSceneSectionEntity.html",
    "title": "Method GetSceneSectionEntity | Entities | 0.17.0-preview.18",
    "keywords": "Method GetSceneSectionEntity GetSceneSectionEntity(Int32, EntityManager, ref EntityQuery, Boolean) Gets the entity representing the scene section with the index passed in. If createIfMissing is true the section entity is created if it doesn't already exist. Metadata components added to this section entity will be serialized into the entity scene header. At runtime these components will be added to the scene section entities when the scene is resolved. Only struct IComponentData components without BlobAssetReferences or Entity members are supported. Declaration public static Entity GetSceneSectionEntity(int sectionIndex, EntityManager manager, ref EntityQuery cachedSceneSectionEntityQuery, bool createIfMissing = true) Parameters Type Name Description Int32 sectionIndex The section index for which to get the scene section entity EntityManager manager The entity manager to which the entity belongs EntityQuery cachedSceneSectionEntityQuery The EntityQuery used to find the entity. Initially an null query should be passed in, the same query can the be passed in for subsequent calls to avoid recreating the query Boolean createIfMissing If true the section entity is created if it doesn't already exist. If false Entity.Null is returned for missing section entities Returns Type Description Entity The entity representing the scene section"
  },
  "api/Unity.Entities.Serialization.SerializeUtility.html": {
    "href": "api/Unity.Entities.Serialization.SerializeUtility.html",
    "title": "Class SerializeUtility | Entities | 0.17.0-preview.18",
    "keywords": "Class SerializeUtility Inheritance Object SerializeUtility Namespace : Unity.Entities.Serialization <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class SerializeUtility Fields Name Description CurrentFileFormatVersion Methods Name Description DeserializeWorld(ExclusiveEntityTransaction, BinaryReader, Object[]) GetSceneSectionEntity(Int32, EntityManager, ref EntityQuery, Boolean) Gets the entity representing the scene section with the index passed in. If createIfMissing is true the section entity is created if it doesn't already exist. Metadata components added to this section entity will be serialized into the entity scene header. At runtime these components will be added to the scene section entities when the scene is resolved. Only struct IComponentData components without BlobAssetReferences or Entity members are supported. SerializeWorld(EntityManager, BinaryWriter) SerializeWorld(EntityManager, BinaryWriter, out Object[]) SerializeWorld(EntityManager, BinaryWriter, out Object[], NativeArray<EntityRemapUtility.EntityRemapInfo>) SerializeWorld(EntityManager, BinaryWriter, NativeArray<EntityRemapUtility.EntityRemapInfo>)"
  },
  "api/Unity.Entities.Serialization.SerializeUtility.SerializeWorld.html": {
    "href": "api/Unity.Entities.Serialization.SerializeUtility.SerializeWorld.html",
    "title": "Method SerializeWorld | Entities | 0.17.0-preview.18",
    "keywords": "Method SerializeWorld SerializeWorld(EntityManager, BinaryWriter) Declaration public static void SerializeWorld(EntityManager entityManager, BinaryWriter writer) Parameters Type Name Description EntityManager entityManager BinaryWriter writer SerializeWorld(EntityManager, BinaryWriter, out Object[]) Declaration public static void SerializeWorld(EntityManager entityManager, BinaryWriter writer, out object[] referencedObjects) Parameters Type Name Description EntityManager entityManager BinaryWriter writer Object [] referencedObjects SerializeWorld(EntityManager, BinaryWriter, NativeArray<EntityRemapUtility.EntityRemapInfo>) Declaration public static void SerializeWorld(EntityManager entityManager, BinaryWriter writer, NativeArray<EntityRemapUtility.EntityRemapInfo> entityRemapInfos) Parameters Type Name Description EntityManager entityManager BinaryWriter writer NativeArray < EntityRemapUtility.EntityRemapInfo > entityRemapInfos SerializeWorld(EntityManager, BinaryWriter, out Object[], NativeArray<EntityRemapUtility.EntityRemapInfo>) Declaration public static void SerializeWorld(EntityManager entityManager, BinaryWriter writer, out object[] referencedObjects, NativeArray<EntityRemapUtility.EntityRemapInfo> entityRemapInfos) Parameters Type Name Description EntityManager entityManager BinaryWriter writer Object [] referencedObjects NativeArray < EntityRemapUtility.EntityRemapInfo > entityRemapInfos"
  },
  "api/Unity.Entities.Serialization.StreamBinaryReader.-ctor.html": {
    "href": "api/Unity.Entities.Serialization.StreamBinaryReader.-ctor.html",
    "title": "Constructor StreamBinaryReader | Entities | 0.17.0-preview.18",
    "keywords": "Constructor StreamBinaryReader StreamBinaryReader(String, Int64) Declaration public StreamBinaryReader(string filePath, long bufferSize = 65536L) Parameters Type Name Description String filePath Int64 bufferSize"
  },
  "api/Unity.Entities.Serialization.StreamBinaryReader.Dispose.html": {
    "href": "api/Unity.Entities.Serialization.StreamBinaryReader.Dispose.html",
    "title": "Method Dispose | Entities | 0.17.0-preview.18",
    "keywords": "Method Dispose Dispose() Declaration public void Dispose()"
  },
  "api/Unity.Entities.Serialization.StreamBinaryReader.html": {
    "href": "api/Unity.Entities.Serialization.StreamBinaryReader.html",
    "title": "Class StreamBinaryReader | Entities | 0.17.0-preview.18",
    "keywords": "Class StreamBinaryReader Inheritance Object StreamBinaryReader Namespace : Unity.Entities.Serialization <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class StreamBinaryReader : BinaryReader, IDisposable Constructors Name Description StreamBinaryReader(String, Int64) Methods Name Description Dispose() ReadBytes(Void*, Int32) Extension Methods BlobAssetSerializeExtensions.Read<T>(BinaryReader) BinaryReaderExtensions.ReadByte(BinaryReader) BinaryReaderExtensions.ReadInt(BinaryReader) BinaryReaderExtensions.ReadULong(BinaryReader) BinaryReaderExtensions.ReadBytes(BinaryReader, NativeArray<Byte>, Int32, Int32) BinaryReaderExtensions.ReadArray<T>(BinaryReader, NativeArray<T>, Int32)"
  },
  "api/Unity.Entities.Serialization.StreamBinaryReader.ReadBytes.html": {
    "href": "api/Unity.Entities.Serialization.StreamBinaryReader.ReadBytes.html",
    "title": "Method ReadBytes | Entities | 0.17.0-preview.18",
    "keywords": "Method ReadBytes ReadBytes(Void*, Int32) Declaration public void ReadBytes(void *data, int bytes) Parameters Type Name Description Void * data Int32 bytes Implements BinaryReader.ReadBytes(Void*, Int32)"
  },
  "api/Unity.Entities.Serialization.StreamBinaryWriter.-ctor.html": {
    "href": "api/Unity.Entities.Serialization.StreamBinaryWriter.-ctor.html",
    "title": "Constructor StreamBinaryWriter | Entities | 0.17.0-preview.18",
    "keywords": "Constructor StreamBinaryWriter StreamBinaryWriter(String, Int32) Declaration public StreamBinaryWriter(string fileName, int bufferSize = 65536) Parameters Type Name Description String fileName Int32 bufferSize"
  },
  "api/Unity.Entities.Serialization.StreamBinaryWriter.Dispose.html": {
    "href": "api/Unity.Entities.Serialization.StreamBinaryWriter.Dispose.html",
    "title": "Method Dispose | Entities | 0.17.0-preview.18",
    "keywords": "Method Dispose Dispose() Declaration public void Dispose()"
  },
  "api/Unity.Entities.Serialization.StreamBinaryWriter.html": {
    "href": "api/Unity.Entities.Serialization.StreamBinaryWriter.html",
    "title": "Class StreamBinaryWriter | Entities | 0.17.0-preview.18",
    "keywords": "Class StreamBinaryWriter Inheritance Object StreamBinaryWriter Namespace : Unity.Entities.Serialization <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class StreamBinaryWriter : BinaryWriter, IDisposable Constructors Name Description StreamBinaryWriter(String, Int32) Properties Name Description Length Methods Name Description Dispose() WriteBytes(Void*, Int32) Extension Methods BlobAssetSerializeExtensions.Write<T>(BinaryWriter, BlobAssetReference<T>) BinaryWriterExtensions.Write(BinaryWriter, Byte) BinaryWriterExtensions.Write(BinaryWriter, Int32) BinaryWriterExtensions.Write(BinaryWriter, UInt64) BinaryWriterExtensions.Write(BinaryWriter, Byte[]) BinaryWriterExtensions.WriteArray<T>(BinaryWriter, NativeArray<T>) BinaryWriterExtensions.WriteList<T>(BinaryWriter, NativeList<T>)"
  },
  "api/Unity.Entities.Serialization.StreamBinaryWriter.Length.html": {
    "href": "api/Unity.Entities.Serialization.StreamBinaryWriter.Length.html",
    "title": "Property Length | Entities | 0.17.0-preview.18",
    "keywords": "Property Length Length Declaration public long Length { get; } Property Value Type Description Int64"
  },
  "api/Unity.Entities.Serialization.StreamBinaryWriter.WriteBytes.html": {
    "href": "api/Unity.Entities.Serialization.StreamBinaryWriter.WriteBytes.html",
    "title": "Method WriteBytes | Entities | 0.17.0-preview.18",
    "keywords": "Method WriteBytes WriteBytes(Void*, Int32) Declaration public void WriteBytes(void *data, int bytes) Parameters Type Name Description Void * data Int32 bytes Implements BinaryWriter.WriteBytes(Void*, Int32)"
  },
  "api/Unity.Entities.SharedComponentTypeHandle-1.html": {
    "href": "api/Unity.Entities.SharedComponentTypeHandle-1.html",
    "title": "Struct SharedComponentTypeHandle<T> | Entities | 0.17.0-preview.18",
    "keywords": "Struct SharedComponentTypeHandle<T> Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [NativeContainer] [NativeContainerSupportsMinMaxWriteRestriction] public struct SharedComponentTypeHandle<T> where T : struct, ISharedComponentData Type Parameters Name Description T"
  },
  "api/Unity.Entities.SimulationSystemGroup.-ctor.html": {
    "href": "api/Unity.Entities.SimulationSystemGroup.-ctor.html",
    "title": "Constructor SimulationSystemGroup | Entities | 0.17.0-preview.18",
    "keywords": "Constructor SimulationSystemGroup SimulationSystemGroup() Declaration [Preserve] public SimulationSystemGroup()"
  },
  "api/Unity.Entities.SimulationSystemGroup.html": {
    "href": "api/Unity.Entities.SimulationSystemGroup.html",
    "title": "Class SimulationSystemGroup | Entities | 0.17.0-preview.18",
    "keywords": "Class SimulationSystemGroup Inheritance Object ComponentSystemBase ComponentSystem ComponentSystemGroup SimulationSystemGroup Inherited Members ComponentSystemGroup.Systems ComponentSystemGroup.OnCreate() ComponentSystemGroup.OnDestroy() ComponentSystemGroup.AddSystemToUpdateList(ComponentSystemBase) ComponentSystemGroup.RemoveSystemFromUpdateList(ComponentSystemBase) ComponentSystemGroup.SortSystems() ComponentSystemGroup.OnStopRunning() ComponentSystemGroup.FixedRateManager ComponentSystemGroup.OnUpdate() ComponentSystem.PostUpdateCommands ComponentSystem.InitEntityQueryCache(Int32) ComponentSystem.Entities ComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnStartRunning() ComponentSystemBase.ExecutingSystemType ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetComponentTypeHandle<T>(Boolean) ComponentSystemBase.GetDynamicComponentTypeHandle(ComponentType) ComponentSystemBase.GetBufferTypeHandle<T>(Boolean) ComponentSystemBase.GetSharedComponentTypeHandle<T>() ComponentSystemBase.GetEntityTypeHandle() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.TryGetSingleton<T>(T) ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.TryGetSingletonEntity<T>(Entity) ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class SimulationSystemGroup : ComponentSystemGroup Constructors Name Description SimulationSystemGroup() Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Entities.SOAFieldInfo.html": {
    "href": "api/Unity.Entities.SOAFieldInfo.html",
    "title": "Struct SOAFieldInfo | Entities | 0.17.0-preview.18",
    "keywords": "Struct SOAFieldInfo Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct SOAFieldInfo Fields Name Description Offset Size"
  },
  "api/Unity.Entities.SOAFieldInfo.Offset.html": {
    "href": "api/Unity.Entities.SOAFieldInfo.Offset.html",
    "title": "Field Offset | Entities | 0.17.0-preview.18",
    "keywords": "Field Offset Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public ushort Offset Returns Type Description UInt16"
  },
  "api/Unity.Entities.SOAFieldInfo.Size.html": {
    "href": "api/Unity.Entities.SOAFieldInfo.Size.html",
    "title": "Field Size | Entities | 0.17.0-preview.18",
    "keywords": "Field Size Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public ushort Size Returns Type Description UInt16"
  },
  "api/Unity.Entities.SourceGen.AuthoringComponentGenerator.Execute.html": {
    "href": "api/Unity.Entities.SourceGen.AuthoringComponentGenerator.Execute.html",
    "title": "Method Execute | Entities | 0.17.0-preview.18",
    "keywords": "Method Execute Execute(SourceGeneratorContext) Declaration public void Execute(SourceGeneratorContext context) Parameters Type Name Description SourceGeneratorContext context"
  },
  "api/Unity.Entities.SourceGen.AuthoringComponentGenerator.html": {
    "href": "api/Unity.Entities.SourceGen.AuthoringComponentGenerator.html",
    "title": "Class AuthoringComponentGenerator | Entities | 0.17.0-preview.18",
    "keywords": "Class AuthoringComponentGenerator Inheritance Object AuthoringComponentGenerator Namespace : Unity.Entities.SourceGen <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class AuthoringComponentGenerator : ISourceGenerator Methods Name Description Execute(SourceGeneratorContext) Initialize(InitializationContext)"
  },
  "api/Unity.Entities.SourceGen.AuthoringComponentGenerator.Initialize.html": {
    "href": "api/Unity.Entities.SourceGen.AuthoringComponentGenerator.Initialize.html",
    "title": "Method Initialize | Entities | 0.17.0-preview.18",
    "keywords": "Method Initialize Initialize(InitializationContext) Declaration public void Initialize(InitializationContext context) Parameters Type Name Description InitializationContext context"
  },
  "api/Unity.Entities.SourceGen.AuthoringComponentReceiver.CandidateSyntaxes.html": {
    "href": "api/Unity.Entities.SourceGen.AuthoringComponentReceiver.CandidateSyntaxes.html",
    "title": "Property CandidateSyntaxes | Entities | 0.17.0-preview.18",
    "keywords": "Property CandidateSyntaxes CandidateSyntaxes Declaration public IEnumerable<SyntaxNode> CandidateSyntaxes { get; } Property Value Type Description IEnumerable < SyntaxNode >"
  },
  "api/Unity.Entities.SourceGen.AuthoringComponentReceiver.html": {
    "href": "api/Unity.Entities.SourceGen.AuthoringComponentReceiver.html",
    "title": "Class AuthoringComponentReceiver | Entities | 0.17.0-preview.18",
    "keywords": "Class AuthoringComponentReceiver Inheritance Object AuthoringComponentReceiver Namespace : Unity.Entities.SourceGen <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class AuthoringComponentReceiver : ISyntaxReceiver Properties Name Description CandidateSyntaxes Methods Name Description OnVisitSyntaxNode(SyntaxNode)"
  },
  "api/Unity.Entities.SourceGen.AuthoringComponentReceiver.OnVisitSyntaxNode.html": {
    "href": "api/Unity.Entities.SourceGen.AuthoringComponentReceiver.OnVisitSyntaxNode.html",
    "title": "Method OnVisitSyntaxNode | Entities | 0.17.0-preview.18",
    "keywords": "Method OnVisitSyntaxNode OnVisitSyntaxNode(SyntaxNode) Declaration public void OnVisitSyntaxNode(SyntaxNode syntaxNode) Parameters Type Name Description SyntaxNode syntaxNode"
  },
  "api/Unity.Entities.SourceGen.Common.EnumerableHelpers.html": {
    "href": "api/Unity.Entities.SourceGen.Common.EnumerableHelpers.html",
    "title": "Class EnumerableHelpers | Entities | 0.17.0-preview.18",
    "keywords": "Class EnumerableHelpers Inheritance Object EnumerableHelpers Namespace : Unity.Entities.SourceGen.Common <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class EnumerableHelpers Methods Name Description SeparateByBinaryOr(IEnumerable<String>) SeparateByComma(IEnumerable<String>) SeparateByCommaAndNewLine(IEnumerable<String>) SeparateByDot(IEnumerable<String>) SeparateByNewLine(IEnumerable<String>)"
  },
  "api/Unity.Entities.SourceGen.Common.EnumerableHelpers.SeparateByBinaryOr.html": {
    "href": "api/Unity.Entities.SourceGen.Common.EnumerableHelpers.SeparateByBinaryOr.html",
    "title": "Method SeparateByBinaryOr | Entities | 0.17.0-preview.18",
    "keywords": "Method SeparateByBinaryOr SeparateByBinaryOr(IEnumerable<String>) Declaration public static string SeparateByBinaryOr(this IEnumerable<string> lines) Parameters Type Name Description IEnumerable < String > lines Returns Type Description String"
  },
  "api/Unity.Entities.SourceGen.Common.EnumerableHelpers.SeparateByComma.html": {
    "href": "api/Unity.Entities.SourceGen.Common.EnumerableHelpers.SeparateByComma.html",
    "title": "Method SeparateByComma | Entities | 0.17.0-preview.18",
    "keywords": "Method SeparateByComma SeparateByComma(IEnumerable<String>) Declaration public static string SeparateByComma(this IEnumerable<string> lines) Parameters Type Name Description IEnumerable < String > lines Returns Type Description String"
  },
  "api/Unity.Entities.SourceGen.Common.EnumerableHelpers.SeparateByCommaAndNewLine.html": {
    "href": "api/Unity.Entities.SourceGen.Common.EnumerableHelpers.SeparateByCommaAndNewLine.html",
    "title": "Method SeparateByCommaAndNewLine | Entities | 0.17.0-preview.18",
    "keywords": "Method SeparateByCommaAndNewLine SeparateByCommaAndNewLine(IEnumerable<String>) Declaration public static string SeparateByCommaAndNewLine(this IEnumerable<string> lines) Parameters Type Name Description IEnumerable < String > lines Returns Type Description String"
  },
  "api/Unity.Entities.SourceGen.Common.EnumerableHelpers.SeparateByDot.html": {
    "href": "api/Unity.Entities.SourceGen.Common.EnumerableHelpers.SeparateByDot.html",
    "title": "Method SeparateByDot | Entities | 0.17.0-preview.18",
    "keywords": "Method SeparateByDot SeparateByDot(IEnumerable<String>) Declaration public static string SeparateByDot(this IEnumerable<string> lines) Parameters Type Name Description IEnumerable < String > lines Returns Type Description String"
  },
  "api/Unity.Entities.SourceGen.Common.EnumerableHelpers.SeparateByNewLine.html": {
    "href": "api/Unity.Entities.SourceGen.Common.EnumerableHelpers.SeparateByNewLine.html",
    "title": "Method SeparateByNewLine | Entities | 0.17.0-preview.18",
    "keywords": "Method SeparateByNewLine SeparateByNewLine(IEnumerable<String>) Declaration public static string SeparateByNewLine(this IEnumerable<string> lines) Parameters Type Name Description IEnumerable < String > lines Returns Type Description String"
  },
  "api/Unity.Entities.SourceGen.Common.html": {
    "href": "api/Unity.Entities.SourceGen.Common.html",
    "title": "Namespace Unity.Entities.SourceGen.Common | Entities | 0.17.0-preview.18",
    "keywords": "Namespace Unity.Entities.SourceGen.Common Classes EnumerableHelpers SourceGenHelpers SymbolExtensions SyntaxExtensions SyntaxExtensions.PreprocessorTriviaRemover Interfaces ISourceGenerationDescription"
  },
  "api/Unity.Entities.SourceGen.Common.ISourceGenerationDescription.Context.html": {
    "href": "api/Unity.Entities.SourceGen.Common.ISourceGenerationDescription.Context.html",
    "title": "Property Context | Entities | 0.17.0-preview.18",
    "keywords": "Property Context Context Declaration SourceGeneratorContext Context { get; } Property Value Type Description SourceGeneratorContext"
  },
  "api/Unity.Entities.SourceGen.Common.ISourceGenerationDescription.html": {
    "href": "api/Unity.Entities.SourceGen.Common.ISourceGenerationDescription.html",
    "title": "Interface ISourceGenerationDescription | Entities | 0.17.0-preview.18",
    "keywords": "Interface ISourceGenerationDescription Namespace : Unity.Entities.SourceGen.Common <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface ISourceGenerationDescription Properties Name Description Context Extension Methods SourceGenHelpers.GetAccessModifiers(ISourceGenerationDescription)"
  },
  "api/Unity.Entities.SourceGen.Common.SourceGenHelpers.AttributeListFromAttributeName.html": {
    "href": "api/Unity.Entities.SourceGen.Common.SourceGenHelpers.AttributeListFromAttributeName.html",
    "title": "Method AttributeListFromAttributeName | Entities | 0.17.0-preview.18",
    "keywords": "Method AttributeListFromAttributeName AttributeListFromAttributeName(String) Declaration public static SyntaxList<AttributeListSyntax> AttributeListFromAttributeName(string attributeName) Parameters Type Name Description String attributeName Returns Type Description SyntaxList < AttributeListSyntax >"
  },
  "api/Unity.Entities.SourceGen.Common.SourceGenHelpers.ContainsId.html": {
    "href": "api/Unity.Entities.SourceGen.Common.SourceGenHelpers.ContainsId.html",
    "title": "Method ContainsId | Entities | 0.17.0-preview.18",
    "keywords": "Method ContainsId ContainsId(ImmutableArray<Diagnostic>, String) Declaration public static bool ContainsId(this ImmutableArray<Diagnostic> diags, string id) Parameters Type Name Description ImmutableArray < Diagnostic > diags String id Returns Type Description Boolean"
  },
  "api/Unity.Entities.SourceGen.Common.SourceGenHelpers.GetAccessModifiers.html": {
    "href": "api/Unity.Entities.SourceGen.Common.SourceGenHelpers.GetAccessModifiers.html",
    "title": "Method GetAccessModifiers | Entities | 0.17.0-preview.18",
    "keywords": "Method GetAccessModifiers GetAccessModifiers(ISourceGenerationDescription) Declaration public static string GetAccessModifiers(this ISourceGenerationDescription sourceGenerationDescription) Parameters Type Name Description ISourceGenerationDescription sourceGenerationDescription Returns Type Description String"
  },
  "api/Unity.Entities.SourceGen.Common.SourceGenHelpers.GetFlags.html": {
    "href": "api/Unity.Entities.SourceGen.Common.SourceGenHelpers.GetFlags.html",
    "title": "Method GetFlags | Entities | 0.17.0-preview.18",
    "keywords": "Method GetFlags GetFlags(Enum) Declaration public static IEnumerable<Enum> GetFlags(this Enum e) Parameters Type Name Description Enum e Returns Type Description IEnumerable < Enum >"
  },
  "api/Unity.Entities.SourceGen.Common.SourceGenHelpers.GetProjectPath.html": {
    "href": "api/Unity.Entities.SourceGen.Common.SourceGenHelpers.GetProjectPath.html",
    "title": "Method GetProjectPath | Entities | 0.17.0-preview.18",
    "keywords": "Method GetProjectPath GetProjectPath() Declaration public static string GetProjectPath() Returns Type Description String"
  },
  "api/Unity.Entities.SourceGen.Common.SourceGenHelpers.GetTempGeneratedPathToFile.html": {
    "href": "api/Unity.Entities.SourceGen.Common.SourceGenHelpers.GetTempGeneratedPathToFile.html",
    "title": "Method GetTempGeneratedPathToFile | Entities | 0.17.0-preview.18",
    "keywords": "Method GetTempGeneratedPathToFile GetTempGeneratedPathToFile(String) Declaration public static string GetTempGeneratedPathToFile(string fileNameWithExtension) Parameters Type Name Description String fileNameWithExtension Returns Type Description String"
  },
  "api/Unity.Entities.SourceGen.Common.SourceGenHelpers.html": {
    "href": "api/Unity.Entities.SourceGen.Common.SourceGenHelpers.html",
    "title": "Class SourceGenHelpers | Entities | 0.17.0-preview.18",
    "keywords": "Class SourceGenHelpers Inheritance Object SourceGenHelpers Namespace : Unity.Entities.SourceGen.Common <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class SourceGenHelpers Methods Name Description AttributeListFromAttributeName(String) ContainsId(ImmutableArray<Diagnostic>, String) GetAccessModifiers(ISourceGenerationDescription) GetFlags(Enum) GetProjectPath() GetTempGeneratedPathToFile(String) LogError(SourceGeneratorContext, String, String, String, Location, String) LogInfo(String) SetProjectPath(String) TryParseQualifiedEnumValue<TEnum>(String, out TEnum) WaitForDebugger(SourceGeneratorContext, String)"
  },
  "api/Unity.Entities.SourceGen.Common.SourceGenHelpers.LogError.html": {
    "href": "api/Unity.Entities.SourceGen.Common.SourceGenHelpers.LogError.html",
    "title": "Method LogError | Entities | 0.17.0-preview.18",
    "keywords": "Method LogError LogError(SourceGeneratorContext, String, String, String, Location, String) Declaration public static void LogError(this SourceGeneratorContext context, string errorCode, string title, string errorMessage, Location location, string description = \"\") Parameters Type Name Description SourceGeneratorContext context String errorCode String title String errorMessage Location location String description"
  },
  "api/Unity.Entities.SourceGen.Common.SourceGenHelpers.LogInfo.html": {
    "href": "api/Unity.Entities.SourceGen.Common.SourceGenHelpers.LogInfo.html",
    "title": "Method LogInfo | Entities | 0.17.0-preview.18",
    "keywords": "Method LogInfo LogInfo(String) Declaration public static void LogInfo(string message) Parameters Type Name Description String message"
  },
  "api/Unity.Entities.SourceGen.Common.SourceGenHelpers.SetProjectPath.html": {
    "href": "api/Unity.Entities.SourceGen.Common.SourceGenHelpers.SetProjectPath.html",
    "title": "Method SetProjectPath | Entities | 0.17.0-preview.18",
    "keywords": "Method SetProjectPath SetProjectPath(String) Declaration public static void SetProjectPath(string projectPath) Parameters Type Name Description String projectPath"
  },
  "api/Unity.Entities.SourceGen.Common.SourceGenHelpers.TryParseQualifiedEnumValue.html": {
    "href": "api/Unity.Entities.SourceGen.Common.SourceGenHelpers.TryParseQualifiedEnumValue.html",
    "title": "Method TryParseQualifiedEnumValue | Entities | 0.17.0-preview.18",
    "keywords": "Method TryParseQualifiedEnumValue TryParseQualifiedEnumValue<TEnum>(String, out TEnum) Declaration public static bool TryParseQualifiedEnumValue<TEnum>(string value, out TEnum result) where TEnum : struct Parameters Type Name Description String value TEnum result Returns Type Description Boolean Type Parameters Name Description TEnum"
  },
  "api/Unity.Entities.SourceGen.Common.SourceGenHelpers.WaitForDebugger.html": {
    "href": "api/Unity.Entities.SourceGen.Common.SourceGenHelpers.WaitForDebugger.html",
    "title": "Method WaitForDebugger | Entities | 0.17.0-preview.18",
    "keywords": "Method WaitForDebugger WaitForDebugger(SourceGeneratorContext, String) Declaration public static void WaitForDebugger(this SourceGeneratorContext context, string inAssembly = null) Parameters Type Name Description SourceGeneratorContext context String inAssembly"
  },
  "api/Unity.Entities.SourceGen.Common.SymbolExtensions.GetFullyQualifiedTypeName.html": {
    "href": "api/Unity.Entities.SourceGen.Common.SymbolExtensions.GetFullyQualifiedTypeName.html",
    "title": "Method GetFullyQualifiedTypeName | Entities | 0.17.0-preview.18",
    "keywords": "Method GetFullyQualifiedTypeName GetFullyQualifiedTypeName(ITypeSymbol) Declaration public static string GetFullyQualifiedTypeName(this ITypeSymbol typeSymbol) Parameters Type Name Description ITypeSymbol typeSymbol Returns Type Description String"
  },
  "api/Unity.Entities.SourceGen.Common.SymbolExtensions.GetSymbolTypeName.html": {
    "href": "api/Unity.Entities.SourceGen.Common.SymbolExtensions.GetSymbolTypeName.html",
    "title": "Method GetSymbolTypeName | Entities | 0.17.0-preview.18",
    "keywords": "Method GetSymbolTypeName GetSymbolTypeName(ISymbol) Declaration public static string GetSymbolTypeName(this ISymbol symbol) Parameters Type Name Description ISymbol symbol Returns Type Description String"
  },
  "api/Unity.Entities.SourceGen.Common.SymbolExtensions.html": {
    "href": "api/Unity.Entities.SourceGen.Common.SymbolExtensions.html",
    "title": "Class SymbolExtensions | Entities | 0.17.0-preview.18",
    "keywords": "Class SymbolExtensions Inheritance Object SymbolExtensions Namespace : Unity.Entities.SourceGen.Common <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class SymbolExtensions Methods Name Description GetFullyQualifiedTypeName(ITypeSymbol) GetSymbolTypeName(ISymbol) ImplementsInterface(ISymbol, String) InheritsFromInterface(ITypeSymbol, String, Boolean) InheritsFromType(ITypeSymbol, String, Boolean) Is(ITypeSymbol, String, Boolean) Is(ITypeSymbol, String, String, Boolean) IsDynamicBuffer(ITypeSymbol) IsInt(ITypeSymbol) ToFullName(ITypeSymbol)"
  },
  "api/Unity.Entities.SourceGen.Common.SymbolExtensions.ImplementsInterface.html": {
    "href": "api/Unity.Entities.SourceGen.Common.SymbolExtensions.ImplementsInterface.html",
    "title": "Method ImplementsInterface | Entities | 0.17.0-preview.18",
    "keywords": "Method ImplementsInterface ImplementsInterface(ISymbol, String) Declaration public static bool ImplementsInterface(this ISymbol symbol, string interfaceName) Parameters Type Name Description ISymbol symbol String interfaceName Returns Type Description Boolean"
  },
  "api/Unity.Entities.SourceGen.Common.SymbolExtensions.InheritsFromInterface.html": {
    "href": "api/Unity.Entities.SourceGen.Common.SymbolExtensions.InheritsFromInterface.html",
    "title": "Method InheritsFromInterface | Entities | 0.17.0-preview.18",
    "keywords": "Method InheritsFromInterface InheritsFromInterface(ITypeSymbol, String, Boolean) Declaration public static bool InheritsFromInterface(this ITypeSymbol symbol, string interfaceName, bool exact = false) Parameters Type Name Description ITypeSymbol symbol String interfaceName Boolean exact Returns Type Description Boolean"
  },
  "api/Unity.Entities.SourceGen.Common.SymbolExtensions.InheritsFromType.html": {
    "href": "api/Unity.Entities.SourceGen.Common.SymbolExtensions.InheritsFromType.html",
    "title": "Method InheritsFromType | Entities | 0.17.0-preview.18",
    "keywords": "Method InheritsFromType InheritsFromType(ITypeSymbol, String, Boolean) Declaration public static bool InheritsFromType(this ITypeSymbol symbol, string typeName, bool exact = false) Parameters Type Name Description ITypeSymbol symbol String typeName Boolean exact Returns Type Description Boolean"
  },
  "api/Unity.Entities.SourceGen.Common.SymbolExtensions.Is.html": {
    "href": "api/Unity.Entities.SourceGen.Common.SymbolExtensions.Is.html",
    "title": "Method Is | Entities | 0.17.0-preview.18",
    "keywords": "Method Is Is(ITypeSymbol, String, Boolean) Declaration public static bool Is(this ITypeSymbol symbol, string fullyQualifiedName, bool exact = false) Parameters Type Name Description ITypeSymbol symbol String fullyQualifiedName Boolean exact Returns Type Description Boolean Is(ITypeSymbol, String, String, Boolean) Declaration public static bool Is(this ITypeSymbol symbol, string nameSpace, string typeName, bool checkBaseType = true) Parameters Type Name Description ITypeSymbol symbol String nameSpace String typeName Boolean checkBaseType Returns Type Description Boolean"
  },
  "api/Unity.Entities.SourceGen.Common.SymbolExtensions.IsDynamicBuffer.html": {
    "href": "api/Unity.Entities.SourceGen.Common.SymbolExtensions.IsDynamicBuffer.html",
    "title": "Method IsDynamicBuffer | Entities | 0.17.0-preview.18",
    "keywords": "Method IsDynamicBuffer IsDynamicBuffer(ITypeSymbol) Declaration public static bool IsDynamicBuffer(this ITypeSymbol symbol) Parameters Type Name Description ITypeSymbol symbol Returns Type Description Boolean"
  },
  "api/Unity.Entities.SourceGen.Common.SymbolExtensions.IsInt.html": {
    "href": "api/Unity.Entities.SourceGen.Common.SymbolExtensions.IsInt.html",
    "title": "Method IsInt | Entities | 0.17.0-preview.18",
    "keywords": "Method IsInt IsInt(ITypeSymbol) Declaration public static bool IsInt(this ITypeSymbol symbol) Parameters Type Name Description ITypeSymbol symbol Returns Type Description Boolean"
  },
  "api/Unity.Entities.SourceGen.Common.SymbolExtensions.ToFullName.html": {
    "href": "api/Unity.Entities.SourceGen.Common.SymbolExtensions.ToFullName.html",
    "title": "Method ToFullName | Entities | 0.17.0-preview.18",
    "keywords": "Method ToFullName ToFullName(ITypeSymbol) Declaration public static string ToFullName(this ITypeSymbol symbol) Parameters Type Name Description ITypeSymbol symbol Returns Type Description String"
  },
  "api/Unity.Entities.SourceGen.Common.SyntaxExtensions.AddMemberToClassOrNamespace.html": {
    "href": "api/Unity.Entities.SourceGen.Common.SyntaxExtensions.AddMemberToClassOrNamespace.html",
    "title": "Method AddMemberToClassOrNamespace | Entities | 0.17.0-preview.18",
    "keywords": "Method AddMemberToClassOrNamespace AddMemberToClassOrNamespace(SyntaxNode, SyntaxNode) Declaration public static SyntaxNode AddMemberToClassOrNamespace(this SyntaxNode node, SyntaxNode newNode) Parameters Type Name Description SyntaxNode node SyntaxNode newNode Returns Type Description SyntaxNode"
  },
  "api/Unity.Entities.SourceGen.Common.SyntaxExtensions.AddNamespaces.html": {
    "href": "api/Unity.Entities.SourceGen.Common.SyntaxExtensions.AddNamespaces.html",
    "title": "Method AddNamespaces | Entities | 0.17.0-preview.18",
    "keywords": "Method AddNamespaces AddNamespaces(TypeDeclarationSyntax, IEnumerable<NamespaceDeclarationSyntax>) Declaration public static MemberDeclarationSyntax AddNamespaces(this TypeDeclarationSyntax typeDeclarationSyntax, IEnumerable<NamespaceDeclarationSyntax> namespacesFromMostToLeastNested) Parameters Type Name Description TypeDeclarationSyntax typeDeclarationSyntax IEnumerable < NamespaceDeclarationSyntax > namespacesFromMostToLeastNested Returns Type Description MemberDeclarationSyntax"
  },
  "api/Unity.Entities.SourceGen.Common.SyntaxExtensions.AddUsingStatements.html": {
    "href": "api/Unity.Entities.SourceGen.Common.SyntaxExtensions.AddUsingStatements.html",
    "title": "Method AddUsingStatements | Entities | 0.17.0-preview.18",
    "keywords": "Method AddUsingStatements AddUsingStatements(SyntaxList<UsingDirectiveSyntax>, String[]) Declaration public static SyntaxList<UsingDirectiveSyntax> AddUsingStatements(this SyntaxList<UsingDirectiveSyntax> currentUsings, params string[] newUsings) Parameters Type Name Description SyntaxList < UsingDirectiveSyntax > currentUsings String [] newUsings Returns Type Description SyntaxList < UsingDirectiveSyntax >"
  },
  "api/Unity.Entities.SourceGen.Common.SyntaxExtensions.AncestorsOfKind.html": {
    "href": "api/Unity.Entities.SourceGen.Common.SyntaxExtensions.AncestorsOfKind.html",
    "title": "Method AncestorsOfKind | Entities | 0.17.0-preview.18",
    "keywords": "Method AncestorsOfKind AncestorsOfKind<TResult1, TResult2>(SyntaxNode) Declaration public static IEnumerable<SyntaxNode> AncestorsOfKind<TResult1, TResult2>(this SyntaxNode node) Parameters Type Name Description SyntaxNode node Returns Type Description IEnumerable < SyntaxNode > Type Parameters Name Description TResult1 TResult2"
  },
  "api/Unity.Entities.SourceGen.Common.SyntaxExtensions.FindMemberInvocationWithName.html": {
    "href": "api/Unity.Entities.SourceGen.Common.SyntaxExtensions.FindMemberInvocationWithName.html",
    "title": "Method FindMemberInvocationWithName | Entities | 0.17.0-preview.18",
    "keywords": "Method FindMemberInvocationWithName FindMemberInvocationWithName(SyntaxNode, String) Declaration public static (bool Success, InvocationExpressionSyntax invocationExpressionSyntax) FindMemberInvocationWithName(this SyntaxNode node, string memberName) Parameters Type Name Description SyntaxNode node String memberName Returns Type Description ValueTuple < Boolean , InvocationExpressionSyntax >"
  },
  "api/Unity.Entities.SourceGen.Common.SyntaxExtensions.GetDerivedReturnType.html": {
    "href": "api/Unity.Entities.SourceGen.Common.SyntaxExtensions.GetDerivedReturnType.html",
    "title": "Method GetDerivedReturnType | Entities | 0.17.0-preview.18",
    "keywords": "Method GetDerivedReturnType GetDerivedReturnType(PropertyDeclarationSyntax, SemanticModel, CancellationToken) Declaration public static ITypeSymbol GetDerivedReturnType(this PropertyDeclarationSyntax prop, SemanticModel model, CancellationToken cancel = default(CancellationToken)) Parameters Type Name Description PropertyDeclarationSyntax prop SemanticModel model CancellationToken cancel Returns Type Description ITypeSymbol"
  },
  "api/Unity.Entities.SourceGen.Common.SyntaxExtensions.GetGeneratedSourceFilePath.html": {
    "href": "api/Unity.Entities.SourceGen.Common.SyntaxExtensions.GetGeneratedSourceFilePath.html",
    "title": "Method GetGeneratedSourceFilePath | Entities | 0.17.0-preview.18",
    "keywords": "Method GetGeneratedSourceFilePath GetGeneratedSourceFilePath(SyntaxTree) Declaration public static string GetGeneratedSourceFilePath(this SyntaxTree syntaxTree) Parameters Type Name Description SyntaxTree syntaxTree Returns Type Description String"
  },
  "api/Unity.Entities.SourceGen.Common.SyntaxExtensions.GetMethodInvocations.html": {
    "href": "api/Unity.Entities.SourceGen.Common.SyntaxExtensions.GetMethodInvocations.html",
    "title": "Method GetMethodInvocations | Entities | 0.17.0-preview.18",
    "keywords": "Method GetMethodInvocations GetMethodInvocations(SyntaxNode) Declaration public static Dictionary<string, List<InvocationExpressionSyntax>> GetMethodInvocations(this SyntaxNode node) Parameters Type Name Description SyntaxNode node Returns Type Description Dictionary < String , List < InvocationExpressionSyntax >>"
  },
  "api/Unity.Entities.SourceGen.Common.SyntaxExtensions.GetNamespacesFromMostToLeastNested.html": {
    "href": "api/Unity.Entities.SourceGen.Common.SyntaxExtensions.GetNamespacesFromMostToLeastNested.html",
    "title": "Method GetNamespacesFromMostToLeastNested | Entities | 0.17.0-preview.18",
    "keywords": "Method GetNamespacesFromMostToLeastNested GetNamespacesFromMostToLeastNested(SyntaxNode) Declaration public static IEnumerable<NamespaceDeclarationSyntax> GetNamespacesFromMostToLeastNested(this SyntaxNode syntaxNode) Parameters Type Name Description SyntaxNode syntaxNode Returns Type Description IEnumerable < NamespaceDeclarationSyntax >"
  },
  "api/Unity.Entities.SourceGen.Common.SyntaxExtensions.HasAttribute.html": {
    "href": "api/Unity.Entities.SourceGen.Common.SyntaxExtensions.HasAttribute.html",
    "title": "Method HasAttribute | Entities | 0.17.0-preview.18",
    "keywords": "Method HasAttribute HasAttribute(TypeDeclarationSyntax, String) Declaration public static bool HasAttribute(this TypeDeclarationSyntax typeDeclarationSyntax, string attributeName) Parameters Type Name Description TypeDeclarationSyntax typeDeclarationSyntax String attributeName Returns Type Description Boolean"
  },
  "api/Unity.Entities.SourceGen.Common.SyntaxExtensions.HasModifier.html": {
    "href": "api/Unity.Entities.SourceGen.Common.SyntaxExtensions.HasModifier.html",
    "title": "Method HasModifier | Entities | 0.17.0-preview.18",
    "keywords": "Method HasModifier HasModifier(ClassDeclarationSyntax, SyntaxKind) Declaration public static bool HasModifier(this ClassDeclarationSyntax cls, SyntaxKind modifier) Parameters Type Name Description ClassDeclarationSyntax cls SyntaxKind modifier Returns Type Description Boolean"
  },
  "api/Unity.Entities.SourceGen.Common.SyntaxExtensions.html": {
    "href": "api/Unity.Entities.SourceGen.Common.SyntaxExtensions.html",
    "title": "Class SyntaxExtensions | Entities | 0.17.0-preview.18",
    "keywords": "Class SyntaxExtensions Inheritance Object SyntaxExtensions Namespace : Unity.Entities.SourceGen.Common <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class SyntaxExtensions Methods Name Description AddMemberToClassOrNamespace(SyntaxNode, SyntaxNode) AddNamespaces(TypeDeclarationSyntax, IEnumerable<NamespaceDeclarationSyntax>) AddUsingStatements(SyntaxList<UsingDirectiveSyntax>, String[]) AncestorsOfKind<TResult1, TResult2>(SyntaxNode) FindMemberInvocationWithName(SyntaxNode, String) GetDerivedReturnType(PropertyDeclarationSyntax, SemanticModel, CancellationToken) GetGeneratedSourceFilePath(SyntaxTree) GetMethodInvocations(SyntaxNode) GetNamespacesFromMostToLeastNested(SyntaxNode) HasAttribute(TypeDeclarationSyntax, String) HasModifier(ClassDeclarationSyntax, SyntaxKind) IsReadOnly(ParameterSyntax) NodeAfter(SyntaxNode, Func<SyntaxNodeOrToken, Boolean>) ToBlockSyntax(ParenthesizedLambdaExpressionSyntax) WithArgs(InvocationExpressionSyntax, ExpressionSyntax) WithArgs(InvocationExpressionSyntax, IEnumerable<ExpressionSyntax>) WithLineTrivia(SyntaxNode) WithLineTrivia(SyntaxNode, SyntaxNode) WithoutPreprocessorTrivia<T>(T)"
  },
  "api/Unity.Entities.SourceGen.Common.SyntaxExtensions.IsReadOnly.html": {
    "href": "api/Unity.Entities.SourceGen.Common.SyntaxExtensions.IsReadOnly.html",
    "title": "Method IsReadOnly | Entities | 0.17.0-preview.18",
    "keywords": "Method IsReadOnly IsReadOnly(ParameterSyntax) Declaration public static bool IsReadOnly(this ParameterSyntax parameter) Parameters Type Name Description ParameterSyntax parameter Returns Type Description Boolean"
  },
  "api/Unity.Entities.SourceGen.Common.SyntaxExtensions.NodeAfter.html": {
    "href": "api/Unity.Entities.SourceGen.Common.SyntaxExtensions.NodeAfter.html",
    "title": "Method NodeAfter | Entities | 0.17.0-preview.18",
    "keywords": "Method NodeAfter NodeAfter(SyntaxNode, Func<SyntaxNodeOrToken, Boolean>) Declaration public static SyntaxNode NodeAfter(this SyntaxNode node, Func<SyntaxNodeOrToken, bool> predicate) Parameters Type Name Description SyntaxNode node Func < SyntaxNodeOrToken , Boolean > predicate Returns Type Description SyntaxNode"
  },
  "api/Unity.Entities.SourceGen.Common.SyntaxExtensions.PreprocessorTriviaRemover.html": {
    "href": "api/Unity.Entities.SourceGen.Common.SyntaxExtensions.PreprocessorTriviaRemover.html",
    "title": "Class SyntaxExtensions.PreprocessorTriviaRemover | Entities | 0.17.0-preview.18",
    "keywords": "Class SyntaxExtensions.PreprocessorTriviaRemover Inheritance Object SyntaxExtensions.PreprocessorTriviaRemover Namespace : Unity.Entities.SourceGen.Common <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class PreprocessorTriviaRemover : CSharpSyntaxRewriter Methods Name Description VisitTrivia(SyntaxTrivia)"
  },
  "api/Unity.Entities.SourceGen.Common.SyntaxExtensions.PreprocessorTriviaRemover.VisitTrivia.html": {
    "href": "api/Unity.Entities.SourceGen.Common.SyntaxExtensions.PreprocessorTriviaRemover.VisitTrivia.html",
    "title": "Method VisitTrivia | Entities | 0.17.0-preview.18",
    "keywords": "Method VisitTrivia VisitTrivia(SyntaxTrivia) Declaration public override SyntaxTrivia VisitTrivia(SyntaxTrivia trivia) Parameters Type Name Description SyntaxTrivia trivia Returns Type Description SyntaxTrivia"
  },
  "api/Unity.Entities.SourceGen.Common.SyntaxExtensions.ToBlockSyntax.html": {
    "href": "api/Unity.Entities.SourceGen.Common.SyntaxExtensions.ToBlockSyntax.html",
    "title": "Method ToBlockSyntax | Entities | 0.17.0-preview.18",
    "keywords": "Method ToBlockSyntax ToBlockSyntax(ParenthesizedLambdaExpressionSyntax) Declaration public static BlockSyntax ToBlockSyntax(this ParenthesizedLambdaExpressionSyntax node) Parameters Type Name Description ParenthesizedLambdaExpressionSyntax node Returns Type Description BlockSyntax"
  },
  "api/Unity.Entities.SourceGen.Common.SyntaxExtensions.WithArgs.html": {
    "href": "api/Unity.Entities.SourceGen.Common.SyntaxExtensions.WithArgs.html",
    "title": "Method WithArgs | Entities | 0.17.0-preview.18",
    "keywords": "Method WithArgs WithArgs(InvocationExpressionSyntax, ExpressionSyntax) Declaration public static InvocationExpressionSyntax WithArgs(this InvocationExpressionSyntax invoke, ExpressionSyntax arg) Parameters Type Name Description InvocationExpressionSyntax invoke ExpressionSyntax arg Returns Type Description InvocationExpressionSyntax WithArgs(InvocationExpressionSyntax, IEnumerable<ExpressionSyntax>) Declaration public static InvocationExpressionSyntax WithArgs(this InvocationExpressionSyntax invoke, IEnumerable<ExpressionSyntax> args) Parameters Type Name Description InvocationExpressionSyntax invoke IEnumerable < ExpressionSyntax > args Returns Type Description InvocationExpressionSyntax"
  },
  "api/Unity.Entities.SourceGen.Common.SyntaxExtensions.WithLineTrivia.html": {
    "href": "api/Unity.Entities.SourceGen.Common.SyntaxExtensions.WithLineTrivia.html",
    "title": "Method WithLineTrivia | Entities | 0.17.0-preview.18",
    "keywords": "Method WithLineTrivia WithLineTrivia(SyntaxNode) Declaration public static SyntaxNode WithLineTrivia(this SyntaxNode node) Parameters Type Name Description SyntaxNode node Returns Type Description SyntaxNode WithLineTrivia(SyntaxNode, SyntaxNode) Declaration public static SyntaxNode WithLineTrivia(this SyntaxNode node, SyntaxNode originalLineNode) Parameters Type Name Description SyntaxNode node SyntaxNode originalLineNode Returns Type Description SyntaxNode"
  },
  "api/Unity.Entities.SourceGen.Common.SyntaxExtensions.WithoutPreprocessorTrivia.html": {
    "href": "api/Unity.Entities.SourceGen.Common.SyntaxExtensions.WithoutPreprocessorTrivia.html",
    "title": "Method WithoutPreprocessorTrivia | Entities | 0.17.0-preview.18",
    "keywords": "Method WithoutPreprocessorTrivia WithoutPreprocessorTrivia<T>(T) Declaration public static T WithoutPreprocessorTrivia<T>(this T node) where T : SyntaxNode Parameters Type Name Description T node Returns Type Description T Type Parameters Name Description T"
  },
  "api/Unity.Entities.SourceGen.EntityQueryOptions.html": {
    "href": "api/Unity.Entities.SourceGen.EntityQueryOptions.html",
    "title": "Enum EntityQueryOptions | Entities | 0.17.0-preview.18",
    "keywords": "Enum EntityQueryOptions Namespace : Unity.Entities.SourceGen <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Flags] public enum EntityQueryOptions Fields Name Description Value Default 0 IncludePrefab 1 IncludeDisabled 2 FilterWriteGroup 4 Extension Methods SourceGenHelpers.GetFlags()"
  },
  "api/Unity.Entities.SourceGen.FieldDescription.FieldSymbol.html": {
    "href": "api/Unity.Entities.SourceGen.FieldDescription.FieldSymbol.html",
    "title": "Property FieldSymbol | Entities | 0.17.0-preview.18",
    "keywords": "Property FieldSymbol FieldSymbol Declaration public IFieldSymbol FieldSymbol { get; } Property Value Type Description IFieldSymbol"
  },
  "api/Unity.Entities.SourceGen.FieldDescription.From.html": {
    "href": "api/Unity.Entities.SourceGen.FieldDescription.From.html",
    "title": "Method From | Entities | 0.17.0-preview.18",
    "keywords": "Method From From(VariableDeclaratorSyntax, SourceGeneratorContext) Declaration public static FieldDescription From(VariableDeclaratorSyntax syntaxNode, SourceGeneratorContext context) Parameters Type Name Description VariableDeclaratorSyntax syntaxNode SourceGeneratorContext context Returns Type Description FieldDescription"
  },
  "api/Unity.Entities.SourceGen.FieldDescription.html": {
    "href": "api/Unity.Entities.SourceGen.FieldDescription.html",
    "title": "Class FieldDescription | Entities | 0.17.0-preview.18",
    "keywords": "Class FieldDescription Inheritance Object FieldDescription Namespace : Unity.Entities.SourceGen <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class FieldDescription Properties Name Description FieldSymbol IsValueType Methods Name Description From(VariableDeclaratorSyntax, SourceGeneratorContext)"
  },
  "api/Unity.Entities.SourceGen.FieldDescription.IsValueType.html": {
    "href": "api/Unity.Entities.SourceGen.FieldDescription.IsValueType.html",
    "title": "Property IsValueType | Entities | 0.17.0-preview.18",
    "keywords": "Property IsValueType IsValueType Declaration public bool IsValueType { get; } Property Value Type Description Boolean"
  },
  "api/Unity.Entities.SourceGen.html": {
    "href": "api/Unity.Entities.SourceGen.html",
    "title": "Namespace Unity.Entities.SourceGen | Entities | 0.17.0-preview.18",
    "keywords": "Namespace Unity.Entities.SourceGen Classes AuthoringComponentGenerator AuthoringComponentReceiver FieldDescription IJobEntityReceiver IJobEntitySourceGenerator JobEntityBatchTypeGenerator JobEntityDescription JobEntityDescription.OnUpdateMethodParameter LambdaCapturedVariableDescription LambdaJobsGenerator LambdaJobsGenerator.EntitiesSyntaxReceiver SyntaxNodeReplacer Structs LambdaCapturedVariableDescription.AttributeDescription Enums EntityQueryOptions Delegates LambdaCapturedVariableDescription.CheckAttributeApplicable"
  },
  "api/Unity.Entities.SourceGen.IJobEntityReceiver.html": {
    "href": "api/Unity.Entities.SourceGen.IJobEntityReceiver.html",
    "title": "Class IJobEntityReceiver | Entities | 0.17.0-preview.18",
    "keywords": "Class IJobEntityReceiver Inheritance Object IJobEntityReceiver Namespace : Unity.Entities.SourceGen <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class IJobEntityReceiver : ISyntaxReceiver Methods Name Description OnVisitSyntaxNode(SyntaxNode)"
  },
  "api/Unity.Entities.SourceGen.IJobEntityReceiver.OnVisitSyntaxNode.html": {
    "href": "api/Unity.Entities.SourceGen.IJobEntityReceiver.OnVisitSyntaxNode.html",
    "title": "Method OnVisitSyntaxNode | Entities | 0.17.0-preview.18",
    "keywords": "Method OnVisitSyntaxNode OnVisitSyntaxNode(SyntaxNode) Declaration public void OnVisitSyntaxNode(SyntaxNode syntaxNode) Parameters Type Name Description SyntaxNode syntaxNode"
  },
  "api/Unity.Entities.SourceGen.IJobEntitySourceGenerator.Execute.html": {
    "href": "api/Unity.Entities.SourceGen.IJobEntitySourceGenerator.Execute.html",
    "title": "Method Execute | Entities | 0.17.0-preview.18",
    "keywords": "Method Execute Execute(SourceGeneratorContext) Declaration public void Execute(SourceGeneratorContext sourceGeneratorContext) Parameters Type Name Description SourceGeneratorContext sourceGeneratorContext"
  },
  "api/Unity.Entities.SourceGen.IJobEntitySourceGenerator.html": {
    "href": "api/Unity.Entities.SourceGen.IJobEntitySourceGenerator.html",
    "title": "Class IJobEntitySourceGenerator | Entities | 0.17.0-preview.18",
    "keywords": "Class IJobEntitySourceGenerator Inheritance Object IJobEntitySourceGenerator Namespace : Unity.Entities.SourceGen <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class IJobEntitySourceGenerator : ISourceGenerator Methods Name Description Execute(SourceGeneratorContext) Initialize(InitializationContext)"
  },
  "api/Unity.Entities.SourceGen.IJobEntitySourceGenerator.Initialize.html": {
    "href": "api/Unity.Entities.SourceGen.IJobEntitySourceGenerator.Initialize.html",
    "title": "Method Initialize | Entities | 0.17.0-preview.18",
    "keywords": "Method Initialize Initialize(InitializationContext) Declaration public void Initialize(InitializationContext context) Parameters Type Name Description InitializationContext context"
  },
  "api/Unity.Entities.SourceGen.JobEntityBatchTypeGenerator.GenerateFrom.html": {
    "href": "api/Unity.Entities.SourceGen.JobEntityBatchTypeGenerator.GenerateFrom.html",
    "title": "Method GenerateFrom | Entities | 0.17.0-preview.18",
    "keywords": "Method GenerateFrom GenerateFrom(JobEntityDescription) Declaration public static StructDeclarationSyntax GenerateFrom(JobEntityDescription jobEntityDescription) Parameters Type Name Description JobEntityDescription jobEntityDescription Returns Type Description StructDeclarationSyntax"
  },
  "api/Unity.Entities.SourceGen.JobEntityBatchTypeGenerator.html": {
    "href": "api/Unity.Entities.SourceGen.JobEntityBatchTypeGenerator.html",
    "title": "Class JobEntityBatchTypeGenerator | Entities | 0.17.0-preview.18",
    "keywords": "Class JobEntityBatchTypeGenerator Inheritance Object JobEntityBatchTypeGenerator Namespace : Unity.Entities.SourceGen <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class JobEntityBatchTypeGenerator Methods Name Description GenerateFrom(JobEntityDescription)"
  },
  "api/Unity.Entities.SourceGen.JobEntityDescription.Context.html": {
    "href": "api/Unity.Entities.SourceGen.JobEntityDescription.Context.html",
    "title": "Property Context | Entities | 0.17.0-preview.18",
    "keywords": "Property Context Context Declaration public SourceGeneratorContext Context { get; } Property Value Type Description SourceGeneratorContext Implements ISourceGenerationDescription.Context"
  },
  "api/Unity.Entities.SourceGen.JobEntityDescription.-ctor.html": {
    "href": "api/Unity.Entities.SourceGen.JobEntityDescription.-ctor.html",
    "title": "Constructor JobEntityDescription | Entities | 0.17.0-preview.18",
    "keywords": "Constructor JobEntityDescription JobEntityDescription(SyntaxNode, SyntaxNode, ITypeSymbol, SourceGeneratorContext) Declaration public JobEntityDescription(SyntaxNode jobEntityTypeNode, SyntaxNode jobEntityOnUpdateMethodNode, ITypeSymbol candidateTypeSymbol, SourceGeneratorContext context) Parameters Type Name Description SyntaxNode jobEntityTypeNode SyntaxNode jobEntityOnUpdateMethodNode ITypeSymbol candidateTypeSymbol SourceGeneratorContext context"
  },
  "api/Unity.Entities.SourceGen.JobEntityDescription.DeclaringTypeFullyQualifiedName.html": {
    "href": "api/Unity.Entities.SourceGen.JobEntityDescription.DeclaringTypeFullyQualifiedName.html",
    "title": "Field DeclaringTypeFullyQualifiedName | Entities | 0.17.0-preview.18",
    "keywords": "Field DeclaringTypeFullyQualifiedName Namespace : Unity.Entities.SourceGen <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public readonly string DeclaringTypeFullyQualifiedName Returns Type Description String"
  },
  "api/Unity.Entities.SourceGen.JobEntityDescription.DeclaringTypeName.html": {
    "href": "api/Unity.Entities.SourceGen.JobEntityDescription.DeclaringTypeName.html",
    "title": "Field DeclaringTypeName | Entities | 0.17.0-preview.18",
    "keywords": "Field DeclaringTypeName Namespace : Unity.Entities.SourceGen <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public readonly string DeclaringTypeName Returns Type Description String"
  },
  "api/Unity.Entities.SourceGen.JobEntityDescription.FieldDescriptions.html": {
    "href": "api/Unity.Entities.SourceGen.JobEntityDescription.FieldDescriptions.html",
    "title": "Field FieldDescriptions | Entities | 0.17.0-preview.18",
    "keywords": "Field FieldDescriptions Namespace : Unity.Entities.SourceGen <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public readonly IEnumerable<FieldDescription> FieldDescriptions Returns Type Description IEnumerable < FieldDescription >"
  },
  "api/Unity.Entities.SourceGen.JobEntityDescription.GeneratedJobEntityBatchTypeName.html": {
    "href": "api/Unity.Entities.SourceGen.JobEntityDescription.GeneratedJobEntityBatchTypeName.html",
    "title": "Field GeneratedJobEntityBatchTypeName | Entities | 0.17.0-preview.18",
    "keywords": "Field GeneratedJobEntityBatchTypeName Namespace : Unity.Entities.SourceGen <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public readonly string GeneratedJobEntityBatchTypeName Returns Type Description String"
  },
  "api/Unity.Entities.SourceGen.JobEntityDescription.html": {
    "href": "api/Unity.Entities.SourceGen.JobEntityDescription.html",
    "title": "Class JobEntityDescription | Entities | 0.17.0-preview.18",
    "keywords": "Class JobEntityDescription Inheritance Object JobEntityDescription Namespace : Unity.Entities.SourceGen <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class JobEntityDescription : ISourceGenerationDescription Constructors Name Description JobEntityDescription(SyntaxNode, SyntaxNode, ITypeSymbol, SourceGeneratorContext) Fields Name Description DeclaringTypeFullyQualifiedName DeclaringTypeName FieldDescriptions GeneratedJobEntityBatchTypeName NamespacesFromMostToLeastNested OnUpdateMethodParameters Properties Name Description Context Extension Methods SourceGenHelpers.GetAccessModifiers(ISourceGenerationDescription)"
  },
  "api/Unity.Entities.SourceGen.JobEntityDescription.NamespacesFromMostToLeastNested.html": {
    "href": "api/Unity.Entities.SourceGen.JobEntityDescription.NamespacesFromMostToLeastNested.html",
    "title": "Field NamespacesFromMostToLeastNested | Entities | 0.17.0-preview.18",
    "keywords": "Field NamespacesFromMostToLeastNested Namespace : Unity.Entities.SourceGen <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public readonly IEnumerable<NamespaceDeclarationSyntax> NamespacesFromMostToLeastNested Returns Type Description IEnumerable < NamespaceDeclarationSyntax >"
  },
  "api/Unity.Entities.SourceGen.JobEntityDescription.OnUpdateMethodParameter.BatchFieldDeclaration.html": {
    "href": "api/Unity.Entities.SourceGen.JobEntityDescription.OnUpdateMethodParameter.BatchFieldDeclaration.html",
    "title": "Field BatchFieldDeclaration | Entities | 0.17.0-preview.18",
    "keywords": "Field BatchFieldDeclaration Namespace : Unity.Entities.SourceGen <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public readonly string BatchFieldDeclaration Returns Type Description String"
  },
  "api/Unity.Entities.SourceGen.JobEntityDescription.OnUpdateMethodParameter.BatchFieldName.html": {
    "href": "api/Unity.Entities.SourceGen.JobEntityDescription.OnUpdateMethodParameter.BatchFieldName.html",
    "title": "Field BatchFieldName | Entities | 0.17.0-preview.18",
    "keywords": "Field BatchFieldName Namespace : Unity.Entities.SourceGen <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public readonly string BatchFieldName Returns Type Description String"
  },
  "api/Unity.Entities.SourceGen.JobEntityDescription.OnUpdateMethodParameter.-ctor.html": {
    "href": "api/Unity.Entities.SourceGen.JobEntityDescription.OnUpdateMethodParameter.-ctor.html",
    "title": "Constructor OnUpdateMethodParameter | Entities | 0.17.0-preview.18",
    "keywords": "Constructor OnUpdateMethodParameter OnUpdateMethodParameter(ParameterSyntax, SourceGeneratorContext) Declaration public OnUpdateMethodParameter(ParameterSyntax parameterSyntax, SourceGeneratorContext sourceGeneratorContext) Parameters Type Name Description ParameterSyntax parameterSyntax SourceGeneratorContext sourceGeneratorContext"
  },
  "api/Unity.Entities.SourceGen.JobEntityDescription.OnUpdateMethodParameter.FullyQualifiedTypeName.html": {
    "href": "api/Unity.Entities.SourceGen.JobEntityDescription.OnUpdateMethodParameter.FullyQualifiedTypeName.html",
    "title": "Field FullyQualifiedTypeName | Entities | 0.17.0-preview.18",
    "keywords": "Field FullyQualifiedTypeName Namespace : Unity.Entities.SourceGen <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public readonly string FullyQualifiedTypeName Returns Type Description String"
  },
  "api/Unity.Entities.SourceGen.JobEntityDescription.OnUpdateMethodParameter.html": {
    "href": "api/Unity.Entities.SourceGen.JobEntityDescription.OnUpdateMethodParameter.html",
    "title": "Class JobEntityDescription.OnUpdateMethodParameter | Entities | 0.17.0-preview.18",
    "keywords": "Class JobEntityDescription.OnUpdateMethodParameter Inheritance Object JobEntityDescription.OnUpdateMethodParameter Namespace : Unity.Entities.SourceGen <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class OnUpdateMethodParameter Constructors Name Description OnUpdateMethodParameter(ParameterSyntax, SourceGeneratorContext) Fields Name Description BatchFieldDeclaration BatchFieldName FullyQualifiedTypeName IsReadOnly NativeArrayPointerName"
  },
  "api/Unity.Entities.SourceGen.JobEntityDescription.OnUpdateMethodParameter.IsReadOnly.html": {
    "href": "api/Unity.Entities.SourceGen.JobEntityDescription.OnUpdateMethodParameter.IsReadOnly.html",
    "title": "Field IsReadOnly | Entities | 0.17.0-preview.18",
    "keywords": "Field IsReadOnly Namespace : Unity.Entities.SourceGen <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public readonly bool IsReadOnly Returns Type Description Boolean"
  },
  "api/Unity.Entities.SourceGen.JobEntityDescription.OnUpdateMethodParameter.NativeArrayPointerName.html": {
    "href": "api/Unity.Entities.SourceGen.JobEntityDescription.OnUpdateMethodParameter.NativeArrayPointerName.html",
    "title": "Field NativeArrayPointerName | Entities | 0.17.0-preview.18",
    "keywords": "Field NativeArrayPointerName Namespace : Unity.Entities.SourceGen <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public readonly string NativeArrayPointerName Returns Type Description String"
  },
  "api/Unity.Entities.SourceGen.JobEntityDescription.OnUpdateMethodParameters.html": {
    "href": "api/Unity.Entities.SourceGen.JobEntityDescription.OnUpdateMethodParameters.html",
    "title": "Field OnUpdateMethodParameters | Entities | 0.17.0-preview.18",
    "keywords": "Field OnUpdateMethodParameters Namespace : Unity.Entities.SourceGen <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public readonly IEnumerable<JobEntityDescription.OnUpdateMethodParameter> OnUpdateMethodParameters Returns Type Description IEnumerable < JobEntityDescription.OnUpdateMethodParameter >"
  },
  "api/Unity.Entities.SourceGen.LambdaCapturedVariableDescription.AttributeDescription.AttributeName.html": {
    "href": "api/Unity.Entities.SourceGen.LambdaCapturedVariableDescription.AttributeDescription.AttributeName.html",
    "title": "Field AttributeName | Entities | 0.17.0-preview.18",
    "keywords": "Field AttributeName Namespace : Unity.Entities.SourceGen <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public string AttributeName Returns Type Description String"
  },
  "api/Unity.Entities.SourceGen.LambdaCapturedVariableDescription.AttributeDescription.CheckAttributeApplicable.html": {
    "href": "api/Unity.Entities.SourceGen.LambdaCapturedVariableDescription.AttributeDescription.CheckAttributeApplicable.html",
    "title": "Field CheckAttributeApplicable | Entities | 0.17.0-preview.18",
    "keywords": "Field CheckAttributeApplicable Namespace : Unity.Entities.SourceGen <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public LambdaCapturedVariableDescription.CheckAttributeApplicable CheckAttributeApplicable Returns Type Description LambdaCapturedVariableDescription.CheckAttributeApplicable"
  },
  "api/Unity.Entities.SourceGen.LambdaCapturedVariableDescription.AttributeDescription.-ctor.html": {
    "href": "api/Unity.Entities.SourceGen.LambdaCapturedVariableDescription.AttributeDescription.-ctor.html",
    "title": "Constructor AttributeDescription | Entities | 0.17.0-preview.18",
    "keywords": "Constructor AttributeDescription AttributeDescription(String, String, LambdaCapturedVariableDescription.CheckAttributeApplicable) Declaration public AttributeDescription(string methodName, string attributeName, LambdaCapturedVariableDescription.CheckAttributeApplicable check = null) Parameters Type Name Description String methodName String attributeName LambdaCapturedVariableDescription.CheckAttributeApplicable check"
  },
  "api/Unity.Entities.SourceGen.LambdaCapturedVariableDescription.AttributeDescription.html": {
    "href": "api/Unity.Entities.SourceGen.LambdaCapturedVariableDescription.AttributeDescription.html",
    "title": "Struct LambdaCapturedVariableDescription.AttributeDescription | Entities | 0.17.0-preview.18",
    "keywords": "Struct LambdaCapturedVariableDescription.AttributeDescription Namespace : Unity.Entities.SourceGen <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct AttributeDescription Constructors Name Description AttributeDescription(String, String, LambdaCapturedVariableDescription.CheckAttributeApplicable) Fields Name Description AttributeName CheckAttributeApplicable MethodName"
  },
  "api/Unity.Entities.SourceGen.LambdaCapturedVariableDescription.AttributeDescription.MethodName.html": {
    "href": "api/Unity.Entities.SourceGen.LambdaCapturedVariableDescription.AttributeDescription.MethodName.html",
    "title": "Field MethodName | Entities | 0.17.0-preview.18",
    "keywords": "Field MethodName Namespace : Unity.Entities.SourceGen <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public string MethodName Returns Type Description String"
  },
  "api/Unity.Entities.SourceGen.LambdaCapturedVariableDescription.Attributes.html": {
    "href": "api/Unity.Entities.SourceGen.LambdaCapturedVariableDescription.Attributes.html",
    "title": "Property Attributes | Entities | 0.17.0-preview.18",
    "keywords": "Property Attributes Attributes Declaration public List<string> Attributes { get; } Property Value Type Description List < String >"
  },
  "api/Unity.Entities.SourceGen.LambdaCapturedVariableDescription.AttributesDescriptions.html": {
    "href": "api/Unity.Entities.SourceGen.LambdaCapturedVariableDescription.AttributesDescriptions.html",
    "title": "Field AttributesDescriptions | Entities | 0.17.0-preview.18",
    "keywords": "Field AttributesDescriptions Namespace : Unity.Entities.SourceGen <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static readonly List<LambdaCapturedVariableDescription.AttributeDescription> AttributesDescriptions Returns Type Description List < LambdaCapturedVariableDescription.AttributeDescription >"
  },
  "api/Unity.Entities.SourceGen.LambdaCapturedVariableDescription.CheckAttributeApplicable.html": {
    "href": "api/Unity.Entities.SourceGen.LambdaCapturedVariableDescription.CheckAttributeApplicable.html",
    "title": "Delegate LambdaCapturedVariableDescription.CheckAttributeApplicable | Entities | 0.17.0-preview.18",
    "keywords": "Delegate LambdaCapturedVariableDescription.CheckAttributeApplicable Namespace : Unity.Entities.SourceGen <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate bool CheckAttributeApplicable(); Returns Type Description Boolean"
  },
  "api/Unity.Entities.SourceGen.LambdaCapturedVariableDescription.-ctor.html": {
    "href": "api/Unity.Entities.SourceGen.LambdaCapturedVariableDescription.-ctor.html",
    "title": "Constructor LambdaCapturedVariableDescription | Entities | 0.17.0-preview.18",
    "keywords": "Constructor LambdaCapturedVariableDescription LambdaCapturedVariableDescription(ISymbol, Boolean) Declaration public LambdaCapturedVariableDescription(ISymbol symbol, bool explicitThis = false) Parameters Type Name Description ISymbol symbol Boolean explicitThis"
  },
  "api/Unity.Entities.SourceGen.LambdaCapturedVariableDescription.html": {
    "href": "api/Unity.Entities.SourceGen.LambdaCapturedVariableDescription.html",
    "title": "Class LambdaCapturedVariableDescription | Entities | 0.17.0-preview.18",
    "keywords": "Class LambdaCapturedVariableDescription Inheritance Object LambdaCapturedVariableDescription Namespace : Unity.Entities.SourceGen <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class LambdaCapturedVariableDescription Constructors Name Description LambdaCapturedVariableDescription(ISymbol, Boolean) Fields Name Description AttributesDescriptions Properties Name Description Attributes IsThis OriginalVariableName Symbol Type VariableFieldName Methods Name Description NamesOfAllDisposableMembersIncludingOurselves() SupportsDeallocateOnJobCompletion()"
  },
  "api/Unity.Entities.SourceGen.LambdaCapturedVariableDescription.IsThis.html": {
    "href": "api/Unity.Entities.SourceGen.LambdaCapturedVariableDescription.IsThis.html",
    "title": "Property IsThis | Entities | 0.17.0-preview.18",
    "keywords": "Property IsThis IsThis Declaration public bool IsThis { get; } Property Value Type Description Boolean"
  },
  "api/Unity.Entities.SourceGen.LambdaCapturedVariableDescription.NamesOfAllDisposableMembersIncludingOurselves.html": {
    "href": "api/Unity.Entities.SourceGen.LambdaCapturedVariableDescription.NamesOfAllDisposableMembersIncludingOurselves.html",
    "title": "Method NamesOfAllDisposableMembersIncludingOurselves | Entities | 0.17.0-preview.18",
    "keywords": "Method NamesOfAllDisposableMembersIncludingOurselves NamesOfAllDisposableMembersIncludingOurselves() Declaration public IEnumerable<string> NamesOfAllDisposableMembersIncludingOurselves() Returns Type Description IEnumerable < String >"
  },
  "api/Unity.Entities.SourceGen.LambdaCapturedVariableDescription.OriginalVariableName.html": {
    "href": "api/Unity.Entities.SourceGen.LambdaCapturedVariableDescription.OriginalVariableName.html",
    "title": "Property OriginalVariableName | Entities | 0.17.0-preview.18",
    "keywords": "Property OriginalVariableName OriginalVariableName Declaration public string OriginalVariableName { get; } Property Value Type Description String"
  },
  "api/Unity.Entities.SourceGen.LambdaCapturedVariableDescription.SupportsDeallocateOnJobCompletion.html": {
    "href": "api/Unity.Entities.SourceGen.LambdaCapturedVariableDescription.SupportsDeallocateOnJobCompletion.html",
    "title": "Method SupportsDeallocateOnJobCompletion | Entities | 0.17.0-preview.18",
    "keywords": "Method SupportsDeallocateOnJobCompletion SupportsDeallocateOnJobCompletion() Declaration public bool SupportsDeallocateOnJobCompletion() Returns Type Description Boolean"
  },
  "api/Unity.Entities.SourceGen.LambdaCapturedVariableDescription.Symbol.html": {
    "href": "api/Unity.Entities.SourceGen.LambdaCapturedVariableDescription.Symbol.html",
    "title": "Property Symbol | Entities | 0.17.0-preview.18",
    "keywords": "Property Symbol Symbol Declaration public ISymbol Symbol { get; } Property Value Type Description ISymbol"
  },
  "api/Unity.Entities.SourceGen.LambdaCapturedVariableDescription.Type.html": {
    "href": "api/Unity.Entities.SourceGen.LambdaCapturedVariableDescription.Type.html",
    "title": "Property Type | Entities | 0.17.0-preview.18",
    "keywords": "Property Type Type Declaration public ITypeSymbol Type { get; } Property Value Type Description ITypeSymbol"
  },
  "api/Unity.Entities.SourceGen.LambdaCapturedVariableDescription.VariableFieldName.html": {
    "href": "api/Unity.Entities.SourceGen.LambdaCapturedVariableDescription.VariableFieldName.html",
    "title": "Property VariableFieldName | Entities | 0.17.0-preview.18",
    "keywords": "Property VariableFieldName VariableFieldName Declaration public string VariableFieldName { get; } Property Value Type Description String"
  },
  "api/Unity.Entities.SourceGen.LambdaJobsGenerator.EntitiesSyntaxReceiver.EntitiesGetterCandidates.html": {
    "href": "api/Unity.Entities.SourceGen.LambdaJobsGenerator.EntitiesSyntaxReceiver.EntitiesGetterCandidates.html",
    "title": "Field EntitiesGetterCandidates | Entities | 0.17.0-preview.18",
    "keywords": "Field EntitiesGetterCandidates Namespace : Unity.Entities.SourceGen <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public readonly List<IdentifierNameSyntax> EntitiesGetterCandidates Returns Type Description List < IdentifierNameSyntax >"
  },
  "api/Unity.Entities.SourceGen.LambdaJobsGenerator.EntitiesSyntaxReceiver.html": {
    "href": "api/Unity.Entities.SourceGen.LambdaJobsGenerator.EntitiesSyntaxReceiver.html",
    "title": "Class LambdaJobsGenerator.EntitiesSyntaxReceiver | Entities | 0.17.0-preview.18",
    "keywords": "Class LambdaJobsGenerator.EntitiesSyntaxReceiver Inheritance Object LambdaJobsGenerator.EntitiesSyntaxReceiver Namespace : Unity.Entities.SourceGen <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class EntitiesSyntaxReceiver : ISyntaxReceiver Fields Name Description EntitiesGetterCandidates JobGetterCandidates Methods Name Description OnVisitSyntaxNode(SyntaxNode)"
  },
  "api/Unity.Entities.SourceGen.LambdaJobsGenerator.EntitiesSyntaxReceiver.JobGetterCandidates.html": {
    "href": "api/Unity.Entities.SourceGen.LambdaJobsGenerator.EntitiesSyntaxReceiver.JobGetterCandidates.html",
    "title": "Field JobGetterCandidates | Entities | 0.17.0-preview.18",
    "keywords": "Field JobGetterCandidates Namespace : Unity.Entities.SourceGen <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public readonly List<IdentifierNameSyntax> JobGetterCandidates Returns Type Description List < IdentifierNameSyntax >"
  },
  "api/Unity.Entities.SourceGen.LambdaJobsGenerator.EntitiesSyntaxReceiver.OnVisitSyntaxNode.html": {
    "href": "api/Unity.Entities.SourceGen.LambdaJobsGenerator.EntitiesSyntaxReceiver.OnVisitSyntaxNode.html",
    "title": "Method OnVisitSyntaxNode | Entities | 0.17.0-preview.18",
    "keywords": "Method OnVisitSyntaxNode OnVisitSyntaxNode(SyntaxNode) Declaration public void OnVisitSyntaxNode(SyntaxNode syntaxNode) Parameters Type Name Description SyntaxNode syntaxNode"
  },
  "api/Unity.Entities.SourceGen.LambdaJobsGenerator.Execute.html": {
    "href": "api/Unity.Entities.SourceGen.LambdaJobsGenerator.Execute.html",
    "title": "Method Execute | Entities | 0.17.0-preview.18",
    "keywords": "Method Execute Execute(SourceGeneratorContext) Declaration public void Execute(SourceGeneratorContext context) Parameters Type Name Description SourceGeneratorContext context"
  },
  "api/Unity.Entities.SourceGen.LambdaJobsGenerator.html": {
    "href": "api/Unity.Entities.SourceGen.LambdaJobsGenerator.html",
    "title": "Class LambdaJobsGenerator | Entities | 0.17.0-preview.18",
    "keywords": "Class LambdaJobsGenerator Inheritance Object LambdaJobsGenerator Namespace : Unity.Entities.SourceGen <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class LambdaJobsGenerator : ISourceGenerator Methods Name Description Execute(SourceGeneratorContext) Initialize(InitializationContext)"
  },
  "api/Unity.Entities.SourceGen.LambdaJobsGenerator.Initialize.html": {
    "href": "api/Unity.Entities.SourceGen.LambdaJobsGenerator.Initialize.html",
    "title": "Method Initialize | Entities | 0.17.0-preview.18",
    "keywords": "Method Initialize Initialize(InitializationContext) Declaration public void Initialize(InitializationContext context) Parameters Type Name Description InitializationContext context"
  },
  "api/Unity.Entities.SourceGen.SyntaxNodeReplacer.-ctor.html": {
    "href": "api/Unity.Entities.SourceGen.SyntaxNodeReplacer.-ctor.html",
    "title": "Constructor SyntaxNodeReplacer | Entities | 0.17.0-preview.18",
    "keywords": "Constructor SyntaxNodeReplacer SyntaxNodeReplacer(Dictionary<SyntaxNode, SyntaxNode>) Declaration public SyntaxNodeReplacer(Dictionary<SyntaxNode, SyntaxNode> replacements) Parameters Type Name Description Dictionary < SyntaxNode , SyntaxNode > replacements"
  },
  "api/Unity.Entities.SourceGen.SyntaxNodeReplacer.html": {
    "href": "api/Unity.Entities.SourceGen.SyntaxNodeReplacer.html",
    "title": "Class SyntaxNodeReplacer | Entities | 0.17.0-preview.18",
    "keywords": "Class SyntaxNodeReplacer Inheritance Object SyntaxNodeReplacer Namespace : Unity.Entities.SourceGen <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class SyntaxNodeReplacer : CSharpSyntaxRewriter Constructors Name Description SyntaxNodeReplacer(Dictionary<SyntaxNode, SyntaxNode>) Methods Name Description Visit(SyntaxNode)"
  },
  "api/Unity.Entities.SourceGen.SyntaxNodeReplacer.Visit.html": {
    "href": "api/Unity.Entities.SourceGen.SyntaxNodeReplacer.Visit.html",
    "title": "Method Visit | Entities | 0.17.0-preview.18",
    "keywords": "Method Visit Visit(SyntaxNode) Declaration public override SyntaxNode Visit(SyntaxNode node) Parameters Type Name Description SyntaxNode node Returns Type Description SyntaxNode"
  },
  "api/Unity.Entities.StaticOptimizeEntity.html": {
    "href": "api/Unity.Entities.StaticOptimizeEntity.html",
    "title": "Class StaticOptimizeEntity | Entities | 0.17.0-preview.18",
    "keywords": "Class StaticOptimizeEntity Inheritance Object Object Component Behaviour MonoBehaviour StaticOptimizeEntity Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(String, Single) MonoBehaviour.InvokeRepeating(String, Single, Single) MonoBehaviour.CancelInvoke(String) MonoBehaviour.IsInvoking(String) MonoBehaviour.StartCoroutine(String) MonoBehaviour.StartCoroutine(String, Object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(String) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(Object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, Component) Component.TryGetComponent<T>(T) Component.GetComponent(String) Component.GetComponentInChildren(Type, Boolean) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(Boolean) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, Boolean) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(Boolean) Component.GetComponentsInChildren<T>(Boolean, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, Boolean) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(Boolean) Component.GetComponentsInParent<T>(Boolean, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(String) Component.SendMessageUpwards(String, Object, SendMessageOptions) Component.SendMessageUpwards(String, Object) Component.SendMessageUpwards(String) Component.SendMessageUpwards(String, SendMessageOptions) Component.SendMessage(String, Object) Component.SendMessage(String) Component.SendMessage(String, Object, SendMessageOptions) Component.SendMessage(String, SendMessageOptions) Component.BroadcastMessage(String, Object, SendMessageOptions) Component.BroadcastMessage(String, Object) Component.BroadcastMessage(String) Component.BroadcastMessage(String, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) Object.Destroy(Object) Object.DestroyImmediate(Object, Boolean) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, Boolean) Object.DontDestroyOnLoad(Object) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectOfType(Type) Object.FindObjectOfType(Type, Boolean) Object.ToString() Object.name Object.hideFlags Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [DisallowMultipleComponent] public class StaticOptimizeEntity : MonoBehaviour"
  },
  "api/Unity.Entities.Streaming.EntitySceneOptimization.html": {
    "href": "api/Unity.Entities.Streaming.EntitySceneOptimization.html",
    "title": "Class EntitySceneOptimization | Entities | 0.17.0-preview.18",
    "keywords": "Class EntitySceneOptimization Inheritance Object EntitySceneOptimization Namespace : Unity.Entities.Streaming <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class EntitySceneOptimization Methods Name Description Optimize(World)"
  },
  "api/Unity.Entities.Streaming.EntitySceneOptimization.Optimize.html": {
    "href": "api/Unity.Entities.Streaming.EntitySceneOptimization.Optimize.html",
    "title": "Method Optimize | Entities | 0.17.0-preview.18",
    "keywords": "Method Optimize Optimize(World) Declaration public static void Optimize(World world) Parameters Type Name Description World world"
  },
  "api/Unity.Entities.Streaming.html": {
    "href": "api/Unity.Entities.Streaming.html",
    "title": "Namespace Unity.Entities.Streaming | Entities | 0.17.0-preview.18",
    "keywords": "Namespace Unity.Entities.Streaming Classes EntitySceneOptimization"
  },
  "api/Unity.Entities.SystemBase.CompleteDependency.html": {
    "href": "api/Unity.Entities.SystemBase.CompleteDependency.html",
    "title": "Method CompleteDependency | Entities | 0.17.0-preview.18",
    "keywords": "Method CompleteDependency CompleteDependency() Declaration protected void CompleteDependency()"
  },
  "api/Unity.Entities.SystemBase.Dependency.html": {
    "href": "api/Unity.Entities.SystemBase.Dependency.html",
    "title": "Property Dependency | Entities | 0.17.0-preview.18",
    "keywords": "Property Dependency Dependency The ECS-related data dependencies of the system. Declaration protected JobHandle Dependency { get; set; } Property Value Type Description JobHandle Remarks Before OnUpdate() , the Dependency property represents the combined job handles of any job that writes to the same components that the current system reads -- or reads the same components that the current system writes to. When you use Entities.ForEach or Job.WithCode , the system uses the Dependency property to specify a job’s dependencies when scheduling it. The system also combines the new job's JobHandle with Dependency so that any subsequent job scheduled in the system depends on the earlier jobs (in sequence). The following example illustrates an OnUpdate() implementation that relies on implicit dependency management. The function schedules three jobs, each depending on the previous one: protected override void OnUpdate() { Entities .WithName(\"ForEach_Job_One\") .ForEach((ref AComponent c) => { /*...*/ }) .ScheduleParallel(); Entities .WithName(\"ForEach_Job_Two\") .ForEach((ref AnotherComponent c) => { /*...*/ }) .ScheduleParallel(); NativeArray<int> result = new NativeArray<int>(1, Allocator.TempJob); Job .WithName(\"Job_Three\") .WithDisposeOnCompletion(result) .WithCode(() => { /*...*/ result[0] = 1; }) .Schedule(); } You can opt out of this default dependency management by explicitly passing a JobHandle to Entities.ForEach or Job.WithCode . When you pass in a JobHandle , these constructions also return a JobHandle representing the input dependencies combined with the new job. The JobHandle objects of any jobs scheduled with explicit dependencies are not combined with the system’s Dependency property. You must set the Dependency property manually to make sure that later systems receive the correct job dependencies. The following OnUpdate() function illustrates manual dependency management. The function uses two [Entity.ForEach] constructions that schedule jobs which do not depend upon each other, only the incoming dependencies of the system. Then a Job.WithCode construction schedules a job that depends on both of the prior jobs, who’s dependencies are combined using JobHandle.CombineDependencies . Finally, the JobHandle of the last job is assigned to the Dependency property so that the ECS safety manager can propagate the dependencies to subsequent systems. protected override void OnUpdate() { JobHandle One = Entities .WithName(\"ForEach_Job_One\") .ForEach((ref AComponent c) => { /*...*/ }) .ScheduleParallel(this.Dependency); JobHandle Two = Entities .WithName(\"ForEach_Job_Two\") .ForEach((ref AnotherComponent c) => { /*...*/ }) .ScheduleParallel(this.Dependency); JobHandle intermediateDependencies = JobHandle.CombineDependencies(One, Two); NativeArray<int> result = new NativeArray<int>(1, Allocator.TempJob); JobHandle finalDependency = Job .WithName(\"Job_Three\") .WithDisposeOnCompletion(result) .WithCode(() => { /*...*/ result[0] = 1; }) .Schedule(intermediateDependencies); this.Dependency = finalDependency; } You can combine implicit and explicit dependency management (by using JobHandle.CombineDependencies ); however, doing so can be error prone. When you set the Dependency property, the assigned JobHandle replaces any existing dependency, it is not combined with them. Note that the default, implicit dependency management does not include IJobChunk jobs. You must manage the dependencies for IJobChunk explicitly."
  },
  "api/Unity.Entities.SystemBase.Entities.html": {
    "href": "api/Unity.Entities.SystemBase.Entities.html",
    "title": "Property Entities | Entities | 0.17.0-preview.18",
    "keywords": "Property Entities Entities Provides a mechanism for defining an entity query and invoking a lambda expression on each entity selected by that query. Declaration protected ForEachLambdaJobDescription Entities { get; } Property Value Type Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription Remarks The Entities property provides a convenient mechanism for implementing the most common operation performed by systems in ECS, namely, iterating over a set of entities to read and update component data. Entities provides a LINQ method-style syntax that you use to describe the work to be performed. Unity uses a compiler extension to convert the description into efficient, (optionally) multi-threaded executable code. Entities .WithName(\"Update_Position\") // Shown in error messages and profiler .WithAll<LocalToWorld>() // Require the LocalToWorld component .ForEach( // Write to Displacement (ref), read Velocity (in) (ref Position position, in Velocity velocity) => { //Execute for each selected entity position = new Position() { // dT is a captured variable Value = position.Value + velocity.Value * dT }; } ) .ScheduleParallel(); // Schedule as a parallel job Describing the entity query The components that you specify as parameters for your lambda function are automatically added to the entity query created for an Entities.Foreach construction. You can also add a number of \"With\" clauses to identify which entities that you want to process These clauses include: WithAll -- An entity must have all of these component types (in addition to having all the component types found in the lambda parameter list). WithAny -- An entity must have one or more of these component types. WithNone -- An entity must not have any of these component types. WithChangeFilter() -- Only selects entities in chunks in which the specified component might have changed since the last time this system instance updated. WithSharedComponentFilter(ISharedComponentData) -- Only select chunks that have a specified value for a shared component. WithEntityQueryOptions(EntityQueryOptions) -- Specify additonal options defined in a EntityQueryOptions object. WithStoreEntityQueryInField(EntityQuery) -- Stores the EntityQuery object generated by the Entities.ForEach in an EntityQuery field on your system. You can use this EntityQuery object for such purposes as getting the number of entities that will be selected by the query. Note that this function assigns the EntityQuery instance to your field when the system is created. This means that you can use the query before the first execution of the lambda function. Defining the lambda function Define the lambda function inside the ForEach() method of the entities property. When the system invokes the lambda function, it assigns values to the function parameters based on the current entity. You can pass ECS component types as parameters as well as a set of special, named parameters. Parameters passed-by-value first (no parameter modifiers) Writable parameters second( ref parameter modifier) Read-only parameters last( in parameter modifier) All components should use either the ref or the in parameter modifier keywords. You can pass up to eight parameters to the lambda function. In addition to ECS component types, you can use the following: Entity entity — the Entity instance of the current entity. (The parameter can be named anything as long as the type is Entity.) int entityInQueryIndex — the index of the entity in the list of all entities selected by the query. Use the entity index value when you have a native array that you need to fill with a unique value for each entity. You can use the entityInQueryIndex as the index in that array. The entityInQueryIndex should also be used as the sortKey for adding commands to a concurrent EntityCommandBuffer . int nativeThreadIndex — a unique index for the thread executing the current iteration of the lambda function. When you execute the lambda function using Run(), nativeThreadIndex is always zero. .ForEach((Entity entity, int entityInQueryIndex, ref WritableComponent aReadwriteComponent, in ReadonlyComponent aReadonlyComponent) => { /*..*/ }) Capturing variables You can capture local variables in the lambda function. When you execute the function using a job (by calling ScheduleParallel() or ScheduleSingle() instead of Run() ) there are some restrictions on the captured variables and how you use them: Only native containers and blittable types can be captured. A job can only write to captured variables that are native containers. (To “return” a single value, create a native array with one element.) You can use the following functions to apply modifiers and attributes to the captured native container variables, including native arrays . See Job.WithCode for a list of these modifiers and attributes. Executing the lambda function To execute a ForEach construction, you have three options: ScheduleParallel() -- schedules the work to be done in parallel using the C# Job system. Each parallel job instance processes at least one chunk of entities at a time. In other words, if all the selected entities are in the same chunk, then only one job instance is spawned. Schedule() -- schedules the work to be done in a single job (no matter how many entities are selected). Run() -- evaluates the entity query and invokes the lambda function for each selected entity immediately on the main thread. Calling Run() completes the system Dependency JobHandle before running, blocking the main thread, if necessary, while it waits for those jobs to finish. When you call Schedule() or ScheduleParallel() without parameters, then the scheduled jobs use the current value of Dependency . You can also pass a JobHandle to these functions to define the dependencies of the scheduled job. In this case, the Entities.forEach construction returns a new JobHandle that adds the scheduled job to the passed in JobHandle . See Dependency for more information. Additional options WithName(string) -— assigns the specified string as the name of the generated job class. Assigning a name is optional, but can help identify the function when debugging and profiling. WithStructuralChanges() -— executes the lambda function on the main thread and disables Burst so that you can make structural changes to your entity data within the function. For better performance, use an EntityCommandBuffer instead. WithoutBurst() —- disables Burst compilation. Use this function when your lambda function contains code not supported by Burst or while debugging. WithBurst(FloatMode, FloatPrecision, bool) — sets options for the Burst compiler: floatMode —- sets the floating point math optimization mode.Fast mode executes faster, but produces larger floating point error than Strict mode.Defaults to Strict. See Burst FloatMode . floatPrecision —- sets the floating point math precision. See Burst FloatPrecision . synchronousCompilation —- compiles the function immediately instead of scheduling the function for compilation later."
  },
  "api/Unity.Entities.SystemBase.GetBuffer.html": {
    "href": "api/Unity.Entities.SystemBase.GetBuffer.html",
    "title": "Method GetBuffer | Entities | 0.17.0-preview.18",
    "keywords": "Method GetBuffer GetBuffer<T>(Entity) Gets the dynamic buffer of an entity. Declaration public DynamicBuffer<T> GetBuffer<T>(Entity entity) where T : struct, IBufferElementData Parameters Type Name Description Entity entity The entity. Returns Type Description DynamicBuffer <T> The DynamicBuffer object for accessing the buffer contents. Type Parameters Name Description T The type of the buffer's elements. Remarks When you call this method on the main thread, it invokes GetBuffer<T>(Entity) . (An [Entities.ForEach] function invoked with Run() executes on the main thread.) When you call this method inside a job scheduled using [Entities.ForEach], this method gets replaced with component access methods through BufferFromEntity<T> . Exceptions Type Condition ArgumentException Thrown if T is an unsupported type."
  },
  "api/Unity.Entities.SystemBase.GetBufferFromEntity.html": {
    "href": "api/Unity.Entities.SystemBase.GetBufferFromEntity.html",
    "title": "Method GetBufferFromEntity | Entities | 0.17.0-preview.18",
    "keywords": "Method GetBufferFromEntity GetBufferFromEntity<T>(Boolean) Gets a BufferFromEntity<T> object that can access a DynamicBuffer<T> . Declaration public BufferFromEntity<T> GetBufferFromEntity<T>(bool isReadOnly = false) where T : struct, IBufferElementData Parameters Type Name Description Boolean isReadOnly Whether the buffer data is only read or is also written. Access data in a read-only fashion whenever possible. Returns Type Description BufferFromEntity <T> An array-like object that provides access to buffers, indexed by Entity . Type Parameters Name Description T The type of IBufferElementData stored in the buffer. Remarks Assign the returned object to a field of your Job struct so that you can access the contents of the buffer in a Job. When you call this method on the main thread, it invokes GetBufferFromEntity<T>(Boolean) . (An Entities.ForEach function invoked with Run() executes on the main thread.) When you call this method inside a job scheduled using Entities.ForEach , this method gets replaced direct access to BufferFromEntity<T> . See Also ComponentDataFromEntity <T>"
  },
  "api/Unity.Entities.SystemBase.GetComponent.html": {
    "href": "api/Unity.Entities.SystemBase.GetComponent.html",
    "title": "Method GetComponent | Entities | 0.17.0-preview.18",
    "keywords": "Method GetComponent GetComponent<T>(Entity) Look up the value of a component for an entity. Declaration protected T GetComponent<T>(Entity entity) where T : struct, IComponentData Parameters Type Name Description Entity entity The entity. Returns Type Description T A struct of type T containing the component value. Type Parameters Name Description T The type of component to retrieve. Remarks Use this method to look up data in another entity using its Entity object. For example, if you have a component that contains an Entity field, you can look up the component data for the referenced entity using this method. When iterating over a set of entities via Entities.ForEach , do not use this method to access data of the current entity in the set. This function is much slower than accessing the data directly (by passing the component containing the data to your lambda iteration function as a parameter). When you call this method on the main thread, it invokes GetComponentData<T>(Entity) . (An Entities.ForEach function invoked with Run() executes on the main thread.) When you call this method inside a job scheduled using Entities.ForEach , this method gets replaced with component access methods through ComponentDataFromEntity<T> . In both cases, this lookup method results in a slower, indirect memory access. When possible, organize your data to minimize the need for indirect lookups. Exceptions Type Condition ArgumentException Thrown if the component type has no fields."
  },
  "api/Unity.Entities.SystemBase.GetComponentDataFromEntity.html": {
    "href": "api/Unity.Entities.SystemBase.GetComponentDataFromEntity.html",
    "title": "Method GetComponentDataFromEntity | Entities | 0.17.0-preview.18",
    "keywords": "Method GetComponentDataFromEntity GetComponentDataFromEntity<T>(Boolean) Gets an dictionary-like container containing all components of type T, keyed by Entity. Declaration public ComponentDataFromEntity<T> GetComponentDataFromEntity<T>(bool isReadOnly = false) where T : struct, IComponentData Parameters Type Name Description Boolean isReadOnly Whether the data is only read, not written. Access data as read-only whenever possible. Returns Type Description ComponentDataFromEntity <T> All component data of type T. Type Parameters Name Description T A struct that implements IComponentData . Remarks When you call this method on the main thread, it invokes GetComponentDataFromEntity<T>(Boolean) . (An Entities.ForEach function invoked with Run() executes on the main thread.) When you call this method inside a job scheduled using Entities.ForEach , this method gets replaced direct access to ComponentDataFromEntity<T> ."
  },
  "api/Unity.Entities.SystemBase.HasComponent.html": {
    "href": "api/Unity.Entities.SystemBase.HasComponent.html",
    "title": "Method HasComponent | Entities | 0.17.0-preview.18",
    "keywords": "Method HasComponent HasComponent<T>(Entity) Checks whether an entity has a specific type of component. Declaration protected bool HasComponent<T>(Entity entity) where T : struct, IComponentData Parameters Type Name Description Entity entity The Entity object. Returns Type Description Boolean True, if the specified entity has the component. Type Parameters Name Description T The data type of the component. Remarks Always returns false for an entity that has been destroyed. Use this method to check if another entity has a given type of component using its Entity object. For example, if you have a component that contains an Entity field, you can check whether the referenced entity has a specific type of component using this method. (Entities in the set always have required components, so you don’t need to check for them.) When iterating over a set of entities via Entities.ForEach , avoid using this method with the current entity in the set. It is generally faster to change your entity query methods to avoid optional components; this may require a different Entities.ForEach construction to handle each combination of optional and non-optional components. When you call this method on the main thread, it invokes HasComponent<T>(Entity) . (An Entities.ForEach function invoked with Run() executes on the main thread.) When you call this method inside a job scheduled using Entities.ForEach , this method gets replaced with component access methods through ComponentDataFromEntity<T> . In both cases, this lookup method results in a slower, indirect memory access. When possible, organize your data to minimize the need for indirect lookups."
  },
  "api/Unity.Entities.SystemBase.html": {
    "href": "api/Unity.Entities.SystemBase.html",
    "title": "Class SystemBase | Entities | 0.17.0-preview.18",
    "keywords": "Class SystemBase Implement SystemBase to create a systems in ECS. Inheritance Object ComponentSystemBase SystemBase Inherited Members ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnCreate() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.ExecutingSystemType ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetComponentTypeHandle<T>(Boolean) ComponentSystemBase.GetDynamicComponentTypeHandle(ComponentType) ComponentSystemBase.GetBufferTypeHandle<T>(Boolean) ComponentSystemBase.GetSharedComponentTypeHandle<T>() ComponentSystemBase.GetEntityTypeHandle() ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.TryGetSingleton<T>(T) ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.TryGetSingletonEntity<T>(Entity) ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public abstract class SystemBase : ComponentSystemBase Remarks Systems in ECS A typical system operates on a set of entities that have specific components. The system identifies the components of interest, reading and writing data, and performing other entity operations as appropriate. The following example shows a basic system that iterates over entities using a Entities.ForEach construction. In this example, the system iterates over all entities with both a Displacement and a Velocity component and updates the Displacement based on the delta time elapsed since the last frame. public struct Position : IComponentData { public float3 Value; } public struct Velocity : IComponentData { public float3 Value; } public class ECSSystem : SystemBase { protected override void OnUpdate() { // Local variable captured in ForEach float dT = Time.DeltaTime; Entities .WithName(\"Update_Displacement\") .ForEach( (ref Position position, in Velocity velocity) => { position = new Position() { Value = position.Value + velocity.Value * dT }; } ) .ScheduleParallel(); } } System lifecycle callbacks You can define a set of system lifecycle event functions when you implement a system. The runtime invokes these functions in the following order: OnCreate() -- called when the system is created. OnStartRunning() -- before the first OnUpdate and whenever the system resumes running. OnUpdate() -- every frame as long as the system has work to do (see ShouldRunSystem() ) and the system is Enabled . OnStopRunning() -- whenever the system stops updating because it finds no entities matching its queries. Also called before OnDestroy. OnDestroy() -- when the system is destroyed. All of these functions are executed on the main thread. To perform work on background threads, you can schedule jobs from the OnUpdate() function. System update order The runtime executes systems in the order determined by their ComponentSystemGroup . Place a system in a group using UpdateInGroupAttribute . Use UpdateBeforeAttribute and UpdateAfterAttribute to specify the execution order within a group. If you do not explicitly place a system in a specific group, the runtime places it in the default World SimulationSystemGroup . By default, all systems are discovered, instantiated, and added to the default World. You can use the DisableAutoCreationAttribute to prevent a system from being created automatically. Entity queries A system caches all queries created through an Entities.ForEach construction, through ComponentSystemBase.GetEntityQuery , or through ComponentSystemBase.RequireForUpdate . By default, the runtime only calls a system's OnUpdate() function when one of these cached queries finds entities. You can use the AlwaysUpdateSystemAttribute to have the system always update. Note that a system with no queries is also updated every frame. Entities.ForEach and Job.WithCode constructions The Entities property provides a convenient mechanism for iterating over entity data. Using an Entities.ForEach construction, you can define your entity query, specify a lambda function to run for each entity, and either schedule the work to be done on a background thread or execute the work immediately on the main thread. The Entities.ForEach construction uses a C# compiler extension to take a data query syntax that describes your intent and translate it into efficient (optionally) job-based code. The Job property provides a similar mechanism for defining a C# Job . You can only use Schedule() to run a Job.WithCode construction, which executes the lambda function as a single job. System attributes You can use a number of attributes on your SystemBase implementation to control when it updates: UpdateInGroupAttribute -- place the system in a ComponentSystemGroup . UpdateBeforeAttribute -- always update the system before another system in the same group. UpdateAfterAttribute -- always update the system after another system in the same group. AlwaysUpdateSystemAttribute -- invoke OnUpdate every frame. DisableAutoCreationAttribute -- do not create the system automatically. AlwaysSynchronizeSystemAttribute -- force a sync point before invoking OnUpdate . Properties Name Description Dependency The ECS-related data dependencies of the system. Entities Provides a mechanism for defining an entity query and invoking a lambda expression on each entity selected by that query. Job Provides a mechanism for defining and executing an [IJob]. Methods Name Description CompleteDependency() GetBuffer<T>(Entity) Gets the dynamic buffer of an entity. GetBufferFromEntity<T>(Boolean) Gets a BufferFromEntity<T> object that can access a DynamicBuffer<T> . GetComponent<T>(Entity) Look up the value of a component for an entity. GetComponentDataFromEntity<T>(Boolean) Gets an dictionary-like container containing all components of type T, keyed by Entity. HasComponent<T>(Entity) Checks whether an entity has a specific type of component. OnUpdate() Implement OnUpdate() to perform the major work of this system. SetComponent<T>(Entity, T) Sets the value of a component of an entity. Update() Update the system manually. Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Entities.SystemBase.Job.html": {
    "href": "api/Unity.Entities.SystemBase.Job.html",
    "title": "Property Job | Entities | 0.17.0-preview.18",
    "keywords": "Property Job Job Provides a mechanism for defining and executing an [IJob]. Declaration protected LambdaSingleJobDescription Job { get; } Property Value Type Description Unity.Entities.CodeGeneratedJobForEach.LambdaSingleJobDescription Remarks The Jobs property provides a convenient mechanism for implementing single jobs. Unity uses a compiler extension to convert the job description you create with Job.WithCode into efficient, executable code that (optionally) runs in a background thread. public class RandomSumJob : SystemBase { private uint seed = 1; protected override void OnUpdate() { Random randomGen = new Random(seed++); NativeArray<float> randomNumbers = new NativeArray<float>(500, Allocator.TempJob); Job.WithCode(() => { for (int i = 0; i < randomNumbers.Length; i++) { randomNumbers[i] = randomGen.NextFloat(); } }).Schedule(); // To get data out of a job, you must use a NativeArray // even if there is only one value NativeArray<float> result = new NativeArray<float>(1, Allocator.TempJob); Job.WithCode(() => { for (int i = 0; i < randomNumbers.Length; i++) { result[0] += randomNumbers[i]; } }).Schedule(); // This completes the scheduled jobs to get the result immediately, but for // better efficiency you should schedule jobs early in the frame with one // system and get the results late in the frame with a different system. this.CompleteDependency(); UnityEngine.Debug.Log(\"The sum of \" + randomNumbers.Length + \" numbers is \" + result[0]); randomNumbers.Dispose(); result.Dispose(); } } Implement your lambda function inside the Job.WithCode(lambda) function. The lambda function cannot take any parameters. You can capture local variables. Schedule() -- executes the lambda function as a single job. Run() -- executes immediately on the main thread. Immediately before it invokes Run() the system completes all jobs with a JobHandle in the system Dependency property as well as any jobs with a JobHandle passed as a dependency to Run() as an (optional) parameter. When scheduling a job, you can pass a JobHandle to set the job's dependencies explicitly and the construction returns the updated JobHandle combining the earlier dependencies with the new job. If you do not provide a JobHandle , the system uses Dependency when scheduling the job, and updates the property to include the new job automatically. You can use the additional options listed for Entities.ForEach with a Job.WithCode construction. Capturing variables You can capture local variables in the lambda function. When you execute the function using a job (by calling Schedule() , ScheduleParallel() or ScheduleSingle() instead of Run() ) there are some restrictions on the captured variables and how you use them: Only native containers and blittable types can be captured. A job can only write to captured variables that are native containers. (To “return” a single value, create a [native array] with one element.) You can use the following functions to apply modifiers and attributes to the captured [native container] variables, including [native arrays]: WithReadOnly(myvar) — restricts access to the variable as read-only. WithDisposeOnCompletion(myvar) — indicates that you want captured NativeContainers or types that contain NativeContainers to be Disposed of after your lambda runs. WithNativeDisableParallelForRestriction(myvar) — permits multiple threads to access the same writable native container. Parallel access is only safe when each thread only accesses its own, unique range of elements in the container. If more than one thread accesses the same element a race condition is created in which the timing of the access changes the result. See NativeDisableParallelForRestriction . WithNativeDisableContainerSafetyRestriction(myvar) — disables normal safety restrictions that prevent dangerous access to the native container. Disabling safety restrictions unwisely can lead to race conditions, subtle bugs, and crashes in your application. See NativeDisableContainerSafetyRestrictionAttribute . WithNativeDisableUnsafePtrRestrictionAttribute(myvar) — Allows you to use unsafe pointers provided by the native container. Incorrect pointer use can lead to subtle bugs, instability, and crashes in your application. See NativeDisableUnsafePtrRestrictionAttribute ."
  },
  "api/Unity.Entities.SystemBase.OnUpdate.html": {
    "href": "api/Unity.Entities.SystemBase.OnUpdate.html",
    "title": "Method OnUpdate | Entities | 0.17.0-preview.18",
    "keywords": "Method OnUpdate OnUpdate() Implement OnUpdate() to perform the major work of this system. Declaration protected abstract void OnUpdate() Remarks The system invokes OnUpdate() once per frame on the main thread when any of this system's EntityQueries match existing entities, the system has the [AlwaysUpdateSystem] attribute, or the system has no queries at all. OnUpdate() is triggered by the system's parent system group, which calls the Update() method of all its child systems in its own OnUpdate() function. The Update() function evaluates whether a system should, in fact, update before calling OnUpdate() . The Entities.ForEach and Job.WithCode constructions provide convenient mechanisms for defining jobs. You can also instantiate and schedule an IJobChunk instance; you can use the [C# JobSystem] or you can perform work on the main thread. If you call EntityManager methods that perform structural changes on the main thread, be sure to arrange the system order to minimize the performance impact of the resulting sync points ."
  },
  "api/Unity.Entities.SystemBase.SetComponent.html": {
    "href": "api/Unity.Entities.SystemBase.SetComponent.html",
    "title": "Method SetComponent | Entities | 0.17.0-preview.18",
    "keywords": "Method SetComponent SetComponent<T>(Entity, T) Sets the value of a component of an entity. Declaration protected void SetComponent<T>(Entity entity, T component) where T : struct, IComponentData Parameters Type Name Description Entity entity The entity. T component The data to set. Type Parameters Name Description T The component type. Remarks Use this method to look up and set data in another entity using its Entity object. For example, if you have a component that contains an Entity field, you can update the component data for the referenced entity using this method. When iterating over a set of entities via Entities.ForEach , do not use this method to update data of the current entity in the set. This function is much slower than accessing the data directly (by passing the component containing the data to your lambda iteration function as a parameter). When you call this method on the main thread, it invokes SetComponentData<T>(Entity, T) . (An Entities.ForEach function invoked with Run() executes on the main thread.) When you call this method inside a job scheduled using Entities.ForEach , this method gets replaced with component access methods through ComponentDataFromEntity<T> . In both cases, this lookup method results in a slower, indirect memory access. When possible, organize your data to minimize the need for indirect lookups. Exceptions Type Condition ArgumentException Thrown if the component type has no fields."
  },
  "api/Unity.Entities.SystemBase.Update.html": {
    "href": "api/Unity.Entities.SystemBase.Update.html",
    "title": "Method Update | Entities | 0.17.0-preview.18",
    "keywords": "Method Update Update() Update the system manually. Declaration public override sealed void Update() Overrides ComponentSystemBase.Update() Remarks Most programs should not update systems manually. SystemBase implementations cannot override Update() . Instead, implement system behavior in OnUpdate() ."
  },
  "api/Unity.Entities.SystemBaseDelegates.Function.html": {
    "href": "api/Unity.Entities.SystemBaseDelegates.Function.html",
    "title": "Delegate SystemBaseDelegates.Function | Entities | 0.17.0-preview.18",
    "keywords": "Delegate SystemBaseDelegates.Function Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void Function(ref SystemState state); Parameters Type Name Description SystemState state"
  },
  "api/Unity.Entities.SystemBaseDelegates.html": {
    "href": "api/Unity.Entities.SystemBaseDelegates.html",
    "title": "Class SystemBaseDelegates | Entities | 0.17.0-preview.18",
    "keywords": "Class SystemBaseDelegates Inheritance Object SystemBaseDelegates Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class SystemBaseDelegates"
  },
  "api/Unity.Entities.SystemBaseRegistry.AddUnmanagedSystemType.html": {
    "href": "api/Unity.Entities.SystemBaseRegistry.AddUnmanagedSystemType.html",
    "title": "Method AddUnmanagedSystemType | Entities | 0.17.0-preview.18",
    "keywords": "Method AddUnmanagedSystemType AddUnmanagedSystemType(Type, Int64, SystemBaseRegistry.ForwardingFunc, SystemBaseRegistry.ForwardingFunc, SystemBaseRegistry.ForwardingFunc, SystemBaseRegistry.ForwardingFunc, SystemBaseRegistry.ForwardingFunc, String, Int32) Declaration public static void AddUnmanagedSystemType(Type type, long typeHash, SystemBaseRegistry.ForwardingFunc onCreate, SystemBaseRegistry.ForwardingFunc onUpdate, SystemBaseRegistry.ForwardingFunc onDestroy, SystemBaseRegistry.ForwardingFunc onStartRunning, SystemBaseRegistry.ForwardingFunc onStopRunning, string debugName, int burstCompileBits) Parameters Type Name Description Type type Int64 typeHash SystemBaseRegistry.ForwardingFunc onCreate SystemBaseRegistry.ForwardingFunc onUpdate SystemBaseRegistry.ForwardingFunc onDestroy SystemBaseRegistry.ForwardingFunc onStartRunning SystemBaseRegistry.ForwardingFunc onStopRunning String debugName Int32 burstCompileBits"
  },
  "api/Unity.Entities.SystemBaseRegistry.ForwardingFunc.html": {
    "href": "api/Unity.Entities.SystemBaseRegistry.ForwardingFunc.html",
    "title": "Delegate SystemBaseRegistry.ForwardingFunc | Entities | 0.17.0-preview.18",
    "keywords": "Delegate SystemBaseRegistry.ForwardingFunc Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void ForwardingFunc(IntPtr systemPtr, IntPtr state); Parameters Type Name Description IntPtr systemPtr IntPtr state"
  },
  "api/Unity.Entities.SystemBaseRegistry.html": {
    "href": "api/Unity.Entities.SystemBaseRegistry.html",
    "title": "Class SystemBaseRegistry | Entities | 0.17.0-preview.18",
    "keywords": "Class SystemBaseRegistry Inheritance Object SystemBaseRegistry Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class SystemBaseRegistry Methods Name Description AddUnmanagedSystemType(Type, Int64, SystemBaseRegistry.ForwardingFunc, SystemBaseRegistry.ForwardingFunc, SystemBaseRegistry.ForwardingFunc, SystemBaseRegistry.ForwardingFunc, SystemBaseRegistry.ForwardingFunc, String, Int32) InitializePendingTypes()"
  },
  "api/Unity.Entities.SystemBaseRegistry.InitializePendingTypes.html": {
    "href": "api/Unity.Entities.SystemBaseRegistry.InitializePendingTypes.html",
    "title": "Method InitializePendingTypes | Entities | 0.17.0-preview.18",
    "keywords": "Method InitializePendingTypes InitializePendingTypes() Declaration public static void InitializePendingTypes()"
  },
  "api/Unity.Entities.SystemState.CompleteDependency.html": {
    "href": "api/Unity.Entities.SystemState.CompleteDependency.html",
    "title": "Method CompleteDependency | Entities | 0.17.0-preview.18",
    "keywords": "Method CompleteDependency CompleteDependency() Declaration public void CompleteDependency()"
  },
  "api/Unity.Entities.SystemState.DebugName.html": {
    "href": "api/Unity.Entities.SystemState.DebugName.html",
    "title": "Property DebugName | Entities | 0.17.0-preview.18",
    "keywords": "Property DebugName DebugName Return a debug name for unmanaged systems. Declaration public FixedString64 DebugName { get; } Property Value Type Description Unity.Collections.FixedString64"
  },
  "api/Unity.Entities.SystemState.Dependency.html": {
    "href": "api/Unity.Entities.SystemState.Dependency.html",
    "title": "Property Dependency | Entities | 0.17.0-preview.18",
    "keywords": "Property Dependency Dependency The ECS-related data dependencies of the system. Declaration public JobHandle Dependency { get; set; } Property Value Type Description JobHandle Remarks Before OnUpdate() , the Dependency property represents the combined job handles of any job that writes to the same components that the current system reads -- or reads the same components that the current system writes to. When you use Entities.ForEach or Job.WithCode , the system uses the Dependency property to specify a job’s dependencies when scheduling it. The system also combines the new job's JobHandle with Dependency so that any subsequent job scheduled in the system depends on the earlier jobs (in sequence). You can opt out of this default dependency management by explicitly passing a JobHandle to Entities.ForEach or Job.WithCode . When you pass in a JobHandle , these constructions also return a JobHandle representing the input dependencies combined with the new job. The JobHandle objects of any jobs scheduled with explicit dependencies are not combined with the system’s Dependency property. You must set the Dependency property manually to make sure that later systems receive the correct job dependencies. You can combine implicit and explicit dependency management (by using JobHandle.CombineDependencies ); however, doing so can be error prone. When you set the Dependency property, the assigned JobHandle replaces any existing dependency, it is not combined with them. Note that the default, implicit dependency management does not include IJobChunk jobs. You must manage the dependencies for IJobChunk explicitly."
  },
  "api/Unity.Entities.SystemState.Enabled.html": {
    "href": "api/Unity.Entities.SystemState.Enabled.html",
    "title": "Property Enabled | Entities | 0.17.0-preview.18",
    "keywords": "Property Enabled Enabled Controls whether this system executes when its OnUpdate function is called. Declaration public bool Enabled { get; set; } Property Value Type Description Boolean True, if the system is enabled. Remarks The Enabled property is intended for debugging so that you can easily turn on and off systems from the Entity Debugger window. A system with Enabled set to false will not update, even if its Unity.Entities.SystemState.ShouldRunSystem function returns true."
  },
  "api/Unity.Entities.SystemState.EntityManager.html": {
    "href": "api/Unity.Entities.SystemState.EntityManager.html",
    "title": "Property EntityManager | Entities | 0.17.0-preview.18",
    "keywords": "Property EntityManager EntityManager The EntityManager object of the World in which this system exists. Declaration public EntityManager EntityManager { get; } Property Value Type Description EntityManager The EntityManager for this system."
  },
  "api/Unity.Entities.SystemState.GetBufferFromEntity.html": {
    "href": "api/Unity.Entities.SystemState.GetBufferFromEntity.html",
    "title": "Method GetBufferFromEntity | Entities | 0.17.0-preview.18",
    "keywords": "Method GetBufferFromEntity GetBufferFromEntity<T>(Boolean) Gets a BufferFromEntity<T> object that can access a DynamicBuffer<T> . Declaration public BufferFromEntity<T> GetBufferFromEntity<T>(bool isReadOnly = false) where T : struct, IBufferElementData Parameters Type Name Description Boolean isReadOnly Whether the buffer data is only read or is also written. Access data in a read-only fashion whenever possible. Returns Type Description BufferFromEntity <T> An array-like object that provides access to buffers, indexed by Entity . Type Parameters Name Description T The type of IBufferElementData stored in the buffer. Remarks Assign the returned object to a field of your Job struct so that you can access the contents of the buffer in a Job. See Also ComponentDataFromEntity <T>"
  },
  "api/Unity.Entities.SystemState.GetBufferTypeHandle.html": {
    "href": "api/Unity.Entities.SystemState.GetBufferTypeHandle.html",
    "title": "Method GetBufferTypeHandle | Entities | 0.17.0-preview.18",
    "keywords": "Method GetBufferTypeHandle GetBufferTypeHandle<T>(Boolean) Gets the run-time type information required to access an array of buffer components in a chunk. Declaration public BufferTypeHandle<T> GetBufferTypeHandle<T>(bool isReadOnly = false) where T : struct, IBufferElementData Parameters Type Name Description Boolean isReadOnly Whether the data is only read, not written. Access data as read-only whenever possible. Returns Type Description BufferTypeHandle <T> An object representing the type information required to safely access buffer components stored in a chunk. Type Parameters Name Description T A struct that implements IBufferElementData . Remarks Pass a BufferTypeHandle instance to a job that has access to chunk data, such as an IJobChunk job, to access that type of buffer component inside the job."
  },
  "api/Unity.Entities.SystemState.GetComponentDataFromEntity.html": {
    "href": "api/Unity.Entities.SystemState.GetComponentDataFromEntity.html",
    "title": "Method GetComponentDataFromEntity | Entities | 0.17.0-preview.18",
    "keywords": "Method GetComponentDataFromEntity GetComponentDataFromEntity<T>(Boolean) Gets an dictionary-like container containing all components of type T, keyed by Entity. Declaration public ComponentDataFromEntity<T> GetComponentDataFromEntity<T>(bool isReadOnly = false) where T : struct, IComponentData Parameters Type Name Description Boolean isReadOnly Whether the data is only read, not written. Access data as read-only whenever possible. Returns Type Description ComponentDataFromEntity <T> All component data of type T. Type Parameters Name Description T A struct that implements IComponentData ."
  },
  "api/Unity.Entities.SystemState.GetComponentTypeHandle.html": {
    "href": "api/Unity.Entities.SystemState.GetComponentTypeHandle.html",
    "title": "Method GetComponentTypeHandle | Entities | 0.17.0-preview.18",
    "keywords": "Method GetComponentTypeHandle GetComponentTypeHandle<T>(Boolean) Gets the run-time type information required to access an array of component data in a chunk. Declaration public ComponentTypeHandle<T> GetComponentTypeHandle<T>(bool isReadOnly = false) where T : struct, IComponentData Parameters Type Name Description Boolean isReadOnly Whether the component data is only read, not written. Access components as read-only whenever possible. Returns Type Description ComponentTypeHandle <T> An object representing the type information required to safely access component data stored in a chunk. Type Parameters Name Description T A struct that implements IComponentData . Remarks Pass an ComponentTypeHandle<T> instance to a job that has access to chunk data, such as an IJobChunk job, to access that type of component inside the job."
  },
  "api/Unity.Entities.SystemState.GetDynamicComponentTypeHandle.html": {
    "href": "api/Unity.Entities.SystemState.GetDynamicComponentTypeHandle.html",
    "title": "Method GetDynamicComponentTypeHandle | Entities | 0.17.0-preview.18",
    "keywords": "Method GetDynamicComponentTypeHandle GetDynamicComponentTypeHandle(ComponentType) Gets the run-time type information required to access an array of component data in a chunk. Declaration public DynamicComponentTypeHandle GetDynamicComponentTypeHandle(ComponentType componentType) Parameters Type Name Description ComponentType componentType Type of the component Returns Type Description DynamicComponentTypeHandle An object representing the type information required to safely access component data stored in a chunk. Remarks Pass an DynamicComponentTypeHandle instance to a job that has access to chunk data, such as an IJobChunk job, to access that type of component inside the job."
  },
  "api/Unity.Entities.SystemState.GetEntityQuery.html": {
    "href": "api/Unity.Entities.SystemState.GetEntityQuery.html",
    "title": "Method GetEntityQuery | Entities | 0.17.0-preview.18",
    "keywords": "Method GetEntityQuery GetEntityQuery(ComponentType[]) Gets the cached query for the specified component types, if one exists; otherwise, creates a new query instance and caches it. Declaration public EntityQuery GetEntityQuery(params ComponentType[] componentTypes) Parameters Type Name Description ComponentType [] componentTypes An array or comma-separated list of component types. Returns Type Description EntityQuery The new or cached query. GetEntityQuery(NativeArray<ComponentType>) Gets the cached query for the specified component types, if one exists; otherwise, creates a new query instance and caches it. Declaration public EntityQuery GetEntityQuery(NativeArray<ComponentType> componentTypes) Parameters Type Name Description NativeArray < ComponentType > componentTypes An array of component types. Returns Type Description EntityQuery The new or cached query. GetEntityQuery(EntityQueryDesc[]) Combines an array of query description objects into a single query. Declaration public EntityQuery GetEntityQuery(params EntityQueryDesc[] queryDesc) Parameters Type Name Description EntityQueryDesc [] queryDesc An array of query description objects to be combined to define the query. Returns Type Description EntityQuery The new or cached query. Remarks This function looks for a cached query matching the combined query descriptions, and returns it if one exists; otherwise, the function creates a new query instance and caches it."
  },
  "api/Unity.Entities.SystemState.GetEntityTypeHandle.html": {
    "href": "api/Unity.Entities.SystemState.GetEntityTypeHandle.html",
    "title": "Method GetEntityTypeHandle | Entities | 0.17.0-preview.18",
    "keywords": "Method GetEntityTypeHandle GetEntityTypeHandle() Gets the run-time type information required to access the array of Entity objects in a chunk. Declaration public EntityTypeHandle GetEntityTypeHandle() Returns Type Description EntityTypeHandle An object representing the type information required to safely access Entity instances stored in a chunk."
  },
  "api/Unity.Entities.SystemState.GetSharedComponentTypeHandle.html": {
    "href": "api/Unity.Entities.SystemState.GetSharedComponentTypeHandle.html",
    "title": "Method GetSharedComponentTypeHandle | Entities | 0.17.0-preview.18",
    "keywords": "Method GetSharedComponentTypeHandle GetSharedComponentTypeHandle<T>() Gets the run-time type information required to access a shared component data in a chunk. Declaration public SharedComponentTypeHandle<T> GetSharedComponentTypeHandle<T>() where T : struct, ISharedComponentData Returns Type Description SharedComponentTypeHandle <T> An object representing the type information required to safely access shared component data stored in a chunk. Type Parameters Name Description T A struct that implements ISharedComponentData ."
  },
  "api/Unity.Entities.SystemState.GetSingleton.html": {
    "href": "api/Unity.Entities.SystemState.GetSingleton.html",
    "title": "Method GetSingleton | Entities | 0.17.0-preview.18",
    "keywords": "Method GetSingleton GetSingleton<T>() Gets the value of a singleton component. Declaration public T GetSingleton<T>() where T : struct, IComponentData Returns Type Description T The component. Type Parameters Name Description T The IComponentData subtype of the singleton component. See Also GetSingleton<T>()"
  },
  "api/Unity.Entities.SystemState.GetSingletonEntity.html": {
    "href": "api/Unity.Entities.SystemState.GetSingletonEntity.html",
    "title": "Method GetSingletonEntity | Entities | 0.17.0-preview.18",
    "keywords": "Method GetSingletonEntity GetSingletonEntity<T>() Gets the Entity instance for a singleton. Declaration public Entity GetSingletonEntity<T>() Returns Type Description Entity The entity associated with the specified singleton component. Type Parameters Name Description T The Type of the singleton component. See Also GetSingletonEntity()"
  },
  "api/Unity.Entities.SystemState.GlobalSystemVersion.html": {
    "href": "api/Unity.Entities.SystemState.GlobalSystemVersion.html",
    "title": "Property GlobalSystemVersion | Entities | 0.17.0-preview.18",
    "keywords": "Property GlobalSystemVersion GlobalSystemVersion The current change version number in this World . Declaration public uint GlobalSystemVersion { get; } Property Value Type Description UInt32 Remarks The system updates the component version numbers inside any ArchetypeChunk instances that this system accesses with write permissions to this value."
  },
  "api/Unity.Entities.SystemState.HasSingleton.html": {
    "href": "api/Unity.Entities.SystemState.HasSingleton.html",
    "title": "Method HasSingleton | Entities | 0.17.0-preview.18",
    "keywords": "Method HasSingleton HasSingleton<T>() Checks whether a singelton component of the specified type exists. Declaration public bool HasSingleton<T>() Returns Type Description Boolean True, if a singleton of the specified type exists in the current World . Type Parameters Name Description T The IComponentData subtype of the singleton component."
  },
  "api/Unity.Entities.SystemState.html": {
    "href": "api/Unity.Entities.SystemState.html",
    "title": "Struct SystemState | Entities | 0.17.0-preview.18",
    "keywords": "Struct SystemState Contains raw entity system state. Used by unmanaged systems (ISystemBase) as well as managed systems behind the scenes. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct SystemState Properties Name Description DebugName Return a debug name for unmanaged systems. Dependency The ECS-related data dependencies of the system. Enabled Controls whether this system executes when its OnUpdate function is called. EntityManager The EntityManager object of the World in which this system exists. GlobalSystemVersion The current change version number in this World . LastSystemVersion The current version of this system. Time The current Time data for this system's world. UnmanagedMetaIndex Return the unmanaged type index of the system (>= 0 for ISystemBase-type systems), or -1 for managed systems. World The World in which this system exists. WorldUnmanaged The unmanaged portion of the world in which this system exists. Methods Name Description CompleteDependency() GetBufferFromEntity<T>(Boolean) Gets a BufferFromEntity<T> object that can access a DynamicBuffer<T> . GetBufferTypeHandle<T>(Boolean) Gets the run-time type information required to access an array of buffer components in a chunk. GetComponentDataFromEntity<T>(Boolean) Gets an dictionary-like container containing all components of type T, keyed by Entity. GetComponentTypeHandle<T>(Boolean) Gets the run-time type information required to access an array of component data in a chunk. GetDynamicComponentTypeHandle(ComponentType) Gets the run-time type information required to access an array of component data in a chunk. GetEntityQuery(NativeArray<ComponentType>) Gets the cached query for the specified component types, if one exists; otherwise, creates a new query instance and caches it. GetEntityQuery(ComponentType[]) Gets the cached query for the specified component types, if one exists; otherwise, creates a new query instance and caches it. GetEntityQuery(EntityQueryDesc[]) Combines an array of query description objects into a single query. GetEntityTypeHandle() Gets the run-time type information required to access the array of Entity objects in a chunk. GetSharedComponentTypeHandle<T>() Gets the run-time type information required to access a shared component data in a chunk. GetSingleton<T>() Gets the value of a singleton component. GetSingletonEntity<T>() Gets the Entity instance for a singleton. HasSingleton<T>() Checks whether a singelton component of the specified type exists. RequireForUpdate(EntityQuery) Adds a query that must return entities for the system to run. You can add multiple required queries to a system; all of them must match at least one entity for the system to run. RequireSingletonForUpdate<T>() Require that a specific singleton component exist for this system to run. SetSingleton<T>(T) Sets the value of a singleton component. TryGetSingleton<T>(out T) Gets the value of a singleton component, and returns whether or not a singleton component of the specified type exists in the World . TryGetSingletonEntity<T>(out Entity) Gets the singleton Entity, and returns whether or not a singleton Entity of the specified type exists in the World ."
  },
  "api/Unity.Entities.SystemState.LastSystemVersion.html": {
    "href": "api/Unity.Entities.SystemState.LastSystemVersion.html",
    "title": "Property LastSystemVersion | Entities | 0.17.0-preview.18",
    "keywords": "Property LastSystemVersion LastSystemVersion The current version of this system. Declaration public uint LastSystemVersion { get; } Property Value Type Description UInt32 The GlobalSystemVersion the last time this system ran. Remarks LastSystemVersion is updated to match the GlobalSystemVersion whenever a system runs. When you use SetChangedVersionFilter(ComponentType) or DidChange(DynamicComponentTypeHandle, UInt32) , LastSystemVersion provides the basis for determining whether a component could have changed since the last time the system ran. When a system accesses a component and has write permission, it updates the change version of that component type to the current value of LastSystemVersion. The system updates the component type's version whether or not it actually modifies data in any instances of the component type -- this is one reason why you should specify read-only access to components whenever possible. For efficiency, ECS tracks the change version of component types by chunks, not by individual entities. If a system updates the component of a given type for any entity in a chunk, then ECS assumes that the components of all entities in that chunk could have been changed. Change filtering allows you to save processing time by skipping all entities in an unchanged chunk, but does not support skipping individual entities in a chunk that does contain changes."
  },
  "api/Unity.Entities.SystemState.RequireForUpdate.html": {
    "href": "api/Unity.Entities.SystemState.RequireForUpdate.html",
    "title": "Method RequireForUpdate | Entities | 0.17.0-preview.18",
    "keywords": "Method RequireForUpdate RequireForUpdate(EntityQuery) Adds a query that must return entities for the system to run. You can add multiple required queries to a system; all of them must match at least one entity for the system to run. Declaration public void RequireForUpdate(EntityQuery query) Parameters Type Name Description EntityQuery query A query that must match entities this frame in order for this system to run. Remarks Any queries added through RequireforUpdate override all other queries cached by this system. In other words, if any required query does not find matching entities, the update is skipped even if another query created for the system (either explicitly or implicitly) does match entities and vice versa."
  },
  "api/Unity.Entities.SystemState.RequireSingletonForUpdate.html": {
    "href": "api/Unity.Entities.SystemState.RequireSingletonForUpdate.html",
    "title": "Method RequireSingletonForUpdate | Entities | 0.17.0-preview.18",
    "keywords": "Method RequireSingletonForUpdate RequireSingletonForUpdate<T>() Require that a specific singleton component exist for this system to run. Declaration public void RequireSingletonForUpdate<T>() Type Parameters Name Description T The IComponentData subtype of the singleton component."
  },
  "api/Unity.Entities.SystemState.SetSingleton.html": {
    "href": "api/Unity.Entities.SystemState.SetSingleton.html",
    "title": "Method SetSingleton | Entities | 0.17.0-preview.18",
    "keywords": "Method SetSingleton SetSingleton<T>(T) Sets the value of a singleton component. Declaration public void SetSingleton<T>(T value) where T : struct, IComponentData Parameters Type Name Description T value A component containing the value to assign to the singleton. Type Parameters Name Description T The IComponentData subtype of the singleton component. See Also SetSingleton<T>(T)"
  },
  "api/Unity.Entities.SystemState.Time.html": {
    "href": "api/Unity.Entities.SystemState.Time.html",
    "title": "Property Time | Entities | 0.17.0-preview.18",
    "keywords": "Property Time Time The current Time data for this system's world. Declaration public TimeData Time { get; } Property Value Type Description TimeData"
  },
  "api/Unity.Entities.SystemState.TryGetSingleton.html": {
    "href": "api/Unity.Entities.SystemState.TryGetSingleton.html",
    "title": "Method TryGetSingleton | Entities | 0.17.0-preview.18",
    "keywords": "Method TryGetSingleton TryGetSingleton<T>(out T) Gets the value of a singleton component, and returns whether or not a singleton component of the specified type exists in the World . Declaration public bool TryGetSingleton<T>(out T value) where T : struct, IComponentData Parameters Type Name Description T value Returns Type Description Boolean True, if exactly one Entity exists in the World with the provided component type. Type Parameters Name Description T The IComponentData subtype of the singleton component."
  },
  "api/Unity.Entities.SystemState.TryGetSingletonEntity.html": {
    "href": "api/Unity.Entities.SystemState.TryGetSingletonEntity.html",
    "title": "Method TryGetSingletonEntity | Entities | 0.17.0-preview.18",
    "keywords": "Method TryGetSingletonEntity TryGetSingletonEntity<T>(out Entity) Gets the singleton Entity, and returns whether or not a singleton Entity of the specified type exists in the World . Declaration public bool TryGetSingletonEntity<T>(out Entity value) Parameters Type Name Description Entity value Returns Type Description Boolean True, if exactly one Entity exists in the World with the provided component type. Type Parameters Name Description T The IComponentData subtype of the singleton component."
  },
  "api/Unity.Entities.SystemState.UnmanagedMetaIndex.html": {
    "href": "api/Unity.Entities.SystemState.UnmanagedMetaIndex.html",
    "title": "Property UnmanagedMetaIndex | Entities | 0.17.0-preview.18",
    "keywords": "Property UnmanagedMetaIndex UnmanagedMetaIndex Return the unmanaged type index of the system (>= 0 for ISystemBase-type systems), or -1 for managed systems. Declaration public int UnmanagedMetaIndex { get; } Property Value Type Description Int32"
  },
  "api/Unity.Entities.SystemState.World.html": {
    "href": "api/Unity.Entities.SystemState.World.html",
    "title": "Property World | Entities | 0.17.0-preview.18",
    "keywords": "Property World World The World in which this system exists. Declaration public World World { get; } Property Value Type Description World The World of this system."
  },
  "api/Unity.Entities.SystemState.WorldUnmanaged.html": {
    "href": "api/Unity.Entities.SystemState.WorldUnmanaged.html",
    "title": "Property WorldUnmanaged | Entities | 0.17.0-preview.18",
    "keywords": "Property WorldUnmanaged WorldUnmanaged The unmanaged portion of the world in which this system exists. Declaration public WorldUnmanaged WorldUnmanaged { get; } Property Value Type Description WorldUnmanaged The unmanaged world of this system."
  },
  "api/Unity.Entities.TypeHash.CalculateMemoryOrdering.html": {
    "href": "api/Unity.Entities.TypeHash.CalculateMemoryOrdering.html",
    "title": "Method CalculateMemoryOrdering | Entities | 0.17.0-preview.18",
    "keywords": "Method CalculateMemoryOrdering CalculateMemoryOrdering(Type, out Boolean) Declaration public static ulong CalculateMemoryOrdering(Type type, out bool hasCustomMemoryOrder) Parameters Type Name Description Type type Boolean hasCustomMemoryOrder Returns Type Description UInt64"
  },
  "api/Unity.Entities.TypeHash.CalculateStableTypeHash.html": {
    "href": "api/Unity.Entities.TypeHash.CalculateStableTypeHash.html",
    "title": "Method CalculateStableTypeHash | Entities | 0.17.0-preview.18",
    "keywords": "Method CalculateStableTypeHash CalculateStableTypeHash(Type, IEnumerable<CustomAttributeData>) Declaration public static ulong CalculateStableTypeHash(Type type, IEnumerable<CustomAttributeData> customAttributes = null) Parameters Type Name Description Type type IEnumerable < CustomAttributeData > customAttributes Returns Type Description UInt64"
  },
  "api/Unity.Entities.TypeHash.CombineFNV1A64.html": {
    "href": "api/Unity.Entities.TypeHash.CombineFNV1A64.html",
    "title": "Method CombineFNV1A64 | Entities | 0.17.0-preview.18",
    "keywords": "Method CombineFNV1A64 CombineFNV1A64(UInt64, UInt64[]) Declaration public static ulong CombineFNV1A64(ulong hash, params ulong[] values) Parameters Type Name Description UInt64 hash UInt64 [] values Returns Type Description UInt64"
  },
  "api/Unity.Entities.TypeHash.FNV1A64.html": {
    "href": "api/Unity.Entities.TypeHash.FNV1A64.html",
    "title": "Method FNV1A64 | Entities | 0.17.0-preview.18",
    "keywords": "Method FNV1A64 FNV1A64(String) Declaration public static ulong FNV1A64(string text) Parameters Type Name Description String text Returns Type Description UInt64 FNV1A64(Int32) Declaration public static ulong FNV1A64(int val) Parameters Type Name Description Int32 val Returns Type Description UInt64"
  },
  "api/Unity.Entities.TypeHash.html": {
    "href": "api/Unity.Entities.TypeHash.html",
    "title": "Class TypeHash | Entities | 0.17.0-preview.18",
    "keywords": "Class TypeHash Inheritance Object TypeHash Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class TypeHash Methods Name Description CalculateMemoryOrdering(Type, out Boolean) CalculateStableTypeHash(Type, IEnumerable<CustomAttributeData>) CombineFNV1A64(UInt64, UInt64[]) FNV1A64(Int32) FNV1A64(String)"
  },
  "api/Unity.Entities.TypeManager.AllTypes.html": {
    "href": "api/Unity.Entities.TypeManager.AllTypes.html",
    "title": "Property AllTypes | Entities | 0.17.0-preview.18",
    "keywords": "Property AllTypes AllTypes Declaration public static IEnumerable<TypeManager.TypeInfo> AllTypes { get; } Property Value Type Description IEnumerable < TypeManager.TypeInfo >"
  },
  "api/Unity.Entities.TypeManager.BufferComponentTypeFlag.html": {
    "href": "api/Unity.Entities.TypeManager.BufferComponentTypeFlag.html",
    "title": "Field BufferComponentTypeFlag | Entities | 0.17.0-preview.18",
    "keywords": "Field BufferComponentTypeFlag Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public const int BufferComponentTypeFlag = 67108864 Returns Type Description Int32"
  },
  "api/Unity.Entities.TypeManager.CheckIsAllowedAsComponentData.html": {
    "href": "api/Unity.Entities.TypeManager.CheckIsAllowedAsComponentData.html",
    "title": "Method CheckIsAllowedAsComponentData | Entities | 0.17.0-preview.18",
    "keywords": "Method CheckIsAllowedAsComponentData CheckIsAllowedAsComponentData(Type, String) Declaration [Conditional(\"ENABLE_UNITY_COLLECTIONS_CHECKS\")] public static void CheckIsAllowedAsComponentData(Type type, string baseTypeDesc) Parameters Type Name Description Type type String baseTypeDesc"
  },
  "api/Unity.Entities.TypeManager.CheckIsAllowedAsManagedComponentData.html": {
    "href": "api/Unity.Entities.TypeManager.CheckIsAllowedAsManagedComponentData.html",
    "title": "Method CheckIsAllowedAsManagedComponentData | Entities | 0.17.0-preview.18",
    "keywords": "Method CheckIsAllowedAsManagedComponentData CheckIsAllowedAsManagedComponentData(Type, String) Declaration [Conditional(\"ENABLE_UNITY_COLLECTIONS_CHECKS\")] public static void CheckIsAllowedAsManagedComponentData(Type type, string baseTypeDesc) Parameters Type Name Description Type type String baseTypeDesc"
  },
  "api/Unity.Entities.TypeManager.ChunkComponentTypeFlag.html": {
    "href": "api/Unity.Entities.TypeManager.ChunkComponentTypeFlag.html",
    "title": "Field ChunkComponentTypeFlag | Entities | 0.17.0-preview.18",
    "keywords": "Field ChunkComponentTypeFlag Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public const int ChunkComponentTypeFlag = 536870912 Returns Type Description Int32"
  },
  "api/Unity.Entities.TypeManager.ClearFlagsMask.html": {
    "href": "api/Unity.Entities.TypeManager.ClearFlagsMask.html",
    "title": "Field ClearFlagsMask | Entities | 0.17.0-preview.18",
    "keywords": "Field ClearFlagsMask Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public const int ClearFlagsMask = 16777215 Returns Type Description Int32"
  },
  "api/Unity.Entities.TypeManager.ConstructComponentFromBuffer.html": {
    "href": "api/Unity.Entities.TypeManager.ConstructComponentFromBuffer.html",
    "title": "Method ConstructComponentFromBuffer | Entities | 0.17.0-preview.18",
    "keywords": "Method ConstructComponentFromBuffer ConstructComponentFromBuffer(Int32, Void*) Declaration public static object ConstructComponentFromBuffer(int typeIndex, void *data) Parameters Type Name Description Int32 typeIndex Void * data Returns Type Description Object"
  },
  "api/Unity.Entities.TypeManager.ConstructSystem.html": {
    "href": "api/Unity.Entities.TypeManager.ConstructSystem.html",
    "title": "Method ConstructSystem | Entities | 0.17.0-preview.18",
    "keywords": "Method ConstructSystem ConstructSystem(Type) Construct a System from a Type. Uses the same list in GetSystems() Declaration public static ComponentSystemBase ConstructSystem(Type systemType) Parameters Type Name Description Type systemType Returns Type Description ComponentSystemBase ConstructSystem<T>() Declaration public static T ConstructSystem<T>() where T : ComponentSystemBase Returns Type Description T Type Parameters Name Description T ConstructSystem<T>(Type) Declaration public static T ConstructSystem<T>(Type systemType) where T : ComponentSystemBase Parameters Type Name Description Type systemType Returns Type Description T Type Parameters Name Description T"
  },
  "api/Unity.Entities.TypeManager.DefaultBufferCapacityNumerator.html": {
    "href": "api/Unity.Entities.TypeManager.DefaultBufferCapacityNumerator.html",
    "title": "Field DefaultBufferCapacityNumerator | Entities | 0.17.0-preview.18",
    "keywords": "Field DefaultBufferCapacityNumerator BufferCapacity is by default calculated as DefaultBufferCapacityNumerator / sizeof(BufferElementDataType) thus for a 1 byte component, the maximum number of elements possible to be stored in chunk memory before the buffer is allocated separately from chunk data, is DefaultBufferCapacityNumerator elements. For a 2 byte sized component, (DefaultBufferCapacityNumerator / 2) elements can be stored, etc... Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public const int DefaultBufferCapacityNumerator = 128 Returns Type Description Int32"
  },
  "api/Unity.Entities.TypeManager.EntityOffsetInfo.html": {
    "href": "api/Unity.Entities.TypeManager.EntityOffsetInfo.html",
    "title": "Struct TypeManager.EntityOffsetInfo | Entities | 0.17.0-preview.18",
    "keywords": "Struct TypeManager.EntityOffsetInfo Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct EntityOffsetInfo Fields Name Description Offset"
  },
  "api/Unity.Entities.TypeManager.EntityOffsetInfo.Offset.html": {
    "href": "api/Unity.Entities.TypeManager.EntityOffsetInfo.Offset.html",
    "title": "Field Offset | Entities | 0.17.0-preview.18",
    "keywords": "Field Offset Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public int Offset Returns Type Description Int32"
  },
  "api/Unity.Entities.TypeManager.Equals.html": {
    "href": "api/Unity.Entities.TypeManager.Equals.html",
    "title": "Method Equals | Entities | 0.17.0-preview.18",
    "keywords": "Method Equals Equals<T>(ref T, ref T) Declaration public static bool Equals<T>(ref T left, ref T right) where T : struct Parameters Type Name Description T left T right Returns Type Description Boolean Type Parameters Name Description T Equals(Void*, Void*, Int32) Declaration public static bool Equals(void *left, void *right, int typeIndex) Parameters Type Name Description Void * left Void * right Int32 typeIndex Returns Type Description Boolean Equals(Object, Object, Int32) Declaration public static bool Equals(object left, object right, int typeIndex) Parameters Type Name Description Object left Object right Int32 typeIndex Returns Type Description Boolean Equals(Object, Void*, Int32) Declaration public static bool Equals(object left, void *right, int typeIndex) Parameters Type Name Description Object left Void * right Int32 typeIndex Returns Type Description Boolean"
  },
  "api/Unity.Entities.TypeManager.ForcedMemoryOrderingAttribute.-ctor.html": {
    "href": "api/Unity.Entities.TypeManager.ForcedMemoryOrderingAttribute.-ctor.html",
    "title": "Constructor ForcedMemoryOrderingAttribute | Entities | 0.17.0-preview.18",
    "keywords": "Constructor ForcedMemoryOrderingAttribute ForcedMemoryOrderingAttribute(UInt64) Declaration public ForcedMemoryOrderingAttribute(ulong ordering) Parameters Type Name Description UInt64 ordering"
  },
  "api/Unity.Entities.TypeManager.ForcedMemoryOrderingAttribute.html": {
    "href": "api/Unity.Entities.TypeManager.ForcedMemoryOrderingAttribute.html",
    "title": "Class TypeManager.ForcedMemoryOrderingAttribute | Entities | 0.17.0-preview.18",
    "keywords": "Class TypeManager.ForcedMemoryOrderingAttribute Inheritance Object Attribute TypeManager.ForcedMemoryOrderingAttribute Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [AttributeUsage(AttributeTargets.Struct)] public class ForcedMemoryOrderingAttribute : Attribute, _Attribute Constructors Name Description ForcedMemoryOrderingAttribute(UInt64) Fields Name Description MemoryOrdering"
  },
  "api/Unity.Entities.TypeManager.ForcedMemoryOrderingAttribute.MemoryOrdering.html": {
    "href": "api/Unity.Entities.TypeManager.ForcedMemoryOrderingAttribute.MemoryOrdering.html",
    "title": "Field MemoryOrdering | Entities | 0.17.0-preview.18",
    "keywords": "Field MemoryOrdering Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public ulong MemoryOrdering Returns Type Description UInt64"
  },
  "api/Unity.Entities.TypeManager.GetAllTypes.html": {
    "href": "api/Unity.Entities.TypeManager.GetAllTypes.html",
    "title": "Method GetAllTypes | Entities | 0.17.0-preview.18",
    "keywords": "Method GetAllTypes GetAllTypes() Declaration public static TypeManager.TypeInfo[] GetAllTypes() Returns Type Description TypeManager.TypeInfo []"
  },
  "api/Unity.Entities.TypeManager.GetEntityOffsets.html": {
    "href": "api/Unity.Entities.TypeManager.GetEntityOffsets.html",
    "title": "Method GetEntityOffsets | Entities | 0.17.0-preview.18",
    "keywords": "Method GetEntityOffsets GetEntityOffsets(Int32, out Int32) Note this function will always return a pointer even if the given type has no Entity offsets. Always check/iterate over the returned pointer using the returned count Declaration public static TypeManager.EntityOffsetInfo*GetEntityOffsets(int typeIndex, out int count) Parameters Type Name Description Int32 typeIndex Int32 count Returns Type Description TypeManager.EntityOffsetInfo *"
  },
  "api/Unity.Entities.TypeManager.GetFastEqualityTypeInfo.html": {
    "href": "api/Unity.Entities.TypeManager.GetFastEqualityTypeInfo.html",
    "title": "Method GetFastEqualityTypeInfo | Entities | 0.17.0-preview.18",
    "keywords": "Method GetFastEqualityTypeInfo GetFastEqualityTypeInfo(TypeManager.TypeInfo) Declaration public static FastEquality.TypeInfo GetFastEqualityTypeInfo(TypeManager.TypeInfo typeInfo) Parameters Type Name Description TypeManager.TypeInfo typeInfo Returns Type Description FastEquality.TypeInfo"
  },
  "api/Unity.Entities.TypeManager.GetHashCode.html": {
    "href": "api/Unity.Entities.TypeManager.GetHashCode.html",
    "title": "Method GetHashCode | Entities | 0.17.0-preview.18",
    "keywords": "Method GetHashCode GetHashCode<T>(ref T) Declaration public static int GetHashCode<T>(ref T val) where T : struct Parameters Type Name Description T val Returns Type Description Int32 Type Parameters Name Description T GetHashCode(Void*, Int32) Declaration public static int GetHashCode(void *val, int typeIndex) Parameters Type Name Description Void * val Int32 typeIndex Returns Type Description Int32 GetHashCode(Object, Int32) Declaration public static int GetHashCode(object val, int typeIndex) Parameters Type Name Description Object val Int32 typeIndex Returns Type Description Int32"
  },
  "api/Unity.Entities.TypeManager.GetSystemAttributes.html": {
    "href": "api/Unity.Entities.TypeManager.GetSystemAttributes.html",
    "title": "Method GetSystemAttributes | Entities | 0.17.0-preview.18",
    "keywords": "Method GetSystemAttributes GetSystemAttributes(Type, Type) Get all the attribute objects of Type attributeType for a System. Declaration public static Attribute[] GetSystemAttributes(Type systemType, Type attributeType) Parameters Type Name Description Type systemType Type attributeType Returns Type Description Attribute []"
  },
  "api/Unity.Entities.TypeManager.GetSystemName.html": {
    "href": "api/Unity.Entities.TypeManager.GetSystemName.html",
    "title": "Method GetSystemName | Entities | 0.17.0-preview.18",
    "keywords": "Method GetSystemName GetSystemName(Type) Declaration public static string GetSystemName(Type t) Parameters Type Name Description Type t Returns Type Description String"
  },
  "api/Unity.Entities.TypeManager.GetSystems.html": {
    "href": "api/Unity.Entities.TypeManager.GetSystems.html",
    "title": "Method GetSystems | Entities | 0.17.0-preview.18",
    "keywords": "Method GetSystems GetSystems(WorldSystemFilterFlags, WorldSystemFilterFlags) Return an array of all System types available to the runtime matching the WorldSystemFilterFlags. By default, all systems available to the runtime is returned. Declaration public static IReadOnlyList<Type> GetSystems(WorldSystemFilterFlags filterFlags = WorldSystemFilterFlags.Default | WorldSystemFilterFlags.GameObjectConversion | WorldSystemFilterFlags.EntitySceneOptimizations | WorldSystemFilterFlags.ProcessAfterLoad | WorldSystemFilterFlags.HybridGameObjectConversion | WorldSystemFilterFlags.DotsRuntimeGameObjectConversion | WorldSystemFilterFlags.Editor | WorldSystemFilterFlags.All, WorldSystemFilterFlags requiredFlags = WorldSystemFilterFlags.Default) Parameters Type Name Description WorldSystemFilterFlags filterFlags WorldSystemFilterFlags requiredFlags Returns Type Description IReadOnlyList < Type >"
  },
  "api/Unity.Entities.TypeManager.GetType.html": {
    "href": "api/Unity.Entities.TypeManager.GetType.html",
    "title": "Method GetType | Entities | 0.17.0-preview.18",
    "keywords": "Method GetType GetType(Int32) Declaration public static Type GetType(int typeIndex) Parameters Type Name Description Int32 typeIndex Returns Type Description Type"
  },
  "api/Unity.Entities.TypeManager.GetTypeCount.html": {
    "href": "api/Unity.Entities.TypeManager.GetTypeCount.html",
    "title": "Method GetTypeCount | Entities | 0.17.0-preview.18",
    "keywords": "Method GetTypeCount GetTypeCount() Declaration public static int GetTypeCount() Returns Type Description Int32"
  },
  "api/Unity.Entities.TypeManager.GetTypeIndex.html": {
    "href": "api/Unity.Entities.TypeManager.GetTypeIndex.html",
    "title": "Method GetTypeIndex | Entities | 0.17.0-preview.18",
    "keywords": "Method GetTypeIndex GetTypeIndex<T>() Declaration public static int GetTypeIndex<T>() Returns Type Description Int32 Type Parameters Name Description T GetTypeIndex(Type) Declaration public static int GetTypeIndex(Type type) Parameters Type Name Description Type type Returns Type Description Int32"
  },
  "api/Unity.Entities.TypeManager.GetTypeIndexFromStableTypeHash.html": {
    "href": "api/Unity.Entities.TypeManager.GetTypeIndexFromStableTypeHash.html",
    "title": "Method GetTypeIndexFromStableTypeHash | Entities | 0.17.0-preview.18",
    "keywords": "Method GetTypeIndexFromStableTypeHash GetTypeIndexFromStableTypeHash(UInt64) Declaration public static int GetTypeIndexFromStableTypeHash(ulong stableTypeHash) Parameters Type Name Description UInt64 stableTypeHash Returns Type Description Int32"
  },
  "api/Unity.Entities.TypeManager.GetTypeInfo.html": {
    "href": "api/Unity.Entities.TypeManager.GetTypeInfo.html",
    "title": "Method GetTypeInfo | Entities | 0.17.0-preview.18",
    "keywords": "Method GetTypeInfo GetTypeInfo(Int32) Declaration public static TypeManager.TypeInfo GetTypeInfo(int typeIndex) Parameters Type Name Description Int32 typeIndex Returns Type Description TypeManager.TypeInfo GetTypeInfo<T>() Declaration public static TypeManager.TypeInfo GetTypeInfo<T>() Returns Type Description TypeManager.TypeInfo Type Parameters Name Description T"
  },
  "api/Unity.Entities.TypeManager.GetWriteGroupTypes.html": {
    "href": "api/Unity.Entities.TypeManager.GetWriteGroupTypes.html",
    "title": "Method GetWriteGroupTypes | Entities | 0.17.0-preview.18",
    "keywords": "Method GetWriteGroupTypes GetWriteGroupTypes(Int32) Declaration public static NativeArray<int> GetWriteGroupTypes(int typeIndex) Parameters Type Name Description Int32 typeIndex Returns Type Description NativeArray < Int32 >"
  },
  "api/Unity.Entities.TypeManager.HasEntityReferences.html": {
    "href": "api/Unity.Entities.TypeManager.HasEntityReferences.html",
    "title": "Method HasEntityReferences | Entities | 0.17.0-preview.18",
    "keywords": "Method HasEntityReferences HasEntityReferences(Int32) Declaration public static bool HasEntityReferences(int typeIndex) Parameters Type Name Description Int32 typeIndex Returns Type Description Boolean"
  },
  "api/Unity.Entities.TypeManager.HasNoEntityReferencesFlag.html": {
    "href": "api/Unity.Entities.TypeManager.HasNoEntityReferencesFlag.html",
    "title": "Field HasNoEntityReferencesFlag | Entities | 0.17.0-preview.18",
    "keywords": "Field HasNoEntityReferencesFlag Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public const int HasNoEntityReferencesFlag = 16777216 Returns Type Description Int32"
  },
  "api/Unity.Entities.TypeManager.html": {
    "href": "api/Unity.Entities.TypeManager.html",
    "title": "Class TypeManager | Entities | 0.17.0-preview.18",
    "keywords": "Class TypeManager Inheritance Object TypeManager Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class TypeManager Fields Name Description BufferComponentTypeFlag ChunkComponentTypeFlag ClearFlagsMask DefaultBufferCapacityNumerator BufferCapacity is by default calculated as DefaultBufferCapacityNumerator / sizeof(BufferElementDataType) thus for a 1 byte component, the maximum number of elements possible to be stored in chunk memory before the buffer is allocated separately from chunk data, is DefaultBufferCapacityNumerator elements. For a 2 byte sized component, (DefaultBufferCapacityNumerator / 2) elements can be stored, etc... HasNoEntityReferencesFlag ManagedComponentTypeFlag MaximumChunkCapacity MaximumSupportedAlignment MaximumTypesCount ObjectOffset SharedComponentTypeFlag SystemStateSharedComponentTypeFlag SystemStateTypeFlag ZeroSizeInChunkTypeFlag Properties Name Description AllTypes Methods Name Description CheckIsAllowedAsComponentData(Type, String) CheckIsAllowedAsManagedComponentData(Type, String) ConstructComponentFromBuffer(Int32, Void*) ConstructSystem(Type) Construct a System from a Type. Uses the same list in GetSystems() ConstructSystem<T>() ConstructSystem<T>(Type) Equals(Object, Object, Int32) Equals(Object, Void*, Int32) Equals(Void*, Void*, Int32) Equals<T>(ref T, ref T) GetAllTypes() GetEntityOffsets(Int32, out Int32) Note this function will always return a pointer even if the given type has no Entity offsets. Always check/iterate over the returned pointer using the returned count GetFastEqualityTypeInfo(TypeManager.TypeInfo) GetHashCode(Object, Int32) GetHashCode(Void*, Int32) GetHashCode<T>(ref T) GetSystemAttributes(Type, Type) Get all the attribute objects of Type attributeType for a System. GetSystemName(Type) GetSystems(WorldSystemFilterFlags, WorldSystemFilterFlags) Return an array of all System types available to the runtime matching the WorldSystemFilterFlags. By default, all systems available to the runtime is returned. GetType(Int32) GetTypeCount() GetTypeIndex(Type) GetTypeIndex<T>() GetTypeIndexFromStableTypeHash(UInt64) GetTypeInfo(Int32) GetTypeInfo<T>() GetWriteGroupTypes(Int32) HasEntityReferences(Int32) Initialize() Initializes the TypeManager with all ECS type information. May be called multiple times; only the first call will do any work. Always must be called from the main thread. IsAssemblyReferencingEntities(Assembly) IsBuffer(Int32) IsChunkComponent(Int32) IsManagedComponent(Int32) IsSharedComponent(Int32) IsSystemAGroup(Type) IsSystemStateComponent(Int32) IsSystemStateSharedComponent(Int32) IsSystemType(Type) IsZeroSized(Int32) MakeChunkComponentTypeIndex(Int32) RegisterUnityEngineObjectType(Type) Shutdown() Removes all ECS type information and any allocated memory. May only be called once globally, and must be called from the main thread. ThrowOnDisallowedComponentData(Type, Type, String) ThrowOnDisallowedManagedComponentData(Type, Type, String)"
  },
  "api/Unity.Entities.TypeManager.Initialize.html": {
    "href": "api/Unity.Entities.TypeManager.Initialize.html",
    "title": "Method Initialize | Entities | 0.17.0-preview.18",
    "keywords": "Method Initialize Initialize() Initializes the TypeManager with all ECS type information. May be called multiple times; only the first call will do any work. Always must be called from the main thread. Declaration public static void Initialize()"
  },
  "api/Unity.Entities.TypeManager.IsAssemblyReferencingEntities.html": {
    "href": "api/Unity.Entities.TypeManager.IsAssemblyReferencingEntities.html",
    "title": "Method IsAssemblyReferencingEntities | Entities | 0.17.0-preview.18",
    "keywords": "Method IsAssemblyReferencingEntities IsAssemblyReferencingEntities(Assembly) Declaration public static bool IsAssemblyReferencingEntities(Assembly assembly) Parameters Type Name Description Assembly assembly Returns Type Description Boolean"
  },
  "api/Unity.Entities.TypeManager.IsBuffer.html": {
    "href": "api/Unity.Entities.TypeManager.IsBuffer.html",
    "title": "Method IsBuffer | Entities | 0.17.0-preview.18",
    "keywords": "Method IsBuffer IsBuffer(Int32) Declaration public static bool IsBuffer(int typeIndex) Parameters Type Name Description Int32 typeIndex Returns Type Description Boolean"
  },
  "api/Unity.Entities.TypeManager.IsChunkComponent.html": {
    "href": "api/Unity.Entities.TypeManager.IsChunkComponent.html",
    "title": "Method IsChunkComponent | Entities | 0.17.0-preview.18",
    "keywords": "Method IsChunkComponent IsChunkComponent(Int32) Declaration public static bool IsChunkComponent(int typeIndex) Parameters Type Name Description Int32 typeIndex Returns Type Description Boolean"
  },
  "api/Unity.Entities.TypeManager.IsManagedComponent.html": {
    "href": "api/Unity.Entities.TypeManager.IsManagedComponent.html",
    "title": "Method IsManagedComponent | Entities | 0.17.0-preview.18",
    "keywords": "Method IsManagedComponent IsManagedComponent(Int32) Declaration public static bool IsManagedComponent(int typeIndex) Parameters Type Name Description Int32 typeIndex Returns Type Description Boolean"
  },
  "api/Unity.Entities.TypeManager.IsSharedComponent.html": {
    "href": "api/Unity.Entities.TypeManager.IsSharedComponent.html",
    "title": "Method IsSharedComponent | Entities | 0.17.0-preview.18",
    "keywords": "Method IsSharedComponent IsSharedComponent(Int32) Declaration public static bool IsSharedComponent(int typeIndex) Parameters Type Name Description Int32 typeIndex Returns Type Description Boolean"
  },
  "api/Unity.Entities.TypeManager.IsSystemAGroup.html": {
    "href": "api/Unity.Entities.TypeManager.IsSystemAGroup.html",
    "title": "Method IsSystemAGroup | Entities | 0.17.0-preview.18",
    "keywords": "Method IsSystemAGroup IsSystemAGroup(Type) Declaration public static bool IsSystemAGroup(Type t) Parameters Type Name Description Type t Returns Type Description Boolean"
  },
  "api/Unity.Entities.TypeManager.IsSystemStateComponent.html": {
    "href": "api/Unity.Entities.TypeManager.IsSystemStateComponent.html",
    "title": "Method IsSystemStateComponent | Entities | 0.17.0-preview.18",
    "keywords": "Method IsSystemStateComponent IsSystemStateComponent(Int32) Declaration public static bool IsSystemStateComponent(int typeIndex) Parameters Type Name Description Int32 typeIndex Returns Type Description Boolean"
  },
  "api/Unity.Entities.TypeManager.IsSystemStateSharedComponent.html": {
    "href": "api/Unity.Entities.TypeManager.IsSystemStateSharedComponent.html",
    "title": "Method IsSystemStateSharedComponent | Entities | 0.17.0-preview.18",
    "keywords": "Method IsSystemStateSharedComponent IsSystemStateSharedComponent(Int32) Declaration public static bool IsSystemStateSharedComponent(int typeIndex) Parameters Type Name Description Int32 typeIndex Returns Type Description Boolean"
  },
  "api/Unity.Entities.TypeManager.IsSystemType.html": {
    "href": "api/Unity.Entities.TypeManager.IsSystemType.html",
    "title": "Method IsSystemType | Entities | 0.17.0-preview.18",
    "keywords": "Method IsSystemType IsSystemType(Type) Declaration public static bool IsSystemType(Type t) Parameters Type Name Description Type t Returns Type Description Boolean"
  },
  "api/Unity.Entities.TypeManager.IsZeroSized.html": {
    "href": "api/Unity.Entities.TypeManager.IsZeroSized.html",
    "title": "Method IsZeroSized | Entities | 0.17.0-preview.18",
    "keywords": "Method IsZeroSized IsZeroSized(Int32) Declaration public static bool IsZeroSized(int typeIndex) Parameters Type Name Description Int32 typeIndex Returns Type Description Boolean"
  },
  "api/Unity.Entities.TypeManager.MakeChunkComponentTypeIndex.html": {
    "href": "api/Unity.Entities.TypeManager.MakeChunkComponentTypeIndex.html",
    "title": "Method MakeChunkComponentTypeIndex | Entities | 0.17.0-preview.18",
    "keywords": "Method MakeChunkComponentTypeIndex MakeChunkComponentTypeIndex(Int32) Declaration public static int MakeChunkComponentTypeIndex(int typeIndex) Parameters Type Name Description Int32 typeIndex Returns Type Description Int32"
  },
  "api/Unity.Entities.TypeManager.ManagedComponentTypeFlag.html": {
    "href": "api/Unity.Entities.TypeManager.ManagedComponentTypeFlag.html",
    "title": "Field ManagedComponentTypeFlag | Entities | 0.17.0-preview.18",
    "keywords": "Field ManagedComponentTypeFlag Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public const int ManagedComponentTypeFlag = 268435456 Returns Type Description Int32"
  },
  "api/Unity.Entities.TypeManager.MaximumChunkCapacity.html": {
    "href": "api/Unity.Entities.TypeManager.MaximumChunkCapacity.html",
    "title": "Field MaximumChunkCapacity | Entities | 0.17.0-preview.18",
    "keywords": "Field MaximumChunkCapacity Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public const int MaximumChunkCapacity = 2147483647 Returns Type Description Int32"
  },
  "api/Unity.Entities.TypeManager.MaximumSupportedAlignment.html": {
    "href": "api/Unity.Entities.TypeManager.MaximumSupportedAlignment.html",
    "title": "Field MaximumSupportedAlignment | Entities | 0.17.0-preview.18",
    "keywords": "Field MaximumSupportedAlignment Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public const int MaximumSupportedAlignment = 16 Returns Type Description Int32"
  },
  "api/Unity.Entities.TypeManager.MaximumTypesCount.html": {
    "href": "api/Unity.Entities.TypeManager.MaximumTypesCount.html",
    "title": "Field MaximumTypesCount | Entities | 0.17.0-preview.18",
    "keywords": "Field MaximumTypesCount Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public const int MaximumTypesCount = 10240 Returns Type Description Int32"
  },
  "api/Unity.Entities.TypeManager.ObjectOffset.html": {
    "href": "api/Unity.Entities.TypeManager.ObjectOffset.html",
    "title": "Field ObjectOffset | Entities | 0.17.0-preview.18",
    "keywords": "Field ObjectOffset Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static int ObjectOffset Returns Type Description Int32"
  },
  "api/Unity.Entities.TypeManager.RegisterUnityEngineObjectType.html": {
    "href": "api/Unity.Entities.TypeManager.RegisterUnityEngineObjectType.html",
    "title": "Method RegisterUnityEngineObjectType | Entities | 0.17.0-preview.18",
    "keywords": "Method RegisterUnityEngineObjectType RegisterUnityEngineObjectType(Type) Declaration public static void RegisterUnityEngineObjectType(Type type) Parameters Type Name Description Type type"
  },
  "api/Unity.Entities.TypeManager.SharedComponentTypeFlag.html": {
    "href": "api/Unity.Entities.TypeManager.SharedComponentTypeFlag.html",
    "title": "Field SharedComponentTypeFlag | Entities | 0.17.0-preview.18",
    "keywords": "Field SharedComponentTypeFlag Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public const int SharedComponentTypeFlag = 134217728 Returns Type Description Int32"
  },
  "api/Unity.Entities.TypeManager.Shutdown.html": {
    "href": "api/Unity.Entities.TypeManager.Shutdown.html",
    "title": "Method Shutdown | Entities | 0.17.0-preview.18",
    "keywords": "Method Shutdown Shutdown() Removes all ECS type information and any allocated memory. May only be called once globally, and must be called from the main thread. Declaration public static void Shutdown()"
  },
  "api/Unity.Entities.TypeManager.SystemStateSharedComponentTypeFlag.html": {
    "href": "api/Unity.Entities.TypeManager.SystemStateSharedComponentTypeFlag.html",
    "title": "Field SystemStateSharedComponentTypeFlag | Entities | 0.17.0-preview.18",
    "keywords": "Field SystemStateSharedComponentTypeFlag Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public const int SystemStateSharedComponentTypeFlag = 167772160 Returns Type Description Int32"
  },
  "api/Unity.Entities.TypeManager.SystemStateTypeFlag.html": {
    "href": "api/Unity.Entities.TypeManager.SystemStateTypeFlag.html",
    "title": "Field SystemStateTypeFlag | Entities | 0.17.0-preview.18",
    "keywords": "Field SystemStateTypeFlag Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public const int SystemStateTypeFlag = 33554432 Returns Type Description Int32"
  },
  "api/Unity.Entities.TypeManager.ThrowOnDisallowedComponentData.html": {
    "href": "api/Unity.Entities.TypeManager.ThrowOnDisallowedComponentData.html",
    "title": "Method ThrowOnDisallowedComponentData | Entities | 0.17.0-preview.18",
    "keywords": "Method ThrowOnDisallowedComponentData ThrowOnDisallowedComponentData(Type, Type, String) Declaration [Conditional(\"ENABLE_UNITY_COLLECTIONS_CHECKS\")] public static void ThrowOnDisallowedComponentData(Type type, Type baseType, string baseTypeDesc) Parameters Type Name Description Type type Type baseType String baseTypeDesc"
  },
  "api/Unity.Entities.TypeManager.ThrowOnDisallowedManagedComponentData.html": {
    "href": "api/Unity.Entities.TypeManager.ThrowOnDisallowedManagedComponentData.html",
    "title": "Method ThrowOnDisallowedManagedComponentData | Entities | 0.17.0-preview.18",
    "keywords": "Method ThrowOnDisallowedManagedComponentData ThrowOnDisallowedManagedComponentData(Type, Type, String) Declaration [Conditional(\"ENABLE_UNITY_COLLECTIONS_CHECKS\")] public static void ThrowOnDisallowedManagedComponentData(Type type, Type baseType, string baseTypeDesc) Parameters Type Name Description Type type Type baseType String baseTypeDesc"
  },
  "api/Unity.Entities.TypeManager.TypeCategory.html": {
    "href": "api/Unity.Entities.TypeManager.TypeCategory.html",
    "title": "Enum TypeManager.TypeCategory | Entities | 0.17.0-preview.18",
    "keywords": "Enum TypeManager.TypeCategory Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public enum TypeCategory Fields Name Description Value ComponentData Implements IComponentData (can be either a struct or a class) 0 BufferData Implements IBufferElementData (struct only) 1 ISharedComponentData Implement ISharedComponentData (struct only) 2 EntityData Is an Entity 3 UnityEngineObject Inherits from UnityEngine.Object (class only) 4 Extension Methods SourceGenHelpers.GetFlags()"
  },
  "api/Unity.Entities.TypeManager.TypeInfo.AlignmentInBytes.html": {
    "href": "api/Unity.Entities.TypeManager.TypeInfo.AlignmentInBytes.html",
    "title": "Field AlignmentInBytes | Entities | 0.17.0-preview.18",
    "keywords": "Field AlignmentInBytes Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public readonly int AlignmentInBytes Returns Type Description Int32"
  },
  "api/Unity.Entities.TypeManager.TypeInfo.AlignmentInChunkInBytes.html": {
    "href": "api/Unity.Entities.TypeManager.TypeInfo.AlignmentInChunkInBytes.html",
    "title": "Property AlignmentInChunkInBytes | Entities | 0.17.0-preview.18",
    "keywords": "Property AlignmentInChunkInBytes AlignmentInChunkInBytes Declaration public int AlignmentInChunkInBytes { get; } Property Value Type Description Int32"
  },
  "api/Unity.Entities.TypeManager.TypeInfo.BlobAssetRefOffsetCount.html": {
    "href": "api/Unity.Entities.TypeManager.TypeInfo.BlobAssetRefOffsetCount.html",
    "title": "Field BlobAssetRefOffsetCount | Entities | 0.17.0-preview.18",
    "keywords": "Field BlobAssetRefOffsetCount Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public readonly int BlobAssetRefOffsetCount Returns Type Description Int32"
  },
  "api/Unity.Entities.TypeManager.TypeInfo.BufferCapacity.html": {
    "href": "api/Unity.Entities.TypeManager.TypeInfo.BufferCapacity.html",
    "title": "Field BufferCapacity | Entities | 0.17.0-preview.18",
    "keywords": "Field BufferCapacity Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public readonly int BufferCapacity Returns Type Description Int32"
  },
  "api/Unity.Entities.TypeManager.TypeInfo.Category.html": {
    "href": "api/Unity.Entities.TypeManager.TypeInfo.Category.html",
    "title": "Field Category | Entities | 0.17.0-preview.18",
    "keywords": "Field Category Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public readonly TypeManager.TypeCategory Category Returns Type Description TypeManager.TypeCategory"
  },
  "api/Unity.Entities.TypeManager.TypeInfo.-ctor.html": {
    "href": "api/Unity.Entities.TypeManager.TypeInfo.-ctor.html",
    "title": "Constructor TypeInfo | Entities | 0.17.0-preview.18",
    "keywords": "Constructor TypeInfo TypeInfo(Int32, TypeManager.TypeCategory, Int32, Int32, UInt64, UInt64, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Boolean, Int32, Int32, Int32, Int32) Declaration public TypeInfo(int typeIndex, TypeManager.TypeCategory category, int entityOffsetCount, int entityOffsetStartIndex, ulong memoryOrdering, ulong stableTypeHash, int bufferCapacity, int sizeInChunk, int elementSize, int alignmentInBytes, int maximumChunkCapacity, int writeGroupCount, int writeGroupStartIndex, bool hasBlobRefs, int blobAssetRefOffsetCount, int blobAssetRefOffsetStartIndex, int fastEqualityIndex, int typeSize) Parameters Type Name Description Int32 typeIndex TypeManager.TypeCategory category Int32 entityOffsetCount Int32 entityOffsetStartIndex UInt64 memoryOrdering UInt64 stableTypeHash Int32 bufferCapacity Int32 sizeInChunk Int32 elementSize Int32 alignmentInBytes Int32 maximumChunkCapacity Int32 writeGroupCount Int32 writeGroupStartIndex Boolean hasBlobRefs Int32 blobAssetRefOffsetCount Int32 blobAssetRefOffsetStartIndex Int32 fastEqualityIndex Int32 typeSize"
  },
  "api/Unity.Entities.TypeManager.TypeInfo.DebugTypeName.html": {
    "href": "api/Unity.Entities.TypeManager.TypeInfo.DebugTypeName.html",
    "title": "Property DebugTypeName | Entities | 0.17.0-preview.18",
    "keywords": "Property DebugTypeName DebugTypeName Declaration public string DebugTypeName { get; } Property Value Type Description String"
  },
  "api/Unity.Entities.TypeManager.TypeInfo.ElementSize.html": {
    "href": "api/Unity.Entities.TypeManager.TypeInfo.ElementSize.html",
    "title": "Field ElementSize | Entities | 0.17.0-preview.18",
    "keywords": "Field ElementSize Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public readonly int ElementSize Returns Type Description Int32"
  },
  "api/Unity.Entities.TypeManager.TypeInfo.EntityOffsetCount.html": {
    "href": "api/Unity.Entities.TypeManager.TypeInfo.EntityOffsetCount.html",
    "title": "Field EntityOffsetCount | Entities | 0.17.0-preview.18",
    "keywords": "Field EntityOffsetCount Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public readonly int EntityOffsetCount Returns Type Description Int32"
  },
  "api/Unity.Entities.TypeManager.TypeInfo.HasBlobAssetRefs.html": {
    "href": "api/Unity.Entities.TypeManager.TypeInfo.HasBlobAssetRefs.html",
    "title": "Property HasBlobAssetRefs | Entities | 0.17.0-preview.18",
    "keywords": "Property HasBlobAssetRefs HasBlobAssetRefs For struct IComponentData this gurantees that there are blob asset refs For class based IComponentData it is possible that there are blob asset references. (Polymorphic referenced can not be proven statically) Declaration public bool HasBlobAssetRefs { get; } Property Value Type Description Boolean"
  },
  "api/Unity.Entities.TypeManager.TypeInfo.HasWriteGroups.html": {
    "href": "api/Unity.Entities.TypeManager.TypeInfo.HasWriteGroups.html",
    "title": "Property HasWriteGroups | Entities | 0.17.0-preview.18",
    "keywords": "Property HasWriteGroups HasWriteGroups Declaration public bool HasWriteGroups { get; } Property Value Type Description Boolean"
  },
  "api/Unity.Entities.TypeManager.TypeInfo.html": {
    "href": "api/Unity.Entities.TypeManager.TypeInfo.html",
    "title": "Struct TypeManager.TypeInfo | Entities | 0.17.0-preview.18",
    "keywords": "Struct TypeManager.TypeInfo Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct TypeInfo Constructors Name Description TypeInfo(Int32, TypeManager.TypeCategory, Int32, Int32, UInt64, UInt64, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Boolean, Int32, Int32, Int32, Int32) Fields Name Description AlignmentInBytes BlobAssetRefOffsetCount BufferCapacity Category ElementSize EntityOffsetCount MaximumChunkCapacity MemoryOrdering SizeInChunk StableTypeHash TypeIndex TypeSize WriteGroupCount Properties Name Description AlignmentInChunkInBytes DebugTypeName HasBlobAssetRefs For struct IComponentData this gurantees that there are blob asset refs For class based IComponentData it is possible that there are blob asset references. (Polymorphic referenced can not be proven statically) HasWriteGroups IsZeroSized Type"
  },
  "api/Unity.Entities.TypeManager.TypeInfo.IsZeroSized.html": {
    "href": "api/Unity.Entities.TypeManager.TypeInfo.IsZeroSized.html",
    "title": "Property IsZeroSized | Entities | 0.17.0-preview.18",
    "keywords": "Property IsZeroSized IsZeroSized Declaration public bool IsZeroSized { get; } Property Value Type Description Boolean"
  },
  "api/Unity.Entities.TypeManager.TypeInfo.MaximumChunkCapacity.html": {
    "href": "api/Unity.Entities.TypeManager.TypeInfo.MaximumChunkCapacity.html",
    "title": "Field MaximumChunkCapacity | Entities | 0.17.0-preview.18",
    "keywords": "Field MaximumChunkCapacity Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public readonly int MaximumChunkCapacity Returns Type Description Int32"
  },
  "api/Unity.Entities.TypeManager.TypeInfo.MemoryOrdering.html": {
    "href": "api/Unity.Entities.TypeManager.TypeInfo.MemoryOrdering.html",
    "title": "Field MemoryOrdering | Entities | 0.17.0-preview.18",
    "keywords": "Field MemoryOrdering Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public readonly ulong MemoryOrdering Returns Type Description UInt64"
  },
  "api/Unity.Entities.TypeManager.TypeInfo.SizeInChunk.html": {
    "href": "api/Unity.Entities.TypeManager.TypeInfo.SizeInChunk.html",
    "title": "Field SizeInChunk | Entities | 0.17.0-preview.18",
    "keywords": "Field SizeInChunk Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public readonly int SizeInChunk Returns Type Description Int32"
  },
  "api/Unity.Entities.TypeManager.TypeInfo.StableTypeHash.html": {
    "href": "api/Unity.Entities.TypeManager.TypeInfo.StableTypeHash.html",
    "title": "Field StableTypeHash | Entities | 0.17.0-preview.18",
    "keywords": "Field StableTypeHash Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public readonly ulong StableTypeHash Returns Type Description UInt64"
  },
  "api/Unity.Entities.TypeManager.TypeInfo.Type.html": {
    "href": "api/Unity.Entities.TypeManager.TypeInfo.Type.html",
    "title": "Property Type | Entities | 0.17.0-preview.18",
    "keywords": "Property Type Type Declaration public Type Type { get; } Property Value Type Description Type"
  },
  "api/Unity.Entities.TypeManager.TypeInfo.TypeIndex.html": {
    "href": "api/Unity.Entities.TypeManager.TypeInfo.TypeIndex.html",
    "title": "Field TypeIndex | Entities | 0.17.0-preview.18",
    "keywords": "Field TypeIndex Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public readonly int TypeIndex Returns Type Description Int32"
  },
  "api/Unity.Entities.TypeManager.TypeInfo.TypeSize.html": {
    "href": "api/Unity.Entities.TypeManager.TypeInfo.TypeSize.html",
    "title": "Field TypeSize | Entities | 0.17.0-preview.18",
    "keywords": "Field TypeSize Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public readonly int TypeSize Returns Type Description Int32"
  },
  "api/Unity.Entities.TypeManager.TypeInfo.WriteGroupCount.html": {
    "href": "api/Unity.Entities.TypeManager.TypeInfo.WriteGroupCount.html",
    "title": "Field WriteGroupCount | Entities | 0.17.0-preview.18",
    "keywords": "Field WriteGroupCount Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public readonly int WriteGroupCount Returns Type Description Int32"
  },
  "api/Unity.Entities.TypeManager.TypeVersionAttribute.-ctor.html": {
    "href": "api/Unity.Entities.TypeManager.TypeVersionAttribute.-ctor.html",
    "title": "Constructor TypeVersionAttribute | Entities | 0.17.0-preview.18",
    "keywords": "Constructor TypeVersionAttribute TypeVersionAttribute(Int32) Declaration public TypeVersionAttribute(int version) Parameters Type Name Description Int32 version"
  },
  "api/Unity.Entities.TypeManager.TypeVersionAttribute.html": {
    "href": "api/Unity.Entities.TypeManager.TypeVersionAttribute.html",
    "title": "Class TypeManager.TypeVersionAttribute | Entities | 0.17.0-preview.18",
    "keywords": "Class TypeManager.TypeVersionAttribute Inheritance Object Attribute TypeManager.TypeVersionAttribute Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [AttributeUsage(AttributeTargets.Struct)] public class TypeVersionAttribute : Attribute, _Attribute Constructors Name Description TypeVersionAttribute(Int32) Fields Name Description TypeVersion"
  },
  "api/Unity.Entities.TypeManager.TypeVersionAttribute.TypeVersion.html": {
    "href": "api/Unity.Entities.TypeManager.TypeVersionAttribute.TypeVersion.html",
    "title": "Field TypeVersion | Entities | 0.17.0-preview.18",
    "keywords": "Field TypeVersion Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public int TypeVersion Returns Type Description Int32"
  },
  "api/Unity.Entities.TypeManager.ZeroSizeInChunkTypeFlag.html": {
    "href": "api/Unity.Entities.TypeManager.ZeroSizeInChunkTypeFlag.html",
    "title": "Field ZeroSizeInChunkTypeFlag | Entities | 0.17.0-preview.18",
    "keywords": "Field ZeroSizeInChunkTypeFlag Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public const int ZeroSizeInChunkTypeFlag = 1073741824 Returns Type Description Int32"
  },
  "api/Unity.Entities.UniversalDelegates.html": {
    "href": "api/Unity.Entities.UniversalDelegates.html",
    "title": "Namespace Unity.Entities.UniversalDelegates | Entities | 0.17.0-preview.18",
    "keywords": "Namespace Unity.Entities.UniversalDelegates Delegates I<T0> II<T0, T1> III<T0, T1, T2> IIII<T0, T1, T2, T3> IIIII<T0, T1, T2, T3, T4> IIIIII<T0, T1, T2, T3, T4, T5> IIIIIII<T0, T1, T2, T3, T4, T5, T6> IIIIIIII<T0, T1, T2, T3, T4, T5, T6, T7> R<T0> RI<T0, T1> RII<T0, T1, T2> RIII<T0, T1, T2, T3> RIIII<T0, T1, T2, T3, T4> RIIIII<T0, T1, T2, T3, T4, T5> RIIIIII<T0, T1, T2, T3, T4, T5, T6> RIIIIIII<T0, T1, T2, T3, T4, T5, T6, T7> RR<T0, T1> RRI<T0, T1, T2> RRII<T0, T1, T2, T3> RRIII<T0, T1, T2, T3, T4> RRIIII<T0, T1, T2, T3, T4, T5> RRIIIII<T0, T1, T2, T3, T4, T5, T6> RRIIIIII<T0, T1, T2, T3, T4, T5, T6, T7> RRR<T0, T1, T2> RRRI<T0, T1, T2, T3> RRRII<T0, T1, T2, T3, T4> RRRIII<T0, T1, T2, T3, T4, T5> RRRIIII<T0, T1, T2, T3, T4, T5, T6> RRRIIIII<T0, T1, T2, T3, T4, T5, T6, T7> RRRR<T0, T1, T2, T3> RRRRI<T0, T1, T2, T3, T4> RRRRII<T0, T1, T2, T3, T4, T5> RRRRIII<T0, T1, T2, T3, T4, T5, T6> RRRRIIII<T0, T1, T2, T3, T4, T5, T6, T7> RRRRR<T0, T1, T2, T3, T4> RRRRRI<T0, T1, T2, T3, T4, T5> RRRRRII<T0, T1, T2, T3, T4, T5, T6> RRRRRIII<T0, T1, T2, T3, T4, T5, T6, T7> RRRRRR<T0, T1, T2, T3, T4, T5> RRRRRRI<T0, T1, T2, T3, T4, T5, T6> RRRRRRII<T0, T1, T2, T3, T4, T5, T6, T7> RRRRRRR<T0, T1, T2, T3, T4, T5, T6> RRRRRRRI<T0, T1, T2, T3, T4, T5, T6, T7> RRRRRRRR<T0, T1, T2, T3, T4, T5, T6, T7> V<T0> VI<T0, T1> VII<T0, T1, T2> VIII<T0, T1, T2, T3> VIIII<T0, T1, T2, T3, T4> VIIIII<T0, T1, T2, T3, T4, T5> VIIIIII<T0, T1, T2, T3, T4, T5, T6> VIIIIIII<T0, T1, T2, T3, T4, T5, T6, T7> VR<T0, T1> VRI<T0, T1, T2> VRII<T0, T1, T2, T3> VRIII<T0, T1, T2, T3, T4> VRIIII<T0, T1, T2, T3, T4, T5> VRIIIII<T0, T1, T2, T3, T4, T5, T6> VRIIIIII<T0, T1, T2, T3, T4, T5, T6, T7> VRR<T0, T1, T2> VRRI<T0, T1, T2, T3> VRRII<T0, T1, T2, T3, T4> VRRIII<T0, T1, T2, T3, T4, T5> VRRIIII<T0, T1, T2, T3, T4, T5, T6> VRRIIIII<T0, T1, T2, T3, T4, T5, T6, T7> VRRR<T0, T1, T2, T3> VRRRI<T0, T1, T2, T3, T4> VRRRII<T0, T1, T2, T3, T4, T5> VRRRIII<T0, T1, T2, T3, T4, T5, T6> VRRRIIII<T0, T1, T2, T3, T4, T5, T6, T7> VRRRR<T0, T1, T2, T3, T4> VRRRRI<T0, T1, T2, T3, T4, T5> VRRRRII<T0, T1, T2, T3, T4, T5, T6> VRRRRIII<T0, T1, T2, T3, T4, T5, T6, T7> VRRRRR<T0, T1, T2, T3, T4, T5> VRRRRRI<T0, T1, T2, T3, T4, T5, T6> VRRRRRII<T0, T1, T2, T3, T4, T5, T6, T7> VRRRRRR<T0, T1, T2, T3, T4, T5, T6> VRRRRRRI<T0, T1, T2, T3, T4, T5, T6, T7> VRRRRRRR<T0, T1, T2, T3, T4, T5, T6, T7> VV<T0, T1> VVI<T0, T1, T2> VVII<T0, T1, T2, T3> VVIII<T0, T1, T2, T3, T4> VVIIII<T0, T1, T2, T3, T4, T5> VVIIIII<T0, T1, T2, T3, T4, T5, T6> VVIIIIII<T0, T1, T2, T3, T4, T5, T6, T7> VVR<T0, T1, T2> VVRI<T0, T1, T2, T3> VVRII<T0, T1, T2, T3, T4> VVRIII<T0, T1, T2, T3, T4, T5> VVRIIII<T0, T1, T2, T3, T4, T5, T6> VVRIIIII<T0, T1, T2, T3, T4, T5, T6, T7> VVRR<T0, T1, T2, T3> VVRRI<T0, T1, T2, T3, T4> VVRRII<T0, T1, T2, T3, T4, T5> VVRRIII<T0, T1, T2, T3, T4, T5, T6> VVRRIIII<T0, T1, T2, T3, T4, T5, T6, T7> VVRRR<T0, T1, T2, T3, T4> VVRRRI<T0, T1, T2, T3, T4, T5> VVRRRII<T0, T1, T2, T3, T4, T5, T6> VVRRRIII<T0, T1, T2, T3, T4, T5, T6, T7> VVRRRR<T0, T1, T2, T3, T4, T5> VVRRRRI<T0, T1, T2, T3, T4, T5, T6> VVRRRRII<T0, T1, T2, T3, T4, T5, T6, T7> VVRRRRR<T0, T1, T2, T3, T4, T5, T6> VVRRRRRI<T0, T1, T2, T3, T4, T5, T6, T7> VVRRRRRR<T0, T1, T2, T3, T4, T5, T6, T7> VVV<T0, T1, T2> VVVI<T0, T1, T2, T3> VVVII<T0, T1, T2, T3, T4> VVVIII<T0, T1, T2, T3, T4, T5> VVVIIII<T0, T1, T2, T3, T4, T5, T6> VVVIIIII<T0, T1, T2, T3, T4, T5, T6, T7> VVVR<T0, T1, T2, T3> VVVRI<T0, T1, T2, T3, T4> VVVRII<T0, T1, T2, T3, T4, T5> VVVRIII<T0, T1, T2, T3, T4, T5, T6> VVVRIIII<T0, T1, T2, T3, T4, T5, T6, T7> VVVRR<T0, T1, T2, T3, T4> VVVRRI<T0, T1, T2, T3, T4, T5> VVVRRII<T0, T1, T2, T3, T4, T5, T6> VVVRRIII<T0, T1, T2, T3, T4, T5, T6, T7> VVVRRR<T0, T1, T2, T3, T4, T5> VVVRRRI<T0, T1, T2, T3, T4, T5, T6> VVVRRRII<T0, T1, T2, T3, T4, T5, T6, T7> VVVRRRR<T0, T1, T2, T3, T4, T5, T6> VVVRRRRI<T0, T1, T2, T3, T4, T5, T6, T7> VVVRRRRR<T0, T1, T2, T3, T4, T5, T6, T7> VVVV<T0, T1, T2, T3> VVVVI<T0, T1, T2, T3, T4> VVVVII<T0, T1, T2, T3, T4, T5> VVVVIII<T0, T1, T2, T3, T4, T5, T6> VVVVIIII<T0, T1, T2, T3, T4, T5, T6, T7> VVVVR<T0, T1, T2, T3, T4> VVVVRI<T0, T1, T2, T3, T4, T5> VVVVRII<T0, T1, T2, T3, T4, T5, T6> VVVVRIII<T0, T1, T2, T3, T4, T5, T6, T7> VVVVRR<T0, T1, T2, T3, T4, T5> VVVVRRI<T0, T1, T2, T3, T4, T5, T6> VVVVRRII<T0, T1, T2, T3, T4, T5, T6, T7> VVVVRRR<T0, T1, T2, T3, T4, T5, T6> VVVVRRRI<T0, T1, T2, T3, T4, T5, T6, T7> VVVVRRRR<T0, T1, T2, T3, T4, T5, T6, T7> VVVVV<T0, T1, T2, T3, T4> VVVVVI<T0, T1, T2, T3, T4, T5> VVVVVII<T0, T1, T2, T3, T4, T5, T6> VVVVVIII<T0, T1, T2, T3, T4, T5, T6, T7> VVVVVR<T0, T1, T2, T3, T4, T5> VVVVVRI<T0, T1, T2, T3, T4, T5, T6> VVVVVRII<T0, T1, T2, T3, T4, T5, T6, T7> VVVVVRR<T0, T1, T2, T3, T4, T5, T6> VVVVVRRI<T0, T1, T2, T3, T4, T5, T6, T7> VVVVVRRR<T0, T1, T2, T3, T4, T5, T6, T7> VVVVVV<T0, T1, T2, T3, T4, T5> VVVVVVI<T0, T1, T2, T3, T4, T5, T6> VVVVVVII<T0, T1, T2, T3, T4, T5, T6, T7> VVVVVVR<T0, T1, T2, T3, T4, T5, T6> VVVVVVRI<T0, T1, T2, T3, T4, T5, T6, T7> VVVVVVRR<T0, T1, T2, T3, T4, T5, T6, T7> VVVVVVV<T0, T1, T2, T3, T4, T5, T6> VVVVVVVI<T0, T1, T2, T3, T4, T5, T6, T7> VVVVVVVR<T0, T1, T2, T3, T4, T5, T6, T7> VVVVVVVV<T0, T1, T2, T3, T4, T5, T6, T7>"
  },
  "api/Unity.Entities.UniversalDelegates.I-1.html": {
    "href": "api/Unity.Entities.UniversalDelegates.I-1.html",
    "title": "Delegate I<T0> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate I<T0> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void I<T0>(in T0 t0); Parameters Type Name Description T0 t0 Type Parameters Name Description T0"
  },
  "api/Unity.Entities.UniversalDelegates.II-2.html": {
    "href": "api/Unity.Entities.UniversalDelegates.II-2.html",
    "title": "Delegate II<T0, T1> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate II<T0, T1> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void II<T0, T1>(in T0 t0, in T1 t1); Parameters Type Name Description T0 t0 T1 t1 Type Parameters Name Description T0 T1"
  },
  "api/Unity.Entities.UniversalDelegates.III-3.html": {
    "href": "api/Unity.Entities.UniversalDelegates.III-3.html",
    "title": "Delegate III<T0, T1, T2> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate III<T0, T1, T2> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void III<T0, T1, T2>(in T0 t0, in T1 t1, in T2 t2); Parameters Type Name Description T0 t0 T1 t1 T2 t2 Type Parameters Name Description T0 T1 T2"
  },
  "api/Unity.Entities.UniversalDelegates.IIII-4.html": {
    "href": "api/Unity.Entities.UniversalDelegates.IIII-4.html",
    "title": "Delegate IIII<T0, T1, T2, T3> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate IIII<T0, T1, T2, T3> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void IIII<T0, T1, T2, T3>(in T0 t0, in T1 t1, in T2 t2, in T3 t3); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 Type Parameters Name Description T0 T1 T2 T3"
  },
  "api/Unity.Entities.UniversalDelegates.IIIII-5.html": {
    "href": "api/Unity.Entities.UniversalDelegates.IIIII-5.html",
    "title": "Delegate IIIII<T0, T1, T2, T3, T4> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate IIIII<T0, T1, T2, T3, T4> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void IIIII<T0, T1, T2, T3, T4>(in T0 t0, in T1 t1, in T2 t2, in T3 t3, in T4 t4); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 Type Parameters Name Description T0 T1 T2 T3 T4"
  },
  "api/Unity.Entities.UniversalDelegates.IIIIII-6.html": {
    "href": "api/Unity.Entities.UniversalDelegates.IIIIII-6.html",
    "title": "Delegate IIIIII<T0, T1, T2, T3, T4, T5> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate IIIIII<T0, T1, T2, T3, T4, T5> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void IIIIII<T0, T1, T2, T3, T4, T5>(in T0 t0, in T1 t1, in T2 t2, in T3 t3, in T4 t4, in T5 t5); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 Type Parameters Name Description T0 T1 T2 T3 T4 T5"
  },
  "api/Unity.Entities.UniversalDelegates.IIIIIII-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.IIIIIII-7.html",
    "title": "Delegate IIIIIII<T0, T1, T2, T3, T4, T5, T6> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate IIIIIII<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void IIIIIII<T0, T1, T2, T3, T4, T5, T6>(in T0 t0, in T1 t1, in T2 t2, in T3 t3, in T4 t4, in T5 t5, in T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.IIIIIIII-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.IIIIIIII-8.html",
    "title": "Delegate IIIIIIII<T0, T1, T2, T3, T4, T5, T6, T7> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate IIIIIIII<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void IIIIIIII<T0, T1, T2, T3, T4, T5, T6, T7>(in T0 t0, in T1 t1, in T2 t2, in T3 t3, in T4 t4, in T5 t5, in T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.R-1.html": {
    "href": "api/Unity.Entities.UniversalDelegates.R-1.html",
    "title": "Delegate R<T0> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate R<T0> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void R<T0>(ref T0 t0); Parameters Type Name Description T0 t0 Type Parameters Name Description T0"
  },
  "api/Unity.Entities.UniversalDelegates.RI-2.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RI-2.html",
    "title": "Delegate RI<T0, T1> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate RI<T0, T1> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RI<T0, T1>(ref T0 t0, in T1 t1); Parameters Type Name Description T0 t0 T1 t1 Type Parameters Name Description T0 T1"
  },
  "api/Unity.Entities.UniversalDelegates.RII-3.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RII-3.html",
    "title": "Delegate RII<T0, T1, T2> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate RII<T0, T1, T2> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RII<T0, T1, T2>(ref T0 t0, in T1 t1, in T2 t2); Parameters Type Name Description T0 t0 T1 t1 T2 t2 Type Parameters Name Description T0 T1 T2"
  },
  "api/Unity.Entities.UniversalDelegates.RIII-4.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RIII-4.html",
    "title": "Delegate RIII<T0, T1, T2, T3> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate RIII<T0, T1, T2, T3> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RIII<T0, T1, T2, T3>(ref T0 t0, in T1 t1, in T2 t2, in T3 t3); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 Type Parameters Name Description T0 T1 T2 T3"
  },
  "api/Unity.Entities.UniversalDelegates.RIIII-5.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RIIII-5.html",
    "title": "Delegate RIIII<T0, T1, T2, T3, T4> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate RIIII<T0, T1, T2, T3, T4> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RIIII<T0, T1, T2, T3, T4>(ref T0 t0, in T1 t1, in T2 t2, in T3 t3, in T4 t4); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 Type Parameters Name Description T0 T1 T2 T3 T4"
  },
  "api/Unity.Entities.UniversalDelegates.RIIIII-6.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RIIIII-6.html",
    "title": "Delegate RIIIII<T0, T1, T2, T3, T4, T5> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate RIIIII<T0, T1, T2, T3, T4, T5> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RIIIII<T0, T1, T2, T3, T4, T5>(ref T0 t0, in T1 t1, in T2 t2, in T3 t3, in T4 t4, in T5 t5); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 Type Parameters Name Description T0 T1 T2 T3 T4 T5"
  },
  "api/Unity.Entities.UniversalDelegates.RIIIIII-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RIIIIII-7.html",
    "title": "Delegate RIIIIII<T0, T1, T2, T3, T4, T5, T6> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate RIIIIII<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RIIIIII<T0, T1, T2, T3, T4, T5, T6>(ref T0 t0, in T1 t1, in T2 t2, in T3 t3, in T4 t4, in T5 t5, in T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.RIIIIIII-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RIIIIIII-8.html",
    "title": "Delegate RIIIIIII<T0, T1, T2, T3, T4, T5, T6, T7> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate RIIIIIII<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RIIIIIII<T0, T1, T2, T3, T4, T5, T6, T7>(ref T0 t0, in T1 t1, in T2 t2, in T3 t3, in T4 t4, in T5 t5, in T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.RR-2.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RR-2.html",
    "title": "Delegate RR<T0, T1> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate RR<T0, T1> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RR<T0, T1>(ref T0 t0, ref T1 t1); Parameters Type Name Description T0 t0 T1 t1 Type Parameters Name Description T0 T1"
  },
  "api/Unity.Entities.UniversalDelegates.RRI-3.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RRI-3.html",
    "title": "Delegate RRI<T0, T1, T2> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate RRI<T0, T1, T2> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RRI<T0, T1, T2>(ref T0 t0, ref T1 t1, in T2 t2); Parameters Type Name Description T0 t0 T1 t1 T2 t2 Type Parameters Name Description T0 T1 T2"
  },
  "api/Unity.Entities.UniversalDelegates.RRII-4.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RRII-4.html",
    "title": "Delegate RRII<T0, T1, T2, T3> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate RRII<T0, T1, T2, T3> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RRII<T0, T1, T2, T3>(ref T0 t0, ref T1 t1, in T2 t2, in T3 t3); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 Type Parameters Name Description T0 T1 T2 T3"
  },
  "api/Unity.Entities.UniversalDelegates.RRIII-5.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RRIII-5.html",
    "title": "Delegate RRIII<T0, T1, T2, T3, T4> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate RRIII<T0, T1, T2, T3, T4> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RRIII<T0, T1, T2, T3, T4>(ref T0 t0, ref T1 t1, in T2 t2, in T3 t3, in T4 t4); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 Type Parameters Name Description T0 T1 T2 T3 T4"
  },
  "api/Unity.Entities.UniversalDelegates.RRIIII-6.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RRIIII-6.html",
    "title": "Delegate RRIIII<T0, T1, T2, T3, T4, T5> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate RRIIII<T0, T1, T2, T3, T4, T5> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RRIIII<T0, T1, T2, T3, T4, T5>(ref T0 t0, ref T1 t1, in T2 t2, in T3 t3, in T4 t4, in T5 t5); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 Type Parameters Name Description T0 T1 T2 T3 T4 T5"
  },
  "api/Unity.Entities.UniversalDelegates.RRIIIII-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RRIIIII-7.html",
    "title": "Delegate RRIIIII<T0, T1, T2, T3, T4, T5, T6> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate RRIIIII<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RRIIIII<T0, T1, T2, T3, T4, T5, T6>(ref T0 t0, ref T1 t1, in T2 t2, in T3 t3, in T4 t4, in T5 t5, in T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.RRIIIIII-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RRIIIIII-8.html",
    "title": "Delegate RRIIIIII<T0, T1, T2, T3, T4, T5, T6, T7> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate RRIIIIII<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RRIIIIII<T0, T1, T2, T3, T4, T5, T6, T7>(ref T0 t0, ref T1 t1, in T2 t2, in T3 t3, in T4 t4, in T5 t5, in T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.RRR-3.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RRR-3.html",
    "title": "Delegate RRR<T0, T1, T2> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate RRR<T0, T1, T2> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RRR<T0, T1, T2>(ref T0 t0, ref T1 t1, ref T2 t2); Parameters Type Name Description T0 t0 T1 t1 T2 t2 Type Parameters Name Description T0 T1 T2"
  },
  "api/Unity.Entities.UniversalDelegates.RRRI-4.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RRRI-4.html",
    "title": "Delegate RRRI<T0, T1, T2, T3> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate RRRI<T0, T1, T2, T3> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RRRI<T0, T1, T2, T3>(ref T0 t0, ref T1 t1, ref T2 t2, in T3 t3); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 Type Parameters Name Description T0 T1 T2 T3"
  },
  "api/Unity.Entities.UniversalDelegates.RRRII-5.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RRRII-5.html",
    "title": "Delegate RRRII<T0, T1, T2, T3, T4> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate RRRII<T0, T1, T2, T3, T4> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RRRII<T0, T1, T2, T3, T4>(ref T0 t0, ref T1 t1, ref T2 t2, in T3 t3, in T4 t4); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 Type Parameters Name Description T0 T1 T2 T3 T4"
  },
  "api/Unity.Entities.UniversalDelegates.RRRIII-6.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RRRIII-6.html",
    "title": "Delegate RRRIII<T0, T1, T2, T3, T4, T5> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate RRRIII<T0, T1, T2, T3, T4, T5> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RRRIII<T0, T1, T2, T3, T4, T5>(ref T0 t0, ref T1 t1, ref T2 t2, in T3 t3, in T4 t4, in T5 t5); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 Type Parameters Name Description T0 T1 T2 T3 T4 T5"
  },
  "api/Unity.Entities.UniversalDelegates.RRRIIII-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RRRIIII-7.html",
    "title": "Delegate RRRIIII<T0, T1, T2, T3, T4, T5, T6> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate RRRIIII<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RRRIIII<T0, T1, T2, T3, T4, T5, T6>(ref T0 t0, ref T1 t1, ref T2 t2, in T3 t3, in T4 t4, in T5 t5, in T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.RRRIIIII-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RRRIIIII-8.html",
    "title": "Delegate RRRIIIII<T0, T1, T2, T3, T4, T5, T6, T7> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate RRRIIIII<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RRRIIIII<T0, T1, T2, T3, T4, T5, T6, T7>(ref T0 t0, ref T1 t1, ref T2 t2, in T3 t3, in T4 t4, in T5 t5, in T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.RRRR-4.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RRRR-4.html",
    "title": "Delegate RRRR<T0, T1, T2, T3> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate RRRR<T0, T1, T2, T3> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RRRR<T0, T1, T2, T3>(ref T0 t0, ref T1 t1, ref T2 t2, ref T3 t3); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 Type Parameters Name Description T0 T1 T2 T3"
  },
  "api/Unity.Entities.UniversalDelegates.RRRRI-5.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RRRRI-5.html",
    "title": "Delegate RRRRI<T0, T1, T2, T3, T4> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate RRRRI<T0, T1, T2, T3, T4> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RRRRI<T0, T1, T2, T3, T4>(ref T0 t0, ref T1 t1, ref T2 t2, ref T3 t3, in T4 t4); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 Type Parameters Name Description T0 T1 T2 T3 T4"
  },
  "api/Unity.Entities.UniversalDelegates.RRRRII-6.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RRRRII-6.html",
    "title": "Delegate RRRRII<T0, T1, T2, T3, T4, T5> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate RRRRII<T0, T1, T2, T3, T4, T5> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RRRRII<T0, T1, T2, T3, T4, T5>(ref T0 t0, ref T1 t1, ref T2 t2, ref T3 t3, in T4 t4, in T5 t5); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 Type Parameters Name Description T0 T1 T2 T3 T4 T5"
  },
  "api/Unity.Entities.UniversalDelegates.RRRRIII-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RRRRIII-7.html",
    "title": "Delegate RRRRIII<T0, T1, T2, T3, T4, T5, T6> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate RRRRIII<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RRRRIII<T0, T1, T2, T3, T4, T5, T6>(ref T0 t0, ref T1 t1, ref T2 t2, ref T3 t3, in T4 t4, in T5 t5, in T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.RRRRIIII-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RRRRIIII-8.html",
    "title": "Delegate RRRRIIII<T0, T1, T2, T3, T4, T5, T6, T7> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate RRRRIIII<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RRRRIIII<T0, T1, T2, T3, T4, T5, T6, T7>(ref T0 t0, ref T1 t1, ref T2 t2, ref T3 t3, in T4 t4, in T5 t5, in T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.RRRRR-5.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RRRRR-5.html",
    "title": "Delegate RRRRR<T0, T1, T2, T3, T4> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate RRRRR<T0, T1, T2, T3, T4> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RRRRR<T0, T1, T2, T3, T4>(ref T0 t0, ref T1 t1, ref T2 t2, ref T3 t3, ref T4 t4); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 Type Parameters Name Description T0 T1 T2 T3 T4"
  },
  "api/Unity.Entities.UniversalDelegates.RRRRRI-6.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RRRRRI-6.html",
    "title": "Delegate RRRRRI<T0, T1, T2, T3, T4, T5> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate RRRRRI<T0, T1, T2, T3, T4, T5> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RRRRRI<T0, T1, T2, T3, T4, T5>(ref T0 t0, ref T1 t1, ref T2 t2, ref T3 t3, ref T4 t4, in T5 t5); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 Type Parameters Name Description T0 T1 T2 T3 T4 T5"
  },
  "api/Unity.Entities.UniversalDelegates.RRRRRII-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RRRRRII-7.html",
    "title": "Delegate RRRRRII<T0, T1, T2, T3, T4, T5, T6> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate RRRRRII<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RRRRRII<T0, T1, T2, T3, T4, T5, T6>(ref T0 t0, ref T1 t1, ref T2 t2, ref T3 t3, ref T4 t4, in T5 t5, in T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.RRRRRIII-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RRRRRIII-8.html",
    "title": "Delegate RRRRRIII<T0, T1, T2, T3, T4, T5, T6, T7> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate RRRRRIII<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RRRRRIII<T0, T1, T2, T3, T4, T5, T6, T7>(ref T0 t0, ref T1 t1, ref T2 t2, ref T3 t3, ref T4 t4, in T5 t5, in T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.RRRRRR-6.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RRRRRR-6.html",
    "title": "Delegate RRRRRR<T0, T1, T2, T3, T4, T5> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate RRRRRR<T0, T1, T2, T3, T4, T5> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RRRRRR<T0, T1, T2, T3, T4, T5>(ref T0 t0, ref T1 t1, ref T2 t2, ref T3 t3, ref T4 t4, ref T5 t5); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 Type Parameters Name Description T0 T1 T2 T3 T4 T5"
  },
  "api/Unity.Entities.UniversalDelegates.RRRRRRI-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RRRRRRI-7.html",
    "title": "Delegate RRRRRRI<T0, T1, T2, T3, T4, T5, T6> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate RRRRRRI<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RRRRRRI<T0, T1, T2, T3, T4, T5, T6>(ref T0 t0, ref T1 t1, ref T2 t2, ref T3 t3, ref T4 t4, ref T5 t5, in T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.RRRRRRII-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RRRRRRII-8.html",
    "title": "Delegate RRRRRRII<T0, T1, T2, T3, T4, T5, T6, T7> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate RRRRRRII<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RRRRRRII<T0, T1, T2, T3, T4, T5, T6, T7>(ref T0 t0, ref T1 t1, ref T2 t2, ref T3 t3, ref T4 t4, ref T5 t5, in T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.RRRRRRR-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RRRRRRR-7.html",
    "title": "Delegate RRRRRRR<T0, T1, T2, T3, T4, T5, T6> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate RRRRRRR<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RRRRRRR<T0, T1, T2, T3, T4, T5, T6>(ref T0 t0, ref T1 t1, ref T2 t2, ref T3 t3, ref T4 t4, ref T5 t5, ref T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.RRRRRRRI-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RRRRRRRI-8.html",
    "title": "Delegate RRRRRRRI<T0, T1, T2, T3, T4, T5, T6, T7> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate RRRRRRRI<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RRRRRRRI<T0, T1, T2, T3, T4, T5, T6, T7>(ref T0 t0, ref T1 t1, ref T2 t2, ref T3 t3, ref T4 t4, ref T5 t5, ref T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.RRRRRRRR-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RRRRRRRR-8.html",
    "title": "Delegate RRRRRRRR<T0, T1, T2, T3, T4, T5, T6, T7> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate RRRRRRRR<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RRRRRRRR<T0, T1, T2, T3, T4, T5, T6, T7>(ref T0 t0, ref T1 t1, ref T2 t2, ref T3 t3, ref T4 t4, ref T5 t5, ref T6 t6, ref T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.V-1.html": {
    "href": "api/Unity.Entities.UniversalDelegates.V-1.html",
    "title": "Delegate V<T0> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate V<T0> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void V<T0>(T0 t0); Parameters Type Name Description T0 t0 Type Parameters Name Description T0"
  },
  "api/Unity.Entities.UniversalDelegates.VI-2.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VI-2.html",
    "title": "Delegate VI<T0, T1> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VI<T0, T1> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VI<T0, T1>(T0 t0, in T1 t1); Parameters Type Name Description T0 t0 T1 t1 Type Parameters Name Description T0 T1"
  },
  "api/Unity.Entities.UniversalDelegates.VII-3.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VII-3.html",
    "title": "Delegate VII<T0, T1, T2> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VII<T0, T1, T2> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VII<T0, T1, T2>(T0 t0, in T1 t1, in T2 t2); Parameters Type Name Description T0 t0 T1 t1 T2 t2 Type Parameters Name Description T0 T1 T2"
  },
  "api/Unity.Entities.UniversalDelegates.VIII-4.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VIII-4.html",
    "title": "Delegate VIII<T0, T1, T2, T3> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VIII<T0, T1, T2, T3> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VIII<T0, T1, T2, T3>(T0 t0, in T1 t1, in T2 t2, in T3 t3); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 Type Parameters Name Description T0 T1 T2 T3"
  },
  "api/Unity.Entities.UniversalDelegates.VIIII-5.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VIIII-5.html",
    "title": "Delegate VIIII<T0, T1, T2, T3, T4> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VIIII<T0, T1, T2, T3, T4> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VIIII<T0, T1, T2, T3, T4>(T0 t0, in T1 t1, in T2 t2, in T3 t3, in T4 t4); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 Type Parameters Name Description T0 T1 T2 T3 T4"
  },
  "api/Unity.Entities.UniversalDelegates.VIIIII-6.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VIIIII-6.html",
    "title": "Delegate VIIIII<T0, T1, T2, T3, T4, T5> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VIIIII<T0, T1, T2, T3, T4, T5> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VIIIII<T0, T1, T2, T3, T4, T5>(T0 t0, in T1 t1, in T2 t2, in T3 t3, in T4 t4, in T5 t5); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 Type Parameters Name Description T0 T1 T2 T3 T4 T5"
  },
  "api/Unity.Entities.UniversalDelegates.VIIIIII-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VIIIIII-7.html",
    "title": "Delegate VIIIIII<T0, T1, T2, T3, T4, T5, T6> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VIIIIII<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VIIIIII<T0, T1, T2, T3, T4, T5, T6>(T0 t0, in T1 t1, in T2 t2, in T3 t3, in T4 t4, in T5 t5, in T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.VIIIIIII-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VIIIIIII-8.html",
    "title": "Delegate VIIIIIII<T0, T1, T2, T3, T4, T5, T6, T7> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VIIIIIII<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VIIIIIII<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, in T1 t1, in T2 t2, in T3 t3, in T4 t4, in T5 t5, in T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VR-2.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VR-2.html",
    "title": "Delegate VR<T0, T1> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VR<T0, T1> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VR<T0, T1>(T0 t0, ref T1 t1); Parameters Type Name Description T0 t0 T1 t1 Type Parameters Name Description T0 T1"
  },
  "api/Unity.Entities.UniversalDelegates.VRI-3.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VRI-3.html",
    "title": "Delegate VRI<T0, T1, T2> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VRI<T0, T1, T2> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VRI<T0, T1, T2>(T0 t0, ref T1 t1, in T2 t2); Parameters Type Name Description T0 t0 T1 t1 T2 t2 Type Parameters Name Description T0 T1 T2"
  },
  "api/Unity.Entities.UniversalDelegates.VRII-4.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VRII-4.html",
    "title": "Delegate VRII<T0, T1, T2, T3> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VRII<T0, T1, T2, T3> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VRII<T0, T1, T2, T3>(T0 t0, ref T1 t1, in T2 t2, in T3 t3); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 Type Parameters Name Description T0 T1 T2 T3"
  },
  "api/Unity.Entities.UniversalDelegates.VRIII-5.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VRIII-5.html",
    "title": "Delegate VRIII<T0, T1, T2, T3, T4> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VRIII<T0, T1, T2, T3, T4> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VRIII<T0, T1, T2, T3, T4>(T0 t0, ref T1 t1, in T2 t2, in T3 t3, in T4 t4); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 Type Parameters Name Description T0 T1 T2 T3 T4"
  },
  "api/Unity.Entities.UniversalDelegates.VRIIII-6.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VRIIII-6.html",
    "title": "Delegate VRIIII<T0, T1, T2, T3, T4, T5> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VRIIII<T0, T1, T2, T3, T4, T5> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VRIIII<T0, T1, T2, T3, T4, T5>(T0 t0, ref T1 t1, in T2 t2, in T3 t3, in T4 t4, in T5 t5); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 Type Parameters Name Description T0 T1 T2 T3 T4 T5"
  },
  "api/Unity.Entities.UniversalDelegates.VRIIIII-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VRIIIII-7.html",
    "title": "Delegate VRIIIII<T0, T1, T2, T3, T4, T5, T6> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VRIIIII<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VRIIIII<T0, T1, T2, T3, T4, T5, T6>(T0 t0, ref T1 t1, in T2 t2, in T3 t3, in T4 t4, in T5 t5, in T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.VRIIIIII-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VRIIIIII-8.html",
    "title": "Delegate VRIIIIII<T0, T1, T2, T3, T4, T5, T6, T7> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VRIIIIII<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VRIIIIII<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, ref T1 t1, in T2 t2, in T3 t3, in T4 t4, in T5 t5, in T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VRR-3.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VRR-3.html",
    "title": "Delegate VRR<T0, T1, T2> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VRR<T0, T1, T2> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VRR<T0, T1, T2>(T0 t0, ref T1 t1, ref T2 t2); Parameters Type Name Description T0 t0 T1 t1 T2 t2 Type Parameters Name Description T0 T1 T2"
  },
  "api/Unity.Entities.UniversalDelegates.VRRI-4.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VRRI-4.html",
    "title": "Delegate VRRI<T0, T1, T2, T3> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VRRI<T0, T1, T2, T3> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VRRI<T0, T1, T2, T3>(T0 t0, ref T1 t1, ref T2 t2, in T3 t3); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 Type Parameters Name Description T0 T1 T2 T3"
  },
  "api/Unity.Entities.UniversalDelegates.VRRII-5.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VRRII-5.html",
    "title": "Delegate VRRII<T0, T1, T2, T3, T4> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VRRII<T0, T1, T2, T3, T4> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VRRII<T0, T1, T2, T3, T4>(T0 t0, ref T1 t1, ref T2 t2, in T3 t3, in T4 t4); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 Type Parameters Name Description T0 T1 T2 T3 T4"
  },
  "api/Unity.Entities.UniversalDelegates.VRRIII-6.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VRRIII-6.html",
    "title": "Delegate VRRIII<T0, T1, T2, T3, T4, T5> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VRRIII<T0, T1, T2, T3, T4, T5> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VRRIII<T0, T1, T2, T3, T4, T5>(T0 t0, ref T1 t1, ref T2 t2, in T3 t3, in T4 t4, in T5 t5); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 Type Parameters Name Description T0 T1 T2 T3 T4 T5"
  },
  "api/Unity.Entities.UniversalDelegates.VRRIIII-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VRRIIII-7.html",
    "title": "Delegate VRRIIII<T0, T1, T2, T3, T4, T5, T6> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VRRIIII<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VRRIIII<T0, T1, T2, T3, T4, T5, T6>(T0 t0, ref T1 t1, ref T2 t2, in T3 t3, in T4 t4, in T5 t5, in T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.VRRIIIII-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VRRIIIII-8.html",
    "title": "Delegate VRRIIIII<T0, T1, T2, T3, T4, T5, T6, T7> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VRRIIIII<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VRRIIIII<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, ref T1 t1, ref T2 t2, in T3 t3, in T4 t4, in T5 t5, in T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VRRR-4.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VRRR-4.html",
    "title": "Delegate VRRR<T0, T1, T2, T3> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VRRR<T0, T1, T2, T3> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VRRR<T0, T1, T2, T3>(T0 t0, ref T1 t1, ref T2 t2, ref T3 t3); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 Type Parameters Name Description T0 T1 T2 T3"
  },
  "api/Unity.Entities.UniversalDelegates.VRRRI-5.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VRRRI-5.html",
    "title": "Delegate VRRRI<T0, T1, T2, T3, T4> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VRRRI<T0, T1, T2, T3, T4> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VRRRI<T0, T1, T2, T3, T4>(T0 t0, ref T1 t1, ref T2 t2, ref T3 t3, in T4 t4); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 Type Parameters Name Description T0 T1 T2 T3 T4"
  },
  "api/Unity.Entities.UniversalDelegates.VRRRII-6.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VRRRII-6.html",
    "title": "Delegate VRRRII<T0, T1, T2, T3, T4, T5> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VRRRII<T0, T1, T2, T3, T4, T5> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VRRRII<T0, T1, T2, T3, T4, T5>(T0 t0, ref T1 t1, ref T2 t2, ref T3 t3, in T4 t4, in T5 t5); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 Type Parameters Name Description T0 T1 T2 T3 T4 T5"
  },
  "api/Unity.Entities.UniversalDelegates.VRRRIII-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VRRRIII-7.html",
    "title": "Delegate VRRRIII<T0, T1, T2, T3, T4, T5, T6> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VRRRIII<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VRRRIII<T0, T1, T2, T3, T4, T5, T6>(T0 t0, ref T1 t1, ref T2 t2, ref T3 t3, in T4 t4, in T5 t5, in T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.VRRRIIII-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VRRRIIII-8.html",
    "title": "Delegate VRRRIIII<T0, T1, T2, T3, T4, T5, T6, T7> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VRRRIIII<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VRRRIIII<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, ref T1 t1, ref T2 t2, ref T3 t3, in T4 t4, in T5 t5, in T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VRRRR-5.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VRRRR-5.html",
    "title": "Delegate VRRRR<T0, T1, T2, T3, T4> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VRRRR<T0, T1, T2, T3, T4> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VRRRR<T0, T1, T2, T3, T4>(T0 t0, ref T1 t1, ref T2 t2, ref T3 t3, ref T4 t4); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 Type Parameters Name Description T0 T1 T2 T3 T4"
  },
  "api/Unity.Entities.UniversalDelegates.VRRRRI-6.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VRRRRI-6.html",
    "title": "Delegate VRRRRI<T0, T1, T2, T3, T4, T5> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VRRRRI<T0, T1, T2, T3, T4, T5> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VRRRRI<T0, T1, T2, T3, T4, T5>(T0 t0, ref T1 t1, ref T2 t2, ref T3 t3, ref T4 t4, in T5 t5); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 Type Parameters Name Description T0 T1 T2 T3 T4 T5"
  },
  "api/Unity.Entities.UniversalDelegates.VRRRRII-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VRRRRII-7.html",
    "title": "Delegate VRRRRII<T0, T1, T2, T3, T4, T5, T6> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VRRRRII<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VRRRRII<T0, T1, T2, T3, T4, T5, T6>(T0 t0, ref T1 t1, ref T2 t2, ref T3 t3, ref T4 t4, in T5 t5, in T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.VRRRRIII-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VRRRRIII-8.html",
    "title": "Delegate VRRRRIII<T0, T1, T2, T3, T4, T5, T6, T7> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VRRRRIII<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VRRRRIII<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, ref T1 t1, ref T2 t2, ref T3 t3, ref T4 t4, in T5 t5, in T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VRRRRR-6.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VRRRRR-6.html",
    "title": "Delegate VRRRRR<T0, T1, T2, T3, T4, T5> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VRRRRR<T0, T1, T2, T3, T4, T5> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VRRRRR<T0, T1, T2, T3, T4, T5>(T0 t0, ref T1 t1, ref T2 t2, ref T3 t3, ref T4 t4, ref T5 t5); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 Type Parameters Name Description T0 T1 T2 T3 T4 T5"
  },
  "api/Unity.Entities.UniversalDelegates.VRRRRRI-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VRRRRRI-7.html",
    "title": "Delegate VRRRRRI<T0, T1, T2, T3, T4, T5, T6> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VRRRRRI<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VRRRRRI<T0, T1, T2, T3, T4, T5, T6>(T0 t0, ref T1 t1, ref T2 t2, ref T3 t3, ref T4 t4, ref T5 t5, in T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.VRRRRRII-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VRRRRRII-8.html",
    "title": "Delegate VRRRRRII<T0, T1, T2, T3, T4, T5, T6, T7> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VRRRRRII<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VRRRRRII<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, ref T1 t1, ref T2 t2, ref T3 t3, ref T4 t4, ref T5 t5, in T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VRRRRRR-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VRRRRRR-7.html",
    "title": "Delegate VRRRRRR<T0, T1, T2, T3, T4, T5, T6> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VRRRRRR<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VRRRRRR<T0, T1, T2, T3, T4, T5, T6>(T0 t0, ref T1 t1, ref T2 t2, ref T3 t3, ref T4 t4, ref T5 t5, ref T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.VRRRRRRI-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VRRRRRRI-8.html",
    "title": "Delegate VRRRRRRI<T0, T1, T2, T3, T4, T5, T6, T7> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VRRRRRRI<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VRRRRRRI<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, ref T1 t1, ref T2 t2, ref T3 t3, ref T4 t4, ref T5 t5, ref T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VRRRRRRR-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VRRRRRRR-8.html",
    "title": "Delegate VRRRRRRR<T0, T1, T2, T3, T4, T5, T6, T7> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VRRRRRRR<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VRRRRRRR<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, ref T1 t1, ref T2 t2, ref T3 t3, ref T4 t4, ref T5 t5, ref T6 t6, ref T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VV-2.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VV-2.html",
    "title": "Delegate VV<T0, T1> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VV<T0, T1> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VV<T0, T1>(T0 t0, T1 t1); Parameters Type Name Description T0 t0 T1 t1 Type Parameters Name Description T0 T1"
  },
  "api/Unity.Entities.UniversalDelegates.VVI-3.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVI-3.html",
    "title": "Delegate VVI<T0, T1, T2> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VVI<T0, T1, T2> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVI<T0, T1, T2>(T0 t0, T1 t1, in T2 t2); Parameters Type Name Description T0 t0 T1 t1 T2 t2 Type Parameters Name Description T0 T1 T2"
  },
  "api/Unity.Entities.UniversalDelegates.VVII-4.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVII-4.html",
    "title": "Delegate VVII<T0, T1, T2, T3> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VVII<T0, T1, T2, T3> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVII<T0, T1, T2, T3>(T0 t0, T1 t1, in T2 t2, in T3 t3); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 Type Parameters Name Description T0 T1 T2 T3"
  },
  "api/Unity.Entities.UniversalDelegates.VVIII-5.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVIII-5.html",
    "title": "Delegate VVIII<T0, T1, T2, T3, T4> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VVIII<T0, T1, T2, T3, T4> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVIII<T0, T1, T2, T3, T4>(T0 t0, T1 t1, in T2 t2, in T3 t3, in T4 t4); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 Type Parameters Name Description T0 T1 T2 T3 T4"
  },
  "api/Unity.Entities.UniversalDelegates.VVIIII-6.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVIIII-6.html",
    "title": "Delegate VVIIII<T0, T1, T2, T3, T4, T5> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VVIIII<T0, T1, T2, T3, T4, T5> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVIIII<T0, T1, T2, T3, T4, T5>(T0 t0, T1 t1, in T2 t2, in T3 t3, in T4 t4, in T5 t5); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 Type Parameters Name Description T0 T1 T2 T3 T4 T5"
  },
  "api/Unity.Entities.UniversalDelegates.VVIIIII-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVIIIII-7.html",
    "title": "Delegate VVIIIII<T0, T1, T2, T3, T4, T5, T6> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VVIIIII<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVIIIII<T0, T1, T2, T3, T4, T5, T6>(T0 t0, T1 t1, in T2 t2, in T3 t3, in T4 t4, in T5 t5, in T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.VVIIIIII-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVIIIIII-8.html",
    "title": "Delegate VVIIIIII<T0, T1, T2, T3, T4, T5, T6, T7> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VVIIIIII<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVIIIIII<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, T1 t1, in T2 t2, in T3 t3, in T4 t4, in T5 t5, in T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VVR-3.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVR-3.html",
    "title": "Delegate VVR<T0, T1, T2> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VVR<T0, T1, T2> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVR<T0, T1, T2>(T0 t0, T1 t1, ref T2 t2); Parameters Type Name Description T0 t0 T1 t1 T2 t2 Type Parameters Name Description T0 T1 T2"
  },
  "api/Unity.Entities.UniversalDelegates.VVRI-4.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVRI-4.html",
    "title": "Delegate VVRI<T0, T1, T2, T3> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VVRI<T0, T1, T2, T3> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVRI<T0, T1, T2, T3>(T0 t0, T1 t1, ref T2 t2, in T3 t3); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 Type Parameters Name Description T0 T1 T2 T3"
  },
  "api/Unity.Entities.UniversalDelegates.VVRII-5.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVRII-5.html",
    "title": "Delegate VVRII<T0, T1, T2, T3, T4> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VVRII<T0, T1, T2, T3, T4> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVRII<T0, T1, T2, T3, T4>(T0 t0, T1 t1, ref T2 t2, in T3 t3, in T4 t4); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 Type Parameters Name Description T0 T1 T2 T3 T4"
  },
  "api/Unity.Entities.UniversalDelegates.VVRIII-6.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVRIII-6.html",
    "title": "Delegate VVRIII<T0, T1, T2, T3, T4, T5> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VVRIII<T0, T1, T2, T3, T4, T5> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVRIII<T0, T1, T2, T3, T4, T5>(T0 t0, T1 t1, ref T2 t2, in T3 t3, in T4 t4, in T5 t5); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 Type Parameters Name Description T0 T1 T2 T3 T4 T5"
  },
  "api/Unity.Entities.UniversalDelegates.VVRIIII-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVRIIII-7.html",
    "title": "Delegate VVRIIII<T0, T1, T2, T3, T4, T5, T6> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VVRIIII<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVRIIII<T0, T1, T2, T3, T4, T5, T6>(T0 t0, T1 t1, ref T2 t2, in T3 t3, in T4 t4, in T5 t5, in T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.VVRIIIII-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVRIIIII-8.html",
    "title": "Delegate VVRIIIII<T0, T1, T2, T3, T4, T5, T6, T7> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VVRIIIII<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVRIIIII<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, T1 t1, ref T2 t2, in T3 t3, in T4 t4, in T5 t5, in T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VVRR-4.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVRR-4.html",
    "title": "Delegate VVRR<T0, T1, T2, T3> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VVRR<T0, T1, T2, T3> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVRR<T0, T1, T2, T3>(T0 t0, T1 t1, ref T2 t2, ref T3 t3); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 Type Parameters Name Description T0 T1 T2 T3"
  },
  "api/Unity.Entities.UniversalDelegates.VVRRI-5.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVRRI-5.html",
    "title": "Delegate VVRRI<T0, T1, T2, T3, T4> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VVRRI<T0, T1, T2, T3, T4> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVRRI<T0, T1, T2, T3, T4>(T0 t0, T1 t1, ref T2 t2, ref T3 t3, in T4 t4); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 Type Parameters Name Description T0 T1 T2 T3 T4"
  },
  "api/Unity.Entities.UniversalDelegates.VVRRII-6.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVRRII-6.html",
    "title": "Delegate VVRRII<T0, T1, T2, T3, T4, T5> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VVRRII<T0, T1, T2, T3, T4, T5> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVRRII<T0, T1, T2, T3, T4, T5>(T0 t0, T1 t1, ref T2 t2, ref T3 t3, in T4 t4, in T5 t5); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 Type Parameters Name Description T0 T1 T2 T3 T4 T5"
  },
  "api/Unity.Entities.UniversalDelegates.VVRRIII-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVRRIII-7.html",
    "title": "Delegate VVRRIII<T0, T1, T2, T3, T4, T5, T6> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VVRRIII<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVRRIII<T0, T1, T2, T3, T4, T5, T6>(T0 t0, T1 t1, ref T2 t2, ref T3 t3, in T4 t4, in T5 t5, in T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.VVRRIIII-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVRRIIII-8.html",
    "title": "Delegate VVRRIIII<T0, T1, T2, T3, T4, T5, T6, T7> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VVRRIIII<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVRRIIII<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, T1 t1, ref T2 t2, ref T3 t3, in T4 t4, in T5 t5, in T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VVRRR-5.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVRRR-5.html",
    "title": "Delegate VVRRR<T0, T1, T2, T3, T4> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VVRRR<T0, T1, T2, T3, T4> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVRRR<T0, T1, T2, T3, T4>(T0 t0, T1 t1, ref T2 t2, ref T3 t3, ref T4 t4); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 Type Parameters Name Description T0 T1 T2 T3 T4"
  },
  "api/Unity.Entities.UniversalDelegates.VVRRRI-6.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVRRRI-6.html",
    "title": "Delegate VVRRRI<T0, T1, T2, T3, T4, T5> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VVRRRI<T0, T1, T2, T3, T4, T5> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVRRRI<T0, T1, T2, T3, T4, T5>(T0 t0, T1 t1, ref T2 t2, ref T3 t3, ref T4 t4, in T5 t5); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 Type Parameters Name Description T0 T1 T2 T3 T4 T5"
  },
  "api/Unity.Entities.UniversalDelegates.VVRRRII-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVRRRII-7.html",
    "title": "Delegate VVRRRII<T0, T1, T2, T3, T4, T5, T6> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VVRRRII<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVRRRII<T0, T1, T2, T3, T4, T5, T6>(T0 t0, T1 t1, ref T2 t2, ref T3 t3, ref T4 t4, in T5 t5, in T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.VVRRRIII-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVRRRIII-8.html",
    "title": "Delegate VVRRRIII<T0, T1, T2, T3, T4, T5, T6, T7> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VVRRRIII<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVRRRIII<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, T1 t1, ref T2 t2, ref T3 t3, ref T4 t4, in T5 t5, in T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VVRRRR-6.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVRRRR-6.html",
    "title": "Delegate VVRRRR<T0, T1, T2, T3, T4, T5> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VVRRRR<T0, T1, T2, T3, T4, T5> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVRRRR<T0, T1, T2, T3, T4, T5>(T0 t0, T1 t1, ref T2 t2, ref T3 t3, ref T4 t4, ref T5 t5); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 Type Parameters Name Description T0 T1 T2 T3 T4 T5"
  },
  "api/Unity.Entities.UniversalDelegates.VVRRRRI-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVRRRRI-7.html",
    "title": "Delegate VVRRRRI<T0, T1, T2, T3, T4, T5, T6> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VVRRRRI<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVRRRRI<T0, T1, T2, T3, T4, T5, T6>(T0 t0, T1 t1, ref T2 t2, ref T3 t3, ref T4 t4, ref T5 t5, in T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.VVRRRRII-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVRRRRII-8.html",
    "title": "Delegate VVRRRRII<T0, T1, T2, T3, T4, T5, T6, T7> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VVRRRRII<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVRRRRII<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, T1 t1, ref T2 t2, ref T3 t3, ref T4 t4, ref T5 t5, in T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VVRRRRR-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVRRRRR-7.html",
    "title": "Delegate VVRRRRR<T0, T1, T2, T3, T4, T5, T6> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VVRRRRR<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVRRRRR<T0, T1, T2, T3, T4, T5, T6>(T0 t0, T1 t1, ref T2 t2, ref T3 t3, ref T4 t4, ref T5 t5, ref T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.VVRRRRRI-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVRRRRRI-8.html",
    "title": "Delegate VVRRRRRI<T0, T1, T2, T3, T4, T5, T6, T7> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VVRRRRRI<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVRRRRRI<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, T1 t1, ref T2 t2, ref T3 t3, ref T4 t4, ref T5 t5, ref T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VVRRRRRR-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVRRRRRR-8.html",
    "title": "Delegate VVRRRRRR<T0, T1, T2, T3, T4, T5, T6, T7> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VVRRRRRR<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVRRRRRR<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, T1 t1, ref T2 t2, ref T3 t3, ref T4 t4, ref T5 t5, ref T6 t6, ref T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VVV-3.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVV-3.html",
    "title": "Delegate VVV<T0, T1, T2> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VVV<T0, T1, T2> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVV<T0, T1, T2>(T0 t0, T1 t1, T2 t2); Parameters Type Name Description T0 t0 T1 t1 T2 t2 Type Parameters Name Description T0 T1 T2"
  },
  "api/Unity.Entities.UniversalDelegates.VVVI-4.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVI-4.html",
    "title": "Delegate VVVI<T0, T1, T2, T3> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VVVI<T0, T1, T2, T3> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVI<T0, T1, T2, T3>(T0 t0, T1 t1, T2 t2, in T3 t3); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 Type Parameters Name Description T0 T1 T2 T3"
  },
  "api/Unity.Entities.UniversalDelegates.VVVII-5.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVII-5.html",
    "title": "Delegate VVVII<T0, T1, T2, T3, T4> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VVVII<T0, T1, T2, T3, T4> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVII<T0, T1, T2, T3, T4>(T0 t0, T1 t1, T2 t2, in T3 t3, in T4 t4); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 Type Parameters Name Description T0 T1 T2 T3 T4"
  },
  "api/Unity.Entities.UniversalDelegates.VVVIII-6.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVIII-6.html",
    "title": "Delegate VVVIII<T0, T1, T2, T3, T4, T5> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VVVIII<T0, T1, T2, T3, T4, T5> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVIII<T0, T1, T2, T3, T4, T5>(T0 t0, T1 t1, T2 t2, in T3 t3, in T4 t4, in T5 t5); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 Type Parameters Name Description T0 T1 T2 T3 T4 T5"
  },
  "api/Unity.Entities.UniversalDelegates.VVVIIII-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVIIII-7.html",
    "title": "Delegate VVVIIII<T0, T1, T2, T3, T4, T5, T6> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VVVIIII<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVIIII<T0, T1, T2, T3, T4, T5, T6>(T0 t0, T1 t1, T2 t2, in T3 t3, in T4 t4, in T5 t5, in T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.VVVIIIII-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVIIIII-8.html",
    "title": "Delegate VVVIIIII<T0, T1, T2, T3, T4, T5, T6, T7> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VVVIIIII<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVIIIII<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, T1 t1, T2 t2, in T3 t3, in T4 t4, in T5 t5, in T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VVVR-4.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVR-4.html",
    "title": "Delegate VVVR<T0, T1, T2, T3> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VVVR<T0, T1, T2, T3> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVR<T0, T1, T2, T3>(T0 t0, T1 t1, T2 t2, ref T3 t3); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 Type Parameters Name Description T0 T1 T2 T3"
  },
  "api/Unity.Entities.UniversalDelegates.VVVRI-5.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVRI-5.html",
    "title": "Delegate VVVRI<T0, T1, T2, T3, T4> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VVVRI<T0, T1, T2, T3, T4> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVRI<T0, T1, T2, T3, T4>(T0 t0, T1 t1, T2 t2, ref T3 t3, in T4 t4); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 Type Parameters Name Description T0 T1 T2 T3 T4"
  },
  "api/Unity.Entities.UniversalDelegates.VVVRII-6.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVRII-6.html",
    "title": "Delegate VVVRII<T0, T1, T2, T3, T4, T5> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VVVRII<T0, T1, T2, T3, T4, T5> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVRII<T0, T1, T2, T3, T4, T5>(T0 t0, T1 t1, T2 t2, ref T3 t3, in T4 t4, in T5 t5); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 Type Parameters Name Description T0 T1 T2 T3 T4 T5"
  },
  "api/Unity.Entities.UniversalDelegates.VVVRIII-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVRIII-7.html",
    "title": "Delegate VVVRIII<T0, T1, T2, T3, T4, T5, T6> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VVVRIII<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVRIII<T0, T1, T2, T3, T4, T5, T6>(T0 t0, T1 t1, T2 t2, ref T3 t3, in T4 t4, in T5 t5, in T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.VVVRIIII-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVRIIII-8.html",
    "title": "Delegate VVVRIIII<T0, T1, T2, T3, T4, T5, T6, T7> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VVVRIIII<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVRIIII<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, T1 t1, T2 t2, ref T3 t3, in T4 t4, in T5 t5, in T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VVVRR-5.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVRR-5.html",
    "title": "Delegate VVVRR<T0, T1, T2, T3, T4> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VVVRR<T0, T1, T2, T3, T4> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVRR<T0, T1, T2, T3, T4>(T0 t0, T1 t1, T2 t2, ref T3 t3, ref T4 t4); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 Type Parameters Name Description T0 T1 T2 T3 T4"
  },
  "api/Unity.Entities.UniversalDelegates.VVVRRI-6.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVRRI-6.html",
    "title": "Delegate VVVRRI<T0, T1, T2, T3, T4, T5> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VVVRRI<T0, T1, T2, T3, T4, T5> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVRRI<T0, T1, T2, T3, T4, T5>(T0 t0, T1 t1, T2 t2, ref T3 t3, ref T4 t4, in T5 t5); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 Type Parameters Name Description T0 T1 T2 T3 T4 T5"
  },
  "api/Unity.Entities.UniversalDelegates.VVVRRII-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVRRII-7.html",
    "title": "Delegate VVVRRII<T0, T1, T2, T3, T4, T5, T6> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VVVRRII<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVRRII<T0, T1, T2, T3, T4, T5, T6>(T0 t0, T1 t1, T2 t2, ref T3 t3, ref T4 t4, in T5 t5, in T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.VVVRRIII-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVRRIII-8.html",
    "title": "Delegate VVVRRIII<T0, T1, T2, T3, T4, T5, T6, T7> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VVVRRIII<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVRRIII<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, T1 t1, T2 t2, ref T3 t3, ref T4 t4, in T5 t5, in T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VVVRRR-6.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVRRR-6.html",
    "title": "Delegate VVVRRR<T0, T1, T2, T3, T4, T5> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VVVRRR<T0, T1, T2, T3, T4, T5> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVRRR<T0, T1, T2, T3, T4, T5>(T0 t0, T1 t1, T2 t2, ref T3 t3, ref T4 t4, ref T5 t5); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 Type Parameters Name Description T0 T1 T2 T3 T4 T5"
  },
  "api/Unity.Entities.UniversalDelegates.VVVRRRI-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVRRRI-7.html",
    "title": "Delegate VVVRRRI<T0, T1, T2, T3, T4, T5, T6> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VVVRRRI<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVRRRI<T0, T1, T2, T3, T4, T5, T6>(T0 t0, T1 t1, T2 t2, ref T3 t3, ref T4 t4, ref T5 t5, in T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.VVVRRRII-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVRRRII-8.html",
    "title": "Delegate VVVRRRII<T0, T1, T2, T3, T4, T5, T6, T7> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VVVRRRII<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVRRRII<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, T1 t1, T2 t2, ref T3 t3, ref T4 t4, ref T5 t5, in T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VVVRRRR-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVRRRR-7.html",
    "title": "Delegate VVVRRRR<T0, T1, T2, T3, T4, T5, T6> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VVVRRRR<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVRRRR<T0, T1, T2, T3, T4, T5, T6>(T0 t0, T1 t1, T2 t2, ref T3 t3, ref T4 t4, ref T5 t5, ref T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.VVVRRRRI-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVRRRRI-8.html",
    "title": "Delegate VVVRRRRI<T0, T1, T2, T3, T4, T5, T6, T7> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VVVRRRRI<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVRRRRI<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, T1 t1, T2 t2, ref T3 t3, ref T4 t4, ref T5 t5, ref T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VVVRRRRR-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVRRRRR-8.html",
    "title": "Delegate VVVRRRRR<T0, T1, T2, T3, T4, T5, T6, T7> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VVVRRRRR<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVRRRRR<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, T1 t1, T2 t2, ref T3 t3, ref T4 t4, ref T5 t5, ref T6 t6, ref T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VVVV-4.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVV-4.html",
    "title": "Delegate VVVV<T0, T1, T2, T3> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VVVV<T0, T1, T2, T3> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVV<T0, T1, T2, T3>(T0 t0, T1 t1, T2 t2, T3 t3); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 Type Parameters Name Description T0 T1 T2 T3"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVI-5.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVI-5.html",
    "title": "Delegate VVVVI<T0, T1, T2, T3, T4> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VVVVI<T0, T1, T2, T3, T4> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVI<T0, T1, T2, T3, T4>(T0 t0, T1 t1, T2 t2, T3 t3, in T4 t4); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 Type Parameters Name Description T0 T1 T2 T3 T4"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVII-6.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVII-6.html",
    "title": "Delegate VVVVII<T0, T1, T2, T3, T4, T5> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VVVVII<T0, T1, T2, T3, T4, T5> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVII<T0, T1, T2, T3, T4, T5>(T0 t0, T1 t1, T2 t2, T3 t3, in T4 t4, in T5 t5); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 Type Parameters Name Description T0 T1 T2 T3 T4 T5"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVIII-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVIII-7.html",
    "title": "Delegate VVVVIII<T0, T1, T2, T3, T4, T5, T6> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VVVVIII<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVIII<T0, T1, T2, T3, T4, T5, T6>(T0 t0, T1 t1, T2 t2, T3 t3, in T4 t4, in T5 t5, in T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVIIII-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVIIII-8.html",
    "title": "Delegate VVVVIIII<T0, T1, T2, T3, T4, T5, T6, T7> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VVVVIIII<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVIIII<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, T1 t1, T2 t2, T3 t3, in T4 t4, in T5 t5, in T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVR-5.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVR-5.html",
    "title": "Delegate VVVVR<T0, T1, T2, T3, T4> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VVVVR<T0, T1, T2, T3, T4> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVR<T0, T1, T2, T3, T4>(T0 t0, T1 t1, T2 t2, T3 t3, ref T4 t4); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 Type Parameters Name Description T0 T1 T2 T3 T4"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVRI-6.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVRI-6.html",
    "title": "Delegate VVVVRI<T0, T1, T2, T3, T4, T5> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VVVVRI<T0, T1, T2, T3, T4, T5> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVRI<T0, T1, T2, T3, T4, T5>(T0 t0, T1 t1, T2 t2, T3 t3, ref T4 t4, in T5 t5); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 Type Parameters Name Description T0 T1 T2 T3 T4 T5"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVRII-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVRII-7.html",
    "title": "Delegate VVVVRII<T0, T1, T2, T3, T4, T5, T6> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VVVVRII<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVRII<T0, T1, T2, T3, T4, T5, T6>(T0 t0, T1 t1, T2 t2, T3 t3, ref T4 t4, in T5 t5, in T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVRIII-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVRIII-8.html",
    "title": "Delegate VVVVRIII<T0, T1, T2, T3, T4, T5, T6, T7> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VVVVRIII<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVRIII<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, T1 t1, T2 t2, T3 t3, ref T4 t4, in T5 t5, in T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVRR-6.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVRR-6.html",
    "title": "Delegate VVVVRR<T0, T1, T2, T3, T4, T5> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VVVVRR<T0, T1, T2, T3, T4, T5> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVRR<T0, T1, T2, T3, T4, T5>(T0 t0, T1 t1, T2 t2, T3 t3, ref T4 t4, ref T5 t5); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 Type Parameters Name Description T0 T1 T2 T3 T4 T5"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVRRI-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVRRI-7.html",
    "title": "Delegate VVVVRRI<T0, T1, T2, T3, T4, T5, T6> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VVVVRRI<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVRRI<T0, T1, T2, T3, T4, T5, T6>(T0 t0, T1 t1, T2 t2, T3 t3, ref T4 t4, ref T5 t5, in T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVRRII-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVRRII-8.html",
    "title": "Delegate VVVVRRII<T0, T1, T2, T3, T4, T5, T6, T7> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VVVVRRII<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVRRII<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, T1 t1, T2 t2, T3 t3, ref T4 t4, ref T5 t5, in T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVRRR-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVRRR-7.html",
    "title": "Delegate VVVVRRR<T0, T1, T2, T3, T4, T5, T6> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VVVVRRR<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVRRR<T0, T1, T2, T3, T4, T5, T6>(T0 t0, T1 t1, T2 t2, T3 t3, ref T4 t4, ref T5 t5, ref T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVRRRI-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVRRRI-8.html",
    "title": "Delegate VVVVRRRI<T0, T1, T2, T3, T4, T5, T6, T7> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VVVVRRRI<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVRRRI<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, T1 t1, T2 t2, T3 t3, ref T4 t4, ref T5 t5, ref T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVRRRR-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVRRRR-8.html",
    "title": "Delegate VVVVRRRR<T0, T1, T2, T3, T4, T5, T6, T7> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VVVVRRRR<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVRRRR<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, T1 t1, T2 t2, T3 t3, ref T4 t4, ref T5 t5, ref T6 t6, ref T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVV-5.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVV-5.html",
    "title": "Delegate VVVVV<T0, T1, T2, T3, T4> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VVVVV<T0, T1, T2, T3, T4> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVV<T0, T1, T2, T3, T4>(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 Type Parameters Name Description T0 T1 T2 T3 T4"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVVI-6.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVVI-6.html",
    "title": "Delegate VVVVVI<T0, T1, T2, T3, T4, T5> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VVVVVI<T0, T1, T2, T3, T4, T5> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVVI<T0, T1, T2, T3, T4, T5>(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, in T5 t5); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 Type Parameters Name Description T0 T1 T2 T3 T4 T5"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVVII-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVVII-7.html",
    "title": "Delegate VVVVVII<T0, T1, T2, T3, T4, T5, T6> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VVVVVII<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVVII<T0, T1, T2, T3, T4, T5, T6>(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, in T5 t5, in T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVVIII-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVVIII-8.html",
    "title": "Delegate VVVVVIII<T0, T1, T2, T3, T4, T5, T6, T7> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VVVVVIII<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVVIII<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, in T5 t5, in T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVVR-6.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVVR-6.html",
    "title": "Delegate VVVVVR<T0, T1, T2, T3, T4, T5> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VVVVVR<T0, T1, T2, T3, T4, T5> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVVR<T0, T1, T2, T3, T4, T5>(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, ref T5 t5); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 Type Parameters Name Description T0 T1 T2 T3 T4 T5"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVVRI-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVVRI-7.html",
    "title": "Delegate VVVVVRI<T0, T1, T2, T3, T4, T5, T6> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VVVVVRI<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVVRI<T0, T1, T2, T3, T4, T5, T6>(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, ref T5 t5, in T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVVRII-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVVRII-8.html",
    "title": "Delegate VVVVVRII<T0, T1, T2, T3, T4, T5, T6, T7> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VVVVVRII<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVVRII<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, ref T5 t5, in T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVVRR-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVVRR-7.html",
    "title": "Delegate VVVVVRR<T0, T1, T2, T3, T4, T5, T6> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VVVVVRR<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVVRR<T0, T1, T2, T3, T4, T5, T6>(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, ref T5 t5, ref T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVVRRI-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVVRRI-8.html",
    "title": "Delegate VVVVVRRI<T0, T1, T2, T3, T4, T5, T6, T7> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VVVVVRRI<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVVRRI<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, ref T5 t5, ref T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVVRRR-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVVRRR-8.html",
    "title": "Delegate VVVVVRRR<T0, T1, T2, T3, T4, T5, T6, T7> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VVVVVRRR<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVVRRR<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, ref T5 t5, ref T6 t6, ref T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVVV-6.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVVV-6.html",
    "title": "Delegate VVVVVV<T0, T1, T2, T3, T4, T5> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VVVVVV<T0, T1, T2, T3, T4, T5> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVVV<T0, T1, T2, T3, T4, T5>(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 Type Parameters Name Description T0 T1 T2 T3 T4 T5"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVVVI-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVVVI-7.html",
    "title": "Delegate VVVVVVI<T0, T1, T2, T3, T4, T5, T6> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VVVVVVI<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVVVI<T0, T1, T2, T3, T4, T5, T6>(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, in T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVVVII-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVVVII-8.html",
    "title": "Delegate VVVVVVII<T0, T1, T2, T3, T4, T5, T6, T7> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VVVVVVII<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVVVII<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, in T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVVVR-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVVVR-7.html",
    "title": "Delegate VVVVVVR<T0, T1, T2, T3, T4, T5, T6> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VVVVVVR<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVVVR<T0, T1, T2, T3, T4, T5, T6>(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, ref T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVVVRI-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVVVRI-8.html",
    "title": "Delegate VVVVVVRI<T0, T1, T2, T3, T4, T5, T6, T7> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VVVVVVRI<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVVVRI<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, ref T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVVVRR-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVVVRR-8.html",
    "title": "Delegate VVVVVVRR<T0, T1, T2, T3, T4, T5, T6, T7> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VVVVVVRR<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVVVRR<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, ref T6 t6, ref T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVVVV-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVVVV-7.html",
    "title": "Delegate VVVVVVV<T0, T1, T2, T3, T4, T5, T6> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VVVVVVV<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVVVV<T0, T1, T2, T3, T4, T5, T6>(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVVVVI-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVVVVI-8.html",
    "title": "Delegate VVVVVVVI<T0, T1, T2, T3, T4, T5, T6, T7> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VVVVVVVI<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVVVVI<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVVVVR-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVVVVR-8.html",
    "title": "Delegate VVVVVVVR<T0, T1, T2, T3, T4, T5, T6, T7> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VVVVVVVR<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVVVVR<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, T6 t6, ref T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVVVVV-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVVVVV-8.html",
    "title": "Delegate VVVVVVVV<T0, T1, T2, T3, T4, T5, T6, T7> | Entities | 0.17.0-preview.18",
    "keywords": "Delegate VVVVVVVV<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVVVVV<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, T6 t6, T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UpdateAfterAttribute.-ctor.html": {
    "href": "api/Unity.Entities.UpdateAfterAttribute.-ctor.html",
    "title": "Constructor UpdateAfterAttribute | Entities | 0.17.0-preview.18",
    "keywords": "Constructor UpdateAfterAttribute UpdateAfterAttribute(Type) Declaration public UpdateAfterAttribute(Type systemType) Parameters Type Name Description Type systemType"
  },
  "api/Unity.Entities.UpdateAfterAttribute.html": {
    "href": "api/Unity.Entities.UpdateAfterAttribute.html",
    "title": "Class UpdateAfterAttribute | Entities | 0.17.0-preview.18",
    "keywords": "Class UpdateAfterAttribute Inheritance Object Attribute UpdateAfterAttribute Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct, AllowMultiple = true)] public class UpdateAfterAttribute : Attribute, _Attribute Constructors Name Description UpdateAfterAttribute(Type) Properties Name Description SystemType"
  },
  "api/Unity.Entities.UpdateAfterAttribute.SystemType.html": {
    "href": "api/Unity.Entities.UpdateAfterAttribute.SystemType.html",
    "title": "Property SystemType | Entities | 0.17.0-preview.18",
    "keywords": "Property SystemType SystemType Declaration public Type SystemType { get; } Property Value Type Description Type"
  },
  "api/Unity.Entities.UpdateBeforeAttribute.-ctor.html": {
    "href": "api/Unity.Entities.UpdateBeforeAttribute.-ctor.html",
    "title": "Constructor UpdateBeforeAttribute | Entities | 0.17.0-preview.18",
    "keywords": "Constructor UpdateBeforeAttribute UpdateBeforeAttribute(Type) Declaration public UpdateBeforeAttribute(Type systemType) Parameters Type Name Description Type systemType"
  },
  "api/Unity.Entities.UpdateBeforeAttribute.html": {
    "href": "api/Unity.Entities.UpdateBeforeAttribute.html",
    "title": "Class UpdateBeforeAttribute | Entities | 0.17.0-preview.18",
    "keywords": "Class UpdateBeforeAttribute Inheritance Object Attribute UpdateBeforeAttribute Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct, AllowMultiple = true)] public class UpdateBeforeAttribute : Attribute, _Attribute Constructors Name Description UpdateBeforeAttribute(Type) Properties Name Description SystemType"
  },
  "api/Unity.Entities.UpdateBeforeAttribute.SystemType.html": {
    "href": "api/Unity.Entities.UpdateBeforeAttribute.SystemType.html",
    "title": "Property SystemType | Entities | 0.17.0-preview.18",
    "keywords": "Property SystemType SystemType Declaration public Type SystemType { get; } Property Value Type Description Type"
  },
  "api/Unity.Entities.UpdateInGroupAttribute.-ctor.html": {
    "href": "api/Unity.Entities.UpdateInGroupAttribute.-ctor.html",
    "title": "Constructor UpdateInGroupAttribute | Entities | 0.17.0-preview.18",
    "keywords": "Constructor UpdateInGroupAttribute UpdateInGroupAttribute(Type) Declaration public UpdateInGroupAttribute(Type groupType) Parameters Type Name Description Type groupType"
  },
  "api/Unity.Entities.UpdateInGroupAttribute.GroupType.html": {
    "href": "api/Unity.Entities.UpdateInGroupAttribute.GroupType.html",
    "title": "Property GroupType | Entities | 0.17.0-preview.18",
    "keywords": "Property GroupType GroupType Declaration public Type GroupType { get; } Property Value Type Description Type"
  },
  "api/Unity.Entities.UpdateInGroupAttribute.html": {
    "href": "api/Unity.Entities.UpdateInGroupAttribute.html",
    "title": "Class UpdateInGroupAttribute | Entities | 0.17.0-preview.18",
    "keywords": "Class UpdateInGroupAttribute The specified Type must be a ComponentSystemGroup. Updating in a group means this system will be automatically updated by the specified ComponentSystemGroup when the group is updated. The system may order itself relative to other systems in the group with UpdateBefore and UpdateAfter. This ordering takes effect when the system group is sorted. If the optional OrderFirst parameter is set to true, this system will act as if it has an implicit [UpdateBefore] targeting all other systems in the group that do not have OrderFirst=true, but it may still order itself relative to other systems with OrderFirst=true. If the optional OrderLast parameter is set to true, this system will act as if it has an implicit [UpdateAfter] targeting all other systems in the group that do not have OrderLast=true, but it may still order itself relative to other systems with OrderLast=true. An UpdateInGroup attribute with both OrderFirst=true and OrderLast=true is invalid, and will throw an exception. Inheritance Object Attribute UpdateInGroupAttribute Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct)] public class UpdateInGroupAttribute : Attribute, _Attribute Constructors Name Description UpdateInGroupAttribute(Type) Fields Name Description OrderFirst OrderLast Properties Name Description GroupType"
  },
  "api/Unity.Entities.UpdateInGroupAttribute.OrderFirst.html": {
    "href": "api/Unity.Entities.UpdateInGroupAttribute.OrderFirst.html",
    "title": "Field OrderFirst | Entities | 0.17.0-preview.18",
    "keywords": "Field OrderFirst Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public bool OrderFirst Returns Type Description Boolean"
  },
  "api/Unity.Entities.UpdateInGroupAttribute.OrderLast.html": {
    "href": "api/Unity.Entities.UpdateInGroupAttribute.OrderLast.html",
    "title": "Field OrderLast | Entities | 0.17.0-preview.18",
    "keywords": "Field OrderLast Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public bool OrderLast Returns Type Description Boolean"
  },
  "api/Unity.Entities.UpdateWorldTimeSystem.html": {
    "href": "api/Unity.Entities.UpdateWorldTimeSystem.html",
    "title": "Class UpdateWorldTimeSystem | Entities | 0.17.0-preview.18",
    "keywords": "Class UpdateWorldTimeSystem Inheritance Object ComponentSystemBase ComponentSystem UpdateWorldTimeSystem Inherited Members ComponentSystem.PostUpdateCommands ComponentSystem.InitEntityQueryCache(Int32) ComponentSystem.Entities ComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnCreate() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.ExecutingSystemType ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetComponentTypeHandle<T>(Boolean) ComponentSystemBase.GetDynamicComponentTypeHandle(ComponentType) ComponentSystemBase.GetBufferTypeHandle<T>(Boolean) ComponentSystemBase.GetSharedComponentTypeHandle<T>() ComponentSystemBase.GetEntityTypeHandle() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.TryGetSingleton<T>(T) ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.TryGetSingletonEntity<T>(Entity) ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Preserve] [UpdateInGroup(typeof(InitializationSystemGroup))] public class UpdateWorldTimeSystem : ComponentSystem Methods Name Description OnStartRunning() OnUpdate() Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Entities.UpdateWorldTimeSystem.OnStartRunning.html": {
    "href": "api/Unity.Entities.UpdateWorldTimeSystem.OnStartRunning.html",
    "title": "Method OnStartRunning | Entities | 0.17.0-preview.18",
    "keywords": "Method OnStartRunning OnStartRunning() Declaration protected override void OnStartRunning() Overrides ComponentSystemBase.OnStartRunning()"
  },
  "api/Unity.Entities.UpdateWorldTimeSystem.OnUpdate.html": {
    "href": "api/Unity.Entities.UpdateWorldTimeSystem.OnUpdate.html",
    "title": "Method OnUpdate | Entities | 0.17.0-preview.18",
    "keywords": "Method OnUpdate OnUpdate() Declaration protected override void OnUpdate() Overrides ComponentSystem.OnUpdate()"
  },
  "api/Unity.Entities.World.AddSystem.html": {
    "href": "api/Unity.Entities.World.AddSystem.html",
    "title": "Method AddSystem | Entities | 0.17.0-preview.18",
    "keywords": "Method AddSystem AddSystem<T>(T) Declaration public T AddSystem<T>(T system) where T : ComponentSystemBase Parameters Type Name Description T system Returns Type Description T Type Parameters Name Description T"
  },
  "api/Unity.Entities.World.All.html": {
    "href": "api/Unity.Entities.World.All.html",
    "title": "Property All | Entities | 0.17.0-preview.18",
    "keywords": "Property All All Declaration public static World.NoAllocReadOnlyCollection<World> All { get; } Property Value Type Description World.NoAllocReadOnlyCollection < World >"
  },
  "api/Unity.Entities.World.CreateSystem.html": {
    "href": "api/Unity.Entities.World.CreateSystem.html",
    "title": "Method CreateSystem | Entities | 0.17.0-preview.18",
    "keywords": "Method CreateSystem CreateSystem<T>() Declaration public T CreateSystem<T>() where T : ComponentSystemBase, new() Returns Type Description T Type Parameters Name Description T CreateSystem(Type) Declaration public ComponentSystemBase CreateSystem(Type type) Parameters Type Name Description Type type Returns Type Description ComponentSystemBase"
  },
  "api/Unity.Entities.World.-ctor.html": {
    "href": "api/Unity.Entities.World.-ctor.html",
    "title": "Constructor World | Entities | 0.17.0-preview.18",
    "keywords": "Constructor World World(String, WorldFlags) Declaration public World(string name, WorldFlags flags = WorldFlags.Live | WorldFlags.Simulation) Parameters Type Name Description String name WorldFlags flags"
  },
  "api/Unity.Entities.World.DefaultGameObjectInjectionWorld.html": {
    "href": "api/Unity.Entities.World.DefaultGameObjectInjectionWorld.html",
    "title": "Property DefaultGameObjectInjectionWorld | Entities | 0.17.0-preview.18",
    "keywords": "Property DefaultGameObjectInjectionWorld DefaultGameObjectInjectionWorld Declaration public static World DefaultGameObjectInjectionWorld { get; set; } Property Value Type Description World"
  },
  "api/Unity.Entities.World.DestroyAllSystemsAndLogException.html": {
    "href": "api/Unity.Entities.World.DestroyAllSystemsAndLogException.html",
    "title": "Method DestroyAllSystemsAndLogException | Entities | 0.17.0-preview.18",
    "keywords": "Method DestroyAllSystemsAndLogException DestroyAllSystemsAndLogException() Declaration public void DestroyAllSystemsAndLogException()"
  },
  "api/Unity.Entities.World.DestroySystem.html": {
    "href": "api/Unity.Entities.World.DestroySystem.html",
    "title": "Method DestroySystem | Entities | 0.17.0-preview.18",
    "keywords": "Method DestroySystem DestroySystem(ComponentSystemBase) Declaration public void DestroySystem(ComponentSystemBase system) Parameters Type Name Description ComponentSystemBase system"
  },
  "api/Unity.Entities.World.Dispose.html": {
    "href": "api/Unity.Entities.World.Dispose.html",
    "title": "Method Dispose | Entities | 0.17.0-preview.18",
    "keywords": "Method Dispose Dispose() Declaration public void Dispose()"
  },
  "api/Unity.Entities.World.DisposeAllWorlds.html": {
    "href": "api/Unity.Entities.World.DisposeAllWorlds.html",
    "title": "Method DisposeAllWorlds | Entities | 0.17.0-preview.18",
    "keywords": "Method DisposeAllWorlds DisposeAllWorlds() Declaration public static void DisposeAllWorlds()"
  },
  "api/Unity.Entities.World.EntityManager.html": {
    "href": "api/Unity.Entities.World.EntityManager.html",
    "title": "Property EntityManager | Entities | 0.17.0-preview.18",
    "keywords": "Property EntityManager EntityManager Declaration public EntityManager EntityManager { get; } Property Value Type Description EntityManager"
  },
  "api/Unity.Entities.World.Flags.html": {
    "href": "api/Unity.Entities.World.Flags.html",
    "title": "Field Flags | Entities | 0.17.0-preview.18",
    "keywords": "Field Flags Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public readonly WorldFlags Flags Returns Type Description WorldFlags"
  },
  "api/Unity.Entities.World.GetExistingSystem.html": {
    "href": "api/Unity.Entities.World.GetExistingSystem.html",
    "title": "Method GetExistingSystem | Entities | 0.17.0-preview.18",
    "keywords": "Method GetExistingSystem GetExistingSystem<T>() Declaration public T GetExistingSystem<T>() where T : ComponentSystemBase Returns Type Description T Type Parameters Name Description T GetExistingSystem(Type) Declaration public ComponentSystemBase GetExistingSystem(Type type) Parameters Type Name Description Type type Returns Type Description ComponentSystemBase"
  },
  "api/Unity.Entities.World.GetOrCreateSystem.html": {
    "href": "api/Unity.Entities.World.GetOrCreateSystem.html",
    "title": "Method GetOrCreateSystem | Entities | 0.17.0-preview.18",
    "keywords": "Method GetOrCreateSystem GetOrCreateSystem<T>() Declaration public T GetOrCreateSystem<T>() where T : ComponentSystemBase Returns Type Description T Type Parameters Name Description T GetOrCreateSystem(Type) Declaration public ComponentSystemBase GetOrCreateSystem(Type type) Parameters Type Name Description Type type Returns Type Description ComponentSystemBase"
  },
  "api/Unity.Entities.World.GetOrCreateSystemsAndLogException.html": {
    "href": "api/Unity.Entities.World.GetOrCreateSystemsAndLogException.html",
    "title": "Method GetOrCreateSystemsAndLogException | Entities | 0.17.0-preview.18",
    "keywords": "Method GetOrCreateSystemsAndLogException GetOrCreateSystemsAndLogException(Type[]) Declaration public ComponentSystemBase[] GetOrCreateSystemsAndLogException(Type[] types) Parameters Type Name Description Type [] types Returns Type Description ComponentSystemBase []"
  },
  "api/Unity.Entities.World.html": {
    "href": "api/Unity.Entities.World.html",
    "title": "Class World | Entities | 0.17.0-preview.18",
    "keywords": "Class World Inheritance Object World Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class World : IDisposable Constructors Name Description World(String, WorldFlags) Fields Name Description Flags Properties Name Description All DefaultGameObjectInjectionWorld EntityManager IsCreated MaximumDeltaTime Name QuitUpdate SequenceNumber Systems Time TimeSingleton Unmanaged Version Methods Name Description AddSystem<T>(T) CreateSystem(Type) CreateSystem<T>() DestroyAllSystemsAndLogException() DestroySystem(ComponentSystemBase) Dispose() DisposeAllWorlds() GetExistingSystem(Type) GetExistingSystem<T>() GetOrCreateSystem(Type) GetOrCreateSystem<T>() GetOrCreateSystemsAndLogException(Type[]) PopTime() PushTime(TimeData) SetTime(TimeData) ToString() Update()"
  },
  "api/Unity.Entities.World.IsCreated.html": {
    "href": "api/Unity.Entities.World.IsCreated.html",
    "title": "Property IsCreated | Entities | 0.17.0-preview.18",
    "keywords": "Property IsCreated IsCreated Declaration public bool IsCreated { get; } Property Value Type Description Boolean"
  },
  "api/Unity.Entities.World.MaximumDeltaTime.html": {
    "href": "api/Unity.Entities.World.MaximumDeltaTime.html",
    "title": "Property MaximumDeltaTime | Entities | 0.17.0-preview.18",
    "keywords": "Property MaximumDeltaTime MaximumDeltaTime Declaration public float MaximumDeltaTime { get; set; } Property Value Type Description Single"
  },
  "api/Unity.Entities.World.Name.html": {
    "href": "api/Unity.Entities.World.Name.html",
    "title": "Property Name | Entities | 0.17.0-preview.18",
    "keywords": "Property Name Name Declaration public string Name { get; } Property Value Type Description String"
  },
  "api/Unity.Entities.World.NoAllocReadOnlyCollection-1.Contains.html": {
    "href": "api/Unity.Entities.World.NoAllocReadOnlyCollection-1.Contains.html",
    "title": "Method Contains | Entities | 0.17.0-preview.18",
    "keywords": "Method Contains Contains(T) Declaration public bool Contains(T item) Parameters Type Name Description T item Returns Type Description Boolean"
  },
  "api/Unity.Entities.World.NoAllocReadOnlyCollection-1.Count.html": {
    "href": "api/Unity.Entities.World.NoAllocReadOnlyCollection-1.Count.html",
    "title": "Property Count | Entities | 0.17.0-preview.18",
    "keywords": "Property Count Count Declaration public int Count { get; } Property Value Type Description Int32"
  },
  "api/Unity.Entities.World.NoAllocReadOnlyCollection-1.-ctor.html": {
    "href": "api/Unity.Entities.World.NoAllocReadOnlyCollection-1.-ctor.html",
    "title": "Constructor NoAllocReadOnlyCollection | Entities | 0.17.0-preview.18",
    "keywords": "Constructor NoAllocReadOnlyCollection NoAllocReadOnlyCollection(List<T>) Declaration public NoAllocReadOnlyCollection(List<T> source) Parameters Type Name Description List <T> source"
  },
  "api/Unity.Entities.World.NoAllocReadOnlyCollection-1.GetEnumerator.html": {
    "href": "api/Unity.Entities.World.NoAllocReadOnlyCollection-1.GetEnumerator.html",
    "title": "Method GetEnumerator | Entities | 0.17.0-preview.18",
    "keywords": "Method GetEnumerator GetEnumerator() Declaration public List<T>.Enumerator GetEnumerator() Returns Type Description List.Enumerator <>"
  },
  "api/Unity.Entities.World.NoAllocReadOnlyCollection-1.html": {
    "href": "api/Unity.Entities.World.NoAllocReadOnlyCollection-1.html",
    "title": "Struct World.NoAllocReadOnlyCollection<T> | Entities | 0.17.0-preview.18",
    "keywords": "Struct World.NoAllocReadOnlyCollection<T> Read only collection that doesn't generate garbage when used in a foreach. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct NoAllocReadOnlyCollection<T> : IEnumerable<T>, IEnumerable Type Parameters Name Description T Constructors Name Description NoAllocReadOnlyCollection(List<T>) Properties Name Description Count Item[Int32] Methods Name Description Contains(T) GetEnumerator()"
  },
  "api/Unity.Entities.World.NoAllocReadOnlyCollection-1.Item.html": {
    "href": "api/Unity.Entities.World.NoAllocReadOnlyCollection-1.Item.html",
    "title": "Property Item | Entities | 0.17.0-preview.18",
    "keywords": "Property Item Item[Int32] Declaration public T this[int index] { get; } Parameters Type Name Description Int32 index Property Value Type Description T"
  },
  "api/Unity.Entities.World.PopTime.html": {
    "href": "api/Unity.Entities.World.PopTime.html",
    "title": "Method PopTime | Entities | 0.17.0-preview.18",
    "keywords": "Method PopTime PopTime() Declaration public void PopTime()"
  },
  "api/Unity.Entities.World.PushTime.html": {
    "href": "api/Unity.Entities.World.PushTime.html",
    "title": "Method PushTime | Entities | 0.17.0-preview.18",
    "keywords": "Method PushTime PushTime(TimeData) Declaration public void PushTime(TimeData newTimeData) Parameters Type Name Description TimeData newTimeData"
  },
  "api/Unity.Entities.World.QuitUpdate.html": {
    "href": "api/Unity.Entities.World.QuitUpdate.html",
    "title": "Property QuitUpdate | Entities | 0.17.0-preview.18",
    "keywords": "Property QuitUpdate QuitUpdate Declaration public bool QuitUpdate { get; set; } Property Value Type Description Boolean"
  },
  "api/Unity.Entities.World.SequenceNumber.html": {
    "href": "api/Unity.Entities.World.SequenceNumber.html",
    "title": "Property SequenceNumber | Entities | 0.17.0-preview.18",
    "keywords": "Property SequenceNumber SequenceNumber Declaration public ulong SequenceNumber { get; } Property Value Type Description UInt64"
  },
  "api/Unity.Entities.World.SetTime.html": {
    "href": "api/Unity.Entities.World.SetTime.html",
    "title": "Method SetTime | Entities | 0.17.0-preview.18",
    "keywords": "Method SetTime SetTime(TimeData) Declaration public void SetTime(TimeData newTimeData) Parameters Type Name Description TimeData newTimeData"
  },
  "api/Unity.Entities.World.Systems.html": {
    "href": "api/Unity.Entities.World.Systems.html",
    "title": "Property Systems | Entities | 0.17.0-preview.18",
    "keywords": "Property Systems Systems Declaration public World.NoAllocReadOnlyCollection<ComponentSystemBase> Systems { get; } Property Value Type Description World.NoAllocReadOnlyCollection < ComponentSystemBase >"
  },
  "api/Unity.Entities.World.Time.html": {
    "href": "api/Unity.Entities.World.Time.html",
    "title": "Property Time | Entities | 0.17.0-preview.18",
    "keywords": "Property Time Time Declaration public TimeData Time { get; } Property Value Type Description TimeData"
  },
  "api/Unity.Entities.World.TimeSingleton.html": {
    "href": "api/Unity.Entities.World.TimeSingleton.html",
    "title": "Property TimeSingleton | Entities | 0.17.0-preview.18",
    "keywords": "Property TimeSingleton TimeSingleton Declaration protected Entity TimeSingleton { get; } Property Value Type Description Entity"
  },
  "api/Unity.Entities.World.ToString.html": {
    "href": "api/Unity.Entities.World.ToString.html",
    "title": "Method ToString | Entities | 0.17.0-preview.18",
    "keywords": "Method ToString ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString()"
  },
  "api/Unity.Entities.World.Unmanaged.html": {
    "href": "api/Unity.Entities.World.Unmanaged.html",
    "title": "Property Unmanaged | Entities | 0.17.0-preview.18",
    "keywords": "Property Unmanaged Unmanaged Declaration public WorldUnmanaged Unmanaged { get; } Property Value Type Description WorldUnmanaged"
  },
  "api/Unity.Entities.World.Update.html": {
    "href": "api/Unity.Entities.World.Update.html",
    "title": "Method Update | Entities | 0.17.0-preview.18",
    "keywords": "Method Update Update() Declaration public void Update()"
  },
  "api/Unity.Entities.World.Version.html": {
    "href": "api/Unity.Entities.World.Version.html",
    "title": "Property Version | Entities | 0.17.0-preview.18",
    "keywords": "Property Version Version Declaration public int Version { get; } Property Value Type Description Int32"
  },
  "api/Unity.Entities.WorldExtensions.html": {
    "href": "api/Unity.Entities.WorldExtensions.html",
    "title": "Class WorldExtensions | Entities | 0.17.0-preview.18",
    "keywords": "Class WorldExtensions Inheritance Object WorldExtensions Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class WorldExtensions"
  },
  "api/Unity.Entities.WorldFlags.html": {
    "href": "api/Unity.Entities.WorldFlags.html",
    "title": "Enum WorldFlags | Entities | 0.17.0-preview.18",
    "keywords": "Enum WorldFlags Specify all traits a World can have. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Flags] public enum WorldFlags : byte Fields Name Description Value None Default WorldFlags value. 0 Live The main World for a game/application. This flag is combined with Editor , Game and Simulation . 1 Editor Main Live World running in the Editor. 3 Game Main Live World running in the Player. 5 Simulation Any additional Live World running in the application for background processes that queue up data for other Live World (ie. physics, AI simulation, networking, etc.). 9 Conversion World on which conversion systems run to transform authoring data to runtime data. 16 Staging World in which temporary results are staged before being moved into a Live World . Typically combined with Conversion to represent an intermediate step in the full conversion process. 32 Shadow World representing a previous state of another World typically to compute a diff of runtime data - for example useful for undo/redo or Live Link. 64 Streaming Dedicated World for managing incoming streamed data to the Player. 128 Extension Methods SourceGenHelpers.GetFlags()"
  },
  "api/Unity.Entities.WorldSystemFilterAttribute.-ctor.html": {
    "href": "api/Unity.Entities.WorldSystemFilterAttribute.-ctor.html",
    "title": "Constructor WorldSystemFilterAttribute | Entities | 0.17.0-preview.18",
    "keywords": "Constructor WorldSystemFilterAttribute WorldSystemFilterAttribute(WorldSystemFilterFlags) For internal use only. Declaration public WorldSystemFilterAttribute(WorldSystemFilterFlags flags) Parameters Type Name Description WorldSystemFilterFlags flags Defines where internal Unity systems should be created."
  },
  "api/Unity.Entities.WorldSystemFilterAttribute.FilterFlags.html": {
    "href": "api/Unity.Entities.WorldSystemFilterAttribute.FilterFlags.html",
    "title": "Field FilterFlags | Entities | 0.17.0-preview.18",
    "keywords": "Field FilterFlags The World the system belongs in. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public WorldSystemFilterFlags FilterFlags Returns Type Description WorldSystemFilterFlags"
  },
  "api/Unity.Entities.WorldSystemFilterAttribute.html": {
    "href": "api/Unity.Entities.WorldSystemFilterAttribute.html",
    "title": "Class WorldSystemFilterAttribute | Entities | 0.17.0-preview.18",
    "keywords": "Class WorldSystemFilterAttribute For internal use only. Inheritance Object Attribute WorldSystemFilterAttribute Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [AttributeUsage(AttributeTargets.Class)] public sealed class WorldSystemFilterAttribute : Attribute, _Attribute Remarks Defines where internal Unity systems should be created. The existence of these Worlds is subject to change. Constructors Name Description WorldSystemFilterAttribute(WorldSystemFilterFlags) For internal use only. Fields Name Description FilterFlags The World the system belongs in."
  },
  "api/Unity.Entities.WorldSystemFilterFlags.html": {
    "href": "api/Unity.Entities.WorldSystemFilterFlags.html",
    "title": "Enum WorldSystemFilterFlags | Entities | 0.17.0-preview.18",
    "keywords": "Enum WorldSystemFilterFlags For internal use only. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Flags] public enum WorldSystemFilterFlags : uint Remarks Defines where internal Unity systems should be created. The existence of these flags and the specialized Worlds they represent are subject to change. Fields Name Description Value Default The default World . Systems without a [WorldSystemFilter] attribute are by default placed in this world. 1 EntitySceneOptimizations A specialized World created for optimizing scene rendering. 4 ProcessAfterLoad A specialized World created for processing a scene after load. 8 HybridGameObjectConversion Conversion systems that should run for Hybrid. Example: Hybrid renderer conversion systems 16 DotsRuntimeGameObjectConversion Conversion systems that should run for Dots runtime. Example: Tiny renderer conversion systems 32 GameObjectConversion A specialized World created for converting GameObjects to entities. 48 Editor The main World created when running in the Editor. Example: Editor LiveLink system 64 All Flag to include all system groups defined above as well as systems decorated with [DisableAutoCreation]. 4294967295 Extension Methods SourceGenHelpers.GetFlags()"
  },
  "api/Unity.Entities.WorldUnmanaged.CurrentTime.html": {
    "href": "api/Unity.Entities.WorldUnmanaged.CurrentTime.html",
    "title": "Property CurrentTime | Entities | 0.17.0-preview.18",
    "keywords": "Property CurrentTime CurrentTime Declaration public TimeData CurrentTime { get; } Property Value Type Description TimeData"
  },
  "api/Unity.Entities.WorldUnmanaged.html": {
    "href": "api/Unity.Entities.WorldUnmanaged.html",
    "title": "Struct WorldUnmanaged | Entities | 0.17.0-preview.18",
    "keywords": "Struct WorldUnmanaged Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct WorldUnmanaged Properties Name Description CurrentTime MaximumDeltaTime"
  },
  "api/Unity.Entities.WorldUnmanaged.MaximumDeltaTime.html": {
    "href": "api/Unity.Entities.WorldUnmanaged.MaximumDeltaTime.html",
    "title": "Property MaximumDeltaTime | Entities | 0.17.0-preview.18",
    "keywords": "Property MaximumDeltaTime MaximumDeltaTime Declaration public float MaximumDeltaTime { get; set; } Property Value Type Description Single"
  },
  "api/Unity.Entities.WriteGroupAttribute.-ctor.html": {
    "href": "api/Unity.Entities.WriteGroupAttribute.-ctor.html",
    "title": "Constructor WriteGroupAttribute | Entities | 0.17.0-preview.18",
    "keywords": "Constructor WriteGroupAttribute WriteGroupAttribute(Type) Declaration public WriteGroupAttribute(Type targetType) Parameters Type Name Description Type targetType"
  },
  "api/Unity.Entities.WriteGroupAttribute.html": {
    "href": "api/Unity.Entities.WriteGroupAttribute.html",
    "title": "Class WriteGroupAttribute | Entities | 0.17.0-preview.18",
    "keywords": "Class WriteGroupAttribute [WriteGroup] Can exclude components which are unknown at the time of creating the query that have been declared to write to the same component. This allows for extending systems of components safely without editing the previously existing systems. The goal is to have a way for systems that expect to transform data from one set of components (inputs) to another (output[s]) be able to declare that explicit transform, and they exclusively know about one set of inputs. If there are other inputs that want to write to the same output, the query shouldn't match because it's a nonsensical/unhandled setup. It's both a way to guard against nonsensical components (having two systems write to the same output value), and a way to \"turn off\" existing systems/queries by putting a component with the same write lock on an entity, letting another system handle it. Inheritance Object Attribute WriteGroupAttribute Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [AttributeUsage(AttributeTargets.Struct, AllowMultiple = true)] public class WriteGroupAttribute : Attribute, _Attribute Constructors Name Description WriteGroupAttribute(Type) Fields Name Description TargetType"
  },
  "api/Unity.Entities.WriteGroupAttribute.TargetType.html": {
    "href": "api/Unity.Entities.WriteGroupAttribute.TargetType.html",
    "title": "Field TargetType | Entities | 0.17.0-preview.18",
    "keywords": "Field TargetType Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public Type TargetType Returns Type Description Type"
  },
  "api/Unity.Mathematics.AABB.Center.html": {
    "href": "api/Unity.Mathematics.AABB.Center.html",
    "title": "Field Center | Entities | 0.17.0-preview.18",
    "keywords": "Field Center Namespace : Unity.Mathematics <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public float3 Center Returns Type Description float3"
  },
  "api/Unity.Mathematics.AABB.Contains.html": {
    "href": "api/Unity.Mathematics.AABB.Contains.html",
    "title": "Method Contains | Entities | 0.17.0-preview.18",
    "keywords": "Method Contains Contains(float3) Declaration public bool Contains(float3 point) Parameters Type Name Description float3 point Returns Type Description Boolean Contains(AABB) Declaration public bool Contains(AABB b) Parameters Type Name Description AABB b Returns Type Description Boolean"
  },
  "api/Unity.Mathematics.AABB.DistanceSq.html": {
    "href": "api/Unity.Mathematics.AABB.DistanceSq.html",
    "title": "Method DistanceSq | Entities | 0.17.0-preview.18",
    "keywords": "Method DistanceSq DistanceSq(float3) Declaration public float DistanceSq(float3 point) Parameters Type Name Description float3 point Returns Type Description Single"
  },
  "api/Unity.Mathematics.AABB.Extents.html": {
    "href": "api/Unity.Mathematics.AABB.Extents.html",
    "title": "Field Extents | Entities | 0.17.0-preview.18",
    "keywords": "Field Extents Namespace : Unity.Mathematics <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public float3 Extents Returns Type Description float3"
  },
  "api/Unity.Mathematics.AABB.html": {
    "href": "api/Unity.Mathematics.AABB.html",
    "title": "Struct AABB | Entities | 0.17.0-preview.18",
    "keywords": "Struct AABB Namespace : Unity.Mathematics <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] public struct AABB Fields Name Description Center Extents Properties Name Description Max Min Size Methods Name Description Contains(AABB) Contains(float3) DistanceSq(float3) ToString() Returns a string representation of the AABB. Transform(float4x4, AABB) Extension Methods AABBExtensions.ToBounds(AABB)"
  },
  "api/Unity.Mathematics.AABB.Max.html": {
    "href": "api/Unity.Mathematics.AABB.Max.html",
    "title": "Property Max | Entities | 0.17.0-preview.18",
    "keywords": "Property Max Max Declaration public float3 Max { get; } Property Value Type Description float3"
  },
  "api/Unity.Mathematics.AABB.Min.html": {
    "href": "api/Unity.Mathematics.AABB.Min.html",
    "title": "Property Min | Entities | 0.17.0-preview.18",
    "keywords": "Property Min Min Declaration public float3 Min { get; } Property Value Type Description float3"
  },
  "api/Unity.Mathematics.AABB.Size.html": {
    "href": "api/Unity.Mathematics.AABB.Size.html",
    "title": "Property Size | Entities | 0.17.0-preview.18",
    "keywords": "Property Size Size Declaration public float3 Size { get; } Property Value Type Description float3"
  },
  "api/Unity.Mathematics.AABB.ToString.html": {
    "href": "api/Unity.Mathematics.AABB.ToString.html",
    "title": "Method ToString | Entities | 0.17.0-preview.18",
    "keywords": "Method ToString ToString() Returns a string representation of the AABB. Declaration public override string ToString() Returns Type Description String Overrides ValueType.ToString()"
  },
  "api/Unity.Mathematics.AABB.Transform.html": {
    "href": "api/Unity.Mathematics.AABB.Transform.html",
    "title": "Method Transform | Entities | 0.17.0-preview.18",
    "keywords": "Method Transform Transform(float4x4, AABB) Declaration public static AABB Transform(float4x4 transform, AABB localBounds) Parameters Type Name Description float4x4 transform AABB localBounds Returns Type Description AABB"
  },
  "api/Unity.Mathematics.AABBExtensions.html": {
    "href": "api/Unity.Mathematics.AABBExtensions.html",
    "title": "Class AABBExtensions | Entities | 0.17.0-preview.18",
    "keywords": "Class AABBExtensions Inheritance Object AABBExtensions Namespace : Unity.Mathematics <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class AABBExtensions Methods Name Description ToAABB(Bounds) ToBounds(AABB)"
  },
  "api/Unity.Mathematics.AABBExtensions.ToAABB.html": {
    "href": "api/Unity.Mathematics.AABBExtensions.ToAABB.html",
    "title": "Method ToAABB | Entities | 0.17.0-preview.18",
    "keywords": "Method ToAABB ToAABB(Bounds) Declaration public static AABB ToAABB(this Bounds bounds) Parameters Type Name Description Bounds bounds Returns Type Description AABB"
  },
  "api/Unity.Mathematics.AABBExtensions.ToBounds.html": {
    "href": "api/Unity.Mathematics.AABBExtensions.ToBounds.html",
    "title": "Method ToBounds | Entities | 0.17.0-preview.18",
    "keywords": "Method ToBounds ToBounds(AABB) Declaration public static Bounds ToBounds(this AABB aabb) Parameters Type Name Description AABB aabb Returns Type Description Bounds"
  },
  "api/Unity.Mathematics.GeneratePoints.html": {
    "href": "api/Unity.Mathematics.GeneratePoints.html",
    "title": "Struct GeneratePoints | Entities | 0.17.0-preview.18",
    "keywords": "Struct GeneratePoints Namespace : Unity.Mathematics <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct GeneratePoints Methods Name Description RandomPointsInSphere(float3, Single, NativeArray<float3>) RandomPointsInSphere(float3, Single, NativeArray<float3>, JobHandle) RandomPointsInUnitSphere(NativeArray<float3>) RandomPositionInsideUnitSphere(UInt32)"
  },
  "api/Unity.Mathematics.GeneratePoints.RandomPointsInSphere.html": {
    "href": "api/Unity.Mathematics.GeneratePoints.RandomPointsInSphere.html",
    "title": "Method RandomPointsInSphere | Entities | 0.17.0-preview.18",
    "keywords": "Method RandomPointsInSphere RandomPointsInSphere(float3, Single, NativeArray<float3>, JobHandle) Declaration public static JobHandle RandomPointsInSphere(float3 center, float radius, NativeArray<float3> points, JobHandle inputDeps) Parameters Type Name Description float3 center Single radius NativeArray < float3 > points JobHandle inputDeps Returns Type Description JobHandle RandomPointsInSphere(float3, Single, NativeArray<float3>) Declaration public static void RandomPointsInSphere(float3 center, float radius, NativeArray<float3> points) Parameters Type Name Description float3 center Single radius NativeArray < float3 > points"
  },
  "api/Unity.Mathematics.GeneratePoints.RandomPointsInUnitSphere.html": {
    "href": "api/Unity.Mathematics.GeneratePoints.RandomPointsInUnitSphere.html",
    "title": "Method RandomPointsInUnitSphere | Entities | 0.17.0-preview.18",
    "keywords": "Method RandomPointsInUnitSphere RandomPointsInUnitSphere(NativeArray<float3>) Declaration public static void RandomPointsInUnitSphere(NativeArray<float3> points) Parameters Type Name Description NativeArray < float3 > points"
  },
  "api/Unity.Mathematics.GeneratePoints.RandomPositionInsideUnitSphere.html": {
    "href": "api/Unity.Mathematics.GeneratePoints.RandomPositionInsideUnitSphere.html",
    "title": "Method RandomPositionInsideUnitSphere | Entities | 0.17.0-preview.18",
    "keywords": "Method RandomPositionInsideUnitSphere RandomPositionInsideUnitSphere(UInt32) Declaration public static float3 RandomPositionInsideUnitSphere(uint seed) Parameters Type Name Description UInt32 seed Returns Type Description float3"
  },
  "api/Unity.Mathematics.html": {
    "href": "api/Unity.Mathematics.html",
    "title": "Namespace Unity.Mathematics | Entities | 0.17.0-preview.18",
    "keywords": "Namespace Unity.Mathematics Classes AABBExtensions Structs AABB GeneratePoints MinMaxAABB"
  },
  "api/Unity.Mathematics.MinMaxAABB.Empty.html": {
    "href": "api/Unity.Mathematics.MinMaxAABB.Empty.html",
    "title": "Property Empty | Entities | 0.17.0-preview.18",
    "keywords": "Property Empty Empty Declaration public static MinMaxAABB Empty { get; } Property Value Type Description MinMaxAABB"
  },
  "api/Unity.Mathematics.MinMaxAABB.Encapsulate.html": {
    "href": "api/Unity.Mathematics.MinMaxAABB.Encapsulate.html",
    "title": "Method Encapsulate | Entities | 0.17.0-preview.18",
    "keywords": "Method Encapsulate Encapsulate(MinMaxAABB) Declaration public void Encapsulate(MinMaxAABB aabb) Parameters Type Name Description MinMaxAABB aabb Encapsulate(float3) Declaration public void Encapsulate(float3 point) Parameters Type Name Description float3 point"
  },
  "api/Unity.Mathematics.MinMaxAABB.Equals.html": {
    "href": "api/Unity.Mathematics.MinMaxAABB.Equals.html",
    "title": "Method Equals | Entities | 0.17.0-preview.18",
    "keywords": "Method Equals Equals(MinMaxAABB) Declaration public bool Equals(MinMaxAABB other) Parameters Type Name Description MinMaxAABB other Returns Type Description Boolean"
  },
  "api/Unity.Mathematics.MinMaxAABB.html": {
    "href": "api/Unity.Mathematics.MinMaxAABB.html",
    "title": "Struct MinMaxAABB | Entities | 0.17.0-preview.18",
    "keywords": "Struct MinMaxAABB Namespace : Unity.Mathematics <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] public struct MinMaxAABB : IEquatable<MinMaxAABB> Fields Name Description Max Min Properties Name Description Empty IsEmpty Methods Name Description Encapsulate(float3) Encapsulate(MinMaxAABB) Equals(MinMaxAABB) Operators Name Description Implicit(AABB to MinMaxAABB) Implicit(MinMaxAABB to AABB)"
  },
  "api/Unity.Mathematics.MinMaxAABB.IsEmpty.html": {
    "href": "api/Unity.Mathematics.MinMaxAABB.IsEmpty.html",
    "title": "Property IsEmpty | Entities | 0.17.0-preview.18",
    "keywords": "Property IsEmpty IsEmpty Declaration public bool IsEmpty { get; } Property Value Type Description Boolean"
  },
  "api/Unity.Mathematics.MinMaxAABB.Max.html": {
    "href": "api/Unity.Mathematics.MinMaxAABB.Max.html",
    "title": "Field Max | Entities | 0.17.0-preview.18",
    "keywords": "Field Max Namespace : Unity.Mathematics <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public float3 Max Returns Type Description float3"
  },
  "api/Unity.Mathematics.MinMaxAABB.Min.html": {
    "href": "api/Unity.Mathematics.MinMaxAABB.Min.html",
    "title": "Field Min | Entities | 0.17.0-preview.18",
    "keywords": "Field Min Namespace : Unity.Mathematics <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public float3 Min Returns Type Description float3"
  },
  "api/Unity.Mathematics.MinMaxAABB.op_Implicit.html": {
    "href": "api/Unity.Mathematics.MinMaxAABB.op_Implicit.html",
    "title": "Operator Implicit | Entities | 0.17.0-preview.18",
    "keywords": "Operator Implicit Implicit(AABB to MinMaxAABB) Declaration public static implicit operator MinMaxAABB(AABB aabb) Parameters Type Name Description AABB aabb Returns Type Description MinMaxAABB Implicit(MinMaxAABB to AABB) Declaration public static implicit operator AABB(MinMaxAABB aabb) Parameters Type Name Description MinMaxAABB aabb Returns Type Description AABB"
  },
  "api/Unity.Profiling.html": {
    "href": "api/Unity.Profiling.html",
    "title": "Namespace Unity.Profiling | Entities | 0.17.0-preview.18",
    "keywords": "Namespace Unity.Profiling Structs ProfilerMarker ProfilerMarker.AutoScope"
  },
  "api/Unity.Profiling.ProfilerMarker.Auto.html": {
    "href": "api/Unity.Profiling.ProfilerMarker.Auto.html",
    "title": "Method Auto | Entities | 0.17.0-preview.18",
    "keywords": "Method Auto Auto() Declaration public ProfilerMarker.AutoScope Auto() Returns Type Description ProfilerMarker.AutoScope"
  },
  "api/Unity.Profiling.ProfilerMarker.AutoScope.Dispose.html": {
    "href": "api/Unity.Profiling.ProfilerMarker.AutoScope.Dispose.html",
    "title": "Method Dispose | Entities | 0.17.0-preview.18",
    "keywords": "Method Dispose Dispose() Declaration public void Dispose()"
  },
  "api/Unity.Profiling.ProfilerMarker.AutoScope.html": {
    "href": "api/Unity.Profiling.ProfilerMarker.AutoScope.html",
    "title": "Struct ProfilerMarker.AutoScope | Entities | 0.17.0-preview.18",
    "keywords": "Struct ProfilerMarker.AutoScope Namespace : Unity.Profiling <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct AutoScope : IDisposable Methods Name Description Dispose()"
  },
  "api/Unity.Profiling.ProfilerMarker.Begin.html": {
    "href": "api/Unity.Profiling.ProfilerMarker.Begin.html",
    "title": "Method Begin | Entities | 0.17.0-preview.18",
    "keywords": "Method Begin Begin() Declaration [Conditional(\"ENABLE_PROFILER\")] public void Begin() Begin(Object) Declaration [Conditional(\"ENABLE_PROFILER\")] public void Begin(Object contextUnityObject) Parameters Type Name Description Object contextUnityObject"
  },
  "api/Unity.Profiling.ProfilerMarker.-ctor.html": {
    "href": "api/Unity.Profiling.ProfilerMarker.-ctor.html",
    "title": "Constructor ProfilerMarker | Entities | 0.17.0-preview.18",
    "keywords": "Constructor ProfilerMarker ProfilerMarker(String) Declaration public ProfilerMarker(string name) Parameters Type Name Description String name"
  },
  "api/Unity.Profiling.ProfilerMarker.End.html": {
    "href": "api/Unity.Profiling.ProfilerMarker.End.html",
    "title": "Method End | Entities | 0.17.0-preview.18",
    "keywords": "Method End End() Declaration [Conditional(\"ENABLE_PROFILER\")] public void End()"
  },
  "api/Unity.Profiling.ProfilerMarker.html": {
    "href": "api/Unity.Profiling.ProfilerMarker.html",
    "title": "Struct ProfilerMarker | Entities | 0.17.0-preview.18",
    "keywords": "Struct ProfilerMarker Namespace : Unity.Profiling <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct ProfilerMarker Constructors Name Description ProfilerMarker(String) Methods Name Description Auto() Begin() Begin(Object) End()"
  },
  "api/Unity.Scenes.DisableLiveLink.html": {
    "href": "api/Unity.Scenes.DisableLiveLink.html",
    "title": "Struct DisableLiveLink | Entities | 0.17.0-preview.18",
    "keywords": "Struct DisableLiveLink Namespace : Unity.Scenes <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct DisableLiveLink : IComponentData"
  },
  "api/Unity.Scenes.DisableSceneResolveAndLoad.html": {
    "href": "api/Unity.Scenes.DisableSceneResolveAndLoad.html",
    "title": "Struct DisableSceneResolveAndLoad | Entities | 0.17.0-preview.18",
    "keywords": "Struct DisableSceneResolveAndLoad Namespace : Unity.Scenes <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct DisableSceneResolveAndLoad : IComponentData"
  },
  "api/Unity.Scenes.Editor.ClearEntitiesCacheWindow.html": {
    "href": "api/Unity.Scenes.Editor.ClearEntitiesCacheWindow.html",
    "title": "Class ClearEntitiesCacheWindow | Entities | 0.17.0-preview.18",
    "keywords": "Class ClearEntitiesCacheWindow Inheritance Object Object ScriptableObject EditorWindow ClearEntitiesCacheWindow Inherited Members EditorWindow.BeginWindows() EditorWindow.EndWindows() EditorWindow.ShowNotification(GUIContent) EditorWindow.ShowNotification(GUIContent, Double) EditorWindow.RemoveNotification() UnityEditor.EditorWindow.ShowTab() EditorWindow.Focus() EditorWindow.ShowUtility() EditorWindow.ShowPopup() EditorWindow.ShowModalUtility() EditorWindow.ShowAsDropDown(Rect, Vector2) EditorWindow.Show() EditorWindow.Show(Boolean) EditorWindow.ShowAuxWindow() EditorWindow.ShowModal() EditorWindow.GetWindow(Type, Boolean, String, Boolean) EditorWindow.GetWindow(Type, Boolean, String) EditorWindow.GetWindow(Type, Boolean) EditorWindow.GetWindow(Type) EditorWindow.GetWindowWithRect(Type, Rect, Boolean, String) EditorWindow.GetWindowWithRect(Type, Rect, Boolean) EditorWindow.GetWindowWithRect(Type, Rect) UnityEditor.EditorWindow.GetWindow<T>() UnityEditor.EditorWindow.GetWindow<T>(System.Boolean) UnityEditor.EditorWindow.GetWindow<T>(System.Boolean, System.String) UnityEditor.EditorWindow.GetWindow<T>(System.String) UnityEditor.EditorWindow.GetWindow<T>(System.String, System.Boolean) UnityEditor.EditorWindow.GetWindow<T>(System.Boolean, System.String, System.Boolean) UnityEditor.EditorWindow.GetWindow<T>(System.Type[]) UnityEditor.EditorWindow.GetWindow<T>(System.String, System.Type[]) UnityEditor.EditorWindow.GetWindow<T>(System.String, System.Boolean, System.Type[]) UnityEditor.EditorWindow.CreateWindow<T>(System.Type[]) UnityEditor.EditorWindow.CreateWindow<T>(System.String, System.Type[]) UnityEditor.EditorWindow.HasOpenInstances<T>() EditorWindow.FocusWindowIfItsOpen(Type) UnityEditor.EditorWindow.FocusWindowIfItsOpen<T>() UnityEditor.EditorWindow.GetWindowWithRect<T>(UnityEngine.Rect) UnityEditor.EditorWindow.GetWindowWithRect<T>(UnityEngine.Rect, System.Boolean) UnityEditor.EditorWindow.GetWindowWithRect<T>(UnityEngine.Rect, System.Boolean, System.String) UnityEditor.EditorWindow.GetWindowWithRect<T>(UnityEngine.Rect, System.Boolean, System.String, System.Boolean) EditorWindow.Close() EditorWindow.Repaint() EditorWindow.SendEvent(Event) EditorWindow.GetExtraPaneTypes() EditorWindow.rootVisualElement EditorWindow.wantsMouseMove EditorWindow.wantsMouseEnterLeaveWindow EditorWindow.wantsLessLayoutEvents EditorWindow.autoRepaintOnSceneChange EditorWindow.maximized EditorWindow.hasFocus EditorWindow.docked EditorWindow.focusedWindow EditorWindow.mouseOverWindow EditorWindow.minSize EditorWindow.maxSize EditorWindow.titleContent UnityEditor.EditorWindow.depthBufferBits EditorWindow.position ScriptableObject.CreateInstance(String) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) Object.Destroy(Object) Object.DestroyImmediate(Object, Boolean) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, Boolean) Object.DontDestroyOnLoad(Object) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectOfType(Type) Object.FindObjectOfType(Type, Boolean) Object.ToString() Object.name Object.hideFlags Namespace : Unity.Scenes.Editor <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class ClearEntitiesCacheWindow : EditorWindow Methods Name Description OpenWindow()"
  },
  "api/Unity.Scenes.Editor.ClearEntitiesCacheWindow.OpenWindow.html": {
    "href": "api/Unity.Scenes.Editor.ClearEntitiesCacheWindow.OpenWindow.html",
    "title": "Method OpenWindow | Entities | 0.17.0-preview.18",
    "keywords": "Method OpenWindow OpenWindow() Declaration public static void OpenWindow()"
  },
  "api/Unity.Scenes.Editor.EditorEntityScenes.AddEntityBinaryFileDependencies.html": {
    "href": "api/Unity.Scenes.Editor.EditorEntityScenes.AddEntityBinaryFileDependencies.html",
    "title": "Method AddEntityBinaryFileDependencies | Entities | 0.17.0-preview.18",
    "keywords": "Method AddEntityBinaryFileDependencies AddEntityBinaryFileDependencies(AssetImportContext, Hash128) Declaration public static void AddEntityBinaryFileDependencies(AssetImportContext ctx, Hash128 buildConfigurationGUID) Parameters Type Name Description AssetImportContext ctx Hash128 buildConfigurationGUID"
  },
  "api/Unity.Scenes.Editor.EditorEntityScenes.ConvertAndWriteEntityScene.html": {
    "href": "api/Unity.Scenes.Editor.EditorEntityScenes.ConvertAndWriteEntityScene.html",
    "title": "Method ConvertAndWriteEntityScene | Entities | 0.17.0-preview.18",
    "keywords": "Method ConvertAndWriteEntityScene ConvertAndWriteEntityScene(Scene, GameObjectConversionSettings, List<ReferencedUnityObjects>) Declaration public static SceneSectionData[] ConvertAndWriteEntityScene(Scene scene, GameObjectConversionSettings settings, List<ReferencedUnityObjects> sectionRefObjs = null) Parameters Type Name Description Scene scene GameObjectConversionSettings settings List < ReferencedUnityObjects > sectionRefObjs Returns Type Description SceneSectionData []"
  },
  "api/Unity.Scenes.Editor.EditorEntityScenes.GetSubScenes.html": {
    "href": "api/Unity.Scenes.Editor.EditorEntityScenes.GetSubScenes.html",
    "title": "Method GetSubScenes | Entities | 0.17.0-preview.18",
    "keywords": "Method GetSubScenes GetSubScenes(GUID) For a given scene returns the sub scenes embedded in that scene Declaration public static GUID[] GetSubScenes(GUID guid) Parameters Type Name Description UnityEditor.GUID guid Returns Type Description UnityEditor.GUID []"
  },
  "api/Unity.Scenes.Editor.EditorEntityScenes.html": {
    "href": "api/Unity.Scenes.Editor.EditorEntityScenes.html",
    "title": "Class EditorEntityScenes | Entities | 0.17.0-preview.18",
    "keywords": "Class EditorEntityScenes Inheritance Object EditorEntityScenes Namespace : Unity.Scenes.Editor <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class EditorEntityScenes Methods Name Description AddEntityBinaryFileDependencies(AssetImportContext, Hash128) ConvertAndWriteEntityScene(Scene, GameObjectConversionSettings, List<ReferencedUnityObjects>) GetSubScenes(GUID) For a given scene returns the sub scenes embedded in that scene IsEntitySubScene(Scene) Read(EntityManager, String, String) Write(EntityManager, String, String) WriteEntityScene(EntityManager, Hash128, String, AssetImportContext, Int32, List<ReferencedUnityObjects>)"
  },
  "api/Unity.Scenes.Editor.EditorEntityScenes.IsEntitySubScene.html": {
    "href": "api/Unity.Scenes.Editor.EditorEntityScenes.IsEntitySubScene.html",
    "title": "Method IsEntitySubScene | Entities | 0.17.0-preview.18",
    "keywords": "Method IsEntitySubScene IsEntitySubScene(Scene) Declaration public static bool IsEntitySubScene(Scene scene) Parameters Type Name Description Scene scene Returns Type Description Boolean"
  },
  "api/Unity.Scenes.Editor.EditorEntityScenes.Read.html": {
    "href": "api/Unity.Scenes.Editor.EditorEntityScenes.Read.html",
    "title": "Method Read | Entities | 0.17.0-preview.18",
    "keywords": "Method Read Read(EntityManager, String, String) Declaration public static void Read(EntityManager scene, string binaryPath, string objectReferencesPath) Parameters Type Name Description EntityManager scene String binaryPath String objectReferencesPath"
  },
  "api/Unity.Scenes.Editor.EditorEntityScenes.Write.html": {
    "href": "api/Unity.Scenes.Editor.EditorEntityScenes.Write.html",
    "title": "Method Write | Entities | 0.17.0-preview.18",
    "keywords": "Method Write Write(EntityManager, String, String) Declaration public static void Write(EntityManager scene, string binaryPath, string objectReferencesPath) Parameters Type Name Description EntityManager scene String binaryPath String objectReferencesPath"
  },
  "api/Unity.Scenes.Editor.EditorEntityScenes.WriteEntityScene.html": {
    "href": "api/Unity.Scenes.Editor.EditorEntityScenes.WriteEntityScene.html",
    "title": "Method WriteEntityScene | Entities | 0.17.0-preview.18",
    "keywords": "Method WriteEntityScene WriteEntityScene(EntityManager, Hash128, String, AssetImportContext, Int32, List<ReferencedUnityObjects>) Declaration public static SceneSectionData[] WriteEntityScene(EntityManager entityManager, Hash128 sceneGUID, string sceneName, AssetImportContext importContext, int framesToRetainBlobAssets = 0, List<ReferencedUnityObjects> sectionRefObjs = null) Parameters Type Name Description EntityManager entityManager Hash128 sceneGUID String sceneName AssetImportContext importContext Int32 framesToRetainBlobAssets List < ReferencedUnityObjects > sectionRefObjs Returns Type Description SceneSectionData []"
  },
  "api/Unity.Scenes.Editor.html": {
    "href": "api/Unity.Scenes.Editor.html",
    "title": "Namespace Unity.Scenes.Editor | Entities | 0.17.0-preview.18",
    "keywords": "Namespace Unity.Scenes.Editor Classes ClearEntitiesCacheWindow EditorEntityScenes LiveLinkBuildImporter SceneInspector Inspector for scene assets. Structs LiveLinkBuildImporter.BuildMetaData SceneImporterData Contains scene data that is stored in the userData field of the importer."
  },
  "api/Unity.Scenes.Editor.LiveLinkBuildImporter.BuildMetaData.Dependencies.html": {
    "href": "api/Unity.Scenes.Editor.LiveLinkBuildImporter.BuildMetaData.Dependencies.html",
    "title": "Field Dependencies | Entities | 0.17.0-preview.18",
    "keywords": "Field Dependencies Namespace : Unity.Scenes.Editor <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public BlobArray<Hash128> Dependencies Returns Type Description BlobArray < Hash128 >"
  },
  "api/Unity.Scenes.Editor.LiveLinkBuildImporter.BuildMetaData.html": {
    "href": "api/Unity.Scenes.Editor.LiveLinkBuildImporter.BuildMetaData.html",
    "title": "Struct LiveLinkBuildImporter.BuildMetaData | Entities | 0.17.0-preview.18",
    "keywords": "Struct LiveLinkBuildImporter.BuildMetaData Namespace : Unity.Scenes.Editor <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] public struct BuildMetaData Fields Name Description Dependencies"
  },
  "api/Unity.Scenes.Editor.LiveLinkBuildImporter.html": {
    "href": "api/Unity.Scenes.Editor.LiveLinkBuildImporter.html",
    "title": "Class LiveLinkBuildImporter | Entities | 0.17.0-preview.18",
    "keywords": "Class LiveLinkBuildImporter Inheritance Object Object AssetImporter ScriptedImporter LiveLinkBuildImporter Inherited Members ScriptedImporter.SupportsRemappedAssetType(Type) AssetImporter.SetAssetBundleNameAndVariant(String, String) AssetImporter.GetAtPath(String) AssetImporter.SaveAndReimport() UnityEditor.AssetImporter.AddRemap(UnityEditor.AssetImporter.SourceAssetIdentifier, UnityEngine.Object) UnityEditor.AssetImporter.RemoveRemap(UnityEditor.AssetImporter.SourceAssetIdentifier) AssetImporter.GetExternalObjectMap() AssetImporter.assetPath AssetImporter.importSettingsMissing UnityEditor.AssetImporter.assetTimeStamp AssetImporter.userData AssetImporter.assetBundleName AssetImporter.assetBundleVariant Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) Object.Destroy(Object) Object.DestroyImmediate(Object, Boolean) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, Boolean) Object.DontDestroyOnLoad(Object) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectOfType(Type) Object.FindObjectOfType(Type, Boolean) Object.ToString() Object.name Object.hideFlags Namespace : Unity.Scenes.Editor <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [ScriptedImporter(19, \"liveLinkBundles\")] public class LiveLinkBuildImporter : ScriptedImporter Fields Name Description k_BundleExtension k_ManifestExtension Methods Name Description OnImportAsset(AssetImportContext)"
  },
  "api/Unity.Scenes.Editor.LiveLinkBuildImporter.k_BundleExtension.html": {
    "href": "api/Unity.Scenes.Editor.LiveLinkBuildImporter.k_BundleExtension.html",
    "title": "Field k_BundleExtension | Entities | 0.17.0-preview.18",
    "keywords": "Field k_BundleExtension Namespace : Unity.Scenes.Editor <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public const string k_BundleExtension = \"bundle\" Returns Type Description String"
  },
  "api/Unity.Scenes.Editor.LiveLinkBuildImporter.k_ManifestExtension.html": {
    "href": "api/Unity.Scenes.Editor.LiveLinkBuildImporter.k_ManifestExtension.html",
    "title": "Field k_ManifestExtension | Entities | 0.17.0-preview.18",
    "keywords": "Field k_ManifestExtension Namespace : Unity.Scenes.Editor <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public const string k_ManifestExtension = \"manifest\" Returns Type Description String"
  },
  "api/Unity.Scenes.Editor.LiveLinkBuildImporter.OnImportAsset.html": {
    "href": "api/Unity.Scenes.Editor.LiveLinkBuildImporter.OnImportAsset.html",
    "title": "Method OnImportAsset | Entities | 0.17.0-preview.18",
    "keywords": "Method OnImportAsset OnImportAsset(AssetImportContext) Declaration public override void OnImportAsset(AssetImportContext ctx) Parameters Type Name Description AssetImportContext ctx Overrides ScriptedImporter.OnImportAsset(AssetImportContext)"
  },
  "api/Unity.Scenes.Editor.SceneImporterData.CanLiveLinkScene.html": {
    "href": "api/Unity.Scenes.Editor.SceneImporterData.CanLiveLinkScene.html",
    "title": "Method CanLiveLinkScene | Entities | 0.17.0-preview.18",
    "keywords": "Method CanLiveLinkScene CanLiveLinkScene(String) Method to check if a scene can be used by the LiveLink system. Declaration public static bool CanLiveLinkScene(string path) Parameters Type Name Description String path The scene path. Returns Type Description Boolean If true, the scene can be used."
  },
  "api/Unity.Scenes.Editor.SceneImporterData.DisableLiveLink.html": {
    "href": "api/Unity.Scenes.Editor.SceneImporterData.DisableLiveLink.html",
    "title": "Field DisableLiveLink | Entities | 0.17.0-preview.18",
    "keywords": "Field DisableLiveLink Exclude this scene from the LiveLink system. If excluded, the scene will be built into the player data if it is in the BuildSettings scenes list. Namespace : Unity.Scenes.Editor <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public bool DisableLiveLink Returns Type Description Boolean"
  },
  "api/Unity.Scenes.Editor.SceneImporterData.GetAtPath.html": {
    "href": "api/Unity.Scenes.Editor.SceneImporterData.GetAtPath.html",
    "title": "Method GetAtPath | Entities | 0.17.0-preview.18",
    "keywords": "Method GetAtPath GetAtPath(String) Get the importer data for a scene given its path. Declaration public static SceneImporterData GetAtPath(string path) Parameters Type Name Description String path The scene path. Returns Type Description SceneImporterData The data for the scene."
  },
  "api/Unity.Scenes.Editor.SceneImporterData.html": {
    "href": "api/Unity.Scenes.Editor.SceneImporterData.html",
    "title": "Struct SceneImporterData | Entities | 0.17.0-preview.18",
    "keywords": "Struct SceneImporterData Contains scene data that is stored in the userData field of the importer. Namespace : Unity.Scenes.Editor <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct SceneImporterData Fields Name Description DisableLiveLink Exclude this scene from the LiveLink system. If excluded, the scene will be built into the player data if it is in the BuildSettings scenes list. Methods Name Description CanLiveLinkScene(String) Method to check if a scene can be used by the LiveLink system. GetAtPath(String) Get the importer data for a scene given its path. SetAtPath(String, SceneImporterData) Set the scene data for the scene at the given path."
  },
  "api/Unity.Scenes.Editor.SceneImporterData.SetAtPath.html": {
    "href": "api/Unity.Scenes.Editor.SceneImporterData.SetAtPath.html",
    "title": "Method SetAtPath | Entities | 0.17.0-preview.18",
    "keywords": "Method SetAtPath SetAtPath(String, SceneImporterData) Set the scene data for the scene at the given path. Declaration public static void SetAtPath(string path, SceneImporterData data) Parameters Type Name Description String path The scene path. SceneImporterData data The scene data."
  },
  "api/Unity.Scenes.Editor.SceneInspector.html": {
    "href": "api/Unity.Scenes.Editor.SceneInspector.html",
    "title": "Class SceneInspector | Entities | 0.17.0-preview.18",
    "keywords": "Class SceneInspector Inspector for scene assets. Inheritance Object Object ScriptableObject Editor SceneInspector Inherited Members Editor.CreateEditorWithContext(Object[], Object, Type) Editor.CreateEditorWithContext(Object[], Object) Editor.CreateCachedEditorWithContext(Object, Object, Type, Editor) Editor.CreateCachedEditorWithContext(Object[], Object, Type, Editor) Editor.CreateCachedEditor(Object, Type, Editor) Editor.CreateCachedEditor(Object[], Type, Editor) Editor.CreateEditor(Object) Editor.CreateEditor(Object, Type) Editor.CreateEditor(Object[]) Editor.CreateEditor(Object[], Type) Editor.DrawPropertiesExcluding(SerializedObject, String[]) Editor.DrawDefaultInspector() Editor.Repaint() Editor.CreateInspectorGUI() Editor.RequiresConstantRepaint() Editor.DrawHeader() Editor.OnHeaderGUI() Editor.ShouldHideOpenButton() Editor.DrawFoldoutInspector(Object, Editor) Editor.HasPreviewGUI() Editor.GetPreviewTitle() Editor.RenderStaticPreview(String, Object[], Int32, Int32) Editor.OnPreviewGUI(Rect, GUIStyle) Editor.OnInteractivePreviewGUI(Rect, GUIStyle) Editor.OnPreviewSettings() Editor.GetInfoString() Editor.DrawPreview(Rect) Editor.ReloadPreviewInstances() Editor.UseDefaultMargins() Editor.Initialize(Object[]) Editor.MoveNextTarget() Editor.ResetTarget() Editor.target Editor.targets Editor.serializedObject Editor.finishedDefaultHeaderGUI ScriptableObject.CreateInstance(String) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) Object.Destroy(Object) Object.DestroyImmediate(Object, Boolean) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, Boolean) Object.DontDestroyOnLoad(Object) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectOfType(Type) Object.FindObjectOfType(Type, Boolean) Object.ToString() Object.name Object.hideFlags Namespace : Unity.Scenes.Editor <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [CustomEditor(typeof(SceneAsset))] public class SceneInspector : Editor, IPreviewable, IToolModeOwner Methods Name Description OnInspectorGUI() Draw the inspector GUI."
  },
  "api/Unity.Scenes.Editor.SceneInspector.OnInspectorGUI.html": {
    "href": "api/Unity.Scenes.Editor.SceneInspector.OnInspectorGUI.html",
    "title": "Method OnInspectorGUI | Entities | 0.17.0-preview.18",
    "keywords": "Method OnInspectorGUI OnInspectorGUI() Draw the inspector GUI. Declaration public override void OnInspectorGUI() Overrides Editor.OnInspectorGUI()"
  },
  "api/Unity.Scenes.html": {
    "href": "api/Unity.Scenes.html",
    "title": "Namespace Unity.Scenes | Entities | 0.17.0-preview.18",
    "keywords": "Namespace Unity.Scenes Classes ProcessAfterLoadGroup The group of systems that runs after a scene is loaded This allows for custom post processing of loaded SubScenes ie scene offsetting ReferencedUnityObjects ResolveSceneSectionUtility SceneBundleHandle SceneSystem High level API for loading and unloading scenes SceneSystemGroup The group of systems responsible for loading and unloading scenes. SerializeUtilityHybrid SubScene Structs DisableLiveLink DisableSceneResolveAndLoad ResolvedSectionEntity ResourceCatalogData Container for resource data. ResourceMetaData Information for resources to be loaded at runtime. SceneBoundingVolume SceneSystem.LoadParameters Parameters for loading scenes. Enums LiveLinkMode ResourceMetaData.Flags For scenes, if AutoLoad is true, the scene will be loaded when the player starts ResourceMetaData.Type Currently Scene types are supported, assetbundles will need to be supported when dependencies are implemented SceneSystem.UnloadParameters Flags controlling the unload process for SubScenes."
  },
  "api/Unity.Scenes.LiveLinkMode.html": {
    "href": "api/Unity.Scenes.LiveLinkMode.html",
    "title": "Enum LiveLinkMode | Entities | 0.17.0-preview.18",
    "keywords": "Enum LiveLinkMode Namespace : Unity.Scenes <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public enum LiveLinkMode Fields Name Description Value Disabled 0 LiveConvertStandalonePlayer 1 LiveConvertGameView 2 LiveConvertSceneView 3 Extension Methods SourceGenHelpers.GetFlags()"
  },
  "api/Unity.Scenes.ProcessAfterLoadGroup.html": {
    "href": "api/Unity.Scenes.ProcessAfterLoadGroup.html",
    "title": "Class ProcessAfterLoadGroup | Entities | 0.17.0-preview.18",
    "keywords": "Class ProcessAfterLoadGroup The group of systems that runs after a scene is loaded This allows for custom post processing of loaded SubScenes ie scene offsetting Inheritance Object ComponentSystemBase ComponentSystem ComponentSystemGroup ProcessAfterLoadGroup Inherited Members ComponentSystemGroup.Systems ComponentSystemGroup.OnCreate() ComponentSystemGroup.OnDestroy() ComponentSystemGroup.AddSystemToUpdateList(ComponentSystemBase) ComponentSystemGroup.RemoveSystemFromUpdateList(ComponentSystemBase) ComponentSystemGroup.SortSystems() ComponentSystemGroup.OnStopRunning() ComponentSystemGroup.FixedRateManager ComponentSystemGroup.OnUpdate() ComponentSystem.PostUpdateCommands ComponentSystem.InitEntityQueryCache(Int32) ComponentSystem.Entities ComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnStartRunning() ComponentSystemBase.ExecutingSystemType ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetComponentTypeHandle<T>(Boolean) ComponentSystemBase.GetDynamicComponentTypeHandle(ComponentType) ComponentSystemBase.GetBufferTypeHandle<T>(Boolean) ComponentSystemBase.GetSharedComponentTypeHandle<T>() ComponentSystemBase.GetEntityTypeHandle() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.TryGetSingleton<T>(T) ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.TryGetSingletonEntity<T>(Entity) ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Scenes <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [WorldSystemFilter(WorldSystemFilterFlags.ProcessAfterLoad)] public class ProcessAfterLoadGroup : ComponentSystemGroup Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Scenes.ReferencedUnityObjects.Array.html": {
    "href": "api/Unity.Scenes.ReferencedUnityObjects.Array.html",
    "title": "Field Array | Entities | 0.17.0-preview.18",
    "keywords": "Field Array Namespace : Unity.Scenes <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public Object[] Array Returns Type Description Object []"
  },
  "api/Unity.Scenes.ReferencedUnityObjects.html": {
    "href": "api/Unity.Scenes.ReferencedUnityObjects.html",
    "title": "Class ReferencedUnityObjects | Entities | 0.17.0-preview.18",
    "keywords": "Class ReferencedUnityObjects Inheritance Object Object ScriptableObject ReferencedUnityObjects Inherited Members ScriptableObject.CreateInstance(String) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) Object.Destroy(Object) Object.DestroyImmediate(Object, Boolean) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, Boolean) Object.DontDestroyOnLoad(Object) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectOfType(Type) Object.FindObjectOfType(Type, Boolean) Object.ToString() Object.name Object.hideFlags Namespace : Unity.Scenes <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [MovedFrom(true, \"Unity.Entities\", \"Unity.Entities.Hybrid\", null)] public class ReferencedUnityObjects : ScriptableObject Fields Name Description Array"
  },
  "api/Unity.Scenes.ResolvedSectionEntity.html": {
    "href": "api/Unity.Scenes.ResolvedSectionEntity.html",
    "title": "Struct ResolvedSectionEntity | Entities | 0.17.0-preview.18",
    "keywords": "Struct ResolvedSectionEntity Namespace : Unity.Scenes <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct ResolvedSectionEntity : IBufferElementData Fields Name Description SectionEntity"
  },
  "api/Unity.Scenes.ResolvedSectionEntity.SectionEntity.html": {
    "href": "api/Unity.Scenes.ResolvedSectionEntity.SectionEntity.html",
    "title": "Field SectionEntity | Entities | 0.17.0-preview.18",
    "keywords": "Field SectionEntity Namespace : Unity.Scenes <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public Entity SectionEntity Returns Type Description Entity"
  },
  "api/Unity.Scenes.ResolveSceneSectionUtility.html": {
    "href": "api/Unity.Scenes.ResolveSceneSectionUtility.html",
    "title": "Class ResolveSceneSectionUtility | Entities | 0.17.0-preview.18",
    "keywords": "Class ResolveSceneSectionUtility Inheritance Object ResolveSceneSectionUtility Namespace : Unity.Scenes <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class ResolveSceneSectionUtility Methods Name Description ResolveSceneSections(EntityManager, Entity, Hash128, RequestSceneLoaded, Hash128)"
  },
  "api/Unity.Scenes.ResolveSceneSectionUtility.ResolveSceneSections.html": {
    "href": "api/Unity.Scenes.ResolveSceneSectionUtility.ResolveSceneSections.html",
    "title": "Method ResolveSceneSections | Entities | 0.17.0-preview.18",
    "keywords": "Method ResolveSceneSections ResolveSceneSections(EntityManager, Entity, Hash128, RequestSceneLoaded, Hash128) Declaration public static bool ResolveSceneSections(EntityManager EntityManager, Entity sceneEntity, Hash128 sceneGUID, RequestSceneLoaded requestSceneLoaded, Hash128 artifactHash) Parameters Type Name Description EntityManager EntityManager Entity sceneEntity Hash128 sceneGUID RequestSceneLoaded requestSceneLoaded Hash128 artifactHash Returns Type Description Boolean"
  },
  "api/Unity.Scenes.ResourceCatalogData.CurrentFileFormatVersion.html": {
    "href": "api/Unity.Scenes.ResourceCatalogData.CurrentFileFormatVersion.html",
    "title": "Field CurrentFileFormatVersion | Entities | 0.17.0-preview.18",
    "keywords": "Field CurrentFileFormatVersion File format needs to change anytime the data layout for this class changes. Namespace : Unity.Scenes <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static readonly int CurrentFileFormatVersion Returns Type Description Int32"
  },
  "api/Unity.Scenes.ResourceCatalogData.GetGUIDFromPath.html": {
    "href": "api/Unity.Scenes.ResourceCatalogData.GetGUIDFromPath.html",
    "title": "Method GetGUIDFromPath | Entities | 0.17.0-preview.18",
    "keywords": "Method GetGUIDFromPath GetGUIDFromPath(String) Slow path to lookup guid from a path. This first checks the passed in path then just the filename, then the lowercase version of the filename. Declaration public Hash128 GetGUIDFromPath(string path) Parameters Type Name Description String path The resource path. Returns Type Description Hash128 The guid for the resource."
  },
  "api/Unity.Scenes.ResourceCatalogData.html": {
    "href": "api/Unity.Scenes.ResourceCatalogData.html",
    "title": "Struct ResourceCatalogData | Entities | 0.17.0-preview.18",
    "keywords": "Struct ResourceCatalogData Container for resource data. Namespace : Unity.Scenes <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [MovedFrom(true, \"Unity.Entities.Hybrid\", \"Unity.Entities.Hybrid\", null)] public struct ResourceCatalogData Fields Name Description CurrentFileFormatVersion File format needs to change anytime the data layout for this class changes. paths Path information for resources. This is separate to keep the resources data streamlined as using paths is slow. resources The resource data. Methods Name Description GetGUIDFromPath(String) Slow path to lookup guid from a path. This first checks the passed in path then just the filename, then the lowercase version of the filename."
  },
  "api/Unity.Scenes.ResourceCatalogData.paths.html": {
    "href": "api/Unity.Scenes.ResourceCatalogData.paths.html",
    "title": "Field paths | Entities | 0.17.0-preview.18",
    "keywords": "Field paths Path information for resources. This is separate to keep the resources data streamlined as using paths is slow. Namespace : Unity.Scenes <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public BlobArray<BlobString> paths Returns Type Description BlobArray < BlobString >"
  },
  "api/Unity.Scenes.ResourceCatalogData.resources.html": {
    "href": "api/Unity.Scenes.ResourceCatalogData.resources.html",
    "title": "Field resources | Entities | 0.17.0-preview.18",
    "keywords": "Field resources The resource data. Namespace : Unity.Scenes <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public BlobArray<ResourceMetaData> resources Returns Type Description BlobArray < ResourceMetaData >"
  },
  "api/Unity.Scenes.ResourceMetaData.Flags.html": {
    "href": "api/Unity.Scenes.ResourceMetaData.Flags.html",
    "title": "Enum ResourceMetaData.Flags | Entities | 0.17.0-preview.18",
    "keywords": "Enum ResourceMetaData.Flags For scenes, if AutoLoad is true, the scene will be loaded when the player starts Namespace : Unity.Scenes <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Flags] public enum Flags Fields Name Description Value None 0 AutoLoad 1 Extension Methods SourceGenHelpers.GetFlags()"
  },
  "api/Unity.Scenes.ResourceMetaData.html": {
    "href": "api/Unity.Scenes.ResourceMetaData.html",
    "title": "Struct ResourceMetaData | Entities | 0.17.0-preview.18",
    "keywords": "Struct ResourceMetaData Information for resources to be loaded at runtime. Namespace : Unity.Scenes <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [MovedFrom(true, \"Unity.Entities.Hybrid\", \"Unity.Entities.Hybrid\", null)] public struct ResourceMetaData Fields Name Description ResourceFlags Flags to control the behavior of the asset ResourceId The guid of the asset ResourceType The type of resource."
  },
  "api/Unity.Scenes.ResourceMetaData.ResourceFlags.html": {
    "href": "api/Unity.Scenes.ResourceMetaData.ResourceFlags.html",
    "title": "Field ResourceFlags | Entities | 0.17.0-preview.18",
    "keywords": "Field ResourceFlags Flags to control the behavior of the asset Namespace : Unity.Scenes <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public ResourceMetaData.Flags ResourceFlags Returns Type Description ResourceMetaData.Flags"
  },
  "api/Unity.Scenes.ResourceMetaData.ResourceId.html": {
    "href": "api/Unity.Scenes.ResourceMetaData.ResourceId.html",
    "title": "Field ResourceId | Entities | 0.17.0-preview.18",
    "keywords": "Field ResourceId The guid of the asset Namespace : Unity.Scenes <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public Hash128 ResourceId Returns Type Description Hash128"
  },
  "api/Unity.Scenes.ResourceMetaData.ResourceType.html": {
    "href": "api/Unity.Scenes.ResourceMetaData.ResourceType.html",
    "title": "Field ResourceType | Entities | 0.17.0-preview.18",
    "keywords": "Field ResourceType The type of resource. Namespace : Unity.Scenes <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public ResourceMetaData.Type ResourceType Returns Type Description ResourceMetaData.Type"
  },
  "api/Unity.Scenes.ResourceMetaData.Type.html": {
    "href": "api/Unity.Scenes.ResourceMetaData.Type.html",
    "title": "Enum ResourceMetaData.Type | Entities | 0.17.0-preview.18",
    "keywords": "Enum ResourceMetaData.Type Currently Scene types are supported, assetbundles will need to be supported when dependencies are implemented Namespace : Unity.Scenes <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public enum Type Fields Name Description Value Unknown 0 Scene 1 Extension Methods SourceGenHelpers.GetFlags()"
  },
  "api/Unity.Scenes.SceneBoundingVolume.html": {
    "href": "api/Unity.Scenes.SceneBoundingVolume.html",
    "title": "Struct SceneBoundingVolume | Entities | 0.17.0-preview.18",
    "keywords": "Struct SceneBoundingVolume Namespace : Unity.Scenes <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [MovedFrom(true, \"Unity.Entities\", \"Unity.Entities.Hybrid\", null)] public struct SceneBoundingVolume : IComponentData Fields Name Description Value"
  },
  "api/Unity.Scenes.SceneBoundingVolume.Value.html": {
    "href": "api/Unity.Scenes.SceneBoundingVolume.Value.html",
    "title": "Field Value | Entities | 0.17.0-preview.18",
    "keywords": "Field Value Namespace : Unity.Scenes <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public MinMaxAABB Value Returns Type Description MinMaxAABB"
  },
  "api/Unity.Scenes.SceneBundleHandle.html": {
    "href": "api/Unity.Scenes.SceneBundleHandle.html",
    "title": "Class SceneBundleHandle | Entities | 0.17.0-preview.18",
    "keywords": "Class SceneBundleHandle Inheritance Object SceneBundleHandle Namespace : Unity.Scenes <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class SceneBundleHandle Properties Name Description UseAssetBundles"
  },
  "api/Unity.Scenes.SceneBundleHandle.UseAssetBundles.html": {
    "href": "api/Unity.Scenes.SceneBundleHandle.UseAssetBundles.html",
    "title": "Property UseAssetBundles | Entities | 0.17.0-preview.18",
    "keywords": "Property UseAssetBundles UseAssetBundles Declaration public static bool UseAssetBundles { get; } Property Value Type Description Boolean"
  },
  "api/Unity.Scenes.SceneSystem.BuildConfigurationGUID.html": {
    "href": "api/Unity.Scenes.SceneSystem.BuildConfigurationGUID.html",
    "title": "Property BuildConfigurationGUID | Entities | 0.17.0-preview.18",
    "keywords": "Property BuildConfigurationGUID BuildConfigurationGUID Declaration public Hash128 BuildConfigurationGUID { get; set; } Property Value Type Description Hash128"
  },
  "api/Unity.Scenes.SceneSystem.GetSceneEntity.html": {
    "href": "api/Unity.Scenes.SceneSystem.GetSceneEntity.html",
    "title": "Method GetSceneEntity | Entities | 0.17.0-preview.18",
    "keywords": "Method GetSceneEntity GetSceneEntity(Hash128) Find the scene given a guid. This will only return the first matching scene. Declaration public Entity GetSceneEntity(Hash128 sceneGUID) Parameters Type Name Description Hash128 sceneGUID The guid of the scene. Returns Type Description Entity The entity for the scene."
  },
  "api/Unity.Scenes.SceneSystem.GetSceneGUID.html": {
    "href": "api/Unity.Scenes.SceneSystem.GetSceneGUID.html",
    "title": "Method GetSceneGUID | Entities | 0.17.0-preview.18",
    "keywords": "Method GetSceneGUID GetSceneGUID(String) Get the guid for a scene path or name. This is a slow method - it is best to use the guid directly. Declaration public Hash128 GetSceneGUID(string scenePath) Parameters Type Name Description String scenePath The scene path or name. Returns Type Description Hash128 True if the scene guid exists."
  },
  "api/Unity.Scenes.SceneSystem.html": {
    "href": "api/Unity.Scenes.SceneSystem.html",
    "title": "Class SceneSystem | Entities | 0.17.0-preview.18",
    "keywords": "Class SceneSystem High level API for loading and unloading scenes Inheritance Object ComponentSystemBase ComponentSystem SceneSystem Inherited Members ComponentSystem.PostUpdateCommands ComponentSystem.InitEntityQueryCache(Int32) ComponentSystem.Entities ComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.ExecutingSystemType ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetComponentTypeHandle<T>(Boolean) ComponentSystemBase.GetDynamicComponentTypeHandle(ComponentType) ComponentSystemBase.GetBufferTypeHandle<T>(Boolean) ComponentSystemBase.GetSharedComponentTypeHandle<T>() ComponentSystemBase.GetEntityTypeHandle() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.TryGetSingleton<T>(T) ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.TryGetSingletonEntity<T>(Entity) ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Scenes <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [ExecuteAlways] [UpdateInGroup(typeof(SceneSystemGroup))] public class SceneSystem : ComponentSystem Fields Name Description k_SceneInfoFileName sceneLoadRequestArchetype sceneLoadRequestQuery Properties Name Description BuildConfigurationGUID Methods Name Description GetSceneEntity(Hash128) Find the scene given a guid. This will only return the first matching scene. GetSceneGUID(String) Get the guid for a scene path or name. This is a slow method - it is best to use the guid directly. IsSceneLoaded(Entity) Check if a scene or subscene is loaded. IsSectionLoaded(Entity) Check if a section of a subscene is loaded. LoadSceneAsync(Entity, SceneSystem.LoadParameters) LoadSceneAsync(Hash128, SceneSystem.LoadParameters) Load a scene by its asset GUID. OnCreate() OnUpdate() UnloadScene(Entity, SceneSystem.UnloadParameters) Unload the scene. UnloadScene(Hash128, SceneSystem.UnloadParameters) Unload a SubScene by GUID. This will only unload the first matching scene. Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Scenes.SceneSystem.IsSceneLoaded.html": {
    "href": "api/Unity.Scenes.SceneSystem.IsSceneLoaded.html",
    "title": "Method IsSceneLoaded | Entities | 0.17.0-preview.18",
    "keywords": "Method IsSceneLoaded IsSceneLoaded(Entity) Check if a scene or subscene is loaded. Declaration public bool IsSceneLoaded(Entity entity) Parameters Type Name Description Entity entity The entity with the loading component data. This is the entity returned by LoadSceneAsync. Returns Type Description Boolean True if the scene is loaded."
  },
  "api/Unity.Scenes.SceneSystem.IsSectionLoaded.html": {
    "href": "api/Unity.Scenes.SceneSystem.IsSectionLoaded.html",
    "title": "Method IsSectionLoaded | Entities | 0.17.0-preview.18",
    "keywords": "Method IsSectionLoaded IsSectionLoaded(Entity) Check if a section of a subscene is loaded. Declaration public bool IsSectionLoaded(Entity sectionEntity) Parameters Type Name Description Entity sectionEntity The section entity representing the scene section. The section entities can be found in the ResolvedSectionEntity buffer on the scene entity. Returns Type Description Boolean True if the scene section is loaded."
  },
  "api/Unity.Scenes.SceneSystem.k_SceneInfoFileName.html": {
    "href": "api/Unity.Scenes.SceneSystem.k_SceneInfoFileName.html",
    "title": "Field k_SceneInfoFileName | Entities | 0.17.0-preview.18",
    "keywords": "Field k_SceneInfoFileName Namespace : Unity.Scenes <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public const string k_SceneInfoFileName = \"catalog.bin\" Returns Type Description String"
  },
  "api/Unity.Scenes.SceneSystem.LoadParameters.AutoLoad.html": {
    "href": "api/Unity.Scenes.SceneSystem.LoadParameters.AutoLoad.html",
    "title": "Property AutoLoad | Entities | 0.17.0-preview.18",
    "keywords": "Property AutoLoad AutoLoad Declaration public bool AutoLoad { get; set; } Property Value Type Description Boolean"
  },
  "api/Unity.Scenes.SceneSystem.LoadParameters.Flags.html": {
    "href": "api/Unity.Scenes.SceneSystem.LoadParameters.Flags.html",
    "title": "Field Flags | Entities | 0.17.0-preview.18",
    "keywords": "Field Flags Namespace : Unity.Scenes <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public SceneLoadFlags Flags Returns Type Description SceneLoadFlags"
  },
  "api/Unity.Scenes.SceneSystem.LoadParameters.html": {
    "href": "api/Unity.Scenes.SceneSystem.LoadParameters.html",
    "title": "Struct SceneSystem.LoadParameters | Entities | 0.17.0-preview.18",
    "keywords": "Struct SceneSystem.LoadParameters Parameters for loading scenes. Namespace : Unity.Scenes <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct LoadParameters Fields Name Description Flags Priority Properties Name Description AutoLoad"
  },
  "api/Unity.Scenes.SceneSystem.LoadParameters.Priority.html": {
    "href": "api/Unity.Scenes.SceneSystem.LoadParameters.Priority.html",
    "title": "Field Priority | Entities | 0.17.0-preview.18",
    "keywords": "Field Priority Namespace : Unity.Scenes <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public int Priority Returns Type Description Int32"
  },
  "api/Unity.Scenes.SceneSystem.LoadSceneAsync.html": {
    "href": "api/Unity.Scenes.SceneSystem.LoadSceneAsync.html",
    "title": "Method LoadSceneAsync | Entities | 0.17.0-preview.18",
    "keywords": "Method LoadSceneAsync LoadSceneAsync(Hash128, SceneSystem.LoadParameters) Load a scene by its asset GUID. Declaration public Entity LoadSceneAsync(Hash128 sceneGUID, SceneSystem.LoadParameters parameters = default(SceneSystem.LoadParameters)) Parameters Type Name Description Hash128 sceneGUID The guid of the scene. SceneSystem.LoadParameters parameters The load parameters for the scene. Returns Type Description Entity An entity representing the loading state of the scene. LoadSceneAsync(Entity, SceneSystem.LoadParameters) Declaration public void LoadSceneAsync(Entity sceneEntity, SceneSystem.LoadParameters parameters = default(SceneSystem.LoadParameters)) Parameters Type Name Description Entity sceneEntity SceneSystem.LoadParameters parameters"
  },
  "api/Unity.Scenes.SceneSystem.OnCreate.html": {
    "href": "api/Unity.Scenes.SceneSystem.OnCreate.html",
    "title": "Method OnCreate | Entities | 0.17.0-preview.18",
    "keywords": "Method OnCreate OnCreate() Declaration protected override void OnCreate() Overrides ComponentSystemBase.OnCreate()"
  },
  "api/Unity.Scenes.SceneSystem.OnUpdate.html": {
    "href": "api/Unity.Scenes.SceneSystem.OnUpdate.html",
    "title": "Method OnUpdate | Entities | 0.17.0-preview.18",
    "keywords": "Method OnUpdate OnUpdate() Declaration protected override void OnUpdate() Overrides ComponentSystem.OnUpdate()"
  },
  "api/Unity.Scenes.SceneSystem.sceneLoadRequestArchetype.html": {
    "href": "api/Unity.Scenes.SceneSystem.sceneLoadRequestArchetype.html",
    "title": "Field sceneLoadRequestArchetype | Entities | 0.17.0-preview.18",
    "keywords": "Field sceneLoadRequestArchetype Namespace : Unity.Scenes <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax protected EntityArchetype sceneLoadRequestArchetype Returns Type Description EntityArchetype"
  },
  "api/Unity.Scenes.SceneSystem.sceneLoadRequestQuery.html": {
    "href": "api/Unity.Scenes.SceneSystem.sceneLoadRequestQuery.html",
    "title": "Field sceneLoadRequestQuery | Entities | 0.17.0-preview.18",
    "keywords": "Field sceneLoadRequestQuery Namespace : Unity.Scenes <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax protected EntityQuery sceneLoadRequestQuery Returns Type Description EntityQuery"
  },
  "api/Unity.Scenes.SceneSystem.UnloadParameters.html": {
    "href": "api/Unity.Scenes.SceneSystem.UnloadParameters.html",
    "title": "Enum SceneSystem.UnloadParameters | Entities | 0.17.0-preview.18",
    "keywords": "Enum SceneSystem.UnloadParameters Flags controlling the unload process for SubScenes. Namespace : Unity.Scenes <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Flags] public enum UnloadParameters Fields Name Description Value Default 0 DestroySectionProxyEntities 2 DestroySceneProxyEntity 4 DontRemoveRequestSceneLoaded 8 Extension Methods SourceGenHelpers.GetFlags()"
  },
  "api/Unity.Scenes.SceneSystem.UnloadScene.html": {
    "href": "api/Unity.Scenes.SceneSystem.UnloadScene.html",
    "title": "Method UnloadScene | Entities | 0.17.0-preview.18",
    "keywords": "Method UnloadScene UnloadScene(Entity, SceneSystem.UnloadParameters) Unload the scene. Declaration public void UnloadScene(Entity sceneEntity, SceneSystem.UnloadParameters unloadParams = SceneSystem.UnloadParameters.Default) Parameters Type Name Description Entity sceneEntity The entity for the scene. SceneSystem.UnloadParameters unloadParams Parameters controlling the unload process. These are ignored for GameObject scenes. UnloadScene(Hash128, SceneSystem.UnloadParameters) Unload a SubScene by GUID. This will only unload the first matching scene. Declaration public void UnloadScene(Hash128 sceneGUID, SceneSystem.UnloadParameters unloadParams = SceneSystem.UnloadParameters.Default) Parameters Type Name Description Hash128 sceneGUID The guid of the scene. SceneSystem.UnloadParameters unloadParams Parameters controlling the unload process. These are ignored for GameObject scenes."
  },
  "api/Unity.Scenes.SceneSystemGroup.html": {
    "href": "api/Unity.Scenes.SceneSystemGroup.html",
    "title": "Class SceneSystemGroup | Entities | 0.17.0-preview.18",
    "keywords": "Class SceneSystemGroup The group of systems responsible for loading and unloading scenes. Inheritance Object ComponentSystemBase ComponentSystem ComponentSystemGroup SceneSystemGroup Inherited Members ComponentSystemGroup.Systems ComponentSystemGroup.OnCreate() ComponentSystemGroup.OnDestroy() ComponentSystemGroup.AddSystemToUpdateList(ComponentSystemBase) ComponentSystemGroup.RemoveSystemFromUpdateList(ComponentSystemBase) ComponentSystemGroup.SortSystems() ComponentSystemGroup.OnStopRunning() ComponentSystemGroup.FixedRateManager ComponentSystemGroup.OnUpdate() ComponentSystem.PostUpdateCommands ComponentSystem.InitEntityQueryCache(Int32) ComponentSystem.Entities ComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnStartRunning() ComponentSystemBase.ExecutingSystemType ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetComponentTypeHandle<T>(Boolean) ComponentSystemBase.GetDynamicComponentTypeHandle(ComponentType) ComponentSystemBase.GetBufferTypeHandle<T>(Boolean) ComponentSystemBase.GetSharedComponentTypeHandle<T>() ComponentSystemBase.GetEntityTypeHandle() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.TryGetSingleton<T>(T) ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.TryGetSingletonEntity<T>(Entity) ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Scenes <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [ExecuteAlways] [UpdateInGroup(typeof(InitializationSystemGroup))] public class SceneSystemGroup : ComponentSystemGroup Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Scenes.SerializeUtilityHybrid.Deserialize.html": {
    "href": "api/Unity.Scenes.SerializeUtilityHybrid.Deserialize.html",
    "title": "Method Deserialize | Entities | 0.17.0-preview.18",
    "keywords": "Method Deserialize Deserialize(EntityManager, BinaryReader, ReferencedUnityObjects) Declaration public static void Deserialize(EntityManager manager, BinaryReader reader, ReferencedUnityObjects objRefs) Parameters Type Name Description EntityManager manager BinaryReader reader ReferencedUnityObjects objRefs"
  },
  "api/Unity.Scenes.SerializeUtilityHybrid.DeserializeObjectReferences.html": {
    "href": "api/Unity.Scenes.SerializeUtilityHybrid.DeserializeObjectReferences.html",
    "title": "Method DeserializeObjectReferences | Entities | 0.17.0-preview.18",
    "keywords": "Method DeserializeObjectReferences DeserializeObjectReferences(ReferencedUnityObjects, out Object[]) Declaration public static void DeserializeObjectReferences(ReferencedUnityObjects objRefs, out Object[] objectReferences) Parameters Type Name Description ReferencedUnityObjects objRefs Object [] objectReferences"
  },
  "api/Unity.Scenes.SerializeUtilityHybrid.html": {
    "href": "api/Unity.Scenes.SerializeUtilityHybrid.html",
    "title": "Class SerializeUtilityHybrid | Entities | 0.17.0-preview.18",
    "keywords": "Class SerializeUtilityHybrid Inheritance Object SerializeUtilityHybrid Namespace : Unity.Scenes <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [MovedFrom(true, \"Unity.Entities.Serialization\", \"Unity.Entities.Hybrid\", null)] public static class SerializeUtilityHybrid Methods Name Description Deserialize(EntityManager, BinaryReader, ReferencedUnityObjects) DeserializeObjectReferences(ReferencedUnityObjects, out Object[]) Serialize(EntityManager, BinaryWriter, out ReferencedUnityObjects) Serialize(EntityManager, BinaryWriter, out ReferencedUnityObjects, NativeArray<EntityRemapUtility.EntityRemapInfo>) SerializeObjectReferences(Object[], out ReferencedUnityObjects)"
  },
  "api/Unity.Scenes.SerializeUtilityHybrid.Serialize.html": {
    "href": "api/Unity.Scenes.SerializeUtilityHybrid.Serialize.html",
    "title": "Method Serialize | Entities | 0.17.0-preview.18",
    "keywords": "Method Serialize Serialize(EntityManager, BinaryWriter, out ReferencedUnityObjects) Declaration public static void Serialize(EntityManager manager, BinaryWriter writer, out ReferencedUnityObjects objRefs) Parameters Type Name Description EntityManager manager BinaryWriter writer ReferencedUnityObjects objRefs Serialize(EntityManager, BinaryWriter, out ReferencedUnityObjects, NativeArray<EntityRemapUtility.EntityRemapInfo>) Declaration public static void Serialize(EntityManager manager, BinaryWriter writer, out ReferencedUnityObjects objRefs, NativeArray<EntityRemapUtility.EntityRemapInfo> entityRemapInfos) Parameters Type Name Description EntityManager manager BinaryWriter writer ReferencedUnityObjects objRefs NativeArray < EntityRemapUtility.EntityRemapInfo > entityRemapInfos"
  },
  "api/Unity.Scenes.SerializeUtilityHybrid.SerializeObjectReferences.html": {
    "href": "api/Unity.Scenes.SerializeUtilityHybrid.SerializeObjectReferences.html",
    "title": "Method SerializeObjectReferences | Entities | 0.17.0-preview.18",
    "keywords": "Method SerializeObjectReferences SerializeObjectReferences(Object[], out ReferencedUnityObjects) Declaration public static void SerializeObjectReferences(Object[] referencedObjects, out ReferencedUnityObjects objRefs) Parameters Type Name Description Object [] referencedObjects ReferencedUnityObjects objRefs"
  },
  "api/Unity.Scenes.SubScene.AutoLoadScene.html": {
    "href": "api/Unity.Scenes.SubScene.AutoLoadScene.html",
    "title": "Field AutoLoadScene | Entities | 0.17.0-preview.18",
    "keywords": "Field AutoLoadScene Namespace : Unity.Scenes <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public bool AutoLoadScene Returns Type Description Boolean"
  },
  "api/Unity.Scenes.SubScene.html": {
    "href": "api/Unity.Scenes.SubScene.html",
    "title": "Class SubScene | Entities | 0.17.0-preview.18",
    "keywords": "Class SubScene Inheritance Object Object Component Behaviour MonoBehaviour SubScene Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(String, Single) MonoBehaviour.InvokeRepeating(String, Single, Single) MonoBehaviour.CancelInvoke(String) MonoBehaviour.IsInvoking(String) MonoBehaviour.StartCoroutine(String) MonoBehaviour.StartCoroutine(String, Object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(String) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(Object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, Component) Component.TryGetComponent<T>(T) Component.GetComponent(String) Component.GetComponentInChildren(Type, Boolean) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(Boolean) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, Boolean) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(Boolean) Component.GetComponentsInChildren<T>(Boolean, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, Boolean) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(Boolean) Component.GetComponentsInParent<T>(Boolean, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(String) Component.SendMessageUpwards(String, Object, SendMessageOptions) Component.SendMessageUpwards(String, Object) Component.SendMessageUpwards(String) Component.SendMessageUpwards(String, SendMessageOptions) Component.SendMessage(String, Object) Component.SendMessage(String) Component.SendMessage(String, Object, SendMessageOptions) Component.SendMessage(String, SendMessageOptions) Component.BroadcastMessage(String, Object, SendMessageOptions) Component.BroadcastMessage(String, Object) Component.BroadcastMessage(String) Component.BroadcastMessage(String, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) Object.Destroy(Object) Object.DestroyImmediate(Object, Boolean) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, Boolean) Object.DontDestroyOnLoad(Object) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectOfType(Type) Object.FindObjectOfType(Type, Boolean) Object.ToString() Object.name Object.hideFlags Namespace : Unity.Scenes <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [ExecuteAlways] [DisallowMultipleComponent] public class SubScene : MonoBehaviour Fields Name Description AutoLoadScene Properties Name Description SceneGUID"
  },
  "api/Unity.Scenes.SubScene.SceneGUID.html": {
    "href": "api/Unity.Scenes.SubScene.SceneGUID.html",
    "title": "Property SceneGUID | Entities | 0.17.0-preview.18",
    "keywords": "Property SceneGUID SceneGUID Declaration public Hash128 SceneGUID { get; } Property Value Type Description Hash128"
  },
  "api/Unity.Transforms.Child.html": {
    "href": "api/Unity.Transforms.Child.html",
    "title": "Struct Child | Entities | 0.17.0-preview.18",
    "keywords": "Struct Child Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] [InternalBufferCapacity(8)] [WriteGroup(typeof(ParentScaleInverse))] public struct Child : ISystemStateBufferElementData, IBufferElementData Fields Name Description Value"
  },
  "api/Unity.Transforms.Child.Value.html": {
    "href": "api/Unity.Transforms.Child.Value.html",
    "title": "Field Value | Entities | 0.17.0-preview.18",
    "keywords": "Field Value Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public Entity Value Returns Type Description Entity"
  },
  "api/Unity.Transforms.CompositeRotation.html": {
    "href": "api/Unity.Transforms.CompositeRotation.html",
    "title": "Struct CompositeRotation | Entities | 0.17.0-preview.18",
    "keywords": "Struct CompositeRotation Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] [WriteGroup(typeof(LocalToWorld))] [WriteGroup(typeof(LocalToParent))] public struct CompositeRotation : IComponentData Fields Name Description Value"
  },
  "api/Unity.Transforms.CompositeRotation.Value.html": {
    "href": "api/Unity.Transforms.CompositeRotation.Value.html",
    "title": "Field Value | Entities | 0.17.0-preview.18",
    "keywords": "Field Value Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public float4x4 Value Returns Type Description float4x4"
  },
  "api/Unity.Transforms.CompositeRotationSystem.html": {
    "href": "api/Unity.Transforms.CompositeRotationSystem.html",
    "title": "Class CompositeRotationSystem | Entities | 0.17.0-preview.18",
    "keywords": "Class CompositeRotationSystem Inheritance Object ComponentSystemBase JobComponentSystem CompositeRotationSystem EndFrameCompositeRotationSystem Inherited Members JobComponentSystem.Entities JobComponentSystem.Job JobComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.ExecutingSystemType ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetComponentTypeHandle<T>(Boolean) ComponentSystemBase.GetDynamicComponentTypeHandle(ComponentType) ComponentSystemBase.GetBufferTypeHandle<T>(Boolean) ComponentSystemBase.GetSharedComponentTypeHandle<T>() ComponentSystemBase.GetEntityTypeHandle() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.TryGetSingleton<T>(T) ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.TryGetSingletonEntity<T>(Entity) ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public abstract class CompositeRotationSystem : JobComponentSystem Methods Name Description OnCreate() OnUpdate(JobHandle) Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Transforms.CompositeRotationSystem.OnCreate.html": {
    "href": "api/Unity.Transforms.CompositeRotationSystem.OnCreate.html",
    "title": "Method OnCreate | Entities | 0.17.0-preview.18",
    "keywords": "Method OnCreate OnCreate() Declaration protected override void OnCreate() Overrides ComponentSystemBase.OnCreate()"
  },
  "api/Unity.Transforms.CompositeRotationSystem.OnUpdate.html": {
    "href": "api/Unity.Transforms.CompositeRotationSystem.OnUpdate.html",
    "title": "Method OnUpdate | Entities | 0.17.0-preview.18",
    "keywords": "Method OnUpdate OnUpdate(JobHandle) Declaration protected override JobHandle OnUpdate(JobHandle inputDeps) Parameters Type Name Description JobHandle inputDeps Returns Type Description JobHandle Overrides JobComponentSystem.OnUpdate(JobHandle)"
  },
  "api/Unity.Transforms.CompositeScale.html": {
    "href": "api/Unity.Transforms.CompositeScale.html",
    "title": "Struct CompositeScale | Entities | 0.17.0-preview.18",
    "keywords": "Struct CompositeScale Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] [WriteGroup(typeof(LocalToWorld))] [WriteGroup(typeof(LocalToParent))] [WriteGroup(typeof(ParentScaleInverse))] public struct CompositeScale : IComponentData Fields Name Description Value"
  },
  "api/Unity.Transforms.CompositeScale.Value.html": {
    "href": "api/Unity.Transforms.CompositeScale.Value.html",
    "title": "Field Value | Entities | 0.17.0-preview.18",
    "keywords": "Field Value Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public float4x4 Value Returns Type Description float4x4"
  },
  "api/Unity.Transforms.CompositeScaleSystem.html": {
    "href": "api/Unity.Transforms.CompositeScaleSystem.html",
    "title": "Class CompositeScaleSystem | Entities | 0.17.0-preview.18",
    "keywords": "Class CompositeScaleSystem Inheritance Object ComponentSystemBase JobComponentSystem CompositeScaleSystem EndFrameCompositeScaleSystem Inherited Members JobComponentSystem.Entities JobComponentSystem.Job JobComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.ExecutingSystemType ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetComponentTypeHandle<T>(Boolean) ComponentSystemBase.GetDynamicComponentTypeHandle(ComponentType) ComponentSystemBase.GetBufferTypeHandle<T>(Boolean) ComponentSystemBase.GetSharedComponentTypeHandle<T>() ComponentSystemBase.GetEntityTypeHandle() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.TryGetSingleton<T>(T) ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.TryGetSingletonEntity<T>(Entity) ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public abstract class CompositeScaleSystem : JobComponentSystem Methods Name Description OnCreate() OnUpdate(JobHandle) Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Transforms.CompositeScaleSystem.OnCreate.html": {
    "href": "api/Unity.Transforms.CompositeScaleSystem.OnCreate.html",
    "title": "Method OnCreate | Entities | 0.17.0-preview.18",
    "keywords": "Method OnCreate OnCreate() Declaration protected override void OnCreate() Overrides ComponentSystemBase.OnCreate()"
  },
  "api/Unity.Transforms.CompositeScaleSystem.OnUpdate.html": {
    "href": "api/Unity.Transforms.CompositeScaleSystem.OnUpdate.html",
    "title": "Method OnUpdate | Entities | 0.17.0-preview.18",
    "keywords": "Method OnUpdate OnUpdate(JobHandle) Declaration protected override JobHandle OnUpdate(JobHandle inputDeps) Parameters Type Name Description JobHandle inputDeps Returns Type Description JobHandle Overrides JobComponentSystem.OnUpdate(JobHandle)"
  },
  "api/Unity.Transforms.CopyInitialTransformFromGameObject.html": {
    "href": "api/Unity.Transforms.CopyInitialTransformFromGameObject.html",
    "title": "Struct CopyInitialTransformFromGameObject | Entities | 0.17.0-preview.18",
    "keywords": "Struct CopyInitialTransformFromGameObject Copy Transform from GameObject associated with Entity to TransformMatrix. Once only. Component is removed after copy. Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct CopyInitialTransformFromGameObject : IComponentData"
  },
  "api/Unity.Transforms.CopyInitialTransformFromGameObjectSystem.html": {
    "href": "api/Unity.Transforms.CopyInitialTransformFromGameObjectSystem.html",
    "title": "Class CopyInitialTransformFromGameObjectSystem | Entities | 0.17.0-preview.18",
    "keywords": "Class CopyInitialTransformFromGameObjectSystem Inheritance Object ComponentSystemBase JobComponentSystem CopyInitialTransformFromGameObjectSystem Inherited Members JobComponentSystem.Entities JobComponentSystem.Job JobComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.ExecutingSystemType ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetComponentTypeHandle<T>(Boolean) ComponentSystemBase.GetDynamicComponentTypeHandle(ComponentType) ComponentSystemBase.GetBufferTypeHandle<T>(Boolean) ComponentSystemBase.GetSharedComponentTypeHandle<T>() ComponentSystemBase.GetEntityTypeHandle() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.TryGetSingleton<T>(T) ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.TryGetSingletonEntity<T>(Entity) ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [UpdateInGroup(typeof(InitializationSystemGroup))] public class CopyInitialTransformFromGameObjectSystem : JobComponentSystem Methods Name Description OnCreate() OnUpdate(JobHandle) Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Transforms.CopyInitialTransformFromGameObjectSystem.OnCreate.html": {
    "href": "api/Unity.Transforms.CopyInitialTransformFromGameObjectSystem.OnCreate.html",
    "title": "Method OnCreate | Entities | 0.17.0-preview.18",
    "keywords": "Method OnCreate OnCreate() Declaration protected override void OnCreate() Overrides ComponentSystemBase.OnCreate()"
  },
  "api/Unity.Transforms.CopyInitialTransformFromGameObjectSystem.OnUpdate.html": {
    "href": "api/Unity.Transforms.CopyInitialTransformFromGameObjectSystem.OnUpdate.html",
    "title": "Method OnUpdate | Entities | 0.17.0-preview.18",
    "keywords": "Method OnUpdate OnUpdate(JobHandle) Declaration protected override JobHandle OnUpdate(JobHandle inputDeps) Parameters Type Name Description JobHandle inputDeps Returns Type Description JobHandle Overrides JobComponentSystem.OnUpdate(JobHandle)"
  },
  "api/Unity.Transforms.CopyTransformFromGameObject.html": {
    "href": "api/Unity.Transforms.CopyTransformFromGameObject.html",
    "title": "Struct CopyTransformFromGameObject | Entities | 0.17.0-preview.18",
    "keywords": "Struct CopyTransformFromGameObject Copy Transform from GameObject associated with Entity to TransformMatrix. Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [WriteGroup(typeof(LocalToWorld))] public struct CopyTransformFromGameObject : IComponentData"
  },
  "api/Unity.Transforms.CopyTransformFromGameObjectSystem.html": {
    "href": "api/Unity.Transforms.CopyTransformFromGameObjectSystem.html",
    "title": "Class CopyTransformFromGameObjectSystem | Entities | 0.17.0-preview.18",
    "keywords": "Class CopyTransformFromGameObjectSystem Inheritance Object ComponentSystemBase JobComponentSystem CopyTransformFromGameObjectSystem Inherited Members JobComponentSystem.Entities JobComponentSystem.Job JobComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.ExecutingSystemType ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetComponentTypeHandle<T>(Boolean) ComponentSystemBase.GetDynamicComponentTypeHandle(ComponentType) ComponentSystemBase.GetBufferTypeHandle<T>(Boolean) ComponentSystemBase.GetSharedComponentTypeHandle<T>() ComponentSystemBase.GetEntityTypeHandle() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.TryGetSingleton<T>(T) ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.TryGetSingletonEntity<T>(Entity) ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [ExecuteAlways] [UpdateInGroup(typeof(TransformSystemGroup))] [UpdateBefore(typeof(EndFrameTRSToLocalToWorldSystem))] public class CopyTransformFromGameObjectSystem : JobComponentSystem Methods Name Description OnCreate() OnUpdate(JobHandle) Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Transforms.CopyTransformFromGameObjectSystem.OnCreate.html": {
    "href": "api/Unity.Transforms.CopyTransformFromGameObjectSystem.OnCreate.html",
    "title": "Method OnCreate | Entities | 0.17.0-preview.18",
    "keywords": "Method OnCreate OnCreate() Declaration protected override void OnCreate() Overrides ComponentSystemBase.OnCreate()"
  },
  "api/Unity.Transforms.CopyTransformFromGameObjectSystem.OnUpdate.html": {
    "href": "api/Unity.Transforms.CopyTransformFromGameObjectSystem.OnUpdate.html",
    "title": "Method OnUpdate | Entities | 0.17.0-preview.18",
    "keywords": "Method OnUpdate OnUpdate(JobHandle) Declaration protected override JobHandle OnUpdate(JobHandle inputDeps) Parameters Type Name Description JobHandle inputDeps Returns Type Description JobHandle Overrides JobComponentSystem.OnUpdate(JobHandle)"
  },
  "api/Unity.Transforms.CopyTransformFromPrimaryEntityTag.html": {
    "href": "api/Unity.Transforms.CopyTransformFromPrimaryEntityTag.html",
    "title": "Struct CopyTransformFromPrimaryEntityTag | Entities | 0.17.0-preview.18",
    "keywords": "Struct CopyTransformFromPrimaryEntityTag Mark an additional entity with this tag component to instruct the incremental transform conversion system to copy the transform data from the primary entity. This allows you to copy data to additional entities without having to specify a dependency. Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct CopyTransformFromPrimaryEntityTag : IComponentData"
  },
  "api/Unity.Transforms.CopyTransformToGameObject.html": {
    "href": "api/Unity.Transforms.CopyTransformToGameObject.html",
    "title": "Struct CopyTransformToGameObject | Entities | 0.17.0-preview.18",
    "keywords": "Struct CopyTransformToGameObject Copy Transform to GameObject associated with Entity from TransformMatrix. Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct CopyTransformToGameObject : IComponentData"
  },
  "api/Unity.Transforms.CopyTransformToGameObjectSystem.html": {
    "href": "api/Unity.Transforms.CopyTransformToGameObjectSystem.html",
    "title": "Class CopyTransformToGameObjectSystem | Entities | 0.17.0-preview.18",
    "keywords": "Class CopyTransformToGameObjectSystem Inheritance Object ComponentSystemBase JobComponentSystem CopyTransformToGameObjectSystem Inherited Members JobComponentSystem.Entities JobComponentSystem.Job JobComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.ExecutingSystemType ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetComponentTypeHandle<T>(Boolean) ComponentSystemBase.GetDynamicComponentTypeHandle(ComponentType) ComponentSystemBase.GetBufferTypeHandle<T>(Boolean) ComponentSystemBase.GetSharedComponentTypeHandle<T>() ComponentSystemBase.GetEntityTypeHandle() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.TryGetSingleton<T>(T) ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.TryGetSingletonEntity<T>(Entity) ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [ExecuteAlways] [UpdateInGroup(typeof(TransformSystemGroup))] [UpdateAfter(typeof(EndFrameLocalToParentSystem))] public class CopyTransformToGameObjectSystem : JobComponentSystem Methods Name Description OnCreate() OnUpdate(JobHandle) Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Transforms.CopyTransformToGameObjectSystem.OnCreate.html": {
    "href": "api/Unity.Transforms.CopyTransformToGameObjectSystem.OnCreate.html",
    "title": "Method OnCreate | Entities | 0.17.0-preview.18",
    "keywords": "Method OnCreate OnCreate() Declaration protected override void OnCreate() Overrides ComponentSystemBase.OnCreate()"
  },
  "api/Unity.Transforms.CopyTransformToGameObjectSystem.OnUpdate.html": {
    "href": "api/Unity.Transforms.CopyTransformToGameObjectSystem.OnUpdate.html",
    "title": "Method OnUpdate | Entities | 0.17.0-preview.18",
    "keywords": "Method OnUpdate OnUpdate(JobHandle) Declaration protected override JobHandle OnUpdate(JobHandle inputDeps) Parameters Type Name Description JobHandle inputDeps Returns Type Description JobHandle Overrides JobComponentSystem.OnUpdate(JobHandle)"
  },
  "api/Unity.Transforms.EndFrameCompositeRotationSystem.html": {
    "href": "api/Unity.Transforms.EndFrameCompositeRotationSystem.html",
    "title": "Class EndFrameCompositeRotationSystem | Entities | 0.17.0-preview.18",
    "keywords": "Class EndFrameCompositeRotationSystem Inheritance Object ComponentSystemBase JobComponentSystem CompositeRotationSystem EndFrameCompositeRotationSystem Inherited Members CompositeRotationSystem.OnCreate() CompositeRotationSystem.OnUpdate(JobHandle) JobComponentSystem.Entities JobComponentSystem.Job JobComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.ExecutingSystemType ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetComponentTypeHandle<T>(Boolean) ComponentSystemBase.GetDynamicComponentTypeHandle(ComponentType) ComponentSystemBase.GetBufferTypeHandle<T>(Boolean) ComponentSystemBase.GetSharedComponentTypeHandle<T>() ComponentSystemBase.GetEntityTypeHandle() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.TryGetSingleton<T>(T) ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.TryGetSingletonEntity<T>(Entity) ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [ExecuteAlways] [UpdateInGroup(typeof(TransformSystemGroup))] [UpdateAfter(typeof(EndFrameRotationEulerSystem))] public class EndFrameCompositeRotationSystem : CompositeRotationSystem Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Transforms.EndFrameCompositeScaleSystem.html": {
    "href": "api/Unity.Transforms.EndFrameCompositeScaleSystem.html",
    "title": "Class EndFrameCompositeScaleSystem | Entities | 0.17.0-preview.18",
    "keywords": "Class EndFrameCompositeScaleSystem Inheritance Object ComponentSystemBase JobComponentSystem CompositeScaleSystem EndFrameCompositeScaleSystem Inherited Members CompositeScaleSystem.OnCreate() CompositeScaleSystem.OnUpdate(JobHandle) JobComponentSystem.Entities JobComponentSystem.Job JobComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.ExecutingSystemType ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetComponentTypeHandle<T>(Boolean) ComponentSystemBase.GetDynamicComponentTypeHandle(ComponentType) ComponentSystemBase.GetBufferTypeHandle<T>(Boolean) ComponentSystemBase.GetSharedComponentTypeHandle<T>() ComponentSystemBase.GetEntityTypeHandle() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.TryGetSingleton<T>(T) ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.TryGetSingletonEntity<T>(Entity) ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [ExecuteAlways] [UpdateInGroup(typeof(TransformSystemGroup))] public class EndFrameCompositeScaleSystem : CompositeScaleSystem Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Transforms.EndFrameLocalToParentSystem.html": {
    "href": "api/Unity.Transforms.EndFrameLocalToParentSystem.html",
    "title": "Class EndFrameLocalToParentSystem | Entities | 0.17.0-preview.18",
    "keywords": "Class EndFrameLocalToParentSystem Inheritance Object ComponentSystemBase JobComponentSystem LocalToParentSystem EndFrameLocalToParentSystem Inherited Members LocalToParentSystem.OnCreate() LocalToParentSystem.OnUpdate(JobHandle) JobComponentSystem.Entities JobComponentSystem.Job JobComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.ExecutingSystemType ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetComponentTypeHandle<T>(Boolean) ComponentSystemBase.GetDynamicComponentTypeHandle(ComponentType) ComponentSystemBase.GetBufferTypeHandle<T>(Boolean) ComponentSystemBase.GetSharedComponentTypeHandle<T>() ComponentSystemBase.GetEntityTypeHandle() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.TryGetSingleton<T>(T) ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.TryGetSingletonEntity<T>(Entity) ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [ExecuteAlways] [UpdateInGroup(typeof(TransformSystemGroup))] [UpdateAfter(typeof(EndFrameTRSToLocalToParentSystem))] public class EndFrameLocalToParentSystem : LocalToParentSystem Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Transforms.EndFrameParentScaleInverseSystem.html": {
    "href": "api/Unity.Transforms.EndFrameParentScaleInverseSystem.html",
    "title": "Class EndFrameParentScaleInverseSystem | Entities | 0.17.0-preview.18",
    "keywords": "Class EndFrameParentScaleInverseSystem Inheritance Object ComponentSystemBase JobComponentSystem ParentScaleInverseSystem EndFrameParentScaleInverseSystem Inherited Members ParentScaleInverseSystem.OnCreate() ParentScaleInverseSystem.OnUpdate(JobHandle) JobComponentSystem.Entities JobComponentSystem.Job JobComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.ExecutingSystemType ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetComponentTypeHandle<T>(Boolean) ComponentSystemBase.GetDynamicComponentTypeHandle(ComponentType) ComponentSystemBase.GetBufferTypeHandle<T>(Boolean) ComponentSystemBase.GetSharedComponentTypeHandle<T>() ComponentSystemBase.GetEntityTypeHandle() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.TryGetSingleton<T>(T) ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.TryGetSingletonEntity<T>(Entity) ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [ExecuteAlways] [UpdateInGroup(typeof(TransformSystemGroup))] [UpdateAfter(typeof(EndFrameParentSystem))] [UpdateAfter(typeof(EndFrameCompositeRotationSystem))] public class EndFrameParentScaleInverseSystem : ParentScaleInverseSystem Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Transforms.EndFrameParentSystem.html": {
    "href": "api/Unity.Transforms.EndFrameParentSystem.html",
    "title": "Class EndFrameParentSystem | Entities | 0.17.0-preview.18",
    "keywords": "Class EndFrameParentSystem Inheritance Object ComponentSystemBase JobComponentSystem ParentSystem EndFrameParentSystem Inherited Members ParentSystem.OnCreate() ParentSystem.OnUpdate(JobHandle) JobComponentSystem.Entities JobComponentSystem.Job JobComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.ExecutingSystemType ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetComponentTypeHandle<T>(Boolean) ComponentSystemBase.GetDynamicComponentTypeHandle(ComponentType) ComponentSystemBase.GetBufferTypeHandle<T>(Boolean) ComponentSystemBase.GetSharedComponentTypeHandle<T>() ComponentSystemBase.GetEntityTypeHandle() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.TryGetSingleton<T>(T) ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.TryGetSingletonEntity<T>(Entity) ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [ExecuteAlways] [UpdateInGroup(typeof(TransformSystemGroup))] public class EndFrameParentSystem : ParentSystem Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Transforms.EndFramePostRotationEulerSystem.html": {
    "href": "api/Unity.Transforms.EndFramePostRotationEulerSystem.html",
    "title": "Class EndFramePostRotationEulerSystem | Entities | 0.17.0-preview.18",
    "keywords": "Class EndFramePostRotationEulerSystem Inheritance Object ComponentSystemBase JobComponentSystem PostRotationEulerSystem EndFramePostRotationEulerSystem Inherited Members PostRotationEulerSystem.OnCreate() PostRotationEulerSystem.OnUpdate(JobHandle) JobComponentSystem.Entities JobComponentSystem.Job JobComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.ExecutingSystemType ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetComponentTypeHandle<T>(Boolean) ComponentSystemBase.GetDynamicComponentTypeHandle(ComponentType) ComponentSystemBase.GetBufferTypeHandle<T>(Boolean) ComponentSystemBase.GetSharedComponentTypeHandle<T>() ComponentSystemBase.GetEntityTypeHandle() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.TryGetSingleton<T>(T) ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.TryGetSingletonEntity<T>(Entity) ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [ExecuteAlways] [UpdateInGroup(typeof(TransformSystemGroup))] public class EndFramePostRotationEulerSystem : PostRotationEulerSystem Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Transforms.EndFrameRotationEulerSystem.html": {
    "href": "api/Unity.Transforms.EndFrameRotationEulerSystem.html",
    "title": "Class EndFrameRotationEulerSystem | Entities | 0.17.0-preview.18",
    "keywords": "Class EndFrameRotationEulerSystem Inheritance Object ComponentSystemBase JobComponentSystem RotationEulerSystem EndFrameRotationEulerSystem Inherited Members RotationEulerSystem.OnCreate() RotationEulerSystem.OnUpdate(JobHandle) JobComponentSystem.Entities JobComponentSystem.Job JobComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.ExecutingSystemType ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetComponentTypeHandle<T>(Boolean) ComponentSystemBase.GetDynamicComponentTypeHandle(ComponentType) ComponentSystemBase.GetBufferTypeHandle<T>(Boolean) ComponentSystemBase.GetSharedComponentTypeHandle<T>() ComponentSystemBase.GetEntityTypeHandle() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.TryGetSingleton<T>(T) ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.TryGetSingletonEntity<T>(Entity) ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [ExecuteAlways] [UpdateInGroup(typeof(TransformSystemGroup))] public class EndFrameRotationEulerSystem : RotationEulerSystem Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Transforms.EndFrameTRSToLocalToParentSystem.html": {
    "href": "api/Unity.Transforms.EndFrameTRSToLocalToParentSystem.html",
    "title": "Class EndFrameTRSToLocalToParentSystem | Entities | 0.17.0-preview.18",
    "keywords": "Class EndFrameTRSToLocalToParentSystem Inheritance Object ComponentSystemBase JobComponentSystem TRSToLocalToParentSystem EndFrameTRSToLocalToParentSystem Inherited Members TRSToLocalToParentSystem.OnCreate() TRSToLocalToParentSystem.OnUpdate(JobHandle) JobComponentSystem.Entities JobComponentSystem.Job JobComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.ExecutingSystemType ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetComponentTypeHandle<T>(Boolean) ComponentSystemBase.GetDynamicComponentTypeHandle(ComponentType) ComponentSystemBase.GetBufferTypeHandle<T>(Boolean) ComponentSystemBase.GetSharedComponentTypeHandle<T>() ComponentSystemBase.GetEntityTypeHandle() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.TryGetSingleton<T>(T) ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.TryGetSingletonEntity<T>(Entity) ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [ExecuteAlways] [UpdateInGroup(typeof(TransformSystemGroup))] [UpdateAfter(typeof(EndFrameCompositeRotationSystem))] [UpdateAfter(typeof(EndFrameCompositeScaleSystem))] [UpdateAfter(typeof(EndFrameParentScaleInverseSystem))] public class EndFrameTRSToLocalToParentSystem : TRSToLocalToParentSystem Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Transforms.EndFrameTRSToLocalToWorldSystem.html": {
    "href": "api/Unity.Transforms.EndFrameTRSToLocalToWorldSystem.html",
    "title": "Class EndFrameTRSToLocalToWorldSystem | Entities | 0.17.0-preview.18",
    "keywords": "Class EndFrameTRSToLocalToWorldSystem Inheritance Object ComponentSystemBase JobComponentSystem TRSToLocalToWorldSystem EndFrameTRSToLocalToWorldSystem Inherited Members TRSToLocalToWorldSystem.OnCreate() TRSToLocalToWorldSystem.OnUpdate(JobHandle) JobComponentSystem.Entities JobComponentSystem.Job JobComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.ExecutingSystemType ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetComponentTypeHandle<T>(Boolean) ComponentSystemBase.GetDynamicComponentTypeHandle(ComponentType) ComponentSystemBase.GetBufferTypeHandle<T>(Boolean) ComponentSystemBase.GetSharedComponentTypeHandle<T>() ComponentSystemBase.GetEntityTypeHandle() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.TryGetSingleton<T>(T) ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.TryGetSingletonEntity<T>(Entity) ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [ExecuteAlways] [UpdateInGroup(typeof(TransformSystemGroup))] [UpdateAfter(typeof(EndFrameCompositeRotationSystem))] [UpdateAfter(typeof(EndFrameCompositeScaleSystem))] [UpdateBefore(typeof(EndFrameLocalToParentSystem))] public class EndFrameTRSToLocalToWorldSystem : TRSToLocalToWorldSystem Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Transforms.EndFrameWorldToLocalSystem.html": {
    "href": "api/Unity.Transforms.EndFrameWorldToLocalSystem.html",
    "title": "Class EndFrameWorldToLocalSystem | Entities | 0.17.0-preview.18",
    "keywords": "Class EndFrameWorldToLocalSystem Inheritance Object ComponentSystemBase JobComponentSystem WorldToLocalSystem EndFrameWorldToLocalSystem Inherited Members WorldToLocalSystem.OnCreate() WorldToLocalSystem.OnUpdate(JobHandle) JobComponentSystem.Entities JobComponentSystem.Job JobComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.ExecutingSystemType ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetComponentTypeHandle<T>(Boolean) ComponentSystemBase.GetDynamicComponentTypeHandle(ComponentType) ComponentSystemBase.GetBufferTypeHandle<T>(Boolean) ComponentSystemBase.GetSharedComponentTypeHandle<T>() ComponentSystemBase.GetEntityTypeHandle() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.TryGetSingleton<T>(T) ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.TryGetSingletonEntity<T>(Entity) ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [ExecuteAlways] [UpdateInGroup(typeof(TransformSystemGroup))] [UpdateAfter(typeof(EndFrameTRSToLocalToWorldSystem))] [UpdateAfter(typeof(EndFrameLocalToParentSystem))] public class EndFrameWorldToLocalSystem : WorldToLocalSystem Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Transforms.Frozen.html": {
    "href": "api/Unity.Transforms.Frozen.html",
    "title": "Struct Frozen | Entities | 0.17.0-preview.18",
    "keywords": "Struct Frozen Frozen is added by system when Static is resolved. Signals that LocalToWorld will no longer be updated. Read-only from other systems. User responsible for removing. Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct Frozen : IComponentData"
  },
  "api/Unity.Transforms.html": {
    "href": "api/Unity.Transforms.html",
    "title": "Namespace Unity.Transforms | Entities | 0.17.0-preview.18",
    "keywords": "Namespace Unity.Transforms Classes CompositeRotationSystem CompositeScaleSystem CopyInitialTransformFromGameObjectSystem CopyTransformFromGameObjectSystem CopyTransformToGameObjectSystem EndFrameCompositeRotationSystem EndFrameCompositeScaleSystem EndFrameLocalToParentSystem EndFrameParentScaleInverseSystem EndFrameParentSystem EndFramePostRotationEulerSystem EndFrameRotationEulerSystem EndFrameTRSToLocalToParentSystem EndFrameTRSToLocalToWorldSystem EndFrameWorldToLocalSystem LocalToParentSystem ParentScaleInverseSystem ParentSystem PostRotationEulerSystem RotationEulerSystem TransformSystemGroup TRSToLocalToParentSystem TRSToLocalToWorldSystem WorldToLocalSystem Structs Child CompositeRotation CompositeScale CopyInitialTransformFromGameObject Copy Transform from GameObject associated with Entity to TransformMatrix. Once only. Component is removed after copy. CopyTransformFromGameObject Copy Transform from GameObject associated with Entity to TransformMatrix. CopyTransformFromPrimaryEntityTag Mark an additional entity with this tag component to instruct the incremental transform conversion system to copy the transform data from the primary entity. This allows you to copy data to additional entities without having to specify a dependency. CopyTransformToGameObject Copy Transform to GameObject associated with Entity from TransformMatrix. Frozen Frozen is added by system when Static is resolved. Signals that LocalToWorld will no longer be updated. Read-only from other systems. User responsible for removing. LocalToParent LocalToWorld NonUniformScale Parent ParentScaleInverse PostRotation PostRotationEulerXYZ PostRotationEulerXZY PostRotationEulerYXZ PostRotationEulerYZX PostRotationEulerZXY PostRotationEulerZYX PreviousParent Rotation RotationEulerXYZ RotationEulerXZY RotationEulerYXZ RotationEulerYZX RotationEulerZXY RotationEulerZYX RotationPivot RotationPivotTranslation Scale ScalePivot ScalePivotTranslation Static When added, TransformSystem will process transform compomnnts once to update LocalToWorld. Once that is resolved, the Frozen component will be added and LocalToWorld will no longer be updated. Translation WorldToLocal"
  },
  "api/Unity.Transforms.LocalToParent.Forward.html": {
    "href": "api/Unity.Transforms.LocalToParent.Forward.html",
    "title": "Property Forward | Entities | 0.17.0-preview.18",
    "keywords": "Property Forward Forward Declaration public float3 Forward { get; } Property Value Type Description float3"
  },
  "api/Unity.Transforms.LocalToParent.html": {
    "href": "api/Unity.Transforms.LocalToParent.html",
    "title": "Struct LocalToParent | Entities | 0.17.0-preview.18",
    "keywords": "Struct LocalToParent Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] [WriteGroup(typeof(LocalToWorld))] public struct LocalToParent : IComponentData Fields Name Description Value Properties Name Description Forward Position Right Up"
  },
  "api/Unity.Transforms.LocalToParent.Position.html": {
    "href": "api/Unity.Transforms.LocalToParent.Position.html",
    "title": "Property Position | Entities | 0.17.0-preview.18",
    "keywords": "Property Position Position Declaration public float3 Position { get; } Property Value Type Description float3"
  },
  "api/Unity.Transforms.LocalToParent.Right.html": {
    "href": "api/Unity.Transforms.LocalToParent.Right.html",
    "title": "Property Right | Entities | 0.17.0-preview.18",
    "keywords": "Property Right Right Declaration public float3 Right { get; } Property Value Type Description float3"
  },
  "api/Unity.Transforms.LocalToParent.Up.html": {
    "href": "api/Unity.Transforms.LocalToParent.Up.html",
    "title": "Property Up | Entities | 0.17.0-preview.18",
    "keywords": "Property Up Up Declaration public float3 Up { get; } Property Value Type Description float3"
  },
  "api/Unity.Transforms.LocalToParent.Value.html": {
    "href": "api/Unity.Transforms.LocalToParent.Value.html",
    "title": "Field Value | Entities | 0.17.0-preview.18",
    "keywords": "Field Value Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public float4x4 Value Returns Type Description float4x4"
  },
  "api/Unity.Transforms.LocalToParentSystem.html": {
    "href": "api/Unity.Transforms.LocalToParentSystem.html",
    "title": "Class LocalToParentSystem | Entities | 0.17.0-preview.18",
    "keywords": "Class LocalToParentSystem Inheritance Object ComponentSystemBase JobComponentSystem LocalToParentSystem EndFrameLocalToParentSystem Inherited Members JobComponentSystem.Entities JobComponentSystem.Job JobComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.ExecutingSystemType ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetComponentTypeHandle<T>(Boolean) ComponentSystemBase.GetDynamicComponentTypeHandle(ComponentType) ComponentSystemBase.GetBufferTypeHandle<T>(Boolean) ComponentSystemBase.GetSharedComponentTypeHandle<T>() ComponentSystemBase.GetEntityTypeHandle() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.TryGetSingleton<T>(T) ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.TryGetSingletonEntity<T>(Entity) ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public abstract class LocalToParentSystem : JobComponentSystem Methods Name Description OnCreate() OnUpdate(JobHandle) Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Transforms.LocalToParentSystem.OnCreate.html": {
    "href": "api/Unity.Transforms.LocalToParentSystem.OnCreate.html",
    "title": "Method OnCreate | Entities | 0.17.0-preview.18",
    "keywords": "Method OnCreate OnCreate() Declaration protected override void OnCreate() Overrides ComponentSystemBase.OnCreate()"
  },
  "api/Unity.Transforms.LocalToParentSystem.OnUpdate.html": {
    "href": "api/Unity.Transforms.LocalToParentSystem.OnUpdate.html",
    "title": "Method OnUpdate | Entities | 0.17.0-preview.18",
    "keywords": "Method OnUpdate OnUpdate(JobHandle) Declaration protected override JobHandle OnUpdate(JobHandle inputDeps) Parameters Type Name Description JobHandle inputDeps Returns Type Description JobHandle Overrides JobComponentSystem.OnUpdate(JobHandle)"
  },
  "api/Unity.Transforms.LocalToWorld.Forward.html": {
    "href": "api/Unity.Transforms.LocalToWorld.Forward.html",
    "title": "Property Forward | Entities | 0.17.0-preview.18",
    "keywords": "Property Forward Forward Declaration public float3 Forward { get; } Property Value Type Description float3"
  },
  "api/Unity.Transforms.LocalToWorld.html": {
    "href": "api/Unity.Transforms.LocalToWorld.html",
    "title": "Struct LocalToWorld | Entities | 0.17.0-preview.18",
    "keywords": "Struct LocalToWorld Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] [WriteGroup(typeof(WorldToLocal))] public struct LocalToWorld : IComponentData Fields Name Description Value Properties Name Description Forward Position Right Rotation Up"
  },
  "api/Unity.Transforms.LocalToWorld.Position.html": {
    "href": "api/Unity.Transforms.LocalToWorld.Position.html",
    "title": "Property Position | Entities | 0.17.0-preview.18",
    "keywords": "Property Position Position Declaration public float3 Position { get; } Property Value Type Description float3"
  },
  "api/Unity.Transforms.LocalToWorld.Right.html": {
    "href": "api/Unity.Transforms.LocalToWorld.Right.html",
    "title": "Property Right | Entities | 0.17.0-preview.18",
    "keywords": "Property Right Right Declaration public float3 Right { get; } Property Value Type Description float3"
  },
  "api/Unity.Transforms.LocalToWorld.Rotation.html": {
    "href": "api/Unity.Transforms.LocalToWorld.Rotation.html",
    "title": "Property Rotation | Entities | 0.17.0-preview.18",
    "keywords": "Property Rotation Rotation Declaration public quaternion Rotation { get; } Property Value Type Description quaternion"
  },
  "api/Unity.Transforms.LocalToWorld.Up.html": {
    "href": "api/Unity.Transforms.LocalToWorld.Up.html",
    "title": "Property Up | Entities | 0.17.0-preview.18",
    "keywords": "Property Up Up Declaration public float3 Up { get; } Property Value Type Description float3"
  },
  "api/Unity.Transforms.LocalToWorld.Value.html": {
    "href": "api/Unity.Transforms.LocalToWorld.Value.html",
    "title": "Field Value | Entities | 0.17.0-preview.18",
    "keywords": "Field Value Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public float4x4 Value Returns Type Description float4x4"
  },
  "api/Unity.Transforms.NonUniformScale.html": {
    "href": "api/Unity.Transforms.NonUniformScale.html",
    "title": "Struct NonUniformScale | Entities | 0.17.0-preview.18",
    "keywords": "Struct NonUniformScale Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] [WriteGroup(typeof(LocalToWorld))] [WriteGroup(typeof(LocalToParent))] [WriteGroup(typeof(CompositeScale))] [WriteGroup(typeof(ParentScaleInverse))] public struct NonUniformScale : IComponentData Fields Name Description Value"
  },
  "api/Unity.Transforms.NonUniformScale.Value.html": {
    "href": "api/Unity.Transforms.NonUniformScale.Value.html",
    "title": "Field Value | Entities | 0.17.0-preview.18",
    "keywords": "Field Value Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public float3 Value Returns Type Description float3"
  },
  "api/Unity.Transforms.Parent.html": {
    "href": "api/Unity.Transforms.Parent.html",
    "title": "Struct Parent | Entities | 0.17.0-preview.18",
    "keywords": "Struct Parent Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] [WriteGroup(typeof(LocalToWorld))] public struct Parent : IComponentData Fields Name Description Value"
  },
  "api/Unity.Transforms.Parent.Value.html": {
    "href": "api/Unity.Transforms.Parent.Value.html",
    "title": "Field Value | Entities | 0.17.0-preview.18",
    "keywords": "Field Value Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public Entity Value Returns Type Description Entity"
  },
  "api/Unity.Transforms.ParentScaleInverse.Forward.html": {
    "href": "api/Unity.Transforms.ParentScaleInverse.Forward.html",
    "title": "Property Forward | Entities | 0.17.0-preview.18",
    "keywords": "Property Forward Forward Declaration public float3 Forward { get; } Property Value Type Description float3"
  },
  "api/Unity.Transforms.ParentScaleInverse.html": {
    "href": "api/Unity.Transforms.ParentScaleInverse.html",
    "title": "Struct ParentScaleInverse | Entities | 0.17.0-preview.18",
    "keywords": "Struct ParentScaleInverse Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] [WriteGroup(typeof(LocalToParent))] public struct ParentScaleInverse : IComponentData Fields Name Description Value Properties Name Description Forward Position Right Up"
  },
  "api/Unity.Transforms.ParentScaleInverse.Position.html": {
    "href": "api/Unity.Transforms.ParentScaleInverse.Position.html",
    "title": "Property Position | Entities | 0.17.0-preview.18",
    "keywords": "Property Position Position Declaration public float3 Position { get; } Property Value Type Description float3"
  },
  "api/Unity.Transforms.ParentScaleInverse.Right.html": {
    "href": "api/Unity.Transforms.ParentScaleInverse.Right.html",
    "title": "Property Right | Entities | 0.17.0-preview.18",
    "keywords": "Property Right Right Declaration public float3 Right { get; } Property Value Type Description float3"
  },
  "api/Unity.Transforms.ParentScaleInverse.Up.html": {
    "href": "api/Unity.Transforms.ParentScaleInverse.Up.html",
    "title": "Property Up | Entities | 0.17.0-preview.18",
    "keywords": "Property Up Up Declaration public float3 Up { get; } Property Value Type Description float3"
  },
  "api/Unity.Transforms.ParentScaleInverse.Value.html": {
    "href": "api/Unity.Transforms.ParentScaleInverse.Value.html",
    "title": "Field Value | Entities | 0.17.0-preview.18",
    "keywords": "Field Value Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public float4x4 Value Returns Type Description float4x4"
  },
  "api/Unity.Transforms.ParentScaleInverseSystem.html": {
    "href": "api/Unity.Transforms.ParentScaleInverseSystem.html",
    "title": "Class ParentScaleInverseSystem | Entities | 0.17.0-preview.18",
    "keywords": "Class ParentScaleInverseSystem Inheritance Object ComponentSystemBase JobComponentSystem ParentScaleInverseSystem EndFrameParentScaleInverseSystem Inherited Members JobComponentSystem.Entities JobComponentSystem.Job JobComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.ExecutingSystemType ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetComponentTypeHandle<T>(Boolean) ComponentSystemBase.GetDynamicComponentTypeHandle(ComponentType) ComponentSystemBase.GetBufferTypeHandle<T>(Boolean) ComponentSystemBase.GetSharedComponentTypeHandle<T>() ComponentSystemBase.GetEntityTypeHandle() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.TryGetSingleton<T>(T) ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.TryGetSingletonEntity<T>(Entity) ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public abstract class ParentScaleInverseSystem : JobComponentSystem Methods Name Description OnCreate() OnUpdate(JobHandle) Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Transforms.ParentScaleInverseSystem.OnCreate.html": {
    "href": "api/Unity.Transforms.ParentScaleInverseSystem.OnCreate.html",
    "title": "Method OnCreate | Entities | 0.17.0-preview.18",
    "keywords": "Method OnCreate OnCreate() Declaration protected override void OnCreate() Overrides ComponentSystemBase.OnCreate()"
  },
  "api/Unity.Transforms.ParentScaleInverseSystem.OnUpdate.html": {
    "href": "api/Unity.Transforms.ParentScaleInverseSystem.OnUpdate.html",
    "title": "Method OnUpdate | Entities | 0.17.0-preview.18",
    "keywords": "Method OnUpdate OnUpdate(JobHandle) Declaration protected override JobHandle OnUpdate(JobHandle inputDeps) Parameters Type Name Description JobHandle inputDeps Returns Type Description JobHandle Overrides JobComponentSystem.OnUpdate(JobHandle)"
  },
  "api/Unity.Transforms.ParentSystem.html": {
    "href": "api/Unity.Transforms.ParentSystem.html",
    "title": "Class ParentSystem | Entities | 0.17.0-preview.18",
    "keywords": "Class ParentSystem Inheritance Object ComponentSystemBase JobComponentSystem ParentSystem EndFrameParentSystem Inherited Members JobComponentSystem.Entities JobComponentSystem.Job JobComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.ExecutingSystemType ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetComponentTypeHandle<T>(Boolean) ComponentSystemBase.GetDynamicComponentTypeHandle(ComponentType) ComponentSystemBase.GetBufferTypeHandle<T>(Boolean) ComponentSystemBase.GetSharedComponentTypeHandle<T>() ComponentSystemBase.GetEntityTypeHandle() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.TryGetSingleton<T>(T) ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.TryGetSingletonEntity<T>(Entity) ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public abstract class ParentSystem : JobComponentSystem Methods Name Description OnCreate() OnUpdate(JobHandle) Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Transforms.ParentSystem.OnCreate.html": {
    "href": "api/Unity.Transforms.ParentSystem.OnCreate.html",
    "title": "Method OnCreate | Entities | 0.17.0-preview.18",
    "keywords": "Method OnCreate OnCreate() Declaration protected override void OnCreate() Overrides ComponentSystemBase.OnCreate()"
  },
  "api/Unity.Transforms.ParentSystem.OnUpdate.html": {
    "href": "api/Unity.Transforms.ParentSystem.OnUpdate.html",
    "title": "Method OnUpdate | Entities | 0.17.0-preview.18",
    "keywords": "Method OnUpdate OnUpdate(JobHandle) Declaration protected override JobHandle OnUpdate(JobHandle inputDeps) Parameters Type Name Description JobHandle inputDeps Returns Type Description JobHandle Overrides JobComponentSystem.OnUpdate(JobHandle)"
  },
  "api/Unity.Transforms.PostRotation.html": {
    "href": "api/Unity.Transforms.PostRotation.html",
    "title": "Struct PostRotation | Entities | 0.17.0-preview.18",
    "keywords": "Struct PostRotation Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] [WriteGroup(typeof(CompositeRotation))] public struct PostRotation : IComponentData Fields Name Description Value"
  },
  "api/Unity.Transforms.PostRotation.Value.html": {
    "href": "api/Unity.Transforms.PostRotation.Value.html",
    "title": "Field Value | Entities | 0.17.0-preview.18",
    "keywords": "Field Value Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public quaternion Value Returns Type Description quaternion"
  },
  "api/Unity.Transforms.PostRotationEulerSystem.html": {
    "href": "api/Unity.Transforms.PostRotationEulerSystem.html",
    "title": "Class PostRotationEulerSystem | Entities | 0.17.0-preview.18",
    "keywords": "Class PostRotationEulerSystem Inheritance Object ComponentSystemBase JobComponentSystem PostRotationEulerSystem EndFramePostRotationEulerSystem Inherited Members JobComponentSystem.Entities JobComponentSystem.Job JobComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.ExecutingSystemType ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetComponentTypeHandle<T>(Boolean) ComponentSystemBase.GetDynamicComponentTypeHandle(ComponentType) ComponentSystemBase.GetBufferTypeHandle<T>(Boolean) ComponentSystemBase.GetSharedComponentTypeHandle<T>() ComponentSystemBase.GetEntityTypeHandle() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.TryGetSingleton<T>(T) ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.TryGetSingletonEntity<T>(Entity) ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public abstract class PostRotationEulerSystem : JobComponentSystem Methods Name Description OnCreate() OnUpdate(JobHandle) Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Transforms.PostRotationEulerSystem.OnCreate.html": {
    "href": "api/Unity.Transforms.PostRotationEulerSystem.OnCreate.html",
    "title": "Method OnCreate | Entities | 0.17.0-preview.18",
    "keywords": "Method OnCreate OnCreate() Declaration protected override void OnCreate() Overrides ComponentSystemBase.OnCreate()"
  },
  "api/Unity.Transforms.PostRotationEulerSystem.OnUpdate.html": {
    "href": "api/Unity.Transforms.PostRotationEulerSystem.OnUpdate.html",
    "title": "Method OnUpdate | Entities | 0.17.0-preview.18",
    "keywords": "Method OnUpdate OnUpdate(JobHandle) Declaration protected override JobHandle OnUpdate(JobHandle inputDependencies) Parameters Type Name Description JobHandle inputDependencies Returns Type Description JobHandle Overrides JobComponentSystem.OnUpdate(JobHandle)"
  },
  "api/Unity.Transforms.PostRotationEulerXYZ.html": {
    "href": "api/Unity.Transforms.PostRotationEulerXYZ.html",
    "title": "Struct PostRotationEulerXYZ | Entities | 0.17.0-preview.18",
    "keywords": "Struct PostRotationEulerXYZ Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] [WriteGroup(typeof(PostRotation))] public struct PostRotationEulerXYZ : IComponentData Fields Name Description Value"
  },
  "api/Unity.Transforms.PostRotationEulerXYZ.Value.html": {
    "href": "api/Unity.Transforms.PostRotationEulerXYZ.Value.html",
    "title": "Field Value | Entities | 0.17.0-preview.18",
    "keywords": "Field Value Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public float3 Value Returns Type Description float3"
  },
  "api/Unity.Transforms.PostRotationEulerXZY.html": {
    "href": "api/Unity.Transforms.PostRotationEulerXZY.html",
    "title": "Struct PostRotationEulerXZY | Entities | 0.17.0-preview.18",
    "keywords": "Struct PostRotationEulerXZY Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] [WriteGroup(typeof(PostRotation))] public struct PostRotationEulerXZY : IComponentData Fields Name Description Value"
  },
  "api/Unity.Transforms.PostRotationEulerXZY.Value.html": {
    "href": "api/Unity.Transforms.PostRotationEulerXZY.Value.html",
    "title": "Field Value | Entities | 0.17.0-preview.18",
    "keywords": "Field Value Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public float3 Value Returns Type Description float3"
  },
  "api/Unity.Transforms.PostRotationEulerYXZ.html": {
    "href": "api/Unity.Transforms.PostRotationEulerYXZ.html",
    "title": "Struct PostRotationEulerYXZ | Entities | 0.17.0-preview.18",
    "keywords": "Struct PostRotationEulerYXZ Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] [WriteGroup(typeof(PostRotation))] public struct PostRotationEulerYXZ : IComponentData Fields Name Description Value"
  },
  "api/Unity.Transforms.PostRotationEulerYXZ.Value.html": {
    "href": "api/Unity.Transforms.PostRotationEulerYXZ.Value.html",
    "title": "Field Value | Entities | 0.17.0-preview.18",
    "keywords": "Field Value Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public float3 Value Returns Type Description float3"
  },
  "api/Unity.Transforms.PostRotationEulerYZX.html": {
    "href": "api/Unity.Transforms.PostRotationEulerYZX.html",
    "title": "Struct PostRotationEulerYZX | Entities | 0.17.0-preview.18",
    "keywords": "Struct PostRotationEulerYZX Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] [WriteGroup(typeof(PostRotation))] public struct PostRotationEulerYZX : IComponentData Fields Name Description Value"
  },
  "api/Unity.Transforms.PostRotationEulerYZX.Value.html": {
    "href": "api/Unity.Transforms.PostRotationEulerYZX.Value.html",
    "title": "Field Value | Entities | 0.17.0-preview.18",
    "keywords": "Field Value Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public float3 Value Returns Type Description float3"
  },
  "api/Unity.Transforms.PostRotationEulerZXY.html": {
    "href": "api/Unity.Transforms.PostRotationEulerZXY.html",
    "title": "Struct PostRotationEulerZXY | Entities | 0.17.0-preview.18",
    "keywords": "Struct PostRotationEulerZXY Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] [WriteGroup(typeof(PostRotation))] public struct PostRotationEulerZXY : IComponentData Fields Name Description Value"
  },
  "api/Unity.Transforms.PostRotationEulerZXY.Value.html": {
    "href": "api/Unity.Transforms.PostRotationEulerZXY.Value.html",
    "title": "Field Value | Entities | 0.17.0-preview.18",
    "keywords": "Field Value Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public float3 Value Returns Type Description float3"
  },
  "api/Unity.Transforms.PostRotationEulerZYX.html": {
    "href": "api/Unity.Transforms.PostRotationEulerZYX.html",
    "title": "Struct PostRotationEulerZYX | Entities | 0.17.0-preview.18",
    "keywords": "Struct PostRotationEulerZYX Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] [WriteGroup(typeof(PostRotation))] public struct PostRotationEulerZYX : IComponentData Fields Name Description Value"
  },
  "api/Unity.Transforms.PostRotationEulerZYX.Value.html": {
    "href": "api/Unity.Transforms.PostRotationEulerZYX.Value.html",
    "title": "Field Value | Entities | 0.17.0-preview.18",
    "keywords": "Field Value Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public float3 Value Returns Type Description float3"
  },
  "api/Unity.Transforms.PreviousParent.html": {
    "href": "api/Unity.Transforms.PreviousParent.html",
    "title": "Struct PreviousParent | Entities | 0.17.0-preview.18",
    "keywords": "Struct PreviousParent Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] public struct PreviousParent : ISystemStateComponentData, IComponentData Fields Name Description Value"
  },
  "api/Unity.Transforms.PreviousParent.Value.html": {
    "href": "api/Unity.Transforms.PreviousParent.Value.html",
    "title": "Field Value | Entities | 0.17.0-preview.18",
    "keywords": "Field Value Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public Entity Value Returns Type Description Entity"
  },
  "api/Unity.Transforms.Rotation.html": {
    "href": "api/Unity.Transforms.Rotation.html",
    "title": "Struct Rotation | Entities | 0.17.0-preview.18",
    "keywords": "Struct Rotation Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] [WriteGroup(typeof(LocalToWorld))] [WriteGroup(typeof(LocalToParent))] [WriteGroup(typeof(CompositeRotation))] public struct Rotation : IComponentData Fields Name Description Value"
  },
  "api/Unity.Transforms.Rotation.Value.html": {
    "href": "api/Unity.Transforms.Rotation.Value.html",
    "title": "Field Value | Entities | 0.17.0-preview.18",
    "keywords": "Field Value Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public quaternion Value Returns Type Description quaternion"
  },
  "api/Unity.Transforms.RotationEulerSystem.html": {
    "href": "api/Unity.Transforms.RotationEulerSystem.html",
    "title": "Class RotationEulerSystem | Entities | 0.17.0-preview.18",
    "keywords": "Class RotationEulerSystem Inheritance Object ComponentSystemBase JobComponentSystem RotationEulerSystem EndFrameRotationEulerSystem Inherited Members JobComponentSystem.Entities JobComponentSystem.Job JobComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.ExecutingSystemType ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetComponentTypeHandle<T>(Boolean) ComponentSystemBase.GetDynamicComponentTypeHandle(ComponentType) ComponentSystemBase.GetBufferTypeHandle<T>(Boolean) ComponentSystemBase.GetSharedComponentTypeHandle<T>() ComponentSystemBase.GetEntityTypeHandle() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.TryGetSingleton<T>(T) ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.TryGetSingletonEntity<T>(Entity) ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public abstract class RotationEulerSystem : JobComponentSystem Methods Name Description OnCreate() OnUpdate(JobHandle) Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Transforms.RotationEulerSystem.OnCreate.html": {
    "href": "api/Unity.Transforms.RotationEulerSystem.OnCreate.html",
    "title": "Method OnCreate | Entities | 0.17.0-preview.18",
    "keywords": "Method OnCreate OnCreate() Declaration protected override void OnCreate() Overrides ComponentSystemBase.OnCreate()"
  },
  "api/Unity.Transforms.RotationEulerSystem.OnUpdate.html": {
    "href": "api/Unity.Transforms.RotationEulerSystem.OnUpdate.html",
    "title": "Method OnUpdate | Entities | 0.17.0-preview.18",
    "keywords": "Method OnUpdate OnUpdate(JobHandle) Declaration protected override JobHandle OnUpdate(JobHandle inputDependencies) Parameters Type Name Description JobHandle inputDependencies Returns Type Description JobHandle Overrides JobComponentSystem.OnUpdate(JobHandle)"
  },
  "api/Unity.Transforms.RotationEulerXYZ.html": {
    "href": "api/Unity.Transforms.RotationEulerXYZ.html",
    "title": "Struct RotationEulerXYZ | Entities | 0.17.0-preview.18",
    "keywords": "Struct RotationEulerXYZ Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] [WriteGroup(typeof(Rotation))] public struct RotationEulerXYZ : IComponentData Fields Name Description Value"
  },
  "api/Unity.Transforms.RotationEulerXYZ.Value.html": {
    "href": "api/Unity.Transforms.RotationEulerXYZ.Value.html",
    "title": "Field Value | Entities | 0.17.0-preview.18",
    "keywords": "Field Value Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public float3 Value Returns Type Description float3"
  },
  "api/Unity.Transforms.RotationEulerXZY.html": {
    "href": "api/Unity.Transforms.RotationEulerXZY.html",
    "title": "Struct RotationEulerXZY | Entities | 0.17.0-preview.18",
    "keywords": "Struct RotationEulerXZY Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] [WriteGroup(typeof(Rotation))] public struct RotationEulerXZY : IComponentData Fields Name Description Value"
  },
  "api/Unity.Transforms.RotationEulerXZY.Value.html": {
    "href": "api/Unity.Transforms.RotationEulerXZY.Value.html",
    "title": "Field Value | Entities | 0.17.0-preview.18",
    "keywords": "Field Value Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public float3 Value Returns Type Description float3"
  },
  "api/Unity.Transforms.RotationEulerYXZ.html": {
    "href": "api/Unity.Transforms.RotationEulerYXZ.html",
    "title": "Struct RotationEulerYXZ | Entities | 0.17.0-preview.18",
    "keywords": "Struct RotationEulerYXZ Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] [WriteGroup(typeof(Rotation))] public struct RotationEulerYXZ : IComponentData Fields Name Description Value"
  },
  "api/Unity.Transforms.RotationEulerYXZ.Value.html": {
    "href": "api/Unity.Transforms.RotationEulerYXZ.Value.html",
    "title": "Field Value | Entities | 0.17.0-preview.18",
    "keywords": "Field Value Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public float3 Value Returns Type Description float3"
  },
  "api/Unity.Transforms.RotationEulerYZX.html": {
    "href": "api/Unity.Transforms.RotationEulerYZX.html",
    "title": "Struct RotationEulerYZX | Entities | 0.17.0-preview.18",
    "keywords": "Struct RotationEulerYZX Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] [WriteGroup(typeof(Rotation))] public struct RotationEulerYZX : IComponentData Fields Name Description Value"
  },
  "api/Unity.Transforms.RotationEulerYZX.Value.html": {
    "href": "api/Unity.Transforms.RotationEulerYZX.Value.html",
    "title": "Field Value | Entities | 0.17.0-preview.18",
    "keywords": "Field Value Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public float3 Value Returns Type Description float3"
  },
  "api/Unity.Transforms.RotationEulerZXY.html": {
    "href": "api/Unity.Transforms.RotationEulerZXY.html",
    "title": "Struct RotationEulerZXY | Entities | 0.17.0-preview.18",
    "keywords": "Struct RotationEulerZXY Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] [WriteGroup(typeof(Rotation))] public struct RotationEulerZXY : IComponentData Fields Name Description Value"
  },
  "api/Unity.Transforms.RotationEulerZXY.Value.html": {
    "href": "api/Unity.Transforms.RotationEulerZXY.Value.html",
    "title": "Field Value | Entities | 0.17.0-preview.18",
    "keywords": "Field Value Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public float3 Value Returns Type Description float3"
  },
  "api/Unity.Transforms.RotationEulerZYX.html": {
    "href": "api/Unity.Transforms.RotationEulerZYX.html",
    "title": "Struct RotationEulerZYX | Entities | 0.17.0-preview.18",
    "keywords": "Struct RotationEulerZYX Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] [WriteGroup(typeof(Rotation))] public struct RotationEulerZYX : IComponentData Fields Name Description Value"
  },
  "api/Unity.Transforms.RotationEulerZYX.Value.html": {
    "href": "api/Unity.Transforms.RotationEulerZYX.Value.html",
    "title": "Field Value | Entities | 0.17.0-preview.18",
    "keywords": "Field Value Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public float3 Value Returns Type Description float3"
  },
  "api/Unity.Transforms.RotationPivot.html": {
    "href": "api/Unity.Transforms.RotationPivot.html",
    "title": "Struct RotationPivot | Entities | 0.17.0-preview.18",
    "keywords": "Struct RotationPivot Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] [WriteGroup(typeof(CompositeRotation))] public struct RotationPivot : IComponentData Fields Name Description Value"
  },
  "api/Unity.Transforms.RotationPivot.Value.html": {
    "href": "api/Unity.Transforms.RotationPivot.Value.html",
    "title": "Field Value | Entities | 0.17.0-preview.18",
    "keywords": "Field Value Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public float3 Value Returns Type Description float3"
  },
  "api/Unity.Transforms.RotationPivotTranslation.html": {
    "href": "api/Unity.Transforms.RotationPivotTranslation.html",
    "title": "Struct RotationPivotTranslation | Entities | 0.17.0-preview.18",
    "keywords": "Struct RotationPivotTranslation Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] [WriteGroup(typeof(CompositeRotation))] public struct RotationPivotTranslation : IComponentData Fields Name Description Value"
  },
  "api/Unity.Transforms.RotationPivotTranslation.Value.html": {
    "href": "api/Unity.Transforms.RotationPivotTranslation.Value.html",
    "title": "Field Value | Entities | 0.17.0-preview.18",
    "keywords": "Field Value Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public float3 Value Returns Type Description float3"
  },
  "api/Unity.Transforms.Scale.html": {
    "href": "api/Unity.Transforms.Scale.html",
    "title": "Struct Scale | Entities | 0.17.0-preview.18",
    "keywords": "Struct Scale Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] [WriteGroup(typeof(LocalToWorld))] [WriteGroup(typeof(LocalToParent))] [WriteGroup(typeof(CompositeScale))] [WriteGroup(typeof(ParentScaleInverse))] public struct Scale : IComponentData Fields Name Description Value"
  },
  "api/Unity.Transforms.Scale.Value.html": {
    "href": "api/Unity.Transforms.Scale.Value.html",
    "title": "Field Value | Entities | 0.17.0-preview.18",
    "keywords": "Field Value Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public float Value Returns Type Description Single"
  },
  "api/Unity.Transforms.ScalePivot.html": {
    "href": "api/Unity.Transforms.ScalePivot.html",
    "title": "Struct ScalePivot | Entities | 0.17.0-preview.18",
    "keywords": "Struct ScalePivot Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] [WriteGroup(typeof(CompositeScale))] public struct ScalePivot : IComponentData Fields Name Description Value"
  },
  "api/Unity.Transforms.ScalePivot.Value.html": {
    "href": "api/Unity.Transforms.ScalePivot.Value.html",
    "title": "Field Value | Entities | 0.17.0-preview.18",
    "keywords": "Field Value Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public float3 Value Returns Type Description float3"
  },
  "api/Unity.Transforms.ScalePivotTranslation.html": {
    "href": "api/Unity.Transforms.ScalePivotTranslation.html",
    "title": "Struct ScalePivotTranslation | Entities | 0.17.0-preview.18",
    "keywords": "Struct ScalePivotTranslation Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] [WriteGroup(typeof(CompositeScale))] public struct ScalePivotTranslation : IComponentData Fields Name Description Value"
  },
  "api/Unity.Transforms.ScalePivotTranslation.Value.html": {
    "href": "api/Unity.Transforms.ScalePivotTranslation.Value.html",
    "title": "Field Value | Entities | 0.17.0-preview.18",
    "keywords": "Field Value Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public float3 Value Returns Type Description float3"
  },
  "api/Unity.Transforms.Static.html": {
    "href": "api/Unity.Transforms.Static.html",
    "title": "Struct Static | Entities | 0.17.0-preview.18",
    "keywords": "Struct Static When added, TransformSystem will process transform compomnnts once to update LocalToWorld. Once that is resolved, the Frozen component will be added and LocalToWorld will no longer be updated. Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct Static : IComponentData"
  },
  "api/Unity.Transforms.TransformSystemGroup.html": {
    "href": "api/Unity.Transforms.TransformSystemGroup.html",
    "title": "Class TransformSystemGroup | Entities | 0.17.0-preview.18",
    "keywords": "Class TransformSystemGroup Inheritance Object ComponentSystemBase ComponentSystem ComponentSystemGroup TransformSystemGroup Inherited Members ComponentSystemGroup.Systems ComponentSystemGroup.OnCreate() ComponentSystemGroup.OnDestroy() ComponentSystemGroup.AddSystemToUpdateList(ComponentSystemBase) ComponentSystemGroup.RemoveSystemFromUpdateList(ComponentSystemBase) ComponentSystemGroup.SortSystems() ComponentSystemGroup.OnStopRunning() ComponentSystemGroup.FixedRateManager ComponentSystemGroup.OnUpdate() ComponentSystem.PostUpdateCommands ComponentSystem.InitEntityQueryCache(Int32) ComponentSystem.Entities ComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnStartRunning() ComponentSystemBase.ExecutingSystemType ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetComponentTypeHandle<T>(Boolean) ComponentSystemBase.GetDynamicComponentTypeHandle(ComponentType) ComponentSystemBase.GetBufferTypeHandle<T>(Boolean) ComponentSystemBase.GetSharedComponentTypeHandle<T>() ComponentSystemBase.GetEntityTypeHandle() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.TryGetSingleton<T>(T) ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.TryGetSingletonEntity<T>(Entity) ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [ExecuteAlways] public class TransformSystemGroup : ComponentSystemGroup Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Transforms.Translation.html": {
    "href": "api/Unity.Transforms.Translation.html",
    "title": "Struct Translation | Entities | 0.17.0-preview.18",
    "keywords": "Struct Translation Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] [WriteGroup(typeof(LocalToWorld))] [WriteGroup(typeof(LocalToParent))] public struct Translation : IComponentData Fields Name Description Value"
  },
  "api/Unity.Transforms.Translation.Value.html": {
    "href": "api/Unity.Transforms.Translation.Value.html",
    "title": "Field Value | Entities | 0.17.0-preview.18",
    "keywords": "Field Value Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public float3 Value Returns Type Description float3"
  },
  "api/Unity.Transforms.TRSToLocalToParentSystem.html": {
    "href": "api/Unity.Transforms.TRSToLocalToParentSystem.html",
    "title": "Class TRSToLocalToParentSystem | Entities | 0.17.0-preview.18",
    "keywords": "Class TRSToLocalToParentSystem Inheritance Object ComponentSystemBase JobComponentSystem TRSToLocalToParentSystem EndFrameTRSToLocalToParentSystem Inherited Members JobComponentSystem.Entities JobComponentSystem.Job JobComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.ExecutingSystemType ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetComponentTypeHandle<T>(Boolean) ComponentSystemBase.GetDynamicComponentTypeHandle(ComponentType) ComponentSystemBase.GetBufferTypeHandle<T>(Boolean) ComponentSystemBase.GetSharedComponentTypeHandle<T>() ComponentSystemBase.GetEntityTypeHandle() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.TryGetSingleton<T>(T) ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.TryGetSingletonEntity<T>(Entity) ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public abstract class TRSToLocalToParentSystem : JobComponentSystem Methods Name Description OnCreate() OnUpdate(JobHandle) Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Transforms.TRSToLocalToParentSystem.OnCreate.html": {
    "href": "api/Unity.Transforms.TRSToLocalToParentSystem.OnCreate.html",
    "title": "Method OnCreate | Entities | 0.17.0-preview.18",
    "keywords": "Method OnCreate OnCreate() Declaration protected override void OnCreate() Overrides ComponentSystemBase.OnCreate()"
  },
  "api/Unity.Transforms.TRSToLocalToParentSystem.OnUpdate.html": {
    "href": "api/Unity.Transforms.TRSToLocalToParentSystem.OnUpdate.html",
    "title": "Method OnUpdate | Entities | 0.17.0-preview.18",
    "keywords": "Method OnUpdate OnUpdate(JobHandle) Declaration protected override JobHandle OnUpdate(JobHandle inputDeps) Parameters Type Name Description JobHandle inputDeps Returns Type Description JobHandle Overrides JobComponentSystem.OnUpdate(JobHandle)"
  },
  "api/Unity.Transforms.TRSToLocalToWorldSystem.html": {
    "href": "api/Unity.Transforms.TRSToLocalToWorldSystem.html",
    "title": "Class TRSToLocalToWorldSystem | Entities | 0.17.0-preview.18",
    "keywords": "Class TRSToLocalToWorldSystem Inheritance Object ComponentSystemBase JobComponentSystem TRSToLocalToWorldSystem EndFrameTRSToLocalToWorldSystem Inherited Members JobComponentSystem.Entities JobComponentSystem.Job JobComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.ExecutingSystemType ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetComponentTypeHandle<T>(Boolean) ComponentSystemBase.GetDynamicComponentTypeHandle(ComponentType) ComponentSystemBase.GetBufferTypeHandle<T>(Boolean) ComponentSystemBase.GetSharedComponentTypeHandle<T>() ComponentSystemBase.GetEntityTypeHandle() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.TryGetSingleton<T>(T) ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.TryGetSingletonEntity<T>(Entity) ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public abstract class TRSToLocalToWorldSystem : JobComponentSystem Methods Name Description OnCreate() OnUpdate(JobHandle) Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Transforms.TRSToLocalToWorldSystem.OnCreate.html": {
    "href": "api/Unity.Transforms.TRSToLocalToWorldSystem.OnCreate.html",
    "title": "Method OnCreate | Entities | 0.17.0-preview.18",
    "keywords": "Method OnCreate OnCreate() Declaration protected override void OnCreate() Overrides ComponentSystemBase.OnCreate()"
  },
  "api/Unity.Transforms.TRSToLocalToWorldSystem.OnUpdate.html": {
    "href": "api/Unity.Transforms.TRSToLocalToWorldSystem.OnUpdate.html",
    "title": "Method OnUpdate | Entities | 0.17.0-preview.18",
    "keywords": "Method OnUpdate OnUpdate(JobHandle) Declaration protected override JobHandle OnUpdate(JobHandle inputDeps) Parameters Type Name Description JobHandle inputDeps Returns Type Description JobHandle Overrides JobComponentSystem.OnUpdate(JobHandle)"
  },
  "api/Unity.Transforms.WorldToLocal.Forward.html": {
    "href": "api/Unity.Transforms.WorldToLocal.Forward.html",
    "title": "Property Forward | Entities | 0.17.0-preview.18",
    "keywords": "Property Forward Forward Declaration public float3 Forward { get; } Property Value Type Description float3"
  },
  "api/Unity.Transforms.WorldToLocal.html": {
    "href": "api/Unity.Transforms.WorldToLocal.html",
    "title": "Struct WorldToLocal | Entities | 0.17.0-preview.18",
    "keywords": "Struct WorldToLocal Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] public struct WorldToLocal : IComponentData Fields Name Description Value Properties Name Description Forward Position Right Up"
  },
  "api/Unity.Transforms.WorldToLocal.Position.html": {
    "href": "api/Unity.Transforms.WorldToLocal.Position.html",
    "title": "Property Position | Entities | 0.17.0-preview.18",
    "keywords": "Property Position Position Declaration public float3 Position { get; } Property Value Type Description float3"
  },
  "api/Unity.Transforms.WorldToLocal.Right.html": {
    "href": "api/Unity.Transforms.WorldToLocal.Right.html",
    "title": "Property Right | Entities | 0.17.0-preview.18",
    "keywords": "Property Right Right Declaration public float3 Right { get; } Property Value Type Description float3"
  },
  "api/Unity.Transforms.WorldToLocal.Up.html": {
    "href": "api/Unity.Transforms.WorldToLocal.Up.html",
    "title": "Property Up | Entities | 0.17.0-preview.18",
    "keywords": "Property Up Up Declaration public float3 Up { get; } Property Value Type Description float3"
  },
  "api/Unity.Transforms.WorldToLocal.Value.html": {
    "href": "api/Unity.Transforms.WorldToLocal.Value.html",
    "title": "Field Value | Entities | 0.17.0-preview.18",
    "keywords": "Field Value Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public float4x4 Value Returns Type Description float4x4"
  },
  "api/Unity.Transforms.WorldToLocalSystem.html": {
    "href": "api/Unity.Transforms.WorldToLocalSystem.html",
    "title": "Class WorldToLocalSystem | Entities | 0.17.0-preview.18",
    "keywords": "Class WorldToLocalSystem Inheritance Object ComponentSystemBase JobComponentSystem WorldToLocalSystem EndFrameWorldToLocalSystem Inherited Members JobComponentSystem.Entities JobComponentSystem.Job JobComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.ExecutingSystemType ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetComponentTypeHandle<T>(Boolean) ComponentSystemBase.GetDynamicComponentTypeHandle(ComponentType) ComponentSystemBase.GetBufferTypeHandle<T>(Boolean) ComponentSystemBase.GetSharedComponentTypeHandle<T>() ComponentSystemBase.GetEntityTypeHandle() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.TryGetSingleton<T>(T) ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.TryGetSingletonEntity<T>(Entity) ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public abstract class WorldToLocalSystem : JobComponentSystem Methods Name Description OnCreate() OnUpdate(JobHandle) Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Transforms.WorldToLocalSystem.OnCreate.html": {
    "href": "api/Unity.Transforms.WorldToLocalSystem.OnCreate.html",
    "title": "Method OnCreate | Entities | 0.17.0-preview.18",
    "keywords": "Method OnCreate OnCreate() Declaration protected override void OnCreate() Overrides ComponentSystemBase.OnCreate()"
  },
  "api/Unity.Transforms.WorldToLocalSystem.OnUpdate.html": {
    "href": "api/Unity.Transforms.WorldToLocalSystem.OnUpdate.html",
    "title": "Method OnUpdate | Entities | 0.17.0-preview.18",
    "keywords": "Method OnUpdate OnUpdate(JobHandle) Declaration protected override JobHandle OnUpdate(JobHandle inputDeps) Parameters Type Name Description JobHandle inputDeps Returns Type Description JobHandle Overrides JobComponentSystem.OnUpdate(JobHandle)"
  },
  "changelog/CHANGELOG.html": {
    "href": "changelog/CHANGELOG.html",
    "title": "Change log | Entities | 0.17.0-preview.18",
    "keywords": "Change log [Unreleased] Added ISystemBase interface for making struct based systems that allow Burst compiling main thread update New UnsafeBufferAccessor struct that permit to un-typed and unsafe access the dynamic buffers pointers. New ArchetypeChunk.GetUnsafeAccessor public API that allow to retrieve dynamic buffers unsafe accessors using DynamicTypeHandle. safety check in DynamicComponentDataArrayReinterpret that throw an ArgumentException if used to access the component data for IBufferDataElement type ComponentSystemBase.TryGetSingleton ComponentSystemBase.TryGetSingletonEntity Tests for Tiny.UI transformations. Added documentation for incremental conversion and dependencies New scheduling API for IJobEntityBatch which limits the resulting batches to an input NativeArray<Entity> BlobAssetStore. AddUniqueBlobAsset. A much simpler approach to managing blob assets during conversion. BlobAssetComputationContext continues to be the recommended approach for scalable blob asset generation. UnsafeUntypedBlobAsset gives a non-generic untyped blob that can be created and later casted to a specific BlobAssetType. This can be used for storing multiple types of blob assets in the same container. GameObjectConversionSystem.IsBuildingForEditor returns true when building data that will be loaded by the editor (As opposed to building data that will be loaded by the standalone player). This can be used to strip out editor only debug data. GameObjectConversionSystem.BuildConfigGUID returns the GUID of the build config that is used by this conversion context Changed Update burst to 1.3.7 Improved the performance of ILPostProcessor type resolution. ProcessAfterLoadGroup is now public. This group runs after a subscene is loaded. Unity.Transforms systems now use IJobEntityBatch instead of IJobChunk . Expect modest performance gains due to the new job type's lower scheduling overhead, depending on the workload size. When DOTS/Live Link Mode/Live Conversion in Edit Mode is active in 2020.2 or later, conversion is now incremental Removed deprecated Entities.ForEach.WithDeallocateOnJobCompletion . Please use Entities.ForEach.WithDisposeOnCompletion instead. Fixed livelink patching for BlobAssetReference<T> fields in managed components and shared components. Updated package com.unity.platforms to version 0.9.0-preview.12 . TypeManager.Equals and TypeManager.GetHashCode performance has been improved when operating on blittable component types. BlobAsset and entity patching for managed IComponentData & ISharedComponentData now use an early out if the class is known to not contain any blob assets or entity references Managed class IComponentData now supports patching of entity references in EntityCommandBuffer.AddComponent. Improved EntityManager.GetCreatedAndDestroyedEntities performance by introducing an internal entity creation / destruction version number that is used to early out when calling GetCreatedAndDestroyedEntities TypeManger.TypeInfo.Debug has been removed. TypeName has been moved directly into TypeInfo and renamed to DebugTypeName. Nested or variant prefabs used in a scene now correctly trigger reimports on subscenes when the parents parent prefab changes Deprecated Forking of GameObjectConversionSettings is no longer supported Removed Removed deprecated proxy component types Removed expired EntityManager.IsCreated API Removed expired API to compare EntityManager to null ( EntityManager is a struct now) Removed deprecated types and methods: NativeArraySharedValue<S> , implicit EntityQuery conversion to null , ComponentDataFromEntity.Exists and BufferFromEntity.Exists , ArchetypeChunkArray.GetComponentVersion , IJobEntityBatch.ScheduleSingle , IJobEntityBatch.ScheduleParallelBatch , EntityManager.LockChunk , EntityManager.UnlockChunk , World.AllWorlds , World.CreateSystem , all GetArchetypeChunkX methods, EntityCommandBuffer.ToConcurrent and EntityManager.CreateChunk Fixed Wrong query and check in ACS_DynamicComponentDataArrayReinterpret Fixed ICE (internal compiler error) thrown when storing into a field in reference type in bursted/scheduled lambda. EntityQuery.ToEntityArray will work when temp memory is passed in an a parameter for allocator EntityQuery.ToComponentDataArrayAsync and EntityQuery.CopyFromComponentDataArrayAsync will throw errors if user tries to use Temp memory containers. Hybrid Component Lights flickering when LiveLink edited. Fix crash when using singleton access methods with types with generic arguments. Code generation for indexers in structs with [BurstCompatible] attribute. Fixed potential JobHandle leak if an exception was thrown while scheduling an IJobForEach . Fixed that DynamicBuffer.RemoveAtSwapBack only copied the first byte of its element data Updating the shadow world via the EntityDiffer is now using Burst The 'New Sub Scene' menu item is no longer missing in the 'Create' drop down of the Hierarchy . Overwriting Sub Scene file when creating new Sub Scene no longer logs an error but instead overwrites the user selected file. Fixed livelink patching for BlobAssetReference<T> fields in managed components and shared components. Fixed entities getting lost during LiveLink when moving GameObjects between multiple subscenes Deprecated call to UnityWebRequest.isNetworkError in Unity.Scenes.FileUtilityHybrid Generic jobs now get reflection data generated in more cases Generic jobs will always work to schedule in editor (but may require attributes in Burst scheduling cases) Security Upgrade guide managed class IComponentData now supports patching of entity references in EntityCommandBuffer.AddComponent. This can result in a significant performance regression if there might be an entity on the managed component when playing the command buffer. If a managed component has a reference to another class that is not sealed it is unprovable that there may or may not be entity references on it. Thus we have to walk the whole class data to apply it. If there is in fact no entity reference on a class referenced from a managed component, then it is recommended to mark the referenced class as sealed, so that the type manager can prove that there is no entity references present on the managed component and thus completely skip all relatively slow entity patching code. [0.16.0] - 2020-09-24 Added EntityManager method CreateEntity(EntityArchetype, int). Unlike existing overloads of CreateEntity, this new overload takes no Entity array and returns no Entity array, so it avoids waste and bother in cases where callers don't need the actual Entity values. Special handling for Cameras and Colliders in preparation for root scene conversion, though they are disabled by default still World.MaximumDeltaTime now controls the maximum deltaTime that is reported to a World. Exception's stacktrace are recorded in conversion logs. Add IFixedRateManager interface for fixed-timestep implementations. See FixedRateUtils.cs for reference implementations. Add ComponentSystemGroup.FixedRateManager property, to store the current active IFixedRateManager implementation. Added SceneSystem.IsSectionLoaded to enable querying if a specific section of a scene is loaded. EntityQuery.SetOrderVersionFilter() and EntityQuery.AddOrderVersionFilter() which can be used to filter the Order Version independently from the Changed Version of a chunk. DOTS naming standards to CONVENTIONS.md libcurl Stevedore artifact registration Mathematics tests are turned on in CI Changed Improved performance of EntityQuery.ToEntityArray() Platform packages updated to 0.9.0-preview.9 Properties packages updated to 1.5.0-preview The job safety system has be moved to NativeJobs as C++ code The UnsafeUtility memory allocators have been moved to NativeJobs improved performance of EntityQuery.CopyFromComponentDataArray changed chunk size from 16128 bytes (16 KB - 256 bytes) to exactly 16384 bytes (16 KB). TypeManager.GetFieldInfo now takes in a Type to return an NativeArray<FieldInfo> . The passed in type must be registered to have field information generated explicitly via the [GenerateComponentFieldInfo] assembly attribute. IJobEntityBatch and IJobEntityBatchWithIndex now quietly skip batches whose size is zero. This can happen legitimately if the requested batchesPerChunk value is higher than the entity count for a particular chunk. *Removed deprecated ArchetypeChunk.Locked() method. *Deprecated ArchetypeChunk.BatchEntityCount property. The .Count property should be used instead. Removed usage of TempAssetCache for some livelink cases. Now these files are under SceneDependencyCache instead, so there is only one magic directory to deal with until we can remove it completely in future Unity versions. *Fixed Reduced overhead of IJobEntityBatchWithIndex prefiltering by up to 20% if batchesPerChunk is 1, or if EntityQuery filtering is disabled. Deprecated FixedStepSimulationSystemGroup.MaximumDeltaTime has been deprecated. The maximum delta time is now stored in World.MaximumDeltaTime . For better compatibility with UnityEngine, the new field applies to both the fixed-rate and variable-rate timesteps. ComponentSystemGroup.UpdateCallback is deprecated. Instead, the group calls the ShouldGroupUpdate() method on its FixedRateManager property (if non-null) to accomplish the same effect. FixedRateUtils.EnableFixedRateCatchUp() , FixedRateUtils.EnableFixedRateSimple() , and FixedRateUtils.DisableFixedRate() . These functions were used to set the deprecated ComponentSystemGroup.UpdateCallback field; instead, just set ComponentSystemGroup.FixedRateManager directly. Removed Old <2020.1 ifdef blocks in LiveLink scene culling code Deprecated legacy sort order code in ComponentSystemGroup was removed Fixed Removed GC-allocations in SceneSystem and SceneSectionStreamingSystem that were happening every frame Issue with invalid GUID in SubScene importer causing Player LiveLink to stall waiting for an asset it will never get Hybrid component transform syncing was not working when entity order changed Hybrid components being editable when in Preview Scenes (by selecting gizmos) Fixed an issue in 2020.2 which caused NativeContainer min-max ranges to be incorrectly patched when scheduling and IJobChunk or IJobEntityBatch with a \"Single\" or \"Run\" schedule call. Fields marked with RestrictAuthoringInputTo can now be set to None in the inspector The Entities package now uses a faster code path for CreateArchetypeChunkArray() more consistently. Retroactively added a changelog entry that notes a behavior change in RemoveComponent(EntityQuery, ComponentTypes) . See 'Change' entry under 0.14.0. Generic job reflection data across assemblies would sometimes not work Fixed HLOD component throwing out of bounds exception when setup incorrectly against LODGroup. Scene section meta data now works in standalone builds again Native memory leak in EditorSubSceneLiveLinkSystem when failing to apply patches Generic job registration is more robust when generic parameters LiveLink will not generate errors on scenes that have not yet loaded scene sections Corrected inverted test in IJobEntityBatchWithIndex if EntityQuery filtering is enabled. EntityManger.AddComponent<T>(EntityQuery entityQuery) and EntityManger.AddComponentData<T>(EntityQuery entityQuery, NativeArray<T> componentArray) is 2x faster. Reduced overhead of IJobEntityBatch execution by 5-10% if batchesPerChunk is 1. Security [0.15.0] - 2020-08-26 Added More detailed profiling of individual EntitiesILPostProcessors to Editor log (look for lines with \"EILPP\" marker). Added EntityQuery.IsEmpty function which respects the EntityQueryFilter s Changed DOTS Runtime now supports Burst.CompileFunctionPointer allowing for lambda job and EntityCommandBuffer playback to be Burst compiled. World.Time.ElapsedTime is now initialized to zero when the World is created. Bumped Burst to 1.3.5. Updated package com.unity.platforms to version 0.9.0-preview.1 . Improved performance of EntityQuery.CreateArchetypeChunkArray() Updated packages com.unity.properties and com.unity.serialization to version 1.4.3-preview . improved performance of EntityManager.AddComponent(NativeArray<Entity>,ComponentType) and EntityManager.RemoveComponent(NativeArray<Entity>,ComponentType) TypeCategory.Class is deprecated in favour of TypeCategory.UnityEngineObject A ComponentTypes value can no longer consist of duplicate types. (The collections safety checks look for duplicates and throw an exception.) Deprecated Deprecated RequiresEntityConversion attribute since it is not used anymore Removed Removed previously deprecated LiveLinkBuildImporter.GetHash Fixed Limit of 128 million Entities per World instituted. Fixed [GenerateAuthoringComponent] on IBufferElementData throwing a NullReferenceException at initialization when Live Conversion is active. Fixed an issue which caused an exception to occur when IJobEntityBatchWithIndex is scheduled with .Run() Fixed a few methods not correctly preserving shared component values: EntityManager.RemoveComponent(EntityQuery, ComponentTypes) , EntityCommandBuffer.RemoveComponent(EntityQuery, ComponentTypes) , EntityCommandBuffer.AddComponent(EntityQuery, ComponentTypes) . Fixed a bug with BufferFromEntity<T> which caused it to incorrectly update the version number of the buffer when marked ReadOnly TypeManager.GetWriteGroupTypes() no longer leaks AtomicSafetyHandle instances each time it is called. Fixed an issue where GetEntityInfo() can potentially crash the editor if the user passes in an invalid Entity Fixed buffer element authoring component not showing up in DOTS Compiler Inspector. TypeManager.Initialize now uses the TypeCache in Editor, improving the time it takes to enter playmode when no script compilation occurs. (1800ms -> 200ms) Fix Entities.ForEach WithDisposeOnJob method to work correctly with NativeArrays when scheduled with .Run . Fix IL2CPP build error with local methods used inside of Entities.ForEach lambdas. [0.14.0] - 2020-08-04 Added Added IsEmpty property to DynamicBuffer . Added deduplication for asset bundles generated for subscenes. Added new EntityManager methods: AddComponent(EntityQuery, ComponentTypes) , which adds multiple components to all entities matching a query; and RemoveComponent(Entity, ComponentTypes) , which removes multiple components from a single entity. ( AddComponent(Entity, ComponentTypes) and RemoveComponent(EntityQuery, ComponentTypes) already existed. This patch just fills in a few 'missing' methods.) Added EntityManagerDifferOptions.UseReferentialEquality which instructs the Differ to compare entity fields by GUID and blob asset reference fields by hash instead of bitwise equality Changed BlockAllocator is now backed by memory retrieved from platform virtual memory APIs. Platforms which do not support virtual memory will fall back to malloc/free. IJobEntityBatch.ScheduleSingle is being renamed to IJobEntityBatch.Schedule to match our naming guidelines for job scheduling. When DefaultWorldInitialization.Initialize() adds the default World's system groups to the Unity player loop, it now bases its modifications on the current player loop instead of the default player loop. This prevents the Entities package from accidentally erasing any previous player loop modifications made outside the package. DefaultWorldInitialization.DomainUnloadOrPlayModeChangeShutdown() now removes all existing World s from the Unity player loop before destroying them. If a World that was added to the player loop is destroyed manually prior to domain unload, it must also be removed from the player loop manually using ScriptBehaviourUpdateOrder.RemoveWorldFromPlayerLoop() . Updated package com.unity.platforms to version 0.7.0-preview.8 . EntityManager.CreateEntity() , EntityManager.SetArchetype() , and EntityCommandBuffer.CreateEntity() no longer accept the value returned by new EntityArchetype() because it's invalid. Same for EntityCommandBuffer.CreateEntity() and EntityCommandBuffer.ParallelWriter.CreateEntity() . Always use EntityManager.CreateArchetype() instead of new EntityArchetype() to create EntityArchetype values. (Ideally, the EntityArchetype constructor wouldn't be public, but C# doesn't allow that for a struct.) Subscene Inspector now uses a table format to allow easier management of multiple subscenes RemoveComponent(EntityQuery, ComponentTypes) now removes all provided components at once from all entities matching the query. Previously, the components were removed one at a time in a loop. This was less efficient and could affect which entities matched the query in subsequent loop iterations in unexpected ways. Deprecated IJobEntityBatch.ScheduleParallelBatched is being deprecated in favor of adding a batching parameter to IJobEntityBatch.ScheduleParallel ScriptBehaviourUpdateOrder.UpdatePlayerLoop() is being deprecated in favor of ScriptBehaviourUpdateOrder.AddWorldToPlayerLoop() . Due to slightly different semantics, a direct automated API update is not possible: the new function always takes a PlayerLoopSystem object to modify, does not call UnityEngine.LowLevel.PlayerLoop.SetPlayerLoop() , and does not create the top-level system groups if they don't exist. ScriptBehaviourUpdateOrder.IsWorldInPlayerLoop(World) is being deprecated in favor of ScriptBehaviourUpdateOrder.IsWorldInCurrentPlayerLoop(World) . Removed Removed obsolete ScriptBehaviourUpdateOrder.CurrentPlayerLoop . Use UnityEngine.LowLevel.PlayerLoop.GetCurrentPlayerLoop() instead. Removed obsolete ScriptBehaviourUpdateOrder.SetPlayerLoop() . Use UnityEngine.LowLevel.PlayerLoop.SetPlayerLoop() instead. Fixed Setting the Scene Asset on a Subscene would sometimes fail to trigger an import/conversion because the default ECS world was missing. Fixed crash when using Singleton access methods (GetSingleton, SetSingleton, etc.) with a generic parameter as argument. Fixed an issue which caused WebGL not to work, and could produce this error message on IL2CPP-based backends: NotSupportedException: To marshal a managed method, please add an attribute named 'MonoPInvokeCallback' to the method definition. The method we're attempting to marshal is: Unity.Entities.SystemBase::UnmanagedUpdate [0.13.0] - 2020-07-10 Added Added new EntityCommandBuffer methods: AddComponent(Entity, ComponentTypes) and AddComponent(EntityQuery, ComponentTypes) for adding multiple components in one call. ( EntityManager has an equivalent of the first already and will get an equivalent of the second later.) Added new EntityCommandBuffer methods: RemoveComponent(Entity, ComponentTypes) and RemoveComponent(EntityQuery, ComponentTypes) for removing multiple components in one call. ( EntityManager will get equivalents in the future.) Added new IJobEntityBatchWithIndex job interface, a variant of IJobEntityBatch that provides an additional indexOfFirstEntityInQuery parameter, which provides a per-batch index that is the aggregate of all previous batch counts. Added MaximumDeltaTime property to FixedStepSimulationSystemGroup , used similarly to UnityEngine.Time.maximumDeltaTime to control how gradually the application should recover from large transient frame time spikes. Added new player loop management functions to the ScriptBehaviourUpdateOrder class: AppendSystemToPlayerLoopList() : adds a single ECS system to a specific point in the Unity player loop. AddWorldToPlayerLoop() : adds the three standard top-level system groups to their standard player loop locations. IsWorldInPlayerLoop(World, PlayerLoopSystem) : searches the provided player loop for any systems owned by the provided World. RemoveWorldFromPlayerLoop() : removes all systems owned by a World from the provided player loop. AddWorldToCurrentPlayerLoop() , IsWorldInCurrentPlayerLoop() , and RemoveWorldFromCurrentPlayerLoop() : wrappers around the above functions that operate directly on the currently active player loop. Changed Updated minimum Unity Editor version to 2020.1.0b15 (40d9420e7de8) Profiler markers for EntityCommandBuffer.Playback from EntityCommandBufferSystem s now include name of the system that recorded the EntityCommandBuffer . Bumped burst to 1.3.2 version. EntityQuery commands for AddComponent , RemoveComponent , and DestroyEntity in the EntityCommandBuffer now use Burst during Playback. IJobChunk and Entities.ForEach ScheduleParallel has been optimized in case there is no EntityQuery filtering necessary (Shared component or change filtering) TypeManager.GetSystems() now returns an IReadOnlyList<Type> rather than a List<Type> Updated package com.unity.platforms to version 0.6.0-preview.4 . EntityContainer will now allow to write data back to the entity. Updated package com.unity.properties and com.unity.serialization to version 1.3.1-preview . Fixed Fixed warning treated as error in the case that a warning is emitted for Entities.ForEach passing a component type as value. Fixed paths displayed in IL post-processing error messages to be more consistent with Unity error messages. Fixed exceptions being thrown when inspecting an entity with a GameObject added through EntityManager.AddComponentObject . Fixed DCICE002 error thrown during IL post-processing when Entities.ForEach contains multiple Entities.ForEach in same scope capturing multiple variables. EntityManager 's AddComponent() , RemoveComponent() , and CopyEntitiesFrom() methods no longer throw an error if their input is a NativeArray<Entity> allocated with Allocator.Temp whose length is >10 elements. Throw error when Entities.ForEach has an argument that is a generic DynamicBuffer. Re-adding a system to a ComponentSystemGroup immediately after removing it from the group now works correctly. ComponentSystemGroup.Remove() is now ignored if the target system is already enqueued for removal, or if it isn't in the group's update list in the first place. Fixed IL post-processing warnings being emitted with \"error\" title. Fixed \"Invalid IL\" error when try/finally block occurs in Entities.ForEach lambda body or cloned method (usually occurs with using or foreach and WithoutBurst ). Fixed Unexpected error when Job.WithCode is used with WithStructuralChanges (now throw an error). Fixed a bug where Unity.Scenes.EntityScenesPaths.GetTempCachePath() could return invalid strings Fixed freezing of editor due to accessing the EntityManager property within Rider's debugger Fixed a bug where calling SetArchetype on an entity containing a component with ISystemStateComponentData may sometimes incorrectly throw an ArgumentException Known Issues This version is not compatible with 2020.2.0a17. Please update to the forthcoming alpha. [0.12.0] - 2020-05-27 Added Added BufferFromEntity.DidChange() , with the same semantics as the existing ComponentDataFromEntity.DidChange() . Added BufferFromEntity.HasComponent() , with the same meaning as the existing .Exists() call (which is now deprecated). Added WorldSystemFilterFlags.All flag to include allow calls to TypeManager.GetSystems() to return all systems available to the runtime including systems decorated with [DisableAutoCreation]. Added DynamicBuffer.RemoveAtSwapBack() and DynamicBuffer.RemoveRangeSwapBack() Added Entities.WithDisposeOnCompletion to correctly Dispose of types after running an Entities.ForEach . Added SystemBase.GetBuffer/GetBufferFromEntity that are patched so that they can be used inside of Entities.ForEach . Added BlobAllocator.SetPointer to allow having a blob pointer to an object which already exists in the blob. This can be used for example to reference a parent node in a tree. Added GameObjectConversionSystem.CreateAdditionalEntity overload that allows to create multiple new entities at once. Added a new FixedStepSimulationSystemGroup . Systems in this group update with a fixed timestep (60Hz by default), potentially running zero or several times per frame to \"catch up\" to the actual elapsed time. See the FixedTimestepSystemUpdate sample scene for an example of how to use this system group. Changed Updated minimum Unity Editor version to 2020.1.0b9 (9c0aec301c8d) World.Dispose() now destroys all the world's systems before removing the World from the \"all worlds\" list. Extended TypeManager.GetSystems() to support getting systems filtered by any and/or all WorldSystemFilterFlags . Updated package com.unity.platforms to version 0.4.0-preview.5 . Updated package com.unity.burst to version 1.3.0-preview.12 . Unity.Entities.DefaultWorldInitialization has been moved from the Unity.Entities.Hybrid assembly into the Unity.Entities assembly. Unity.Entities.DefaultWorldInitialization.Initialize() now returns the initialized World.DefaultGameObjectInjectionWorld object. ArchetypeChunkComponentType has been renamed to ComponentTypeHandle ArchetypeChunkComponentTypeDynamic has been renamed to DynamicComponentTypeHandle ArchetypeChunkBufferType has been renamed to BufferTypeHandle ArchetypeChunkSharedComponentType has been renamed to SharedComponentTypeHandle ArchetypeChunkEntityType has been renamed to EntityTypeHandle ArchetypeChunkComponentObjects has been renamed to ManagedComponentAccessor Unity.Entities.EditorRenderData has been moved from the Unity.Entities.Hybrid assembly to the Unity.Entities assembly. Unity.Scenes.Hybrid has been renamed to Unity.Scenes . Any asmdefs referring to the old assembly name must be updated. The ScriptUpgrader will take care of updating using namespace imports. Unity.Entities.SceneBoundingVolume has moved from the Unity.Entities.Hybrid assembly to the Unity.Scenes assembly and Unity.Scenes namespace. Any asmdefs referring to the old assembly name must be updated. The ScriptUpgrader will take care of updating using namespace imports. EntityCommandBuffer.Concurrent has been renamed to EntityCommandBuffer.ParallelWriter . EntityCommandBuffer.ToConcurrent() has been renamed to EntityCommandBuffer.AsParallelWriter() and now returns EntityCommandBuffer.ParallelWriter (renamed from Concurrent ). Duplicate query parameters (from WithAll and lambda parameters) are now allowed in Entities.ForEach (they are now sanitized for the user). If a change filter is used in Entities.ForEach with WithChangeFilter , the component type will automatically get added to the query. Add additional warnings around conflicting use of WithNone , WithAll , WithAny and lambda parameters in Entities.ForEach . Warn if a user passes a struct component parameter by value to their lambda in Entities.ForEach (since changes won't be reflected back to the underlying component). An exception is now thrown during serialization if a shared component containing entity references is encountered. EntityScene generation (Happening in a background process) is now integrated with the async progress bar to indicate when entity data is being generated. The code that tracks dependencies for entity scenes, determines when to regenerated them in the editor is significantly cheaper now. When safety checks are enabled EntityManager.AddComponent(NativeArray<Entity>, ComponentType) now throws ArgumentException instead of InvalidOperationException when any of the entities are invalid FixedRateUtils timesteps outside the range 0.0001 to 10.0f are now clamped, for consistency with UnityEngine.Time.fixedDeltaTime . Added [NoAlias] attributes to the DynamicBuffer native container to explain its aliasing to Burst. Updated package com.unity.properties to version 1.3.0-preview . Updated package com.unity.serialization to version 1.3.0-preview . Deprecated Deprecated WithDeallocateOnJobCompletion for Entities.ForEach ; Use WithDisposeOnCompletion instead. Deprecated ComponentDataFromEntity.Exists() ; Use .HasComponent() instead. Deprecated BufferFromEntity.Exists() ; Use .HasComponent() instead. Fixed Fixed data corruption bug in Entities.WithStructuralChange().ForEach() when components on entities that are about to be processed get removed before we process the entity. EntityManager.SetName now causes less GC memory allocations Entities.WithDeallocateOnJobCompletion() now correctly deallocates data at the end instead of after the first chunk when used with Run() (Note that Entities.WithDeallocateOnJobCompletion() has been deprecated in favor of Entities.WithDisposeOnCompletion().) Entities.WithDeallocateOnJobCompletion() now deallocates data when used with WithStructuralChanges() (Note that Entities.WithDeallocateOnJobCompletion() has been deprecated in favor of Entities.WithDisposeOnCompletion().) Creating section section meta data during conversion will no longer trigger an invalid warning about missing SceneSection components Fixed a crash that could happen when calling EntityDataAccess.PlaybackManagedChanges from bursted code after a domain reload Fixed compilation issue when compiling multiple Entities.ForEach in the same method that use captured variables from different scopes. Fix to unexpected error when using capturing Entities.ForEach inside a method with a generic argument (error now correctly indicates that it is not currently supported). UnloadAllAssets will no longer unload assets referenced by shared or managed components. Fixed load order of JobReflection static methods which were causing InvalidOperationException: Reflection data was not set up by code generation exceptions in player builds. Beginning an exclusive entity transaction while another one is in progress now doesn't fail silently anymore but throws an exception Fixed race condition in the Chunks component version Shared component version is now always based off a global version. Thus Destroying all usage of a specific shared component and recreating it will now result in a changed version number. The Loading Entity Scene failed message now contains more information for why the scene failed to load GameObjectEntityEditor no longer throws exceptions when selecting a prefab Components on GameObjects with invalid MonoBehaviours no longer cause exceptions when used as hybrid components Deleting a GameObject with ConvertToEntity before converting it no longer throws an exception Errors happening during scene streaming now contain the callstack The jobIndex parameter passed to EntityCommandBuffer.ParallelWriter methods has been renamed to sortKey to better express its purpose. Its functionality is unchanged. Invalid uses of the new OrderFirst and OrderLast fields in the [UpdateInGroup] attribute are now detected and reported. Some previous spurious warnings regarding these fields are now suppressed. Greatly reduced the garbage generated by redrawing the chunk utilization histograms in the entity debugger Improved performance of EntityManager.AddComponent(NativeArray<Entity>, ComponentType) when safety checks are enabled EntityManager.RemoveComponent(NativeArray<Entity>, ComponentType) now always checks that the component can be removed, not just for the case of few entities Fixed issues where FixedRateUtils.FixedRateCatchUpManager was occasionally not running its first update at elapsedTime = 0.0. [0.11.0] - 2020-05-04 Added Added ArchetypeChunkComponentObjects<T>.Length Changed Updated package com.unity.burst to version 1.3.0-preview.11 Improves ComponentType.ToString names in Dots Runtime to provide the full type name when available, and if not, defaults to the StableTypeHash. EntityManager.Version and EntityManager.GlobalSystemVersion will throw if the manager is not valid instead of returning 0. Deprecated Deprecate system sorting via virtual functions and direct modification of system list. There are now two new properties on the UpdateInGroup attribute: OrderFirst and OrderLast . Setting either of these properties to true will group the system together with others tagged in the same way, and those systems will sort in a subgroup by themselves. This change was needed to enable Burst compatible systems in the future. Deprecate EntityManager.IsCreated which cannot be efficiently implemented with EntityManager as a struct. For the (hopefully rare) cases where you need to determine if an entity manager is still valid, use World.IsCreated instead as the world and entity manager are always created and destroyed in tandem. Removed Removed expired API EntityQuery.CreateArchetypeChunkArray(Allocator, out JobHandle) . Removed expired API EntityQuery.ToEntityArray(Allocator, out JobHandle) . Removed expired API EntityQuery.ToComponentDataArray<T>(Allocator, out JobHandle) . Removed expired API EntityQuery.CopyFromComponentDataArray<T>(NativeArray<T>, out JobHandle) . Fixed Improved JobsDebugger errors invvolving the EntityManager . requires Unity 2020.1.0b5 or later Fixed potential infinite loop in FixedRateUtils.FixedRateCatchUpManager if these callbacks were enabled on the first frame of execution. When FixedRateUtils.FixedRateCatchUpManager or FixedRateUtils.FixedRateSimpleManager are enabled, the first update is now guaranteed to take place at elapsedTime = 0.0. Asset dependencies registered via GameObjectConversionSystem.DeclareAssetDependency are now checked for validity, inbuilt assets are ignored Improved performance of the EntityPatcher when applying changes to large amounts of entities The script template for ECS systems now uses SystemBase instead of JobComponentSystem Fixed instantiation of entities with multiple hybrid components causing corruption of the managed store. Removed remapping of entity fields in hybrid components during instantiation (this wasn't supposed to happen). Fix crash when trying to remap entity references within recursive types. Serialization and LiveLink now supports blob asset references in shared components. Serialization and LiveLink now supports blob asset references in managed components. Fix bug with EntityQuery.CopyFromComponentDataArray causing it to behave like ToComponentDataArray [0.10.0] - 2020-04-28 Added Added GetOrderVersion() to ArchetypeChunk. Order version bumped whenever structural change occurs on chunk. Added GetComponentDataFromEntity method that streamlines access to components through entities when using the SystemBase class. These methods call through to the ComponentSystemBase method when in OnUpdate code and codegen access through a stored ComponentDataFromEntity when inside of Entities.ForEach . Added support for WorldSystemFilterFlags.ProcessAfterLoad which enable systems to run in the streaming world after a entity section is loaded. Added DynamicBuffer.CopyFrom() variant that copies from a NativeSlice Added DynamicBuffer.GetUnsafeReadOnlyPtr() , for cases where only read-only access is required. Added PostLoadCommandBuffer component which can be added to scene or section entities to play back a command buffer in the streaming world after a entity section is loaded. Adding it to the scene entity will play back the command buffer on all sections in the scene. Added WorldSystemFilterFlags.HybridGameObjectConversion and WorldSystemFilterFlags.DotsRuntimeGameObjectConversion to annotate conversion systems to be used specifically for hybrid or dots runtime. Added missing profiler markers when running an Entities.ForEach directly with .Run . Added support for storing metadata components in the header of converted subscenes. Components can be added to the section entities requested with GameObjectConversionSystem.GetSceneSectionEntity . The added components are serialized into the entities header and will be added to the section entities at runtime when the scene is resolved. ResolvedSectionEntity buffer component is now public and can be used to access metadata components on a resolved scene entity. Added 'Clear Entities Cache' window under the DOTS->Clear Entities Cache menu. By default, all caches are enabled for clearing. Clearing Live Link Player cache wipes the local player cache of a livelink build next time it connects to the editor. Clearing Entity Scene cache invalidates all Entity Scenes (SubScenes) causing them to reimport on next access. Clearing Live Link Assets cache, causing the next Live Link connection to reimport all on-demand live link assets. Changed Bumped Burst version to improve compile time and fix multiple bugs. ChangeVersions behavior more consistent across various entry points. Updated package com.unity.properties to version 1.1.1-preview . Updated package com.unity.serialization to version 1.1.1-preview . Updated package com.unity.platforms to version 0.3.0-preview.4 . ConvertToEntity no longer logs a warning if there are multiples of a given authoring component on the converted GameObject, so it is now compatible with conversion systems that can support multiples. Improved the StableTypeHash calculation used when serializing components to be more resilient. The hash will now properly invalidate serialized data should component data layout change as a result of [StructLayout(LayoutKind.Explict)] , as well as if a nested component field's data layout changes. Make it possible to use Entities.ForEach with >8 parameters if you supply your own delegate type Deprecated EntityManager.UnlockChunk deprecated Adding components to entities converted from GameObjects using proxy components has been deprecated, please use the new conversion workflows using GameObjectConversionSystem and IConvertGameObjectToEntity ComponentDataProxyBaseEditor , DynamicBufferProxyBaseEditor from Unity.Entities.Editor deprecated ComponentDataProxy<T> , ComponentDataProxyBase , DynamicBufferProxy<T> , SharedComponentDataProxy<T> , SceneSectionProxy from Unity.Entities.Hybrid deprecated MockDataProxy , MockDynamicBufferDataProxy , MockSharedDataProxy , MockSharedDisallowMultipleProxy from Unity.Entities.Tests deprecated CopyInitialTransformFromGameObjectProxy , CopyTransformFromGameObjectProxy , CopyTransformToGameObjectProxy , LocalToWorldProxy , NonUniformScaleProxy , RotationProxy , TranslationProxy from Unity.Transforms deprecated Deprecated ScriptBehaviourUpdateOrder.CurrentPlayerLoop ; Use PlayerLoop.GetCurrentPlayerLoop() instead Deprecated ScriptBehaviourUpdateOrder.SetPlayerLoop ; Use PlayerLoop.SetPlayerLoop() instead Removed Removed expired API BlobAssetComputationContext.AssociateBlobAssetWithGameObject(Hash128, GameObject) Removed expired API BlobAssetReference.Release() Removed expired API BlobAssetStore.UpdateBlobAssetForGameObject<T>(int, NativeArray<Hash128>) Removed expired API class TerminatesProgramAttribute Removed expired API EntityManager.LockChunkOrder(ArchetypeChunk) Removed expired API EntityManager.LockChunkOrder(EntityQuery) Removed expired API EntityManager.LockChunkOrder(NativeArray<ArchetypeChunk>) Removed expired API EntityManager.UnlockChunkOrder(ArchetypeChunk) Removed expired API EntityManager.UnlockChunkOrder(EntityQuery) Removed expired API GameObjectConversionSettings.BuildSettings Removed expired API GameObjectConversionSystem.GetBuildSettingsComponent<T>() Removed expired API GameObjectConversionSystem.TryGetBuildSettingsComponent<T>(out T) Removed expired API LambdaJobDescriptionConstructionMethods.WithBurst(...) Removed expired API LambdaJobDescriptionConstructionMethods.WithNativeDisableUnsafePtrRestrictionAttribute(...) Removed expired API SceneSystem.BuildSettingsGUID Removed expired overload of BlobBuilder.Allocate<T>(int, ref BlobArray<T>) Removed expired overload of EntityQuery.CopyFromComponentDataArray<T>(...) Removed expired overload of EntityQuery.CreateArchetypeChunkArray(...) Removed expired overload of EntityQuery.ToComponentDataArray<T>(...) Removed expired overload of EntityQuery.ToEntityArray(...) Fixed Fixed the synchronization of transforms for Hybrid Components to handle scale properly. Improved JobsDebugger error messages when accessing ComponentDataFromEntity , ArchetypeChunkComponentType , ArchetypeChunkComponentTypeDynamic , ArchetypeChunkBufferType , ArchetypeChunkSharedComponentType , ArchetypeChunkEntityType , and BufferFromEntity after a structural change. (requires Unity 2020.1.0b2 or later) Fixed scene camera culling masks not being reset in the case of using ConvertToEntity but not any scene conversion Fix to IL2CPP compilation errors occuring in IL2CPP builds with Entities.ForEach with nested captures. Fixed the entity inspector showing incorrect data for chunk components. Fixed entity scene load error caused by type hash mismatch when serializing hybrid components with conditionally compiled fields. LambdaJobTestFixture and AutoCreateComponentSystemTests_* systems are no longer added to the simulation world by default. GameObjectConversionSystem.DependOnAsset now correctly handles multiple sub-scenes Ensure that patched component access methods ( GetComponent/SetComponent/HasComponent ) don't break Entities.ForEach when there are a lot of them (due to short branch IL instructions). Fixed deactivation of Hybrid Components when the entity was disabled or turned into a prefab. Improved performance of singleton access methods ( SetSingleton / GetSingleton ). Fixed managed components not being serialized during player livelink. Fixed CompanionLink being incorrectly synced during player livelink. Fixed a false-positive in the EntityDiffer when a shared component in a changed chunk has its default value Fixed Entities.ForEach lambdas that call static methods as well as component access methods ( GetComponent/SetComponent/HasComponent ). Remapping no longer incorrectly visits UnityEngine.Object types (i.e. assets). Improved performance for managed object operations (Equality, Cloning and Remapping). [0.9.1] - 2020-04-15 Fixed Fixed NullReferenceException issue with Singleton access methods in SystemBase. [0.9.0] - 2020-04-09 Added public void GetCreatedAndDestroyedEntitiesAsync(NativeList<int> state, NativeList<Entity> createdEntities, NativeList<Entity> destroyedEntities) detects which entities were created and destroyed since the last call to this method. Added the ability to reimport a SubScene via an inspector button, which forces reconversion. Added GameObjectConversionSystem.DeclareAssetDependency which expresses that the conversion result of a GameObject depends on an Asset Added void EntityManager.Instantiate(NativeArray<Entity> srcEntities, NativeArray<Entity> dstEntities) . It gives explicit control over the set of entities that are instantiated as a set. Entity references on components that are cloned to entities inside the set are remapped to the instantiated entities. Added void EntityManager.CopyEntitiesFrom(EntityManager srcEntityManager, NativeArray<Entity> srcEntities, NativeArray<Entity> outputEntities = default) . It lets you copy a specific set of entities from one World to another. Entity references on components that are cloned to entities inside the set are remapped to the instantiated entities. Added assembly for Mesh Deformation data structures. Changed Systems are now constructed in two phases. First, ECS creates a new instance of all systems and invokes the constructor. Then, it invokes all OnCreate methods. This way, you can now use World.GetExistingSystem<OtherSystem>() from inside OnCreate() . Systems are now destroyed in three phases. First, ECS stops all running systems (i.e. OnStopRunning() is invoked). Then it invokes all OnDestroy methods. Finally, ECS destroys all systems. This means you can perform safe and predictable cleanup of systems with cross-references to other systems. EntityCommandBuffer Playback now Bursted through function pointers. When there's a mix of unmanaged and managed commands in a single buffer, unmanaged commands will be Bursted. When there are no managed commands, each chain's Playback is fully Bursted. Entities.ForEach in a GameObjectConversionSystem no longer logs a warning if there are multiples of a queried authoring component on a matching GameObject. It now returns the first component instance of the desired type, so conversion systems can optionally call GetComponents<T>() in order to handle multiples if desired. Declaring a non-Prefab object as a referenced Prefab during conversion now emits a warning Improved performance of access to singletons through SetSingleton and GetSingleton in SystemBase (peformance is also improved through these methods on EntityQuery). Updated package com.unity.properties to version 1.1.0-preview . Updated package com.unity.serialization to version 1.1.0-preview . Updated package com.unity.platforms to version 0.2.2-preview.3 . Updated package com.unity.platforms to version 0.2.2-preview.7 . Deprecated Deprecated public T World.CreateSystem<T>(params object[] constructorArguments) . Please use World.AddSystem(new MySystem(myParams)); instead. Deprecated LiveLinkBuildImport.GetHash/GetDependencies/GetBundlePath . Removed Removed expired API TypeManager.CreateTypeIndexForComponent<T>() Removed expired API TypeManager.CreateTypeIndexForSharedComponent<T>() Removed expired API TypeManager.CreateTypeIndexForBufferElement<T>() Removed expired API DynamicBuffer.Reserve(int) Removed expired API World.Active Fixed Fix BlobAssetSafetyVerifier to generate a better error message when readonly is used with BlobAsset references. Fixed incorrect comparison in EntityChunk.CompareTo() . SceneManager.IsSceneLoaded now works for converted entity Scenes and returns whether all sections of an entity Scene have loaded. Fixed Exception in conversion code when trying to delete entities that are part of a Prefab. Fixed Hybrid Component conversion failing when multiple components were added for the same GameObject. Fixed use of component access methods (GetComponent/SetComponent/HasComponent) inside Entities.ForEach with nested captures. Fix compilation issue when ENABLE_SIMPLE_SYSTEM_DEPENDENCIES is enabled. Known Issues System groups do not currently apply to systems running as part of EntitySceneOptimizations Known Issues System groups do not currently apply to systems running as part of EntitySceneOptimizations [0.8.0] - 2020-03-12 Added Added missing dynamic component version API: ArchetypeChunk.GetComponentVersion(ArchetypeChunkComponentTypeDynamic) Added missing dynamic component has API: ArchetypeChunk.Has(ArchetypeChunkComponentTypeDynamic) EntityArchetype didn't expose whether it was Prefab or not. Added bool EntityArchetype.Prefab . This is needed for meta entity queries, because meta entity queries don't avoid Prefabs. Added Build Configurations and Build Pipelines for Linux LiveLink now gives an error if a LiveLink player attempts to connect to the wrong Editor, and advises the user on how to correct this. Changed Renamed GetComponentVersion() to GetChangedVersion() when referring to version number changes on write access to components. Optimized ArchetypeChunkComponentTypeDynamic memory layout. 48->40 bytes. LiveLink: Editor no longer freezes when sending LiveLink assets to a LiveLinked player. LiveLink: No longer includes every Asset from builtin_extra to depend on a single Asset, and sends only what is used. This massively speeds up the first-time LiveLink to a Player. Upgraded Burst to fix multiple issues and introduced native debugging feature. Deprecated Fixed Fixed LiveLinking with SubScene Sections indices that were not contiguous (0, 1, 2..). Now works with whatever index you use. Fixed warning when live converting disabled GameObjects. Allow usage of Entities.WithReadOnly , Entities.WithDeallocateOnJobCompletion , Entities.WithNativeDisableContainerSafetyRestriction , and Entities.WithNativeDisableParallelForRestriction on types that contain valid NativeContainers. [0.7.0] - 2020-03-03 Added Added HasComponent / GetComponent / SetComponent methods that streamline access to components through entities when using the SystemBase class. These methods call through to EntityManager methods when in OnUpdate code and codegen access through ComponentDataFromEntity when inside of Entities.ForEach . SubScene support for hybrid components, allowing Editor LiveLink (Player LiveLink is not supported yet). Added GameObjectConversionSettings.Systems to allow users to explicitly specify what systems should be included in the conversion Changed Fixed an issue where shared component filtering could be broken until the shared component data is manually set/added when using a deserialized world. Users can control the update behaviour of a ComponentSystemGroup via an update callback. See the documentation for ComponentSystemGroup.UpdateCallback , as well as examples in FixedRateUtils . IDisposable and ICloneable are now supported on managed components. World now exposes a Flags field allowing the editor to improve how it filters world to show in various tooling windows. World.Systems is now a read only collection that does not allocate managed memory while being iterated over. Updated package com.unity.platforms to version 0.2.1-preview.4 . Deprecated Property World.AllWorlds is now replaced by World.All which now returns a read only collection that does not allocate managed memory while being iterated over. Removed Removed expired API implicit operator GameObjectConversionSettings(World) Removed expired API implicit operator GameObjectConversionSettings(Hash128) Removed expired API implicit operator GameObjectConversionSettings(UnityEditor.GUID) Removed expired API TimeData.deltaTime Removed expired API TimeData.time Removed expired API TimeData.timeSinceLevelLoad Removed expired API TimeData.captureFramerate Removed expired API TimeData.fixedTime Removed expired API TimeData.frameCount Removed expired API TimeData.timeScale Removed expired API TimeData.unscaledTime Removed expired API TimeData.captureDeltaTime Removed expired API TimeData.fixedUnscaledTime Removed expired API TimeData.maximumDeltaTime Removed expired API TimeData.realtimeSinceStartup Removed expired API TimeData.renderedFrameCount Removed expired API TimeData.smoothDeltaTime Removed expired API TimeData.unscaledDeltaTime Removed expired API TimeData.fixedUnscaledDeltaTime Removed expired API TimeData.maximumParticleDeltaTime Removed expired API TimeData.inFixedTimeStep Removed expired API ComponentSystemBase.OnCreateManager() Removed expired API ComponentSystemBase.OnDestroyManager() Removed expired API ConverterVersionAttribute(int) Fixed Non-moving children in transform hierarchies no longer trigger transform system updates. Fixed a bug where dynamic buffer components would sometimes leak during live link. Fixed crash that would occur if only method in a module was generated from a [GenerateAuthoringComponent] type. Entities.ForEach now throws a correct error message when it is used with a delegate stored in a variable, field or returned from a method. Fix IL2CPP compilation error with Entities.ForEach that uses a tag component and WithStructuralChanges . Entities.ForEach now marshals lambda parameters for DOTS Runtime when the lambda is burst compiled and has collection checks enabled. Previously using EntityCommandBuffer or other types with a DisposeSentinel field as part of your lambda function (when using DOTS Runtime) may have resulted in memory access violation. .Run() on IJobChunk may have dereferenced null or invalid chunk on filtered queries. BlobAssetSafetyVerifier would throw a ThrowArgumentOutOfRangeException if a blob asset was using in a struct with a method that yielded (instead of generating a valid error). Security Throw correct error message if accessing ToComponentDataArrayAsync CopyFromComponentDataArray or CopyFromComponentDataArrayAsync from an unrelated query. [0.6.0] - 2020-02-17 Added The [GenerateAuthoringComponent] attribute is now allowed on structs implementing IBufferElementData . An authoring component is automatically generated to support adding a DynamicBuffer of the type implementing IBufferElementData to an entity. Added new SystemBase base class for component systems. This new way of defining component systems manages dependencies for the user (manual dependency management is still possible by accessing the SystemBase.Dependency field directly). New ScheduleParallel methods in IJobChunk and Entities.ForEach (in SystemBase ) to make parallel scheduling of jobs explicit. ScheduleSingle in IJobChunk indicates scheduling work to be done in a non-parallel manner. New editor workflow to quickly and easily build LiveLink player using the BuildConfiguration API. Adds Live Link support for GameObject scenes. The SceneSystem API now also loads GameObject scenes via LoadSceneAsync API. Added new build component for LiveLink settings in Unity.Scenes.Editor to control how initial scenes are handled (LiveLink all, embed all, embed first). Users can now inspect post-procssed IL code inside Unity Editor: DOTS -> DOTS Compiler -> Open Inspector GetAssignableComponentTypes() can now be called with or without a List<Type> argument to collect the data. When omitted, the list will be allocated, which is the same behavior as before. Changed The package com.unity.build has been merged into the package com.unity.platforms . As such, removed the dependency on com.unity.build@0.1.0-preview and replaced it with com.unity.platforms@0.2.1-preview.1 . Please read the changelog of com.unity.platforms for more details. Managed components are now stored in a way that will generate less GC allocations when entities change archetype. Moved Unity.Entities.ICustomBootstrap from Unity.Entities.Hybrid to Unity.Entities. World.Dispose() now completes all reader/writer jobs on the World 's EntityManager before releasing any resources, to avoid use-after-free errors. Fix AssemblyResolveException when loading a project with dependent packages that are using Burst in static initializers or InitializeOnLoad . .sceneWithBuildSettings files that are stored in Assets/SceneDependencyCache are no longer rebuilt constantly. Because they are required for SubScene behaviour to work in the editor, if these are deleted they are recreated by OnValidate of the SubScene in the edited Scene. They should also be recreated on domain reload (restarting unity, entering/exiting playmode, etc). EntityQuery.cs : Overloads of CreateArchetypeChunkArray , ToComponentDataArray , ToEntityArray , and CopyFromComponentDataArray that return a JobHandle (allowing the work to be done asynchronously) have been renamed to add Async to the title (i.e. ToComponentDataArrayAsync ). The old overloads have been deprecated and an API Updater clause has been added. Entities.WithName now only accepts names that use letters, digits, and underscores (not starting with a digit, no two consecutive underscores) Updated package com.unity.properties to version 0.10.4-preview . Updated package com.unity.serialization to version 0.6.4-preview . The entity debugger now remembers whether chunk info panel is visible The entity debugger now displays the full name for nested types in the system list The entity debugger now sorts previously used filter components to the top of the filter GUI Bumped burst version to include the new features and fixes including: Fix an issue with function pointers being corrupted after a domain reload that could lead to hard crashes. Fix potential deadlock between Burst and the AssetDatabase if burst is being used when building the database. Deprecated Method GetBuildSettingsComponent on class GameObjectConversionSystem has been renamed to GetBuildConfigurationComponent . Method TryGetBuildSettingsComponent on class GameObjectConversionSystem has been renamed to TryGetBuildConfigurationComponent . Member BuildSettings on class GameObjectConversionSettings has been renamed to BuildConfiguration . Member BuildSettingsGUID on class SceneSystem has been renamed to BuildConfigurationGUID . Removed Removed expired API SceneSectionData.SharedComponentCount Removed expired API struct SceneData Removed expired API SubScene._SceneEntities Removed expired API World.Active Fixed Ability to open and close SubScenes from the scene hierarchy window (Without having to move cursor to inspector window). Ability to create a new empty Sub Scene without first creating a game object. Improve performance of SubScene loading and change tracking in the editor. Fixed regression where GetSingleton would create a new query on every call. Fixed SubScenes trying to load an already loaded AssetBundle when loaded multiple times on the same player, but with different Worlds. Make it clear that SubScenes in Prefabs are not supported. Lambda job codegen tests now fail if the error message does not contain the expected contents. Improved performance of setting up the world required for game object conversion The chunkIndex parameter passed to IJobChunk.Execute() now has the correct value. Fixed an error which caused entities with ISystemStateSharedComponentData components to not be cleaned up correctly. Managed components containing Entity fields will now correctly serialize. Fixed issue where BlobAssetVerifier will throw error if it can't resolve a type. Exposed the Managed Component extensions for EntityQuery . Entities.ForEach now identifies when this of the enclosing system is captured due to calling an extension method on it when compilation fails since the lambda was emitted as a member function Entities.ForEach now reports when a field of the outer system is captured and used by reference when compilation fails since the lambda was emitted as a member function Entities.ForEach does not erronously point to calling static functions as the source of the error when compilation fails since the lambda was emitted as a member function Debugging inside of Entities.ForEach with Visual Studio 2017/2019 (some debugging features will need an upcoming update of the com.unity.ide.visualstudio package). EntityQuery.ToComponentArray<T> with T deriving from UnityEngine.Component now correctly collects all data in a chunk Fixed an issue with ComponentSystemBase.GetEntityQuery and EntityManager.CreateEntityQuery calls made with EntityQueryDesc not respecting read-only permissions. [0.5.1] - 2020-01-28 Changed Constructor-related exceptions thrown during World.CreateSystem will now included the inner exception details. DefaultWorldInitialization.GetAllSystems now returns IReadOnlyList<Type> instead of List<Type> DefaultWorldInitialization.AddSystemsToRootLevelSystemGroups now takes IEnumerable<Type> instead of List<Type> Fixed Fixed an issue where BlobAssetReference types was not guaranteed to be 8-byte aligned on all platforms which could result in failing to read Blob data in components correctly on 32-bit platforms. Fixed issue in MinMaxAABB.Equals() comparing Min to itself rather than other . Entities.ForEach now properly treats in parameters of DynamicBuffer type as read-only Fixed potential crash caused by a leaked job after an exception is thrown during a call to IJobChunk.Schedule . Fixed regression in ComponentSystemBase.GetSingleton() where a new query would be created every timee the function is called. [0.5.0] - 2020-01-16 Added Added AndroidHybrid.buildpipeline with RunStepAndroid Changed Entities.WithReadOnly , Entities.WithNativeDisableParallelForRestriction , Entities.WithDeallocateOnJobCompletion , Entities.WithNativeDisableSafetyRestriction and Entities.WithNativeDisableUnsafePtrRestriction now check their argument types for the proper attributes ( [NativeContainer] , [NativeContainerSupportsDeallocateOnJobCompletion] ) at compile time and throw an error when used on a field of a user defined type. Log entries emitted during subscene conversion without a context object are now displayed in the subscene inspector instead of discarded Deprecated Adding removal dates to the API that have been deprecated but did not have the date set. BlobAssetReference<T> : Release() was deprecated, use Dispose() instead. Removed Adding removal dates to the API that have been deprecated but did not have the date set. BlobAssetReference<T> : Release() was deprecated, use Dispose() instead. EntityQuery.cs : Removed expired API CalculateLength() , SetFilter() and SetFilterChanged() . Fixed Fixed an issue where trying to perform EntityRemapping on Managed Components could throw if a component field was null. EntityManager.MoveEntitiesFrom with query was not bumping shared component versions, order versions or dirty versions correctly. Now it does. Fixed that adding a Sub Scene component from the Add Components dropdown was not reflected in the Hierarchy. Fixed so that Undo/Redo of changes to SceneAsset objectfield in the Sub Scene Inspector is reflected in the Hierarchy. Make it clear when Sub Scene duplicates are present: shown in Hierarchy and by showing a warning box in the Inspector. Support Undo for 'Create Sub Scene From Selection' context menu item. Better file name error handling for the 'New Sub Scene From Selection' context menu item. Keep sibling order for new Sub Scene when created using 'New Sub Scene From Selection' (prevents the new Sub Scene from ending as the last sibling). Handle if selection contains part of a Prefab instance when creating Sub Scene from Selection. Fix dangling loaded Sub Scenes not visualized in the Hierarchy when removing Scene Asset reference in Sub Scene component. Fixed an issue with invalid IL generated by Entities.ForEach when structs are captured as locals from two different scopes and their fields are accessed. Make it clear in the Hierarchy and Sub Scene Inspector that nesting Sub Scenes is not yet supported. Fixed an issue with BinaryWriter where serializing a System.String[] with a single element would throw an exception. Fixed an issue with ComponentSystem.GetEntityQuery and JobComponentSystem.GetEntityQuery which caused improper caching of queries when using \"None\" or \"Any\" fields. [0.4.0] - 2019-12-16 This version requires Unity 2019.3.0f1+ New Features Two new methods added to the public API: void EntityCommandBuffer.AddComponent<T>(EntityQuery entityQuery) void EntityCommandBuffer.RemoveComponent<T>(EntityQuery entityQuery) BlobArray, BlobString & BlobPtr are not allowed to be copied by value since they carry offset pointers that aree relative to the location of the memory. This could easily result in programming mistakes. The compiler now prevents incorrect usage by enforcing any type attributed with [MayOnlyLiveInBlobStorage] to never be copied by value. Changes Deprecates TypeManager.CreateTypeIndexForComponent and it's other component type variants. Types can be dynamically added (in Editor builds) by instead passing the new unregistered types to TypeManager.AddNewComponentTypes instead. RequireForUpdate(EntityQuery) and RequireSingletonForUpdate on a system with [AlwaysUpdate] will now throw an exception instead of being ignored. ChangeVersionUtility.IncrementGlobalSystemVersion & ChangeVersionUtility.InitialGlobalSystemVersion is now internal. They were accidentally public previously. Entity inspector now shows entity names and allows to rename the selected entity Improved entity debugger UI Create WorldRenderBounds for prefabs and disabled entities with renderers during conversion, this make instantiation of those entities significantly faster. Reduced stack depth of System.Update / OnUpdate method (So it looks better in debugger) Assert when using EntityQuery from another world Using an EntityQuery created in one world on another world was resulting in memory corruption. We now detect it in the EntityManager API and throw an argument exception Structural changes now go through a bursted codepath and are significantly faster DynamicBuffer.Capacity is now settable Fixes Remove unnecessary & incorrect warning in DeclareReferencedPrefab when the referenced game object is a scene object GameObjects with ConvertAndInject won't get detached from a non-converted parent (fixes regression) Fixed a crash that could occur when destroying an entity with an empty LinkedEntityGroup. Updated performance package dependency to 1.3.2 which fixes an obsoletion warning The EntityCommandBuffer can be replayed repeatedly. Fixed exception in entity binary scene serialization when referencing a null UnityEngine.Object from a shared component Moving scripts between assemblies now triggers asset bundle rebuilds where necessary for live link Fixed LiveLink on Android [0.3.0] - 2019-12-03 New Features ENABLE_SIMPLE_SYSTEM_DEPENDENCIES define can now be used to replace the automatic dependency chaining with a much simplified strategy. With ENABLE_SIMPLE_SYSTEM_DEPENDENCIES it simply chains jobs in the order of the systems against previous jobs. Without ENABLE_SIMPLE_SYSTEM_DEPENDENCIES, dependencies are automatically chained based on read / write access of component data of each system. In cases when there game code is forced to very few cores or there are many systems, this can improve performance since it reduces overhead in calculating optimal dependencies. Added DebuggerTypeProxy for MultiListEnumerator<T> (e.g. this makes the results of GameObjectConversionSystem.GetEntities calls readable in the debugger) Two new methods added to the public API: EntityManager.CreateEntity(Archetype type, int count, Allocator allocator); EntityManager.Instantiate(Entity entity, int count, Allocator allocator); Both methods return a NativeArray<Entity> . Changes Removed the following deprecated API as announced in/before 0.1.1-preview : From GameObjectConversionUtility.cs: ConvertIncrementalInitialize() and ConvertScene() . From Translation.cs: struct Position . From EditorEntityScenes.cs: WriteEntityScene() . From GameObjectConversionSystem.cs: AddReferencedPrefab() , AddDependency() , AddLinkedEntityGroup() , DstWorld . From DefaultWorld.cs: class EndPresentationEntityCommandBufferSystem . Fixes ConvertAndInject won't destroy the root GameObject anymore (fixes regression introduced in 0.2.0) Fix Android/iOS build when using new build pipeline Provide correct application extension apk, aab or empty for project export when building to Android [0.2.0] - 2019-11-22 This version requires Unity 2019.3 0b11+ New Features Automatically generate authoring components for IComponentData with IL post-processing. Any component data marked with a GenerateAuthoringComponent attribute will generate the corresponding authoring MonoBehaviour with a Convert method. BuildSettings assets are now used to define a single build recipe asset on disk. This gives full control over the build pipeline in a modular way from C# code. BuildSettings let you attach builtin or your own custom IBuildSettingsComponents for full configurability BuildPipelines let you define the exact IBuildStep that should be run and in which order IBuildStep is either builtin or your own custom build step BuildSettings files can be inherited so you can easily make base build settings with most configuration complete and then do minor adjustments per build setting Right now most player configuration is still in the existing PlayerSettings, our plan is to over time expose all Player Settings via BuildSettings as well to ease configuration of complex projects with many build recipes & artifacts SubScenes are now automatically converted to entity binary files & cached by the asset pipeline. The entity cache files previously present in the project folder should be removed. Conversion systems can use the ConverterVersion attribute to convert to trigger a reconversion if the conversion system has changed behaviour. The conversion happens asynchronously in another process. Thus on first open the subscenes might not show up immediately. Live link builds can be built with the new BuildSettings pipeline. Open sub scene Closed Entity scenes are built by the asset pipeline and loaded via livelink on demand Opened Entity scenes are send via live entity patcher with patches on a per component / entity basis based on what has changed Assets referenced by entity scenes are transferred via livelink when saving the asset Scenes loaded as game objects are currently not live linked (This is in progress) by assigning the LiveLink build pipeline Entities.ForEach syntax for supplying jobified code in a JobComponentSystem 's OnUpdate method directly by using a lambda (instead of supplying an additional IJobForEach ). EntityQueryMask has been added, which allows for quick confirmation of if an Entity would be returned by an EntityQuery without filters via EntityQueryMask.Matches(Entity entity) . An EntityQueryMask can be obtained by calling EntityManager.GetEntityQueryMask(EntityQuery query). Unity Entities now supports the Fast Enter playmode which can be enabled in the project settings. It is recommended to be turned on for all dots projects. The UnityEngine component StopConvertToEntity can be used to interrupt ConvertToEntity recursion, and should be preferred over a ConvertToEntity set to \"convert and inject\" for that purpose. EntityDebugger now shows IDs in a separate column, so you can still see them when entities have custom names Entity references in the Entity Inspector have a \"Show\" button which will select the referenced Entity in the Debugger. An ArchetypeChunkIterator can be created by calling GetArchetypeChunkIterator on an EntityQuery . You may run an IJobChunk while bypassing the Jobs API by passing an ArchetypeChunkIterator into IJobChunk.RunWithoutJobs() . The [AlwaysSynchronizeSystem] attribute has been added, which can be applied to a JobComponentSystem to force it to synchronize on all of its dependencies before every update. BoneIndexOffset has been added, which allows the Animation system to communicate a bone index offset to the Hybrid Renderer. Initial support for using Hybrid Components during conversion, see the HybridComponent sample in the StressTests folder. New GameObjectConversionSystem.ForkSettings() that provides a very specialized method for creating a fork of the current conversion settings with a different \"EntityGuid namespace\", which can be used for nested conversions. This is useful for example in net code where multiple root-level variants of the same authoring object need to be created in the destination world. EntityManager LockChunkOrder and UnlockChunkOrder are deprecated. Entity Scenes can be loaded synchronously (during the next streaming system update) by using SceneLoadFlags.BlockOnStreamIn in SceneSystem.LoadParameters . EntityCommandBuffer can now be played back on an ExclusiveEntityTransaction as well as an EntityManager . This allows ECB playback to be invoked from a job (though exclusive access to the EntityManager data is still required for the duration of playback). Upgrade guide If you are using SubScenes you must use the new BuildSettings assets to make a build & run it. SubScenes are not supported from the File -> BuildSettings... & File -> Build and Run workflows. Entities requires AssetDatabase V2 for certain new features, we do not provide support for AssetDatabase V1. Fixes Setting ComponentSystemGroup.Enabled to false now calls OnStopRunning() recursively on the group's member systems, not just on the group itself. Updated Properties pacakge to 0.10.3-preview to fix an exception when showing Physics ComponentData in the inspector as well as fix IL2CPP Ahead of Time linker errors for generic virtual function calls. The LocalToParentSystem will no longer write to the LocalToWorld component of entities that have a component with the WriteGroup(typeof(LocalToWorld)) . Entity Debugger styling work better with Pro theme Entity Inspector no longer has runaway indentation Fixed issue where AddSharedComponentData , SetSharedComponentData did not always update SharedComponentOrderVersion . Fixes serialization issue when reading in managed IComponentData containing array types and UnityEngine.Object references. No exception is thrown when re-adding a tag component with EntityQuery . AddComponent<T>(NativeArray<Entity>) now reliably throws an ArgumentException if any of the target entities are invalid. Fixed an issue where the Entity Debugger would not repaint in edit mode Marking a system as [UpdateInGroup(typeof(LateSimulationSystemGroup))] no longer emits a warning about [DisableAutoCreation] . Fixed rendering of chunk info to be compatible with HDRP Fixed issue where ToComponentDataArray ignored the filter settings on the EntityQuery for managed component types. Changes Deprecated DynamicBuffer.Reserve and made DynamicBuffer.Capacity a settable property. DynamicBuffer.Reserve(10) should now be DynamicBuffer.Capacity = 10 . Moved NativeString code from Unity.Entities to Unity.Collections. Updated dependencies for this package. Significantly improved Entity instantiation performance when running in-Editor. Added support for managed IComponentData types such as class MyComponent : IComponentData {} which allows managed types such as GameObjects or List<>s to be stored in components. Users should use managed components sparingly in production code when possible as these components cannot be used by the Job System or archetype chunk storage and thus will be significantly slower to work with. Refer to the documentation for component data for more details on managed component use, implications and prevention. 'SubSceneStreamingSystem' has been renamed to SceneSectionStreamingSystem and is now internal Deprecated _SceneEntities in SubScene.cs . Please use SceneSystem.LoadAsync / Unload with the respective SceneGUID instead. Updated com.unity.serialization to 0.6.3-preview . The deprecated GetComponentGroup() APIs are now protected and can only be called from inside a System like their GetEntityQuery() successors. All GameObjects with a ConvertToEntity set to \"Convert and Destroy\" will all be processed within the same conversion pass, this allows cross-referencing. Duplicate component adds are always ignored When adding component to single entity via EntityQuery, entity is moved to matching chunk instead of chunk achetype changing. \"Used by Systems\" list skips queries with filters Managed IComponentData no longer require all fields to be non-null after default construction. ISharedComponentData is serialized inline with entity and managed IComponentData . If a shared component references a UnityEngine.Object type, that type is serialized separately in an \"objrefs\" resource asset. EntityManager calls EntityComponentStore via burst delegates for Add / Remove components. EntityComponentStore cannot throw exceptions (since called as burst delegate from main thread.) bool ICustomBootstrap.Initialize(string defaultWorldName) has changed API with no deprecated fallback. It now simply gives you a chance to completely replace the default world initialization by returning true. ICustomBootstrap & DefaultWorldInitialization is now composable like this: class MyCustomBootStrap : ICustomBootstrap { public bool Initialize(string defaultWorldName) { Debug.Log(\"Executing bootstrap\"); var world = new World(\"Custom world\"); World.DefaultGameObjectInjectionWorld = world; var systems = DefaultWorldInitialization.GetAllSystems(WorldSystemFilterFlags.Default); DefaultWorldInitialization.AddSystemsToRootLevelSystemGroups(world, systems); ScriptBehaviourUpdateOrder.UpdatePlayerLoop(world); return true; } } ICustomBootstrap can now be inherited and only the most deepest subclass bootstrap will be executed. DefaultWorldInitialization.GetAllSystems is not affected by bootstrap, it simply returns a list of systems based on the present dlls & attributes. Time is now available per-World, and is a property in a ComponentSystem . It is updated from the UnityEngine.Time during the InitializationSystemGroup of each world. If you need access to time in a sytem that runs in the InitializationSystemGroup , make sure you schedule your system after UpdateWorldTimeSystem . Time is also a limited TimeData struct; if you need access to any of the extended fields available in UnityEngine.Time , access UnityEngine.Time explicitly` Systems are no longer removed from a ComponentSystemGroup if they throw an exception from their OnUpdate . This behavior was more confusing than helpful. Managed IComponentData no longer require implementing the IEquatable<> interface and overriding GetHashCode() . If either function is provided it will be preferred, otherwise the component will be inspected generically for equality. EntityGuid is now constructed from an originating ID, a namespace ID, and a serial, which can be safely extracted from their packed form using new getters. Use a and b fields when wanting to treat this as an opaque struct (the packing may change again in the future, as there are still unused bits remaining). The a/b constructor has been removed, to avoid any ambiguity. Updated com.unity.platforms to 0.1.6-preview . The default Api Compatibility Level should now be .NET Standard 2.0 and a warning is generated when the project uses .NET 4.x . Added [UnityEngine.ExecuteAlways] to LateSimulationSystemGroup , so its systems run in Edit Mode. [0.1.1] - 2019-08-06 New Features EntityManager.SetSharedComponentData(EntityQuery query, T componentData) has been added which lets you efficiently swap a shared component data for a whole query. (Without moving any component data) Upgrade guide The deprecated OnCreateManager and OnDestroyManager are now compilation errors in the NET_DOTS profile as overrides can not be detected reliably (without reflection). To avoid the confusion of \"why is that not being called\", especially when there is no warning issued, this will now be a compilation error. Use OnCreate and OnDestroy instead. Changes Updated default version of burst to 1.1.2 Fixes Fixed potential memory corruption when calling RemoveComponent on a batch of entities that didn't have the component. Fixed an issue where an assert about chunk layout compatibility could be triggered when adding a shared component via EntityManager.AddSharedComponentData (EntityQuery entityQuery, T componentData). Fixed an issue where Entities without any Components would cause UI errors in the Chunk Info view Fixed EntityManager.AddComponent(NativeArray entities, ComponentType componentType) so that it handles duplicate entities in the input NativeArray. Duplicate entities are discarded and the component is added only once. Prior to this fix, an assert would be triggered when checking for chunk layout compatibility. Fixed invalid update path for ComponentType.Create . Auto-update is available in Unity 2019.3 and was removed for previous versions where it would fail (the fallback implementation will work as before). [0.1.0] - 2019-07-30 New Features Added the #UNITY_DISABLE_AUTOMATIC_SYSTEM_BOOTSTRAP_RUNTIME_WORLD and #UNITY_DISABLE_AUTOMATIC_SYSTEM_BOOTSTRAP_EDITOR_WORLD defines which respectively can be used to disable runtime and editor default world generation. Defining #UNITY_DISABLE_AUTOMATIC_SYSTEM_BOOTSTRAP will still disable all default world generation. Allow structural changes to entities (add/remove components, add/destroy entities, etc.) while inside of ForEach lambda functions. This negates the need for using PostUpdateCommands inside of ForEach. EntityCommandBuffer has some additional methods for adding components based on ComponentType , or for adding empty components of a certain type ( <T> ) EntityManagerDiffer & EntityManagerPatcher provides highly optimized diffing & patching functionality. It is used in the editor for providing scene conversion live link. Added support for EntityManager.MoveEntitiesFrom with managed arrays (Object Components). EntityManager.SetArchetype lets you change an entity to a specific archetype. Removing & adding the necessary components with default values. System state components are not allowed to be removed with this method, it throws an exception to avoid accidental system state removal. (Used in incremental live link conversion it made conversion from 100ms -> 40ms for 1000 changed game objects) Entity Debugger's system list now has a string filter field. This makes it easier to find a system by name when you have a lot of systems. Added IComponentData type Asset that will be used by Tiny to convert Editor assets to runtime assets Filled in some <T> holes in the overloads we provide in EntityManager New Entities.WithIncludeAll() that will include in matching all components that are normally ignored by default (currently Prefab and Disabled ) EntityManager.CopyAndReplaceEntitiesFrom has been added it can be used to store & restore a backup of the world for the purposes of general purpose simulation rollback. Upgrade guide WorldDiff has been removed. It has been replaced by EntityManagerDiff & EntityManagerPatch. Renamed EntityGroupManager to EntityQueryManager . Changes EntityArchetype.GetComponentTypes no longer includes Entity in the list of components (it is implied). Behaviour now matches the EntityMangager.GetComponentTypes method. This matches the behavior of the corresponding EntityManager function. EntityCommandBuffer.AddComponent(Entity, ComponentType) no longer fails if the target entity already has the specified component. DestroyEntity(EntityQuery entityQuery) now uses burst internally. Fixes Entity Inspector now shows DynamicBuffer elements in pages of five at a time Resources folder renamed to Styles so as not to add editor assets to built player EntityQueryBuilder.ShallowEquals (used from Entities.ForEach ) no longer boxes and allocs GC Improved error message for unnecessary/invalid UpdateBefore and UpdateAfter Fixed leak in BlobBuilder.CreateBlobAssetReference ComponentSystems are now properly preserved when running the UnityLinker. Note this requires 19.3a10 to work correctly. If your project is not yet using 19.3 you can workaround the issue using the link.xml file. https://docs.unity3d.com/Manual//IL2CPP-BytecodeStripping.html Types that trigger an exception in the TypeManager won't prevent other types from initializing properly. [0.0.12-preview.33] - 2019-05-24 New Features [DisableAutoCreation] can now apply to entire assemblies, which will cause all systems contained within to be excluded from automatic system creation. Useful for test assemblies. Added ComponentSystemGroup.RemoveSystemFromUpdateList() EntityCommandBuffer has commands for adding/removing components, deleting entities and adding shared components based on an EntityQuery and its filter. Not available in the Concurrent version Changes Generic component data types must now be registered in advance. Use [RegisterGenericComponentType] attribute to register each concrete use. e.g. [assembly: RegisterGenericComponentType(typeof(TypeManagerTests.GenericComponent<int>))] Attempting to call Playback() more than once on the same EntityCommandBuffer will now throw an error. Improved error checking for [UpdateInGroup] , [UpdateBefore] , and [UpdateAfter] attributes TypeManager no longer imposes alignment requirements on components containing pointers. Instead, it now throws an exception if you try to serialize a blittable component containing an unmanaged pointer, which suggests different alternatives. Fixes Fixed regression where accessing and destroying a blob asset in a burst job caused an exception Fixed bug where entities with manually specified CompositeScale were not updated by TRSLocalToWorldSystem . Error message when passing in invalid parameters to CreateSystem() is improved. Fixed bug where an exception due to aggressive pointer restrictions could leave the TypeManager in an invalid state SceneBoundingVolume is now generated seperately for each subsection SceneBoundingVolume no longer throws exceptions in conversion flow Fixed regression where calling AddComponent(NativeArray entities, ComponentType componentType) could cause a crash. Fixed bug causing error message to appear in Inspector header when ConvertToEntity component was added to a disabled GameObject. [0.0.12-preview.32] - 2019-05-16 New Features Added BlobBuilder which is a new API to build Blob Assets that does not require preallocating one contiguous block of memory. The BlobAllocator is now marked obsolete. Added versions of IJobForEach that support DynamicBuffer s Due to C# language constraints, these overloads needed different names. The format for these overloads follows the following structure: All job names begin with either IJobForEach or IJobForEachEntity All jobs names are then followed by an underscore _ and a combination of letter corresponding to the parameter types of the job B - IBufferElementData C - IComponentData E - Entity ( IJobForEachWithEntity only) All suffixes for WithEntity jobs begin with E All data types in a suffix are in alphabetical order Here is the complete list of overloads: IJobForEach_C , IJobForEach_CC , IJobForEach_CCC , IJobForEach_CCCC , IJobForEach_CCCCC , IJobForEach_CCCCCC IJobForEach_B , IJobForEach_BB , IJobForEach_BBB , IJobForEach_BBBB , IJobForEach_BBBBB , IJobForEach_BBBBBB IJobForEach_BC , IJobForEach_BCC , IJobForEach_BCCC , IJobForEach_BCCCC , IJobForEach_BCCCCC , IJobForEach_BBC , IJobForEach_BBCC , IJobForEach_BBCCC , IJobForEach_BBCCCC , IJobForEach_BBBC , IJobForEach_BBBCC , IJobForEach_BBBCCC , IJobForEach_BBBCCC , IJobForEach_BBBBC , IJobForEach_BBBBCC , IJobForEach_BBBBBC IJobForEachWithEntity_EB , IJobForEachWithEntity_EBB , IJobForEachWithEntity_EBBB , IJobForEachWithEntity_EBBBB , IJobForEachWithEntity_EBBBBB , IJobForEachWithEntity_EBBBBBB IJobForEachWithEntity_EC , IJobForEachWithEntity_ECC , IJobForEachWithEntity_ECCC , IJobForEachWithEntity_ECCCC , IJobForEachWithEntity_ECCCCC , IJobForEachWithEntity_ECCCCCC IJobForEachWithEntity_BC , IJobForEachWithEntity_BCC , IJobForEachWithEntity_BCCC , IJobForEachWithEntity_BCCCC , IJobForEachWithEntity_BCCCCC , IJobForEachWithEntity_BBC , IJobForEachWithEntity_BBCC , IJobForEachWithEntity_BBCCC , IJobForEachWithEntity_BBCCCC , IJobForEachWithEntity_BBBC , IJobForEachWithEntity_BBBCC , IJobForEachWithEntity_BBBCCC , IJobForEachWithEntity_BBBCCC , IJobForEachWithEntity_BBBBC , IJobForEachWithEntity_BBBBCC , IJobForEachWithEntity_BBBBBC Note that you can still use IJobForEach and IJobForEachWithEntity as before if you're using only IComponentData . EntityManager.SetEnabled API automatically enables & disables an entity or set of entities. If LinkedEntityGroup is present the whole group is enabled / disabled. Inactive game objects automatically get a LinkedEntityGroup added so that EntityManager.SetEnabled works as expected out of the box. Add WithAnyReadOnly and WithAllReadyOnly methods to EntityQueryBuilder to specify queries that filter on components with access type ReadOnly. No longer throw when the same type is in a WithAll and ForEach delegate param for ForEach queries. DynamicBuffer CopyFrom method now supports another DynamicBuffer as a parameter. Fixed cases that would not be handled correctly by the api updater. Upgrade guide Usages of BlobAllocator will need to be changed to use BlobBuilder instead. The API is similar but Allocate now returns the data that can be populated: ref var root = ref builder.ConstructRoot<MyData>(); var floatArray = builder.Allocate(3, ref root.floatArray); floatArray[0] = 0; // root.floatArray[0] can not be used and will throw on access ISharedComponentData with managed fields must implement IEquatable and GetHashCode IComponentData and ISharedComponentData implementing IEquatable must also override GetHashCode Fixes Comparisons of managed objects (e.g. in shared components) now work as expected Prefabs referencing other prefabs are now supported in game object entity conversion process Fixed a regression where ComponentDataProxy was not working correctly on Prefabs due to a ordering issue. Exposed GameObjectConversionDeclarePrefabsGroup for declaring prefab references. (Must happen before any conversion systems run) Inactive game objects are automatically converted to be Disabled entities Disabled components are ignored during conversion process. Behaviour.Enabled has no direct mapping in ECS. It is recommended to Disable whole entities instead Warnings are now issues when asking for a GetPrimaryEntity that is not a game object that is part of the converted group. HasPrimaryEntity can be used to check if the game object is part of the converted group in case that is necessary. Fixed a race condition in EntityCommandBuffer.AddBuffer() and EntityCommandBuffer.SetBuffer() [0.0.12-preview.31] - 2019-05-01 New Features Upgrade guide Serialized entities file format version has changed, Sub Scenes entity caches will require rebuilding. Changes Adding components to entities that already have them is now properly ignored in the cases where no data would be overwritten. That means the inspectable state does not change and thus determinism can still be guaranteed. Restored backwards compatibility for ForEach API directly on ComponentSystem to ease people upgrading to the latest Unity.Entities package on top of Megacity. Rebuilding the entity cache files for sub scenes will now properly request checkout from source control if required. Fixes IJobForEach will only create new entity queries when scheduled, and won't rely on injection anymore. This avoids the creation of useless queries when explicit ones are used to schedule those jobs. Those useless queries could cause systems to keep updating even though the actual queries were empty. APIs changed in the previous version now have better obsolete stubs and upgrade paths. All obsolete APIs requiring manual code changes will now soft warn and continue to work, instead of erroring at compile time. These respective APIs will be removed in a future release after that date. LODGroup conversion now handles renderers being present in a LOD Group in multipe LOD levels correctly Fixed potential memory leak when disposing an EntityCommandBuffer after certain types of playback errors Fixed an issue where chunk utilization histograms weren't properly clipped in EntityDebugger Fixed an issue where tag components were incorrectly shown as subtractive in EntityDebugger ComponentSystem.ShouldRunSystem() exception message now more accurately reports the most likely reason for the error when the system does not exist. Known Issues It might happen that shared component data with managed references is not compared for equality correctly with certain profiles. [0.0.12-preview.30] - 2019-04-05 New Features Script templates have been added to help you create new component types and systems, similar to Unity's built-in template for new MonoBehaviours. Use them via the Assets/Create/ECS menu. Upgrade guide Some APIs have been deprecated in this release: API Deprecation FAQ ** Removed obsolete ComponentSystem.ForEach ** Removed obsolete [Inject] ** Removed obsolete ComponentDataArray ** Removed obsolete SharedComponentDataArray ** Removed obsolete BufferArray ** Removed obsolete EntityArray ** Removed obsolete ComponentGroupArray ScriptBehaviourManager removal The ScriptBehaviourManager class has been removed. ComponentSystem and JobComponentSystem remain as system base classes (with a common ComponentSystemBase class) ComponentSystems have overridable methods OnCreateManager and OnDestroyManager. These have been renamed to OnCreate and OnDestroy. This is NOT handled by the obsolete API updater and will need to be done manually. The old OnCreateManager/OnDestroyManager will continue to work temporarily, but will print a warning if a system contains them. World APIs have been updated as follows: CreateManager, GetOrCreateManager, GetExistingManager, DestroyManager, BehaviourManagers have been renamed to CreateSystem, GetOrCreateSystem, GetExistingSystem, DestroySystem, Systems. These should be handled by the obsolete API updater. EntityManager is no longer accessed via GetExistingManager. There is now a property directly on World: World.EntityManager. This is NOT handled by the obsolete API updater and will need to be done manually. Searching and replacing Manager should locate the right spots. For example, world.GetExistingManager () should become just world.EntityManager. IJobProcessComponentData renamed to IJobForeach This rename unfortunately cannot be handled by the obsolete API updater. A global search and replace of IJobProcessComponentData to IJobForEach should be sufficient. ComponentGroup renamed to EntityQuery ComponentGroup has been renamed to EntityQuery to better represent what it does. All APIs that refer to ComponentGroup have been changed to refer to EntityQuery in their name, e.g. CreateEntityQuery, GetEntityQuery, etc. EntityArchetypeQuery renamed to EntityQueryDesc EntityArchetypeQuery has been renamed to EntityQueryDesc Changes Minimum required Unity version is now 2019.1.0b9 Adding components to entities that already have them is now properly ignored in the cases where no data would be overwritten. UNITY_CSHARP_TINY is now NET_DOTS to match our other NET_* defines Fixes Fixed exception in inspector when Script is missing The presence of chunk components could lead to corruption of the entity remapping during deserialization of SubScene sections. Fix for an issue causing filtering with IJobForEachWithEntity to try to access entities outside of the range of the group it was scheduled with."
  },
  "index.html": {
    "href": "index.html",
    "title": "Home Page. | Entities | 0.17.0-preview.18",
    "keywords": "Home Page. This is the home page for this package."
  },
  "license/index.html": {
    "href": "license/index.html",
    "title": "| Entities | 0.17.0-preview.18",
    "keywords": "window.location.replace('LICENSE.html')"
  },
  "license/LICENSE.html": {
    "href": "license/LICENSE.html",
    "title": "| Entities | 0.17.0-preview.18",
    "keywords": "Unity Companion License (“License”) Software Copyright © 2017-2020 Unity Technologies ApS Unity Technologies ApS (“Unity”) grants to you a worldwide, non-exclusive, no-charge, and royalty-free copyright license to reproduce, prepare derivative works of, publicly display, publicly perform, sublicense, and distribute the software that is made available under this License (“Software”), subject to the following terms and conditions: Unity Companion Use Only. Exercise of the license granted herein is limited to exercise for the creation, use, and/or distribution of applications, software, or other content pursuant to a valid Unity content authoring and rendering engine software license (“Engine License”). That means while use of the Software is not limited to use in the software licensed under the Engine License, the Software may not be used for any purpose other than the creation, use, and/or distribution of Engine License-dependent applications, software, or other content. No other exercise of the license granted herein is permitted, and in no event may the Software be used for competitive analysis or to develop a competing product or service. No Modification of Engine License. Neither this License nor any exercise of the license granted herein modifies the Engine License in any way. Ownership & Grant Back to You. 3.1 You own your content. In this License, “derivative works” means derivatives of the Software itself--works derived only from the Software by you under this License (for example, modifying the code of the Software itself to improve its efficacy); “derivative works” of the Software do not include, for example, games, apps, or content that you create using the Software. You keep all right, title, and interest to your own content. 3.2 Unity owns its content. While you keep all right, title, and interest to your own content per the above, as between Unity and you, Unity will own all right, title, and interest to all intellectual property rights (including patent, trademark, and copyright) in the Software and derivative works of the Software, and you hereby assign and agree to assign all such rights in those derivative works to Unity. 3.3 You have a license to those derivative works. Subject to this License, Unity grants to you the same worldwide, non-exclusive, no-charge, and royalty-free copyright license to derivative works of the Software you create as is granted to you for the Software under this License. Trademarks. You are not granted any right or license under this License to use any trademarks, service marks, trade names, products names, or branding of Unity or its affiliates (“Trademarks”). Descriptive uses of Trademarks are permitted; see, for example, Unity’s Branding Usage Guidelines at https://unity3d.com/public-relations/brand . Notices & Third-Party Rights. This License, including the copyright notice associated with the Software, must be provided in all substantial portions of the Software and derivative works thereof (or, if that is impracticable, in any other location where such notices are customarily placed). Further, if the Software is accompanied by a Unity “third-party notices” or similar file, you acknowledge and agree that software identified in that file is governed by those separate license terms. DISCLAIMER, LIMITATION OF LIABILITY. THE SOFTWARE AND ANY DERIVATIVE WORKS THEREOF IS PROVIDED ON AN \"AS IS\" BASIS, AND IS PROVIDED WITHOUT WARRANTY OF ANY KIND, WHETHER EXPRESS OR IMPLIED, INCLUDING ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, AND/OR NONINFRINGEMENT. IN NO EVENT SHALL ANY COPYRIGHT HOLDER OR AUTHOR BE LIABLE FOR ANY CLAIM, DAMAGES (WHETHER DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL, INCLUDING PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, LOSS OF USE, DATA, OR PROFITS, AND BUSINESS INTERRUPTION), OR OTHER LIABILITY WHATSOEVER, WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM OR OUT OF, OR IN CONNECTION WITH, THE SOFTWARE OR ANY DERIVATIVE WORKS THEREOF OR THE USE OF OR OTHER DEALINGS IN SAME, EVEN WHERE ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. USE IS ACCEPTANCE and License Versions. Your receipt and use of the Software constitutes your acceptance of this License and its terms and conditions. Software released by Unity under this License may be modified or updated and the License with it; upon any such modification or update, you will comply with the terms of the updated License for any use of any of the Software under the updated License. Use in Compliance with Law and Termination. Your exercise of the license granted herein will at all times be in compliance with applicable law and will not infringe any proprietary rights (including intellectual property rights); this License will terminate immediately on any breach by you of this License. Severability. If any provision of this License is held to be unenforceable or invalid, that provision will be enforced to the maximum extent possible and the other provisions will remain in full force and effect. Governing Law and Venue. This License is governed by and construed in accordance with the laws of Denmark, except for its conflict of laws rules; the United Nations Convention on Contracts for the International Sale of Goods will not apply. If you reside (or your principal place of business is) within the United States, you and Unity agree to submit to the personal and exclusive jurisdiction of and venue in the state and federal courts located in San Francisco County, California concerning any dispute arising out of this License (“Dispute”). If you reside (or your principal place of business is) outside the United States, you and Unity agree to submit to the personal and exclusive jurisdiction of and venue in the courts located in Copenhagen, Denmark concerning any Dispute."
  },
  "manual/chunk_iteration.html": {
    "href": "manual/chunk_iteration.html",
    "title": "Accessing entity data | Entities | 0.17.0-preview.18",
    "keywords": "Accessing entity data Iterating over your data is one of the most common tasks you need to perform when you implement ECS systems. The ECS systems typically process a set of entities, reads data from one or more components, performs a calculation, and then writes the result to another component. The most efficient way to iterate over entities and components is in a parallelizable job that processes the components in order. This takes advantage of the processing power from all available cores and data locality to avoid CPU cache misses. The ECS API provides a number of ways to accomplish iteration, each with its own performance implications and restrictions. You can iterate over ECS data in the following ways: SystemBase.Entities.ForEach — the simplest efficient way to process component data entity by entity. IJobEntityBatch — iterates over the eligible blocks of memory (called a chunk ) that contain matching entities. The job Execute() function can use a for loop to iterate over batches of the elements inside each chunk. You can use IJobEntityBatch for more complex situations than Entities.ForEach supports, while maintaining maximum efficiency. [Manual iteration] — if the previous methods are insufficient, you can manually iterate over entities or Chunks. For example, you can use a job such as IJobParallelFor to get a NativeArray that contains entities or the Chunks of the entities that you want to process and iterate over. The EntityQuery class provides a way to construct a view of your data that contains only the specific data you need for a given algorithm or process. Many of the iteration methods in the list above use an EntityQuery , either explicitly or internally. Important: The following iteration types should not be used in new code: IJobChunk IJobForEach IJobForEachWithEntity ComponentSystem JobComponentSystem These types are being phased out in preference to SystemBase and will become obsolete once they have gone through a deprecation cycle. Use SystemBase and SystemBase.Entities.ForEach or [IJobChunk] to replace them. [Manual iteration] : manual_iteration.md"
  },
  "manual/chunk_iteration_job.html": {
    "href": "manual/chunk_iteration_job.html",
    "title": "Using IJobChunk jobs | Entities | 0.17.0-preview.18",
    "keywords": "Using IJobChunk jobs Note IJobChunk has been superseded by IJobEntityBatch , which should be used for new code. You can implement IJobChunk inside a system to iterate through your data by chunk. When you schedule an IJobChunk job in the OnUpdate() function of a system, the job invokes your Execute() function once for each chunk that matches the entity query passed to the job's Schedule() method. You can then iterate over the data inside each chunk, entity by entity. Iterating with IJobChunk requires more code setup than does Entities.ForEach, but is also more explicit and represents the most direct access to the data, as it is actually stored. Another benefit of iterating by chunks is that you can check whether an optional component is present in each chunk with Archetype.Has<T>() , and then process all of the entities in the chunk accordingly. To implement an IJobChunk job, use the following steps: Create an EntityQuery to identify the entities that you want to process. Define the job struct, and include fields for ArchetypeChunkComponentType objects that identify the types of components the job must directly access. Also, specify whether the job reads or writes to those components. Instantiate the job struct and schedule the job in the system OnUpdate() function. In the Execute() function, get the NativeArray instances for the components the job reads or writes and then iterate over the current chunk to perform the desired work. For more information, the ECS samples repository contains a simple HelloCube example that demonstrates how to use IJobChunk . Query for data with an EntityQuery An EntityQuery defines the set of component types that an archetype must contain for the system to process its associated chunks and entities. An archetype can have additional components, but it must have at least those that the EntityQuery defines. You can also exclude archetypes that contain specific types of components. For simple queries, you can use the SystemBase.GetEntityQuery() function and pass in the component types as follows: public class RotationSpeedSystem : SystemBase { private EntityQuery m_Query; protected override void OnCreate() { m_Query = GetEntityQuery(ComponentType.ReadOnly<Rotation>(), ComponentType.ReadOnly<RotationSpeed>()); //... } For more complex situations, you can use an EntityQueryDesc . An EntityQueryDesc provides a flexible query mechanism to specify the component types: All : All component types in this array must exist in the archetype Any : At least one of the component types in this array must exist in the archetype None : None of the component types in this array can exist in the archetype For example, the following query includes archetypes that contain the RotationQuaternion and RotationSpeed components, but excludes any archetypes that contain the Frozen component: protected override void OnCreate() { var queryDescription = new EntityQueryDesc() { None = new ComponentType[] { typeof(Static) }, All = new ComponentType[] { ComponentType.ReadWrite<Rotation>(), ComponentType.ReadOnly<RotationSpeed>() } }; m_Query = GetEntityQuery(queryDescription); } The query uses ComponentType.ReadOnly<T> instead of the simpler typeof expression to designate that the system does not write to RotationSpeed . You can also combine multiple queries. To do this, pass an array of EntityQueryDesc objects rather than a single instance. ECS uses a logical OR operation to combine each query. The following example selects any archetypes that contain a RotationQuaternion component or a RotationSpeed component (or both): protected override void OnCreate() { var queryDescription0 = new EntityQueryDesc { All = new ComponentType[] {typeof(Rotation)} }; var queryDescription1 = new EntityQueryDesc { All = new ComponentType[] {typeof(RotationSpeed)} }; m_Query = GetEntityQuery(new EntityQueryDesc[] {queryDescription0, queryDescription1}); } Note Do not include completely optional components in the EntityQueryDesc . To handle optional components, use the chunk.Has<T>() method inside IJobChunk.Execute() to determine whether the current ArchetypeChunk has the optional component or not. Because all entities in the same chunk have the same components, you only need to check whether an optional component exists once per chunk: not once per entity. For efficiency and to avoid needless creation of garbage-collected reference types, you should create the EntityQueries for a system in the system’s OnCreate() function and store the result in an instance variable. (In the above examples, the m_Query variable is used for this purpose.) Define the IJobChunk struct The IJobChunk struct defines fields for the data the job needs when it runs, as well as the job’s Execute() method. To access the component arrays inside of the chunks that the system passes to your Execute() method, you must create an ArchetypeChunkComponentType<T> object for each type of component that the job reads or writes to. You can use these objects to get instances of the NativeArray s that provide access to the components of an entity. Include all of the components referenced in the job’s EntityQuery that the Execute() method reads or writes. You can also provide ArchetypeChunkComponentType variables for optional component types that you do not include in the EntityQuery. You must check to make sure that the current chunk has an optional component before you try to access it. For example, the HelloCube IJobChunk example declares a job struct that defines ArchetypeChunkComponentType<T> variables for two components; RotationQuaternion and RotationSpeed : [BurstCompile] struct RotationSpeedJob : IJobChunk { public float DeltaTime; public ComponentTypeHandle<Rotation> RotationTypeHandle; [ReadOnly] public ComponentTypeHandle<RotationSpeed> RotationSpeedTypeHandle; public void Execute(ArchetypeChunk chunk, int chunkIndex, int firstEntityIndex) { // ... } } The system assigns values to these variables in the OnUpdate() function. ECS uses the variables inside the Execute() method when it runs the job. The job also uses the Unity delta time to animate the rotation of a 3D object. The example uses a struct field to pass this value to the Execute() method. Writing the Execute method The signature of the IJobChunk Execute() method is: public void Execute(ArchetypeChunk chunk, int chunkIndex, int firstEntityIndex) The chunk parameter is a handle to the block of memory that contains the entities and components that this iteration of the job has to process. Because a chunk can only contain a single archetype, all of the entities in a chunk have the same set of components. Use the chunk parameter to get the NativeArray instances for components: var chunkRotations = chunk.GetNativeArray(RotationTypeHandle); var chunkRotationSpeeds = chunk.GetNativeArray(RotationSpeedTypeHandle); These arrays are aligned so that an entity has the same index in all of them. You can then use a normal for loop to iterate through the component arrays. Use chunk.Count to get the number of entities stored in the current chunk: var chunkRotations = chunk.GetNativeArray(RotationTypeHandle); var chunkRotationSpeeds = chunk.GetNativeArray(RotationSpeedTypeHandle); for (var i = 0; i < chunk.Count; i++) { var rotation = chunkRotations[i]; var rotationSpeed = chunkRotationSpeeds[i]; // Rotate something about its up vector at the speed given by RotationSpeed. chunkRotations[i] = new Rotation { Value = math.mul(math.normalize(rotation.Value), quaternion.AxisAngle(math.up(), rotationSpeed.RadiansPerSecond * DeltaTime)) }; } If you have the Any filter in your EntityQueryDesc or have completely optional components that don’t appear in the query at all, you can use the ArchetypeChunk.Has<T>() function to test whether the current chunk contains one of those components before you use it: if (chunk.Has<OptionalComp>(OptionalCompType)) {//...} Note If you're recording an EntityCommandBuffer.ParallelWriter inside the Execute() function, pass the chunkIndex argument as the sortKey parameter to the command buffer functions. Skipping chunks with unchanged entities If you only need to update entities when a component value has changed, you can add that component type to the change filter of the EntityQuery that selects the entities and chunks for the job. For example, if you have a system that reads two components and only needs to update a third when one of the first two has changed, you can use an EntityQuery as follows: private EntityQuery m_Query; protected override void OnCreate() { m_Query = GetEntityQuery( ComponentType.ReadWrite<Output>(), ComponentType.ReadOnly<InputA>(), ComponentType.ReadOnly<InputB>()); m_Query.SetChangedVersionFilter( new ComponentType[] { ComponentType.ReadWrite<InputA>(), ComponentType.ReadWrite<InputB>() }); } The EntityQuery change filter supports up to two components. If you want to check more or you aren't using an EntityQuery, you can make the check manually. To make this check, use the ArchetypeChunk.DidChange() function to compare the chunk’s change version for the component to the system's LastSystemVersion . If this function returns false, you can skip the current chunk altogether because none of the components of that type have changed since the last time the system ran. You must use a struct field to pass the LastSystemVersion from the system into the job, as follows: [BurstCompile] struct UpdateJob : IJobChunk { public ComponentTypeHandle<InputA> InputATypeHandle; public ComponentTypeHandle<InputB> InputBTypeHandle; [ReadOnly] public ComponentTypeHandle<Output> OutputTypeHandle; public uint LastSystemVersion; public void Execute(ArchetypeChunk chunk, int chunkIndex, int firstEntityIndex) { var inputAChanged = chunk.DidChange(InputATypeHandle, LastSystemVersion); var inputBChanged = chunk.DidChange(InputBTypeHandle, LastSystemVersion); // If neither component changed, skip the current chunk if (!(inputAChanged || inputBChanged)) return; var inputAs = chunk.GetNativeArray(InputATypeHandle); var inputBs = chunk.GetNativeArray(InputBTypeHandle); var outputs = chunk.GetNativeArray(OutputTypeHandle); for (var i = 0; i < outputs.Length; i++) { outputs[i] = new Output { Value = inputAs[i].Value + inputBs[i].Value }; } } } As with all the job struct fields, you must assign its value before you schedule the job: protected override void OnUpdate() { var job = new UpdateJob(); job.LastSystemVersion = this.LastSystemVersion; job.InputATypeHandle = GetComponentTypeHandle<InputA>(true); job.InputBTypeHandle = GetComponentTypeHandle<InputB>(true); job.OutputTypeHandle = GetComponentTypeHandle<Output>(false); this.Dependency = job.ScheduleParallel(m_Query, this.Dependency); } Note For efficiency, the change version applies to whole chunks not individual entities. If another job which has the ability to write to that type of component accesses a chunk, then ECS increments the change version for that component and the DidChange() function returns true. ECS increments the change version even if the job that declares write access to a component does not actually change the component value. Instantiate and schedule the job To run an IJobChunk job, you must create an instance of your job struct, setting the struct fields, and then schedule the job. When you do this in the OnUpdate() function of a SystemBase implementation, the system schedules the job to run every frame. protected override void OnUpdate() { var job = new RotationSpeedJob() { RotationTypeHandle = GetComponentTypeHandle<Rotation>(false), RotationSpeedTypeHandle = GetComponentTypeHandle<RotationSpeed>(true), DeltaTime = Time.DeltaTime }; this.Dependency = job.ScheduleParallel(m_Query, this.Dependency); } When you call the GetArchetypeChunkComponentType<T>() function to set your component type variables, make sure that you set the isReadOnly parameter to true for components that the job reads, but doesn’t write. Setting these parameters correctly can have a significant impact on how efficiently the ECS framework can schedule your jobs. These access mode settings must match their equivalents in both the struct definition, and the EntityQuery. Do not cache the return value of GetArchetypeChunkComponentType<T>() in a system class variable. You must call the function every time the system runs, and pass the updated value to the job."
  },
  "manual/component_data.html": {
    "href": "manual/component_data.html",
    "title": "General-purpose components | Entities | 0.17.0-preview.18",
    "keywords": "General-purpose components An ECS component (not an instance of the managed UnityEngine.Component class) is a struct that contains only the instance data for an entity . ECS components should not contain methods beyond utility functions to access the data in the struct. You should implement all of your game logic and behavior in systems. To put this in terms of the object-oriented Unity system, this is similar to a Component class, but one that only contains variables . The Unity ECS API provides an interface called IComponentData that you can implement in your code to declare a general-purpose component type. IComponentData Traditional Unity components (including MonoBehaviour ) are object-oriented classes that contain data and methods for behavior. IComponentData is a pure ECS-style component, which means that it defines no behavior, only data. You should implement IComponentData as struct rather than a class, which means that it is copied by value instead of by reference by default. You usually need to use the following pattern to modify data: var transform = group.transform[index]; // Read transform.heading = playerInput.move; // Modify transform.position += deltaTime * playerInput.move * settings.playerMoveSpeed; group.transform[index] = transform; // Write IComponentData structs must not contain references to managed objects. This is because ComponentData lives in simple non-garbage-collected tracked Chunk memory , which has many performance advantages. Managed IComponentData It is helpful to use a managed IComponentData (that is, IComponentData declared using a class rather than struct ) to help port existing code over to ECS in a piecemeal fashion, interoperate with managed data not suitable in ISharedComponentData , or to prototype a data layout. These components are used the same way as value type IComponentData . However, ECS handles them internally in a much different (and slower) way. If you don't need managed component support, define UNITY_DISABLE_MANAGED_COMPONENTS in your application's Player Settings (menu: Edit > Project Settings > Player > Scripting Define Symbols ) to prevent accidental usage. Because managed IComponentData is a managed type, it has the following performance drawbacks compared to value-type IComponentData : It cannot be used with the Burst Compiler It cannot be used in job structs It cannot use Chunk memory It requires garbage collection You should try to limit the number of managed components, and use blittable types as much as possible. Managed IComponentData must implement the IEquatable<T> interface and override for Object.GetHashCode() . Additionally, for serialization purposes, managed components must be default constructible. You must set the value of the component on the main thread. To do this, use either the EntityManager or EntityCommandBuffer . Because a component is a reference type, you can change the value of the component without moving entities across Chunks, unlike ISharedComponentData . This does not create a sync-point. However, while managed components are logically stored separate from value-type components, they still contribute to an entity's EntityArchetype definition. As such, adding a new managed component to an entity still causes ECS to create a new archetype (if a matching archetype doesn't exist already) and it moves the entity to a new Chunk. For an example, see the file: /Packages/com.unity.entities/Unity.Entities/IComponentData.cs ."
  },
  "manual/conversion.html": {
    "href": "manual/conversion.html",
    "title": "Conversion Workflow | Entities | 0.17.0-preview.18",
    "keywords": "Conversion Workflow To use Unity’s DOTS technology, you need to create entities, components and systems. The generation process that consumes GameObjects (authoring data) and generates entities and components (runtime data) is called conversion . This process is the preferred way of authoring ECS data It is a fundamental part of DOTS, and not something temporary Conversion is only about data, there is no conversion process for code The overall workflow looks like this: The Unity Editor is a user interface to work with authoring data The conversion from authoring data to runtime data happens in the Unity Editor The runtime (e.g. the game) should only ever have to deal with runtime data Fundamental principles Authoring data and runtime data are optimized for wildly different goals. Authoring data is optimized for flexibility Human understandability and editability Version control (mergeability, no duplication) Teamwork organization Runtime data is optimized for performance Cache efficiency Loading time and streaming Distribution size A key observation is that nothing requires a 1:1 mapping between GameObjects and entities. A single GameObject can turn into a set of entities, e.g. procedural generation Multiple GameObjects can be aggregated into a single entity, e.g. LOD baking Some GameObjects might have no purpose at runtime, e.g. level editing markers The same can be said about components. A conversion system can read from any amount of Unity components and add any amount of ECS components to any amount of entities. Key concepts All those concepts get explained in further detail in the rest of this document, but it's useful to introduce some vocabulary beforehand. Authoring scene A regular Unity scene, containing GameObjects, destined to be converted to runtime data. Subscene A simple GameObject component that references an authoring scene and will either load the authoring scene (when the Subscene is in edit mode), or stream in the converted entity scene (when the Subscene is closed). Entity scene The result of converting an authoring scene. Because entity scenes are the output of an asset import, they are stored in the Library folder. Entity scenes can be made of multiple sections, and each of those can be independently loaded. LiveConversion When an authoring scene is loaded as GameObjects for editing, every change will trigger an update to the entity scene, making it look as if the entity scene was directly edited, we call this process LiveConversion . LiveConnection The Unity Editor can be connected to a LiveLink Player eventually running on a different machine. This is out of scope for this document but the main thing to know about it is that it shouldn't require any particular attention. It's part of the framework, not something that has to be implemented for each feature. LiveLink We call LiveLink the set of features that make live editing possible. It's not something optional, it's a concept which is deeply embedded in everything related to conversion. The main consequence you should pay attention to is that this can cause ECS data to change at any time. Taking this into consideration while designing ECS systems is where the real challenge is. Scene conversion Conversion systems run on whole scenes at once. We still support more granular approaches like the ConvertToEntity MonoBehaviour and some function calls in GameObjectConversionUtility , but those should be avoided and are only kept around for dependencies we will remove in the near future. These approaches do not scale, are bound to be deprecated, and will not be addressed by this document. When converting an authoring scene to an entity scene, the following steps are executed, in order: Set up a conversion world and create an entity in it for every GameObject in the scene Collect external references (e.g. prefabs) Create primary entities in the destination world corresponding to those in the conversion world Update the main conversion system groups Tag entity prefabs Create companion GameObjects for hybrid components Create linked entity groups Update the export system group (only for Unity Tiny) All these points are covered in this document, keeping the above sequence in mind will help you structure the information. Note that all the referenced prefabs are converted at the same time as the regular authoring GameObjects, and not in a dedicated pass. Large scale performance The conversion workflow allows dealing efficiently with large scenes thanks to the following principles: In the Unity Editor, a scene can be broken down into subscenes. Those can be toggled back and forth between runtime data and authoring data, depending on which parts of the scene have to be worked on. Conversion can run as an asset database v2 importer, this allows proper dependency tracking, on-demand importing and running in a background process in order to not stall the Editor. Changes to the authoring data are monitored in order to only convert what needs to be updated, this is called incremental conversion. The Subscene Monobehaviour The conversion of entity scenes is usually done through the use of a Subscene. This Monobehaviour does very little. It references an authoring scene and triggers the conversion and loading of the resulting entity scene. There is a toggle to control the automatic loading of the entity scene, and button to a load and unload the sections manually. You also have a button to force the reimport (redoing the conversion) of the scene. Warning Be aware that forcing the reimport can hide problems, this option is intended for testing and debugging purposes. If the reimport doesn't happen automatically, it might be because some dependencies or versioning info are missing. Please read the further sections about the asset pipeline for more details. More importantly, you can toggle between edit mode (authoring) and closed (runtime). The contents of a scene can only be accessed by the Unity editor when the Subscene that references it is in edit mode. Since authoring scenes are normal Unity scenes they can also be directly opened like any other scene. DOTS > Live Link Mode This menu offers two options (one on/off, one toggle), it's important to understand their implications when using conversion. 1. Live Conversion in Edit Mode When in play mode, the Subscenes will always stream in the runtime scene sections. When not in play mode, the existence of the converted entities depends on both the \"Live Conversion in Edit Mode\" option and on the availability of the authoring representation (Subscene in edit mode). When a Subscene is in edit mode, the authoring GameObjects show up in the Hierarchy window of the Unity editor and can be interacted with. The runtime representation for the authoring scene referenced by the Subscene will only be available if \"Live Conversion in Edit Mode\" is enabled, and since every change in the authoring representation can potentially make the runtime representation obsolete, this conversion will happen every time something is edited. 2. SceneView: Editing State / Live Game State When editing an authoring scene, either in play mode or in edit mode with the \"Live Conversion in Edit Mode\" enabled, both the authoring and runtime components are available. The \"SceneView\" option is a toggle between the two. If \"Editing State\" is selected, the SceneView will display the authoring components. Since those are regular GameObjects, they can be interacted with in a familiar fashion (selection, gizmos, etc.) but if \"Live Game State\" is selected the scene view will render runtime components that cannot be interacted with from the editor. In many cases it won't be possible to visually tell those two modes apart, since most of the authoring components will be converted into similar looking runtime components. Also keep in mind that when you have a mix of subscenes in edit mode and closed subscenes, even if \"Editing State\" is selected, the closed subscenes will still render runtime components since their authoring components are not available. Conversion systems 101 The conversion process is a succession of component systems that update only once each. A big difference between those and regular DOTS systems is that conversion systems straddle two worlds, they read from one and write to the other. Conversion systems inherit from GameObjectConversionSystem and run from a temporary conversion world (authoring world), which should be treated as read-only input. During update, they write to the destination world (converted world), which is accessed through the DstEntityManager property of each system. In the example below, note the use of GetPrimaryEntity to access the entity in the destination world that corresponds to the provided authoring component. Adding an Entity parameter to the ForEach lambda would provide the entity from the authoring world instead, which would be pointless since conversion systems should not modify the conversion world and only write to the destination world. Here's the \"hello world\" of conversion systems, that does a 1:1 conversion of all authoring components of a certain type to their ECS equivalent. // Authoring component class FooAuthoring : MonoBehaviour { public float Value; } // Runtime component struct Foo : IComponentData { public float SquaredValue; } // Conversion system, running in the conversion world class FooConversion : GameObjectConversionSystem { protected override void OnUpdate() { // Iterate over all authoring components of type FooAuthoring Entities.ForEach((FooAuthoring input) => { // Get the destination world entity associated with the authoring GameObject var entity = GetPrimaryEntity(input); // Do the conversion and add the ECS component DstEntityManager.AddComponentData(entity, new Foo { SquaredValue = input.Value * input.Value }); }); } } In a GameObjectConversionSystem , ForEach will not create jobs. It runs on the main thread, without Burst, and this allows accessing classic Unity without restraint. This is also why it doesn't require a call to .Run() or .Schedule() . Also note that the entity query looks for classic Unity components, in this case FooAuthoring that derives from MonoBehaviour . Since those are reference types, they do not require ref or in . Conversion World (the input) When a conversion starts, an entity is created in the conversion world for each GameObject that should be processed. In the case of a whole authoring scene, that's typically all the GameObjects it contains and all the GameObjects from all the referenced prefabs (recursively). Prefabs are discussed in detail further on. Each component on those GameObjects is then added to the corresponding entities. This is a mechanism rarely used in DOTS, because using classic Unity components is something that doesn't scale. Those components are reference types and each access from ECS accesses memory in an inefficient way. The only reason this is done this way is to allow conversion systems to access authoring components using entity queries. Note that disabled authoring components are not added to the conversion world, so the queries from the conversion systems will not pick them up. And inactive GameObjects turn into disabled entities, but the conversion happens normally. Destination World (the output) For each authoring GameObject in the conversion world, a primary entity will automatically be created in the destination world before any conversion system runs. The entity associated with a GameObject can be subsequently accessed via GameObjectConversionSystem.GetPrimaryEntity . Every entity in the destination world is associated with a GameObject in the conversion world. This is important for keeping track of dependencies: when the authoring GameObject changes, all the entities that were created as a result of its existence have to be updated. At creation time, based on conversion settings, the entities in the destination world will contain a combination of the following components: Static , to bake transforms. EntityGuid , for LiveLink. Disabled , to mark entities coming from disabled GameObjects as disabled. SceneSection , for streaming sections. Altering that set of components will break the logic of conversion, so care should be taken (e.g. SetArchetype shouldn't be used during conversion). On top of that, the name of the GameObject will also be copied as the entity name (which is a debug only feature, stripped from builds), and the mapping between GameObjects and entities is recorded for error reporting. Directly creating new entities in the destination world (via CreateEntity , Instantiate , etc.) will bypass that setup and will cause issues, so when a new entity has to be created, it has to be done though GameObjectConversionSystem.CreateAdditionalEntity instead. This function will also update the dependencies by associating the new entity with the GameObject. Conversion Systems Ordering Like any other system, conversion systems can be ordered by using the following attributes: [UpdateBefore] [UpdateAfter] [UpdateInGroup] The default system groups provided for conversion are, in this order: [GameObjectDeclareReferencedObjectsGroup] - before the creation of entities in the destination world. [GameObjectBeforeConversionGroup] - early conversion group [GameObjectConversionGroup] - main conversion group (this is the default when no groups is explicitly specified) [GameObjectAfterConversionGroup] - late conversion group [GameObjectExportGroup] - only for Unity Tiny Important Calling GetPrimaryEntity during conversion will return a partially constructed entity, the set of components on this entity will depend on system ordering. Prefabs An entity prefab is nothing more than an entity with a Prefab tag and a LinkedEntityGroup . The former identifies the prefab and makes it invisible to all entity queries but the ones who explicitly include prefabs, and the latter links together a set of entities, since entity prefabs can be complex assemblies (equivalent to GameObject hierarchies). So the following two components are equivalent, one in classic Unity and the other in DOTS. // Authoring component public class PrefabReference : MonoBehaviour { public GameObject Prefab; } // Runtime component public struct PrefabEntityReference : IComponentData { public Entity Prefab; } By default, the conversion workflow only processes the actual contents of an authoring scene, so a specific mechanism is required to also include prefabs from the asset folder. This is the purpose of the system group GameObjectDeclareReferencedObjectsGroup , it runs before the primary entities are created in the destination world, and provides a way of registering prefabs for conversion. Example: the following system will register all the prefabs referenced by the PrefabReference component above, this will cause primary entities to be created for all the GameObjects contained in those prefabs. [UpdateInGroup(typeof(GameObjectDeclareReferencedObjectsGroup))] class PrefabConverterDeclare : GameObjectConversionSystem { protected override void OnUpdate() { Entities.ForEach((PrefabReference prefabReference) => { DeclareReferencedPrefab(prefabReference.Prefab); }); } } Please note that this system will be updated for as long as the set of declared GameObjects keeps growing. This means that if you have a GameObject A (in an authoring scene) that references a prefab B (in the asset folder) that itself references another prefab C (in the asset folder) that doesn't reference anything, the system above will update three times. The first time PrefabConverterDeclare runs, the ForEach will iterate over the set { A } and it will declare A.Prefab (this grows the set by one, it becomes { A, B } ). The second time PrefabConverterDeclare runs, the ForEach will iterate over the set { A, B } and it will declare A.Prefab and B.Prefab (this grows the set by one, it becomes { A, B, C } ). The third time PrefabConverterDeclare runs, the ForEach will iterate over the set { A, B, C } and it will declare A.Prefab and B.Prefab (there is no C.prefab, so this doesn't grow the set, it remains { A, B, C } ). Because the set didn't grow since the last iteration, the process stops. Calling DeclareReferencedPrefab multiple times on the same prefab will only register it once. Calling DeclareReferencedPrefab from a system which isn't part of GameObjectDeclareReferencedObjectsGroup is an error and will throw an exception. Declared prefabs can be retrieved as entities by calling GetPrimaryEntity in a system that runs after the creation of those entities, in other words in a system which isn't part of GameObjectDeclareReferencedObjectsGroup . Example: The following system will convert the components declared in the previous example. class PrefabConverter : GameObjectConversionSystem { protected override void OnUpdate() { Entities.ForEach((PrefabReference prefabReference) => { var entity = GetPrimaryEntity(prefabReference); var prefab = GetPrimaryEntity(prefabReference.Prefab); var component = new PrefabEntityReference {Prefab = prefab}; DstEntityManager.AddComponentData(entity, component); }); } } Important remark: prefabs cannot be instantiated during conversion, for the following reasons. prefabs are converted alongside all the other GameObjects, this means that GetPrimaryEntity will return a partially converted prefab. prefabs require a LinkedEntityGroup which is only initialized at the end of conversion. prefab instantiation is equivalent to manually creating entities in the destination world, which breaks conversion for reasons stated earlier in this document. The IConvertGameObjectToEntity interface Writing custom conversion systems offers maximum flexibility, but in cases where simplicity is preferred, the IConvertGameObjectToEntity interface can be implemented on a MonoBehaviour instead. During the update of the main conversion group GameObjectConversionGroup , all the authoring components in the conversion world that implement the IConvertGameObjectToEntity interface will have their Convert method called. Example: The following code is equivalent to the earlier conversion system example. // Authoring component class FooAuthoring : MonoBehaviour, IConvertGameObjectToEntity { public float Value; public void Convert(Entity entity, EntityManager dstManager, GameObjectConversionSystem conversionSystem) { dstManager.AddComponentData(entity, new Foo {SquaredValue = Value * Value}); } } // Runtime component struct Foo : IComponentData { public float SquaredValue; } The IConvertGameObjectToEntity interface only requires a Convert function that takes the following parameters: Entity entity - the primary entity that corresponds to the current authoring component. EntityManager dstManager - the entity manager of the destination world. GameObjectConversionSystem conversionSystem - the currently running conversion system, which is calling all the Convert methods. Please note that: entity lives in the destination world, so it only makes sense to use it with dstManager . dstManager is equivalent to conversionSystem.DstEntityManager and is only provided for convenience. There is no way to control the order in which the Convert functions from various MonoBehaviour will be called. If you need that control, you'll have to use custom conversion systems instead. The IDeclareReferencedPrefabs interface Likewise, instead of declaring prefabs using a custom system, you can implement the IDeclareReferencedPrefabs interface. Example: The following code is equivalent to the earlier PrefabConverterDeclare system example. public class PrefabReference : MonoBehaviour, IDeclareReferencedPrefabs { public GameObject Prefab; public void DeclareReferencedPrefabs(List<GameObject> referencedPrefabs) { referencedPrefabs.Add(Prefab); } } The IDeclareReferencedPrefabs interface only requires a DeclareReferencedPrefabs function that takes the following parameter: List<GameObject> referencedPrefabs - adding a prefab to this list will declare it. This list might already contain prefabs added by other authoring components that implement IDeclareReferencedPrefabs , do not clear it. Please note that: Just like when declaring prefabs in a system, this process handles prefabs recursively referencing other prefabs: it will keep running as long as the set of GameObjects to be converted is growing, so the DeclareReferencedPrefabs function might be called several times during the conversion process. Adding multiple times the same prefab to the list will only register it once. [!NOTE] Combining IDeclareReferencedPrefabs and IConvertGameObjectToEntity on the same MonoBehaviour is fully supported and frequently used. Generated authoring components For simple runtime components, the GenerateAuthoringComponent attribute can be used to request the automatic creation of an authoring component for a runtime component. You can then add the script containing the runtime component directly to a GameObject within the Editor. Example: The following runtime component will generate the authoring component below, note that DisallowMultipleComponent is a standard Unity attribute and isn't specific to DOTS. // Runtime component [GenerateAuthoringComponent] public struct Foo : IComponentData { public int ValueA; public float ValueB; public Entity PrefabC; public Entity PrefabD; } // Authoring component (generated code retrieved using the DOTS Compiler Inspector) [DisallowMultipleComponent] internal class FooAuthoring : MonoBehaviour, IConvertGameObjectToEntity, IDeclareReferencedPrefabs { public int ValueA; public float ValueB; public GameObject PrefabC; public GameObject PrefabD; public void Convert(Entity entity, EntityManager dstManager, GameObjectConversionSystem conversionSystem) { Foo componentData = default(Foo); componentData.ValueA = ValueA; componentData.ValueB = ValueB; componentData.PrefabC = conversionSystem.GetPrimaryEntity(PrefabC); componentData.PrefabD = conversionSystem.GetPrimaryEntity(PrefabD); dstManager.AddComponentData(entity, componentData); } public void DeclareReferencedPrefabs(List<GameObject> referencedPrefabs) { GeneratedAuthoringComponentImplementation .AddReferencedPrefab(referencedPrefabs, PrefabC); GeneratedAuthoringComponentImplementation .AddReferencedPrefab(referencedPrefabs, PrefabD); } } Note the following restrictions: Only one component in a single C# file can have a generated authoring component, and the C# file must not have another MonoBehaviour in it. The file doesn't have to follow any naming convention, i.e. it doesn't have to be named after the generated authoring component. ECS only reflects public fields and they have the same name as that specified in the component. ECS reflects fields of an Entity type in the IComponentData as fields of GameObject types in the MonoBehaviour it generates. ECS converts the GameObjects or Prefabs you assign to these fields as referenced Prefabs. There is no way to specify default values for the fields. There is no way to implement authoring callbacks (e.g. OnValidate ) You can also generate authoring components for types that implement IBufferElementData . Example: The following runtime component will generate the authoring component below, the source for BufferElementAuthoring is in the entities package, it does exactly what you'd expect. // Runtime component [GenerateAuthoringComponent] public struct FooBuffer : IBufferElementData { public int Value; } // Authoring component (generated code retrieved using ILSpy) internal class FooBufferAuthoring : Unity.Entities.Hybrid.BufferElementAuthoring<FooBuffer, int> { } Note the following additional restrictions: IBufferElementData authoring components cannot be automatically generated for types that contain 2 or more fields. IBufferElementData authoring components cannot be automatically generated for types that have an explicit layout. Asset pipeline V2 and background importing A scene conversion can happen in two different situations: When a subscene is open for edit, the conversion runs in the Unity editor process every time something changes. When a subscene is closed, the result of the conversion (entity scene) is loaded as an asset. In that second case, entity scenes are produced on demand by the asset pipeline through the use of a scripted importer (see the asset pipeline V2 documentation for further information on scripted importers). This conversion happens in a separate Unity process running in the background, we call this process an \"asset worker\". This has a series of consequences you should be aware of: Importing an entity scene is asynchronous, and the first time a scene gets imported (converted) it might eventually take a long time, because the background process has to start (and it's a full blown but headless Unity editor instance). Once started, it stays resident and subsequent imports will be much faster. Exceptions, errors, warnings, logs, etc. won't show up in the Unity Editor. The conversion log will be visible in the inspector for each subscene, and can be monitored on the disk in the \"Logs\" folder inside the project folder. You'll find a file named AssetImportWorker#.log there, where # is a number that will be incremented every time the process crashes and has to be restarted. So if all goes well you should only ever see AssetImportWorker0.log . When attaching the debugger to a Unity process you should pay attention that each process will have a child process (if at least one entity scene import happened since startup), depending if you want to debug the main process or the asset import process you'll have to pick the right one. You can rely on the process name for that purpose, or on the parenting relation between the two processes: the asset worker is the child. The asset pipeline v2 will import assets on demand, and checks dependencies to figure out if an asset is up to date or not. It also keeps a cache of previous imports, making switching targets very efficient. But this also means that if there is a missing dependency, you can end up with stale assets. This requires extra care, as detailed hereafter. Because the asset pipeline keeps a cache of imported assets and their dependencies, moving back to a previous configuration will likely hit the cache and won't cause a reimport. So don't expect that doing and undoing the same change will cause a reimport. Type dependencies An entity scene contains a stable hash for every runtime component type it references. This hash is used to detect any structural change in the type, in which case it would trigger a reimport of the entity scene. This means that changes to a component type will trigger the conversion process. The ConverterVersion attribute Changes to authoring types and conversion systems will not be automatically detected. The ConverterVersion attribute can be used for that purpose, it has to be used on either a conversion system or an authoring type that implements IConvertGameObjectToEntity . A \"converter version\" is a combination of the two parameters of the attribute: A string identifier A version number A change to any of those two will affect the dependencies. The reason for the string identifier is to prevent merge issues, if two people were to bump the version number in two different development branches, it would be easy to miss that when merging and forget to bump the version number again. The string identifier can be used to force a merge conflict, as long as people changing the version don't forget to set the identifier to something that uniquely identifies them. public class SomeComponentAuthoring : MonoBehaviour { public int SomeValue; } [ConverterVersion(\"Fabrice\", 140)] public class SomeComponentConversion : GameObjectConversionSystem { protected override void OnUpdate() { // ... } } Please note that in the example above, the attribute has to be put on the system, not on the authoring component. Because any relationship between a conversion system and any component only exists in the OnUpdate of the system, so it's not something that the dependency system can reason about automatically. [ConverterVersion(\"Fabrice\", 140)] public class SomeComponentAuthoring : MonoBehaviour, IConvertGameObjectToEntity { public int SomeValue; public void Convert(Entity entity, EntityManager dstManager, GameObjectConversionSystem conversionSystem) { // ... } } In the case of an authoring component that implements IConvertGameObjectToEntity , the conversion code and the definition of the authoring type are in the same class, so there's no ambiguity about the location of the ConverterVersion attribute."
  },
  "manual/conversion_livelink.html": {
    "href": "manual/conversion_livelink.html",
    "title": "Conversion for LiveLink | Entities | 0.17.0-preview.18",
    "keywords": "Conversion for LiveLink Unity 2020.2 and later support converting GameObject data to Entities in real-time. To enable this feature, toggle on Live Conversion via the menu item DOTS/Live Link Mode/Live Conversion in EditMode . When enabled, all objects in open subscenes are automatically converted to entities in the editor. Any undoable changes to objects in these open subscenes lead to a reconversion of the affected GameObjects in the subscene. The result of this reconversion is then compared to the last known conversion result (the shadow world of the subscene) to generate a patch. This patch is applied to the editor world and sent to any connected LiveLink players. Incremental Conversion The key feature that enables editing entity data at scale is incremental conversion : Whenever there is a change to a GameObject, the LiveLink code automatically detects this change and marks the GameObject for reconversion. This ensures that only the data that has actually changed is reconverted. All undoable operations are detected as changes. If an operation is not undoable, it is not detected. Since conversion might run every frame in the editor, it is crucial to ensure that the set of objects to convert is as small as possible. This introduces the difficulty that the result of incrementally converting a subset of the objects in a scene must match a full reconversion of the scene. Dependency Management Generally speaking, changes to a GameObject only trigger a reconversion of that specific GameObject. GameObjects are always converted as a whole, so any change will reconvert the entire GameObject. In some cases, your conversion code might depend on other data. If your conversion code depends on more than just the input object, you need to express these additional dependencies explicitly. These are the dependencies that are currently available: depending on an asset (meaning that the conversion result depends on the contents of an asset), depending on another GameObject (meaning that the conversion result depends on the state of another GameObject, e.g. the presence of components), depending on a component on another GameObject (meaning that the conversion result depends on the state of the component data of another GameObject). In the following, we will give an example and an explanation for all types of dependencies. Depending on the content of an Asset When your conversion code reads the contents of an asset, you need to declare a dependency on the asset itself. This dependency means that the GameObject needs to be converted whenever the asset changes its content. As a concrete example, assume that you have conversion code that makes use of the bounding box around a mesh. This bounding box depends on the contents of a mesh asset. The GameObject thus needs to be reconverted whenever this mesh changes. public struct BoundsComponent : IComponentData { public Bounds Bounds; } [ConverterVersion(\"unity\", 1)] public class MeshBoundingBoxDependency : MonoBehaviour, IConvertGameObjectToEntity { public Mesh Mesh; public void Convert(Entity entity, EntityManager dstManager, GameObjectConversionSystem conversionSystem) { dstManager.AddComponentData(entity, new BoundsComponent { Bounds = Mesh.bounds }); // Declare the dependency on the asset. Note the lack of a check for null. conversionSystem.DeclareAssetDependency(gameObject, Mesh); } } Note the lack of a check for null : All methods for declaring dependencies correctly handle the case of null , and it is imperative that you do not perform this check yourself. Unity overrides the comparison operator for the UnityEngine.Object type to also equal null when the object has been destroyed. Even though the object might be destroyed, we can still extract identifying data from it. This is crucial for correctly handling dependencies on objects that might be deleted and later restored (e.g. the deletion of an object is undone). You do not need to declare a dependency if you merely reference an asset. References are stable and can be tracked automatically. For example, if your code is merely storing a reference to a mesh there is no need to declare a dependency: public class MeshComponent : IComponentData { public Mesh Mesh; } [ConverterVersion(\"unity\", 1)] public class MeshReference : MonoBehaviour, IConvertGameObjectToEntity { public Mesh Mesh; public void Convert(Entity entity, EntityManager dstManager, GameObjectConversionSystem conversionSystem) { dstManager.AddComponentData(entity, new MeshComponent { Mesh = Mesh }); // No need to declare a dependency here, we're merely referencing an asset. } } Depending on another GameObject Dependencies on another GameObject need to be declared when you depend on general properties of the GameObject, e.g. its name, whether it is enabled, or the presence of components on that GameObject. public struct NameComponent : IComponentData { public Unity.Collections.FixedString32 Name; } [ConverterVersion(\"unity\", 1)] public class NameFromGameObject : MonoBehaviour, IConvertGameObjectToEntity { public GameObject Other; public void Convert(Entity entity, EntityManager dstManager, GameObjectConversionSystem conversionSystem) { dstManager.AddComponentData(entity, new NameComponent { Name = Other.name }); // Note the lack of a null check conversionSystem.DeclareDependency(gameObject, Other); } } Note here that when you depend on the contents of a component on a GameObject you must declare a dependency on that component instead, see below. Depending on Component data Conversion code might also depend on the component data on this or another GameObject. This is expected to be the most common kind of dependency. For example, your conversion code might depend on a MeshFilter that may or may not be stored on another GameObject. [ConverterVersion(\"unity\", 1)] public class MeshFromOtherComponent : MonoBehaviour, IConvertGameObjectToEntity { public MeshFilter MeshFilter; public void Convert(Entity entity, EntityManager dstManager, GameObjectConversionSystem conversionSystem) { dstManager.AddComponentData(entity, new MeshComponent { Mesh = MeshFilter.sharedMesh }); // Note the lack of a null check conversionSystem.DeclareDependency(gameObject, MeshFilter); } } Dependencies on Transform components specifically are mandatory: While GameObjects themselves are the smallest unit of conversion, there is code that relies on this dependency information on a component level. Transform components are hierarchical and a change to one transform component actually changes an entire hierarchy. There is a special code path for handling this case specifically, since moving around large hierarchies cannot rely on reconverting the entire hierarchy every frame. Instead, transform data on the converted entities is patched directly and only GameObjects whose conversion result actually depends on the transform data are reconverted (e.g. the conversion result depends on the rotation of the object or the specific position of the object in a scene). public struct Offset : IComponentData { public Unity.Mathematics.float3 Value; } [ConverterVersion(\"unity\", 1)] public class ReadFromOwnTransform : MonoBehaviour, IConvertGameObjectToEntity { public void Convert(Entity entity, EntityManager dstManager, GameObjectConversionSystem conversionSystem) { dstManager.AddComponentData(entity, new Offset { Value = transform.position }); // We need to explicitly declare a dependency on the transform data, // even when it is on the same object. conversionSystem.DeclareDependency(gameObject, transform); } } Dependencies on transform data should be used sparingly since they run the danger of making editing large scenes slow. This is the only case in which you need to declare a reference on a component on the same GameObject. When you store a reference to a GameObject instead of a component and use that to acquire a reference to a component, you also need to declare a dependency against the GameObject itself: [ConverterVersion(\"unity\", 1)] public class ReadFromOtherMeshFilter : MonoBehaviour, IConvertGameObjectToEntity { public GameObject Other; public void Convert(Entity entity, EntityManager dstManager, GameObjectConversionSystem conversionSystem) { if (Other != null) { var meshFilter = Other.GetComponent<MeshFilter>(); dstManager.AddComponentData(entity, new MeshComponent { Mesh = meshFilter.sharedMesh }); // In this case, we need a null-check: meshFilter can only be // accessed when Other is not null. // It would be simpler to expose a reference to a Meshfilter on this // MonoBehaviour. conversionSystem.DeclareDependency(gameObject, meshFilter); } // Note the lack of a null-check conversionSystem.DeclareDependency(gameObject, Other); } } Debugging Incremental Conversion Failures The result of incrementally reconverting a subset of objects in a scene must match the result of a full conversion bit-by-bit. This is a hard requirement. Verifying this requirement is a challenge. To facilitate this, you can use DOTS/Live Link Mode/Debug Incremental Conversion . This will run a full conversion after every incremental conversion and compare the results. If there are any differences between the two conversion results, it will print out a summary of the differences. The most common source for a mismatch between the two conversions are missing dependencies. When you are missing a dependency, a change to a GameObject or asset will not correctly reconvert all GameObjects whose conversion result depend on that GameObject or asset. Known Issues There are known issues around GetPrimaryEntity . As of version 0.17 of the entities package, there is no way to express a dependency on the existence of a GameObject and GetPrimaryEntity does not register such a dependency. Therefore, the following demonstrates how to properly get a reference to another entity: public struct EntityReference : IComponentData { public Entity Entity; } [ConverterVersion(\"unity\", 1)] public class GetEntityReference : MonoBehaviour, IConvertGameObjectToEntity { public GameObject Other; public void Convert(Entity entity, EntityManager dstManager, GameObjectConversionSystem conversionSystem) { dstManager.AddComponentData(entity, new EntityReference { Entity = conversionSystem.GetPrimaryEntity(Other) }); // This line is required right now, unfortunately. // Note the lack of a null-check. conversionSystem.DeclareDependency(gameObject, Other); } } If the dependency registered on the last line is not present, you may run into an invalid conversion state: Specifically, deleting the GameObject referred to by Other and undoing said deletion will not reconvert your GameObject and lead to an invalid Entity reference."
  },
  "manual/custom_job_types.html": {
    "href": "manual/custom_job_types.html",
    "title": "Custom job types | Entities | 0.17.0-preview.18",
    "keywords": "Custom job types On the lowest level of the job system, jobs are scheduled by calling one of the Schedule functions in JobsUtility . The currently existing job types all use these functions, but it is also possible to create specialized job types using the same APIs. These APIs use unsafe code and have to be crafted carefully, since they can easily introduce unwanted race conditions. If you add your own job types, we strongly recommend to aim for full test coverage. As an example we have a custom job type IJobParallelForBatch (see file: /Packages/com.unity.jobs/Unity.Jobs/IJobParallelForBatch.cs ). It works like IJobParallelFor , but instead of calling a single execute function per index it calls one execute function per batch being executed. This is useful if you need to do something on more than one item at a time, but still want to do it in parallel. A common scenario for this job type is if you need to create a temporary array and you want to avoid creating each item in the array one at a time. By using IJobParallelFor you can instead create one temporary array per batch. In the IJobParallelForBatch example, the entry point where the job is actually scheduled looks like this: unsafe static public JobHandle ScheduleBatch&lt;T&gt;(this T jobData, int arrayLength, int minIndicesPerJobCount, JobHandle dependsOn = new JobHandle()) where T : struct, IJobParallelForBatch { var scheduleParams = new JobsUtility.JobScheduleParameters(UnsafeUtility.AddressOf(ref jobData), ParallelForBatchJobStruct&lt;T&gt;.Initialize(), dependsOn, ScheduleMode.Batched); return JobsUtility.ScheduleParallelFor(ref scheduleParams, arrayLength, minIndicesPerJobCount); } The first line creates a struct containing the scheduling parameters. When creating it you need to set a pointer to the data which will be copied to the jobs. The reason this is a pointer is that the native code which uses it does not know about the type. You also need to pass it a pointer to the JobReflectionData created by calling: JobsUtility.CreateJobReflectionData(typeof(T), JobType.ParallelFor, (ExecuteJobFunction)Execute); JobReflection stores information about the struct with the data for the job, such as which NativeContainers it has and how they need to be patched when scheduling a job. It lives on the native side of the engine and the managed code only has access to it though pointers without any information about what the type is. When creating JobReflectionData you need to specify the type of the struct implementing the job, the JobType and the method which will be called to execute the job. The JobReflectionData does not depend on the data in the struct you schedule, only its type, so it should only be created once for all jobs implementing the same interface. There are currently only two job types, Single and ParallelFor . Single means the job will only get a single call, ParallelFor means there will be multiple calls to process it; where each call is restricted to a subset of the range of indices to process. Which job type you choose affects which schedule function you are allowed to call. The third parameter of JobsUtility.JobScheduleParameters is the JobHandle that the scheduled job should depend on. The final parameter is the schedule mode. There are two scheduling modes to choose from, Run and Batched . Batched means one or more jobs will be scheduled to do the processing, while Run means the processing will be done on the main thread before Schedule returns. Once the schedule parameters are created we actually schedule the job. There are three ways to schedule jobs depending on their type: JobHandle Schedule(ref JobScheduleParameters parameters); JobHandle ScheduleParallelFor(ref JobScheduleParameters parameters, int arrayLength, int innerLoopBatchCount); JobHandle ScheduleParallelForTransform(ref JobScheduleParameters parameters, IntPtr transfromAccessArray); Schedule can only be used if the ScheduleParameters are created with JobType.Single , the other two schedule functions require JobType.ParallelFor . The arrayLength and innerLoopBatchCount parameter passed to ScheduleParallelFor are used to determine how many indices the jobs should process and how many indices it should handle in the inner loop (see the section on Execution and JobRanges for more information on the inner loop count). ScheduleParallelForTransform is similar to ScheduleParallelFor, but it also has access to a TransformAccessArray that allows you to modify Transform components on GameObjects . The number of indices and batch size is inferred from the TransformAccessArray. Execution and JobRanges After scheduling the job, Unity will call the entry point you specified directly from the native side. It works in a similar way to how Update is called on MonoBehaviours, but from inside a job instead. You only get one call per job and there is either one job, or one job per worker thread; in the case of ParallelFor. The signature used for Execute is public delegate void ExecuteJobFunction(ref T data, IntPtr additionalPtr, IntPtr bufferRangePatchData, ref JobRanges ranges, int jobIndex); For Single jobs, only the data is needed and you can just do your processing right away, but for ParallelFor jobs it requires some more work before you can start processing indices. We need to split up the indices into a number of sequential sub-sets that each job will process in parallel. This way we do not process the same thing twice and we are sure that everything gets covered. The memory layout will determine the order of indices. The JobRanges contain the batches and indices a ParallelFor job is supposed to process. The indices are split into batches based on the batch size, the batches are evenly distributed between the jobs doing the execution in such a way that each job can iterate over a continuous section of memory. The ParallelFor job should call: JobsUtility.GetWorkStealingRange(ref ranges, jobIndex, out begin, out end) This continues until it returns false , and after calling it process all items with index between begin and end . The reason you get batches of items, rather than the full set of items the job should process, is that Unity will apply work stealing if one job completes before the others. Work stealing in this context means that when one job is done it will look at the other jobs running and see if any of them still have a lot of work left. If it finds a job which is not complete it will steal some of the batches that it has not yet started; to dynamically redistribute the work. Before a ParallelFor job starts processing items it also needs to limit the write access to NativeContainers on the range of items which the job is processing. If it does not do this several jobs can potentially write to the same index which leads to race conditions. The NativeContainers that need to be limited is passed to the job and there is a function to patch them; so they cannot access items outside the correct range. The code to do it looks like this: #if ENABLE_UNITY_COLLECTIONS_CHECKS JobsUtility.PatchBufferMinMaxRanges(bufferRangePatchData, UnsafeUtility.AddressOf(ref jobData), begin, end - begin); #endif Custom NativeContainers When writing jobs, the data communication between jobs is one of the hardest parts to get right. Just using NativeArray is very limiting. Using NativeQueue , NativeHashMap and NativeMultiHashMap and their Concurrent versions solves most scenarios. For the remaining scenarios it is possible to write your own custom NativeContainers. When writing custom containers for thread synchronization it is very important to write correct code. We strongly recommend full test coverage for any new containers you add. As a very simple example of this we will create a NativeCounter that can be incremented in a ParallelFor job through NativeCounter.Concurrent and read in a later job or on the main thread. Let's start with the basic container type: // Mark this struct as a NativeContainer, usually this would be a generic struct for containers, but a counter does not need to be generic // TODO - why does a counter not need to be generic? - explain the argument for this reasoning please. [StructLayout(LayoutKind.Sequential)] [NativeContainer] unsafe public struct NativeCounter { // The actual pointer to the allocated count needs to have restrictions relaxed so jobs can be schedled with this container [NativeDisableUnsafePtrRestriction] int* m_Counter; #if ENABLE_UNITY_COLLECTIONS_CHECKS AtomicSafetyHandle m_Safety; // The dispose sentinel tracks memory leaks. It is a managed type so it is cleared to null when scheduling a job // The job cannot dispose the container, and no one else can dispose it until the job has run, so it is ok to not pass it along // This attribute is required, without it this NativeContainer cannot be passed to a job; since that would give the job access to a managed object [NativeSetClassTypeToNullOnSchedule] DisposeSentinel m_DisposeSentinel; #endif // Keep track of where the memory for this was allocated Allocator m_AllocatorLabel; public NativeCounter(Allocator label) { // This check is redundant since we always use an int that is blittable. // It is here as an example of how to check for type correctness for generic types. #if ENABLE_UNITY_COLLECTIONS_CHECKS if (!UnsafeUtility.IsBlittable<int>()) throw new ArgumentException(string.Format(\"{0} used in NativeQueue<{0}> must be blittable\", typeof(int))); #endif m_AllocatorLabel = label; // Allocate native memory for a single integer m_Counter = (int*)UnsafeUtility.Malloc(UnsafeUtility.SizeOf<int>(), 4, label); // Create a dispose sentinel to track memory leaks. This also creates the AtomicSafetyHandle #if ENABLE_UNITY_COLLECTIONS_CHECKS DisposeSentinel.Create(out m_Safety, out m_DisposeSentinel, 0); #endif // Initialize the count to 0 to avoid uninitialized data Count = 0; } public void Increment() { // Verify that the caller has write permission on this data. // This is the race condition protection, without these checks the AtomicSafetyHandle is useless #if ENABLE_UNITY_COLLECTIONS_CHECKS AtomicSafetyHandle.CheckWriteAndThrow(m_Safety); #endif (*m_Counter)++; } public int Count { get { // Verify that the caller has read permission on this data. // This is the race condition protection, without these checks the AtomicSafetyHandle is useless #if ENABLE_UNITY_COLLECTIONS_CHECKS AtomicSafetyHandle.CheckReadAndThrow(m_Safety); #endif return *m_Counter; } set { // Verify that the caller has write permission on this data. This is the race condition protection, without these checks the AtomicSafetyHandle is useless #if ENABLE_UNITY_COLLECTIONS_CHECKS AtomicSafetyHandle.CheckWriteAndThrow(m_Safety); #endif *m_Counter = value; } } public bool IsCreated { get { return m_Counter != null; } } public void Dispose() { // Let the dispose sentinel know that the data has been freed so it does not report any memory leaks #if ENABLE_UNITY_COLLECTIONS_CHECKS DisposeSentinel.Dispose(m_Safety, ref m_DisposeSentinel); #endif UnsafeUtility.Free(m_Counter, m_AllocatorLabel); m_Counter = null; } } With this we have a simple NativeContainer where we can get, set, and increment the count. This container can be passed to a job, but it has the same restrictions as NativeArray, which means it cannot be passed to a ParallelFor job with write access. The next step is to make it usable in ParallelFor. In order to avoid race conditions we want to make sure no-one else is reading it while the ParallelFor is writing to it. To achieve this we create a separate inner struct called Concurrent that can handle multiple writers, but no readers. We make sure NativeCounter.Concurrent can be assigned to from within a normal NativeCounter, since it is not possible for it to live separately outside a NativeCounter. TODO - why is that? [NativeContainer] // This attribute is what makes it possible to use NativeCounter.Concurrent in a ParallelFor job [NativeContainerIsAtomicWriteOnly] unsafe public struct Concurrent { // Copy of the pointer from the full NativeCounter [NativeDisableUnsafePtrRestriction] int* m_Counter; // Copy of the AtomicSafetyHandle from the full NativeCounter. The dispose sentinel is not copied since this inner struct does not own the memory and is not responsible for freeing it. #if ENABLE_UNITY_COLLECTIONS_CHECKS AtomicSafetyHandle m_Safety; #endif // This is what makes it possible to assign to NativeCounter.Concurrent from NativeCounter public static implicit operator NativeCounter.Concurrent (NativeCounter cnt) { NativeCounter.Concurrent concurrent; #if ENABLE_UNITY_COLLECTIONS_CHECKS AtomicSafetyHandle.CheckWriteAndThrow(cnt.m_Safety); concurrent.m_Safety = cnt.m_Safety; AtomicSafetyHandle.UseSecondaryVersion(ref concurrent.m_Safety); #endif concurrent.m_Counter = cnt.m_Counter; return concurrent; } public void Increment() { // Increment still needs to check for write permissions #if ENABLE_UNITY_COLLECTIONS_CHECKS AtomicSafetyHandle.CheckWriteAndThrow(m_Safety); #endif // The actual increment is implemented with an atomic, since it can be incremented by multiple threads at the same time Interlocked.Increment(ref *m_Counter); } } With this setup we can schedule ParallelFor with write access to a NativeCounter through the inner Concurrent struct, like this: struct CountZeros : IJobParallelFor { [ReadOnly] public NativeArray<int> input; public NativeCounter.Concurrent counter; public void Execute(int i) { if (input[i] == 0) { counter.Increment(); } } } var counter = new NativeCounter(Allocator.Temp); var jobData = new CountZeros(); jobData.input = input; jobData.counter = counter; counter.Count = 0; var handle = jobData.Schedule(input.Length, 8); handle.Complete(); Debug.Log(\"The array contains \" + counter.Count + \" zeros\"); counter.Dispose(); Better cache usage The NativeCounter from the previous section is a working implementation of a counter, but all jobs in the ParallelFor will access the same atomic to increment the value. This is not optimal as it means the same cache line is used by all threads. The way this is generally solved in NativeContainers is to have a local cache per worker thread, which is stored on its own cache line. The [NativeSetThreadIndex] attribute can inject a worker thread index, the index is guaranteed to be unique while accessing the NativeContainer from the ParallelFor jobs. In order to make such an optimization here we need to change a few things. The first thing we need to change is the data layout. For performance reasons we need one full cache line per worker thread, rather than a single int to avoid false sharing . We start by adding a constant for the number of ints on a cache line. public const int IntsPerCacheLine = JobsUtility.CacheLineSize / sizeof(int); Next we change the amount of memory allocated. // One full cache line (integers per cacheline * size of integer) for each potential worker index, JobsUtility.MaxJobThreadCount m_Counter = (int*)UnsafeUtility.Malloc(UnsafeUtility.SizeOf<int>()*IntsPerCacheLine*JobsUtility.MaxJobThreadCount, 4, label); TODO: I'm not sure which example you are referring to when you say: main, non-concurrent, version below (is this an example you used on this page or what you would do if you were not using jobified code/ECS etc. It has potential for confusion.) When accessing the counter from the main, non-concurrent, version there can only be one writer so the increment function is fine with the new memory layout. For get and set of the count we need to loop over all potential worker indices. public int Count { get { // Verify that the caller has read permission on this data. // This is the race condition protection, without these checks the AtomicSafetyHandle is useless #if ENABLE_UNITY_COLLECTIONS_CHECKS AtomicSafetyHandle.CheckReadAndThrow(m_Safety); #endif int count = 0; for (int i = 0; i < JobsUtility.MaxJobThreadCount; ++i) count += m_Counter[IntsPerCacheLine * i]; return count; } set { // Verify that the caller has write permission on this data. // This is the race condition protection, without these checks the AtomicSafetyHandle is useless #if ENABLE_UNITY_COLLECTIONS_CHECKS AtomicSafetyHandle.CheckWriteAndThrow(m_Safety); #endif // Clear all locally cached counts, // set the first one to the required value for (int i = 1; i < JobsUtility.MaxJobThreadCount; ++i) m_Counter[IntsPerCacheLine * i] = 0; *m_Counter = value; } } The final change is the inner Concurrent struct that needs to get the worker index injected into it. Since each worker only runs one job at a time, there is no longer any need to use atomics when only accessing the local count. [NativeContainer] [NativeContainerIsAtomicWriteOnly] // Let the job system know that it should inject the current worker index into this container unsafe public struct Concurrent { [NativeDisableUnsafePtrRestriction] int* m_Counter; #if ENABLE_UNITY_COLLECTIONS_CHECKS AtomicSafetyHandle m_Safety; #endif // The current worker thread index; it must use this exact name since it is injected [NativeSetThreadIndex] int m_ThreadIndex; public static implicit operator NativeCacheCounter.Concurrent (NativeCacheCounter cnt) { NativeCacheCounter.Concurrent concurrent; #if ENABLE_UNITY_COLLECTIONS_CHECKS AtomicSafetyHandle.CheckWriteAndThrow(cnt.m_Safety); concurrent.m_Safety = cnt.m_Safety; AtomicSafetyHandle.UseSecondaryVersion(ref concurrent.m_Safety); #endif concurrent.m_Counter = cnt.m_Counter; concurrent.m_ThreadIndex = 0; return concurrent; } public void Increment() { #if ENABLE_UNITY_COLLECTIONS_CHECKS AtomicSafetyHandle.CheckWriteAndThrow(m_Safety); #endif // No need for atomics any more since we are just incrementing the local count ++m_Counter[IntsPerCacheLine*m_ThreadIndex]; } } Writing the NativeCounter this way significantly reduces the overhead of having multiple threads writing to it. It does, however, come at a price. The cost of getting the count on the main thread has increased significantly since it now needs to check all local caches and sum them up. If you are aware of this and make sure to cache the return values it is usually worth it, but you need to know the limitations of your data structures. So we strongly recommend documenting the performance characteristics. Tests The NativeCounter is not complete, the only thing left is to add tests for it to make sure it is correct and that it does not break in the future. When writing tests you should try to cover as many unusual scenarios as possible. It is also a good idea to add some kind of stress test using jobs to detect race conditions, even if it is unlikely to find all of them. The NativeCounter API is very small so the number of tests required is not huge. Both versions of the counter examples above are available at: /Assets/NativeCounterDemo . The tests for them can be found at: /Assets/NativeCounterDemo/Editor/NativeCounterTests.cs . Available attributes The NativeCounter uses many attributes, but there are a few more available for other types of containers. Here is a list of the available attributes you can use on the NativeContainer struct. NativeContainer - marks a struct as a NativeContainer.Required for all native containers. NativeContainerSupportsMinMaxWriteRestriction - signals that the NativeContainer can restrict its writable ranges to be between a min and max index. This is used when passing the container to an IJobParallelFor to make sure that the job does not write to indices it is not supposed to process. In order to use this the NativeContainer must have the members int m_Length , int m_MinIndex and int m_MaxIndex in that order with no other members between them. The container must also throw an exception for writes outside the min/max range. NativeContainerIsAtomicWriteOnly - signals that the NativeContainer uses atomic writes and no reads. By adding this is is possible to pass the NativeContainer to an IJobParallelFor as writable without restrictions on which indices can be written to. NativeContainerSupportsDeallocateOnJobCompletion - makes the NativeContainer usable with DeallocateOnJobCompletion . In order to use this the NativeContainer must have a single allocation in m_Buffer , an allocator label in m_AllocatorLabel and a dispose sentinel in m_DisposeSentinel . NativeSetThreadIndex - Patches an int with the thread index of the job. In addition to these attributes on the native container struct itself there are a few attributes which can be used on members of the native container. NativeDisableUnsafePtrRestriction - allows the NativeContainer to be passed to a job even though it contains a pointer, which is usually not allowed. NativeSetClassTypeToNullOnSchedule - allows the NativeContainer to be passed to a job even though it contains a managed object. The managed object will be set to null on the copy passed to the job."
  },
  "manual/dynamic_buffers.html": {
    "href": "manual/dynamic_buffers.html",
    "title": "Dynamic buffer components | Entities | 0.17.0-preview.18",
    "keywords": "Dynamic buffer components Use dynamic buffer components to associate array-like data with an entity. Dynamic buffers are ECS components that can hold a variable number of elements, and automatically resize as necessary. To create a dynamic buffer, first declare a struct that implements IBufferElementData and defines the elements stored in the buffer. For example, you can use the following struct for a buffer component that stores integers: public struct IntBufferElement : IBufferElementData { public int Value; } To associate a dynamic buffer with an entity, add an IBufferElementData component directly to the entity rather than adding the dynamic buffer container itself. ECS manages the container. For most purposes, you can use a declared IBufferElementData type to treat a dynamic buffer the same as any other ECS component. For example, you can use the IBufferElementData type in entity queries as well as when you add or remove the buffer component. However, you must use different functions to access a buffer component and those functions provide the DynamicBuffer instance, which gives an array-like interface to the buffer data. To specify an “internal capacity\" for a dynamic buffer component, use the InternalBufferCapacity attribute . The internal capacity defines the number of elements the dynamic buffer stores in the ArchetypeChunk along with the other components of an entity. If you increase the size of a buffer beyond the internal capacity, the buffer allocates a heap memory block outside the current chunk and moves all existing elements. ECS manages this external buffer memory automatically, and frees the memory when the buffer component is removed. Note If the data in a buffer is not dynamic, you can use a blob asset instead of a dynamic buffer. Blob assets can store structured data, including arrays. Multiple entities can share blob assets. Declaring buffer element types To declare a buffer, declare a struct that defines the type of element that you want to put into the buffer. The struct must implement IBufferElementData , like so: // InternalBufferCapacity specifies how many elements a buffer can have before // the buffer storage is moved outside the chunk. [InternalBufferCapacity(8)] public struct MyBufferElement : IBufferElementData { // Actual value each buffer element will store. public int Value; // The following implicit conversions are optional, but can be convenient. public static implicit operator int(MyBufferElement e) { return e.Value; } public static implicit operator MyBufferElement(int e) { return new MyBufferElement { Value = e }; } } Adding buffer types to entities To add a buffer to an entity, add the IBufferElementData struct that defines the data type of the buffer element, and then add that type directly to an entity or to an archetype : Using EntityManager.AddBuffer() For more information, see the documentation on EntityManager.AddBuffer() . EntityManager.AddBuffer<MyBufferElement>(entity); Using an archetype Entity e = EntityManager.CreateEntity(typeof(MyBufferElement)); Using the [GenerateAuthoringComponent] attribute You can use [GenerateAuthoringComponent] to generate authoring components for simple IBufferElementData implementations that contain only one field. Setting this attribute allows you add an ECS IBufferElementData component to a GameObject so that you can set the buffer elements in the Editor. For example, if you declare the following type, you can add it directly to a GameObject in the Editor: [GenerateAuthoringComponent] public struct IntBufferElement: IBufferElementData { public int Value; } In the background, Unity generates a class named IntBufferElementAuthoring (which inherits from MonoBehaviour ), which exposes a public field of List<int> type. When the GameObject containing this generated authoring component is converted into an entity, the list is converted into DynamicBuffer<IntBufferElement> , and then added to the converted entity. Note the following restrictions: Only one component in a single C# file can have a generated authoring component, and the C# file must not have another MonoBehaviour in it. IBufferElementData authoring components cannot be automatically generated for types that contain more than one field. IBufferElementData authoring components cannot be automatically generated for types that have an explicit layout. Using an EntityCommandBuffer You can add or set a buffer component when you add commands to an entity command buffer. Use AddBuffer to create a new buffer for the entity, which changes the entity's archetype. Use SetBuffer to wipe out the existing buffer (which must exist) and create a new, empty buffer in its place. Both functions return a DynamicBuffer instance that you can use to populate the new buffer. You can add elements to the buffer immediately, but they are not otherwise accessible until the buffer is added to the entity when the command buffer is executed. The following job creates a new entity using a command buffer and then adds a dynamic buffer component using EntityCommandBuffer.AddBuffer . The job also adds a number of elements to the dynamic buffer. using Unity.Entities; using Unity.Jobs; public class CreateEntitiesWithBuffers : SystemBase { // A command buffer system executes command buffers in its own OnUpdate public EntityCommandBufferSystem CommandBufferSystem; protected override void OnCreate() { // Get the command buffer system CommandBufferSystem = World.DefaultGameObjectInjectionWorld.GetExistingSystem<EndSimulationEntityCommandBufferSystem>(); } protected override void OnUpdate() { // The command buffer to record commands, // which are executed by the command buffer system later in the frame EntityCommandBuffer.ParallelWriter commandBuffer = CommandBufferSystem.CreateCommandBuffer().AsParallelWriter(); //The DataToSpawn component tells us how many entities with buffers to create Entities.ForEach((Entity spawnEntity, int entityInQueryIndex, in DataToSpawn data) => { for (int e = 0; e < data.EntityCount; e++) { //Create a new entity for the command buffer Entity newEntity = commandBuffer.CreateEntity(entityInQueryIndex); //Create the dynamic buffer and add it to the new entity DynamicBuffer<MyBufferElement> buffer = commandBuffer.AddBuffer<MyBufferElement>(entityInQueryIndex, newEntity); //Reinterpret to plain int buffer DynamicBuffer<int> intBuffer = buffer.Reinterpret<int>(); //Optionally, populate the dynamic buffer for (int j = 0; j < data.ElementCount; j++) { intBuffer.Add(j); } } //Destroy the DataToSpawn entity since it has done its job commandBuffer.DestroyEntity(entityInQueryIndex, spawnEntity); }).ScheduleParallel(); CommandBufferSystem.AddJobHandleForProducer(this.Dependency); } } Note You are not required to add data to the dynamic buffer immediately. However, you won't have access to the buffer again until after the entity command buffer you are using is executed. Accessing buffers You can use EntityManager , systems , and jobs to access the DynamicBuffer instance in much the same way as you access other component types of entities. EntityManager You can use an instance of the EntityManager to access a dynamic buffer: DynamicBuffer<MyBufferElement> dynamicBuffer = EntityManager.GetBuffer<MyBufferElement>(entity); Looking up buffers of another entity When you need to look up the buffer data belonging to another entity in a job, you can pass a BufferFromEntity variable to the job. BufferFromEntity<MyBufferElement> lookup = GetBufferFromEntity<MyBufferElement>(); var buffer = lookup[entity]; buffer.Add(17); buffer.RemoveAt(0); SystemBase Entities.ForEach You can access dynamic buffers associated with the entities you process with Entities.ForEach by passing the buffer as one of your lambda function parameters. The following example adds all the values stored in the buffers of type, MyBufferElement : public class DynamicBufferSystem : SystemBase { protected override void OnUpdate() { var sum = 0; Entities.ForEach((DynamicBuffer<MyBufferElement> buffer) => { for(int i = 0; i < buffer.Length; i++) { sum += buffer[i].Value; } }).Run(); Debug.Log(\"Sum of all buffers: \" + sum); } } Note that we can write directly to the captured sum variable in this example because we execute the code with Run() . If we scheduled the function to run in a job, we could only write to a native container such as NativeArray, even though the result is a single value. IJobChunk To access an individual buffer in an IJobChunk job, pass the buffer data type to the job and use that to get a BufferAccessor . A buffer accessor is an array-like structure that provides access to all of the dynamic buffers in the current chunk. Like the previous example, the following example adds up the contents of all dynamic buffers that contain elements of type, MyBufferElement . IJobChunk jobs can also run in parallel on each chunk, so in the example, it first stores the intermediate sum for each buffer in a native array and then uses a second job to calculate the final sum. In this case, the intermediate array holds one result for each chunk, rather than one result for each entity. public class DynamicBufferJobSystem : SystemBase { private EntityQuery query; protected override void OnCreate() { //Create a query to find all entities with a dynamic buffer // containing MyBufferElement EntityQueryDesc queryDescription = new EntityQueryDesc(); queryDescription.All = new[] {ComponentType.ReadOnly<MyBufferElement>()}; query = GetEntityQuery(queryDescription); } public struct BuffersInChunks : IJobEntityBatch { //The data type and safety object public BufferTypeHandle<MyBufferElement> BufferTypeHandle; //An array to hold the output, intermediate sums public NativeArray<int> sums; public void Execute(ArchetypeChunk batchInChunk, int batchIndex) { //A buffer accessor is a list of all the buffers in the chunk BufferAccessor<MyBufferElement> buffers = batchInChunk.GetBufferAccessor(BufferTypeHandle); for (int c = 0; c < batchInChunk.Count; c++) { //An individual dynamic buffer for a specific entity DynamicBuffer<MyBufferElement> buffer = buffers[c]; for(int i = 0; i < buffer.Length; i++) { sums[batchIndex] += buffer[i].Value; } } } } //Sums the intermediate results into the final total public struct SumResult : IJob { [DeallocateOnJobCompletion] public NativeArray<int> sums; public NativeArray<int> result; public void Execute() { for(int i = 0; i < sums.Length; i++) { result[0] += sums[i]; } } } protected override void OnUpdate() { //Create a native array to hold the intermediate sums int chunksInQuery = query.CalculateChunkCount(); NativeArray<int> intermediateSums = new NativeArray<int>(chunksInQuery, Allocator.TempJob); //Schedule the first job to add all the buffer elements BuffersInChunks bufferJob = new BuffersInChunks(); bufferJob.BufferTypeHandle = GetBufferTypeHandle<MyBufferElement>(); bufferJob.sums = intermediateSums; this.Dependency = bufferJob.ScheduleParallel(query, 1, this.Dependency); //Schedule the second job, which depends on the first SumResult finalSumJob = new SumResult(); finalSumJob.sums = intermediateSums; NativeArray<int> finalSum = new NativeArray<int>(1, Allocator.Temp); finalSumJob.result = finalSum; this.Dependency = finalSumJob.Schedule(this.Dependency); this.CompleteDependency(); Debug.Log(\"Sum of all buffers: \" + finalSum[0]); finalSum.Dispose(); } } Reinterpreting buffers Buffers can be reinterpreted as a type of the same size. The intention is to allow controlled type-punning and to get rid of the wrapper element types when they get in the way. To reinterpret, call Reinterpret<T> : DynamicBuffer<int> intBuffer = EntityManager.GetBuffer<MyBufferElement>(entity).Reinterpret<int>(); The reinterpreted buffer instance retains the safety handle of the original buffer, and is safe to use. Reinterpreted buffers reference original data, so modifications to one reinterpreted buffer are immediately reflected in others. Note: The reinterpret function only enforces that the types involved have the same length. For example, you can alias a uint and float buffer without raising an error because both types are 32-bits long. You must make sure that the reinterpretation makes sense logically. Buffer reference invalidation Every structural change invalidates all references to dynamic buffers. Structural changes generally cause entities to move from one chunk to another. Small dynamic buffers can reference memory within a chunk (as opposed to from main memory) and therefore, they need to be reacquired after a structural change. var entity1 = EntityManager.CreateEntity(); var entity2 = EntityManager.CreateEntity(); DynamicBuffer<MyBufferElement> buffer1 = EntityManager.AddBuffer<MyBufferElement>(entity1); // This line causes a structural change and invalidates // the previously acquired dynamic buffer DynamicBuffer<MyBufferElement> buffer2 = EntityManager.AddBuffer<MyBufferElement>(entity1); // This line will cause an error: buffer1.Add(17);"
  },
  "manual/ecs_building_projects.html": {
    "href": "manual/ecs_building_projects.html",
    "title": "Building your project | Entities | 0.17.0-preview.18",
    "keywords": "Building your project Synopsis: Cover any unique aspects for building ECS projects, including any cross-platform details."
  },
  "manual/ecs_burst.html": {
    "href": "manual/ecs_burst.html",
    "title": "Using Burst | Entities | 0.17.0-preview.18",
    "keywords": "Using Burst Synopsis: Cover how, when, and why to use the Burst compiler with ECS. Everything burst -elated within ECS should go here."
  },
  "manual/ecs_chunk_component.html": {
    "href": "manual/ecs_chunk_component.html",
    "title": "Chunk component data | Entities | 0.17.0-preview.18",
    "keywords": "Chunk component data Use chunk components to associate data with a specific chunk . Chunk components contain data that applies to all entities in a specific chunk. For example, if you have chunks of entities that represent 3D objects that are organized by proximity, you can use a chunk component to store a collective bounding box for them. chunk components use the interface type IComponentData . Add and set the values of a chunk component Although chunk components can have values unique to an individual chunk, they are still part of the archetype of the entities in the chunk. Therefore, if you remove a chunk component from an entity, ECS moves that entity to a different chunk (possibly a new one). Likewise, if you add a chunk component to an entity, ECS moves that entity to a different chunk because its archetype changes; the addition of the chunk component does not affect the remaining entities in the original chunk. If you use an entity in a chunk to change the value of a chunk component, it changes the value of the chunk component that is common to all the entities in that chunk. If you change the archetype of an entity so that it moves into a new chunk that has the same type of chunk component, then the existing value in the destination chunk is unaffected. Note If the entity is moved to a newly created chunk, then ECS creates a new chunk component for that chunk and assigns its default value. The main differences between working with chunk components and general-purpose components is that you use different functions to add, set, and remove them. Relevant APIs Purpose Function Declaration IComponentData ArchetypeChunk methods Read GetChunkComponentData<T>(ArchetypeChunkComponentType<T>) Check HasChunkComponent<T>(ArchetypeChunkComponentType<T>) Write SetChunkComponentData<T>(ArchetypeChunkComponentType<T>, T) EntityManager methods Create AddChunkComponentData<T>(Entity) Create AddChunkComponentData<T>(EntityQuery, T) Create AddComponents(Entity,ComponentTypes) Get type info GetComponentTypeHandle Read GetChunkComponentData<T>(ArchetypeChunk) Read GetChunkComponentData<T>(Entity) Check HasChunkComponent<T>(Entity) Delete RemoveChunkComponent<T>(Entity) Delete RemoveChunkComponentData<T>(EntityQuery) Write EntityManager.SetChunkComponentData<T>(ArchetypeChunk, T) Declaring a chunk component Chunk components use the interface type IComponentData . public struct ChunkComponentA : IComponentData { public float Value; } Creating a chunk component To add a chunk component directly, use an entity in the target chunk, or use an entity query that selects a group of target chunks. You cannot add chunk components inside a job, nor can they be added with an EntityCommandBuffer . You can also include chunk components as part of the EntityArchetype or list of [ComponentType] objects that ECS uses to create entities. ECS creates the chunk components for each chunk and stores entities with that archetype. Use ComponentType.ChunkComponent<T> or [ComponentType.ChunkComponentReadOnly<T>] with these methods. Otherwise, ECS treats the component as a general-purpose component instead of a chunk component. With an entity in a chunk Given an entity in the target chunk, you can use the EntityManager.AddChunkComponentData<T>() function to add a chunk component to the chunk: EntityManager.AddChunkComponentData<ChunkComponentA>(entity); When you use this method, you cannot immediately set a value for the chunk component. With an EntityQuery Given an entity query that selects all the chunks that you want to add a chunk component to, you can use the EntityManager.AddChunkComponentData<T>() function to add and set the component: EntityQueryDesc ChunksWithoutComponentADesc = new EntityQueryDesc() { None = new ComponentType[]{ ComponentType.ChunkComponent<ChunkComponentA>() } }; EntityQuery ChunksWithoutChunkComponentA = GetEntityQuery(ChunksWithoutComponentADesc); EntityManager.AddChunkComponentData<ChunkComponentA>( ChunksWithoutChunkComponentA, new ChunkComponentA() { Value = 4 }); When you use this method, you can set the same initial value for all of the new chunk components. With an EntityArchetype When you create entities with an archetype or a list of component types, include the chunk component types in the archetype: EntityArchetype ArchetypeWithChunkComponent = EntityManager.CreateArchetype( ComponentType.ChunkComponent(typeof(ChunkComponentA)), ComponentType.ReadWrite<GeneralPurposeComponentA>()); Entity newEntity = EntityManager.CreateEntity(ArchetypeWithChunkComponent); or list of component types: ComponentType[] compTypes = { ComponentType.ChunkComponent<ChunkComponentA>(), ComponentType.ReadOnly<GeneralPurposeComponentA>() }; Entity entity = EntityManager.CreateEntity(compTypes); When you use these methods, the chunk components for new chunks that ECS creates as part of entity construction receive the default struct value. ECS does not change chunk components in existing chunks. See Updating a chunk component for how to set the chunk component value given a reference to an entity. Reading a chunk component To read a chunk component, you can use the ArchetypeChunk object that represents the chunk, or use an entity in the target chunk. With the ArchetypeChunk instance Given a chunk, you can use the EntityManager.GetChunkComponentData<T> function to read its chunk component. The following code iterates over all of the chunks that match a query and accesses a chunk component of type ChunkComponentA : NativeArray<ArchetypeChunk> chunks = ChunksWithChunkComponentA.CreateArchetypeChunkArray( Allocator.TempJob); foreach (var chunk in chunks) { var compValue = EntityManager.GetChunkComponentData<ChunkComponentA>(chunk); //.. } chunks.Dispose(); With an entity in a chunk Given an entity, you can access a chunk component in the chunk that contains the entity with EntityManager.GetChunkComponentData<T> : if (EntityManager.HasChunkComponent<ChunkComponentA>(entity)) { ChunkComponentA chunkComponentValue = EntityManager.GetChunkComponentData<ChunkComponentA>(entity); } Updating a chunk component You can update a chunk component given a reference to the chunk it belongs to. In an IJobChunk job, you can call ArchetypeChunk.SetChunkComponentData . On the main thread, you can use the EntityManager version: EntityManager.SetChunkComponentData . Note You cannot access chunk components using SystemBase Entities.ForEach because you do not have access to the ArchetypeChunk object or the EntityManager. With the ArchetypeChunk instance To update a chunk component in a job, see Reading and writing in a system . To update a chunk component on the main thread, use the EntityManager: EntityManager.SetChunkComponentData<ChunkComponentA>( chunk, new ChunkComponentA() { Value = 7 }); With an Entity instance If you have an entity in the chunk rather than the chunk reference itself, you can also use the EntityManger to get the chunk that contains the entity: Note If you only want to read a chunk component and not write to it, you should use ComponentType.ChunkComponentReadOnly when you define the entity query to avoid creating unnecessary job scheduling constraints. Deleting a chunk component Use the EntityManager.RemoveChunkComponent functions to delete a chunk component. You can remove a chunk component given an entity in the target chunk or you can remove all of the chunk components of a given type from all chunks an entity query selects. If you remove a chunk component from an individual entity, that entity moves to a different chunk because the archetype of the entity changes. The chunk keeps the unchanged chunk component as long as there are other entities that remain in the chunk. Using a chunk component in a query To use a chunk component in an entity query, you must use either the ComponentType.ChunkComponent<T> or [ComponentType.ChunkComponentReadOnly<T>] functions to specify the type. Otherwise, ECS treats the component as a general-purpose component instead of a Chunk component. In an EntityQueryDesc You can use the following query description to create an entity query that selects all chunks, and entities in those chunks, that have a chunk component of type, ChunkComponentA : EntityQueryDesc ChunksWithChunkComponentADesc = new EntityQueryDesc() { All = new ComponentType[] { ComponentType.ChunkComponent<ChunkComponentA>() } }; Iterating over chunks to set chunk components To iterate over all chunks for which you want to set a chunk component, you can create an entity query that selects the correct chunks and then use the EntityQuery object to get a list of the ArchetypeChunk instances as a native array. The ArchetypeChunk object allows you to write a new value to the chunk component. public class ChunkComponentExamples : SystemBase { private EntityQuery ChunksWithChunkComponentA; protected override void OnCreate() { EntityQueryDesc ChunksWithComponentADesc = new EntityQueryDesc() { All = new ComponentType[] { ComponentType.ChunkComponent<ChunkComponentA>() } }; ChunksWithChunkComponentA = GetEntityQuery(ChunksWithComponentADesc); } [BurstCompile] struct ChunkComponentCheckerJob : IJobEntityBatch { public ComponentTypeHandle<ChunkComponentA> ChunkComponentATypeHandle; public void Execute(ArchetypeChunk batchInChunk, int batchIndex) { var compValue = batchInChunk.GetChunkComponentData(ChunkComponentATypeHandle); //... var squared = compValue.Value * compValue.Value; batchInChunk.SetChunkComponentData(ChunkComponentATypeHandle, new ChunkComponentA() { Value = squared }); } } protected override void OnUpdate() { var job = new ChunkComponentCheckerJob() { ChunkComponentATypeHandle = GetComponentTypeHandle<ChunkComponentA>() }; this.Dependency = job.ScheduleParallel(ChunksWithChunkComponentA, 1, this.Dependency); } } Note that if you need to read the components in a chunk to determine the proper value of a chunk component, you should use IJobEntityBatch . For example, the following code calculates the axis-aligned bounding box for all chunks containing entities that have LocalToWorld components: public struct ChunkAABB : IComponentData { public AABB Value; } [UpdateInGroup(typeof(PresentationSystemGroup))] [UpdateBefore(typeof(UpdateAABBSystem))] public class AddAABBSystem : SystemBase { EntityQuery queryWithoutChunkComponent; protected override void OnCreate() { queryWithoutChunkComponent = GetEntityQuery(new EntityQueryDesc() { All = new ComponentType[] { ComponentType.ReadOnly<LocalToWorld>() }, None = new ComponentType[]{ ComponentType.ChunkComponent<ChunkAABB>() } }); } protected override void OnUpdate() { // This is a structural change and a sync point EntityManager.AddChunkComponentData<ChunkAABB>( queryWithoutChunkComponent, new ChunkAABB() ); } } [UpdateInGroup(typeof(PresentationSystemGroup))] public class UpdateAABBSystem : SystemBase { EntityQuery queryWithChunkComponent; protected override void OnCreate() { queryWithChunkComponent = GetEntityQuery(new EntityQueryDesc() { All = new ComponentType[] { ComponentType.ReadOnly<LocalToWorld>(), ComponentType.ChunkComponent<ChunkAABB>() } }); } [BurstCompile] struct AABBJob : IJobEntityBatch { [ReadOnly] public ComponentTypeHandle<LocalToWorld> LocalToWorldTypeHandleInfo; public ComponentTypeHandle<ChunkAABB> ChunkAabbTypeHandleInfo; public uint L2WChangeVersion; public void Execute(ArchetypeChunk batchInChunk, int batchIndex) { bool chunkHasChanges = batchInChunk.DidChange(LocalToWorldTypeHandleInfo, L2WChangeVersion); if (!chunkHasChanges) return; // early out if the chunk transforms haven't changed NativeArray<LocalToWorld> transforms = batchInChunk.GetNativeArray<LocalToWorld>(LocalToWorldTypeHandleInfo); UnityEngine.Bounds bounds = new UnityEngine.Bounds(); bounds.center = transforms[0].Position; for (int i = 1; i < transforms.Length; i++) { bounds.Encapsulate(transforms[i].Position); } batchInChunk.SetChunkComponentData( ChunkAabbTypeHandleInfo, new ChunkAABB() { Value = bounds.ToAABB() }); } } protected override void OnUpdate() { var job = new AABBJob() { LocalToWorldTypeHandleInfo = GetComponentTypeHandle<LocalToWorld>(true), ChunkAabbTypeHandleInfo = GetComponentTypeHandle<ChunkAABB>(false), L2WChangeVersion = this.LastSystemVersion }; this.Dependency = job.ScheduleParallel(queryWithChunkComponent, 1, this.Dependency); } }"
  },
  "manual/ecs_components.html": {
    "href": "manual/ecs_components.html",
    "title": "Components | Entities | 0.17.0-preview.18",
    "keywords": "Components Components are one of the three principle elements of an Entity Component System architecture. They represent the data of your game or application. Entities are identifiers that index your collections of components, while [systems] provide the behavior. A component in ECS is a struct that has one of the following \"marker interfaces\": IComponentData — Use for general purpose and [chunk components]. IBufferElementData — Associates [dynamic buffers] with an entity. ISharedComponentData — Categorizes or groups entities by value within an archetype. For more information, see [Shared Component Data]. Hybrid Components — A way of adding UnityEngine components to entities. ISystemStateComponentData — Associates a system-specific state with an entity and detects when individual entities are created or destroyed. For more information, see System State Components . ISharedSystemStateComponentData — a combination of shared and system state data. See System State Components . Blob assets – While not technically a \"component,\" you can use blob assets to store data. Blob assets can be referenced by one or more components using a BlobAssetReference and are immutable. You can use blob assets to share data between assets and access that data in C# jobs. The EntityManager organizes unique combinations of components into archetypes . It stores the components of all entities with the same archetype together in blocks of memory called chunks . The entities in a given chunk all have the same component archetype. This diagram illustrates how ECS stores component data chunks by their archetypes. Shared components and chunk components are exceptions because ECS stores them outside of the chunk. A single instance of these component types apply to all of the entities in the applicable chunks. Additionally, you can optionally store dynamic buffers outside of the chunk. Even though ECS does not store these types of components inside of the chunk, you can generally treat them the same as other component types when querying for entities."
  },
  "manual/ecs_core.html": {
    "href": "manual/ecs_core.html",
    "title": "ECS concepts | Entities | 0.17.0-preview.18",
    "keywords": "ECS concepts An Entity Component System (ECS) architecture separates identity ( entities ), data ( components ), and behavior ( systems ). The architecture focuses on the data. Systems read streams of component data, and then transform the data from an input state to an output state, which entities then index. The following diagram illustrates how these three basic parts work together: In this diagram, a system reads Translation and Rotation components, multiplies them and then updates the corresponding LocalToWorld components ( L2W = T*R ). The fact that entities A and B have a Renderer component and entity C does not, doesn't affect the system, because the system does not care about Renderer components. You can set up a system so that it requires a Renderer component, in which case, the system ignores the components of entity C; or, alternately, you can set up a system to exclude entities with Renderer components, which then ignores the components of entities A and B. Archetypes A unique combination of component types is called an EntityArchetype . For example, a 3D object might have a component for its world transform, one for its linear movement, one for rotation, and one for its visual representation. Each instance of one of these 3D objects corresponds to a single entity, but because they share the same set of components, ECS classifies them as a single archetype: In this diagram, entities A and B share archetype M, while entity C has archetype N. To smoothly change the archetype of an entity, you can add or remove components at runtime. For example, if you remove the Renderer component from entity B, it then moves to archetype N. Memory Chunks The archetype of an entity determines where ECS stores the components of that entity. ECS allocates memory in \"chunks\", each represented by an ArchetypeChunk object. A chunk always contains entities of a single archetype. When a chunk of memory becomes full, ECS allocates a new chunk of memory for any new entities created with the same archetype. If you add or remove components, which then changes an entity archetype, ECS moves the components for that entity to a different chunk. This organizational scheme provides a one-to-many relationship between archetypes and chunks. It also means that finding all the entities with a given set of components only requires searching through the existing archetypes, which are typically small in number, rather than all of the entities, which are typically much larger in number. ECS does not store the entities that are in a chunk in a specific order. When an entity is created or changed to a new archetype, ECS puts it into the first chunk that stores the archetype, and that has space. Chunks remain tightly packed, however; when an entity is removed from an archetype, ECS moves the components of the last entity in the chunk into the newly vacated slots in the component arrays. Note The values of shared components in an archetype also determine which entities are stored in which chunk. All of the entities in a given chunk have the exact same values for any shared components. If you change the value of any field in a shared component, the modified entity moves to a different chunk, just as it would if you changed that entity's archetype. A new chunk is allocated, if necessary. Use shared components to group entities within an archetype when it is more efficient to process them together. For example, the Hybrid Renderer defines its RenderMesh component to achieve this. Entity queries To identify which entities a system should process, use an EntityQuery . An entity query searches the existing archetypes for those that have the components that match your requirements. You can specify the following component requirements with a query: All — the archetype must contain all of the component types in the All category. Any — the archetype must contain at least one of the component types in the Any category. None — the archetype must not contain any of the component types in the None category. An entity query provides a list of the chunks that contain the types of components the query requires. You can then iterate over the components in those chunks directly with IJobEntityBatch . Jobs To take advantage of multiple threads, you can use the C# Job system . ECS provides the SystemBase class, along with the Entities.ForEach and IJobEntityBatch Schedule() and ScheduleParallel() methods, to transform data outside the main thread. Entities.ForEach is the simplest to use and typically requires fewer lines of code to implement. You can use IJobChunk for more complex situations that Entities.ForEach does not handle. ECS schedules jobs on the main thread in the order that your systems are arranged . As jobs are scheduled, ECS keeps track of which jobs read and write which components. A job that reads a component is dependent on any prior scheduled job that writes to the same component and vice versa. The job scheduler uses job dependencies to determine which jobs it can run in parallel and which must run in sequence. System organization ECS organizes systems by World and then by group . By default, ECS creates a default World with a predefined set of groups. It finds all available systems, instantiates them, and adds them to the predefined simulation group in the default World. You can specify the update order of systems within the same group. A group is a kind of system, so you can add a group to another group and specify its order just like any other system. All systems within a group update before the next system or group. If you do not specify an order, ECS inserts systems into the update order in a deterministic way that does not depend on creation order. In other words, the same set of systems always updates in the same order within their group even when you don't explicitly specify an order. System updates happen on the main thread. However, systems can use jobs to offload work to other threads. SystemBase provide a straightforward way to create and schedule Jobs. For more information about system creation, update order, and the attributes you can use to organize your systems, see the documentation on System Update Order . ECS authoring When you create your game or application in the Unity Editor, you can use GameObjects and MonoBehaviours to create a conversion system to map those UnityEngine objects and components to entities. For more information, see Creating Gameplay ."
  },
  "manual/ecs_creating_systems.html": {
    "href": "manual/ecs_creating_systems.html",
    "title": "Creating a system | Entities | 0.17.0-preview.18",
    "keywords": "Creating a system Implement the abstract class SystemBase to create an ECS system. To create a system, you program the necessary system event callbacks. Use the SystemBase OnUpdate() function to perform the work your system must do every frame. The other callback functions are optional; for example, you can use OnCreate() to initialize a system, but not every system requires initialization code. The system callback functions are invoked in the following order: OnCreate() -- called when the system is created. OnStartRunning() -- before the first OnUpdate() and whenever the system resumes running. OnUpdate() -- every frame as long as the system has work to do (see ShouldRunSystem() ) and the system is Enabled . OnStopRunning() -- whenever the system stops updating, which can be because you set Enabled to false or because it finds no entities matching its queries. Also called before OnDestroy() . OnDestroy() -- when the system is destroyed. A system's OnUpdate() function is triggered by its parent system group's own OnUpdate() function. Likewise, when a group changes state, for example if you set the group's Enabled property, it changes the state of its child systems. However, children can also change state independently from their parent groups. See System update order for more information. All the system events run on the main thread. Ideally, your OnUpdate() function schedules jobs to perform most of the work. To schedule a job from a system, you can use one of the following mechanisms: Entities.ForEach -- the simplest way to iterate over ECS component data. Job.WithCode -- execute a lambda function as a single, background job. IJobEntityBatch -- a \"lower level\" mechanism for iterating over ECS component data chunk-by-chunk. C# Job System -- create and schedule general purpose C# jobs. The following example illustrates using Entities.ForEach to implement a system that updates one component based on the value of another: public struct Position : IComponentData { public float3 Value; } public struct Velocity : IComponentData { public float3 Value; } public class ECSSystem : SystemBase { protected override void OnUpdate() { // Local variable captured in ForEach float dT = Time.DeltaTime; Entities .WithName(\"Update_Displacement\") .ForEach( (ref Position position, in Velocity velocity) => { position = new Position() { Value = position.Value + velocity.Value * dT }; } ) .ScheduleParallel(); } }"
  },
  "manual/ecs_debugging.html": {
    "href": "manual/ecs_debugging.html",
    "title": "Debugging ECS | Entities | 0.17.0-preview.18",
    "keywords": "Debugging ECS In addition to \"traditional\" debugging using breakpoints, Unity provides the following tools for debugging DOTS code: Entity Debugger window Burst Inspector DOTS Decompiler Entity Inspectors Livelink Profiler Entity Debugger The Entity Debugger allows you to visualize your entities, systems, and components Open the entity Debugger window using the menu: Window > Analysis > Entity Debugger. Systems list The Systems list shows the systems in your project and how much time a system takes to run each frame. You can turn systems on and off from the list using the checkbox provided for each system. Use the System Display control drop down at the top of the list to control what to display in the System list. The System Display control contains: Worlds — Choose the World containing the entities and systems to display. By default, an Editor World exists when not in play mode and a Default World exists in play mode. Show Full Player Loop option — Choose to display the systems of all Worlds and show all of the Unity execution phases (not just those containing systems). Show Inactive Systems option — Choose to show systems that are not currently running in addition to the running systems. Select a system to view its details. Note If you select the EntityManager entry in the System list, then you have different options on the System details section. System details The System details section shows the groups of components that a System operates on and the list of entities associated with those component groups. Each component group shows the components in the group along with the number of entities associated with it. Select a component group to view information about the Chunks containing the data for the components in the group. When you select the EntityManager entry in the system list, the details section shows all of the entities in the displayed World. When you display a World (rather than the full player loop), you can also filter the list of entities by component To filter the Entity list: Select a World in the System Display control. Select the EntityManager for that World. At the top of the System details section, click Edit . In the Choose Component window, check the components whose entities you want to view. Chunk information The Chunk information section shows the Chunks containing data for the components and entities selected in the details section. Inspecting an Entity Select an entity in the Entity Debugger to view its data in the Unity Inspector window."
  },
  "manual/ecs_entities.html": {
    "href": "manual/ecs_entities.html",
    "title": "Entities | Entities | 0.17.0-preview.18",
    "keywords": "Entities Entities are one of the three principal elements of an Entity Component System architecture. They represent the individual \"things\" in your game or application. An entity has neither behavior nor data; instead, it identifies which pieces of data belong together. Systems provide the behavior, and components store the data. An entity is essentially an ID. The easiest way to think of it is as a lightweight GameObject that does not even have a name by default. Entity IDs are stable; you can use them to store a reference to another component or entity. For example, a child entity in a hierarchy might need to reference its parent entity. An EntityManager manages all of the entities in a World . An EntityManager maintains the list of entities and organizes the data associated with an entity for optimal performance. Although an entity does not have a type, groups of entities can be categorized by the types of data components associated with them. As you create entities and add components to them, the EntityManager keeps track of the unique combinations of components on the existing entities. Such a unique combination is called an Archetype . The EntityManager creates an EntityArchetype struct as you add components to an entity. You can use existing EntityArchetype s to create new entities that conform to that archetype. You can also create an EntityArchetype in advance and use that to create entities. Creating entities The easiest way to create an entity is in the Unity Editor. You can set ECS to convert both GameObjects placed in a Scene and Prefabs into entities at runtime. For more dynamic parts of your game or application, you can create spawning systems that create multiple entities in a job. Finally, you can use one of the EntityManager.CreateEntity functions to create entities one at a time. Creating entities with the EntityManager is typically the least efficient method. Creating entities with an EntityManager Use one of the EntityManager.CreateEntity functions to create an entity. ECS creates the entity in the same World as the EntityManager. You can create entities one-by-one in the following ways: Create an entity with components that use an array of ComponentType objects. Create an entity with components that use an EntityArchetype . Copy an existing entity, including its current data, with Instantiate Create an entity with no components and then add components to it. (You can add components immediately or when additional components are needed.) You can also create multiple entities at a time: Fill a NativeArray with new entities with the same archetype using CreateEntity . Fill a NativeArray with copies of an existing entity, including its current data, using Instantiate . Adding and removing components After an entity has been created, you can add or remove components. When you do this, the archetype of the affected entities change and the EntityManager must move altered data to a new chunk of memory, as well as condense the component arrays in the original chunks. Changes to an entity that cause structural changes — that is, adding or removing components that change the values of SharedComponentData , and destroying the entity — cannot be done inside a job because these could invalidate the data that the job is working on. Instead, you add the commands to make these types of changes to an EntityCommandBuffer and execute this command buffer after the job is complete. The EntityManager provides functions to remove a component from a single entity as well as all of the entities in a NativeArray. For more information, see the documentation on Components . Iterating entities Iterating over all entities that have a matching set of components, is at the center of the ECS architecture. See Accessing entity data ."
  },
  "manual/ecs_entities_foreach.html": {
    "href": "manual/ecs_entities_foreach.html",
    "title": "Using Entities.ForEach | Entities | 0.17.0-preview.18",
    "keywords": "Using Entities.ForEach Use the Entities.ForEach construction provided by the SystemBase class as a concise way to define and execute your algorithms over entities and their components. Entities.ForEach executes a lambda function you define over all the entities selected by an entity query . To execute a job lambda function, you either schedule the job using Schedule() and ScheduleParallel() , or execute it immediately (on the main thread) with Run() . You can use additional methods defined on Entities.ForEach to set the entity query as well as various job options. The following example illustrates a simple SystemBase implementation that uses Entities.ForEach to read one component (Velocity in this case) and write to another (Translation): class ApplyVelocitySystem : SystemBase { protected override void OnUpdate() { Entities .ForEach((ref Translation translation, in Velocity velocity) => { translation.Value += velocity.Value; }) .Schedule(); } } Note the use of the keywords ref and in on the parameters of the ForEach lambda function. Use ref for components that you write to, and in for components that you only read. Marking components as read-only helps the job scheduler execute your jobs more efficiently. Selecting entities Entities.ForEach provides its own mechanism for defining the entity query used to select the entities to process. The query automatically includes any components you use as parameters of your lambda function. You can also use the WithAll , WithAny , and WithNone clauses to further refine which entities are selected. See SystemBase.Entities for the complete list of query options. The following example selects entities that have the components, Destination, Source, and LocalToWorld; and have at least one of the components, Rotation, Translation, or Scale; but which do not have a LocalToParent component. Entities.WithAll<LocalToWorld>() .WithAny<Rotation, Translation, Scale>() .WithNone<LocalToParent>() .ForEach((ref Destination outputData, in Source inputData) => { /* do some work */ }) .Schedule(); In this example, only the Destination and Source components can be accessed inside the lambda function since they are the only components in the parameter list. Accessing the EntityQuery object To access the EntityQuery object that Entities.ForEach creates, use [WithStoreEntityQueryInField(ref query)] with the ref parameter modifier. This function assigns a reference to the query to the field you provide. Note The EntityQuery is created in OnCreate. This method gives a copy of that query that can be used at any time (even before the Entities.ForEach is invoked). Also, this EntityQuery does not have any of the filters that the Entities.ForEach invocation sets up. The following example illustrates how to access the EntityQuery object implicitly created for an Entities.ForEach construction. In this case, the example uses the EntityQuery object to invoke the CalculateEntityCount() method. The example uses this count to create a native array with enough space to store one value per entity selected by the query: private EntityQuery query; protected override void OnUpdate() { int dataCount = query.CalculateEntityCount(); NativeArray<float> dataSquared = new NativeArray<float>(dataCount, Allocator.Temp); Entities .WithStoreEntityQueryInField(ref query) .ForEach((int entityInQueryIndex, in Data data) => { dataSquared[entityInQueryIndex] = data.Value * data.Value; }) .ScheduleParallel(); Job .WithCode(() => { //Use dataSquared array... var v = dataSquared[dataSquared.Length - 1]; }) .WithDisposeOnCompletion(dataSquared) .Schedule(); } Optional components You cannot create a query specifying optional components (using WithAny<T,U>) and also access those components in the lambda function. If you need to read or write to a component that is optional, you can split the Entities.ForEach construction into multiple jobs, one for each combination of the optional components. For example, if you had two optional components, you would need three ForEach constructions: one including the first optional component, one including the second, and one including both components. Another alternative is to iterate by chunk using IJobChunk. Change filtering In cases where you only want to process an entity component when another entity of that component has changed since the last time the current SystemBase instance has run, you can enable change filtering using WithChangeFilter<T>. The component type used in the change filter must either be in the lambda function parameter list or part of a WithAll<T> statement. Entities .WithChangeFilter<Source>() .ForEach((ref Destination outputData, in Source inputData) => { /* Do work */ }) .ScheduleParallel(); An entity query supports change filtering on up to two component types. Note that change filtering is applied at the chunk level. If any code accesses a component in a chunk with write access, then that component type in that chunk is marked as changed -- even if the code didn’t actually change any data. Shared component filtering Entities with shared components are grouped into chunks with other entities having the same value for their shared components. You can select groups of entities that have specific shared component values using the WithSharedComponentFilter() function. The following example selects entities grouped by a Cohort ISharedComponentData. The lambda function in this example sets a DisplayColor IComponentData component based on the entity’s cohort: public class ColorCycleJob : SystemBase { protected override void OnUpdate() { List<Cohort> cohorts = new List<Cohort>(); EntityManager.GetAllUniqueSharedComponentData<Cohort>(cohorts); foreach (Cohort cohort in cohorts) { DisplayColor newColor = ColorTable.GetNextColor(cohort.Value); Entities.WithSharedComponentFilter(cohort) .ForEach((ref DisplayColor color) => { color = newColor; }) .ScheduleParallel(); } } } The example uses the EntityManager to get all the unique cohort values. It then schedules a lambda job for each cohort, passing the new color to the lambda function as a captured variable. Defining the ForEach function When you define the lambda function to use with Entities.ForEach , you can declare parameters that the SystemBase class uses to pass in information about the current entity when it executes the function. A typical lambda function looks like: Entities.ForEach( (Entity entity, int entityInQueryIndex, ref Translation translation, in Movement move) => { /* .. */}) By default, you can pass up to eight parameters to an Entities.ForEach lambda function. (If you need to pass more parameters, you can define a custom delegate .) When using the standard delegates, you must group the parameters in the following order: 1. Parameters passed-by-value first (no parameter modifiers) 2. Writable parameters second (`ref` parameter modifier) 3. Read-only parameters last (`in` parameter modifier) All components should use either the ref or the in parameter modifier keywords. Otherwise, the component struct passed to your function is a copy instead of a reference. This means an extra memory copy for read-only parameters and means that any changes to components you intended to update are silently thrown when the copied struct goes out of scope after the function returns. If your function does not obey these rules and you have not created a suitable delegate, the compiler provides an error similar to: error CS1593: Delegate 'Invalid_ForEach_Signature_See_ForEach_Documentation_For_Rules_And_Restrictions' does not take N arguments (Note that the error message cites the number of arguments as the issue even when the problem is the parameter order.) Custom delegates You can use more than 8 arguments in a ForEach lambda function. by declaring your own delegate type and ForEach overload. This allows you to use as many arguments as you want and to put the ref/in/value parameters in any order you want. You can declare the three special, named parameters entity , entityInQueryIndex , and nativeThreadIndex anywhere in your parameter list. Do not use ref or in modifiers for these parameters. static class BringYourOwnDelegate { // Declare the delegate that takes 12 parameters. T0 is used for the Entity argument [Unity.Entities.CodeGeneratedJobForEach.EntitiesForEachCompatible] public delegate void CustomForEachDelegate<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> (T0 t0, in T1 t1, in T2 t2, in T3 t3, in T4 t4, in T5 t5, in T6 t6, in T7 t7, in T8 t8, in T9 t9, in T10 t10, in T11 t11); // Declare the function overload public static TDescription ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> (this TDescription description, CustomForEachDelegate<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> codeToRun) where TDescription : struct, Unity.Entities.CodeGeneratedJobForEach.ISupportForEachWithUniversalDelegate => LambdaForEachDescriptionConstructionMethods.ThrowCodeGenException<TDescription>(); } // A system that uses the custom delegate and overload public class MayParamsSystem : SystemBase { protected override void OnUpdate() { Entities.ForEach( (Entity entity0, in Data1 d1, in Data2 d2, in Data3 d3, in Data4 d4, in Data5 d5, in Data6 d6, in Data7 d7, in Data8 d8, in Data9 d9, in Data10 d10, in Data11 d11 ) => {/* .. */}) .Run(); } } Note The default limit of eight arguments for a ForEach lambda function was chosen because declaring too many delegates and overloads has a negative effect on IDE performance. A unique delegate type and ForEach overload is required for each combination of ref/in/value and number of arguments. Component parameters To access a component associated with an entity, you must pass a parameter of that component type to the lambda function. The compiler automatically adds all components passed to the function to the entity query as required components. To update a component value, you must pass it to the lambda function by reference using the ref keyword in the parameter list. (Without the ref keyword, any modifications would be made to a temporary copy of the component since it would be passed by value.) To designate a component passed to the lambda function as read-only, use the in keyword in the parameter list. Note Using ref means that the components in the current chunk are marked as changed, even if the lambda function does not actually modify them. For efficiency, always designate components that your lambda function does not modify as read only using the in keyword. The following example passes a Source component parameter to the job as read-only, and a Destination component parameter as writable: Entities.ForEach( (ref Destination outputData, in Source inputData) => { outputData.Value = inputData.Value; }) .ScheduleParallel(); Note Currently, you cannot pass chunk components to the Entities.ForEach lambda function. For dynamic buffers, use DynamicBuffer<T> rather than the Component type stored in the buffer: public class BufferSum : SystemBase { private EntityQuery query; //Schedules the two jobs with a dependency between them protected override void OnUpdate() { //The query variable can be accessed here because we are //using WithStoreEntityQueryInField(query) in the entities.ForEach below int entitiesInQuery = query.CalculateEntityCount(); //Create a native array to hold the intermediate sums //(one element per entity) NativeArray<int> intermediateSums = new NativeArray<int>(entitiesInQuery, Allocator.TempJob); //Schedule the first job to add all the buffer elements Entities .ForEach((int entityInQueryIndex, in DynamicBuffer<IntBufferData> buffer) => { for (int i = 0; i < buffer.Length; i++) { intermediateSums[entityInQueryIndex] += buffer[i].Value; } }) .WithStoreEntityQueryInField(ref query) .WithName(\"IntermediateSums\") .ScheduleParallel(); // Execute in parallel for each chunk of entities //Schedule the second job, which depends on the first Job .WithCode(() => { int result = 0; for (int i = 0; i < intermediateSums.Length; i++) { result += intermediateSums[i]; } //Not burst compatible: Debug.Log(\"Final sum is \" + result); }) .WithDisposeOnCompletion(intermediateSums) .WithoutBurst() .WithName(\"FinalSum\") .Schedule(); // Execute on a single, background thread } } Special, named parameters In addition to components, you can pass the following special, named parameters to the Entities.ForEach lambda function, which are assigned values based on the entity the job is currently processing: Entity entity — the Entity instance of the current entity. (The parameter can be named anything as long as the type is Entity.) int entityInQueryIndex — the index of the entity in the list of all entities selected by the query. Use the entity index value when you have a native array that you need to fill with a unique value for each entity. You can use the entityInQueryIndex as the index in that array. The entityInQueryIndex should also be used as the sortKey for adding commands to a concurrent EntityCommandBuffer . int nativeThreadIndex — a unique index for the thread executing the current iteration of the lambda function. When you execute the lambda function using Run(), nativeThreadIndex is always zero. (Do not use nativeThreadIndex as the sortKey of a concurrent EntityCommandBuffer ; use entityInQueryIndex instead.) Capturing variables You can capture local variables for Entities.ForEach lambda functions. When you execute the function using a job (by calling one of the Schedule functions instead of Run) there are some restrictions on the captured variables and how you use them: Only native containers and blittable types can be captured. A job can only write to captured variables that are native containers. (To “return” a single value, create a native array with one element.) If you read a [native container], but don't write to it, always specify read-only access using WithReadOnly(variable) . See SystemBase.Entities for more information about setting attributes for captured variables. The attributes you can specify include NativeDisableParallelForRestriction and others. Entities.ForEach provides these as functions because the C# language doesn't allow attibutes on local variables. You can also indicate that you want captured NativeContainers or types that contain NativeContainers to be Disposed of after your Entities.ForEach runs by using WithDisposeOnCompletion(variable) . This will either Dispose of the types immediately after the lambda runs (in the case of Run() ) or schedule them to be Diposed later with a Job and return the JobHandle (in the case of Schedule() / ScheduleParallel() ). Note When executing the function with Run() you can write to captured variables that are not native containers. However, you should still use blittable types where possible so that the function can be compiled with Burst . Supported Features You can execute the lambda function on the main thread using Run() , as a single job using Schedule() , or as a parallel job using ScheduleParallel() . These different execution methods have different constraints on how you access data. In addition, Burst uses a restricted subset of the C# language, so you need to specify WithoutBurst() when using C# features outside this subset (including accessing managed types). The following table shows which features are currently supported in Entities.ForEach for the different methods of scheduling available in SystemBase : Supported Feature Run Schedule ScheduleParallel Capture local value type x x x Capture local reference type x (only WithoutBurst) Writing to captured variables x Use field on the system class x (only WithoutBurst) Methods on reference types x (only WithoutBurst) Shared Components x (only WithoutBurst) Managed Components x (only WithoutBurst) Structural changes x (only WithoutBurst and WithStructuralChanges) SystemBase.GetComponent x x x SystemBase.SetComponent x x GetComponentDataFromEntity x x x (only as ReadOnly) HasComponent x x x WithDisposeOnCompletion x x x An Entities.ForEach construction uses specialized intermediate language (IL) compilation post-processing to translate the code you write for the construction into correct ECS code. This translation allows you to express the intent of your algorithm without having to include complex, boilerplate code. However, it can mean that some common ways of writing code are not allowed. The following features are not currently supported: Unsupported Feature Dynamic code in .With invocations SharedComponent parameters by ref Nested Entities.ForEach lambda expressions Entities.ForEach in systems marked with [ExecuteAlways] (currently being fixed) Calling with delegate stored in variable, field or by method SetComponent with lambda parameter type GetComponent with writable lambda parameter Generic parameters in lambdas In systems with generic parameters Dependencies By default, a system manages its ECS-related dependencies using its Dependency property. By default, the system adds each job created with Entities.ForEach and [Job.WithCode] to the Dependency job handle in the order that they appear in the OnUpdate() function. You can also manage job dependencies manually by passing a [JobHandle] to your Schedule functions, which then return the resulting dependency. See Dependency for more information. See Job dependencies for more general information about job dependencies."
  },
  "manual/ecs_entity_query.html": {
    "href": "manual/ecs_entity_query.html",
    "title": "Using an EntityQuery to query data | Entities | 0.17.0-preview.18",
    "keywords": "Using an EntityQuery to query data To read or write data, you must first find the data you want to change. The data in ECS is stored in components, which ECS groups together in memory according to the archetype of the entity to which they belong. You can use an EntityQuery to get a view of the ECS data that contains only the specific data you need for a given algorithm or process. You can use an EntityQuery to do the following: Run a job to process the entities and components selected Get a NativeArray that contains all of the selected entities Get NativeArrays of the selected components (by component type) The entity and component arrays an EntityQuery returns are guaranteed to be \"parallel\", that is, the same index value always applies to the same entity in any array. Note The SystemBase Entities.ForEach constructions create internal EntityQuery instances based on the component types and attributes you specify for these APIs. You cannot use a different EntityQuery object with Entities.ForEach , (though you can get the query object that an Entities.ForEach instance constructs and use it elsewhere). Defining a query An EntityQuery query defines the set of component types that an archetype must contain for ECS to include its chunks and entities in the view. You can also exclude archetypes that contain specific types of components. For simple queries, you can create an EntityQuery based on an array of component types. The following example defines an EntityQuery that finds all entities with both RotationQuaternion and RotationSpeed components. EntityQuery query = GetEntityQuery(typeof(RotationQuaternion), ComponentType.ReadOnly<RotationSpeed>()); The query uses ComponentType.ReadOnly<T> instead of the simpler typeof expression to designate that the system does not write to RotationSpeed. Always specify read only when possible, because there are fewer constraints on read access to data, which can help the job scheduler execute the jobs more efficiently. EntityQueryDesc For more complex queries, you can use an EntityQueryDesc object to create the EntityQuery . An EntityQueryDesc provides a flexible query mechanism to specify which archetypes to select based on the following sets of components: All : All component types in this array must exist in the archetype Any : At least one of the component types in this array must exist in the archetype None : None of the component types in this array can exist in the archetype For example, the following query includes archetypes that contain the RotationQuaternion and RotationSpeed components, but excludes any archetypes that contain the Frozen component: var queryDescription = new EntityQueryDesc { None = new ComponentType[] { typeof(Frozen) }, All = new ComponentType[]{ typeof(RotationQuaternion), ComponentType.ReadOnly<RotationSpeed>() } }; EntityQuery query = GetEntityQuery(queryDescription); Note Do not include optional components in the EntityQueryDesc . To handle optional components, use the ArchetypeChunk.Has method to determine whether a chunk contains the optional component or not. Because all entities within the same chunk have the same components, you only need to check whether an optional component exists once per chunk: not once per entity. Query options When you create an EntityQueryDesc , you can set its Options variable. The options allow for specialized queries (normally you do not need to set them): Default: No options set; the query behaves normally. IncludePrefab : Includes archetypes that contain the special Prefab tag component. IncludeDisabled : Includes archetypes that contain the special Disabled tag component. FilterWriteGroup : Considers the WriteGroup of any components in the query. When you set the FilterWriteGroup option, only entities with those components in a Write Group that are explicitly included in the query are included in the view. ECS excludes any entities that have any additional components from the same WriteGroup. In the following example, C2 and C3 are components in the same Write Group based on C1, and this query uses the FilterWriteGroup option that requires C1 and C3: public struct C1 : IComponentData { } [WriteGroup(typeof(C1))] public struct C2 : IComponentData { } [WriteGroup(typeof(C1))] public struct C3 : IComponentData { } public class ECSSystem : SystemBase { protected override void OnCreate() { var queryDescription = new EntityQueryDesc { All = new ComponentType[] { ComponentType.ReadWrite<C1>(), ComponentType.ReadOnly<C3>() }, Options = EntityQueryOptions.FilterWriteGroup }; var query = GetEntityQuery(queryDescription); } protected override void OnUpdate() { throw new NotImplementedException(); } } This query excludes any entities with both C2 and C3 because C2 is not explicitly included in the query. While you can use None to design this into the query, doing it through a Write Group provides an important benefit: you don't need to change the queries other systems use (as long as these systems also use Write Groups). Write Groups are a mechanism that you can use to extend existing systems. For example, if C1 and C2 are defined in another system (perhaps part of a library that you don't control), you can put C3 into the same Write Group as C2 to change how C1 is updated. For any entities which you add to the C3 component, the system updates C1 and the original system does not. For other entities without C3, the original system updates C1 as before. For more information, see Write Groups . Combining queries To combine multiple queries, you can pass an array of EntityQueryDesc objects rather than a single instance. You must use a logical OR operation to combine each query. The following example selects any archetypes that contain a RotationQuaternion component or a RotationSpeed component (or both): var desc1 = new EntityQueryDesc { All = new ComponentType[] { typeof(RotationQuaternion) } }; var desc2 = new EntityQueryDesc { All = new ComponentType[] { typeof(RotationSpeed) } }; EntityQuery query = GetEntityQuery(new EntityQueryDesc[] { desc1, desc2 }); Creating an EntityQuery Outside of a system class, you can create an EntityQuery with the EntityManager.CreateEntityQuery function as follows: EntityQuery query = entityManager.CreateEntityQuery(typeof(RotationQuaternion), ComponentType.ReadOnly<RotationSpeed>()); However, inside a system class, you get a query from the system rather than creating it from scratch. Systems cache any queries that your implementation creates and return the cached instance rather than creating a new one when possible. When your system uses Entities.ForEach , use WithStoreEntityQueryInField to get an instance of the query used by an Entities.ForEach construction: public class RotationSpeedSys : SystemBase { private EntityQuery query; protected override void OnUpdate() { float deltaTime = Time.DeltaTime; Entities .WithStoreEntityQueryInField(ref query) .ForEach( (ref RotationQuaternion rotation, in RotationSpeed speed) => { rotation.Value = math.mul( math.normalize(rotation.Value), quaternion.AxisAngle(math.up(), speed.RadiansPerSecond * deltaTime) ); }) .Schedule(); } } In other cases, such as when you need an instance of a query to schedule an IJobChunk job, use the GetEntityQuery function: public class RotationSystem : SystemBase { private EntityQuery query; protected override void OnCreate() { query = GetEntityQuery(typeof(RotationQuaternion), ComponentType.ReadOnly<RotationSpeed>()); } protected override void OnUpdate() { throw new NotImplementedException(); } } Note that filter settings are not considered when caching queries. In addition, if you set filters on a query, the same filters are set the next time you access that same query with GetEntityQuery . Use ResetFilter to clear any existing filters. Defining filters Filters exclude entities that otherwise would be included among those returned by a query based on the following: Shared component filter : Filter the set of entities based on specific values of a shared component. Change filter : Filter the set of entities based on whether the value of a specific component type has changed. The filters you set remain in effect until you call ResetFilter on the query object. Note Write Groups use a different mechanism. See Query options . Shared component filters To use a shared component filter, include the shared component in the EntityQuery -- along with other needed components -- and call the SetSharedComponentFilter function. Then pass in a struct of the same ISharedComponent type that contains the values to select. All values must match. You can add up to two different shared components to the filter. You can change the filter at any time, but if you change the filter, it does not change any existing arrays of entities or components that you received from the group ToComponentDataArray <T> or ToEntityArray functions. You must recreate these arrays. The following example defines a shared component named SharedGrouping and a system that only processes entities that have the Group field set to 1 . struct SharedGrouping : ISharedComponentData { public int Group; } class ImpulseSystem : SystemBase { EntityQuery query; protected override void OnCreate() { query = GetEntityQuery(typeof(Position), typeof(Displacement), typeof(SharedGrouping)); } protected override void OnUpdate() { // Only iterate over entities that have the SharedGrouping data set to 1 query.SetSharedComponentFilter(new SharedGrouping { Group = 1 }); var positions = query.ToComponentDataArray<Position>(Allocator.Temp); var displacements = query.ToComponentDataArray<Displacement>(Allocator.Temp); for (int i = 0; i < positions.Length; i++) positions[i] = new Position { Value = positions[i].Value + displacements[i].Value }; } } Change filters If you only need to update entities when a component value has changed, you can add that component to the EntityQuery filter using the SetChangedVersionFilter function. For example, the following EntityQuery only includes entities from chunks that another system has already written to the Translation component: EntityQuery query; protected override void OnCreate() { query = GetEntityQuery(typeof(LocalToWorld), ComponentType.ReadOnly<Translation>()); query.SetChangedVersionFilter(typeof(Translation)); } Note For efficiency, the change filter applies to whole chunks, not individual entities. The change filter also only checks whether a system has run that declared write access to the component, not whether it actually changed any data. In other words, if another job which had the ability to write to that type of component accesses the chunk, then the change filter includes all entities in that chunk. This is why you should always declare read only access to components that you do not need to modify. Executing the query Typically, you \"execute\" a query when you schedule a job that uses it. You can also call one of the EntityQuery methods that returns arrays of entities, components, or chunks: ToEntityArray returns an array of the selected entities. ToComponentDataArray returns an array of the components of type T for the selected entities. CreateArchetypeChunkArray returns all of the chunks that contain the selected entities. Because a query operates on archetypes, shared component values, and change filters, which are all identical for all the entities in a chunk, the set of entities stored win the returned set of chunks is exactly the same as the set of entities ToEntityArray returns ."
  },
  "manual/ecs_gameplay.html": {
    "href": "manual/ecs_gameplay.html",
    "title": "Creating Gameplay with ECS | Entities | 0.17.0-preview.18",
    "keywords": "Creating Gameplay with ECS <!-- Synopsis: Introductory topic about using ECS make things happen. Should probably put any discussions of hybrid versus all-ecs solutions here (unless such discussions become too involved and need thier own page)"
  },
  "manual/ecs_ijobentitybatch.html": {
    "href": "manual/ecs_ijobentitybatch.html",
    "title": "Using Entity Batch jobs | Entities | 0.17.0-preview.18",
    "keywords": "Using Entity Batch jobs Implement IJobEntityBatch or IJobEntityBatchWithIndex inside a system to iterate through your data in batches of entities. When you schedule an IJobEntityBatch job in the OnUpdate function of a system, the system identifies the chunks that should be passed to the job using the entity query you pass to the schedule function. The job invokes your Execute function once for each batch of entities in those chunks. By default, the batch size is a full chunk, but you can set the batch size to be some fraction of a chunk when scheduling the job. No matter the batch size, the entities in a given batch are always stored in the same chunk. In your job’s Execute function, you can iterate over the data inside each batch, entity by entity. Use IJobEntityBatchWithIndex when you need an index value for all entities across the set of batches. Otherwise, IJobEntityBatch is more efficient since it doesn’t need to calculate these indices. To implement a batch job: Query for data with an EntityQuery to identify the entities that you want to process. Define the job struct using either IJobEntityBatch or IJobEntityBatchWithIndex . Declare the data your job accesses . On the job structure, include fields for ComponentTypeHandle objects that identify the types of components the job must directly access. Also, specify whether the job reads or writes to those components. You can also include fields that identify data you want to look up for entities that aren’t part of the query, as well as fields for non-entity data. Write the Execute function of the job struct to transform your data. Get the NativeArray instances for the components the job reads or writes and then iterate over the current batch to perform the desired work. Schedule the job in the system OnUpdate function, passing the entity query identifying the entities to process to the schedule function. Note Iterating with IJobEntityBatch or IJobEntityBatchWithIndex is more complicated and requires more code setup than using Entities.ForEach, and should only be used when necessary or more efficient. For more information, the ECS samples repository contains a simple HelloCube example that demonstrates how to use IJobEntityBatch. Note IJobEntityBatch supersedes IJobChunk . The primary differences are that you can schedule an IJobEntityBatch to iterate over smaller batches of entities than a full chunk and that you use the variant IJobEntityBatchWithIndex if you need an job-wide index for the entities in each batch. Query for data with an EntityQuery An EntityQuery defines the set of component types that an EntityArchetype must contain for the system to process its associated chunks and entities. An archetype can have additional components, but it must have at least those that the query defines. You can also exclude archetypes that contain specific types of components. Pass the query that selects the entities your job should process to the schedule method that you use to schedule the job. See Using an EntityQuery to query data for information about defining queries. Note Do not include completely optional components in the EntityQuery . To handle optional components, use the ArchetypeChunk.Has method inside IJobEntityBatch.Execute to determine whether the current ArchetypeChunk has the optional component or not. Because all entities in the same batch have the same components, you only need to check whether an optional component exists once per batch, not once per entity. Define the job struct A job struct consists of an Execute function that does the work to be performed and fields that declare the data used by the Execute function. A typical IJobEntityBatch job struct looks like: public struct UpdateTranslationFromVelocityJob : IJobEntityBatch { public ComponentTypeHandle<VelocityVector> velocityTypeHandle; public ComponentTypeHandle<Translation> translationTypeHandle; public float DeltaTime; [BurstCompile] public void Execute(ArchetypeChunk batchInChunk, int batchIndex) { NativeArray<VelocityVector> velocityVectors = batchInChunk.GetNativeArray(velocityTypeHandle); NativeArray<Translation> translations = batchInChunk.GetNativeArray(translationTypeHandle); for(int i = 0; i < batchInChunk.Count; i++) { float3 translation = translations[i].Value; float3 velocity = velocityVectors[i].Value; float3 newTranslation = translation + velocity * DeltaTime; translations[i] = new Translation() { Value = newTranslation }; } } } This example accesses the data for two components of an entity, VelocityVector and Translation , and calculates a new translation based on the time elapsed since the last update. IJobEntityBatch versus IJobEntityBatchWithIndex The only difference between IJobEntityBatch and IJobEntityBatchWithIndex is that IJobEntityBatchWithIndex passes an indexOfFirstEntityInQuery parameter when it invokes the Execute function on a batch. This parameter is the index of the first entity in the current batch in the list of all entities selected by the entity query. Use IJobEntityBatchWithIndex when you need an individual index for each entity. For example, if you calculate a unique result for each entity, you could use this index to write each result to a different element of a native array . If you don’t use the indexOfFirstEntityInQuery value, use IJobEntityBatch instead, to avoid the overhead of calculating the index values. Note When you are adding commands to an [EntityCommandBuffer.ParallelWriter] , you can use the batchIndex parameter as the sortKey argument of the command buffer functions. You do not need to use IJobEntityBatchWithIndex just to get a unique sort key for each entity. The batchIndex parameter available from both job types works for this purpose. Declare the data your job accesses The fields in your job struct declare the data available to your Execute function. These fields fall into four general categories: ComponentTypeHandle fields -- component handle fields allow your Execute function to access the entity components and buffers stored in the current chunk. See Accessing entity component and buffer data . ComponentDataFromEntity , BufferFromEntity fields -- these \"data from entity\" fields allow your Execute function to look up data for any entity no matter where it is stored. (This type of random access is the least efficient way to access data and should only be used when necessary.) See Looking up data for other entities . Other fields -- you can declare other fields for your struct as needed. You can set the value of such fields each time you schedule the job. See Accessing other data . Output fields -- in addition to updating writable entity components or buffers in a job, you can also write to native container fields declared for the job struct. Such fields must be a native container, such as a NativeArray ; you cannot use other data types. Accessing entity component and buffer data Accessing data stored in a component of one of the entities in the query is three-step process: First , you must define a ComponentTypeHandle field on the job struct, setting T to the data type of the component. For example: public ComponentTypeHandle<Translation> translationTypeHandle; Next , you use this handle field inside the job’s Execute method to access the array containing the data for that type component (as a NativeArray ). This array contains an element for every entity in a batch: NativeArray<Translation> translations = batchInChunk.GetNativeArray(translationTypeHandle); Finally , when you schedule the job (in the system’s OnUpdate method, you assign a value to the type handle field using the ComponentSystemBase.GetComponentTypeHandle function: // \"this\" is your SystemBase subclass updateFromVelocityJob.translationTypeHandle = this.GetComponentTypeHandle<Translation>(false); Always set the component handle fields of a job every time you schedule the job. Do not cache a type handle and use it later. Each array of component data in a batch is aligned such that a given index corresponds to the same entity in all arrays. In other words, if your job uses two components of an entity, use the same array index in both data arrays to access data for the same entity. You can use ComponentTypeHandle variables to access component types that you do not include in the EntityQuery . However, you must check to make sure that the current batch contains the component before you try to access it. Use the Has function to check whether the current batch contains a specific component type: The ComponentTypeHandle fields are part of the ECS job safety system that prevents race conditions when reading and writing of data in jobs. Always set the isReadOnly argument of the GetComponentTypeHandle function to accurately reflect how the component is accessed in a job. Looking up data for other entities Accessing component data through an EntityQuery and an IJobEntityBatch job (or Entities.ForEach ) is almost always the most efficient way to access your data. However, there are often cases where you need to look up data in a random-access fashion, for example, when one entity depends on data in another. To perform this type of data lookup, you must pass a different type of handle to your job through the job struct: ComponentDataFromEntity -- access the component of any entity with that component type BufferFromEntity -- access a buffer of any entity with that buffer type These types provide an array-like interface to components and buffers, indexed by Entity object. In addition to being relatively inefficient because of the random data access, looking up data this way can also increase the chances that you run into the safeguards erected by the job safety system. For example, if you try to set the transform of one entity based on the transform of another entity, the job safety system cannot tell if this is safe, since you have access to all transforms through the ComponentDataFromEntity object. You could be writing to the same data you are reading and so creating a race condition. To use ComponentDataFromEntity and BufferFromEntity , declare a field of type ComponentDataFromEntity or BufferFromEntity on the job struct and set the value of the field before scheduling the job. For more information, see Looking up data . Accessing other data If you need other information when executing a job, you can define a field on the job struct and then access the field inside the Execute method. You can only set the value when scheduling the job and that value remains the same for all batches. For example, if you are updating moving objects, you most likely need to pass in the time elapsed since the previous update. To do this, you could define a field named DeltaTime , set its value in OnUpdate and use that value in the job Execute function. At each frame, you would calculate and assign a new value to your DeltaTime field before scheduling the job for the new frame. Write the Execute function Write the Execute function of your job struct to transform your data from its input state to the desired output state. The signature of the IJobEntityBatch.Execute method is: void Execute(ArchetypeChunk batchInChunk, int batchIndex) And for IJobEntityBatchWithIndex.Execute , the signature is: void Execute(ArchetypeChunk batchInChunk, int batchIndex, int indexOfFirstEntityInQuery) The batchInChunk parameter The batchInChunk parameter provides the ArchetypeChunk instance that contains the entities and components for this iteration of the job. Because a chunk can only contain a single archetype, all of the entities in a chunk have the same set of components. By default, this object includes all the entities in a single chunk; however, if you schedule the job with ScheduleParallel , you can specify that a batch contains only a fraction of the number of entities in the chunk. Use the batchInChunk parameter to get the NativeArray instances you need to access the component data. (You must also declare a field with the corresponding component type handle — and set that field when scheduling the job.) The batchIndex parameter The batchIndex parameter is the index of the current batch in the list of all batches created for the current job. The batches in a job are not necessarily processed in the indexed order. You can use the batchIndex value in situations where you have a native container with one element per batch to which you want to write a value computed in your Execute function. Use the batchIndex as the array index into this container. If you use a parallel writing entity command buffer , pass the batchIndex argument as the sortKey parameter to the command buffer functions. The indexOfFirstEntityInQuery parameter An IJobEntityBatchWithIndex Execute function has an additional parameter named indexofFirstEntityInQuery . If you picture the entities selected by your query as a single list, indexOfFirstEntityInQuery would be the index into that list of the first entity in the current batch. The batches in a job are not necessarily processed in the indexed order. Optional components If you have the Any filter in your entity query or have completely optional components that don’t appear in the query at all, you can use the ArchetypeChunk.Has function to test whether the current chunk contains one of those components before you use it: // If entity has Rotation and LocalToWorld components, // slerp to align to the velocity vector if (batchInChunk.Has<Rotation>(rotationTypeHandle) && batchInChunk.Has<LocalToWorld>(l2wTypeHandle)) { NativeArray<Rotation> rotations = batchInChunk.GetNativeArray(rotationTypeHandle); NativeArray<LocalToWorld> transforms = batchInChunk.GetNativeArray(l2wTypeHandle); // By putting the loop inside the check for the // optional components, we can check once per batch // rather than once per entity. for (int i = 0; i < batchInChunk.Count; i++) { float3 direction = math.normalize(velocityVectors[i].Value); float3 up = transforms[i].Up; quaternion rotation = rotations[i].Value; quaternion look = quaternion.LookRotation(direction, up); quaternion newRotation = math.slerp(rotation, look, DeltaTime); rotations[i] = new Rotation() { Value = newRotation }; } } Schedule the job To run an IJobEntityBatch job, you must create an instance of your job struct, set the struct fields, and then schedule the job. When you do this in the OnUpdate function of a SystemBase implementation, the system schedules the job to run every frame. public class UpdateTranslationFromVelocitySystem : SystemBase { EntityQuery query; protected override void OnCreate() { // Set up the query var description = new EntityQueryDesc() { All = new ComponentType[] {ComponentType.ReadWrite<Translation>(), ComponentType.ReadOnly<VelocityVector>()} }; query = this.GetEntityQuery(description); } protected override void OnUpdate() { // Instantiate the job struct var updateFromVelocityJob = new UpdateTranslationFromVelocityJob(); // Set the job component type handles // \"this\" is your SystemBase subclass updateFromVelocityJob.translationTypeHandle = this.GetComponentTypeHandle<Translation>(false); updateFromVelocityJob.velocityTypeHandle = this.GetComponentTypeHandle<VelocityVector>(true); // Set other data need in job, such as time updateFromVelocityJob.DeltaTime = World.Time.DeltaTime; // Schedule the job this.Dependency = updateFromVelocityJob.ScheduleParallel(query, 1, this.Dependency); } When you call the GetComponentTypeHandle function to set your component type variables, make sure that you set the isReadOnly parameter to true for components that the job reads, but doesn’t write. Setting these parameters correctly can have a significant impact on how efficiently the ECS framework can schedule your jobs. These access mode settings must match their equivalents in both the struct definition, and the EntityQuery . Do not cache the return value of GetComponentTypeHandle in a system class variable. You must call the function every time the system runs, and pass the updated value to the job. Scheduling options You can control how a job executes by choosing the appropriate function when you schedule the job: Run -- executes the job immediately on the current (main) thread. Run also completes any scheduled jobs that the current job depends upon. Batch size is always 1 (an entire chunk). Schedule -- schedules the job to run on a worker thread after any scheduled jobs that the current job depends upon. The jobs execute function is called once for each chunk selected by the entity query. Chunks are processed in sequence. Batch size is always 1. ScheduleParallel -- Like Schedule, except that you can specify a batch size and the batches are processed in parallel (assuming worker threads are available) rather than sequentially. Setting the batch size To set a batch size, use the ScheduleParallel method to schedule the job and set the batchesPerChunk parameter to a positive integer. Use a value of 1 to set the batch size to a full chunk. Each chunk selected by the query used to schedule the job is divided into the number of batches specified by batchesPerChunk . Each batch from the same chunk contains approximately the same number of entities; however, batches from different chunks may contain very different numbers of entities. The largest batch size is 1, which means that all the entities in each chunk are processed together in one call to your Execute function. Entities from different chunks can never be included in the same batch. Note Typically, it is most efficient to use a batchesPerChunk setting of 1 to process all the entities in a chunk in a single call to Execute . However, that is not always the case. For example, if you have a small number of entities and an expensive algorithm performed by your Execute function, you could gain additional benefit from parallel processing by using smaller batches of entities. Skipping chunks with unchanged entities If you only need to update entities when a component value has changed, you can add that component type to the change filter of the EntityQuery that selects the entities and chunks for the job. For example, if you have a system that reads two components and only needs to update a third when one of the first two has changed, you can use an EntityQuery as follows: EntityQuery query; protected override void OnCreate() { query = GetEntityQuery( new ComponentType[] { ComponentType.ReadOnly<InputA>(), ComponentType.ReadOnly<InputB>(), ComponentType.ReadWrite<Output>() } ); query.SetChangedVersionFilter( new ComponentType[] { typeof(InputA), typeof(InputB) } ); } The EntityQuery change filter supports up to two components. If you want to check more or you aren't using an EntityQuery , you can make the check manually. To make this check, use the ArchetypeChunk.DidChange function to compare the chunk’s change version for the component to the system's LastSystemVersion . If this function returns false, you can skip the current chunk altogether because none of the components of that type have changed since the last time the system ran. You must use a struct field to pass the LastSystemVersion from the system into the job, as follows: struct UpdateOnChangeJob : IJobEntityBatch { public ComponentTypeHandle<InputA> InputATypeHandle; public ComponentTypeHandle<InputB> InputBTypeHandle; [ReadOnly] public ComponentTypeHandle<Output> OutputTypeHandle; public uint LastSystemVersion; [BurstCompile] public void Execute(ArchetypeChunk batchInChunk, int batchIndex) { var inputAChanged = batchInChunk.DidChange(InputATypeHandle, LastSystemVersion); var inputBChanged = batchInChunk.DidChange(InputBTypeHandle, LastSystemVersion); // If neither component changed, skip the current batch if (!(inputAChanged || inputBChanged)) return; var inputAs = batchInChunk.GetNativeArray(InputATypeHandle); var inputBs = batchInChunk.GetNativeArray(InputBTypeHandle); var outputs = batchInChunk.GetNativeArray(OutputTypeHandle); for (var i = 0; i < outputs.Length; i++) { outputs[i] = new Output { Value = inputAs[i].Value + inputBs[i].Value }; } } } As with all the job struct fields, you must assign its value before you schedule the job: public class UpdateDataOnChangeSystem : SystemBase { EntityQuery query; protected override void OnUpdate() { var job = new UpdateOnChangeJob(); job.LastSystemVersion = this.LastSystemVersion; job.InputATypeHandle = GetComponentTypeHandle<InputA>(true); job.InputBTypeHandle = GetComponentTypeHandle<InputB>(true); job.OutputTypeHandle = GetComponentTypeHandle<Output>(false); this.Dependency = job.ScheduleParallel(query, 1, this.Dependency); } protected override void OnCreate() { query = GetEntityQuery( new ComponentType[] { ComponentType.ReadOnly<InputA>(), ComponentType.ReadOnly<InputB>(), ComponentType.ReadWrite<Output>() } ); } } Note For efficiency, the change version applies to whole chunks not individual entities. If another job which has the ability to write to that type of component accesses a chunk, then ECS increments the change version for that component and the DidChange function returns true. ECS increments the change version even if the job that declares write access to a component does not actually change the component value. (This is one of the reasons you should always read-only when you are reading component data and not updating it.)"
  },
  "manual/ecs_job_dependencies.html": {
    "href": "manual/ecs_job_dependencies.html",
    "title": "Job dependencies | Entities | 0.17.0-preview.18",
    "keywords": "Job dependencies Unity analyzes the data dependencies of each system based on the ECS components that the system reads and writes. If a system that updates earlier in the frame reads data that a later system writes, or writes data that a later system reads, then the second system depends on the first. To prevent race conditions , the job scheduler makes sure that all the jobs a system depends on have finished before it runs that system's jobs. A system's Dependency property is a JobHandle that represents the ECS-related dependencies of the system. Before OnUpdate() , the Dependency property reflects the incoming dependencies that the system has on prior jobs. By default, the system updates the Dependency property based on the components each job reads and writes as you schedule jobs in a system. To override this default behavior, use the overloaded versions of Entities.ForEach and Job.WithCode that take job dependencies as an parameter and return the updated dependencies as a JobHandle . When you use the explicit versions of these constructions, ECS does not automatically combine the job handles with the system's Dependency property. You must combine them manually when required. Note that the system Dependency property does not track the dependencies that a job might have on data passed through NativeArrays or other similar containers. If you write a NativeArray in one job, and read that array in another, you must manually add the JobHandle of the first job as a dependency of the second (typically by using JobHandle.CombineDependencies ). When you call Entities.ForEach.Run() the job scheduler completes all scheduled jobs that the system depends on before starting the ForEach iteration. If you also use WithStructuralChanges() as part of the construction, then the job scheduler completes all running and scheduled jobs. Structural changes also invalidate any direct references to component data. See sync points for more information. See JobHandle and dependencies for more information."
  },
  "manual/ecs_job_extensions.html": {
    "href": "manual/ecs_job_extensions.html",
    "title": "Job extensions | Entities | 0.17.0-preview.18",
    "keywords": "Job extensions The Unity C# job system lets you run code on multiple threads. The system provides scheduling, parallel processing, and multi-threaded safety. The job system is a core Unity module that provides the general purpose interfaces and classes to create and run jobs (whether or not you are using ECS). These interfaces include: IJob : Create a job that runs on any thread or core, which the job system scheduler determines. IJobParallelFor : Create a job that can run on multiple threads in parallel to process the elements of a NativeContainer . IJobExtensions : Provides extension methods to run IJobs. IJobParalllelForExtensions : Provides extension methods to run IJobParallelFor jobs. JobHandle : A handle to access a scheduled job. You can also use JobHandle instances to specify dependencies between jobs. For an overview of the jobs system see C# Job System in the Unity User Manual. The Jobs package extends the job system to support ECS. It contains: IJobParallelForDeferExtensions IJobParallelForFilter JobParallelIndexListExtensions Job​Struct​Produce<T>"
  },
  "manual/ecs_job_overview.html": {
    "href": "manual/ecs_job_overview.html",
    "title": "Jobs in ECS | Entities | 0.17.0-preview.18",
    "keywords": "Jobs in ECS ECS uses the C# Job System extensively. Whenever possible, you should use the jobs in your system code. The SystemBase class provides Entities.ForEach and Job.WithCode to help implement your game logic as multithreaded code. In more complex situations, you can use IJobEntityBatch . For example, the following system updates positions: using Unity.Burst; using Unity.Collections; using Unity.Entities; using Unity.Jobs; using Unity.Transforms; public class MovementSpeedSystem : SystemBase { // OnUpdate runs on the main thread. protected override void OnUpdate() { Entities .ForEach((ref Translation position, in MovementSpeed speed) => { float3 displacement = speed.Value * dt; position = new Translation(){ Value = position.Value + displacement }; }) .ScheduleParallel(); } } For more information about systems, see ECS Systems ."
  },
  "manual/ecs_job_withcode.html": {
    "href": "manual/ecs_job_withcode.html",
    "title": "Using Job.WithCode | Entities | 0.17.0-preview.18",
    "keywords": "Using Job.WithCode The Job.WithCode construction provided by the SystemBase class is an easy way to run a function as a single background job. You can also run Job.WithCode on the main thread and still take advantage of Burst compilation to speed up execution. The following example uses one Job.WithCode lambda function to fill a native array with random numbers and another job to add those numbers together: public class RandomSumJob : SystemBase { private uint seed = 1; protected override void OnUpdate() { Random randomGen = new Random(seed++); NativeArray<float> randomNumbers = new NativeArray<float>(500, Allocator.TempJob); Job.WithCode(() => { for (int i = 0; i < randomNumbers.Length; i++) { randomNumbers[i] = randomGen.NextFloat(); } }).Schedule(); // To get data out of a job, you must use a NativeArray // even if there is only one value NativeArray<float> result = new NativeArray<float>(1, Allocator.TempJob); Job.WithCode(() => { for (int i = 0; i < randomNumbers.Length; i++) { result[0] += randomNumbers[i]; } }).Schedule(); // This completes the scheduled jobs to get the result immediately, but for // better efficiency you should schedule jobs early in the frame with one // system and get the results late in the frame with a different system. this.CompleteDependency(); UnityEngine.Debug.Log(\"The sum of \" + randomNumbers.Length + \" numbers is \" + result[0]); randomNumbers.Dispose(); result.Dispose(); } } Note To run a parallel job, implement IJobFor , which you can schedule using ScheduleParallel() in the system OnUpdate() function. Variables You cannot pass parameters to the Job.WithCode lambda function or return a value. Instead, you can capture local variables in your OnUpdate() function. When you schedule your job to run in the C# Job System using Schedule() , there are additional restrictions: Captured variables must be declared as NativeArray -- or other native container -- or a blittable type. To return data, you must write the return value to a captured native array , even if the data is a single value. (Note that you can write to any captured variable when executing with Run() .) Job.WithCode provides a set of functions to apply read-only and safety attributes to your captured native container variables. For example, you can use WithReadOnly to designate that you don't update the container and WithDisposeOnCompletion to automatically dispose a container after the job finishes. ( Entities.ForEach provides the same functions.) See Job.WithCode for more information about these modifiers and attributes. Executing the function You have two options to execute your lambda function: Schedule() -- executes the function as a single, non-parallel job. Scheduling a job runs the code on a background thread and thus can take better advantage of available CPU resources. Run() -- executes the function immediately on the main thread. In most cases the Job.WithCode can be Burst compiled so executing code can be faster inside Job.WithCode even though it is still run on the main thread. Note that calling Run() automatically completes all the dependencies of the Job.WithCode construction. If you do not explicitly pass a JobHandle object to Run() the system assumes that the current Dependency property represents the function's dependencies. (Pass in a new JobHandle if the function has no dependencies.) Dependencies By default, a system manages its ECS-related dependencies using its Dependency property. The system adds each job created with Entities.ForEach and Job.WithCode to the Dependency job handle in the order that they appear in the OnUpdate() function. You can also manage job dependencies manually by passing a JobHandle to your Schedule functions, which then return the resulting dependency. See Dependency for more information. See Job dependencies for more general information about job dependencies."
  },
  "manual/ecs_lookup_data.html": {
    "href": "manual/ecs_lookup_data.html",
    "title": "Looking up data | Entities | 0.17.0-preview.18",
    "keywords": "Looking up data The most efficient way to access and modify your ECS data is to use a system with an entity query and job. This provides the best utilization of CPU resources with the fewest memory cache misses. In fact, one of the goals of your data design should be to perform the bulk of your data transformation using the most efficient, fastest path. However, sometimes you need to access an arbitrary component of an arbitrary entity at an arbitrary point in your program. Given an Entity object, you can look up data in its IComponentData and dynamic buffers . The method varies depending on whether your code executes in a system using Entities.ForEach or using an [IJobChunk] job, or elsewhere on the main thread. Looking up entity data in a system Use GetComponent<T>(Entity) to look up data stored in a component of an arbitrary entity from inside a system's Entities.ForEach or [Job.WithCode] function. For example, if you have Target components with an Entity field identifying the entity to target, you can use the following code to rotate the tracking entities toward their target: public class TrackingSystem : SystemBase { protected override void OnUpdate() { float deltaTime = this.Time.DeltaTime; Entities .ForEach((ref Rotation orientation, in LocalToWorld transform, in Target target) => { // Check to make sure the target Entity still exists and has // the needed component if (!HasComponent<LocalToWorld>(target.entity)) return; // Look up the entity data LocalToWorld targetTransform = GetComponent<LocalToWorld>(target.entity); float3 targetPosition = targetTransform.Position; // Calculate the rotation float3 displacement = targetPosition - transform.Position; float3 upReference = new float3(0, 1, 0); quaternion lookRotation = quaternion.LookRotationSafe(displacement, upReference); orientation.Value = math.slerp(orientation.Value, lookRotation, deltaTime); }) .ScheduleParallel(); } } Accessing data stored in dynamic buffers requires an extra step. You must declare a local variable of type BufferFromEntity in your OnUpdate() method. You can then \"capture\" the local variable in your lambda function. public struct BufferData : IBufferElementData { public float Value; } public class BufferLookupSystem : SystemBase { protected override void OnUpdate() { BufferFromEntity<BufferData> buffersOfAllEntities = this.GetBufferFromEntity<BufferData>(true); Entities .ForEach((ref Rotation orientation, in LocalToWorld transform, in Target target) => { // Check to make sure the target Entity with this buffer type still exists if (!buffersOfAllEntities.HasComponent(target.entity)) return; // Get a reference to the buffer DynamicBuffer<BufferData> bufferOfOneEntity = buffersOfAllEntities[target.entity]; // Use the data in the buffer float avg = 0; for (var i = 0; i < bufferOfOneEntity.Length; i++) { avg += bufferOfOneEntity[i].Value; } if (bufferOfOneEntity.Length > 0) avg /= bufferOfOneEntity.Length; }) .ScheduleParallel(); } } Looking up entity data in IJobEntityBatch To randomly access component data in an IJobEntityBatch or other job struct, use one of the following types to get an array-like interface to component, indexed by Entity object: ComponentDataFromEntity BufferFromEntity Declare a field of type ComponentDataFromEntity or BufferFromEntity , and set the value of the field before scheduling the job. For example, if you had Target components with an Entity field identifying the entities to target, you could add the following field to your job struct to look up the world position of the targets: [ReadOnly] public ComponentDataFromEntity<LocalToWorld> EntityPositions; Note that this declaration uses the ReadOnly attribute. You should always declare ComponentDataFromEntity objects as read-only unless you do write to the components you access. You can set this field when scheduling the job as follows: var job = new ChaserSystemJob(); job.EntityPositions = this.GetComponentDataFromEntity<LocalToWorld>(true); Inside the job's Execute() function, you can lookup the value of a component using an Entity object: float3 targetPosition = EntityPositions[targetEntity].Position; The following, full example shows a system that moves entities that have a Target field containing the Entity object of their target towards the current location of the target: public class MoveTowardsEntitySystem : SystemBase { private EntityQuery query; [BurstCompile] private struct MoveTowardsJob : IJobEntityBatch { // Read-write data in the current chunk public ComponentTypeHandle<Translation> PositionTypeHandleAccessor; // Read-only data in the current chunk [ReadOnly] public ComponentTypeHandle<Target> TargetTypeHandleAccessor; // Read-only data stored (potentially) in other chunks [ReadOnly] public ComponentDataFromEntity<LocalToWorld> EntityPositions; // Non-entity data public float deltaTime; public void Execute(ArchetypeChunk batchInChunk, int batchIndex) { // Get arrays of the components in chunk NativeArray<Translation> positions = batchInChunk.GetNativeArray<Translation>(PositionTypeHandleAccessor); NativeArray<Target> targets = batchInChunk.GetNativeArray<Target>(TargetTypeHandleAccessor); for (int i = 0; i < positions.Length; i++) { // Get the target Entity object Entity targetEntity = targets[i].entity; // Check that the target still exists if (!EntityPositions.HasComponent(targetEntity)) continue; // Update translation to move the chasing enitity toward the target float3 targetPosition = EntityPositions[targetEntity].Position; float3 chaserPosition = positions[i].Value; float3 displacement = targetPosition - chaserPosition; positions[i] = new Translation { Value = chaserPosition + displacement * deltaTime }; } } } protected override void OnCreate() { // Select all entities that have Translation and Target Componentx query = this.GetEntityQuery ( typeof(Translation), ComponentType.ReadOnly<Target>() ); } protected override void OnUpdate() { // Create the job var job = new MoveTowardsJob(); // Set the chunk data accessors job.PositionTypeHandleAccessor = this.GetComponentTypeHandle<Translation>(false); job.TargetTypeHandleAccessor = this.GetComponentTypeHandle<Target>(true); // Set the component data lookup field job.EntityPositions = this.GetComponentDataFromEntity<LocalToWorld>(true); // Set non-ECS data fields job.deltaTime = this.Time.DeltaTime; // Schedule the job using Dependency property this.Dependency = job.ScheduleParallel(query, 1, this.Dependency); } } Data access errors If the data you are looking up overlaps the data you are directly reading and writing in the job, then random access can lead to race conditions and subtle bugs. When you are sure that there is no overlap between the specific entity data you are reading or writing directly in the job and the specific entity data you are reading or writing randomly, then you can mark the accessor object with the NativeDisableParallelForRestriction attribute."
  },
  "manual/ecs_profiling.html": {
    "href": "manual/ecs_profiling.html",
    "title": "Profiling | Entities | 0.17.0-preview.18",
    "keywords": "Profiling Synopsis: All about profiling ECS programs"
  },
  "manual/ecs_systems.html": {
    "href": "manual/ecs_systems.html",
    "title": "Systems | Entities | 0.17.0-preview.18",
    "keywords": "Systems A System , the S in ECS, provides the logic that transforms the component data from its current state to its next state — for example, a system might update the positions of all moving entities by their velocity multiplied by the time interval since the previous update. Instantiating systems Unity ECS automatically discovers system classes in your project and instantiates them at runtime. It adds each discovered system to one of the default system groups. You can use system attributes to specify the parent group of a system and the order of that system within the group . If you do not specify a parent, Unity adds the system to the Simulation system group of the default world in a deterministic, but unspecified, order. You can also use an attribute to disable automatic creation. A system's update loop is driven by its parent ComponentSystemGroup . A ComponentSystemGroup is, itself, a specialized kind of system that is responsible for updating its child systems. Groups can be nested. Systems derive their time data from the World they are running in; time is updated by the UpdateWorldTimeSystem . You can view the system configuration using the Entity Debugger window (menu: Window > Analysis > Entity Debugger ). System types Unity ECS provides several types of systems. In general, the systems you write to implement your game behavior and data transformations will extend SystemBase . The other system classes have specialized purposes. You typically use existing instances of the EntityCommandBufferSystem and ComponentSystemGroup classes. SystemBase -- the base class to implement when creating systems. EntityCommandBufferSystem -- provides EntityCommandBuffer instances for other systems. Each of the default system groups maintains an Entity Command Buffer System at the beginning and end of its list of child systems. This allows you to group structural changes so that they incur fewer synchronization points in a frame. ComponentSystemGroup -- provides nested organization and update order for other systems. Unity ECS creates several Component System Groups by default. GameObjectConversionSystem -- converts GameObject-based, in-Editor representations of your game to efficient, entity-based, runtime representations. Game conversion systems run in the Unity Editor. Important: The ComponentSystem and JobComponentSystem classes, along with IJobForEach , are being phased out of the DOTS API, but have not been officially deprecated yet. Use SystemBase and Entities.ForEach instead."
  },
  "manual/ecs_testing.html": {
    "href": "manual/ecs_testing.html",
    "title": "Testing ECS code | Entities | 0.17.0-preview.18",
    "keywords": "Testing ECS code Synopsis: Using the Unity test framework with ECS. Tips for testing ECS code effectively."
  },
  "manual/ecs_write_groups.html": {
    "href": "manual/ecs_write_groups.html",
    "title": "Write groups | Entities | 0.17.0-preview.18",
    "keywords": "Write groups A common ECS pattern is for a system to read one set of input components and write to another component as its output . However, in some cases, you might want to override the output of a system, and use a different system based on a different set of inputs to update the output component. Write groups provide a mechanism for one system to override another, even when you cannot change the other system. The write group of a target component type consists of all other component types that ECS applies the WriteGroup attribute to, with that target component type as the argument. As a system creator, you can use write groups so that your system's users can exclude entities that your system would otherwise select and process. This filtering mechanism lets system users update components for the excluded entities based on their own logic, while letting your system operate normally on the rest. To make use of write groups, you must use the write group filter option on the queries in your system. This excludes all entities from the query that have a component from a write group of any of the components that are marked as writable in the query. To override a system that uses write groups, mark your own component types as part of the write group of the output component type of that system. The original system ignores any entities that have your components and you can update the data of those entities with your own systems. Write groups example In this example, you use an external package to color all characters in your game depending on their state of health. For this, there are two components in the package: HealthComponent and ColorComponent . public struct HealthComponent : IComponentData { public int Value; } public struct ColorComponent : IComponentData { public float4 Value; } Additionally, there are two systems in the package: The ComputeColorFromHealthSystem , which reads from HealthComponent and writes to ColorComponent The RenderWithColorComponent , which reads from ColorComponent To represent when a player uses a power-up and their character becomes invincible, you attach an InvincibleTagComponent to the character's entity. In this case, the character's color should change to a separate, different color, which the above example does not accommodate. You can create your own system to override the ColorComponent value, but ideally ComputeColorFromHealthSystem would not compute the color for your entity to begin with. It should ignore any entity that has InvincibleTagComponent . This becomes more relevant when there are thousands of players on the screen. Unfortunately, the system is from another package which does not know about the InvincibleTagComponent . This is when a write group is useful. It allows a system to ignore entities in a query when you know that the values it computes would be overridden anyway. There are two things you need to support this: The InvincibleTagComponent must marked as part of the write group of ColorComponent : [WriteGroup(typeof(ColorComponent))] struct InvincibleTagComponent : IComponentData {} The write group of ColorComponent consists of all component types that have the WriteGroup attribute with typeof(ColorComponent) as the argument. The ComputeColorFromHealthSystem must explicitly support write groups. To achieve this, the system needs to specify the EntityQueryOptions.FilterWriteGroup option for all its queries. You could implement the ComputeColorFromHealthSystem like this: ... protected override void OnUpdate() { Entities .WithName(\"ComputeColor\") .WithEntityQueryOptions(EntityQueryOptions.FilterWriteGroup) // support write groups .ForEach((ref ColorComponent color, in HealthComponent health) => { // compute color here }).ScheduleParallel(); } ... When this executes, the following happens: The system detects that you write to ColorComponent because it is a by-reference parameter It looks up the write group of ColorComponent and finds the InvincibleTagComponent in it It excludes all entities that have an InvincibleTagComponent The benefit is that this allows the system to exclude entities based on a type that is unknown to the system and might live in a different package. Note For more examples, see the Unity.Transforms code, which uses write groups for every component it updates, including LocalToWorld . Creating write groups To create write groups, add the WriteGroup attribute to the declarations of each component type in the write group. The WriteGroup attribute takes one parameter, which is the type of component that the components in the group uses to update. A single component can be a member of more than one write group. For example, if you have a system that writes to component W whenever there are components A or B on an entity, then you can define a write group for W as follows: public struct W : IComponentData { public int Value; } [WriteGroup(typeof(W))] public struct A : IComponentData { public int Value; } [WriteGroup(typeof(W))] public struct B : IComponentData { public int Value; } Note You do not add the target of the write group (component W in the example above) to its own write group. Enabling write group filtering To enable write group filtering, set the FilterWriteGroups flag on your job: public class AddingSystem : SystemBase { protected override void OnUpdate() { Entities // support write groups by setting EntityQueryOptions .WithEntityQueryOptions(EntityQueryOptions.FilterWriteGroup) .ForEach((ref W w, in B b) => { // perform computation here }).ScheduleParallel();} } For query description objects, set the flag when you create the query: public class AddingSystem : SystemBase { private EntityQuery m_Query; protected override void OnCreate() { var queryDescription = new EntityQueryDesc { All = new ComponentType[] { ComponentType.ReadWrite<W>(), ComponentType.ReadOnly<B>() }, Options = EntityQueryOptions.FilterWriteGroup }; m_Query = GetEntityQuery(queryDescription); } // Define IJobChunk struct and schedule... } When you enable write group filtering in a query, the query adds all components in a write group of a writable component to the None list of the query unless you explicitly add them to the All or Any lists. As a result, the query only selects an entity if it explicitly requires every component on that entity from a particular write group. If an entity has one or more additional components from that write group, the query rejects it. In the example code above, the query: Excludes any entity that has component A , because W is writable and A is part of the write group of W . Does not exclude any entity that has component B . Even though B is part of the write group of W , it is also explicitly specified in the All list. Overriding another system that uses write groups If a system uses write group filtering in its queries, you use your own system to override that system and write to those components. To override the system, add your own components to the write groups of the components to which the other system writes. Because write group filtering excludes any components in the write group that the query doesn't explicitly required, the other system ignores any entities that have your components. For example, if you want to set the orientation of your entities by specifying the angle and axis of rotation, you can create a component and a system to convert the angle and axis values into a quaternion and write that to the Unity.Transforms.Rotation component. To prevent the Unity.Transforms systems from updating Rotation , no matter what other components besides yours are present, you can put your component in the write group of Rotation : using System; using Unity.Collections; using Unity.Entities; using Unity.Transforms; using Unity.Mathematics; [Serializable] [WriteGroup(typeof(Rotation))] public struct RotationAngleAxis : IComponentData { public float Angle; public float3 Axis; } You can then update any entities with the RotationAngleAxis component without contention: using Unity.Burst; using Unity.Entities; using Unity.Jobs; using Unity.Collections; using Unity.Mathematics; using Unity.Transforms; public class RotationAngleAxisSystem : SystemBase { protected override void OnUpdate() { Entities.ForEach((ref Rotation destination, in RotationAngleAxis source) => { destination.Value = quaternion.AxisAngle(math.normalize(source.Axis), source.Angle); }).ScheduleParallel(); } } Extending another system that uses write groups If you want to extend another system rather than override it, or if you want to allow future systems to override or extend your system, then you can enable write group filtering on your own system. However, when you do this, neither system handles no combinations of components by default. You must explicitly query for and process each combination. In the previous example, it defined a write group that contains components A and B that targets component W . If you add a new component, called C , to the write group, then the new system that knows about C can query for entities that contain C and it does not matter if those entities also have components A or B . However, if the new system also enables write group filtering, that is no longer true. If you only require component C , then write group filtering excludes any entities with either A or B . Instead, you must explicitly query for each combination of components that make sense. Note You can use the Any clause of the query when appropriate. var query = new EntityQueryDesc { All = new ComponentType[] { ComponentType.ReadOnly<C>(), ComponentType.ReadWrite<W>() }, Any = new ComponentType[] { ComponentType.ReadOnly<A>(), ComponentType.ReadOnly<B>() }, Options = EntityQueryOptions.FilterWriteGroup }; If you have any entities that contain combinations of components in the write group that are not explicitly mentioned, then the system that writes to the target of the write group, and its filters, does not handle them. However, if you have any if these type of entities, it is most likely a logical error in the program, and they should not exist."
  },
  "manual/entities_job_foreach.html": {
    "href": "manual/entities_job_foreach.html",
    "title": "SystemBase lambda functions | Entities | 0.17.0-preview.18",
    "keywords": "SystemBase lambda functions This documentation has been moved to the SystemBase class documentation. Also, see Creating systems for more information on programming systems."
  },
  "manual/entity_command_buffer.html": {
    "href": "manual/entity_command_buffer.html",
    "title": "Entity Command Buffers | Entities | 0.17.0-preview.18",
    "keywords": "Entity Command Buffers The EntityCommandBuffer (ECB) class solves two important problems: When you're in a job, you can't access the EntityManager . When you perform a structural change (like creating an entity), you create a sync point and must wait for all jobs to complete. The EntityCommandBuffer abstraction allows you to queue up changes (from either a job or from the main thread) so that they can take effect later on the main thread. Entity command buffer systems Entity command buffer systems allow you to play back the commands queued up in ECBs at a clearly defined point in a frame. These systems are usually the best way to use ECBs. You can acquire multiple ECBs from the same entity command buffer system and the system will play back all of them in the order they were created when it is updated. This creates a single sync point when the system is updated instead of one sync point per ECB and ensures determinism. The default World initialization provides three system groups, for initialization, simulation, and presentation, that are updated in order each frame. Within a group, there is an entity command buffer system that runs before any other system in the group and another that runs after all other systems in the group. Preferably, you should use one of the existing command buffer systems rather than creating your own in order to minimize synchronization points. See Default System Groups for a list of the default groups and command buffer systems. If you want to use an ECB from a parallel job (e.g. in an Entities.ForEach ), you must ensure that you convert it to a concurrent ECB first by calling ToConcurrent on it. To ensure that the sequence of the commands in the ECB does not depend on how the work is distributed across jobs, you must also pass the index of the entity in the current query to each operation. You can acquire and use an ECB like this: struct Lifetime : IComponentData { public byte Value; } class LifetimeSystem : SystemBase { EndSimulationEntityCommandBufferSystem m_EndSimulationEcbSystem; protected override void OnCreate() { base.OnCreate(); // Find the ECB system once and store it for later usage m_EndSimulationEcbSystem = World .GetOrCreateSystem<EndSimulationEntityCommandBufferSystem>(); } protected override void OnUpdate() { // Acquire an ECB and convert it to a concurrent one to be able // to use it from a parallel job. var ecb = m_EndSimulationEcbSystem.CreateCommandBuffer().AsParallelWriter(); Entities .ForEach((Entity entity, int entityInQueryIndex, ref Lifetime lifetime) => { // Track the lifetime of an entity and destroy it once // the lifetime reaches zero if (lifetime.Value == 0) { // pass the entityInQueryIndex to the operation so // the ECB can play back the commands in the right // order ecb.DestroyEntity(entityInQueryIndex, entity); } else { lifetime.Value -= 1; } }).ScheduleParallel(); // Make sure that the ECB system knows about our job m_EndSimulationEcbSystem.AddJobHandleForProducer(this.Dependency); } }"
  },
  "manual/entity_iteration_foreach.html": {
    "href": "manual/entity_iteration_foreach.html",
    "title": "Using ComponentSystem methods | Entities | 0.17.0-preview.18",
    "keywords": "Using ComponentSystem methods The ComponentSystem class is being phased out in favor of SystemBase . See Creating systems for more information on programming systems."
  },
  "manual/entity_iteration_job.html": {
    "href": "manual/entity_iteration_job.html",
    "title": "Using IJobForEach jobs | Entities | 0.17.0-preview.18",
    "keywords": "Using IJobForEach jobs The IJobForEach class is deprecated in favor of SystemBase and Entities.ForEach . See Creating systems for more information on programming systems."
  },
  "manual/entity_manager.html": {
    "href": "manual/entity_manager.html",
    "title": "EntityManager | Entities | 0.17.0-preview.18",
    "keywords": "EntityManager The EntityManager owns EntityData , EntityArchetypes , SharedComponentData and EntityQuery . EntityManager is where you find APIs to create entities, check if an entity is still alive, instantiate entities and add or remove components. // Create an entity with no components on it var entity = EntityManager.CreateEntity(); // Adding a component at runtime EntityManager.AddComponent(entity, new MyComponentData()); // Get the ComponentData MyComponentData myData = EntityManager.GetComponentData<MyComponentData>(entity); // Set the ComponentData EntityManager.SetComponentData(entity, myData); // Removing a component at runtime EntityManager.RemoveComponent<MyComponentData>(entity); // Does the entity exist and does it have the component? bool has = EntityManager.HasComponent<MyComponentData>(entity); // Is the entity still alive? bool has = EntityManager.Exists(entity); // Instantiate the entity var instance = EntityManager.Instantiate(entity); // Destroy the created instance EntityManager.DestroyEntity(instance); // EntityManager also provides batch APIs // to create and destroy many entities in one call. // They are significantly faster // and should be used where ever possible // for performance reasons. // Instantiate 500 entities and write the resulting entity IDs to the instances array var instances = new NativeArray<Entity>(500, Allocator.Temp); EntityManager.Instantiate(entity, instances); // Destroy all 500 entities EntityManager.DestroyEntity(instances);"
  },
  "manual/exclusive_entity_transaction.html": {
    "href": "manual/exclusive_entity_transaction.html",
    "title": "ExclusiveEntityTransaction | Entities | 0.17.0-preview.18",
    "keywords": "ExclusiveEntityTransaction ExclusiveEntityTransaction is an API to create & destroy entities from a job. The purpose is to enable procedural generation scenarios where instantiation on big scale must happen on jobs. As the name implies it is exclusive to any other access to the EntityManager . ExclusiveEntityTransaction should be used on a manually created World that acts as a staging area to construct & setup entities. After the job has completed you can end the ExclusiveEntityTransaction and use EntityManager.MoveEntitiesFrom(EntityManager srcEntities); to move the entities to an active World ."
  },
  "manual/gp_ai.html": {
    "href": "manual/gp_ai.html",
    "title": "Pathfinding and AI | Entities | 0.17.0-preview.18",
    "keywords": "Pathfinding and AI Synopsis: Describe how to do pathfinding and other AI tasks. At the very least, this topic must cover using existing Unity constructs such as the Nav Mesh. Ideally, the topic also covers data-oriented approaches to AI systems or provides resources for developers tackling the problem. Note, this is a placeholder for work that has not been completed yet. Also, see the AI Planner package."
  },
  "manual/gp_animation.html": {
    "href": "manual/gp_animation.html",
    "title": "Animation | Entities | 0.17.0-preview.18",
    "keywords": "Animation Synopsis: How to use Unity's animation features with ECS. How to optimize animation with ECS. Note, this is a placeholder for work that has not been completed yet."
  },
  "manual/gp_assets.html": {
    "href": "manual/gp_assets.html",
    "title": "Assets and resources | Entities | 0.17.0-preview.18",
    "keywords": "Assets and resources Synopsis: Considerations for using Unity assets and loading resources in an ECS-based project. Note, this is a placeholder for work that has not been completed yet."
  },
  "manual/gp_audio.html": {
    "href": "manual/gp_audio.html",
    "title": "Audio | Entities | 0.17.0-preview.18",
    "keywords": "Audio Synopsis: How to use Unity's audio features with ECS. How to optimize audio with ECS. Note, this is a placeholder for work that has not been completed yet."
  },
  "manual/gp_common_patterns.html": {
    "href": "manual/gp_common_patterns.html",
    "title": "Common patterns in gameplay code | Entities | 0.17.0-preview.18",
    "keywords": "Common patterns in gameplay code Structuring code with Entities.ForEach Entities.ForEach allows you to write inline jobified code that deals with a set of entities. When organizing your code, it can help to encapsulate functionality into methods and structures. The following patterns provide ways to do this: Static methods Encapsulate data and methods Call static methods from an Entities.ForEach This pattern helps you to re-use functionality in multiple places. It can also help simplify the structure of complex systems and make your code more readable. You can use a static method as the ForEach lambda function, as illustrated in the following example. A static function called this way is Burst compiled (if the function is not Burst-compatible, add .WithoutBurst() to the Entities.ForEach construction). public class RotationSpeedSystem_ForEach : SystemBase { protected override void OnUpdate() { float deltaTime = Time.DeltaTime; Entities .WithName(\"RotationSpeedSystem_ForEach\") .ForEach((ref Rotation rotation, in RotationSpeed_ForEach rotationSpeed) => DoRotation(ref rotation, rotationSpeed.RadiansPerSecond * deltaTime)) .ScheduleParallel(); } static void DoRotation(ref Rotation rotation, float amount) { rotation.Value = math.mul( math.normalize(rotation.Value), quaternion.AxisAngle(math.up(), amount)); } } For more information about creating ECS systems, see: Systems SystemBase Encapsulate data and method in a captured value-type: This pattern helps you organize data and work together into a single unit. You can define a struct that declares local fields for the data together with the method called by Entities.ForEach . In the system OnUpdate() function, you can create an instance of the struct as a local variable and then call the function as illustrated in the following examle: public class RotationSpeedSystem_ForEach : SystemBase { struct RotateData { float3 m_Direction; float m_DeltaTime; float m_Speed; public RotateData(float3 direction, float deltaTime, float speed) => (m_Direction, m_DeltaTime, m_Speed) = (direction, deltaTime, speed); public void DoWork(ref Rotation rotation) => rotation.Value = math.mul(math.normalize(rotation.Value), quaternion.AxisAngle(m_Direction, m_Speed * m_DeltaTime)); } protected override void OnUpdate() { var rotateUp = new RotateData(math.up(), Time.DeltaTime, 3.0f); Entities.ForEach((ref Rotation rotation) => rotateUp.DoWork(ref rotation)) .ScheduleParallel(); } } Note This pattern copies the data into your job struct (and back out if used with .Run ). If you do this with very large job structs it can have some performance overhead due to struct copying. In this case it might be a sign that your job should be split up into multiple smaller jobs. For more information about creating ECS systems, see: Systems SystemBase"
  },
  "manual/gp_ecs_interop.html": {
    "href": "manual/gp_ecs_interop.html",
    "title": "Sharing data between ECS and MonoBehaviours | Entities | 0.17.0-preview.18",
    "keywords": "Sharing data between ECS and MonoBehaviours Synopsis: interoperation between ECS components and systems and MonoBehaviours or other managed code. Note, this is a placeholder for work that has not been completed yet."
  },
  "manual/gp_input.html": {
    "href": "manual/gp_input.html",
    "title": "Player input | Entities | 0.17.0-preview.18",
    "keywords": "Player input Synopsis: How to use Unity's input features with ECS. How to optimize input with ECS. Note, this is a placeholder for work that has not been completed yet."
  },
  "manual/gp_multiplayer.html": {
    "href": "manual/gp_multiplayer.html",
    "title": "Networking and Multiplayer | Entities | 0.17.0-preview.18",
    "keywords": "Networking and Multiplayer Synopsis: How to use Unity's networking and multiplayer features with ECS. How to optimize networking and multiplayer with ECS. Note, this is a placeholder for work that has not been completed yet."
  },
  "manual/gp_overview.html": {
    "href": "manual/gp_overview.html",
    "title": "Creating gameplay | Entities | 0.17.0-preview.18",
    "keywords": "Creating gameplay This section contains information on how to create DOTS-based games and other applications in the Unity Editor. It also covers the systems and components that ECS provides to help you implement game features. The systems include: Unity.Transforms : Provides components to define world-space transforms, 3D object hierarchies, and systems to manage them. Unity.Hybrid.Renderer : Provides components and systems to render ECS entities in the Unity runtime. Gameplay supporting packages Some gameplay features in DOTS require additional packages to support them. For the list of features that require additional packages, see the table below. Feature Packages DOTS ECS com.unity.entities Rendering com.unity.rendering.hybrid - Hybrid Renderer V2 com.unity.render-pipelines.high-definition or com.unity.render-pipelines.universal - Animation com.unity.animation Audio com.unity.audio.dspgraph Physics com.unity.physics or com.havok.physics - Smooth Penetration Recovery com.havok.physics - Stable Object Stacking com.havok.physics - Remove Speculative Contacts com.havok.physics - Rigidbody Sleeping com.havok.physics - Visual Debugger com.havok.physics Multiplayer com.unity.netcode - Lag Compensation com.unity.physics Project Building com.unity.platforms - Android com.unity.platforms.android - Linux com.unity.platforms.linux - macOS com.unity.platforms.macos - Web com.unity.platforms.web - Windows com.unity.platforms.windows Authoring overview You can use the Unity Editor (with the required DOTS packages) to create DOTS-based games. In the Editor, you use GameObjects as normal to author a Scene and the ECS code converts the GameObjects to entities. The biggest difference when you use DOTS is that instead of writing your own MonoBehaviours to store instance data and implement custom game logic, you define ECS components to store the data at runtime, and write systems for the custom logic. GameObject conversion During GameObject conversion, various conversion systems handle the MonoBehaviour components that they recognize and then convert them into ECS-based components. For example, one of the the Unity.Transforms conversion systems examines the UnityEngine.Transform component and adds ECS components, such as LocalToWorld , to replace it. You can implement an IConvertGameObjectToEntity MonoBehaviour component to specify custom conversion steps. There often isn't a one-to-one relationship between the number of GameObjects ECS converts and the number of entities it creates; nor between the number of MonoBehaviours on a GameObject and the number of ECS components it adds to an entity. The ECS conversion code converts a GameObject if it either has a ConvertToEntity MonoBehaviour component, or if it is part of a SubScene. In either case, the conversion systems provided for various DOTS features, such as Unity.Transforms and Unity.Hybrid.Render, process the GameObject or the Scene Asset and any of their child GameObjects. One difference between converting GameObjects with ConvertToEntity and converting with a SubScene is that ECS serializes and saves to disk the entity data it generates from converting a SubScene. You can load or stream this serialized data very quickly at run time. In contrast, ECS always converts GameObjects with ConvertToEntity MonoBehaviours at runtime. It's best practice to use standard MonoBehaviours to author, and use IConvertGameObjectToEntity to apply the values of those authoring components to IComponentData structs for runtime use. Often, the most convenient data layout to use to author is not the most efficient data layout at runtime. You can use IConvertGameObjectToEntity to customize the conversion of any GameObject in a SubScene, or a GameObject that has a ConvertToEntity MonoBehaviour, or one that is a child of a GameObject that has a ConvertToEntity MonoBehaviour. Note The authoring workflow for DOTS-based applications is an area of active development. The general outlines are in place, but you should anticipate many changes in this area in the near future. Generated authoring components Unity can automatically generate authoring components for simple runtime ECS components. When Unity generates an authoring component, you can add an add the script containing the ECS component directly to a GameObject within the Editor. You can then use the Inspector window to set the initial values for the component. For IComponentData Unity can automatically generate authoring components for simple IComponentData components. When Unity generates an authoring component, you can add an IComponentData directly to a GameObject in a Scene within the Unity Editor. You can then use the Inspector window to set the initial values for the component. To indicate that you want to generate an authoring component, add the [GenerateAuthoringComponent] attribute to the IComponentData declaration. Unity automatically generates a MonoBehaviour class that contains the public fields of the component and provides a Conversion method that converts those fields over into runtime component data. [GenerateAuthoringComponent] public struct RotationSpeed_ForEach : IComponentData { public float RadiansPerSecond; } Note the following restrictions: Only one component in a single C# file can have a generated authoring component, and the C# file must not have another MonoBehaviour in it. ECS only reflects public fields and they have the same name as that specified in the component. ECS reflects fields of an Entity type in the IComponentData as fields of GameObject types in the MonoBehaviour it generates. ECS converts the GameObjects or Prefabs you assign to these fields as referenced Prefabs. Only public fields are reflected and they will have the same name as that specified in the component. Fields of an Entity type in the IComponentData are reflected as fields of GameObject types in the generated MonoBehaviour. GameObjects or Prefabs you assign to these fields are converted as referenced prefabs. For IBufferElementData You can also generate authoring components for types that implement IBufferElementData by adding the [GenerateAuthoringComponent] attribute: [GenerateAuthoringComponent] public struct IntBufferElement: IBufferElementData { public int Value; } In this example, a class named IntBufferElementAuthoring (which inherits from MonoBehaviour ) is generated, exposing a public field of List<int> type. During conversion, this list will be converted into DynamicBuffer<IntBufferElement> , and then added to the converted entity. Note the following restrictions: Only one component in a single C# file can have a generated authoring component, and the C# file must not have another MonoBehaviour in it. IBufferElementData authoring components cannot be automatically generated for types that contain 2 or more fields. IBufferElementData authoring components cannot be automatically generated for types that have an explicit layout."
  },
  "manual/gp_physics.html": {
    "href": "manual/gp_physics.html",
    "title": "Physics | Entities | 0.17.0-preview.18",
    "keywords": "Physics Synopsis: How to use Unity's physics features with ECS. How to optimize physics with ECS. Note, this is a placeholder for work that has not been completed yet. See the Unity Physics and Havok Physics packages for information about the DOTS-compatible physics APIs."
  },
  "manual/gp_prefabs.html": {
    "href": "manual/gp_prefabs.html",
    "title": "Prefabs | Entities | 0.17.0-preview.18",
    "keywords": "Prefabs Synopsis: Using prefabs in ECS-based programs Note, this is a placeholder for work that has not been completed yet."
  },
  "manual/gp_rendering.html": {
    "href": "manual/gp_rendering.html",
    "title": "Rendering | Entities | 0.17.0-preview.18",
    "keywords": "Rendering The Hybrid.Rendering package provides a ECS system to render 3D objects. See DOTS Hybrid Renderer for information about the current DOTS-compatible rendering API."
  },
  "manual/gp_scenes.html": {
    "href": "manual/gp_scenes.html",
    "title": "Scenes | Entities | 0.17.0-preview.18",
    "keywords": "Scenes Synopsis: How to organize an ECS-based project. Creating, loading, unloading scenes, etc Note, this is a placeholder for work that has not been completed yet."
  },
  "manual/gp_text_handling.html": {
    "href": "manual/gp_text_handling.html",
    "title": "Handling text | Entities | 0.17.0-preview.18",
    "keywords": "Handling text Synopsis: Handling text in a performant way Note, this is a placeholder for work that has not been completed yet."
  },
  "manual/gp_ui.html": {
    "href": "manual/gp_ui.html",
    "title": "User Interfaces | Entities | 0.17.0-preview.18",
    "keywords": "User Interfaces Synopsis: How to use Unity's UI features with ECS. How to optimize your UI with ECS. Note, this is a placeholder for work that has not been completed yet."
  },
  "manual/hybrid_component.html": {
    "href": "manual/hybrid_component.html",
    "title": "DOTS Hybrid Components | Entities | 0.17.0-preview.18",
    "keywords": "DOTS Hybrid Components Prelude Please note that Hybrid Components are not compatible with Project Tiny . Purpose Many existing features of Unity don’t have a DOTS equivalent (yet). So in many cases, DOTS projects will be hybrid: a mix of classic GameObjects and ECS. Hybrid Components provide a way to conveniently access UnityEngine components from ECS code. They were initially designed to deal with rendering components like lights, reflection probes, post-process volumes, etc. The major limitations associated with Hybrid Components include: Only for data-like components, most event functions won’t be called. No performance benefits over GameObjects, including no jobs, no Burst, no improvement in memory usage. Not a general purpose feature, the use of hybrid components is explicit (opt-in). As of entities 0.16, hybrid components aren’t fully supported by LiveLink. Hybrid Components can only be created at conversion time. Component Objects Hybrid Components are implemented on top of Component objects, so let’s first discuss what Component objects are. Component objects are regular UnityEngine components added to an entity by using AddComponentObject and accessed via GetComponentObject , allowing those types of components to be used in queries and a few other places. Internally, references to such components are not stored in chunks but in managed arrays. The chunks only contain indices to those arrays instead of storing the components themselves. This means that every access to a Component object requires an extra indirection and also that the entities don’t \"own\" those components. You must use caution when dealing with Component objects because of the chance that many problematic situations can arise because of this lack of clearly defined ownership. For example, it is possible to share the same component between multiple entities or to destroy components without removing them. Companion GameObjects Hybrid components were designed to solve the ownership problem of Component objects. Since regular UnityEngine components cannot exist on their own, hybrid components use hidden GameObjects (via HideFlags ) that we call \"Companion GameObjects\" in this context. ECS makes the management of these companion GameObjects transparent in a way that your code should never have to worry about them. Note The design is based on the constraint that the entity is in charge of the companion GameObject. The GameObject shouldn’t modify the entity or its other components. Conversion Conversion systems can declare some UnityEngine component instances from the authoring GameObjects as hybrid components by using AddHybridComponent . [ConverterVersion(\"unity\", 1)] public class DoohickeyConversionSystem : GameObjectConversionSystem { protected override void OnUpdate() { Entities.ForEach((Doohickey doohickey) => { AddHybridComponent(doohickey); }); } } At the end of conversion, each authoring GameObject that has at least one hybrid component will be cloned, all the other components will be removed from the clone, and that clone will be stored alongside the entity and become its companion GameObject. CompanionLink The link between an entity and its companion GameObject is aptly named CompanionLink . A CompanionLink is a managed component ( IComponentData class) that also implements IDisposable and ICloneable . This component manages the lifecycle of the companion GameObject and contains a reference to the GameObject. This allows entity prefab instantiation and entity destruction to just work transparently. Note This is a one way link from an entity to a companion GameObject. There is no link back from the companion GameObject to the entity. Copy to GameObject.Transform If it exists, the transform matrix in the LocalToWorld component of the entity is copied to its companion GameObject’s Transform . Those GameObjects are always in world space, the transform hierarchy only exists on the ECS side. Note This copy only happens in one direction. Direct modification of the companion’s transform is an error, it will be overwritten by the synchronization system eventually. Since this synchronization system is reactive, there is no guarantee when this will happen. It is only guaranteed to happen when the LocalToWorld component of the entity is modified."
  },
  "manual/index.html": {
    "href": "manual/index.html",
    "title": "Entity Component System | Entities | 0.17.0-preview.18",
    "keywords": ".infographic {background-color: #020202;} a {text-decoration: none; display: inline-block; padding: 8px 16px;} a:hover {background-color: #ddd; color: black;} .previous {background-color: #4CAF50; color: black;} .next {background-color: #4CAF50; color: black;} .round {border-radius: 50%;} .slideshow {display: flex; align-items: center;} ‹ › Entity Component System The Entity Component System (ECS) is the core of the Unity Data-Oriented Tech Stack. As the name indicates, ECS has three principal parts: Entities — the entities, or things, that populate your game or program. Components — the data associated with your entities, but organized by the data itself rather than by entity. (This difference in organization is one of the key differences between an object-oriented and a data-oriented design.) Systems — the logic that transforms the component data from its current state to its next state— for example, a system might update the positions of all moving entities by their velocity times the time interval since the previous frame."
  },
  "manual/install_setup.html": {
    "href": "manual/install_setup.html",
    "title": "Package installation | Entities | 0.17.0-preview.18",
    "keywords": "Package installation In recent versions of Unity, the DOTS packages are always hidden, even when preview packages are enabled. If you have the git command line tools installed, you can use “Add package from git URL...” under the + menu at the top left of the package manager to add packages by repo URL or by name (such as com.unity.entities ). If you don't have the git command line tools installed, you’ll need to add DOTS packages by directly editing the package.json file in your project. Setup In most DOTS projects, you'll want to avoid the slow Domain Reload that occurs upon entering playmode. To do this, under the \"Edit > Project Settings > Editor\" menu, check the \"Enter Play Mode Options\" checkbox but leave the \"Reload Domain\" and \"Reload Scene\" boxes unchecked. Keep in mind that you must be mindful of your use of static fields and static event handlers when Domain Reloads are disabled."
  },
  "manual/manual_iteration.html": {
    "href": "manual/manual_iteration.html",
    "title": "Manual iteration | Entities | 0.17.0-preview.18",
    "keywords": "Manual iteration You can request all of the chunks explicitly in a NativeArray and process them with a job such as IJobParallelFor . You should use this method if you need to manage chunks in a way that is not appropriate for the simplified model of iterating over all of the chunks in an EntityQuery. The following is an example of this: public class RotationSpeedSystem : SystemBase { [BurstCompile] struct RotationSpeedJob : IJobParallelFor { [DeallocateOnJobCompletion] public NativeArray<ArchetypeChunk> Chunks; public ArchetypeChunkComponentType<RotationQuaternion> RotationType; [ReadOnly] public ArchetypeChunkComponentType<RotationSpeed> RotationSpeedType; public float DeltaTime; public void Execute(int chunkIndex) { var chunk = Chunks[chunkIndex]; var chunkRotation = chunk.GetNativeArray(RotationType); var chunkSpeed = chunk.GetNativeArray(RotationSpeedType); var instanceCount = chunk.Count; for (int i = 0; i < instanceCount; i++) { var rotation = chunkRotation[i]; var speed = chunkSpeed[i]; rotation.Value = math.mul(math.normalize(rotation.Value), quaternion.AxisAngle(math.up(), speed.RadiansPerSecond * DeltaTime)); chunkRotation[i] = rotation; } } } EntityQuery m_Query; protected override void OnCreate() { var queryDesc = new EntityQueryDesc { All = new ComponentType[]{ typeof(RotationQuaternion), ComponentType.ReadOnly<RotationSpeed>() } }; m_Query = GetEntityQuery(queryDesc); } protected override void OnUpdate() { var rotationType = GetArchetypeChunkComponentType<RotationQuaternion>(); var rotationSpeedType = GetArchetypeChunkComponentType<RotationSpeed>(true); var chunks = m_Query.CreateArchetypeChunkArray(Allocator.TempJob); var rotationsSpeedJob = new RotationSpeedJob { Chunks = chunks, RotationType = rotationType, RotationSpeedType = rotationSpeedType, DeltaTime = Time.deltaTime }; this.Dependency rotationsSpeedJob.Schedule(chunks.Length,32, this.Dependency); } } Iterating manually You can use the EntityManager class to manually iterate through the entities or chunks, though this is not best practice. You should only use these iteration methods in test or debugging code (or when you are just experimenting), or in an isolated World where you have a perfectly controlled set of entities. For example, the following snippet iterates through all of the entities in the active World: var entityManager = World.Active.EntityManager; var allEntities = entityManager.GetAllEntities(); foreach (var entity in allEntities) { //... } allEntities.Dispose(); This snippet iterates through all of the chunks in the active World: var entityManager = World.Active.EntityManager; var allChunks = entityManager.GetAllChunks(); foreach (var chunk in allChunks) { //... } allChunks.Dispose();"
  },
  "manual/shared_component_data.html": {
    "href": "manual/shared_component_data.html",
    "title": "Shared component data | Entities | 0.17.0-preview.18",
    "keywords": "Shared component data Shared components are a special kind of data component that you can use to subdivide entities based on the specific values in the shared component (in addition to their archetype). When you add a shared component to an entity, the EntityManager places all entities with the same shared data values into the same chunk. Shared components allow your systems to process like entities together. For example, the shared component Rendering.RenderMesh , which is part of the Hybrid.rendering package, defines several fields, including mesh , material , and receiveShadows . When your application renders, it is most efficient to process all of the 3D objects that have the same value for those fields together. Because a shared component specifies these properties, the EntityManager places the matching entities together in memory so that the rendering system can efficiently iterate over them. Note If you over-use shared components, it might lead to poor chunk utilization. This is because when you use a shared component it involves a combinatorial expansion of the number of memory chunks based on archetype and every unique value of each shared component field. As such, avoid adding any fields that aren't needed to sort entities into a category to a shared component. To view chunk utilization, use the Entity Debugger . If you add or remove a component from an entity, or change the value of a shared component, The EntityManager moves the entity to a different chunk, and creates a new chunk if necessary. You should use IComponentData for data that varies between entities, such as storing a World position, agent hit points, or particle time-to-live. In contrast, you should use ISharedComponentData when a lot of entities share something in common. For example in the Boids demo in the DOTS package, a lot of entities instantiate from the same Prefab and as a result, the RenderMesh between many Boid entities is exactly the same. [System.Serializable] public struct RenderMesh : ISharedComponentData { public Mesh mesh; public Material material; public ShadowCastingMode castShadows; public bool receiveShadows; } ISharedComponentData has zero memory cost on a per entity basis. You can use ISharedComponentData to group together all entities that have the same InstanceRenderer data, and then efficiently extract all matrices for rendering. The resulting code is simple and efficient because the data is laid out as ECS accesses it. For an example of this, see the RenderMeshSystemV2 file Packages/com.unity.entities/Unity.Rendering.Hybrid/RenderMeshSystemV2.cs . Important notes about SharedComponentData: ECS groups entities with the same SharedComponentData together in the same chunks . It stores the index to the SharedComponentData once per chunk, not per entity. As a result, SharedComponentData has zero memory overhead on a per entity basis. You can use EntityQuery to iterate over all entities with the same type. You can also use EntityQuery.SetFilter() to iterate specifically over entities that have a specific SharedComponentData value. Because of the data layout, this iteration has a low overhead. You can use EntityManager.GetAllUniqueSharedComponents to retrieve all unique SharedComponentData that is added to any alive entities. ECS automatically reference counts SharedComponentData . SharedComponentData should change rarely. If you want to change a SharedComponentData , it involves using memcpy to copy all ComponentData for that entity into a different chunk."
  },
  "manual/sync_points.html": {
    "href": "manual/sync_points.html",
    "title": "Sync points | Entities | 0.17.0-preview.18",
    "keywords": "Sync points A synchronization point (sync point) is a point in program execution that waits for the completion of all jobs that have been scheduled so far. Sync points limit your ability to use all worker threads available in the job system for a period of time. As such, you should generally aim to avoid sync points. Structural changes Sync points are caused by operations that you cannot safely perform when there are any other jobs that operate on components. Structural changes to the data in ECS are the primary cause of sync points. All of the following are structural changes: Creating entities Deleting entities Adding components to an entity Removing components from an entity Changing the value of shared components Broadly speaking, any operation that changes the archetype of an entity or causes the order of entities within a chunk to change is a structural change. These structural changes can only be performed on the main thread. Structural changes not only require a sync point, but they also invalidate all direct references to any component data. This includes instances of DynamicBuffer and the result of methods that provide direct access to the components such as ComponentSystemBase.GetComponentDataFromEntity . Avoiding sync points You can use entity command buffers (ECBs) to queue up structural changes instead of immediately performing them. Commands stored in an ECB can be played back at a later point during the frame. This reduces multiple sync points spread across the frame to a single sync point when the ECB is played back. Each of the standard ComponentSystemGroup instances provides a EntityCommandBufferSystem as the first and last systems updated in the group. By getting an ECB object from one of these standard ECB systems, all structural changes within the group occur at the same point in the frame, resulting in one sync point rather than several. ECBs also allow you to record structural changes within a job. Without an ECB, you can only make structural changes on the main thread. (Even on the main thread, it is typically faster to record commands in an ECB and then play back those commands, than it is to make the structural changes one-by-one using the EntityManager class itself.) If you cannot use an EntityCommandBufferSystem for a task, try to group any systems that make structural changes together in the system execution order. Two systems that both make structural changes only incur one sync point if they update sequentially. See Entity Command Buffers for more information about using command buffers and command buffer systems."
  },
  "manual/system_state_components.html": {
    "href": "manual/system_state_components.html",
    "title": "System State Components | Entities | 0.17.0-preview.18",
    "keywords": "System State Components You can use SystemStateComponentData to track resources internal to a system and create and destroy those resources as needed without relying on individual callbacks. SystemStateComponentData and SystemStateSharedComponentData are similar to ComponentData and SharedComponentData , but ECS does not delete SystemStateComponentData when an entity is destroyed. When an entity is destroyed, ECS usually: Finds all components which reference the particular entity's ID. Deletes those components. Recycles the entity ID for reuse. However, if SystemStateComponentData is present, ECS does not recycle the ID. This gives the system the opportunity to clean up any resources or states associated with the entity ID. ECS only reuses the entity ID once SystemStateComponentData is removed. When to use system state components Systems might need to keep an internal state based on ComponentData . For instance, resources might be allocated. Systems also need to be able to manage the state as values, and other systems might make state changes. For example, when values in components change, or when relevant components are added or deleted. \"No callbacks\" is an important element of the ECS design rules. The general use of SystemStateComponentData is expected to mirror a user component, providing the internal state. For instance, given: FooComponent ( ComponentData , user assigned) FooStateComponent ( SystemComponentData , system assigned) Detecting when a component is added When you create a component, a system state component does not exist. The system updates queries for components without a system state component, and can infer that they have been added. At that point, the system adds a system state component and any needed internal state. Detecting when a component is removed When you remove a component, the system state component still exists. The system updates the queries for the system state component without a component, and can infer that they have been removed. At that point, the system removes the system state component and fixes any needed internal state. Detecting when an entity is destroyed DestroyEntity is a shorthand utility for: Find components which reference given entity ID. Delete components found. Recycle entity ID. However, SystemStateComponentData are not removed on DestroyEntity and the entity ID is not recycled until the last component is deleted. This gives the system the opportunity to clean up the internal state in the exact same way as with component removal. SystemStateComponent A SystemStateComponentData is similar to a ComponentData . struct FooStateComponent : ISystemStateComponentData { } Visibility of a SystemStateComponentData is also controlled in the same way as a component (using private , public , internal ) However, it's expected, as a general rule, that a SystemStateComponentData will be ReadOnly outside the system that creates it. SystemStateSharedComponent A SystemStateSharedComponentData is similar to a SharedComponentData . struct FooStateSharedComponent : ISystemStateSharedComponentData { public int Value; } Example system using state components The following example shows a simplified system that illustrates how to manage entities with system state components. The example defines a general-purpose IComponentData instance and a system state, ISystemStateComponentData instance. It also defines three queries based on those entities: m_newEntities selects entities that have the general-purpose, but not the system state component. This query finds new entities that the system has not seen before. The system runs a job using the new entities query that adds the system state component. m_activeEntities selects entities that have both the general-purpose and the system state component. In a real application, other systems might be the ones that process or destroy the entities. m_destroyedEntities selects entities that have the system state, but not the general-purpose component. Since the system state component is never added to an entity by itself, the entities that this query selects must have been deleted, either by this system or another system. The system reuses the destroyed entities query to run a job and remove the system state component from the entities, which allows the ECS code to recycle the entity identifier. Note This simplified example does not maintain any state within the system. One purpose for system state components is to track when persistent resources need to be allocated or cleaned up. using Unity.Entities; using Unity.Jobs; using Unity.Collections; public struct GeneralPurposeComponentA : IComponentData { public int Lifetime; } public struct StateComponentB : ISystemStateComponentData { public int State; } public class StatefulSystem : SystemBase { private EntityCommandBufferSystem ecbSource; protected override void OnCreate() { ecbSource = World.GetExistingSystem<EndSimulationEntityCommandBufferSystem>(); // Create some test entities // This runs on the main thread, but it is still faster to use a command buffer EntityCommandBuffer creationBuffer = new EntityCommandBuffer(Allocator.Temp); EntityArchetype archetype = EntityManager.CreateArchetype(typeof(GeneralPurposeComponentA)); for (int i = 0; i < 10000; i++) { Entity newEntity = creationBuffer.CreateEntity(archetype); creationBuffer.SetComponent<GeneralPurposeComponentA> ( newEntity, new GeneralPurposeComponentA() { Lifetime = i } ); } //Execute the command buffer creationBuffer.Playback(EntityManager); } protected override void OnUpdate() { EntityCommandBuffer.ParallelWriter parallelWriterECB = ecbSource.CreateCommandBuffer().AsParallelWriter(); // Entities with GeneralPurposeComponentA but not StateComponentB Entities .WithNone<StateComponentB>() .ForEach( (Entity entity, int entityInQueryIndex, in GeneralPurposeComponentA gpA) => { // Add an ISystemStateComponentData instance parallelWriterECB.AddComponent<StateComponentB> ( entityInQueryIndex, entity, new StateComponentB() { State = 1 } ); }) .ScheduleParallel(); ecbSource.AddJobHandleForProducer(this.Dependency); // Create new command buffer parallelWriterECB = ecbSource.CreateCommandBuffer().AsParallelWriter(); // Entities with both GeneralPurposeComponentA and StateComponentB Entities .WithAll<StateComponentB>() .ForEach( (Entity entity, int entityInQueryIndex, ref GeneralPurposeComponentA gpA) => { // Process entity, in this case by decrementing the Lifetime count gpA.Lifetime--; // If out of time, destroy the entity if (gpA.Lifetime <= 0) { parallelWriterECB.DestroyEntity(entityInQueryIndex, entity); } }) .ScheduleParallel(); ecbSource.AddJobHandleForProducer(this.Dependency); // Create new command buffer parallelWriterECB = ecbSource.CreateCommandBuffer().AsParallelWriter(); // Entities with StateComponentB but not GeneralPurposeComponentA Entities .WithAll<StateComponentB>() .WithNone<GeneralPurposeComponentA>() .ForEach( (Entity entity, int entityInQueryIndex) => { // This system is responsible for removing any ISystemStateComponentData instances it adds // Otherwise, the entity is never truly destroyed. parallelWriterECB.RemoveComponent<StateComponentB>(entityInQueryIndex, entity); }) .ScheduleParallel(); ecbSource.AddJobHandleForProducer(this.Dependency); } protected override void OnDestroy() { // Implement OnDestroy to cleanup any resources allocated by this system. // (This simplified example does not allocate any resources, so there is nothing to clean up.) } }"
  },
  "manual/system_update_order.html": {
    "href": "manual/system_update_order.html",
    "title": "System Update Order | Entities | 0.17.0-preview.18",
    "keywords": "System Update Order Use Component System Groups to specify the update order of your systems. You can place a systems in a group using the [UpdateInGroup] attribute on the system’s class declaration. You can then use [UpdateBefore] and [UpdateAfter] attributes to specify the update order within the group. The ECS framework creates a set of default system groups that you can use to update your systems in the correct phase of a frame. You can nest one group inside another so that all systems in your group update in the correct phase and, then, also update according to the order within their group. Component System Groups The ComponentSystemGroup class represents a list of related component systems that should be updated together in a specific order. ComponentSystemGroup is derived from ComponentSystemBase, so it acts like a component system in all the important ways -- it can be ordered relative to other systems, has an OnUpdate() method, etc. Most relevantly, this means component system groups can be nested in other component system groups, forming a hierarchy. By default, when a ComponentSystemGroup’s Update() method is called, it calls Update() on each system in its sorted list of member systems. If any member systems are themselves system groups, they will recursively update their own members. The resulting system ordering follows a depth-first traversal of a tree. System Ordering Attributes The existing system ordering attributes are maintained, with slightly different semantics and restrictions. [UpdateInGroup] — specifies a ComponentSystemGroup that this system should be a member of. If this attribute is omitted, the system is automatically added to the default World’s SimulationSystemGroup (see below). [UpdateBefore] and [UpdateAfter] — order systems relative to other systems. The system type specified for these attributes must be a member of the same group. Ordering across group boundaries is handled at the appropriate deepest group containing both systems: Example: if SystemA is in GroupA and SystemB is in GroupB, and GroupA and GroupB are both members of GroupC, then the ordering of GroupA and GroupB implicitly determines the relative ordering of SystemA and SystemB; no explicit ordering of the systems is necessary. [DisableAutoCreation] — prevents the system from being created during default world initialization. You must explicitly create and update the system. However, you can add a system with this tag to a ComponentSystemGroup’s update list, and it will then be automatically updated just like the other systems in that list. Default System Groups The default World contains a hierarchy of ComponentSystemGroup instances. Only three root-level system groups are added to the Unity player loop (the following list also shows the pre-defined member systems in each group): InitializationSystemGroup (updated at the end of the Initialization phase of the player loop) BeginInitializationEntityCommandBufferSystem CopyInitialTransformFromGameObjectSystem SubSceneLiveLinkSystem SubSceneStreamingSystem EndInitializationEntityCommandBufferSystem SimulationSystemGroup (updated at the end of the Update phase of the player loop) BeginSimulationEntityCommandBufferSystem TransformSystemGroup EndFrameParentSystem CopyTransformFromGameObjectSystem EndFrameTRSToLocalToWorldSystem EndFrameTRSToLocalToParentSystem EndFrameLocalToParentSystem CopyTransformToGameObjectSystem LateSimulationSystemGroup EndSimulationEntityCommandBufferSystem PresentationSystemGroup (updated at the end of the PreLateUpdate phase of the player loop) BeginPresentationEntityCommandBufferSystem CreateMissingRenderBoundsFromMeshRenderer RenderingSystemBootstrap RenderBoundsUpdateSystem RenderMeshSystem LODGroupSystemV1 LodRequirementsUpdateSystem EndPresentationEntityCommandBufferSystem Note that the specific contents of this list is subject to change. Multiple Worlds You can create multiple Worlds, in addition to (or instead of) the default World described above. The same component system class can be instantiated in more than one World, and each instance can be updated at different rates from different points in the update order. There is currently no way to manually update every system in a given World; instead, you can control which systems are created in which World, and which of the existing system groups they should be added to. Thus, a custom WorldB could instantiate SystemX and SystemY, adding SystemX to the default World’s SimulationSystemGroup, and adding SystemY to the default World’s PresentationSystemGroup. These systems can order themselves relative to their group siblings as usual, and will be updated along with the corresponding group. To support this use case, a new ICustomBootstrap interface is now available: public interface ICustomBootstrap { // Returns the systems which should be handled by the default bootstrap process. // If null is returned the default world will not be created at all. // Empty list creates default world and entrypoints List<Type> Initialize(List<Type> systems); } When you implement this interface, the full list of component system types will be passed to the classes Initialize() method, prior to default world initialization. A custom bootstrapper can iterate through this list and create systems in whatever World it wants. You can return a list of systems from the Initialize() method and they will be created as part of the normal, default world initialization. For example, here’s the typical procedure of a custom MyCustomBootstrap.Initialize() implementation: Create any additional Worlds and their top-level ComponentSystemGroups. For each Type in the system Type list: Traverse upward through the ComponentSystemGroup hierarchy to find this system Type’s top-level group. If it’s one of the groups created in step 1, create the system in that World and add it to the hierarchy with group.AddSystemToUpdateList() . If not, append this Type to the List to return to DefaultWorldInitialization. Call group.SortSystemUpdateList() on new top-level groups. Optionally add them to one of the default world groups Return list of unhandled systems to DefaultWorldInitialization. Note The ECS framework finds your ICustomBootstrap implementation by reflection. Tips and Best Practices Use [UpdateInGroup] to specify the system group for each system you write. If not specified, the implicit default group is SimulationSystemGroup. Use manually-ticked ComponentSystemGroups to update systems elsewhere in the Unity player loop. Adding the [DisableAutoCreation] attribute to a component system (or system group) prevents it from being created or added to the default system groups. You can still manually create the system with World.GetOrCreateSystem () and update it by calling manually calling MySystem.Update() from the main thread. This is an easy way to insert systems elsewhere in the Unity player loop (for example, if you have a system that should run later or earlier in the frame). Use the existing EntityCommandBufferSystem s instead of adding new ones, if possible. An EntityCommandBufferSystem represents a sync point where the main thread waits for worker threads to complete before processing any outstanding EntityCommandBuffer s. Reusing one of the predefined Begin/End systems in each root-level system group is less likely to introduce a new \"bubble\" into the frame pipeline than creating a new one. Avoid putting custom logic in ComponentSystemGroup.OnUpdate() . Since ComponentSystemGroup is functionally a component system itself, it may be tempting to add custom processing to its OnUpdate() method, to perform some work, spawn some jobs, etc. We advise against this in general, as it’s not immediately clear from the outside whether the custom logic is executed before or after the group’s members are updated. It’s preferable to keep system groups limited to a grouping mechanism, and to implement the desired logic in a separate component system, explicitly ordered relative to the group."
  },
  "manual/transform_system.html": {
    "href": "manual/transform_system.html",
    "title": "TransformSystem | Entities | 0.17.0-preview.18",
    "keywords": "TransformSystem Section 1: Non-hierarchical Transforms (Basic) LocalToWorld (float4x4) represents the transform from local space to world space. It is the canonical representation and is the only component and can be relied upon to communicate local space among systems. Some DOTS features may rely on the existence of LocalToWorld in order to function. For example, the RenderMesh component relies on the LocalToWorld component to exist for rendering an instance. If only the LocalToWorld transform component exists, no transform system will write or affect the LocalToWorld data. User code may write directly to LocalToWorld to define the transform for an instance, if no other transform components are associated with the same entity. The purpose of all transform systems and all other transform components is to provide interfaces to write to LocalToWorld. LocalToWorld = Translation * Rotation * Scale If any combination of Translation (float3), Rotation (quaternion), or Scale (float) components are present along with a LocalToWorld component, a transform system will combine those components and write to LocalToWorld. Concretely, each of these component combinations will write to LocalToWorld as: [TRSToLocalToWorldSystem] LocalToWorld <= Translation [TRSToLocalToWorldSystem] LocalToWorld <= Translation * Rotation [TRSToLocalToWorldSystem] LocalToWorld <= Translation * Rotation * Scale [TRSToLocalToWorldSystem] LocalToWorld <= Rotation [TRSToLocalToWorldSystem] LocalToWorld <= Rotation * Scale [TRSToLocalToWorldSystem] LocalToWorld <= Scale e.g. If the following components are present... (Entity) LocalToWorld Translation Rotation ...then the transform system will: [TRSToLocalToWorldSystem] Write LocalToWorld <= Translation * Rotation Or, if the following components are present... (Entity) LocalToWorld Translation Rotation Scale ...then the transform system will: [TRSToLocalToWorldSystem] Write LocalToWorld <= Translation * Rotation * Scale Section 2: Hierarchical Transforms (Basic) LocalToParent and Parent components are required for the transform system to write a LocalToWorld based on a hierarchical transform. LocalToParent (float4x4) represents the transform from local space to parent local space. Parent (Entity) references the parent's LocalToWorld. User code may write directly to LocalToParent, if no other transform system is defined as writing to it. e.g. If the following components are present... Parent (Entity) Child (Entity) LocalToWorld LocalToWorld Translation LocalToParent Rotation Parent Scale ...then the transform system will: [TRSToLocalToWorldSystem] Parent: Write LocalToWorld as defined above in \"Non-hierarchical Transforms (Basic)\" [LocalToParentSystem] Child: Write LocalToWorld <= LocalToWorld[Parent] * LocalToParent LocalToWorld components associated with Parent Entity IDs are guaranteed to be computed before multiplies with LocalToParent associated with Child Entity ID. Note Cyclical graph relationships are invalid. Results are undefined. When the hierarchy (topology) is changed (i.e. Any Parent component is added, removed or changed) internal state is added as SystemStateComponentData as: Child component (ISystemStateBufferElementData of Entity) associated with the Parent Entity ID PreviousParent component (ISystemStateComponentData of Entity) associated with the Child Entity ID Parent (Entity) Child (Entity) LocalToWorld LocalToWorld Translation LocalToParent Rotation Parent Scale PreviousParent* Child* Adding, removing, and updating of these components is handled by the [ParentSystem]. It is not expected that systems external to transform systems will read or write to these components. LocalToParent = Translation * Rotation * Scale If any combination of Translation (float3), Rotation (quaternion), or Scale (float) components are present along with a LocalToParent component, a transform system will combine those components and write to LocalToParent. Concretely, each of these component combinations will write to LocalToParent as: [TRSToLocalToParentSystem] LocalToParent <= Translation [TRSToLocalToParentSystem] LocalToParent <= Translation * Rotation [TRSToLocalToParentSystem] LocalToParent <= Translation * Rotation * Scale [TRSToLocalToParentSystem] LocalToParent <= Rotation [TRSToLocalToParentSystem] LocalToParent <= Rotation * Scale [TRSToLocalToParentSystem] LocalToParent <= Scale e.g. If the following components are present... Parent (Entity) Child (Entity) LocalToWorld LocalToWorld Translation LocalToParent Rotation Parent Scale PreviousParent* Child* Translation Rotation Scale ...then the transform system will: [TRSToLocalToWorldSystem] Parent: Write LocalToWorld as defined above in \"Non-hierarchical Transforms (Basic)\" [TRSToLocalToParentSystem] Child: Write LocalToParent <= Translation * Rotation * Scale [LocalToParentSystem] Child: Write LocalToWorld <= LocalToWorld[Parent] * LocalToParent Parents may of course themselves be children of other LocalToWorld components. e.g. If the following components are present... Parent (Entity) Child (Entity) LocalToWorld LocalToWorld LocalToParent LocalToParent Parent Parent PreviousParent* PreviousParent* Child* Translation Translation Rotation Rotation Scale Scale ...then the transform system will: [TRSToLocalToParentSystem] Parent: Write LocalToParent <= Translation * Rotation * Scale [TRSToLocalToParentSystem] Child: Write LocalToParent <= Translation * Rotation * Scale [LocalToParentSystem] Parent: Write LocalToWorld <= LocalToWorld[Parent] * LocalToParent [LocalToParentSystem] Child: Write LocalToWorld <= LocalToWorld[Parent] * LocalToParent Section 3: Default Conversion (Basic) Hybrid Conversion: UnityEngine.Transform MonoBehaviours which are part of GameObjects and are included in Sub Scenes or are on GameObjects with \"Convert To Entity\" Monobehaviours attached, have a default conversion to Transform system components. That conversion can be found in TransformConversion system in the Unity.Transforms.Hybrid assembly. Entities associated with the GameObject being transformed which have a Static component, only have LocalToWorld added to the resulting entity. So in the case of static instances, no transform system update will happen at runtime. For non-Static entities, a. Translation component will be added with the Transform.position value. b. Rotation component will be added with the Transform.rotation value. c. Transform.parent == null For non-unit Transform.localScale, NonUniformScale component will be added with the Transform.localScale value. d. If Transform.parent != null, but at the start of the (partial) hierarchy being converted: For non-unit Transform.lossyScale, NonUniformScale component will be added with the Transform.lossyScale value. e. For other cases where Transform.parent != null, Parent component will be added with the Entity referring to the converted Transform.parent GameObject. LocalToParent component will be added. Section 4: Non-hierarchical Transforms (Advanced) NonUniformScale (float3) as an alternative to Scale to specify scale per-axis. Note that not all DOTS features fully support non-uniform scale. Be sure to check those features’ documentation to understand their limitations. [TRSToLocalToWorldSystem] LocalToWorld <= Translation [TRSToLocalToWorldSystem] LocalToWorld <= Translation * Rotation [TRSToLocalToWorldSystem] LocalToWorld <= Translation * Rotation * NonUniformScale [TRSToLocalToWorldSystem] LocalToWorld <= Rotation [TRSToLocalToWorldSystem] LocalToWorld <= Rotation * NonUniformScale [TRSToLocalToWorldSystem] LocalToWorld <= NonUniformScale The presence of both Scale and NonUniform scale is not a valid case, but the result is defined. Scale will be used, NonUniformScale will be ignored. e.g. If the following components are present... (Entity) LocalToWorld Translation Rotation NonUniformScale ...then the transform system will: [TRSToLocalToWorldSystem] Write LocalToWorld <= Translation * Rotation * NonUniformScale The Rotation component may be written to directly as a quaternion by user code. However, if an Euler interface is preferred, components are available for each rotation order which will cause a write to the Rotation component if present. [RotationEulerSystem] Rotation <= RotationEulerXYZ [RotationEulerSystem] Rotation <= RotationEulerXZY [RotationEulerSystem] Rotation <= RotationEulerYXZ [RotationEulerSystem] Rotation <= RotationEulerYZX [RotationEulerSystem] Rotation <= RotationEulerZXY [RotationEulerSystem] Rotation <= RotationEulerZYX e.g. If the following components are present... (Entity) LocalToWorld Translation Rotation RotationEulerXYZ ...then the transform system will: [RotationEulerSystem] Write Rotation <= RotationEulerXYZ [TRSToLocalToWorldSystem] Write LocalToWorld <= Translation * Rotation * Scale It is a setup error to have more than one RotationEuler*** component is associated with the same Entity, however the result is defined. The first to be found in the order of precedence will be applied. That order is: RotationEulerXYZ RotationEulerXZY RotationEulerYXZ RotationEulerYZX RotationEulerZXY RotationEulerZYX For more complex Rotation requirements, a CompositeRotation (float4x4) component may be used as an alternative to Rotation. All of the combinations which are valid for Rotation are also valid for CompositeRotation. i.e. [TRSToLocalToWorldSystem] LocalToWorld <= Translation * CompositeRotation [TRSToLocalToWorldSystem] LocalToWorld <= Translation * CompositeRotation * Scale [TRSToLocalToWorldSystem] LocalToWorld <= CompositeRotation [TRSToLocalToWorldSystem] LocalToWorld <= CompositeRotation * Scale [TRSToLocalToWorldSystem] LocalToWorld <= Translation * CompositeRotation [TRSToLocalToWorldSystem] LocalToWorld <= Translation * CompositeRotation * NonUniformScale [TRSToLocalToWorldSystem] LocalToWorld <= CompositeRotation [TRSToLocalToWorldSystem] LocalToWorld <= CompositeRotation * NonUniformScale The CompositeRotation component may be written to directly as a float4x4 by user code. However, if a Maya/FBX-style interface is preferred, components are available which will write to the CompositeRotation component if present. CompositeRotation = RotationPivotTranslation * RotationPivot * Rotation * PostRotation * RotationPivot^-1 If any combination of RotationPivotTranslation (float3), RotationPivot (float3), Rotation (quaternion), or PostRotation (quaternion) components are present along with a CompositeRotation component, a transform system will combine those components and write to CompositeRotation. Concretely, each of these component combinations will write to CompositeRotation as: [CompositeRotationSystem] CompositeRotation <= RotationPivotTranslation [CompositeRotationSystem] CompositeRotation <= RotationPivotTranslation * RotationPivot * Rotation * RotationPivot^-1 [CompositeRotationSystem] CompositeRotation <= RotationPivotTranslation * RotationPivot * Rotation * PostRotation * RotationPivot^-1 [CompositeRotationSystem] CompositeRotation <= RotationPivotTranslation * RotationPivot * PostRotation * RotationPivot^-1 [CompositeRotationSystem] CompositeRotation <= RotationPivotTranslation * Rotation [CompositeRotationSystem] CompositeRotation <= RotationPivotTranslation * Rotation * PostRotation [CompositeRotationSystem] CompositeRotation <= RotationPivotTranslation * PostRotation [CompositeRotationSystem] CompositeRotation <= RotationPivot * Rotation * RotationPivot^-1 [CompositeRotationSystem] CompositeRotation <= RotationPivot * Rotation * PostRotation * RotationPivot^-1 [CompositeRotationSystem] CompositeRotation <= PostRotation [CompositeRotationSystem] CompositeRotation <= Rotation [CompositeRotationSystem] CompositeRotation <= Rotation * PostRotation Cases where RotationPivot is specified without either of Rotation, PostRotation have no additional affect on CompositeRotation. Note that since Rotation is re-used as a source for CompositeRotation, the alternative data interfaces to Rotation are still available. e.g. If the following components are present... (Entity) LocalToWorld Translation CompositeRotation Rotation RotationPivotTranslation RotationPivot PostRotation RotationEulerXYZ Scale ...then the transform system will: [CompositeRotationSystem] Write CompositeRotation <= RotationPivotTranslation * RotationPivot * Rotation * PostRotation * RotationPivot^-1 [TRSToLocalToWorldSystem] Write LocalToWorld <= Translation * CompositeRotation * Scale The PostRotation component may be written to directly as a quaternion by user code. However, if an Euler interface is preferred, components are available for each rotation order which will cause a write to the PostRotation component if present. [PostRotationEulerSystem] PostRotation <= PostRotationEulerXYZ [PostRotationEulerSystem] PostRotation <= PostRotationEulerXZY [PostRotationEulerSystem] PostRotation <= PostRotationEulerYXZ [PostRotationEulerSystem] PostRotation <= PostRotationEulerYZX [PostRotationEulerSystem] PostRotation <= PostRotationEulerZXY [PostRotationEulerSystem] PostRotation <= PostRotationEulerZYX e.g. If the following components are present... (Entity) LocalToWorld Translation CompositeRotation Rotation RotationPivotTranslation RotationPivot RotationEulerXYZ PostRotation PostRotationEulerXYZ Scale ...then the transform system will: [RotationEulerSystem] Write Rotation <= RotationEulerXYZ [PostRotationEulerSystem] Write PostRotation <= PostRotationEulerXYZ [CompositeRotationSystem] Write CompositeRotation <= RotationPivotTranslation * RotationPivot * Rotation * PostRotation * RotationPivot^-1 [TRSToLocalToWorldSystem] Write LocalToWorld <= Translation * CompositeRotation * Scale For more complex Scale requirements, a CompositeScale (float4x4) component may be used as an alternative to Scale (or NonUniformScale). All of the combinations which are valid for Scale or NonUniformScale are also valid for CompositeScale. i.e. [TRSToLocalToWorldSystem] LocalToWorld <= Translation * Rotation * CompositeScale [TRSToLocalToWorldSystem] LocalToWorld <= Rotation * CompositeScale [TRSToLocalToWorldSystem] LocalToWorld <= CompositeScale [TRSToLocalToWorldSystem] LocalToWorld <= Translation * CompositeRotation * CompositeScale [TRSToLocalToWorldSystem] LocalToWorld <= CompositeRotation * CompositeScale The CompositeScale component may be written to directly as a float4x4 by user code. However, if a Maya/FBX-style interface is preferred, components are available which will write to the CompositeScale component if present. CompositeScale = ScalePivotTranslation * ScalePivot * Scale * ScalePivot^-1 CompositeScale = ScalePivotTranslation * ScalePivot * NonUniformScale * ScalePivot^-1 If any combination of ScalePivotTranslation (float3), ScalePivot (float3), Scale (float) components are present along with a CompositeScale component, a transform system will combine those components and write to CompositeScale. Alternatively, if any combination of ScalePivotTranslation (float3), ScalePivot (float3), NonUniformScale (float3) components are present along with a CompositeScale component, a transform system will combine those components and write to CompositeScale. Concretely, each of these component combinations will write to CompositeRotation as: [CompositeScaleSystem] CompositeScale <= ScalePivotTranslation [CompositeScaleSystem] CompositeScale <= ScalePivotTranslation * ScalePivot * Scale * ScalePivot^-1 [CompositeScaleSystem] CompositeScale <= ScalePivotTranslation * Scale [CompositeScaleSystem] CompositeScale <= ScalePivot * Scale * ScalePivot^-1 [CompositeScaleSystem] CompositeScale <= Scale [CompositeScaleSystem] CompositeScale <= ScalePivotTranslation * ScalePivot * NonUniformScale * ScalePivot^-1 [CompositeScaleSystem] CompositeScale <= ScalePivotTranslation * Scale [CompositeScaleSystem] CompositeScale <= ScalePivot * NonUniformScale * ScalePivot^-1 [CompositeScaleSystem] CompositeScale <= NonUniformScale Cases where ScalePivot is specified without either of Scale, NonUniformScale have no additional effect have no additional affect on CompositeScale. e.g. If the following components are present... (Entity) LocalToWorld Translation CompositeRotation Rotation RotationPivotTranslation RotationPivot RotationEulerXYZ PostRotation PostRotationEulerXYZ CompositeScale Scale ScalePivotTranslation ScalePivot ...then the transform system will: [RotationEulerSystem] Write Rotation <= RotationEulerXYZ [PostRotationEulerSystem] Write PostRotation <= PostRotationEulerXYZ [CompositeScaleSystem] Write CompositeScale <= ScalePivotTranslation * ScalePivot * Scale * ScalePivot^-1 [CompositeRotationSystem] Write CompositeRotation <= RotationPivotTranslation * RotationPivot * Rotation * PostRotation * RotationPivot^-1 [TRSToLocalToWorldSystem] Write LocalToWorld <= Translation * CompositeRotation * CompositeScale Section 5: Hierarchical Transforms (Advanced) Note Advanced Hierarchical transform component rules largely mirror the use of the non-hierarchical components, except that they are writing to LocalToParent (instead of LocalToWorld.) The main additional component unique to hierarchical transforms is ParentScaleInverse. NonUniformScale (float3) as an alternative to Scale to specify scale per-axis. Note that not all DOTS features fully support non-uniform scale. Be sure to check those features’ documentation to understand their limitations. [TRSToLocalToParentSystem] LocalToParent <= Translation [TRSToLocalToParentSystem] LocalToParent <= Translation * Rotation [TRSToLocalToParentSystem] LocalToParent <= Translation * Rotation * NonUniformScale [TRSToLocalToParentSystem] LocalToParent <= Rotation [TRSToLocalToParentSystem] LocalToParent <= Rotation * NonUniformScale [TRSToLocalToParentSystem] LocalToParent <= NonUniformScale The presence of both Scale and NonUniform scale is not a valid case, but the result is defined. Scale will be used, NonUniformScale will be ignored. e.g. If the following components are present... Parent (Entity) Child (Entity) LocalToWorld LocalToWorld Translation LocalToParent Rotation Parent Scale PreviousParent* Child* Translation Rotation NonUniformScale ...then the transform system will: [TRSToLocalToWorldSystem] Parent: Write LocalToWorld as defined above in \"Non-hierarchical Transforms (Basic)\" [TRSToLocalToParentSystem] Child: Write LocalToParent <= Translation * Rotation * NonUniformScale [LocalToParentSystem] Child: Write LocalToWorld <= LocalToWorld[Parent] * LocalToParent Parent LocalToWorld is multiplied with the Child LocalToWorld, which includes any scaling. However, if removing Parent scale is preferred (AKA Scale Compensate), ParentScaleInverse is available for that purpose. [TRSToLocalToParentSystem] LocalToParent <= ParentScaleInverse [TRSToLocalToParentSystem] LocalToParent <= Translation * ParentScaleInverse [TRSToLocalToParentSystem] LocalToParent <= Translation * ParentScaleInverse * Rotation [TRSToLocalToParentSystem] LocalToParent <= Translation * ParentScaleInverse * Rotation * NonUniformScale [TRSToLocalToParentSystem] LocalToParent <= Translation * ParentScaleInverse * CompositeRotation [TRSToLocalToParentSystem] LocalToParent <= Translation * ParentScaleInverse * CompositeRotation * NonUniformScale [TRSToLocalToParentSystem] LocalToParent <= Translation * ParentScaleInverse * Rotation * Scale [TRSToLocalToParentSystem] LocalToParent <= Translation * ParentScaleInverse * CompositeRotation * Scale [TRSToLocalToParentSystem] LocalToParent <= Translation * ParentScaleInverse * Rotation * CompositeScale [TRSToLocalToParentSystem] LocalToParent <= Translation * ParentScaleInverse * CompositeRotation * CompositeScale [TRSToLocalToParentSystem] LocalToParent <= ParentScaleInverse * Rotation [TRSToLocalToParentSystem] LocalToParent <= ParentScaleInverse * Rotation * NonUniformScale [TRSToLocalToParentSystem] LocalToParent <= ParentScaleInverse * CompositeRotation * NonUniformScale [TRSToLocalToParentSystem] LocalToParent <= ParentScaleInverse * Rotation * Scale [TRSToLocalToParentSystem] LocalToParent <= ParentScaleInverse * CompositeRotation [TRSToLocalToParentSystem] LocalToParent <= ParentScaleInverse * CompositeRotation * Scale [TRSToLocalToParentSystem] LocalToParent <= ParentScaleInverse * Rotation * CompositeScale [TRSToLocalToParentSystem] LocalToParent <= ParentScaleInverse * CompositeRotation * CompositeScale Inverse of any explicitly assigned parent scale values if present are written to ParentScaleInverse, as: [ParentScaleInverseSystem] ParentScaleInverse <= CompositeScale[Parent]^-1 [ParentScaleInverseSystem] ParentScaleInverse <= Scale[Parent]^-1 [ParentScaleInverseSystem] ParentScaleInverse <= NonUniformScale[Parent]^-1 If LocalToWorld[Parent] is written directly by the user, or scaling is otherwise applied in a way that is not explicitly using the scale components, then nothing is written to the ParentScaleInverse. It is the responsibility of the system applying that scaling to write inverse to ParentScaleInverse. The results of a system not updating ParentScaleInverse in this case are undefined. e.g. If the following components are present... Parent (Entity) Child (Entity) LocalToWorld LocalToWorld Translation LocalToParent Rotation Parent Scale PreviousParent* Child* Translation Rotation ParentScaleInverse ...then the transform system will: [TRSToLocalToWorldSystem] Parent: Write LocalToWorld as defined above in \"Non-hierarchical Transforms (Basic)\" [ParentScaleInverseSystem] Child: ParentScaleInverse <= Scale[Parent]^-1 [TRSToLocalToParentSystem] Child: Write LocalToParent <= Translation * ParentScaleInverse * Rotation [LocalToParentSystem] Child: Write LocalToWorld <= LocalToWorld[Parent] * LocalToParent The Rotation component may be written to directly as a quaternion by user code. However, if an Euler interface is preferred, components are available for each rotation order which will cause a write to the Rotation component if present. [RotationEulerSystem] Rotation <= RotationEulerXYZ [RotationEulerSystem] Rotation <= RotationEulerXZY [RotationEulerSystem] Rotation <= RotationEulerYXZ [RotationEulerSystem] Rotation <= RotationEulerYZX [RotationEulerSystem] Rotation <= RotationEulerZXY [RotationEulerSystem] Rotation <= RotationEulerZYX e.g. If the following components are present... Parent (Entity) Child (Entity) LocalToWorld LocalToWorld Translation LocalToParent Rotation Parent Scale PreviousParent* Child* Translation Rotation RotationEulerXYZ ...then the transform system will: [TRSToLocalToWorldSystem] Parent: Write LocalToWorld as defined above in \"Non-hierarchical Transforms (Basic)\" [RotationEulerSystem] Child: Write Rotation <= RotationEulerXYZ [TRSToLocalToParentSystem] Child: Write LocalToParent <= Translation * Rotation [LocalToParentSystem] Child: Write LocalToWorld <= LocalToWorld[Parent] * LocalToParent For more complex Rotation requirements, a CompositeRotation (float4x4) component may be used as an alternative to Rotation. All of the combinations which are valid for Rotation are also valid for CompositeRotation. i.e. [TRSToLocalToParentSystem] LocalToParent <= Translation * CompositeRotation [TRSToLocalToParentSystem] LocalToParent <= Translation * CompositeRotation * Scale [TRSToLocalToParentSystem] LocalToParent <= Translation * CompositeRotation * NonUniformScale [TRSToLocalToParentSystem] LocalToParent <= Translation * CompositeRotation * CompositeScale [TRSToLocalToParentSystem] LocalToParent <= Translation * ParentScaleInverse * CompositeRotation [TRSToLocalToParentSystem] LocalToParent <= Translation * ParentScaleInverse * CompositeRotation * Scale [TRSToLocalToParentSystem] LocalToParent <= Translation * ParentScaleInverse * CompositeRotation * NonUniformScale [TRSToLocalToParentSystem] LocalToParent <= Translation * ParentScaleInverse * CompositeRotation * CompositeScale [TRSToLocalToParentSystem] LocalToParent <= ParentScaleInverse * CompositeRotation [TRSToLocalToParentSystem] LocalToParent <= ParentScaleInverse * CompositeRotation * Scale [TRSToLocalToParentSystem] LocalToParent <= ParentScaleInverse * CompositeRotation * NonUniformScale [TRSToLocalToParentSystem] LocalToParent <= ParentScaleInverse * CompositeRotation * CompositeScale [TRSToLocalToParentSystem] LocalToParent <= CompositeRotation [TRSToLocalToParentSystem] LocalToParent <= CompositeRotation * Scale [TRSToLocalToParentSystem] LocalToParent <= CompositeRotation * NonUniformScale [TRSToLocalToParentSystem] LocalToParent <= CompositeRotation * CompositeScale The CompositeRotation component may be written to directly as a float4x4 by user code. However, if a Maya/FBX-style interface is preferred, components are available which will write to the CompositeRotation component if present. CompositeRotation = RotationPivotTranslation * RotationPivot * Rotation * PostRotation * RotationPivot^-1 If any combination of RotationPivotTranslation (float3), RotationPivot (float3), Rotation (quaternion), or PostRotation (quaternion) components are present along with a CompositeRotation component, a transform system will combine those components and write to CompositeRotation. Concretely, each of these component combinations will write to CompositeRotation as: [CompositeRotationSystem] CompositeRotation <= RotationPivotTranslation [CompositeRotationSystem] CompositeRotation <= RotationPivotTranslation * RotationPivot * Rotation * RotationPivot^-1 [CompositeRotationSystem] CompositeRotation <= RotationPivotTranslation * RotationPivot * Rotation * PostRotation * RotationPivot^-1 [CompositeRotationSystem] CompositeRotation <= RotationPivotTranslation * RotationPivot * PostRotation * RotationPivot^-1 [CompositeRotationSystem] CompositeRotation <= RotationPivotTranslation * Rotation [CompositeRotationSystem] CompositeRotation <= RotationPivotTranslation * Rotation * PostRotation [CompositeRotationSystem] CompositeRotation <= RotationPivotTranslation * PostRotation [CompositeRotationSystem] CompositeRotation <= RotationPivot * Rotation * RotationPivot^-1 [CompositeRotationSystem] CompositeRotation <= RotationPivot * Rotation * PostRotation * RotationPivot^-1 [CompositeRotationSystem] CompositeRotation <= PostRotation [CompositeRotationSystem] CompositeRotation <= Rotation [CompositeRotationSystem] CompositeRotation <= Rotation * PostRotation Cases where RotationPivot is specified without either of Rotation, PostRotation have no additional affect on CompositeRotation. Note that since Rotation is re-used as a source for CompositeRotation, the alternative data interfaces to Rotation are still available. e.g. If the following components are present... Parent (Entity) Child (Entity) LocalToWorld LocalToWorld Translation LocalToParent Rotation Parent Scale PreviousParent* Child* Translation CompositeRotation Rotation RotationPivotTranslation RotationPivot PostRotation RotationEulerXYZ Scale ...then the transform system will: [TRSToLocalToWorldSystem] Parent: Write LocalToWorld as defined above in \"Non-hierarchical Transforms (Basic)\" [RotationEulerSystem] Child: Write Rotation <= RotationEulerXYZ [CompositeRotationSystem] Child: Wirte CompositeRotation <= RotationPivotTranslation * RotationPivot * Rotation * PostRotation * RotationPivot^-1 [TRSToLocalToParentSystem] Child: Write LocalToParent <= Translation * CompositeRotation * Scale [LocalToParentSystem] Child: Write LocalToWorld <= LocalToWorld[Parent] * LocalToParent The PostRotation component may be written to directly as a quaternion by user code. However, if an Euler interface is preferred, components are available for each rotation order which will cause a write to the PostRotation component if present. [PostRotationEulerSystem] PostRotation <= PostRotationEulerXYZ [PostRotationEulerSystem] PostRotation <= PostRotationEulerXZY [PostRotationEulerSystem] PostRotation <= PostRotationEulerYXZ [PostRotationEulerSystem] PostRotation <= PostRotationEulerYZX [PostRotationEulerSystem] PostRotation <= PostRotationEulerZXY [PostRotationEulerSystem] PostRotation <= PostRotationEulerZYX e.g. If the following components are present... Parent (Entity) Child (Entity) LocalToWorld LocalToWorld Translation LocalToParent Rotation Parent Scale PreviousParent* Child* Translation CompositeRotation Rotation RotationPivotTranslation RotationPivot PostRotation RotationEulerXYZ Scale PostRotationEulerXYZ ...then the transform system will: [TRSToLocalToWorldSystem] Parent: Write LocalToWorld as defined above in \"Non-hierarchical Transforms (Basic)\" [PostRotationEulerSystem] Child: Write PostRotation <= PostRotationEulerXYZ [RotationEulerSystem] Child: Write Rotation <= RotationEulerXYZ [CompositeRotationSystem] Child: Wirte CompositeRotation <= RotationPivotTranslation * RotationPivot * Rotation * PostRotation * RotationPivot^-1 [TRSToLocalToParentSystem] Child: Write LocalToParent <= Translation * CompositeRotation * Scale [LocalToParentSystem] Child: Write LocalToWorld <= LocalToWorld[Parent] * LocalToParent It is a setup error to have more than one PostRotationEuler*** component is associated with the same Entity, however the result is defined. The first to be found in the order of precedence will be applied. That order is: PostRotationEulerXYZ PostRotationEulerXZY PostRotationEulerYXZ PostRotationEulerYZX PostRotationEulerZXY PostRotationEulerZYX For more complex Scale requirements, a CompositeScale (float4x4) component may be used as an alternative to Scale (or NonUniformScale). All of the combinations which are valid for Scale or NonUniformScale are also valid for CompositeScale. i.e. [TRSToLocalToParentSystem] LocalToParent <= Translation * Rotation * CompositeScale [TRSToLocalToParentSystem] LocalToParent <= Rotation * CompositeScale [TRSToLocalToParentSystem] LocalToParent <= CompositeScale [TRSToLocalToParentSystem] LocalToParent <= Translation * CompositeRotation * CompositeScale [TRSToLocalToParentSystem] LocalToParent <= CompositeRotation * CompositeScale [TRSToLocalToParentSystem] LocalToParent <= Translation * ParentScaleInverse * Rotation * CompositeScale [TRSToLocalToParentSystem] LocalToParent <= Translation * ParentScaleInverse * CompositeRotation * CompositeScale [TRSToLocalToParentSystem] LocalToParent <= ParentScaleInverse * Rotation * CompositeScale [TRSToLocalToParentSystem] LocalToParent <= ParentScaleInverse * CompositeRotation * CompositeScale [TRSToLocalToParentSystem] LocalToParent <= ParentScaleInverse * CompositeScale The CompositeScale component may be written to directly as a float4x4 by user code. However, if a Maya/FBX-style interface is preferred, components are available which will write to the CompositeScale component if present. CompositeScale = ScalePivotTranslation * ScalePivot * Scale * ScalePivot^-1 CompositeScale = ScalePivotTranslation * ScalePivot * NonUniformScale * ScalePivot^-1 If any combination of ScalePivotTranslation (float3), ScalePivot (float3), Scale (float) components are present along with a CompositeScale component, a transform system will combine those components and write to CompositeScale. Alternatively, if any combination of ScalePivotTranslation (float3), ScalePivot (float3), NonUniformScale (float3) components are present along with a CompositeScale component, a transform system will combine those components and write to CompositeScale. Concretely, each of these component combinations will write to CompositeRotation as: [CompositeScaleSystem] CompositeScale <= ScalePivotTranslation [CompositeScaleSystem] CompositeScale <= ScalePivotTranslation * ScalePivot * Scale * ScalePivot^-1 [CompositeScaleSystem] CompositeScale <= ScalePivotTranslation * Scale [CompositeScaleSystem] CompositeScale <= ScalePivot * Scale * ScalePivot^-1 [CompositeScaleSystem] CompositeScale <= Scale [CompositeScaleSystem] CompositeScale <= ScalePivotTranslation * ScalePivot * NonUniformScale * ScalePivot^-1 [CompositeScaleSystem] CompositeScale <= ScalePivotTranslation * Scale [CompositeScaleSystem] CompositeScale <= ScalePivot * NonUniformScale * ScalePivot^-1 [CompositeScaleSystem] CompositeScale <= NonUniformScale Cases where ScalePivot is specified without either of Scale, NonUniformScale have no additional effect have no additional affect on CompositeScale. e.g. If the following components are present... Parent (Entity) Child (Entity) LocalToWorld LocalToWorld Translation LocalToParent Rotation Parent Scale PreviousParent* Child* Translation CompositeRotation Rotation RotationPivotTranslation RotationPivot PostRotation RotationEulerXYZ Scale PostRotationEulerXYZ CompositeScale ScalePivotTranslation ScalePivot ...then the transform system will: [TRSToLocalToWorldSystem] Parent: Write LocalToWorld as defined above in \"Non-hierarchical Transforms (Basic)\" [PostRotationEulerSystem] Child: Write PostRotation <= PostRotationEulerXYZ [RotationEulerSystem] Child: Write Rotation <= RotationEulerXYZ [CompositeRotationSystem] Child: Wirte CompositeRotation <= RotationPivotTranslation * RotationPivot * Rotation * PostRotation * RotationPivot^-1 [TRSToLocalToParentSystem] Child: Write LocalToParent <= Translation * CompositeRotation * Scale [LocalToParentSystem] Child: Write LocalToWorld <= LocalToWorld[Parent] * LocalToParent ...then the transform system will: [TRSToLocalToWorldSystem] Parent: Write LocalToWorld as defined above in \"Non-hierarchical Transforms (Basic)\" [PostRotationEulerSystem] Child: Write PostRotation <= PostRotationEulerXYZ [RotationEulerSystem] Child: Write Rotation <= RotationEulerXYZ [CompositeScaleSystem] Child: Write CompositeScale <= ScalePivotTranslation * ScalePivot * Scale * ScalePivot^-1 [CompositeRotationSystem] Child: Wirte CompositeRotation <= RotationPivotTranslation * RotationPivot * Rotation * PostRotation * RotationPivot^-1 [TRSToLocalToParentSystem] Child: Write LocalToParent <= Translation * CompositeRotation * Scale [LocalToParentSystem] Child: Write LocalToWorld <= LocalToWorld[Parent] * LocalToParent Section 6: Custom Transforms (Advanced) There are two methods for writing user-defined transforms that are fully compatible with the transform system. Overriding transform components Extending transform components Overriding transform components A user component (UserComponent) is defined and added to the LocalToWorld WriteGroup, as in: [Serializable] [WriteGroup(typeof(LocalToWorld))] struct UserComponent : IComponentData { } Overriding transform components means that no additional extensions are possible. The user defined transform is the only transform that can occur with the specified user component. In the UserTransformSystem, use the default query method to request write access to LocalToWorld. e.g. public class UserTransformSystem : SystemBase { protected override void OnUpdate() { Entities .ForEach( (ref LocalToWorld localToWorld, in UserComponent userComponent)=>{ localToWorld.Value = ... // Assign localToWorld as needed for UserTransform }).ScheduleParallel(); } } All other transform components which write to LocalToWorld will be ignored by the transform system where UserComponent is included. e.g. If the following components are present... (Entity) LocalToWorld Translation Rotation Scale UserComponent ...then: [TRSToLocalToWorldSystem] Will not run on this Entity [UserTransformSystem] Will run on this Entity However, unexpected behavior may result if two different systems both override LocalToWorld and both components are present. e.g. e.g. If there is an additional: [Serializable] [WriteGroup(typeof(LocalToWorld))] struct UserComponent2 : IComponentData { } And the equivalent system: public class UserTransformSystem2 : SystemBase { protected override void OnUpdate() { Entities .ForEach( (ref LocalToWorld localToWorld, in UserComponent2 userComponent2)=>{ localToWorld.Value = ... // Assign localToWorld as needed for UserTransform }).ScheduleParallel(); } } Then if the following components are present... (Entity) LocalToWorld Translation Rotation Scale UserComponent UserComponent2 Both systems will attempt to write to LocalToWorld, likely resulting in unexpected behavior. This may not be an issue in context. Extending transform components In order to ensure that multiple overridden transform components can interact in a way which is well-defined, a WriteGroup query can be used to only explicitly match the requested components. e.g. If there is a: [Serializable] [WriteGroup(typeof(LocalToWorld))] struct UserComponent : IComponentData { } And a system which filters based on the WriteGroup of LocalToWorld: public class UserTransformSystem : SystemBase { protected override void OnUpdate() { Entities .WithEntityQueryOptions(EntityQueryOptions.FilterWriteGroup) .ForEach( (ref LocalToWorld localToWorld, in UserComponent userComponent)=>{ localToWorld.Value = ... // Assign localToWorld as needed for UserTransform }).ScheduleParallel(); } } m_Query in UserTransformSystem will only match the explicitly mentioned components. For instance, the following with match and be included in the EntityQuery: (Entity) LocalToWorld UserComponent But this will not: (Entity) LocalToWorld Translation Rotation Scale UserComponent The implicit expectation is that UserComponent is a completely orthogonal set of requirements to write to LocalToWorld, so no other (unstated) components which are in the same WriteGroup should be present. However, they may be explicitly supported by UserComponent systems by adding to the queries, as: public class UserTransformExtensionSystem : SystemBase { protected override void OnUpdate() { Entities .WithEntityQueryOptions(EntityQueryOptions.FilterWriteGroup) .ForEach( (ref LocalToWorld localToWorld, in UserComponent userComponent, in Translation translation, in Rotation rotation, in Scale scale) => { localToWorld.Value = ... // Assign localToWorld as needed for UserTransform }).ScheduleParallel(); } } In the same way, if there is an additional: [Serializable] [WriteGroup(typeof(LocalToWorld))] struct UserComponent2 : IComponentData { } And there is: (Entity) LocalToWorld UserComponent UserComponent2 The UserTransformSystem defined above would not match, since UserComponent2 is not explicitly mentioned and it is in the LocalToWorld WriteGroup. However, an explicit query can be created which can resolve the case and ensure the behavior is well defined. As in: public class UserTransformComboSystem : SystemBase { protected override void OnUpdate() { Entities .ForEach( (ref LocalToWorld localToWorld, in UserComponent userComponent, in UserComponent2 userComponent2)=>{ localToWorld.Value = ... // Assign localToWorld as needed for UserTransform }).ScheduleParallel(); } } Then the following systems (or equivalents): UserTransformSystem (LocalToWorld FilterWriteGroup:UserComponent) UserTransformSystem2 (LocalToWorld FilterWriteGroup:UserComponent2) UserTransformComboSystem (LocalToWorld FilterWriteGroup:UserComponent, UserComponent2) Will all run side-by-side, query and run on their respective component archetypes, and have well-defined behavior. Section 7: Relationship to Maya transform nodes For reference on Maya transform nodes, see: https://download.autodesk.com/us/maya/2010help/Nodes/transform.html Maya Transformation Matrix is defined as: matrix = SP^-1 * S * SH * SP * ST * RP^-1 * RA * R * RP * RT * T These can be mapped to transform components as follows: Maya Unity T Translation (RT * RP * R * RA * RP^-1) CompositeRotation RT RotationPivotTranslation RP RotationPivot R Rotation RA PostRotation (ST * SP * S * SP^-1) CompositeScale ST ScalePivotTranslation SP ScalePivot SH --- Unused --- S NonUniformScale"
  },
  "manual/version_numbers.html": {
    "href": "manual/version_numbers.html",
    "title": "Version numbers | Entities | 0.17.0-preview.18",
    "keywords": "Version numbers Version numbers (also known as generations) detect potential changes. You can use them to implement efficient optimization strategies, such as to skip processing when data hasn't changed since the last frame of the application. It's useful to perform quick version checks on entities to improve the performance of your application. This page outlines all of the different version numbers ECS uses, and the conditions that causes them to change. All version numbers are 32-bit signed integers. They always increase unless they wrap around: signed integer overflow is defined behavior in C#. This means that to compare version numbers, you should use the (in)equality operator, not relational operators. For example, the correct way to check if VersionB is more recent than VersionA is to use the following: bool VersionBIsMoreRecent = (VersionB - VersionA) > 0; There is usually no guarantee how much a version number increases by. EntityId.Version An EntityId is made of an index and a version number. Because ECS recycles indices, the version number is increased in EntityManager every time the entity is destroyed. If there is a mismatch in the version numbers when an EntityId is looked up in EntityManager , it means that the entity referred to doesn’t exist anymore. For example, before you fetch the position of the enemy that a unit is tracking via an EntityId , you can call ComponentDataFromEntity.Exists . This uses the version number to check if the entity still exists. World.Version ECS increases the version number of a World every time it creates or destroys a manager (i.e. system). EntityDataManager.GlobalVersion EntityDataManager.GlobalVersion is increased before every job component system update. You should use this version number in conjunction with System.LastSystemVersion . System.LastSystemVersion System.LastSystemVersion takes the value of EntityDataManager.GlobalVersion after every job component system update. You should use this version number in conjunction with Chunk.ChangeVersion[] . Chunk.ChangeVersion For each component type in the archetype, this array contains the value of EntityDataManager.GlobalVersion at the time the component array was last accessed as writeable within this chunk. This does not guarantee that anything has changed, only that it might have changed. You can never access shared components as writeable, even if there is a version number stored for those too: it serves no purpose. When you use the WithChangeFilter() function in an Entities.ForEach construction, ECS compares the Chunk.ChangeVersion for that specific component to System.LastSystemVersion , and it only processes chunks whose component arrays have been accessed as writeable after the system last started running. For example, if the amount of health points of a group of units is guaranteed not to have changed since the previous frame, you can skip checking if those units should update their damage model. EntityManager.m_ComponentTypeOrderVersion[] For each non-shared component type, ECS increases the version number every time an iterator involving that type becomes invalid. In other words, anything that might modify arrays of that type (not instances). For example, if you have static objects that a particular component identifies, and a per-chunk bounding box, you only need to update those bounding boxes if the type order version changes for that component. SharedComponentDataManager.m_SharedComponentVersion[] These version numbers increase when any structural change happens to the entities stored in a chunk that reference the shared component. For example, if you keep a count of entities per shared component, you can rely on that version number to only redo each count if the corresponding version number changes."
  },
  "manual/world.html": {
    "href": "manual/world.html",
    "title": "World | Entities | 0.17.0-preview.18",
    "keywords": "World A World organizes entities into isolated groups. A world owns both an EntityManager and a set of Systems . Entities created in one world only have meaning in that world, but can be transfered to other worlds (with EntityManager.MoveEntitiesFrom ). Systems can only access entities in the same world. You can create as many worlds as you like. By default Unity creates a default World when your application starts up (or you enter Play Mode ). Unity instantiates all systems (classes that extend ComponentSystemBase ) and adds them to this default world. Unity also creates specialized worlds in the Editor. For example, it creates an Editor world for entities and systems that run only in the Editor, not in playmode and also creates conversion worlds for managing the conversion of GameObjects to entities. See WorldFlags for examples of different types of worlds that can be created. Use World.DefaultGameObjectInjectionWorld to access the default world. Managing systems The World object provides methods for creating, accessing and removing systems from the world. In most cases, you can use GetOrCreateSystem to get an instance of a system (creating an instance if one doesn't already exist). Time The value of the Time property of systems is controlled by the World a system is in. By default, Unity creates a TimeData entity for each world, which is updated by a UpdateWorldTimeSystem instance to reflect the elapsed time since the previous frame. A system's Time property is an alias for the current world time. The FixedStepSimulationSystemGroup treats time differently than other system groups. Instead of updating once at the current delta time, systems in the fixed step simulation group update at a fixed interval and might update more than once per frame if the fixed interval is a small enough fraction of the frame time. If you need finer control of time in a World , you can specify a time value directly with World.SetTime . You can also PushTime to temporarily change the world time and then PopTime to return to the previous time (in a time stack). Custom initialization To initialize you game manually at startup, you can implement the ICustomBootstrap interface. Unity runs your ICustomBootstrap implementation with the default world so that you can modify or entirely replace the system creation and initialization sequence. You can also disable the default World creation entirely by defining the following global symbols: #UNITY_DISABLE_AUTOMATIC_SYSTEM_BOOTSTRAP_RUNTIME_WORLD disables generation of the default runtime World. #UNITY_DISABLE_AUTOMATIC_SYSTEM_BOOTSTRAP_EDITOR_WORLD disables generation of the default Editor World. #UNITY_DISABLE_AUTOMATIC_SYSTEM_BOOTSTRAP disables generation of both default Worlds. Your code is then responsible for creating any needed worlds, as well as instantiating and updating systems. You can use the Unity scriptable PlayerLoop to modify the normal Unity player loop so that your systems are updated when required."
  }
}