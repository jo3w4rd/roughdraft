{
  "manual/version_numbers.html": {
    "href": "manual/version_numbers.html",
    "title": "Version numbers | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Version numbers Version numbers (also known as generations) detect potential changes. You can use them to implement efficient optimization strategies, such as to skip processing when data hasn't changed since the last frame of the application. It's useful to perform quick version checks on entities to improve the performance of your application. This page outlines all of the different version numbers ECS uses, and the conditions that causes them to change. All version numbers are 32-bit signed integers. They always increase unless they wrap around: signed integer overflow is defined behavior in C#. This means that to compare version numbers, you should use the (in)equality operator, not relational operators. For example, the correct way to check if VersionB is more recent than VersionA is to use the following: bool VersionBIsMoreRecent = (VersionB - VersionA) > 0; There is usually no guarantee how much a version number increases by. EntityId.Version An EntityId is made of an index and a version number. Because ECS recycles indices, the version number is increased in EntityManager every time the entity is destroyed. If there is a mismatch in the version numbers when an EntityId is looked up in EntityManager , it means that the entity referred to doesn’t exist anymore. For example, before you fetch the position of the enemy that a unit is tracking via an EntityId , you can call ComponentDataFromEntity.Exists . This uses the version number to check if the entity still exists. World.Version ECS increases the version number of a World every time it creates or destroys a manager (i.e. system). EntityDataManager.GlobalVersion EntityDataManager.GlobalVersion is increased before every job component system update. You should use this version number in conjunction with System.LastSystemVersion . System.LastSystemVersion System.LastSystemVersion takes the value of EntityDataManager.GlobalVersion after every job component system update. You should use this version number in conjunction with Chunk.ChangeVersion[] . Chunk.ChangeVersion For each component type in the archetype, this array contains the value of EntityDataManager.GlobalVersion at the time the component array was last accessed as writeable within this chunk. This does not guarantee that anything has changed, only that it might have changed. You can never access shared components as writeable, even if there is a version number stored for those too: it serves no purpose. When you use the WithChangeFilter() function in an Entitis.ForEach construction, ECS compares the Chunk.ChangeVersion for that specific component to System.LastSystemVersion , and it only processes chunks whose component arrays have been accessed as writeable after the system last started running. For example, if the amount of health points of a group of units is guaranteed not to have changed since the previous frame, you can skip checking if those units should update their damage model. EntityManager.m_ComponentTypeOrderVersion[] For each non-shared component type, ECS increases the version number every time an iterator involving that type becomes invalid. In other words, anything that might modify arrays of that type (not instances). For example, if you have static objects that a particular component identifies, and a per-chunk bounding box, you only need to update those bounding boxes if the type order version changes for that component. SharedComponentDataManager.m_SharedComponentVersion[] These version numbers increase when any structural change happens to the entities stored in a chunk that reference the shared component. For example, if you keep a count of entities per shared component, you can rely on that version number to only redo each count if the corresponding version number changes."
  },
  "manual/transform_system.html": {
    "href": "manual/transform_system.html",
    "title": "TransformSystem | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "TransformSystem Section 1: Non-hierarchical Transforms (Basic) LocalToWorld (float4x4) represents the transform from local space to world space. It is the canonical representation and is the only component and can be relied upon to communicate local space among systems. Some DOTS features may rely on the existence of LocalToWorld in order to function. For example, the RenderMesh component relies on the LocalToWorld component to exist for rendering an instance. If only the LocalToWorld transform component exists, no transform system will write or affect the LocalToWorld data. User code may write directly to LocalToWorld to define the transform for an instance, if no other transform components are associated with the same entity. The purpose of all transform systems and all other transform components is to provide interfaces to write to LocalToWorld. LocalToWorld = Translation * Rotation * Scale If any combination of Translation (float3), Rotation (quaternion), or Scale (float) components are present along with a LocalToWorld component, a transform system will combine those components and write to LocalToWorld. Concretely, each of these component combinations will write to LocalToWorld as: [TRSToLocalToWorldSystem] LocalToWorld <= Translation [TRSToLocalToWorldSystem] LocalToWorld <= Translation * Rotation [TRSToLocalToWorldSystem] LocalToWorld <= Translation * Rotation * Scale [TRSToLocalToWorldSystem] LocalToWorld <= Rotation [TRSToLocalToWorldSystem] LocalToWorld <= Rotation * Scale [TRSToLocalToWorldSystem] LocalToWorld <= Scale e.g. If the following components are present... (Entity) LocalToWorld Translation Rotation ...then the transform system will: [TRSToLocalToWorldSystem] Write LocalToWorld <= Translation * Rotation Or, if the following components are present... (Entity) LocalToWorld Translation Rotation Scale ...then the transform system will: [TRSToLocalToWorldSystem] Write LocalToWorld <= Translation * Rotation * Scale Section 2: Hierarchical Transforms (Basic) LocalToParent and Parent components are required for the transform system to write a LocalToWorld based on a hierarchical transform. LocalToParent (float4x4) represents the transform from local space to parent local space. Parent (Entity) references the parent's LocalToWorld. User code may write directly to LocalToParent, if no other transform system is defined as writing to it. e.g. If the following components are present... Parent (Entity) Child (Entity) LocalToWorld LocalToWorld Translation LocalToParent Rotation Parent Scale ...then the transform system will: [TRSToLocalToWorldSystem] Parent: Write LocalToWorld as defined above in \"Non-hierarchical Transforms (Basic)\" [LocalToParentSystem] Child: Write LocalToWorld <= LocalToWorld[Parent] * LocalToParent LocalToWorld components associated with Parent Entity IDs are guaranteed to be computed before multiplies with LocalToParent associated with Child Entity ID. Note: Cyclical graph relationships are invalid. Results are undefined. When the hierarchy (topology) is changed (i.e. Any Parent component is added, removed or changed) internal state is added as SystemStateComponentData as: Child component (ISystemStateBufferElementData of Entity) associated with the Parent Entity ID PreviousParent component (ISystemStateComponentData of Entity) associated with the Child Entity ID Parent (Entity) Child (Entity) LocalToWorld LocalToWorld Translation LocalToParent Rotation Parent Scale PreviousParent* Child* Adding, removing, and updating of these components is handled by the [ParentSystem]. It is not expected that systems external to transform systems will read or write to these components. LocalToParent = Translation * Rotation * Scale If any combination of Translation (float3), Rotation (quaternion), or Scale (float) components are present along with a LocalToParent component, a transform system will combine those components and write to LocalToParent. Concretely, each of these component combinations will write to LocalToParent as: [TRSToLocalToParentSystem] LocalToParent <= Translation [TRSToLocalToParentSystem] LocalToParent <= Translation * Rotation [TRSToLocalToParentSystem] LocalToParent <= Translation * Rotation * Scale [TRSToLocalToParentSystem] LocalToParent <= Rotation [TRSToLocalToParentSystem] LocalToParent <= Rotation * Scale [TRSToLocalToParentSystem] LocalToParent <= Scale e.g. If the following components are present... Parent (Entity) Child (Entity) LocalToWorld LocalToWorld Translation LocalToParent Rotation Parent Scale PreviousParent* Child* Translation Rotation Scale ...then the transform system will: [TRSToLocalToWorldSystem] Parent: Write LocalToWorld as defined above in \"Non-hierarchical Transforms (Basic)\" [TRSToLocalToParentSystem] Child: Write LocalToParent <= Translation * Rotation * Scale [LocalToParentSystem] Child: Write LocalToWorld <= LocalToWorld[Parent] * LocalToParent Parents may of course themselves be children of other LocalToWorld components. e.g. If the following components are present... Parent (Entity) Child (Entity) LocalToWorld LocalToWorld LocalToParent LocalToParent Parent Parent PreviousParent* PreviousParent* Child* Translation Translation Rotation Rotation Scale Scale ...then the transform system will: [TRSToLocalToParentSystem] Parent: Write LocalToParent <= Translation * Rotation * Scale [TRSToLocalToParentSystem] Child: Write LocalToParent <= Translation * Rotation * Scale [LocalToParentSystem] Parent: Write LocalToWorld <= LocalToWorld[Parent] * LocalToParent [LocalToParentSystem] Child: Write LocalToWorld <= LocalToWorld[Parent] * LocalToParent Section 3: Default Conversion (Basic) Hybrid Conversion: UnityEngine.Transform MonoBehaviours which are part of GameObjects and are included in Sub Scenes or are on GameObjects with \"Convert To Entity\" Monobehaviours attached, have a default conversion to Transform system components. That conversion can be found in TransformConversion system in the Unity.Transforms.Hybrid assembly. Entities associated with the GameObject being transformed which have a Static component, only have LocalToWorld added to the resulting entity. So in the case of static instances, no transform system update will happen at runtime. For non-Static entities, a. Translation component will be added with the Transform.position value. b. Rotation component will be added with the Transform.rotation value. c. Transform.parent == null For non-unit Transform.localScale, NonUniformScale component will be added with the Transform.localScale value. d. If Transform.parent != null, but at the start of the (partial) hierarchy being converted: For non-unit Transform.lossyScale, NonUniformScale component will be added with the Transform.lossyScale value. e. For other cases where Transform.parent != null, Parent component will be added with the Entity referring to the converted Transform.parent GameObject. LocalToParent component will be added. Section 4: Non-hierarchical Transforms (Advanced) NonUniformScale (float3) as an alternative to Scale to specify scale per-axis. Note that not all DOTS features fully support non-uniform scale. Be sure to check those features’ documentation to understand their limitations. [TRSToLocalToWorldSystem] LocalToWorld <= Translation [TRSToLocalToWorldSystem] LocalToWorld <= Translation * Rotation [TRSToLocalToWorldSystem] LocalToWorld <= Translation * Rotation * NonUniformScale [TRSToLocalToWorldSystem] LocalToWorld <= Rotation [TRSToLocalToWorldSystem] LocalToWorld <= Rotation * NonUniformScale [TRSToLocalToWorldSystem] LocalToWorld <= NonUniformScale The presence of both Scale and NonUniform scale is not a valid case, but the result is defined. Scale will be used, NonUniformScale will be ignored. e.g. If the following components are present... (Entity) LocalToWorld Translation Rotation NonUniformScale ...then the transform system will: [TRSToLocalToWorldSystem] Write LocalToWorld <= Translation * Rotation * NonUniformScale The Rotation component may be written to directly as a quaternion by user code. However, if an Euler interface is preferred, components are available for each rotation order which will cause a write to the Rotation component if present. [RotationEulerSystem] Rotation <= RotationEulerXYZ [RotationEulerSystem] Rotation <= RotationEulerXZY [RotationEulerSystem] Rotation <= RotationEulerYXZ [RotationEulerSystem] Rotation <= RotationEulerYZX [RotationEulerSystem] Rotation <= RotationEulerZXY [RotationEulerSystem] Rotation <= RotationEulerZYX e.g. If the following components are present... (Entity) LocalToWorld Translation Rotation RotationEulerXYZ ...then the transform system will: [RotationEulerSystem] Write Rotation <= RotationEulerXYZ [TRSToLocalToWorldSystem] Write LocalToWorld <= Translation * Rotation * Scale It is a setup error to have more than one RotationEuler*** component is associated with the same Entity, however the result is defined. The first to be found in the order of precedence will be applied. That order is: RotationEulerXYZ RotationEulerXZY RotationEulerYXZ RotationEulerYZX RotationEulerZXY RotationEulerZYX For more complex Rotation requirements, a CompositeRotation (float4x4) component may be used as an alternative to Rotation. All of the combinations which are valid for Rotation are also valid for CompositeRotation. i.e. [TRSToLocalToWorldSystem] LocalToWorld <= Translation * CompositeRotation [TRSToLocalToWorldSystem] LocalToWorld <= Translation * CompositeRotation * Scale [TRSToLocalToWorldSystem] LocalToWorld <= CompositeRotation [TRSToLocalToWorldSystem] LocalToWorld <= CompositeRotation * Scale [TRSToLocalToWorldSystem] LocalToWorld <= Translation * CompositeRotation [TRSToLocalToWorldSystem] LocalToWorld <= Translation * CompositeRotation * NonUniformScale [TRSToLocalToWorldSystem] LocalToWorld <= CompositeRotation [TRSToLocalToWorldSystem] LocalToWorld <= CompositeRotation * NonUniformScale The CompositeRotation component may be written to directly as a float4x4 by user code. However, if a Maya/FBX-style interface is preferred, components are available which will write to the CompositeRotation component if present. CompositeRotation = RotationPivotTranslation * RotationPivot * Rotation * PostRotation * RotationPivot^-1 If any combination of RotationPivotTranslation (float3), RotationPivot (float3), Rotation (quaternion), or PostRotation (quaternion) components are present along with a CompositeRotation component, a transform system will combine those components and write to CompositeRotation. Concretely, each of these component combinations will write to CompositeRotation as: [CompositeRotationSystem] CompositeRotation <= RotationPivotTranslation [CompositeRotationSystem] CompositeRotation <= RotationPivotTranslation * RotationPivot * Rotation * RotationPivot^-1 [CompositeRotationSystem] CompositeRotation <= RotationPivotTranslation * RotationPivot * Rotation * PostRotation * RotationPivot^-1 [CompositeRotationSystem] CompositeRotation <= RotationPivotTranslation * RotationPivot * PostRotation * RotationPivot^-1 [CompositeRotationSystem] CompositeRotation <= RotationPivotTranslation * Rotation [CompositeRotationSystem] CompositeRotation <= RotationPivotTranslation * Rotation * PostRotation [CompositeRotationSystem] CompositeRotation <= RotationPivotTranslation * PostRotation [CompositeRotationSystem] CompositeRotation <= RotationPivot * Rotation * RotationPivot^-1 [CompositeRotationSystem] CompositeRotation <= RotationPivot * Rotation * PostRotation * RotationPivot^-1 [CompositeRotationSystem] CompositeRotation <= PostRotation [CompositeRotationSystem] CompositeRotation <= Rotation [CompositeRotationSystem] CompositeRotation <= Rotation * PostRotation Cases where RotationPivot is specified without either of Rotation, PostRotation have no additional affect on CompositeRotation. Note that since Rotation is re-used as a source for CompositeRotation, the alternative data interfaces to Rotation are still available. e.g. If the following components are present... (Entity) LocalToWorld Translation CompositeRotation Rotation RotationPivotTranslation RotationPivot PostRotation RotationEulerXYZ Scale ...then the transform system will: [CompositeRotationSystem] Write CompositeRotation <= RotationPivotTranslation * RotationPivot * Rotation * PostRotation * RotationPivot^-1 [TRSToLocalToWorldSystem] Write LocalToWorld <= Translation * CompositeRotation * Scale The PostRotation component may be written to directly as a quaternion by user code. However, if an Euler interface is preferred, components are available for each rotation order which will cause a write to the PostRotation component if present. [PostRotationEulerSystem] PostRotation <= PostRotationEulerXYZ [PostRotationEulerSystem] PostRotation <= PostRotationEulerXZY [PostRotationEulerSystem] PostRotation <= PostRotationEulerYXZ [PostRotationEulerSystem] PostRotation <= PostRotationEulerYZX [PostRotationEulerSystem] PostRotation <= PostRotationEulerZXY [PostRotationEulerSystem] PostRotation <= PostRotationEulerZYX e.g. If the following components are present... (Entity) LocalToWorld Translation CompositeRotation Rotation RotationPivotTranslation RotationPivot RotationEulerXYZ PostRotation PostRotationEulerXYZ Scale ...then the transform system will: [RotationEulerSystem] Write Rotation <= RotationEulerXYZ [PostRotationEulerSystem] Write PostRotation <= PostRotationEulerXYZ [CompositeRotationSystem] Write CompositeRotation <= RotationPivotTranslation * RotationPivot * Rotation * PostRotation * RotationPivot^-1 [TRSToLocalToWorldSystem] Write LocalToWorld <= Translation * CompositeRotation * Scale For more complex Scale requirements, a CompositeScale (float4x4) component may be used as an alternative to Scale (or NonUniformScale). All of the combinations which are valid for Scale or NonUniformScale are also valid for CompositeScale. i.e. [TRSToLocalToWorldSystem] LocalToWorld <= Translation * Rotation * CompositeScale [TRSToLocalToWorldSystem] LocalToWorld <= Rotation * CompositeScale [TRSToLocalToWorldSystem] LocalToWorld <= CompositeScale [TRSToLocalToWorldSystem] LocalToWorld <= Translation * CompositeRotation * CompositeScale [TRSToLocalToWorldSystem] LocalToWorld <= CompositeRotation * CompositeScale The CompositeScale component may be written to directly as a float4x4 by user code. However, if a Maya/FBX-style interface is preferred, components are available which will write to the CompositeScale component if present. CompositeScale = ScalePivotTranslation * ScalePivot * Scale * ScalePivot^-1 CompositeScale = ScalePivotTranslation * ScalePivot * NonUniformScale * ScalePivot^-1 If any combination of ScalePivotTranslation (float3), ScalePivot (float3), Scale (float) components are present along with a CompositeScale component, a transform system will combine those components and write to CompositeScale. Alternatively, if any combination of ScalePivotTranslation (float3), ScalePivot (float3), NonUniformScale (float3) components are present along with a CompositeScale component, a transform system will combine those components and write to CompositeScale. Concretely, each of these component combinations will write to CompositeRotation as: [CompositeScaleSystem] CompositeScale <= ScalePivotTranslation [CompositeScaleSystem] CompositeScale <= ScalePivotTranslation * ScalePivot * Scale * ScalePivot^-1 [CompositeScaleSystem] CompositeScale <= ScalePivotTranslation * Scale [CompositeScaleSystem] CompositeScale <= ScalePivot * Scale * ScalePivot^-1 [CompositeScaleSystem] CompositeScale <= Scale [CompositeScaleSystem] CompositeScale <= ScalePivotTranslation * ScalePivot * NonUniformScale * ScalePivot^-1 [CompositeScaleSystem] CompositeScale <= ScalePivotTranslation * Scale [CompositeScaleSystem] CompositeScale <= ScalePivot * NonUniformScale * ScalePivot^-1 [CompositeScaleSystem] CompositeScale <= NonUniformScale Cases where ScalePivot is specified without either of Scale, NonUniformScale have no additional effect have no additional affect on CompositeScale. e.g. If the following components are present... (Entity) LocalToWorld Translation CompositeRotation Rotation RotationPivotTranslation RotationPivot RotationEulerXYZ PostRotation PostRotationEulerXYZ CompositeScale Scale ScalePivotTranslation ScalePivot ...then the transform system will: [RotationEulerSystem] Write Rotation <= RotationEulerXYZ [PostRotationEulerSystem] Write PostRotation <= PostRotationEulerXYZ [CompositeScaleSystem] Write CompositeScale <= ScalePivotTranslation * ScalePivot * Scale * ScalePivot^-1 [CompositeRotationSystem] Write CompositeRotation <= RotationPivotTranslation * RotationPivot * Rotation * PostRotation * RotationPivot^-1 [TRSToLocalToWorldSystem] Write LocalToWorld <= Translation * CompositeRotation * CompositeScale Section 5: Hierarchical Transforms (Advanced) Note: Advanced Hierarchical transform component rules largely mirror the use of the non-hierarchical components, except that they are writing to LocalToParent (instead of LocalToWorld.) The main additional component unique to hierarchical transforms is ParentScaleInverse. NonUniformScale (float3) as an alternative to Scale to specify scale per-axis. Note that not all DOTS features fully support non-uniform scale. Be sure to check those features’ documentation to understand their limitations. [TRSToLocalToParentSystem] LocalToParent <= Translation [TRSToLocalToParentSystem] LocalToParent <= Translation * Rotation [TRSToLocalToParentSystem] LocalToParent <= Translation * Rotation * NonUniformScale [TRSToLocalToParentSystem] LocalToParent <= Rotation [TRSToLocalToParentSystem] LocalToParent <= Rotation * NonUniformScale [TRSToLocalToParentSystem] LocalToParent <= NonUniformScale The presence of both Scale and NonUniform scale is not a valid case, but the result is defined. Scale will be used, NonUniformScale will be ignored. e.g. If the following components are present... Parent (Entity) Child (Entity) LocalToWorld LocalToWorld Translation LocalToParent Rotation Parent Scale PreviousParent* Child* Translation Rotation NonUniformScale ...then the transform system will: [TRSToLocalToWorldSystem] Parent: Write LocalToWorld as defined above in \"Non-hierarchical Transforms (Basic)\" [TRSToLocalToParentSystem] Child: Write LocalToParent <= Translation * Rotation * NonUniformScale [LocalToParentSystem] Child: Write LocalToWorld <= LocalToWorld[Parent] * LocalToParent Parent LocalToWorld is multiplied with the Child LocalToWorld, which includes any scaling. However, if removing Parent scale is preferred (AKA Scale Compensate), ParentScaleInverse is available for that purpose. [TRSToLocalToParentSystem] LocalToParent <= ParentScaleInverse [TRSToLocalToParentSystem] LocalToParent <= Translation * ParentScaleInverse [TRSToLocalToParentSystem] LocalToParent <= Translation * ParentScaleInverse * Rotation [TRSToLocalToParentSystem] LocalToParent <= Translation * ParentScaleInverse * Rotation * NonUniformScale [TRSToLocalToParentSystem] LocalToParent <= Translation * ParentScaleInverse * CompositeRotation [TRSToLocalToParentSystem] LocalToParent <= Translation * ParentScaleInverse * CompositeRotation * NonUniformScale [TRSToLocalToParentSystem] LocalToParent <= Translation * ParentScaleInverse * Rotation * Scale [TRSToLocalToParentSystem] LocalToParent <= Translation * ParentScaleInverse * CompositeRotation * Scale [TRSToLocalToParentSystem] LocalToParent <= Translation * ParentScaleInverse * Rotation * CompositeScale [TRSToLocalToParentSystem] LocalToParent <= Translation * ParentScaleInverse * CompositeRotation * CompositeScale [TRSToLocalToParentSystem] LocalToParent <= ParentScaleInverse * Rotation [TRSToLocalToParentSystem] LocalToParent <= ParentScaleInverse * Rotation * NonUniformScale [TRSToLocalToParentSystem] LocalToParent <= ParentScaleInverse * CompositeRotation * NonUniformScale [TRSToLocalToParentSystem] LocalToParent <= ParentScaleInverse * Rotation * Scale [TRSToLocalToParentSystem] LocalToParent <= ParentScaleInverse * CompositeRotation [TRSToLocalToParentSystem] LocalToParent <= ParentScaleInverse * CompositeRotation * Scale [TRSToLocalToParentSystem] LocalToParent <= ParentScaleInverse * Rotation * CompositeScale [TRSToLocalToParentSystem] LocalToParent <= ParentScaleInverse * CompositeRotation * CompositeScale Inverse of any explicitly assigned parent scale values if present are written to ParentScaleInverse, as: [ParentScaleInverseSystem] ParentScaleInverse <= CompositeScale[Parent]^-1 [ParentScaleInverseSystem] ParentScaleInverse <= Scale[Parent]^-1 [ParentScaleInverseSystem] ParentScaleInverse <= NonUniformScale[Parent]^-1 If LocalToWorld[Parent] is written directly by the user, or scaling is otherwise applied in a way that is not explicitly using the scale components, then nothing is written to the ParentScaleInverse. It is the responsibility of the system applying that scaling to write inverse to ParentScaleInverse. The results of a system not updating ParentScaleInverse in this case are undefined. e.g. If the following components are present... Parent (Entity) Child (Entity) LocalToWorld LocalToWorld Translation LocalToParent Rotation Parent Scale PreviousParent* Child* Translation Rotation ParentScaleInverse ...then the transform system will: [TRSToLocalToWorldSystem] Parent: Write LocalToWorld as defined above in \"Non-hierarchical Transforms (Basic)\" [ParentScaleInverseSystem] Child: ParentScaleInverse <= Scale[Parent]^-1 [TRSToLocalToParentSystem] Child: Write LocalToParent <= Translation * ParentScaleInverse * Rotation [LocalToParentSystem] Child: Write LocalToWorld <= LocalToWorld[Parent] * LocalToParent The Rotation component may be written to directly as a quaternion by user code. However, if an Euler interface is preferred, components are available for each rotation order which will cause a write to the Rotation component if present. [RotationEulerSystem] Rotation <= RotationEulerXYZ [RotationEulerSystem] Rotation <= RotationEulerXZY [RotationEulerSystem] Rotation <= RotationEulerYXZ [RotationEulerSystem] Rotation <= RotationEulerYZX [RotationEulerSystem] Rotation <= RotationEulerZXY [RotationEulerSystem] Rotation <= RotationEulerZYX e.g. If the following components are present... Parent (Entity) Child (Entity) LocalToWorld LocalToWorld Translation LocalToParent Rotation Parent Scale PreviousParent* Child* Translation Rotation RotationEulerXYZ ...then the transform system will: [TRSToLocalToWorldSystem] Parent: Write LocalToWorld as defined above in \"Non-hierarchical Transforms (Basic)\" [RotationEulerSystem] Child: Write Rotation <= RotationEulerXYZ [TRSToLocalToParentSystem] Child: Write LocalToParent <= Translation * Rotation [LocalToParentSystem] Child: Write LocalToWorld <= LocalToWorld[Parent] * LocalToParent For more complex Rotation requirements, a CompositeRotation (float4x4) component may be used as an alternative to Rotation. All of the combinations which are valid for Rotation are also valid for CompositeRotation. i.e. [TRSToLocalToParentSystem] LocalToParent <= Translation * CompositeRotation [TRSToLocalToParentSystem] LocalToParent <= Translation * CompositeRotation * Scale [TRSToLocalToParentSystem] LocalToParent <= Translation * CompositeRotation * NonUniformScale [TRSToLocalToParentSystem] LocalToParent <= Translation * CompositeRotation * CompositeScale [TRSToLocalToParentSystem] LocalToParent <= Translation * ParentScaleInverse * CompositeRotation [TRSToLocalToParentSystem] LocalToParent <= Translation * ParentScaleInverse * CompositeRotation * Scale [TRSToLocalToParentSystem] LocalToParent <= Translation * ParentScaleInverse * CompositeRotation * NonUniformScale [TRSToLocalToParentSystem] LocalToParent <= Translation * ParentScaleInverse * CompositeRotation * CompositeScale [TRSToLocalToParentSystem] LocalToParent <= ParentScaleInverse * CompositeRotation [TRSToLocalToParentSystem] LocalToParent <= ParentScaleInverse * CompositeRotation * Scale [TRSToLocalToParentSystem] LocalToParent <= ParentScaleInverse * CompositeRotation * NonUniformScale [TRSToLocalToParentSystem] LocalToParent <= ParentScaleInverse * CompositeRotation * CompositeScale [TRSToLocalToParentSystem] LocalToParent <= CompositeRotation [TRSToLocalToParentSystem] LocalToParent <= CompositeRotation * Scale [TRSToLocalToParentSystem] LocalToParent <= CompositeRotation * NonUniformScale [TRSToLocalToParentSystem] LocalToParent <= CompositeRotation * CompositeScale The CompositeRotation component may be written to directly as a float4x4 by user code. However, if a Maya/FBX-style interface is preferred, components are available which will write to the CompositeRotation component if present. CompositeRotation = RotationPivotTranslation * RotationPivot * Rotation * PostRotation * RotationPivot^-1 If any combination of RotationPivotTranslation (float3), RotationPivot (float3), Rotation (quaternion), or PostRotation (quaternion) components are present along with a CompositeRotation component, a transform system will combine those components and write to CompositeRotation. Concretely, each of these component combinations will write to CompositeRotation as: [CompositeRotationSystem] CompositeRotation <= RotationPivotTranslation [CompositeRotationSystem] CompositeRotation <= RotationPivotTranslation * RotationPivot * Rotation * RotationPivot^-1 [CompositeRotationSystem] CompositeRotation <= RotationPivotTranslation * RotationPivot * Rotation * PostRotation * RotationPivot^-1 [CompositeRotationSystem] CompositeRotation <= RotationPivotTranslation * RotationPivot * PostRotation * RotationPivot^-1 [CompositeRotationSystem] CompositeRotation <= RotationPivotTranslation * Rotation [CompositeRotationSystem] CompositeRotation <= RotationPivotTranslation * Rotation * PostRotation [CompositeRotationSystem] CompositeRotation <= RotationPivotTranslation * PostRotation [CompositeRotationSystem] CompositeRotation <= RotationPivot * Rotation * RotationPivot^-1 [CompositeRotationSystem] CompositeRotation <= RotationPivot * Rotation * PostRotation * RotationPivot^-1 [CompositeRotationSystem] CompositeRotation <= PostRotation [CompositeRotationSystem] CompositeRotation <= Rotation [CompositeRotationSystem] CompositeRotation <= Rotation * PostRotation Cases where RotationPivot is specified without either of Rotation, PostRotation have no additional affect on CompositeRotation. Note that since Rotation is re-used as a source for CompositeRotation, the alternative data interfaces to Rotation are still available. e.g. If the following components are present... Parent (Entity) Child (Entity) LocalToWorld LocalToWorld Translation LocalToParent Rotation Parent Scale PreviousParent* Child* Translation CompositeRotation Rotation RotationPivotTranslation RotationPivot PostRotation RotationEulerXYZ Scale ...then the transform system will: [TRSToLocalToWorldSystem] Parent: Write LocalToWorld as defined above in \"Non-hierarchical Transforms (Basic)\" [RotationEulerSystem] Child: Write Rotation <= RotationEulerXYZ [CompositeRotationSystem] Child: Wirte CompositeRotation <= RotationPivotTranslation * RotationPivot * Rotation * PostRotation * RotationPivot^-1 [TRSToLocalToParentSystem] Child: Write LocalToParent <= Translation * CompositeRotation * Scale [LocalToParentSystem] Child: Write LocalToWorld <= LocalToWorld[Parent] * LocalToParent The PostRotation component may be written to directly as a quaternion by user code. However, if an Euler interface is preferred, components are available for each rotation order which will cause a write to the PostRotation component if present. [PostRotationEulerSystem] PostRotation <= PostRotationEulerXYZ [PostRotationEulerSystem] PostRotation <= PostRotationEulerXZY [PostRotationEulerSystem] PostRotation <= PostRotationEulerYXZ [PostRotationEulerSystem] PostRotation <= PostRotationEulerYZX [PostRotationEulerSystem] PostRotation <= PostRotationEulerZXY [PostRotationEulerSystem] PostRotation <= PostRotationEulerZYX e.g. If the following components are present... Parent (Entity) Child (Entity) LocalToWorld LocalToWorld Translation LocalToParent Rotation Parent Scale PreviousParent* Child* Translation CompositeRotation Rotation RotationPivotTranslation RotationPivot PostRotation RotationEulerXYZ Scale PostRotationEulerXYZ ...then the transform system will: [TRSToLocalToWorldSystem] Parent: Write LocalToWorld as defined above in \"Non-hierarchical Transforms (Basic)\" [PostRotationEulerSystem] Child: Write PostRotation <= PostRotationEulerXYZ [RotationEulerSystem] Child: Write Rotation <= RotationEulerXYZ [CompositeRotationSystem] Child: Wirte CompositeRotation <= RotationPivotTranslation * RotationPivot * Rotation * PostRotation * RotationPivot^-1 [TRSToLocalToParentSystem] Child: Write LocalToParent <= Translation * CompositeRotation * Scale [LocalToParentSystem] Child: Write LocalToWorld <= LocalToWorld[Parent] * LocalToParent It is a setup error to have more than one PostRotationEuler*** component is associated with the same Entity, however the result is defined. The first to be found in the order of precedence will be applied. That order is: PostRotationEulerXYZ PostRotationEulerXZY PostRotationEulerYXZ PostRotationEulerYZX PostRotationEulerZXY PostRotationEulerZYX For more complex Scale requirements, a CompositeScale (float4x4) component may be used as an alternative to Scale (or NonUniformScale). All of the combinations which are valid for Scale or NonUniformScale are also valid for CompositeScale. i.e. [TRSToLocalToParentSystem] LocalToParent <= Translation * Rotation * CompositeScale [TRSToLocalToParentSystem] LocalToParent <= Rotation * CompositeScale [TRSToLocalToParentSystem] LocalToParent <= CompositeScale [TRSToLocalToParentSystem] LocalToParent <= Translation * CompositeRotation * CompositeScale [TRSToLocalToParentSystem] LocalToParent <= CompositeRotation * CompositeScale [TRSToLocalToParentSystem] LocalToParent <= Translation * ParentScaleInverse * Rotation * CompositeScale [TRSToLocalToParentSystem] LocalToParent <= Translation * ParentScaleInverse * CompositeRotation * CompositeScale [TRSToLocalToParentSystem] LocalToParent <= ParentScaleInverse * Rotation * CompositeScale [TRSToLocalToParentSystem] LocalToParent <= ParentScaleInverse * CompositeRotation * CompositeScale [TRSToLocalToParentSystem] LocalToParent <= ParentScaleInverse * CompositeScale The CompositeScale component may be written to directly as a float4x4 by user code. However, if a Maya/FBX-style interface is preferred, components are available which will write to the CompositeScale component if present. CompositeScale = ScalePivotTranslation * ScalePivot * Scale * ScalePivot^-1 CompositeScale = ScalePivotTranslation * ScalePivot * NonUniformScale * ScalePivot^-1 If any combination of ScalePivotTranslation (float3), ScalePivot (float3), Scale (float) components are present along with a CompositeScale component, a transform system will combine those components and write to CompositeScale. Alternatively, if any combination of ScalePivotTranslation (float3), ScalePivot (float3), NonUniformScale (float3) components are present along with a CompositeScale component, a transform system will combine those components and write to CompositeScale. Concretely, each of these component combinations will write to CompositeRotation as: [CompositeScaleSystem] CompositeScale <= ScalePivotTranslation [CompositeScaleSystem] CompositeScale <= ScalePivotTranslation * ScalePivot * Scale * ScalePivot^-1 [CompositeScaleSystem] CompositeScale <= ScalePivotTranslation * Scale [CompositeScaleSystem] CompositeScale <= ScalePivot * Scale * ScalePivot^-1 [CompositeScaleSystem] CompositeScale <= Scale [CompositeScaleSystem] CompositeScale <= ScalePivotTranslation * ScalePivot * NonUniformScale * ScalePivot^-1 [CompositeScaleSystem] CompositeScale <= ScalePivotTranslation * Scale [CompositeScaleSystem] CompositeScale <= ScalePivot * NonUniformScale * ScalePivot^-1 [CompositeScaleSystem] CompositeScale <= NonUniformScale Cases where ScalePivot is specified without either of Scale, NonUniformScale have no additional effect have no additional affect on CompositeScale. e.g. If the following components are present... Parent (Entity) Child (Entity) LocalToWorld LocalToWorld Translation LocalToParent Rotation Parent Scale PreviousParent* Child* Translation CompositeRotation Rotation RotationPivotTranslation RotationPivot PostRotation RotationEulerXYZ Scale PostRotationEulerXYZ CompositeScale ScalePivotTranslation ScalePivot ...then the transform system will: [TRSToLocalToWorldSystem] Parent: Write LocalToWorld as defined above in \"Non-hierarchical Transforms (Basic)\" [PostRotationEulerSystem] Child: Write PostRotation <= PostRotationEulerXYZ [RotationEulerSystem] Child: Write Rotation <= RotationEulerXYZ [CompositeRotationSystem] Child: Wirte CompositeRotation <= RotationPivotTranslation * RotationPivot * Rotation * PostRotation * RotationPivot^-1 [TRSToLocalToParentSystem] Child: Write LocalToParent <= Translation * CompositeRotation * Scale [LocalToParentSystem] Child: Write LocalToWorld <= LocalToWorld[Parent] * LocalToParent ...then the transform system will: [TRSToLocalToWorldSystem] Parent: Write LocalToWorld as defined above in \"Non-hierarchical Transforms (Basic)\" [PostRotationEulerSystem] Child: Write PostRotation <= PostRotationEulerXYZ [RotationEulerSystem] Child: Write Rotation <= RotationEulerXYZ [CompositeScaleSystem] Child: Write CompositeScale <= ScalePivotTranslation * ScalePivot * Scale * ScalePivot^-1 [CompositeRotationSystem] Child: Wirte CompositeRotation <= RotationPivotTranslation * RotationPivot * Rotation * PostRotation * RotationPivot^-1 [TRSToLocalToParentSystem] Child: Write LocalToParent <= Translation * CompositeRotation * Scale [LocalToParentSystem] Child: Write LocalToWorld <= LocalToWorld[Parent] * LocalToParent Section 6: Custom Transforms (Advanced) There are two methods for writing user-defined transforms that are fully compatible with the transform system. Overriding transform components Extending transform components Overriding transform components A user component (UserComponent) is defined and added to the LocalToWorld WriteGroup, as in: [Serializable] [WriteGroup(typeof(LocalToWorld))] struct UserComponent : IComponentData { } Overriding transform components means that no additional extensions are possible. The user defined transform is the only transform that can occur with the specified user component. In the UserTransformSystem, use the default query method to request write access to LocalToWorld. e.g. public class UserTransformSystem : SystemBase { protected override void OnUpdate() { Entities .ForEach( (ref LocalToWorld localToWorld, in UserComponent userComponent)=>{ localToWorld.Value = ... // Assign localToWorld as needed for UserTransform }).ScheduleParallel(); } } All other transform components which write to LocalToWorld will be ignored by the transform system where UserComponent is included. e.g. If the following components are present... (Entity) LocalToWorld Translation Rotation Scale UserComponent ...then: [TRSToLocalToWorldSystem] Will not run on this Entity [UserTransformSystem] Will run on this Entity However, unexpected behavior may result if two different systems both override LocalToWorld and both components are present. e.g. e.g. If there is an additional: [Serializable] [WriteGroup(typeof(LocalToWorld))] struct UserComponent2 : IComponentData { } And the equivalent system: public class UserTransformSystem2 : SystemBase { protected override void OnUpdate() { Entities .ForEach( (ref LocalToWorld localToWorld, in UserComponent2 userComponent2)=>{ localToWorld.Value = ... // Assign localToWorld as needed for UserTransform }).ScheduleParallel(); } } Then if the following components are present... (Entity) LocalToWorld Translation Rotation Scale UserComponent UserComponent2 Both systems will attempt to write to LocalToWorld, likely resulting in unexpected behavior. This may not be an issue in context. Extending transform components In order to ensure that multiple overridden transform components can interact in a way which is well-defined, a WriteGroup query can be used to only explicitly match the requested components. e.g. If there is a: [Serializable] [WriteGroup(typeof(LocalToWorld))] struct UserComponent : IComponentData { } And a system which filters based on the WriteGroup of LocalToWorld: public class UserTransformSystem : SystemBase { protected override void OnUpdate() { Entities .WithEntityQueryOptions(EntityQueryOptions.FilterWriteGroup) .ForEach( (ref LocalToWorld localToWorld, in UserComponent userComponent)=>{ localToWorld.Value = ... // Assign localToWorld as needed for UserTransform }).ScheduleParallel(); } } m_Query in UserTransformSystem will only match the explicitly mentioned components. For instance, the following with match and be included in the EntityQuery: (Entity) LocalToWorld UserComponent But this will not: (Entity) LocalToWorld Translation Rotation Scale UserComponent The implicit expectation is that UserComponent is a completely orthogonal set of requirements to write to LocalToWorld, so no other (unstated) components which are in the same WriteGroup should be present. However, they may be explicitly supported by UserComponent systems by adding to the queries, as: public class UserTransformExtensionSystem : SystemBase { protected override void OnUpdate() { Entities .WithEntityQueryOptions(EntityQueryOptions.FilterWriteGroup) .ForEach( (ref LocalToWorld localToWorld, in UserComponent userComponent, in Translation translation, in Rotation rotation, in Scale scale) => { localToWorld.Value = ... // Assign localToWorld as needed for UserTransform }).ScheduleParallel(); } } In the same way, if there is an additional: [Serializable] [WriteGroup(typeof(LocalToWorld))] struct UserComponent2 : IComponentData { } And there is: (Entity) LocalToWorld UserComponent UserComponent2 The UserTransformSystem defined above would not match, since UserComponent2 is not explicitly mentioned and it is in the LocalToWorld WriteGroup. However, an explicit query can be created which can resolve the case and ensure the behavior is well defined. As in: public class UserTransformComboSystem : SystemBase { protected override void OnUpdate() { Entities .ForEach( (ref LocalToWorld localToWorld, in UserComponent userComponent, in UserComponent2 userComponent2)=>{ localToWorld.Value = ... // Assign localToWorld as needed for UserTransform }).ScheduleParallel(); } } Then the following systems (or equivalents): UserTransformSystem (LocalToWorld FilterWriteGroup:UserComponent) UserTransformSystem2 (LocalToWorld FilterWriteGroup:UserComponent2) UserTransformComboSystem (LocalToWorld FilterWriteGroup:UserComponent, UserComponent2) Will all run side-by-side, query and run on their respective component archetypes, and have well-defined behavior. Section 7: Relationship to Maya transform nodes For reference on Maya transform nodes, see: https://download.autodesk.com/us/maya/2010help/Nodes/transform.html Maya Transformation Matrix is defined as: matrix = SP^-1 * S * SH * SP * ST * RP^-1 * RA * R * RP * RT * T These can be mapped to transform components as follows: Maya Unity T Translation (RT * RP * R * RA * RP^-1) CompositeRotation RT RotationPivotTranslation RP RotationPivot R Rotation RA PostRotation (ST * SP * S * SP^-1) CompositeScale ST ScalePivotTranslation SP ScalePivot SH --- Unused --- S NonUniformScale"
  },
  "manual/gp_ui.html": {
    "href": "manual/gp_ui.html",
    "title": "User Interfaces | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "User Interfaces Synopsis: How to use Unity's UI features with ECS. How to optimize your UI with ECS. Note, this is a placeholder for work that has not been completed yet."
  },
  "manual/gp_text_handling.html": {
    "href": "manual/gp_text_handling.html",
    "title": "Handling text | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Handling text Synopsis: Handling text in a performant way Note, this is a placeholder for work that has not been completed yet."
  },
  "manual/gp_prefabs.html": {
    "href": "manual/gp_prefabs.html",
    "title": "Prefabs | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Prefabs Synopsis: Using prefabs in ECS-based programs Note, this is a placeholder for work that has not been completed yet."
  },
  "manual/gp_physics.html": {
    "href": "manual/gp_physics.html",
    "title": "Physics | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Physics Synopsis: How to use Unity's physics features with ECS. How to optimize physics with ECS. Note, this is a placeholder for work that has not been completed yet. See the Unity Physics and Havok Physics packages for information about the DOTS-compatible physics APIs."
  },
  "manual/ecs_debugging.html": {
    "href": "manual/ecs_debugging.html",
    "title": "Debugging ECS | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Debugging ECS In addition to \"traditional\" debugging using breakpoints, Unity provides the following tools for debugging DOTS code: Entity Debugger window Burst Inspector DOTS Decompiler Entity Inspectors Livelink Profiler Entity Debugger The Entity Debugger allows you to visualize your entities, systems, and components Open the entity Debugger window using the menu: Window > Analysis > Entity Debugger. Systems list The Systems list shows the systems in your project and how much time a system takes to run each frame. You can turn systems on and off from the list using the checkbox provided for each system. Use the System Display control drop down at the top of the list to control what to display in the System list. The System Display control contains: Worlds — Choose the World containing the entities and systems to display. By default, an Editor World exists when not in play mode and a Default World exists in play mode. Show Full Player Loop option — Choose to display the systems of all Worlds and show all of the Unity execution phases (not just those containing systems). Show Inactive Systems option — Choose to show systems that are not currently running in addition to the running systems. Select a system to view its details. Note: If you select the EntityManager entry in the System list, then you have different options on the System details section. System details The System details section shows the groups of components that a System operates on and the list of entities associated with those component groups. Each component group shows the components in the group along with the number of entities associated with it. Select a component group to view information about the Chunks containing the data for the components in the group. When you select the EntityManager entry in the system list, the details section shows all of the entities in the displayed World. When you display a World (rather than the full player loop), you can also filter the list of entities by component To filter the Entity list: Select a World in the System Display control. Select the EntityManager for that World. At the top of the System details section, click Edit . In the Choose Component window, check the components whose entities you want to view. Chunk information The Chunk information section shows the Chunks containing data for the components and entities selected in the details section. Inspecting an Entity Select an entity in the Entity Debugger to view its data in the Unity Inspector window."
  },
  "manual/system_update_order.html": {
    "href": "manual/system_update_order.html",
    "title": "System Update Order | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "System Update Order Use Component System Groups to specify the update order of your systems. You can place a systems in a group using the [UpdateInGroup] attribute on the system’s class declaration. You can then use [UpdateBefore] and [UpdateAfter] attributes to specify the update order within the group. The ECS framework creates a set of default system groups that you can use to update your systems in the correct phase of a frame. You can nest one group inside another so that all systems in your group update in the correct phase and, then, also update according to the order within their group. Component System Groups The ComponentSystemGroup class represents a list of related component systems that should be updated together in a specific order. ComponentSystemGroup is derived from ComponentSystemBase, so it acts like a component system in all the important ways -- it can be ordered relative to other systems, has an OnUpdate() method, etc. Most relevantly, this means component system groups can be nested in other component system groups, forming a hierarchy. By default, when a ComponentSystemGroup’s Update() method is called, it calls Update() on each system in its sorted list of member systems. If any member systems are themselves system groups, they will recursively update their own members. The resulting system ordering follows a depth-first traversal of a tree. System Ordering Attributes The existing system ordering attributes are maintained, with slightly different semantics and restrictions. [UpdateInGroup] — specifies a ComponentSystemGroup that this system should be a member of. If this attribute is omitted, the system is automatically added to the default World’s SimulationSystemGroup (see below). [UpdateBefore] and [UpdateAfter] — order systems relative to other systems. The system type specified for these attributes must be a member of the same group. Ordering across group boundaries is handled at the appropriate deepest group containing both systems: Example: if SystemA is in GroupA and SystemB is in GroupB, and GroupA and GroupB are both members of GroupC, then the ordering of GroupA and GroupB implicitly determines the relative ordering of SystemA and SystemB; no explicit ordering of the systems is necessary. [DisableAutoCreation] — prevents the system from being created during default world initialization. You must explicitly create and update the system. However, you can add a system with this tag to a ComponentSystemGroup’s update list, and it will then be automatically updated just like the other systems in that list. Default System Groups The default World contains a hierarchy of ComponentSystemGroup instances. Only three root-level system groups are added to the Unity player loop (the following list also shows the pre-defined member systems in each group): InitializationSystemGroup (updated at the end of the Initialization phase of the player loop) BeginInitializationEntityCommandBufferSystem CopyInitialTransformFromGameObjectSystem SubSceneLiveLinkSystem SubSceneStreamingSystem EndInitializationEntityCommandBufferSystem SimulationSystemGroup (updated at the end of the Update phase of the player loop) BeginSimulationEntityCommandBufferSystem TransformSystemGroup EndFrameParentSystem CopyTransformFromGameObjectSystem EndFrameTRSToLocalToWorldSystem EndFrameTRSToLocalToParentSystem EndFrameLocalToParentSystem CopyTransformToGameObjectSystem LateSimulationSystemGroup EndSimulationEntityCommandBufferSystem PresentationSystemGroup (updated at the end of the PreLateUpdate phase of the player loop) BeginPresentationEntityCommandBufferSystem CreateMissingRenderBoundsFromMeshRenderer RenderingSystemBootstrap RenderBoundsUpdateSystem RenderMeshSystem LODGroupSystemV1 LodRequirementsUpdateSystem EndPresentationEntityCommandBufferSystem Note that the specific contents of this list is subject to change. Multiple Worlds You can create multiple Worlds, in addition to (or instead of) the default World described above. The same component system class can be instantiated in more than one World, and each instance can be updated at different rates from different points in the update order. There is currently no way to manually update every system in a given World; instead, you can control which systems are created in which World, and which of the existing system groups they should be added to. Thus, a custom WorldB could instantiate SystemX and SystemY, adding SystemX to the default World’s SimulationSystemGroup, and adding SystemY to the default World’s PresentationSystemGroup. These systems can order themselves relative to their group siblings as usual, and will be updated along with the corresponding group. To support this use case, a new ICustomBootstrap interface is now available: public interface ICustomBootstrap { // Returns the systems which should be handled by the default bootstrap process. // If null is returned the default world will not be created at all. // Empty list creates default world and entrypoints List<Type> Initialize(List<Type> systems); } When you implement this interface, the full list of component system types will be passed to the classes Initialize() method, prior to default world initialization. A custom bootstrapper can iterate through this list and create systems in whatever World it wants. You can return a list of systems from the Initialize() method and they will be created as part of the normal, default world initialization. For example, here’s the typical procedure of a custom MyCustomBootstrap.Initialize() implementation: Create any additional Worlds and their top-level ComponentSystemGroups. For each Type in the system Type list: Traverse upward through the ComponentSystemGroup hierarchy to find this system Type’s top-level group. If it’s one of the groups created in step 1, create the system in that World and add it to the hierarchy with group.AddSystemToUpdateList() . If not, append this Type to the List to return to DefaultWorldInitialization. Call group.SortSystemUpdateList() on new top-level groups. Optionally add them to one of the default world groups Return list of unhandled systems to DefaultWorldInitialization. Note: the ECS framework finds your ICustomBootstrap implementation by reflection. Tips and Best Practices Use [UpdateInGroup] to specify the system group for each system you write. If not specified, the implicit default group is SimulationSystemGroup. Use manually-ticked ComponentSystemGroups to update systems elsewhere in the Unity player loop. Adding the [DisableAutoCreation] attribute to a component system (or system group) prevents it from being created or added to the default system groups. You can still manually create the system with World.GetOrCreateSystem () and update it by calling manually calling MySystem.Update() from the main thread. This is an easy way to insert systems elsewhere in the Unity player loop (for example, if you have a system that should run later or earlier in the frame). Use the existing EntityCommandBufferSystem s instead of adding new ones, if possible. An EntityCommandBufferSystem represents a sync point where the main thread waits for worker threads to complete before processing any outstanding EntityCommandBuffer s. Reusing one of the predefined Begin/End systems in each root-level system group is less likely to introduce a new \"bubble\" into the frame pipeline than creating a new one. Avoid putting custom logic in ComponentSystemGroup.OnUpdate() . Since ComponentSystemGroup is functionally a component system itself, it may be tempting to add custom processing to its OnUpdate() method, to perform some work, spawn some jobs, etc. We advise against this in general, as it’s not immediately clear from the outside whether the custom logic is executed before or after the group’s members are updated. It’s preferable to keep system groups limited to a grouping mechanism, and to implement the desired logic in a separate component system, explicitly ordered relative to the group."
  },
  "manual/system_state_components.html": {
    "href": "manual/system_state_components.html",
    "title": "System State Components | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "System State Components You can use SystemStateComponentData to track resources internal to a system and create and destroy those resources as needed without relying on individual callbacks. SystemStateComponentData and SystemStateSharedComponentData are similar to ComponentData and SharedComponentData , but ECS does not delete SystemStateComponentData when an entity is destroyed. When an entity is destroyed, ECS usually: Finds all components which reference the particular entity's ID. Deletes those components. Recycles the entity ID for reuse. However, if SystemStateComponentData is present, ECS does not recycle the ID. This gives the system the opportunity to clean up any resources or states associated with the entity ID. ECS only reuses the entity ID once SystemStateComponentData is removed. When to use system state components Systems might need to keep an internal state based on ComponentData . For instance, resources might be allocated. Systems also need to be able to manage the state as values, and other systems might make state changes. For example, when values in components change, or when relevant components are added or deleted. \"No callbacks\" is an important element of the ECS design rules. The general use of SystemStateComponentData is expected to mirror a user component, providing the internal state. For instance, given: FooComponent ( ComponentData , user assigned) FooStateComponent ( SystemComponentData , system assigned) Detecting when a component is added When you create a component, a system state component does not exist. The system updates queries for components without a system state component, and can infer that they have been added. At that point, the system adds a system state component and any needed internal state. Detecting when a component is removed When you remove a component, the system state component still exists. The system updates the queries for the system state component without a component, and can infer that they have been removed. At that point, the system removes the system state component and fixes any needed internal state. Detecting when an entity is destroyed DestroyEntity is a shorthand utility for: Find components which reference given entity ID. Delete components found. Recycle entity ID. However, SystemStateComponentData are not removed on DestroyEntity and the entity ID is not recycled until the last component is deleted. This gives the system the opportunity to clean up the internal state in the exact same way as with component removal. SystemStateComponent A SystemStateComponentData is similar to a ComponentData . struct FooStateComponent : ISystemStateComponentData { } Visibility of a SystemStateComponentData is also controlled in the same way as a component (using private , public , internal ) However, it's expected, as a general rule, that a SystemStateComponentData will be ReadOnly outside the system that creates it. SystemStateSharedComponent A SystemStateSharedComponentData is similar to a SharedComponentData . struct FooStateSharedComponent : ISystemStateSharedComponentData { public int Value; } Example system using state components The following example shows a simplified system that illustrates how to manage entities with system state components. The example defines a general-purpose IComponentData instance and a system state, ISystemStateComponentData instance. It also defines three queries based on those entities: m_newEntities selects entities that have the general-purpose, but not the system state component. This query finds new entities that the system has not seen before. The system runs a job using the new entities query that adds the system state component. m_activeEntities selects entities that have both the general-purpose and the system state component. In a real application, other systems might be the ones that process or destroy the entities. m_destroyedEntities selects entities that have the system state, but not the general-purpose component. Since the system state component is never added to an entity by itself, the entities that this query selects must have been deleted, either by this system or another system. The system reuses the destroyed entities query to run a job and remove the system state component from the entities, which allows the ECS code to recycle the entity identifier. Note: This simplified example does not maintain any state within the system. One purpose for system state components is to track when persistent resources need to be allocated or cleaned up. using Unity.Collections; using Unity.Entities; using Unity.Jobs; using UnityEngine; public struct GeneralPurposeComponentA : IComponentData { public bool IsAlive; } public struct StateComponentB : ISystemStateComponentData { public int State; } public class StatefulSystem : JobComponentSystem { private EntityQuery m_newEntities; private EntityQuery m_activeEntities; private EntityQuery m_destroyedEntities; private EntityCommandBufferSystem m_ECBSource; protected override void OnCreate() { // Entities with GeneralPurposeComponentA but not StateComponentB m_newEntities = GetEntityQuery(new EntityQueryDesc() { All = new ComponentType[] {ComponentType.ReadOnly<GeneralPurposeComponentA>()}, None = new ComponentType[] {ComponentType.ReadWrite<StateComponentB>()} }); // Entities with both GeneralPurposeComponentA and StateComponentB m_activeEntities = GetEntityQuery(new EntityQueryDesc() { All = new ComponentType[] { ComponentType.ReadWrite<GeneralPurposeComponentA>(), ComponentType.ReadOnly<StateComponentB>() } }); // Entities with StateComponentB but not GeneralPurposeComponentA m_destroyedEntities = GetEntityQuery(new EntityQueryDesc() { All = new ComponentType[] {ComponentType.ReadWrite<StateComponentB>()}, None = new ComponentType[] {ComponentType.ReadOnly<GeneralPurposeComponentA>()} }); m_ECBSource = World.GetOrCreateSystem<EndSimulationEntityCommandBufferSystem>(); } struct NewEntityJob : IJobForEachWithEntity<GeneralPurposeComponentA> { public EntityCommandBuffer.Concurrent ConcurrentECB; public void Execute(Entity entity, int jobIndex, [ReadOnly] ref GeneralPurposeComponentA gpA) { // Add an ISystemStateComponentData instance ConcurrentECB.AddComponent<StateComponentB>(jobIndex, entity, new StateComponentB() {State = 1}); } } struct ProcessEntityJob : IJobForEachWithEntity<GeneralPurposeComponentA> { public EntityCommandBuffer.Concurrent ConcurrentECB; public void Execute(Entity entity, int jobIndex, ref GeneralPurposeComponentA gpA) { // Process entity, possibly setting IsAlive false -- // In which case, destroy the entity if (!gpA.IsAlive) { ConcurrentECB.DestroyEntity(jobIndex, entity); } } } struct CleanupEntityJob : IJobForEachWithEntity<StateComponentB> { public EntityCommandBuffer.Concurrent ConcurrentECB; public void Execute(Entity entity, int jobIndex, [ReadOnly] ref StateComponentB state) { // This system is responsible for removing any ISystemStateComponentData instances it adds // Otherwise, the entity is never truly destroyed. ConcurrentECB.RemoveComponent<StateComponentB>(jobIndex, entity); } } protected override JobHandle OnUpdate(JobHandle inputDependencies) { var newEntityJob = new NewEntityJob() { ConcurrentECB = m_ECBSource.CreateCommandBuffer().ToConcurrent() }; var newJobHandle = newEntityJob.ScheduleSingle(m_newEntities, inputDependencies); m_ECBSource.AddJobHandleForProducer(newJobHandle); var processEntityJob = new ProcessEntityJob() {ConcurrentECB = m_ECBSource.CreateCommandBuffer().ToConcurrent()}; var processJobHandle = processEntityJob.Schedule(m_activeEntities, newJobHandle); m_ECBSource.AddJobHandleForProducer(processJobHandle); var cleanupEntityJob = new CleanupEntityJob() { ConcurrentECB = m_ECBSource.CreateCommandBuffer().ToConcurrent() }; var cleanupJobHandle = cleanupEntityJob.ScheduleSingle(m_destroyedEntities, processJobHandle); m_ECBSource.AddJobHandleForProducer(cleanupJobHandle); return cleanupJobHandle; } protected override void OnDestroy() { // Implement OnDestroy to cleanup any resources allocated by this system. // (This simplified example does not allocate any resources.) } }"
  },
  "manual/gp_scenes.html": {
    "href": "manual/gp_scenes.html",
    "title": "Scenes | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Scenes Synopsis: How to organize an ECS-based project. Creating, loading, unloading scenes, etc Note, this is a placeholder for work that has not been completed yet."
  },
  "manual/gp_rendering.html": {
    "href": "manual/gp_rendering.html",
    "title": "Rendering | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Rendering The Hybrid.Rendering package provides a ECS system to render 3D objects. See DOTS Hybrid Renderer for information about the current DOTS-compatible rendering API."
  },
  "manual/gp_overview.html": {
    "href": "manual/gp_overview.html",
    "title": "Creating gameplay | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Creating gameplay This section contains information on how to create DOTS-based games and other applications in the Unity Editor. It also covers the systems and components that ECS provides to help you implement game features. The systems include: Unity.Transforms : Provides components to define world-space transforms, 3D object hierarchies, and systems to manage them. Unity.Hybrid.Renderer : Provides components and systems to render ECS entities in the Unity runtime. Authoring overview You can use the Unity Editor (with the required DOTS packages) to create DOTS-based games. In the Editor, you use GameObjects as normal to author a Scene and the ECS code converts the GameObjects to entities. The biggest difference when you use DOTS is that instead of writing your own MonoBehaviours to store instance data and implement custom game logic, you define ECS components to store the data at runtime, and write systems for the custom logic. GameObject conversion During GameObject conversion, various conversion systems handle the MonoBehaviour components that they recognize and then convert them into ECS-based components. For example, one of the the Unity.Transforms conversion systems examines the UnityEngine.Transform component and adds ECS components, such as LocalToWorld , to replace it. You can implement an IConvertGameObjectToEntity MonoBehaviour component to specify custom conversion steps. There often isn't a one-to-one relationship between the number of GameObjects ECS converts and the number of entities it creates; nor between the number of MonoBehaviours on a GameObject and the number of ECS components it adds to an entity. The ECS conversion code converts a GameObject if it either has a ConvertToEntity MonoBehaviour component, or if it is part of a SubScene. In either case, the conversion systems provided for various DOTS features, such as Unity.Transforms and Unity.Hybrid.Render, process the GameObject or the Scene Asset and any of their child GameObjects. One difference between converting GameObjects with ConvertToEntity and converting with a SubScene is that ECS serializes and saves to disk the entity data it generates from converting a SubScene. You can load or stream this serialized data very quickly at run time. In contrast, ECS always converts GameObjects with ConvertToEntity MonoBehaviours at runtime. It's best practice to use standard MonoBehaviours to author, and use IConvertGameObjectToEntity to apply the values of those authoring components to IComponentData structs for runtime use. Often, the most convenient data layout to use to author is not the most efficient data layout at runtime. You can use IConvertGameObjectToEntity to customize the conversion of any GameObject in a SubScene, or a GameObject that has a ConvertToEntity MonoBehaviour, or one that is a child of a GameObject that has a ConvertToEntity MonoBehaviour. Note: The authoring workflow for DOTS-based applications is an area of active development. The general outlines are in place, but you should anticipate many changes in this area in the near future. Generated authoring components Unity can automatically generate authoring components for simple runtime ECS components. When Unity generates an authoring component, you can add an add the script containing the ECS component directly to a GameObject within the Editor. You can then use the Inspector window to set the initial values for the component. For IComponentData Unity can automatically generate authoring components for simple IComponentData components. When Unity generates an authoring component, you can add an IComponentData directly to a GameObject in a Scene within the Unity Editor. You can then use the Inspector window to set the initial values for the component. To indicate that you want to generate an authoring component, add the [GenerateAuthoringComponent] attribute to the IComponentData declaration. Unity automatically generates a MonoBehaviour class that contains the public fields of the component and provides a Conversion method that converts those fields over into runtime component data. [GenerateAuthoringComponent] public struct RotationSpeed_ForEach : IComponentData { public float RadiansPerSecond; } Note the following restrictions: Only one component in a single C# file can have a generated authoring component, and the C# file must not have another MonoBehaviour in it. ECS only reflects public fields and they have the same name as that specified in the component. ECS reflects fields of an Entity type in the IComponentData as fields of GameObject types in the MonoBehaviour it generates. ECS converts the GameObjects or Prefabs you assign to these fields as referenced Prefabs. Only public fields are reflected and they will have the same name as that specified in the component. Fields of an Entity type in the IComponentData are reflected as fields of GameObject types in the generated MonoBehaviour. GameObjects or Prefabs you assign to these fields are converted as referenced prefabs. For IBufferElementData You can also generate authoring components for types that implement IBufferElementData by adding the [GenerateAuthoringComponent] attribute: [GenerateAuthoringComponent] public struct IntBufferElement: IBufferElementData { public int Value; } In this example, a class named IntBufferElementAuthoring (which inherits from MonoBehaviour ) is generated, exposing a public field of List<int> type. During conversion, this list will be converted into DynamicBuffer<IntBufferElement> , and then added to the converted entity. Note the following restrictions: Only one component in a single C# file can have a generated authoring component, and the C# file must not have another MonoBehaviour in it. IBufferElementData authoring components cannot be automatically generated for types that contain 2 or more fields. IBufferElementData authoring components cannot be automatically generated for types that have an explicit layout."
  },
  "manual/gp_multiplayer.html": {
    "href": "manual/gp_multiplayer.html",
    "title": "Networking and Multiplayer | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Networking and Multiplayer Synopsis: How to use Unity's networking and multiplayer features with ECS. How to optimize networking and multiplayer with ECS. Note, this is a placeholder for work that has not been completed yet."
  },
  "manual/ecs_entities.html": {
    "href": "manual/ecs_entities.html",
    "title": "Entities | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Entities <!-- > Topics to add > * Spawning Entities in Jobs -- Entity Command Buffers > * Transferring Entities between worlds: EM.MoveEntity --> Entities are one of the three principle elements of an Entity Component System architecture. They represent the individual \"things\" in your game or application. An entity has neither behavior nor data; instead, it identifies which pieces of data belong together. Systems provide the behavior, and components store the data. An entity is essentially an ID. The easiest way to think of it is as a super lightweight GameObject that does not even have a name by default. Entity IDs are stable; you can use them to store a reference to another component or entity. For example, a child entity in a hierarchy might need to reference its parent entity. An EntityManager manages all of the entities in a World . An EntityManager maintains the list of entities and organizes the data associated with an entity for optimal performance. Although an entity does not have a type, groups of entities can be categorized by the types of data components associated with them. As you create entities and add components to them, the EntityManager keeps track of the unique combinations of components on the existing entities. Such a unique combination is called an Archetype . The EntityManager creates an EntityArchetype struct as you add components to an entity. You can use existing EntityArchetype s to create new entities that conform to that archetype. You can also create an EntityArchetype in advance and use that to create entities. Creating entities The easiest way to create an entity is in the Unity Editor. You can set ECS to convert both GameObjects placed in a Scene and Prefabs into entities at runtime. For more dynamic parts of your game or application, you can create spawning systems that create multiple entities in a job. Finally, you can use one of the EntityManager.CreateEntity functions to create entities one at a time. Creating entities with an EntityManager Use one of the EntityManager.CreateEntity functions to create an entity. ECS creates the entity in the same World as the EntityManager. You can create entities one-by-one in the following ways: Create an entity with components that use an array of ComponentType objects. Create an entity with components that use an EntityArchetype . Copy an existing entity, including its current data, with Instantiate Create an entity with no components and then add components to it. (You can add components immediately or when additional components are needed.) You can also create multiple entities at a time: Fill a NativeArray with new entities with the same archetype using CreateEntity . Fill a NativeArray with copies of an existing entity, including its current data, using Instantiate . Explicitly create chunks populated with a specified number of entities with a given archetype with CreateChunk . Adding and removing components After an entity has been created, you can add or remove components. When you do this, the archetype of the affected entities change and the EntityManager must move altered data to a new chunk of memory, as well as condense the component arrays in the original chunks. Changes to an entity that cause structural changes — that is, adding or removing components that change the values of SharedComponentData , and destroying the entity — cannot be done inside a job because these could invalidate the data that the job is working on. Instead, you add the commands to make these types of changes to an EntityCommandBuffer and execute this command buffer after the job is complete. The EntityManager provides functions to remove a component from a single entity as well as all of the entities in a NativeArray. For more information, see the documentation on Components . Iterating entities Iterating over all entities that have a matching set of components, is at the center of the ECS architecture. See Accessing entity Data ."
  },
  "manual/sync_points.html": {
    "href": "manual/sync_points.html",
    "title": "Sync points | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Sync points A synchronization point (sync point) is a point in program execution that waits for the completion of all jobs that have been scheduled so far. Sync points limit your ability to use all worker threads available in the job system for a period of time. As such, you should generally aim to avoid sync points. Structural changes Sync points are caused by operations that you cannot safely perform when there are any other jobs that operate on components. Structural changes to the data in ECS are the primary cause of sync points. All of the following are structural changes: Creating entities Deleting entities Adding components to an entity Removing components from an entity Changing the value of shared components Broadly speaking, any operation that changes the archetype of an entity or causes the order of entities within a chunk to change is a structural change. These structural changes can only be performed on the main thread. Structural changes not only require a sync point, but they also invalidate all direct references to any component data. This includes instances of DynamicBuffer and the result of methods that provide direct access to the components such as ComponentSystemBase.GetComponentDataFromEntity . Avoiding sync points You can use entity command buffers (ECBs) to queue up structural changes instead of immediately performing them. Commands stored in an ECB can be played back at a later point during the frame. This reduces multiple sync points spread across the frame to a single sync point when the ECB is played back. Each of the standard ComponentSystemGroup instances provides a EntityCommandBufferSystem as the first and last systems updated in the group. By getting an ECB object from one of these standard ECB systems, all structural changes within the group occur at the same point in the frame, resulting in one sync point rather than several. ECBs also allow you to record structural changes within a job. Without an ECB, you can only make structural changes on the main thread. (Even on the main thread, it is typically faster to record commands in an ECB and then play back those commands, than it is to make the structural changes one-by-one using the EntityManager class itself.) If you cannot use an EntityCommandBufferSystem for a task, try to group any systems that make structural changes together in the system execution order. Two systems that both make structural changes only incur one sync point if they update sequentially. See Entity Command Buffers for more information about using command buffers and command buffer systems."
  },
  "manual/shared_component_data.html": {
    "href": "manual/shared_component_data.html",
    "title": "Shared component data | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Shared component data Shared components are a special kind of data component that you can use to subdivide entities based on the specific values in the shared component (in addition to their archetype). When you add a shared component to an entity, the EntityManager places all entities with the same shared data values into the same chunk. Shared components allow your systems to process like entities together. For example, the shared component Rendering.RenderMesh , which is part of the Hybrid.rendering package, defines several fields, including mesh , material , and receiveShadows . When your application renders, it is most efficient to process all of the 3D objects that have the same value for those fields together. Because a shared component specifies these properties, the EntityManager places the matching entities together in memory so that the rendering system can efficiently iterate over them. Note: If you over-use shared components, it might lead to poor chunk utilization. This is because when you use a shared component it involves a combinatorial expansion of the number of memory chunks based on archetype and every unique value of each shared component field. As such, avoid adding any fields that aren't needed to sort entities into a category to a shared component. To view chunk utilization, use the Entity Debugger . If you add or remove a component from an entity, or change the value of a shared component, The EntityManager moves the entity to a different chunk, and creates a new chunk if necessary. You should use IComponentData for data that varies between entities, such as storing a World position, agent hit points, or particle time-to-live. In contrast, you should use ISharedComponentData when a lot of entities share something in common. For example in the Boids demo in the DOTS package, a lot of entities instantiate from the same Prefab and as a result, the RenderMesh between many Boid entities is exactly the same. [System.Serializable] public struct RenderMesh : ISharedComponentData { public Mesh mesh; public Material material; public ShadowCastingMode castShadows; public bool receiveShadows; } ISharedComponentData has zero memory cost on a per entity basis. You can use ISharedComponentData to group together all entities that have the same InstanceRenderer data, and then efficiently extract all matrices for rendering. The resulting code is simple and efficient because the data is laid out as ECS accesses it. For an example of this, see the RenderMeshSystemV2 file Packages/com.unity.entities/Unity.Rendering.Hybrid/RenderMeshSystemV2.cs . Important notes about SharedComponentData: ECS groups entities with the same SharedComponentData together in the same chunks . It stores the index to the SharedComponentData once per chunk, not per entity. As a result, SharedComponentData has zero memory overhead on a per entity basis. You can use EntityQuery to iterate over all entities with the same type. You can also use EntityQuery.SetFilter() to iterate specifically over entities that have a specific SharedComponentData value. Because of the data layout, this iteration has a low overhead. You can use EntityManager.GetAllUniqueSharedComponents to retrieve all unique SharedComponentData that is added to any alive entities. ECS automatically reference counts SharedComponentData . SharedComponentData should change rarely. If you want to change a SharedComponentData , it involves using memcpy to copy all ComponentData for that entity into a different chunk."
  },
  "manual/manual_iteration.html": {
    "href": "manual/manual_iteration.html",
    "title": "Manual iteration | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Manual iteration You can request all of the chunks explicitly in a NativeArray and process them with a job such as IJobParallelFor . You should use this method if you need to manage chunks in a way that is not appropriate for the simplified model of iterating over all of the chunks in a EntityQuery. The following is an example of this: public class RotationSpeedSystem : SystemBase { [BurstCompile] struct RotationSpeedJob : IJobParallelFor { [DeallocateOnJobCompletion] public NativeArray<ArchetypeChunk> Chunks; public ArchetypeChunkComponentType<RotationQuaternion> RotationType; [ReadOnly] public ArchetypeChunkComponentType<RotationSpeed> RotationSpeedType; public float DeltaTime; public void Execute(int chunkIndex) { var chunk = Chunks[chunkIndex]; var chunkRotation = chunk.GetNativeArray(RotationType); var chunkSpeed = chunk.GetNativeArray(RotationSpeedType); var instanceCount = chunk.Count; for (int i = 0; i < instanceCount; i++) { var rotation = chunkRotation[i]; var speed = chunkSpeed[i]; rotation.Value = math.mul(math.normalize(rotation.Value), quaternion.AxisAngle(math.up(), speed.RadiansPerSecond * DeltaTime)); chunkRotation[i] = rotation; } } } EntityQuery m_Query; protected override void OnCreate() { var queryDesc = new EntityQueryDesc { All = new ComponentType[]{ typeof(RotationQuaternion), ComponentType.ReadOnly<RotationSpeed>() } }; m_Query = GetEntityQuery(queryDesc); } protected override void OnUpdate() { var rotationType = GetArchetypeChunkComponentType<RotationQuaternion>(); var rotationSpeedType = GetArchetypeChunkComponentType<RotationSpeed>(true); var chunks = m_Query.CreateArchetypeChunkArray(Allocator.TempJob); var rotationsSpeedJob = new RotationSpeedJob { Chunks = chunks, RotationType = rotationType, RotationSpeedType = rotationSpeedType, DeltaTime = Time.deltaTime }; this.Dependency rotationsSpeedJob.Schedule(chunks.Length,32, this.Dependency); } } Iterating manually You can use the EntityManager class to manually iterate through the entities or chunks, though this is not best practice. You should only use these iteration methods in test or debugging code (or when you are just experimenting), or in an isolated World where you have a perfectly controlled set of entities. For example, the following snippet iterates through all of the entities in the active World: var entityManager = World.Active.EntityManager; var allEntities = entityManager.GetAllEntities(); foreach (var entity in allEntities) { //... } allEntities.Dispose(); This snippet iterates through all of the chunks in the active World: var entityManager = World.Active.EntityManager; var allChunks = entityManager.GetAllChunks(); foreach (var chunk in allChunks) { //... } allChunks.Dispose();"
  },
  "manual/index.html": {
    "href": "manual/index.html",
    "title": "Entity Component System | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": ".infographic { background-color: #020202; } .slide-indicator { position:absolute; opacity: 0.0; transition: opacity .5s ease; } .slide-indicator:hover { opacity: 1.0; } Entity Component System The Entity Component System (ECS) is the core of the Unity Data-Oriented Tech Stack. As the name indicates, ECS has three principal parts: Entities — the entities, or things, that populate your game or program. Components — the data associated with your entities, but organized by the data itself rather than by entity. (This difference in organization is one of the key differences between an object-oriented and a data-oriented design.) Systems — the logic that transforms the component data from its current state to its next state— for example, a system might update the positions of all moving entities by their velocity times the time interval since the previous frame."
  },
  "manual/entity_iteration_job.html": {
    "href": "manual/entity_iteration_job.html",
    "title": "Using IJobForEach jobs | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Using IJobForEach jobs The IJobForEach class is deprecated in favor of SystemBase and Entities.ForEach . See Creating systems for more information on programming systems."
  },
  "manual/entity_iteration_foreach.html": {
    "href": "manual/entity_iteration_foreach.html",
    "title": "Using ComponentSystem methods | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Using ComponentSystem methods The ComponentSystem class is being phased out in favor of SystemBase . See Creating systems for more information on programming systems."
  },
  "manual/entity_command_buffer.html": {
    "href": "manual/entity_command_buffer.html",
    "title": "Entity Command Buffers | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Entity Command Buffers The EntityCommandBuffer (ECB) class solves two important problems: When you're in a job, you can't access the EntityManager . When you perform a structural change (like creating an entity), you create a sync point and must wait for all jobs to complete. The EntityCommandBuffer abstraction allows you to queue up changes (from either a job or from the main thread) so that they can take effect later on the main thread. Entity command buffer systems Entity command buffer systems allow you to play back the commands queued up in ECBs at a clearly defined point in a frame. These systems are usually the best way to use ECBs. You can acquire multiple ECBs from the same entity command buffer system and the system will play back all of them in the order they were created when it is updated. This creates a single sync point when the system is updated instead of one sync point per ECB and ensures determinism. The default World initialization provides three system groups, for initialization, simulation, and presentation, that are updated in order each frame. Within a group, there is an entity command buffer system that runs before any other system in the group and another that runs after all other systems in the group. Preferably, you should use one of the existing command buffer systems rather than creating your own in order to minimize synchronization points. See Default System Groups for a list of the default groups and command buffer systems. If you want to use an ECB from a parallel job (e.g. in an Entities.ForEach ), you must ensure that you convert it to a concurrent ECB first by calling ToConcurrent on it. To ensure that the sequence of the commands in the ECB does not depend on how the work is distributed across jobs, you must also pass the index of the entity in the current query to each operation. You can acquire and use an ECB like this: struct Lifetime : IComponentData { public byte Value; } class LifetimeSystem : SystemBase { EndSimulationEntityCommandBufferSystem m_EndSimulationEcbSystem; protected override void OnCreate() { base.OnCreate(); // Find the ECB system once and store it for later usage m_EndSimulationEcbSystem = World .GetOrCreateSystem<EndSimulationEntityCommandBufferSystem>(); } protected override void OnUpdate() { // Acquire an ECB and convert it to a concurrent one to be able // to use it from a parallel job. var ecb = m_EndSimulationEcbSystem.CreateCommandBuffer().ToConcurrent(); Entities .ForEach((Entity entity, int entityInQueryIndex, ref Lifetime lifetime) => { // Track the lifetime of an entity and destroy it once // the lifetime reaches zero if (lifetime.Value == 0) { // pass the entityInQueryIndex to the operation so // the ECB can play back the commands in the right // order ecb.DestroyEntity(entityInQueryIndex, entity); } else { lifetime.Value -= 1; } }).ScheduleParallel(); // Make sure that the ECB system knows about our job m_EndSimulationEcbSystem.AddJobHandleForProducer(this.Dependency); } }"
  },
  "manual/entities_job_foreach.html": {
    "href": "manual/entities_job_foreach.html",
    "title": "SystemBase lambda functions | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "SystemBase lambda functions This documentation has been moved to the SystemBase class documentation. Also, see Creating systems for more information on programming systems."
  },
  "manual/ecs_write_groups.html": {
    "href": "manual/ecs_write_groups.html",
    "title": "Write groups | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Write groups A common ECS pattern is for a system to read one set of input components and write to another component as its output . However, in some cases, you might want to override the output of a system, and use a different system based on a different set of inputs to update the output component. Write groups provide a mechanism for one system to override another, even when you cannot change the other system. The write group of a target component type consists of all other component types that ECS applies the WriteGroup attribute to, with that target component type as the argument. As a system creator, you can use write groups so that your system's users can exclude entities that your system would otherwise select and process. This filtering mechanism lets system users update components for the excluded entities based on their own logic, while letting your system operate normally on the rest. To make use of write groups, you must use the write group filter option on the queries in your system. This excludes all entities from the query that have a component from a write group of any of the components that are marked as writable in the query. To override a system that uses write groups, mark your own component types as part of the write group of the output component type of that system. The original system ignores any entities that have your components and you can update the data of those entities with your own systems. Write groups example In this example, you use an external package to color all characters in your game depending on their state of health. For this, there are two components in the package: HealthComponent and ColorComponent . public struct HealthComponent : IComponentData { public int Value; } public struct ColorComponent : IComponentData { public float4 Value; } Additionally, there are two systems in the package: The ComputeColorFromHealthSystem , which reads from HealthComponent and writes to ColorComponent The RenderWithColorComponent , which reads from ColorComponent To represent when a player uses a power-up and their character becomes invincible, you attach an InvincibleTagComponent to the character's entity. In this case, the character's color should change to a separate, different color, which the above example does not accommodate. You can create your own system to override the ColorComponent value, but ideally ComputeColorFromHealthSystem would not compute the color for your entity to begin with. It should ignore any entity that has InvincibleTagComponent . This becomes more relevant when there are thousands of players on the screen. Unfortunately, the system is from another package which does not know about the InvincibleTagComponent . This is when a write group is useful. It allows a system to ignore entities in a query when you know that the values it computes would be overridden anyway. There are two things you need to support this: The InvincibleTagComponent must marked as part of the write group of ColorComponent : [WriteGroup(typeof(ColorComponent))] struct InvincibleTagComponent : IComponentData {} The write group of ColorComponent consists of all component types that have the WriteGroup attribute with typeof(ColorComponent) as the argument. The ComputeColorFromHealthSystem must explicitly support write groups. To achieve this, the system needs to specify the EntityQueryOptions.FilterWriteGroup option for all its queries. You could implement the ComputeColorFromHealthSystem like this: ... protected override void OnUpdate() { Entities .WithName(\"ComputeColor\") .WithEntityQueryOptions(EntityQueryOptions.FilterWriteGroup) // support write groups .ForEach((ref ColorComponent color, in HealthComponent health) => { // compute color here }).ScheduleParallel(); } ... When this executes, the following happens: The system detects that you write to ColorComponent because it is a by-reference parameter It looks up the write group of ColorComponent and finds the InvincibleTagComponent in it It excludes all entities that have an InvincibleTagComponent The benefit is that this allows the system to exclude entities based on a type that is unknown to the system and might live in a different package. Note: For more examples, see the Unity.Transforms code, which uses write groups for every component it updates, including LocalToWorld . Creating write groups To create write groups, add the WriteGroup attribute to the declarations of each component type in the write group. The WriteGroup attribute takes one parameter, which is the type of component that the components in the group uses to update. A single component can be a member of more than one write group. For example, if you have a system that writes to component W whenever there are components A or B on an entity, then you can define a write group for W as follows: public struct W : IComponentData { public int Value; } [WriteGroup(typeof(W))] public struct A : IComponentData { public int Value; } [WriteGroup(typeof(W))] public struct B : IComponentData { public int Value; } Note: You do not add the target of the write group (component W in the example above) to its own write group. Enabling write group filtering To enable write group filtering, set the FilterWriteGroups flag on your job: public class AddingSystem : SystemBase { protected override void OnUpdate() { Entities // support write groups by setting EntityQueryOptions .WithEntityQueryOptions(EntityQueryOptions.FilterWriteGroup) .ForEach((ref W w, in B b) => { // perform computation here }).ScheduleParallel();} } For query description objects, set the flag when you create the query: public class AddingSystem : SystemBase { private EntityQuery m_Query; protected override void OnCreate() { var queryDescription = new EntityQueryDesc { All = new ComponentType[] { ComponentType.ReadWrite<W>(), ComponentType.ReadOnly<B>() }, Options = EntityQueryOptions.FilterWriteGroup }; m_Query = GetEntityQuery(queryDescription); } // Define IJobChunk struct and schedule... } When you enable write group filtering in a query, the query adds all components in a write group of a writable component to the None list of the query unless you explicitly add them to the All or Any lists. As a result, the query only selects an entity if it explicitly requires every component on that entity from a particular write group. If an entity has one or more additional components from that write group, the query rejects it. In the example code above, the query: Excludes any entity that has component A , because W is writable and A is part of the write group of W . Does not exclude any entity that has component B . Even though B is part of the write group of W , it is also explicitly specified in the All list. Overriding another system that uses write groups If a system uses write group filtering in its queries, you use your own system to override that system and write to those components. To override the system, add your own components to the write groups of the components to which the other system writes. Because write group filtering excludes any components in the write group that the query doesn't explicitly required, the other system ignores any entities that have your components. For example, if you want to set the orientation of your entities by specifying the angle and axis of rotation, you can create a component and a system to convert the angle and axis values into a quaternion and write that to the Unity.Transforms.Rotation component. To prevent the Unity.Transforms systems from updating Rotation , no matter what other components besides yours are present, you can put your component in the write group of Rotation : using System; using Unity.Collections; using Unity.Entities; using Unity.Transforms; using Unity.Mathematics; [Serializable] [WriteGroup(typeof(Rotation))] public struct RotationAngleAxis : IComponentData { public float Angle; public float3 Axis; } You can then update any entities with the RotationAngleAxis component without contention: using Unity.Burst; using Unity.Entities; using Unity.Jobs; using Unity.Collections; using Unity.Mathematics; using Unity.Transforms; public class RotationAngleAxisSystem : SystemBase { protected override void OnUpdate() { Entities.ForEach((ref Rotation destination, in RotationAngleAxis source) => { destination.Value = quaternion.AxisAngle(math.normalize(source.Axis), source.Angle); }).ScheduleParallel(); } } Extending another system that uses write groups If you want to extend another system rather than override it, or if you want to allow future systems to override or extend your system, then you can enable write group filtering on your own system. However, when you do this, neither system handles no combinations of components by default. You must explicitly query for and process each combination. In the previous example, it defined a write group that contains components A and B that targets component W . If you add a new component, called C , to the write group, then the new system that knows about C can query for entities that contain C and it does not matter if those entities also have components A or B . However, if the new system also enables write group filtering, that is no longer true. If you only require component C , then write group filtering excludes any entities with either A or B . Instead, you must explicitly query for each combination of components that make sense. Note: You can use the Any clause of the query when appropriate. var query = new EntityQueryDesc { All = new ComponentType[] { ComponentType.ReadOnly<C>(), ComponentType.ReadWrite<W>() }, Any = new ComponentType[] { ComponentType.ReadOnly<A>(), ComponentType.ReadOnly<B>() }, Options = EntityQueryOptions.FilterWriteGroup }; If you have any entities that contain combinations of components in the write group that are not explicitly mentioned, then the system that writes to the target of the write group, and its filters, does not handle them. However, if you have any if these type of entities, it is most likely a logical error in the program, and they should not exist."
  },
  "manual/ecs_testing.html": {
    "href": "manual/ecs_testing.html",
    "title": "Testing ECS code | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Testing ECS code Synopsis: Using the Unity test framework with ECS. Tips for testing ECS code effectively."
  },
  "manual/ecs_job_overview.html": {
    "href": "manual/ecs_job_overview.html",
    "title": "Jobs in ECS | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Jobs in ECS ECS uses the C# Job System extensively. Whenever possible, you should use the jobs in your system code. The SystemBase class provides Entities.ForEach and Job.WithCode to help implement your game logic as multithreaded code. In more complex situations, you can use IJobChunk . For example, the following system updates positions: using Unity.Burst; using Unity.Collections; using Unity.Entities; using Unity.Jobs; using Unity.Transforms; public class MovementSpeedSystem : SystemBase { // OnUpdate runs on the main thread. protected override void OnUpdate() { Entities .ForEach((ref Translation position, in MovementSpeed speed) => { float3 displacement = speed.Value * dt; position = new Translation(){ Value = position.Value + displacement }; }) .ScheduleParallel(); } } For more information about systems, see ECS Systems ."
  },
  "manual/ecs_job_extensions.html": {
    "href": "manual/ecs_job_extensions.html",
    "title": "Job extensions | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Job extensions The Unity C# job system lets you run code on multiple threads. The system provides scheduling, parallel processing, and multi-threaded safety. The job system is a core Unity module that provides the general purpose interfaces and classes to create and run jobs (whether or not you are using ECS). These interfaces include: IJob : Create a job that runs on any thread or core, which the job system scheduler determines. IJobParallelFor : Create a job that can run on multiple threads in parallel to process the elements of a NativeContainer . IJobExtensions : Provides extension methods to run IJobs. IJobParalllelForExtensions : Provides extension methods to run IJobParallelFor jobs. JobHandle : A handle to access a scheduled job. You can also use JobHandle instances to specify dependencies between jobs. For an overview of the jobs system see C# Job System in the Unity User Manual. The Jobs package extends the job system to support ECS. It contains: IJobParallelForDeferExtensions IJobParallelForFilter JobParallelIndexListExtensions Job​Struct​Produce<T>"
  },
  "manual/chunk_iteration.html": {
    "href": "manual/chunk_iteration.html",
    "title": "Accessing entity data | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Accessing entity data Iterating over your data is one of the most common tasks you need to perform when you implement ECS systems. The ECS systems typically process a set of entities, reads data from one or more components, performs a calculation, and then writes the result to another component. The most efficient way to iterate over entities and components is in a parallelizable job that processes the components in order. This takes advantage of the processing power from all available cores and data locality to avoid CPU cache misses. The ECS API provides a number of ways to accomplish iteration, each with its own performance implications and restrictions. You can iterate over ECS data in the following ways: SystemBase.Entities.ForEach — the simplest efficient way to process component data entity by entity. IJobChunk — iterates over the eligible blocks of memory (called a chunk ) that contain matching entities. The job Execute() function can use a for loop to iterate over the elements inside each chunk. You can use IJobChunk for more complex situations than Entities.ForEach supports, while maintaining maximum efficiency. [Manual iteration] — if the previous methods are insufficient, you can manually iterate over entities or Chunks. For example, you can use a job such as IJobParallelFor to get a NativeArray that contains entities or the Chunks of the entities that you want to process and iterate over. The EntityQuery class provides a way to construct a view of your data that contains only the specific data you need for a given algorithm or process. Many of the iteration methods in the list above use an EntityQuery , either explicitly or internally. Important: The following iteration types should not be used in new code: IJobForEach IJobForEachWithEntity ComponentSystem JobComponentSystem These types are being phased out in preference to SystemBase and will become obsolete once they have gone through a deprecation cycle. Use SystemBase and SystemBase.Entities.ForEach or IJobChunk to replace them."
  },
  "manual/TableOfContents.html": {
    "href": "manual/TableOfContents.html",
    "title": "| Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Overview Core ECS Entities Entity Queries Worlds Components General purpose components Shared components System state components Dynamic buffer components Chunk components Systems Creating systems Using Entities.ForEach Using Job.WithCode Using IJobChunk Manual iteration System Update Order ECS Job dependencies Looking up data Entity Command Buffers Sync points and structural changes Component WriteGroups Versions and Generations C# Job System extensions Creating Gameplay Transforms Rendering"
  },
  "license/index.html": {
    "href": "license/index.html",
    "title": "| Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "window.location.replace('LICENSE.html')"
  },
  "changelog/CHANGELOG.html": {
    "href": "changelog/CHANGELOG.html",
    "title": "Change log | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Change log [Unreleased] Added Added HasComponent / GetComponent / SetComponent methods that streamline access to components through entities when using the SystemBase class. These methods call through to EntityManager methods when in OnUpdate code and codegen access through ComponentDataFromEntity when inside of Entities.ForEach . Changed Bumped version of burst to fix a regression that could break usage of native plugins. Fixed an issue where shared component filtering could be broken until the shared component data is manually set/added when using a deserialized world. Users can control the update behaviour of a ComponentSystemGroup via an update callback. See the documentation for ComponentSystemGroup.UpdateCallback , as well as examples in FixedRateUtils . IDisposable and ICloneable are now supported on managed components. World now exposes a Flags field allowing the editor to improve how it filters world to show in various tooling windows. World.Systems is now a read only collection that does not allocate managed memory while being iterated over. Deprecated Property World.AllWorlds is now replaced by World.All which now returns a read only collection that does not allocate managed memory while being iterated over. Removed Fixed Non-moving children in transform hierarchies no longer trigger transform system updates. Fixed a bug where dynamic buffer components would sometimes leak during live link. Fixed crash that would occur if only method in a module was generated from a [GenerateAuthoringComponent] type. Entities.ForEach now throws a correct error message when it is used with a delegate stored in a variable, field or returned from a method. Fix IL2CPP compilation error with Entities.ForEach that uses a tag component and WithStructuralChanges . Entities.ForEach now marshals lambda parameters for DOTS Runtime when the lambda is burst compiled and has collection checks enabled. Previously using EntityCommandBuffer or other types with a DisposeSentinel field as part of your lambda function (when using DOTS Runtime) may have resulted in memory access violation. Security [0.6.0] - 2020-02-17 Added The [GenerateAuthoringComponent] attribute is now allowed on structs implementing IBufferElementData . An authoring component is automatically generated to support adding a DynamicBuffer of the type implementing IBufferElementData to an entity. Added new SystemBase base class for component systems. This new way of defining component systems manages dependencies for the user (manual dependency management is still possible by accessing the SystemBase.Dependency field directly). New ScheduleParallel methods in IJobChunk and Entities.ForEach (in SystemBase ) to make parallel scheduling of jobs explicit. ScheduleSingle in IJobChunk indicates scheduling work to be done in a non-parallel manner. New editor workflow to quickly and easily build LiveLink player using the BuildConfiguration API. Adds Live Link support for GameObject scenes. The SceneSystem API now also loads GameObject scenes via LoadSceneAsync API. Added new build component for LiveLink settings in Unity.Scenes.Editor to control how initial scenes are handled (LiveLink all, embed all, embed first). Users can now inspect post-procssed IL code inside Unity Editor: DOTS -> DOTS Compiler -> Open Inspector Changed The package com.unity.build has been merged into the package com.unity.platforms . As such, removed the dependency on com.unity.build@0.1.0-preview and replaced it with com.unity.platforms@0.2.1-preview.1 . Please read the changelog of com.unity.platforms for more details. Managed components are now stored in a way that will generate less GC allocations when entities change archetype. Moved Unity.Entities.ICustomBootstrap from Unity.Entities.Hybrid to Unity.Entities. World.Dispose() now completes all reader/writer jobs on the World 's EntityManager before releasing any resources, to avoid use-after-free errors. Fix AssemblyResolveException when loading a project with dependent packages that are using Burst in static initializers or InitializeOnLoad . .sceneWithBuildSettings files that are stored in Assets/SceneDependencyCache are no longer rebuilt constantly. Because they are required for SubScene behaviour to work in the editor, if these are deleted they are recreated by OnValidate of the SubScene in the edited Scene. They should also be recreated on domain reload (restarting unity, entering/exiting playmode, etc). EntityQuery.cs : Overloads of CreateArchetypeChunkArray , ToComponentDataArray , ToEntityArray , and CopyFromComponentDataArray that return a JobHandle (allowing the work to be done asynchronously) have been renamed to add Async to the title (i.e. ToComponentDataArrayAsync ). The old overloads have been deprecated and an API Updater clause has been added. Entities.WithName now only accepts names that use letters, digits, and underscores (not starting with a digit, no two consecutive underscores) Updated package com.unity.properties to version 0.10.4-preview . Updated package com.unity.serialization to version 0.6.4-preview . The entity debugger now remembers whether chunk info panel is visible The entity debugger now displays the full name for nested types in the system list The entity debugger now sorts previously used filter components to the top of the filter GUI Bumped burst version to include the new features and fixes including: Fix an issue with function pointers being corrupted after a domain reload that could lead to hard crashes. Fix potential deadlock between Burst and the AssetDatabase if burst is being used when building the database. Deprecated Method GetBuildSettingsComponent on class GameObjectConversionSystem has been renamed to GetBuildConfigurationComponent . Method TryGetBuildSettingsComponent on class GameObjectConversionSystem has been renamed to TryGetBuildConfigurationComponent . Member BuildSettings on class GameObjectConversionSettings has been renamed to BuildConfiguration . Member BuildSettingsGUID on class SceneSystem has been renamed to BuildConfigurationGUID . Removed Removed expired API SceneSectionData.SharedComponentCount Removed expired API struct SceneData Removed expired API SubScene._SceneEntities Removed expired API World.Active Fixed Ability to open and close SubScenes from the scene hierarchy window (Without having to move cursor to inspector window). Ability to create a new empty Sub Scene without first creating a game object. Improve performance of SubScene loading and change tracking in the editor. Fixed regression where GetSingleton would create a new query on every call. Fixed SubScenes trying to load an already loaded AssetBundle when loaded multiple times on the same player, but with different Worlds. Make it clear that SubScenes in Prefabs are not supported. Lambda job codegen tests now fail if the error message does not contain the expected contents. Improved performance of setting up the world required for game object conversion The chunkIndex parameter passed to IJobChunk.Execute() now has the correct value. Fixed an error which caused entities with ISystemStateSharedComponentData components to not be cleaned up correctly. Managed components containing Entity fields will now correctly serialize. Fixed issue where BlobAssetVerifier will throw error if it can't resolve a type. Exposed the Managed Component extensions for EntityQuery . Entities.ForEach now identifies when this of the enclosing system is captured due to calling an extension method on it when compilation fails since the lambda was emitted as a member function Entities.ForEach now reports when a field of the outer system is captured and used by reference when compilation fails since the lambda was emitted as a member function Entities.ForEach does not erronously point to calling static functions as the source of the error when compilation fails since the lambda was emitted as a member function Debugging inside of Entities.ForEach with Visual Studio 2017/2019 (some debugging features will need an upcoming update of the com.unity.ide.visualstudio package). EntityQuery.ToComponentArray<T> with T deriving from UnityEngine.Component now correctly collects all data in a chunk Fixed an issue with ComponentSystemBase.GetEntityQuery and EntityManager.CreateEntityQuery calls made with EntityQueryDesc not respecting read-only permissions. [0.5.1] - 2020-01-28 Changed Constructor-related exceptions thrown during World.CreateSystem will now included the inner exception details. DefaultWorldInitialization.GetAllSystems now returns IReadOnlyList<Type> instead of List<Type> DefaultWorldInitialization.AddSystemsToRootLevelSystemGroups now takes IEnumerable<Type> instead of List<Type> Fixed Fixed an issue where BlobAssetReference types was not guaranteed to be 8-byte aligned on all platforms which could result in failing to read Blob data in components correctly on 32-bit platforms. Fixed issue in MinMaxAABB.Equals() comparing Min to itself rather than other . Entities.ForEach now properly treats in parameters of DynamicBuffer type as read-only Fixed potential crash caused by a leaked job after an exception is thrown during a call to IJobChunk.Schedule . Fixed regression in ComponentSystemBase.GetSingleton() where a new query would be created every timee the function is called. [0.5.0] - 2020-01-16 Added Added AndroidHybrid.buildpipeline with RunStepAndroid Changed Entities.WithReadOnly , Entities.WithNativeDisableParallelForRestriction , Entities.WithDeallocateOnJobCompletion , Entities.WithNativeDisableSafetyRestriction and Entities.WithNativeDisableUnsafePtrRestriction now check their argument types for the proper attributes ( [NativeContainer] , [NativeContainerSupportsDeallocateOnJobCompletion] ) at compile time and throw an error when used on a field of a user defined type. Log entries emitted during subscene conversion without a context object are now displayed in the subscene inspector instead of discarded Deprecated Adding removal dates to the API that have been deprecated but did not have the date set. BlobAssetReference<T> : Release() was deprecated, use Dispose() instead. Removed Adding removal dates to the API that have been deprecated but did not have the date set. BlobAssetReference<T> : Release() was deprecated, use Dispose() instead. EntityQuery.cs : Removed expired API CalculateLength() , SetFilter() and SetFilterChanged() . Fixed Fixed an issue where trying to perform EntityRemapping on Managed Components could throw if a component field was null. EntityManager.MoveEntitiesFrom with query was not bumping shared component versions, order versions or dirty versions correctly. Now it does. Fixed that adding a Sub Scene component from the Add Components dropdown was not reflected in the Hierarchy. Fixed so that Undo/Redo of changes to SceneAsset objectfield in the Sub Scene Inspector is reflected in the Hierarchy. Make it clear when Sub Scene duplicates are present: shown in Hierarchy and by showing a warning box in the Inspector. Support Undo for 'Create Sub Scene From Selection' context menu item. Better file name error handling for the 'New Sub Scene From Selection' context menu item. Keep sibling order for new Sub Scene when created using 'New Sub Scene From Selection' (prevents the new Sub Scene from ending as the last sibling). Handle if selection contains part of a Prefab instance when creating Sub Scene from Selection. Fix dangling loaded Sub Scenes not visualized in the Hierarchy when removing Scene Asset reference in Sub Scene component. Fixed an issue with invalid IL generated by Entities.ForEach when structs are captured as locals from two different scopes and their fields are accessed. Make it clear in the Hierarchy and Sub Scene Inspector that nesting Sub Scenes is not yet supported. Fixed an issue with BinaryWriter where serializing a System.String[] with a single element would throw an exception. Fixed an issue with ComponentSystem.GetEntityQuery and JobComponentSystem.GetEntityQuery which caused improper caching of queries when using \"None\" or \"Any\" fields. [0.4.0] - 2019-12-16 This version requires Unity 2019.3.0f1+ New Features Two new methods added to the public API: void EntityCommandBuffer.AddComponent<T>(EntityQuery entityQuery) void EntityCommandBuffer.RemoveComponent<T>(EntityQuery entityQuery) BlobArray, BlobString & BlobPtr are not allowed to be copied by value since they carry offset pointers that aree relative to the location of the memory. This could easily result in programming mistakes. The compiler now prevents incorrect usage by enforcing any type attributed with [MayOnlyLiveInBlobStorage] to never be copied by value. Changes Deprecates TypeManager.CreateTypeIndexForComponent and it's other component type variants. Types can be dynamically added (in Editor builds) by instead passing the new unregistered types to TypeManager.AddNewComponentTypes instead. RequireForUpdate(EntityQuery) and RequireSingletonForUpdate on a system with [AlwaysUpdate] will now throw an exception instead of being ignored. ChangeVersionUtility.IncrementGlobalSystemVersion & ChangeVersionUtility.InitialGlobalSystemVersion is now internal. They were accidentally public previously. Entity inspector now shows entity names and allows to rename the selected entity Improved entity debugger UI Create WorldRenderBounds for prefabs and disabled entities with renderers during conversion, this make instantiation of those entities significantly faster. Reduced stack depth of System.Update / OnUpdate method (So it looks better in debugger) Assert when using EntityQuery from another world Using an EntityQuery created in one world on another world was resulting in memory corruption. We now detect it in the EntityManager API and throw an argument exception Structural changes now go through a bursted codepath and are significantly faster DynamicBuffer.Capacity is now settable Fixes Remove unnecessary & incorrect warning in DeclareReferencedPrefab when the referenced game object is a scene object GameObjects with ConvertAndInject won't get detached from a non-converted parent (fixes regression) Fixed a crash that could occur when destroying an entity with an empty LinkedEntityGroup. Updated performance package dependency to 1.3.2 which fixes an obsoletion warning The EntityCommandBuffer can be replayed repeatedly. Fixed exception in entity binary scene serialization when referencing a null UnityEngine.Object from a shared component Moving scripts between assemblies now triggers asset bundle rebuilds where necessary for live link Fixed LiveLink on Android [0.3.0] - 2019-12-03 New Features ENABLE_SIMPLE_SYSTEM_DEPENDENCIES define can now be used to replace the automatic dependency chaining with a much simplified strategy. With ENABLE_SIMPLE_SYSTEM_DEPENDENCIES it simply chains jobs in the order of the systems against previous jobs. Without ENABLE_SIMPLE_SYSTEM_DEPENDENCIES, dependencies are automatically chained based on read / write access of component data of each system. In cases when there game code is forced to very few cores or there are many systems, this can improve performance since it reduces overhead in calculating optimal dependencies. Added DebuggerTypeProxy for MultiListEnumerator<T> (e.g. this makes the results of GameObjectConversionSystem.GetEntities calls readable in the debugger) Two new methods added to the public API: EntityManager.CreateEntity(Archetype type, int count, Allocator allocator); EntityManager.Instantiate(Entity entity, int count, Allocator allocator); Both methods return a NativeArray<Entity> . Changes Removed the following deprecated API as announced in/before 0.1.1-preview : From GameObjectConversionUtility.cs: ConvertIncrementalInitialize() and ConvertScene() . From Translation.cs: struct Position . From EditorEntityScenes.cs: WriteEntityScene() . From GameObjectConversionSystem.cs: AddReferencedPrefab() , AddDependency() , AddLinkedEntityGroup() , DstWorld . From DefaultWorld.cs: class EndPresentationEntityCommandBufferSystem . Fixes ConvertAndInject won't destroy the root GameObject anymore (fixes regression introduced in 0.2.0) Fix Android/iOS build when using new build pipeline Provide correct application extension apk, aab or empty for project export when building to Android [0.2.0] - 2019-11-22 This version requires Unity 2019.3 0b11+ New Features Automatically generate authoring components for IComponentData with IL post-processing. Any component data marked with a GenerateAuthoringComponent attribute will generate the corresponding authoring MonoBehaviour with a Convert method. BuildSettings assets are now used to define a single build recipe asset on disk. This gives full control over the build pipeline in a modular way from C# code. BuildSettings let you attach builtin or your own custom IBuildSettingsComponents for full configurability BuildPipelines let you define the exact IBuildStep that should be run and in which order IBuildStep is either builtin or your own custom build step BuildSettings files can be inherited so you can easily make base build settings with most configuration complete and then do minor adjustments per build setting Right now most player configuration is still in the existing PlayerSettings, our plan is to over time expose all Player Settings via BuildSettings as well to ease configuration of complex projects with many build recipes & artifacts SubScenes are now automatically converted to entity binary files & cached by the asset pipeline. The entity cache files previously present in the project folder should be removed. Conversion systems can use the ConverterVersion attribute to convert to trigger a reconversion if the conversion system has changed behaviour. The conversion happens asynchronously in another process. Thus on first open the subscenes might not show up immediately. Live link builds can be built with the new BuildSettings pipeline. Open sub scene Closed Entity scenes are built by the asset pipeline and loaded via livelink on demand Opened Entity scenes are send via live entity patcher with patches on a per component / entity basis based on what has changed Assets referenced by entity scenes are transferred via livelink when saving the asset Scenes loaded as game objects are currently not live linked (This is in progress) by assigning the LiveLink build pipeline Entities.ForEach syntax for supplying jobified code in a JobComponentSystem 's OnUpdate method directly by using a lambda (instead of supplying an additional IJobForEach ). EntityQueryMask has been added, which allows for quick confirmation of if an Entity would be returned by an EntityQuery without filters via EntityQueryMask.Matches(Entity entity) . An EntityQueryMask can be obtained by calling EntityManager.GetEntityQueryMask(EntityQuery query). Unity Entities now supports the Fast Enter playmode which can be enabled in the project settings. It is recommended to be turned on for all dots projects. The UnityEngine component StopConvertToEntity can be used to interrupt ConvertToEntity recursion, and should be preferred over a ConvertToEntity set to \"convert and inject\" for that purpose. EntityDebugger now shows IDs in a separate column, so you can still see them when entities have custom names Entity references in the Entity Inspector have a \"Show\" button which will select the referenced Entity in the Debugger. An ArchetypeChunkIterator can be created by calling GetArchetypeChunkIterator on an EntityQuery . You may run an IJobChunk while bypassing the Jobs API by passing an ArchetypeChunkIterator into IJobChunk.RunWithoutJobs() . The [AlwaysSynchronizeSystem] attribute has been added, which can be applied to a JobComponentSystem to force it to synchronize on all of its dependencies before every update. BoneIndexOffset has been added, which allows the Animation system to communicate a bone index offset to the Hybrid Renderer. Initial support for using Hybrid Components during conversion, see the HybridComponent sample in the StressTests folder. New GameObjectConversionSystem.ForkSettings() that provides a very specialized method for creating a fork of the current conversion settings with a different \"EntityGuid namespace\", which can be used for nested conversions. This is useful for example in net code where multiple root-level variants of the same authoring object need to be created in the destination world. EntityManager LockChunkOrder and UnlockChunkOrder are deprecated. Entity Scenes can be loaded synchronously (during the next streaming system update) by using SceneLoadFlags.BlockOnStreamIn in SceneSystem.LoadParameters . EntityCommandBuffer can now be played back on an ExclusiveEntityTransaction as well as an EntityManager . This allows ECB playback to be invoked from a job (though exclusive access to the EntityManager data is still required for the duration of playback). Upgrade guide If you are using SubScenes you must use the new BuildSettings assets to make a build & run it. SubScenes are not supported from the File -> BuildSettings... & File -> Build and Run workflows. Entities requires AssetDatabase V2 for certain new features, we do not provide support for AssetDatabase V1. Fixes Setting ComponentSystemGroup.Enabled to false now calls OnStopRunning() recursively on the group's member systems, not just on the group itself. Updated Properties pacakge to 0.10.3-preview to fix an exception when showing Physics ComponentData in the inspector as well as fix IL2CPP Ahead of Time linker errors for generic virtual function calls. The LocalToParentSystem will no longer write to the LocalToWorld component of entities that have a component with the WriteGroup(typeof(LocalToWorld)) . Entity Debugger styling work better with Pro theme Entity Inspector no longer has runaway indentation Fixed issue where AddSharedComponentData , SetSharedComponentData did not always update SharedComponentOrderVersion . Fixes serialization issue when reading in managed IComponentData containing array types and UnityEngine.Object references. No exception is thrown when re-adding a tag component with EntityQuery . AddComponent<T>(NativeArray<Entity>) now reliably throws an ArgumentException if any of the target entities are invalid. Fixed an issue where the Entity Debugger would not repaint in edit mode Marking a system as [UpdateInGroup(typeof(LateSimulationSystemGroup))] no longer emits a warning about [DisableAutoCreation] . Fixed rendering of chunk info to be compatible with HDRP Fixed issue where ToComponentDataArray ignored the filter settings on the EntityQuery for managed component types. Changes Deprecated DynamicBuffer.Reserve and made DynamicBuffer.Capacity a settable property. DynamicBuffer.Reserve(10) should now be DynamicBuffer.Capacity = 10 . Moved NativeString code from Unity.Entities to Unity.Collections. Updated dependencies for this package. Significantly improved Entity instantiation performance when running in-Editor. Added support for managed IComponentData types such as class MyComponent : IComponentData {} which allows managed types such as GameObjects or List<>s to be stored in components. Users should use managed components sparingly in production code when possible as these components cannot be used by the Job System or archetype chunk storage and thus will be significantly slower to work with. Refer to the documentation for component data for more details on managed component use, implications and prevention. 'SubSceneStreamingSystem' has been renamed to SceneSectionStreamingSystem and is now internal Deprecated _SceneEntities in SubScene.cs . Please use SceneSystem.LoadAsync / Unload with the respective SceneGUID instead. This API will be removed after 2019-11-22. Updated com.unity.serialization to 0.6.3-preview . The deprecated GetComponentGroup() APIs are now protected and can only be called from inside a System like their GetEntityQuery() successors. All GameObjects with a ConvertToEntity set to \"Convert and Destroy\" will all be processed within the same conversion pass, this allows cross-referencing. Duplicate component adds are always ignored When adding component to single entity via EntityQuery, entity is moved to matching chunk instead of chunk achetype changing. \"Used by Systems\" list skips queries with filters Managed IComponentData no longer require all fields to be non-null after default construction. ISharedComponentData is serialized inline with entity and managed IComponentData . If a shared component references a UnityEngine.Object type, that type is serialized separately in an \"objrefs\" resource asset. EntityManager calls EntityComponentStore via burst delegates for Add / Remove components. EntityComponentStore cannot throw exceptions (since called as burst delegate from main thread.) bool ICustomBootstrap.Initialize(string defaultWorldName) has changed API with no deprecated fallback. It now simply gives you a chance to completely replace the default world initialization by returning true. ICustomBootstrap & DefaultWorldInitialization is now composable like this: class MyCustomBootStrap : ICustomBootstrap { public bool Initialize(string defaultWorldName) { Debug.Log(\"Executing bootstrap\"); var world = new World(\"Custom world\"); World.DefaultGameObjectInjectionWorld = world; var systems = DefaultWorldInitialization.GetAllSystems(WorldSystemFilterFlags.Default); DefaultWorldInitialization.AddSystemsToRootLevelSystemGroups(world, systems); ScriptBehaviourUpdateOrder.UpdatePlayerLoop(world); return true; } } ICustomBootstrap can now be inherited and only the most deepest subclass bootstrap will be executed. DefaultWorldInitialization.GetAllSystems is not affected by bootstrap, it simply returns a list of systems based on the present dlls & attributes. Time is now available per-World, and is a property in a ComponentSystem . It is updated from the UnityEngine.Time during the InitializationSystemGroup of each world. If you need access to time in a sytem that runs in the InitializationSystemGroup , make sure you schedule your system after UpdateWorldTimeSystem . Time is also a limited TimeData struct; if you need access to any of the extended fields available in UnityEngine.Time , access UnityEngine.Time explicitly` Systems are no longer removed from a ComponentSystemGroup if they throw an exception from their OnUpdate . This behavior was more confusing than helpful. Managed IComponentData no longer require implementing the IEquatable<> interface and overriding GetHashCode() . If either function is provided it will be preferred, otherwise the component will be inspected generically for equality. EntityGuid is now constructed from an originating ID, a namespace ID, and a serial, which can be safely extracted from their packed form using new getters. Use a and b fields when wanting to treat this as an opaque struct (the packing may change again in the future, as there are still unused bits remaining). The a/b constructor has been removed, to avoid any ambiguity. Updated com.unity.platforms to 0.1.6-preview . The default Api Compatibility Level should now be .NET Standard 2.0 and a warning is generated when the project uses .NET 4.x . Added [UnityEngine.ExecuteAlways] to LateSimulationSystemGroup , so its systems run in Edit Mode. [0.1.1] - 2019-08-06 New Features EntityManager.SetSharedComponentData(EntityQuery query, T componentData) has been added which lets you efficiently swap a shared component data for a whole query. (Without moving any component data) Upgrade guide The deprecated OnCreateManager and OnDestroyManager are now compilation errors in the NET_DOTS profile as overrides can not be detected reliably (without reflection). To avoid the confusion of \"why is that not being called\", especially when there is no warning issued, this will now be a compilation error. Use OnCreate and OnDestroy instead. Changes Updated default version of burst to 1.1.2 Fixes Fixed potential memory corruption when calling RemoveComponent on a batch of entities that didn't have the component. Fixed an issue where an assert about chunk layout compatibility could be triggered when adding a shared component via EntityManager.AddSharedComponentData (EntityQuery entityQuery, T componentData). Fixed an issue where Entities without any Components would cause UI errors in the Chunk Info view Fixed EntityManager.AddComponent(NativeArray entities, ComponentType componentType) so that it handles duplicate entities in the input NativeArray. Duplicate entities are discarded and the component is added only once. Prior to this fix, an assert would be triggered when checking for chunk layout compatibility. Fixed invalid update path for ComponentType.Create . Auto-update is available in Unity 2019.3 and was removed for previous versions where it would fail (the fallback implementation will work as before). [0.1.0] - 2019-07-30 New Features Added the #UNITY_DISABLE_AUTOMATIC_SYSTEM_BOOTSTRAP_RUNTIME_WORLD and #UNITY_DISABLE_AUTOMATIC_SYSTEM_BOOTSTRAP_EDITOR_WORLD defines which respectively can be used to disable runtime and editor default world generation. Defining #UNITY_DISABLE_AUTOMATIC_SYSTEM_BOOTSTRAP will still disable all default world generation. Allow structural changes to entities (add/remove components, add/destroy entities, etc.) while inside of ForEach lambda functions. This negates the need for using PostUpdateCommands inside of ForEach. EntityCommandBuffer has some additional methods for adding components based on ComponentType , or for adding empty components of a certain type ( <T> ) EntityManagerDiffer & EntityManagerPatcher provides highly optimized diffing & patching functionality. It is used in the editor for providing scene conversion live link. Added support for EntityManager.MoveEntitiesFrom with managed arrays (Object Components). EntityManager.SetArchetype lets you change an entity to a specific archetype. Removing & adding the necessary components with default values. System state components are not allowed to be removed with this method, it throws an exception to avoid accidental system state removal. (Used in incremental live link conversion it made conversion from 100ms -> 40ms for 1000 changed game objects) Entity Debugger's system list now has a string filter field. This makes it easier to find a system by name when you have a lot of systems. Added IComponentData type Asset that will be used by Tiny to convert Editor assets to runtime assets Filled in some <T> holes in the overloads we provide in EntityManager New Entities.WithIncludeAll() that will include in matching all components that are normally ignored by default (currently Prefab and Disabled ) EntityManager.CopyAndReplaceEntitiesFrom has been added it can be used to store & restore a backup of the world for the purposes of general purpose simulation rollback. Upgrade guide WorldDiff has been removed. It has been replaced by EntityManagerDiff & EntityManagerPatch. Renamed EntityGroupManager to EntityQueryManager . Changes EntityArchetype.GetComponentTypes no longer includes Entity in the list of components (it is implied). Behaviour now matches the EntityMangager.GetComponentTypes method. This matches the behavior of the corresponding EntityManager function. EntityCommandBuffer.AddComponent(Entity, ComponentType) no longer fails if the target entity already has the specified component. DestroyEntity(EntityQuery entityQuery) now uses burst internally. Fixes Entity Inspector now shows DynamicBuffer elements in pages of five at a time Resources folder renamed to Styles so as not to add editor assets to built player EntityQueryBuilder.ShallowEquals (used from Entities.ForEach ) no longer boxes and allocs GC Improved error message for unnecessary/invalid UpdateBefore and UpdateAfter Fixed leak in BlobBuilder.CreateBlobAssetReference ComponentSystems are now properly preserved when running the UnityLinker. Note this requires 19.3a10 to work correctly. If your project is not yet using 19.3 you can workaround the issue using the link.xml file. https://docs.unity3d.com/Manual//IL2CPP-BytecodeStripping.html Types that trigger an exception in the TypeManager won't prevent other types from initializing properly. [0.0.12-preview.33] - 2019-05-24 New Features [DisableAutoCreation] can now apply to entire assemblies, which will cause all systems contained within to be excluded from automatic system creation. Useful for test assemblies. Added ComponentSystemGroup.RemoveSystemFromUpdateList() EntityCommandBuffer has commands for adding/removing components, deleting entities and adding shared components based on an EntityQuery and its filter. Not available in the Concurrent version Changes Generic component data types must now be registered in advance. Use [RegisterGenericComponentType] attribute to register each concrete use. e.g. [assembly: RegisterGenericComponentType(typeof(TypeManagerTests.GenericComponent<int>))] Attempting to call Playback() more than once on the same EntityCommandBuffer will now throw an error. Improved error checking for [UpdateInGroup] , [UpdateBefore] , and [UpdateAfter] attributes TypeManager no longer imposes alignment requirements on components containing pointers. Instead, it now throws an exception if you try to serialize a blittable component containing an unmanaged pointer, which suggests different alternatives. Fixes Fixed regression where accessing and destroying a blob asset in a burst job caused an exception Fixed bug where entities with manually specified CompositeScale were not updated by TRSLocalToWorldSystem . Error message when passing in invalid parameters to CreateSystem() is improved. Fixed bug where an exception due to aggressive pointer restrictions could leave the TypeManager in an invalid state SceneBoundingVolume is now generated seperately for each subsection SceneBoundingVolume no longer throws exceptions in conversion flow Fixed regression where calling AddComponent(NativeArray entities, ComponentType componentType) could cause a crash. Fixed bug causing error message to appear in Inspector header when ConvertToEntity component was added to a disabled GameObject. [0.0.12-preview.32] - 2019-05-16 New Features Added BlobBuilder which is a new API to build Blob Assets that does not require preallocating one contiguous block of memory. The BlobAllocator is now marked obsolete. Added versions of IJobForEach that support DynamicBuffer s Due to C# language constraints, these overloads needed different names. The format for these overloads follows the following structure: All job names begin with either IJobForEach or IJobForEachEntity All jobs names are then followed by an underscore _ and a combination of letter corresponding to the parameter types of the job B - IBufferElementData C - IComponentData E - Entity ( IJobForEachWithEntity only) All suffixes for WithEntity jobs begin with E All data types in a suffix are in alphabetical order Here is the complete list of overloads: IJobForEach_C , IJobForEach_CC , IJobForEach_CCC , IJobForEach_CCCC , IJobForEach_CCCCC , IJobForEach_CCCCCC IJobForEach_B , IJobForEach_BB , IJobForEach_BBB , IJobForEach_BBBB , IJobForEach_BBBBB , IJobForEach_BBBBBB IJobForEach_BC , IJobForEach_BCC , IJobForEach_BCCC , IJobForEach_BCCCC , IJobForEach_BCCCCC , IJobForEach_BBC , IJobForEach_BBCC , IJobForEach_BBCCC , IJobForEach_BBCCCC , IJobForEach_BBBC , IJobForEach_BBBCC , IJobForEach_BBBCCC , IJobForEach_BBBCCC , IJobForEach_BBBBC , IJobForEach_BBBBCC , IJobForEach_BBBBBC IJobForEachWithEntity_EB , IJobForEachWithEntity_EBB , IJobForEachWithEntity_EBBB , IJobForEachWithEntity_EBBBB , IJobForEachWithEntity_EBBBBB , IJobForEachWithEntity_EBBBBBB IJobForEachWithEntity_EC , IJobForEachWithEntity_ECC , IJobForEachWithEntity_ECCC , IJobForEachWithEntity_ECCCC , IJobForEachWithEntity_ECCCCC , IJobForEachWithEntity_ECCCCCC IJobForEachWithEntity_BC , IJobForEachWithEntity_BCC , IJobForEachWithEntity_BCCC , IJobForEachWithEntity_BCCCC , IJobForEachWithEntity_BCCCCC , IJobForEachWithEntity_BBC , IJobForEachWithEntity_BBCC , IJobForEachWithEntity_BBCCC , IJobForEachWithEntity_BBCCCC , IJobForEachWithEntity_BBBC , IJobForEachWithEntity_BBBCC , IJobForEachWithEntity_BBBCCC , IJobForEachWithEntity_BBBCCC , IJobForEachWithEntity_BBBBC , IJobForEachWithEntity_BBBBCC , IJobForEachWithEntity_BBBBBC Note that you can still use IJobForEach and IJobForEachWithEntity as before if you're using only IComponentData . EntityManager.SetEnabled API automatically enables & disables an entity or set of entities. If LinkedEntityGroup is present the whole group is enabled / disabled. Inactive game objects automatically get a LinkedEntityGroup added so that EntityManager.SetEnabled works as expected out of the box. Add WithAnyReadOnly and WithAllReadyOnly methods to EntityQueryBuilder to specify queries that filter on components with access type ReadOnly. No longer throw when the same type is in a WithAll and ForEach delegate param for ForEach queries. DynamicBuffer CopyFrom method now supports another DynamicBuffer as a parameter. Fixed cases that would not be handled correctly by the api updater. Upgrade guide Usages of BlobAllocator will need to be changed to use BlobBuilder instead. The API is similar but Allocate now returns the data that can be populated: ref var root = ref builder.ConstructRoot<MyData>(); var floatArray = builder.Allocate(3, ref root.floatArray); floatArray[0] = 0; // root.floatArray[0] can not be used and will throw on access ISharedComponentData with managed fields must implement IEquatable and GetHashCode IComponentData and ISharedComponentData implementing IEquatable must also override GetHashCode Fixes Comparisons of managed objects (e.g. in shared components) now work as expected Prefabs referencing other prefabs are now supported in game object entity conversion process Fixed a regression where ComponentDataProxy was not working correctly on Prefabs due to a ordering issue. Exposed GameObjectConversionDeclarePrefabsGroup for declaring prefab references. (Must happen before any conversion systems run) Inactive game objects are automatically converted to be Disabled entities Disabled components are ignored during conversion process. Behaviour.Enabled has no direct mapping in ECS. It is recommended to Disable whole entities instead Warnings are now issues when asking for a GetPrimaryEntity that is not a game object that is part of the converted group. HasPrimaryEntity can be used to check if the game object is part of the converted group in case that is necessary. Fixed a race condition in EntityCommandBuffer.AddBuffer() and EntityCommandBuffer.SetBuffer() [0.0.12-preview.31] - 2019-05-01 New Features Upgrade guide Serialized entities file format version has changed, Sub Scenes entity caches will require rebuilding. Changes Adding components to entities that already have them is now properly ignored in the cases where no data would be overwritten. That means the inspectable state does not change and thus determinism can still be guaranteed. Restored backwards compatibility for ForEach API directly on ComponentSystem to ease people upgrading to the latest Unity.Entities package on top of Megacity. Rebuilding the entity cache files for sub scenes will now properly request checkout from source control if required. Fixes IJobForEach will only create new entity queries when scheduled, and won't rely on injection anymore. This avoids the creation of useless queries when explicit ones are used to schedule those jobs. Those useless queries could cause systems to keep updating even though the actual queries were empty. APIs changed in the previous version now have better obsolete stubs and upgrade paths. All obsolete APIs requiring manual code changes will now soft warn and continue to work, instead of erroring at compile time. These respective APIs will be removed in a future release after that date. LODGroup conversion now handles renderers being present in a LOD Group in multipe LOD levels correctly Fixed potential memory leak when disposing an EntityCommandBuffer after certain types of playback errors Fixed an issue where chunk utilization histograms weren't properly clipped in EntityDebugger Fixed an issue where tag components were incorrectly shown as subtractive in EntityDebugger ComponentSystem.ShouldRunSystem() exception message now more accurately reports the most likely reason for the error when the system does not exist. Known Issues It might happen that shared component data with managed references is not compared for equality correctly with certain profiles. [0.0.12-preview.30] - 2019-04-05 New Features Script templates have been added to help you create new component types and systems, similar to Unity's built-in template for new MonoBehaviours. Use them via the Assets/Create/ECS menu. Upgrade guide Some APIs have been deprecated in this release: API Deprecation FAQ ** Removed obsolete ComponentSystem.ForEach ** Removed obsolete [Inject] ** Removed obsolete ComponentDataArray ** Removed obsolete SharedComponentDataArray ** Removed obsolete BufferArray ** Removed obsolete EntityArray ** Removed obsolete ComponentGroupArray ScriptBehaviourManager removal The ScriptBehaviourManager class has been removed. ComponentSystem and JobComponentSystem remain as system base classes (with a common ComponentSystemBase class) ComponentSystems have overridable methods OnCreateManager and OnDestroyManager. These have been renamed to OnCreate and OnDestroy. This is NOT handled by the obsolete API updater and will need to be done manually. The old OnCreateManager/OnDestroyManager will continue to work temporarily, but will print a warning if a system contains them. World APIs have been updated as follows: CreateManager, GetOrCreateManager, GetExistingManager, DestroyManager, BehaviourManagers have been renamed to CreateSystem, GetOrCreateSystem, GetExistingSystem, DestroySystem, Systems. These should be handled by the obsolete API updater. EntityManager is no longer accessed via GetExistingManager. There is now a property directly on World: World.EntityManager. This is NOT handled by the obsolete API updater and will need to be done manually. Searching and replacing Manager should locate the right spots. For example, world.GetExistingManager () should become just world.EntityManager. IJobProcessComponentData renamed to IJobForeach This rename unfortunately cannot be handled by the obsolete API updater. A global search and replace of IJobProcessComponentData to IJobForEach should be sufficient. ComponentGroup renamed to EntityQuery ComponentGroup has been renamed to EntityQuery to better represent what it does. All APIs that refer to ComponentGroup have been changed to refer to EntityQuery in their name, e.g. CreateEntityQuery, GetEntityQuery, etc. EntityArchetypeQuery renamed to EntityQueryDesc EntityArchetypeQuery has been renamed to EntityQueryDesc Changes Minimum required Unity version is now 2019.1.0b9 Adding components to entities that already have them is now properly ignored in the cases where no data would be overwritten. UNITY_CSHARP_TINY is now NET_DOTS to match our other NET_* defines Fixes Fixed exception in inspector when Script is missing The presence of chunk components could lead to corruption of the entity remapping during deserialization of SubScene sections. Fix for an issue causing filtering with IJobForEachWithEntity to try to access entities outside of the range of the group it was scheduled with."
  },
  "index.html": {
    "href": "index.html",
    "title": "Home Page. | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Home Page. This is the home page for this package."
  },
  "manual/world.html": {
    "href": "manual/world.html",
    "title": "World | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "World A World owns both an EntityManager and a set of ComponentSystems . You can create as many World objects as you like. Commonly you can create a simulation World and a rendering or presentation World. By default you create a single World when you enter Play Mode and populate it with all available ComponentSystem objects in the Project. However, you can disable the default World creation and replace it with your own code via global defines as follows: #UNITY_DISABLE_AUTOMATIC_SYSTEM_BOOTSTRAP_RUNTIME_WORLD disables generation of the default runtime World. #UNITY_DISABLE_AUTOMATIC_SYSTEM_BOOTSTRAP_EDITOR_WORLD disables generation of the default Editor World. #UNITY_DISABLE_AUTOMATIC_SYSTEM_BOOTSTRAP disables generation of both default Worlds. Further information Default World creation code (see file: Packages/com.unity.entities/Unity.Entities.Hybrid/Injection/DefaultWorldInitialization.cs ) Automatic bootstrap entry point (see file: Packages/com.unity.entities/Unity.Entities.Hybrid/Injection/AutomaticWorldBootstrap.cs )"
  },
  "manual/gp_input.html": {
    "href": "manual/gp_input.html",
    "title": "Player input | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Player input Synopsis: How to use Unity's input features with ECS. How to optimize input with ECS. Note, this is a placeholder for work that has not been completed yet."
  },
  "manual/gp_ecs_interop.html": {
    "href": "manual/gp_ecs_interop.html",
    "title": "Sharing data between ECS and MonoBehaviours | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Sharing data between ECS and MonoBehaviours Synopsis: interoperation between ECS components and systems and MonoBehaviours or other managed code. Note, this is a placeholder for work that has not been completed yet."
  },
  "manual/gp_audio.html": {
    "href": "manual/gp_audio.html",
    "title": "Audio | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Audio Synopsis: How to use Unity's audio features with ECS. How to optimize audio with ECS. Note, this is a placeholder for work that has not been completed yet."
  },
  "manual/gp_assets.html": {
    "href": "manual/gp_assets.html",
    "title": "Assets and resources | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Assets and resources Synopsis: Considerations for using Unity assets and loading resources in an ECS-based project. Note, this is a placeholder for work that has not been completed yet."
  },
  "manual/gp_animation.html": {
    "href": "manual/gp_animation.html",
    "title": "Animation | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Animation Synopsis: How to use Unity's animation features with ECS. How to optimize animation with ECS. Note, this is a placeholder for work that has not been completed yet."
  },
  "manual/gp_ai.html": {
    "href": "manual/gp_ai.html",
    "title": "Pathfinding and AI | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Pathfinding and AI Synopsis: Describe how to do pathfinding and other AI tasks. At the very least, this topic must cover using existing Unity constructs such as the Nav Mesh. Ideally, the topic also covers data-oriented approaches to AI systems or provides resources for developers tackling the problem. Note, this is a placeholder for work that has not been completed yet. Also, see the AI Planner package."
  },
  "manual/exclusive_entity_transaction.html": {
    "href": "manual/exclusive_entity_transaction.html",
    "title": "ExclusiveEntityTransaction | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "ExclusiveEntityTransaction ExclusiveEntityTransaction is an API to create & destroy entities from a job. The purpose is to enable procedural generation scenarios where instantiation on big scale must happen on jobs. As the name implies it is exclusive to any other access to the EntityManager . ExclusiveEntityTransaction should be used on a manually created World that acts as a staging area to construct & setup entities. After the job has completed you can end the ExclusiveEntityTransaction and use EntityManager.MoveEntitiesFrom(EntityManager srcEntities); to move the entities to an active World ."
  },
  "manual/entity_manager.html": {
    "href": "manual/entity_manager.html",
    "title": "EntityManager | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "EntityManager The EntityManager owns EntityData , EntityArchetypes , SharedComponentData and EntityQuery . EntityManager is where you find APIs to create entities, check if an entity is still alive, instantiate entities and add or remove components. // Create an entity with no components on it var entity = EntityManager.CreateEntity(); // Adding a component at runtime EntityManager.AddComponent(entity, new MyComponentData()); // Get the ComponentData MyComponentData myData = EntityManager.GetComponentData<MyComponentData>(entity); // Set the ComponentData EntityManager.SetComponentData(entity, myData); // Removing a component at runtime EntityManager.RemoveComponent<MyComponentData>(entity); // Does the entity exist and does it have the component? bool has = EntityManager.HasComponent<MyComponentData>(entity); // Is the entity still alive? bool has = EntityManager.Exists(entity); // Instantiate the entity var instance = EntityManager.Instantiate(entity); // Destroy the created instance EntityManager.DestroyEntity(instance); // EntityManager also provides batch APIs // to create and destroy many entities in one call. // They are significantly faster // and should be used where ever possible // for performance reasons. // Instantiate 500 entities and write the resulting entity IDs to the instances array var instances = new NativeArray<Entity>(500, Allocator.Temp); EntityManager.Instantiate(entity, instances); // Destroy all 500 entities EntityManager.DestroyEntity(instances);"
  },
  "manual/ecs_systems.html": {
    "href": "manual/ecs_systems.html",
    "title": "Systems | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Systems A System , the S in ECS, provides the logic that transforms the component data from its current state to its next state — for example, a system might update the positions of all moving entities by their velocity multiplied by the time interval since the previous update. Instantiating systems Unity ECS automatically discovers system classes in your project and instantiates them at runtime. It adds each discovered system to one of the default system groups. You can use system attributes to specify the parent group of a system and the order of that system within the group . If you do not specify a parent, Unity adds the system to the Simulation system group of the default world in a deterministic, but unspecified, order. You can also use an attribute to disable automatic creation. A system's update loop is driven by its parent ComponentSystemGroup . A ComponentSystemGroup is, itself, a specialized kind of system that is responsible for updating its child systems. Groups can be nested. Systems derive their time data from the World they are running in; time is updated by the UpdateWorldTimeSystem . You can view the system configuration using the Entity Debugger window (menu: Window > Analysis > Entity Debugger ). System types Unity ECS provides several types of systems. In general, the systems you write to implement your game behavior and data transformations will extend SystemBase . The other system classes have specialized purposes. You typically use existing instances of the EntityCommandBufferSystem and ComponentSystemGroup classes. SystemBase -- the base class to implement when creating systems. EntityCommandBufferSystem -- provides EntityCommandBuffer instances for other systems. Each of the default system groups maintains an Entity Command Buffer System at the beginning and end of its list of child systems. This allows you to group structural changes so that they incur fewer syncronization points in a frame. ComponentSystemGroup -- provides nested organization and update order for other systems. Unity ECS creates several Component System Groups by default. GameObjectConversionSystem -- converts GameObject-based, in-Editor representations of your game to efficient, entity-based, runtime representations. Game conversion systems run in the Unity Editor. Important: The ComponentSystem and JobComponentSystem classes, along with IJobForEach , are being phased out of the DOTS API, but have not been officially deprecated yet. Use SystemBase and Entities.ForEach instead."
  },
  "manual/ecs_profiling.html": {
    "href": "manual/ecs_profiling.html",
    "title": "Profiling | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Profiling Synopsis: All about profiling ECS programs"
  },
  "manual/ecs_lookup_data.html": {
    "href": "manual/ecs_lookup_data.html",
    "title": "Looking up data | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Looking up data The most efficient way to access and modify your ECS data is to use a system with an entity query and job. This provides the best utilization of CPU resources with the fewest memory cache misses. In fact, one of the goals of your data design should be to perform the bulk of your data transformation using the most efficient, fastest path. However, sometimes you need to access an arbitrary component of an arbitrary entity at an arbitrary point in your program. Given an Entity object, you can look up data in its IComponentData and dynamic buffers . The method varies depending on whether your code executes in a system using Entities.ForEach or using an IJobChunk job, or elsewhere on the main thread. Looking up entity data in a system Use GetComponent<T>(Entity) to look up data stored in a component of an arbitrary entity from inside a system's Entities.ForEach or [Job.WithCode] function. For example, if you have Target components with an Entity field identifying the entity to target, you can use the following code to rotate the tracking entities toward their target: public class TrackingSystem : SystemBase { protected override void OnUpdate() { float deltaTime = this.Time.DeltaTime; Entities .ForEach((ref Rotation orientation, in LocalToWorld transform, in Target target) => { // Check to make sure the target Entity still exists and has // the needed component if (!HasComponent<LocalToWorld>(target.entity)) return; // Look up the entity data LocalToWorld targetTransform = GetComponent<LocalToWorld>(target.entity); float3 targetPosition = targetTransform.Position; // Calculate the rotation float3 displacement = targetPosition - transform.Position; float3 upReference = new float3(0, 1, 0); quaternion lookRotation = quaternion.LookRotationSafe(displacement, upReference); orientation.Value = math.slerp(orientation.Value, lookRotation, deltaTime); }) .ScheduleParallel(); } } Accessing data stored in dynamic buffers requires an extra step. You must declare a local variable of type BufferFromEntity in your OnUpdate() method. You can then \"capture\" the local variable in your lambda function. public struct BufferData : IBufferElementData { public float Value; } public class BufferLookupSystem : SystemBase { protected override void OnUpdate() { BufferFromEntity<BufferData> buffersOfAllEntities = this.GetBufferFromEntity<BufferData>(true); Entities .ForEach((ref Rotation orientation, in LocalToWorld transform, in Target target) => { // Check to make sure the target Entity still exists if (!buffersOfAllEntities.Exists(target.entity)) return; // Get a reference to the buffer DynamicBuffer<BufferData> bufferOfOneEntity = buffersOfAllEntities[target.entity]; // Use the data in the buffer float avg = 0; for (var i = 0; i < bufferOfOneEntity.Length; i++) { avg += bufferOfOneEntity[i].Value; } if (bufferOfOneEntity.Length > 0) avg /= bufferOfOneEntity.Length; }) .ScheduleParallel(); } } Looking up entity data in IJobChunk To randomly access component data in an IJobChunk or other job struct, use one of the following types to get an array-like interface to component, indexed by Entity object: ComponentDataFromEntity BufferFromEntity Declare a field of type ComponentDataFromEntity or BufferFromEntity , and set the value of the field before scheduling the job. For example, if you had Target components with an Entity field identifying the entities to target, you could add the following field to your job struct to look up the world position of the targets: [ReadOnly] public ComponentDataFromEntity<LocalToWorld> EntityPositions; Note that this declaration uses the ReadOnly attribute. You should always declare ComponentDataFromEntity objects as read-only unless you do write to the components you access. You can set this field when scheduling the job as follows: var job = new ChaserSystemJob(); job.EntityPositions = this.GetComponentDataFromEntity<LocalToWorld>(true); Inside the job's Execute() function, you can lookup the value of a component using an Entity object: float3 targetPosition = EntityPositions[targetEntity].Position; The following, full example shows a system that moves entities that have a Target field containing the Entity object of their target towards the current location of the target: public class MoveTowardsEntitySystem : SystemBase { private EntityQuery query; [BurstCompile] private struct MoveTowardsJob : IJobChunk { // Read-write data in the current chunk public ArchetypeChunkComponentType<Translation> PositionTypeAccessor; // Read-only data in the current chunk [ReadOnly] public ArchetypeChunkComponentType<Target> TargetTypeAccessor; // Read-only data stored (potentially) in other chunks [ReadOnly] public ComponentDataFromEntity<LocalToWorld> EntityPositions; // Non-entity data public float deltaTime; public void Execute(ArchetypeChunk chunk, int chunkIndex, int firstEntityIndex) { // Get arrays of the components in chunk NativeArray<Translation> positions = chunk.GetNativeArray<Translation>(PositionTypeAccessor); NativeArray<Target> targets = chunk.GetNativeArray<Target>(TargetTypeAccessor); for (int i = 0; i < positions.Length; i++) { // Get the target Entity object Entity targetEntity = targets[i].entity; // Check that the target still exists if (!EntityPositions.Exists(targetEntity)) continue; // Update translation to move the chasing enitity toward the target float3 targetPosition = EntityPositions[targetEntity].Position; float3 chaserPosition = positions[i].Value; float3 displacement = targetPosition - chaserPosition; positions[i] = new Translation { Value = chaserPosition + displacement * deltaTime }; } } } protected override void OnCreate() { // Select all entities that have Translation and Target Componentx query = this.GetEntityQuery ( typeof(Translation), ComponentType.ReadOnly<Target>() ); } protected override void OnUpdate() { // Create the job var job = new MoveTowardsJob(); // Set the chunk data accessors job.PositionTypeAccessor = this.GetArchetypeChunkComponentType<Translation>(false); job.TargetTypeAccessor = this.GetArchetypeChunkComponentType<Target>(true); // Set the component data lookup field job.EntityPositions = this.GetComponentDataFromEntity<LocalToWorld>(true); // Set non-ECS data fields job.deltaTime = this.Time.DeltaTime; // Schedule the job using Dependency property this.Dependency = job.Schedule(query, this.Dependency); } } Data access errors If the data you are looking up overlaps the data you are directly reading and writing in the job, then random access can lead to race conditions and subtle bugs. When you are sure that there is no overlap between the specific entity data you are reading or writing directly in the job and the specific entity data you are reading or writing randomly, then you can mark the accessor object with the NativeDisableParallelForRestriction attribute."
  },
  "manual/ecs_job_withcode.html": {
    "href": "manual/ecs_job_withcode.html",
    "title": "Using Job.WithCode | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Using Job.WithCode The Job.WithCode construction provided by the SystemBase class is an easy way to run a function as a single background job. You can also run Job.WithCode on the main thread and still take advantage of Burst compilation to speed up execution. The following example uses one Job.WithCode lambda function to fill a native array with random numbers and another job to add those numbers together: public class RandomSumJob : SystemBase { private uint seed = 1; protected override void OnUpdate() { Random randomGen = new Random(seed++); NativeArray<float> randomNumbers = new NativeArray<float>(500, Allocator.TempJob); Job.WithCode(() => { for (int i = 0; i < randomNumbers.Length; i++) { randomNumbers[i] = randomGen.NextFloat(); } }).Schedule(); // To get data out of a job, you must use a NativeArray // even if there is only one value NativeArray<float> result = new NativeArray<float>(1, Allocator.TempJob); Job.WithCode(() => { for (int i = 0; i < randomNumbers.Length; i++) { result[0] += randomNumbers[i]; } }).Schedule(); // This completes the scheduled jobs to get the result immediately, but for // better efficiency you should schedule jobs early in the frame with one // system and get the results late in the frame with a different system. this.CompleteDependency(); UnityEngine.Debug.Log(\"The sum of \" + randomNumbers.Length + \" numbers is \" + result[0]); randomNumbers.Dispose(); result.Dispose(); } } Note: To run a parallel job, implement IJobFor , which you can schedule using ScheduleParallel() in the system OnUpdate() function. Variables You cannot pass parameters to the Job.WithCode lambda function or return a value. Instead, you can capture local variables in your OnUpdate() function. When you schedule your job to run in the C# Job System using Schedule() , there are additional restrictions: Captured variables must be declared as NativeArray -- or other native container -- or a blittable type. To return data, you must write the return value to a captured native array , even if the data is a single value. (Note that you can write to any captured variable when executing with Run() .) Job.WithCode provides a set of functions to apply read-only and safety attributes to your captured native container variables. For example, you can use WithReadOnly to designate that you don't update the container and WithDeallocateOnJobCompletion to automatically dispose a container after the job finshes. ( Entities.ForEach provides the same functions.) See Job.WithCode for more information about these modifiers and attributes. Executing the function You have two options to execute your lambda function: Schedule() -- executes the function as a single, non-parallel job. Scheduling a job runs the code on a background thread and thus can take better advantage of available CPU resources. Run() -- executes the function immediately on the main thread. In most cases the Job.WithCode can be Burst compiled so executing code can be faster inside Job.WithCode even though it is still run on the main thread. Note that calling Run() automatically completes all the dependencies of the Job.WithCode construction. If you do not explicitly pass a JobHandle object to Run() the system assumes that the current Dependency property represents the function's dependencies. (Pass in a new JobHandle if the function has no dependencies.) Dependencies By default, a system manages its ECS-related dependencies using its Dependency property. The system adds each job created with Entities.ForEach and Job.WithCode to the Dependency job handle in the order that they appear in the OnUpdate() function. You can also manage job dependencies manually by passing a JobHandle to your Schedule functions, which then return the resulting dependency. See Dependency for more information. See Job dependencies for more general information about job dependencies."
  },
  "manual/ecs_job_dependencies.html": {
    "href": "manual/ecs_job_dependencies.html",
    "title": "Job dependencies | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Job dependencies Unity analyzes the data dependencies of each system based on the ECS components that the system reads and writes. If a system that updates earlier in the frame reads data that a later system writes, or writes data that a later system reads, then the second system depends on the first. To prevent race conditions , the job scheduler makes sure that all the jobs a system depends on have finished before it runs that system's jobs. A system's Dependency property is a JobHandle that represents the ECS-related dependencies of the system. Before OnUpdate() , the Dependency property reflects the incoming dependencies that the system has on prior jobs. By default, the system updates the Dependency property based on the components each job reads and writes as you schedule jobs in a system. To override this default behavior, use the overloaded versions of Entities.ForEach and Job.WithCode that take job dependencies as an parameter and return the updated dependencies as a JobHandle . When you use the explicit versions of these constructions, ECS does not automatically combine the job handles with the system's Dependency property. You must combine them manually when required. Note that the system Dependency property does not track the dependencies that a job might have on data passed through NativeArrays or other similar containers. If you write a NativeArray in one job, and read that array in another, you must manually add the JobHandle of the first job as a dependency of the second (typically by using JobHandle.CombineDependencies ). When you call Entities.ForEach.Run() the job scheduler completes all scheduled jobs that the system depends on before starting the ForEach iteration. If you also use WithStructuralChanges() as part of the construction, then the job scheduler completes all running and scheduled jobs. Structural changes also invalidate any direct references to component data. See sync points for more information. See JobHandle and dependencies for more information."
  },
  "manual/ecs_gameplay.html": {
    "href": "manual/ecs_gameplay.html",
    "title": "Creating Gameplay with ECS | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Creating Gameplay with ECS <!-- Synopsis: Introductory topic about using ECS make things happen. Should probably put any discussions of hybrid versus all-ecs solutions here (unless such discussions become too involved and need thier own page)"
  },
  "manual/ecs_entity_query.html": {
    "href": "manual/ecs_entity_query.html",
    "title": "Using a EntityQuery to query data | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Using a EntityQuery to query data To read or write data, you must first find the data you want to change. The data in ECS is stored in components, which ECS groups together in memory according to the archetype of the entity to which they belong. You can use an EntityQuery to get a view of the ECS data that contains only the specific data you need for a given algorithm or process. You can use an EntityQuery to do the following: Run a job to process the entities and components selected for the view Get a NativeArray that contains all of the selected entities Get NativeArrays of the selected components (by component type) The entity and component arrays an EntityQuery returns are guaranteed to be \"parallel\", that is, the same index value always applies to the same entity in any array. Note: The SystemBase.Entities.ForEach constructions create internal EntityQuery instances based on the component types and attributes you specify for these APIs. You cannot use a different EntityQuery object with Entities.ForEach , (though you can get the query object that an Entities.ForEach instance constructs and use it elsewhere). Defining a query An EntityQuery query defines the set of component types that an archetype must contain for ECS to include its chunks and entities in the view. You can also exclude archetypes that contain specific types of components. For simple queries, you can create a EntityQuery based on an array of component types. The following example defines a EntityQuery that finds all entities with both RotationQuaternion and RotationSpeed components. EntityQuery m_Query = GetEntityQuery(typeof(RotationQuaternion), ComponentType.ReadOnly<RotationSpeed>()); The query uses ComponentType.ReadOnly<T> instead of the simpler typeof expression to designate that the system does not write to RotationSpeed. Always specify read only when possible, because there are fewer constraints on read access to data, which can help the job scheduler execute the jobs more efficiently. EntityQueryDesc For more complex queries, you can use an EntityQueryDesc object to create the EntityQuery. An EntityQueryDesc provides a flexible query mechanism to specify which archetypes to select based on the following sets of components: All : All component types in this array must exist in the archetype Any : At least one of the component types in this array must exist in the archetype None : None of the component types in this array can exist in the archetype For example, the following query includes archetypes that contain the RotationQuaternion and RotationSpeed components, but excludes any archetypes that contain the Frozen component: var query = new EntityQueryDesc { None = new ComponentType[]{ typeof(Frozen) }, All = new ComponentType[]{ typeof(RotationQuaternion), ComponentType.ReadOnly<RotationSpeed>() } } EntityQuery m_Query = GetEntityQuery(query); Note: Do not include optional components in the EntityQueryDesc. To handle optional components, use the ArchetypeChunk.Has<T>() method to determine whether a chunk contains the optional component or not. Because all entities within the same chunk have the same components, you only need to check whether an optional component exists once per chunk: not once per entity. Query options When you create an EntityQueryDesc, you can set its Options variable. The options allow for specialized queries (normally you do not need to set them): Default: No options set; the query behaves normally. IncludePrefab : Includes archetypes that contain the special Prefab tag component. IncludeDisabled : Includes archetypes that contain the special Disabled tag component. FilterWriteGroup : Considers the WriteGroup of any components in the query. When you set the FilterWriteGroup option, only entities with those components in a Write Group that are explicitly included in the query are included in the view. ECS excludes any entities that have any additional components from the same WriteGroup. In the following example, C2 and C3 are components in the same Write Group based on C1, and this query uses the FilterWriteGroup option that requires C1 and C3: public struct C1: IComponentData{} [WriteGroup(C1)] public struct C2: IComponentData{} [WriteGroup(C1)] public struct C3: IComponentData{} // ... In a system: var query = new EntityQueryDesc{ All = new ComponentType{typeof(C1), ComponentType.ReadOnly<C3>()}, Options = EntityQueryDescOptions.FilterWriteGroup }; var m_Query = GetEntityQuery(query); This query excludes any entities with both C2 and C3 because C2 is not explicitly included in the query. While you can use None to design this into the query, doing it through a Write Group provides an important benefit: you don't need to change the queries other systems use (as long as these systems also use Write Groups). Write Groups are a mechanism that you can use to extend existing systems. For example, if C1 and C2 are defined in another system (perhaps part of a library that you don't control), you can put C3 into the same Write Group as C2 to change how C1 is updated. For any entities which you add to the C3 component, the system updates C1 and the original system does not. For other entities without C3, the original system updates C1 as before. For more information, see Write Groups . Combining queries To combine multiple queries, you can pass an array of EntityQueryDesc objects rather than a single instance. You must use a logical OR operation to combine each query. The following example selects any archetypes that contain a RotationQuaternion component or a RotationSpeed component (or both): var query0 = new EntityQueryDesc { All = new ComponentType[] {typeof(RotationQuaternion)} }; var query1 = new EntityQueryDesc { All = new ComponentType[] {typeof(RotationSpeed)} }; EntityQuery m_Query = GetEntityQuery(new EntityQueryDesc[] {query0, query1}); Creating a EntityQuery Outside of a system class, you can create a EntityQuery with the EntityManager.CreateEntityQuery() function as follows: EntityQuery m_Query = CreateEntityQuery(typeof(RotationQuaternion), ComponentType.ReadOnly<RotationSpeed>()); However, in a system class, you must use the GetEntityQuery() function for use with an IJobChunk job: public class RotationSpeedSystem : SystemBase { private EntityQuery m_Query; protected override void OnCreate() { m_Query = GetEntityQuery(typeof(RotationQuaternion), ComponentType.ReadOnly<RotationSpeed>()); } //… } If you plan to reuse the same view, cache the EntityQuery instance, instead of creating a new one for each use. For example, in a system, you can create the EntityQuery in the system’s OnCreate() function and store the result in an instance variable. The m_Query variable in the above example is used for this purpose. Note that queries created for a system are cached by the system. GetEntityQuery() returns the existing query if one already exists rather than creating a new one. However, filter settings are not considered when evaluating whether two queries are the same. In additon, if you set filters on a query, the same filters are set the next time you access that same query with GetEntityQuery() . Use ResetFilter() to clear the existing filters. Defining filters You can filter the view as well as defining which components must be included or excluded from the query. You can specify the following types of filters: Shared component filter : Filter the set of entities based on specific values of a shared component. Change filter : Filter the set of entities based on whether the value of a specific component type has changed. The filters you set remain in effect until you call ResetFilter() on the query object. Shared component filters To use a shared component filter, include the shared component in the EntityQuery (along with other needed components), and then call the SetFilter() function. Then pass in a struct of the same ISharedComponent type that contains the values to select. All values must match. You can add up to two different shared components to the filter. You can change the filter at any time, but if you change the filter, it does not change any existing arrays of entities or components that you received from the group ToComponentDataArray() or ToEntityArray() functions. You must recreate these arrays. The following example defines a shared component named SharedGrouping and a system that only processes entities that have the Group field set to 1 . struct SharedGrouping : ISharedComponentData { public int Group; } class ImpulseSystem : SystemBase { EntityQuery m_Query; protected override void OnCreate(int capacity) { m_Query = GetEntityQuery(typeof(Position), typeof(Displacement), typeof(SharedGrouping)); } protected override void OnUpdate() { // Only iterate over entities that have the SharedGrouping data set to 1 m_Query.SetFilter(new SharedGrouping { Group = 1 }); var positions = m_Query.ToComponentDataArray<Position>(Allocator.Temp); var displacememnts = m_Query.ToComponentDataArray<Displacement>(Allocator.Temp); for (int i = 0; i != positions.Length; i++) positions[i].Value = positions[i].Value + displacememnts[i].Value; } } Change filters If you only need to update entities when a component value has changed, you can add that component to the EntityQuery filter using the SetFilterChanged() function. For example, the following EntityQuery only includes entities from chunks that another system has already written to the Translation component: protected override void OnCreate(int capacity) { m_Query = GetEntityQuery(typeof(LocalToWorld), ComponentType.ReadOnly<Translation>()); m_Query.SetFilterChanged(typeof(Translation)); } Note: For efficiency, the change filter applies to whole chunks, not individual entities. The change filter also only checks whether a system has run that declared write access to the component, not whether it actually changed any data. In other words, if another job which had the ability to write to that type of component accesses the chunk, then the change filter includes all entities in that chunk. This is why you should always declare read only access to components that you do not need to modify. Executing the query An EntityQuery executes its query when you use the EntityQuery in a job or you call one of the EntityQuery methods that returns arrays of entities, components, or chunks in the view: ToEntityArray() returns an array of the selected entities. ToComponentDataArray<T> returns an array of the components of type T for the selected entities. CreateArchetypeChunkArray() returns all of the chunks that contain the selected entities. Because a query operates on archetypes, shared component values, and change filters, which are all identical for all the entities in a chunk, the set of entities stored win the returned set of chunks is exactly the same as the set of entities ToEntityArray() returns . <!-- TODO: Discuss using the Job versions of these functions. --> In jobs In a system that schedules an IJobChunk job, pass the EntityQuery object to the job's ScheduleParallel() or ScheduleSingle() methods. In the following example, from the HelloCube IJobChunk sample, the m_Query argument is the EntityQuery object // OnUpdate runs on the main thread. protected override void OnUpdate() { var rotationType = GetArchetypeChunkComponentType<Rotation>(false); var rotationSpeedType = GetArchetypeChunkComponentType<RotationSpeed>(true); var job = new RotationSpeedJob() { RotationType = rotationType, RotationSpeedType = rotationSpeedType, DeltaTime = Time.deltaTime }; return job.ScheduleParallel(m_Query, this.Dependency); } An EntityQuery uses jobs internally to create the required arrays. When you pass the group to one of the Schedule() methods, ECS schedules the EntityQuery jobs along with the system's own jobs and as such you can take advantage of parallel processing."
  },
  "manual/ecs_entities_foreach.html": {
    "href": "manual/ecs_entities_foreach.html",
    "title": "Using Entities.ForEach | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Using Entities.ForEach Use the Entities.ForEach construction provided by the SystemBase class as a concise way to define and execute your algorithms over entities and their components. Entities.ForEach executes a lambda function you define over all the entities selected by an entity query . To execute a job lambda function, you either schedule the job using Schedule() and ScheduleParallel() , or execute it immediately (on the main thread) with Run() . You can use additional methods defined on Entities.ForEach to set the entity query as well as various job options. The following example illustrates a simple SystemBase implementation that uses Entities.ForEach to read one component (Velocity in this case) and write to another (Translation): class ApplyVelocitySystem : SystemBase { protected override void OnUpdate() { Entities .ForEach((ref Translation translation, in Velocity velocity) => { translation.Value += velocity.Value; }) .Schedule(); } } Note the use of the keywords ref and in on the parameters of the ForEach lambda function. Use ref for components that you write to, and in for components that you only read. Marking components as read-only helps the job scheduler execute your jobs more efficiently. Selecting entities Entities.ForEach provides its own mechanism for defining the entity query used to select the entites to process. The query automatically includes any components you use as parameters of your lambda function. You can also use the WithAll , WithAny , and WithNone clauses to further refine which entities are selected. See SystemBase.Entities for the complete list of query options. The following example selects entities that have the components, Destination, Source, and LocalToWorld; and have at least one of the components, Rotation, Translation, or Scale; but which do not have a LocalToParent component. Entities.WithAll<LocalToWorld>() .WithAny<Rotation, Translation, Scale>() .WithNone<LocalToParent>() .ForEach((ref Destination outputData, in Source inputData) => { /* do some work */ }) .Schedule(); In this example, only the Destination and Source components can be accessed inside the lambda function since they are the only components in the parameter list. Accessing the EntityQuery object To access the EntityQuery object created by Entities.ForEach , use [WithStoreEntityQueryInField(ref query)] with the ref parameter modifier. This function assigns a reference to the query to the field you provide. The following example illustrates how to access the EntityQuery object implicitly created for an Entities.ForEach construction. In this case, the example uses the EntityQuery object to invoke the CalculateEntityCount() method. The example uses this count to create a native array with enough space to store one value per entity selected by the query: private EntityQuery query; protected override void OnUpdate() { int dataCount = query.CalculateEntityCount(); NativeArray<float> dataSquared = new NativeArray<float>(dataCount, Allocator.Temp); Entities .WithStoreEntityQueryInField(ref query) .ForEach((int entityInQueryIndex, in Data data) => { dataSquared[entityInQueryIndex] = data.Value * data.Value; }) .ScheduleParallel(); Job .WithCode(() => { //Use dataSquared array... var v = dataSquared[dataSquared.Length -1]; }) .WithDeallocateOnJobCompletion(dataSquared) .Schedule(); } Optional components You cannot create a query specifying optional components (using WithAny<T,U>) and also access those components in the lambda function. If you need to read or write to a component that is optional, you can split the Entities.ForEach construction into multiple jobs, one for each combination of the optional components. For example, if you had two optional components, you would need three ForEach constructions: one including the first optional component, one including the second, and one including both components. Another alternative is to iterate by chunk using IJobChunk. Change filtering In cases where you only want to process an entity component when another entity of that component has changed since the last time the current SystemBase instance has run, you can enable change filtering using WithChangeFilter<T>. The component type used in the change filter must either be in the lambda function parameter list or part of a WithAll<T> statement. Entities .WithChangeFilter<Source>() .ForEach((ref Destination outputData, in Source inputData) => { /* Do work */ }) .ScheduleParallel(); An entity query supports change filtering on up to two component types. Note that change filtering is applied at the chunk level. If any code accesses a component in a chunk with write access, then that component type in that chunk is marked as changed -- even if the code didn’t actually change any data. Shared component filtering Entities with shared components are grouped into chunks with other entities having the same value for their shared components. You can select groups of entities that have specific shared component values using the WithSharedComponentFilter() function. The following example selects entities grouped by a Cohort ISharedComponentData. The lambda function in this example sets a DisplayColor IComponentData component based on the entity’s cohort: public class ColorCycleJob : SystemBase { protected override void OnUpdate() { List<Cohort> cohorts = new List<Cohort>(); EntityManager.GetAllUniqueSharedComponentData<Cohort>(cohorts); foreach (Cohort cohort in cohorts) { DisplayColor newColor = ColorTable.GetNextColor(cohort.Value); Entities.WithSharedComponentFilter(cohort) .ForEach((ref DisplayColor color) => { color = newColor; }) .ScheduleParallel(); } } } The example uses the EntityManager to get all the unique cohort values. It then schedules a lambda job for each cohort, passing the new color to the lambda function as a captured variable. Defining the ForEach function When you define the lambda function to use with Entities.ForEach , you can declare parameters that the SystemBase class uses to pass in information about the current entity when it executes the function. A typical lambda function looks like: Entities.ForEach( (Entity entity, int entityInQueryIndex, ref Translation translation, in Movement move) => {/* .. */}) You can pass up to eight parameters to an Entities.ForEach lambda function. The parameters must be grouped in the following order: 1. Parameters passed-by-value first (no parameter modifiers) 2. Writable parameters second (`ref` parameter modifier) 3. Read-only parameters last (`in` parameter modifier) All components should use either the ref or the in parameter modifier keywords. Otherwise, the component struct passed to your function is a copy instead of a reference. This means an extra memory copy for read-only parameters and means that any changes to components you intended to update are silently thrown when the copied struct goes out of scope after the function returns. If your function does not obey these rules, the compiler provides an error similar to: error CS1593: Delegate 'Invalid_ForEach_Signature_See_ForEach_Documentation_For_Rules_And_Restrictions' does not take N arguments (Note that the error message cites the number of arguments as the issue even when the problem is the parameter order.) Component parameters To access a component associated with an entity, you must pass a parameter of that component type to the lambda function. The compiler automatically adds all components passed to the function to the entity query as required components. To update a component value, you must pass it to the lambda function by reference using the ref keyword in the parameter list. (Without the ref keyword, any modifications would be made to a temporary copy of the component since it would be passed by value.) To designate a component passed to the lambda function as read-only, use the in keyword in the parameter list. Note: Using ref means that the components in the current chunk are marked as changed, even if the lambda function does not actually modify them. For efficiency, always designate components that your lambda function does not modify as read only using the in keyword. The following example passes a Source component parameter to the job as read-only, and a Destination component parameter as writable: Entities.ForEach( (ref Destination outputData, in Source inputData) => { outputData.Value = inputData.Value; }) .ScheduleParallel(); Note: Currently, you cannot pass chunk components to the Entities.ForEach lambda function. For dynamic buffers, use DynamicBuffer<T> rather than the Component type stored in the buffer: public class BufferSum : SystemBase { private EntityQuery query; //Schedules the two jobs with a dependency between them protected override void OnUpdate() { //The query variable can be accessed here because we are //using WithStoreEntityQueryInField(query) in the entities.ForEach below int entitiesInQuery = query.CalculateEntityCount(); //Create a native array to hold the intermediate sums //(one element per entity) NativeArray<int> intermediateSums = new NativeArray<int>(entitiesInQuery, Allocator.TempJob); //Schedule the first job to add all the buffer elements Entities .ForEach((int entityInQueryIndex, in DynamicBuffer<IntBufferData> buffer) => { for (int i = 0; i < buffer.Length; i++) { intermediateSums[entityInQueryIndex] += buffer[i].Value; } }) .WithStoreEntityQueryInField(ref query) .WithName(\"IntermediateSums\") .ScheduleParallel(); // Execute in parallel for each chunk of entities //Schedule the second job, which depends on the first Job .WithCode(() => { int result = 0; for (int i = 0; i < intermediateSums.Length; i++) { result += intermediateSums[i]; } //Not burst compatible: Debug.Log(\"Final sum is \" + result); }) .WithDeallocateOnJobCompletion(intermediateSums) .WithoutBurst() .WithName(\"FinalSum\") .Schedule(); // Execute on a single, background thread } } Special, named parameters In addition to components, you can pass the following special, named parameters to the Entities.ForEach lambda function, which are assigned values based on the entity the job is currently processing: Entity entity — the Entity instance of the current entity. (The parameter can be named anything as long as the type is Entity.) int entityInQueryIndex — the index of the entity in the list of all entities selected by the query. Use the entity index value when you have a native array that you need to fill with a unique value for each entity. You can use the entityInQueryIndex as the index in that array. The entityInQueryIndex should also be used as the jobIndex for adding commands to a concurrent EntityCommandBuffer . int nativeThreadIndex — a unique index for the thread executing the current iteration of the lambda function. When you execute the lambda function using Run(), nativeThreadIndex is always zero. (Do not use nativeThreadIndex as the jobIndex of a concurrent EntityCommandBuffer ; use entityInQueryIndex instead.) Capturing variables You can capture local variables for Entities.ForEach lambda functions. When you execute the function using a job (by calling one of the Schedule functions instead of Run) there are some restrictions on the captured variables and how you use them: Only native containers and blittable types can be captured. A job can only write to captured variables that are native containers. (To “return” a single value, create a native array with one element.) If you read a [native container], but don't write to it, always specify read-only access using WithReadOnly(variable) . See SystemBase.Entities for more information about setting attributes for captured variables. The attributes you can specify include, DeallocateOnJobCompletion , NativeDisableParallelForRestriction , and others. Entities.ForEach provides these as functions because the C# language doesn't allow attibutes on local variables. Note: When executing the function with Run() you can write to captured variables that are not native containers. However, you should still use blittable types where possible so that the function can be compiled with Burst . Dependencies By default, a system manages its ECS-related dependencies using its Dependency property. By default, the system adds each job created with Entities.ForEach and [Job.WithCode] to the Dependency job handle in the order that they appear in the OnUpdate() function. You can also manage job dependencies manually by passing a [JobHandle] to your Schedule functions, which then return the resulting dependency. See Dependency for more information. See Job dependencies for more general information about job dependencies."
  },
  "manual/ecs_creating_systems.html": {
    "href": "manual/ecs_creating_systems.html",
    "title": "Creating a system | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Creating a system Implement the abstract class SystemBase to create an ECS system. To create a system, you program the necessary system event callbacks. Use the SystemBase OnUpdate() function to perform the work your system must do every frame. The other callback functions are optional; for example, you can use OnCreate() to initialize a system, but not every system requires initialization code. The system callback functions are invoked in the following order: OnCreate() -- called when the system is created. OnStartRunning() -- before the first OnUpdate() and whenever the system resumes running. OnUpdate() -- every frame as long as the system has work to do (see ShouldRunSystem() ) and the system is Enabled . OnStopRunning() -- whenever the system stops updating, which can be because you set Enabled to false or because it finds no entities matching its queries. Also called before OnDestroy() . OnDestroy() -- when the system is destroyed. A system's OnUpdate() function is triggered by its parent system group's own OnUpdate() function. Likewise, when a group changes state, for example if you set the group's Enabled property, it changes the state of its child systems. However, children can also change state independently from their parent groups. See System update order for more information. All the system events run on the main thread. Ideally, your OnUpdate() function schedules jobs to perform most of the work. To schedule a job from a system, you can use one of the following mechanisms: Entities.ForEach -- the simplest way to iterate over ECS component data. Job.WithCode -- execute a lambda function as a single, background job. IJobChunk -- a \"lower level\" mechanism for iterating over ECS component data chunk-by-chunk. C# Job System -- create and schedule general purpose C# jobs. The following example illustrates using Entities.ForEach to implement a system that updates one component based on the value of another: public struct Position : IComponentData { public float3 Value; } public struct Velocity : IComponentData { public float3 Value; } public class ECSSystem : SystemBase { protected override void OnUpdate() { // Local variable captured in ForEach float dT = Time.DeltaTime; Entities .WithName(\"Update_Displacement\") .ForEach( (ref Position position, in Velocity velocity) => { position = new Position() { Value = position.Value + velocity.Value * dT }; } ) .ScheduleParallel(); } } <!--Note the following links are intentionally pointing to an old version-->"
  },
  "manual/ecs_core.html": {
    "href": "manual/ecs_core.html",
    "title": "ECS concepts | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "ECS concepts An Entity Component System (ECS) architecture separates identity ( entities ), data ( components ), and behavior ( systems ). The architecture focuses on the data. Systems read streams of component data, and then transform the data from an input state to an output state, which entities then index. The following diagram illustrates how these three basic parts work together: In this diagram, a system reads Translation and Rotation components, multiplies them and then updates the corresponding LocalToWorld components ( L2W = T*R ). The fact that entities A and B have a Renderer component and entity C does not, doesn't affect the system, because the system does not care about Renderer components. You can set up a system so that it requires a Renderer component, in which case, the system ignores the components of entity C; or, alternately, you can set up a system to exclude entities with Renderer components, which then ignores the components of entities A and B. Archetypes A unique combination of component types is called an Archetype . For example, a 3D object might have a component for its world transform, one for its linear movement, one for rotation, and one for its visual representation. Each instance of one of these 3D objects corresponds to a single entity, but because they share the same set of components, ECS classifies them as a single archetype: In this diagram, entities A and B share archetype M, while entity C has archetype N. To smoothly change the archetype of an entity, you can add or remove components at runtime. For example, if you remove the Renderer component from entity B, it then moves to archetype N. Memory Chunks The archetype of an entity determines where ECS stores the components of that entity. ECS allocates memory in \"chunks\", each represented by an ArchetypeChunk object. A chunk always contains entities of a single archetype. When a chunk of memory becomes full, ECS allocates a new chunk of memory for any new entities created with the same archetype. If you add or remove components, which then changes an entity archetype, ECS moves the components for that entity to a different chunk. This organizational scheme provides a one-to-many relationship between archetypes and chunks. It also means that finding all the entities with a given set of components only requires searching through the existing archetypes, which are typically small in number, rather than all of the entities, which are typically much larger in number. ECS does not store the entities that are in a chunk in a specific order. When an entity is created or changed to a new archetype, ECS puts it into the first chunk that stores the archetype, and that has space. Chunks remain tightly packed, however; when an entity is removed from an archetype, ECS moves the components of the last entity in the chunk into the newly vacated slots in the component arrays. Note: The values of shared components in an archetype also determine which entities are stored in which chunk. All of the entities in a given chunk have the exact same values for any shared components. If you change the value of any field in a shared component, the modified entity moves to a different chunk, just as it would if you changed that entity's archetype. A new chunk is allocated, if necessary. Use shared components to group entities within an archetype when it is more efficient to process them together. For example, the Hybrid Renderer defines its RenderMesh component to achieve this. Entity queries To identify which entities a system should process, use an EntityQuery . An entity query searches the existing archetypes for those that have the components that match your requirements. You can specify the following component requirements with a query: All — the archetype must contain all of the component types in the All category. Any — the archetype must contain at least one of the component types in the Any category. None — the archetype must not contain any of the component types in the None category. An entity query provides a list of the chunks that contain the types of components the query requires. You can then iterate over the components in those chunks directly with IJobChunk . Jobs To take advantage of multiple threads, you can use the [C# Job system]. ECS provides the SystemBase class, along with the Entities.ForEach and IJobChunk Schedule() and ScheduleParallel() methods, to transform data outside the main thread. Entities.ForEach is the simplest to use and typically requires fewer lines of code to implement. You can use IJobChunk for more complex situations that Entities.ForEach does not handle. ECS schedules jobs on the main thread in the order that your systems are arranged . As jobs are scheduled, ECS keeps track of which jobs read and write which components. A job that reads a component is dependent on any prior scheduled job that writes to the same component and vice versa. The job scheduler uses job dependencies to determine which jobs it can run in parallel and which must run in sequence. System organization ECS organizes systems by World and then by group . By default, ECS creates a default World with a predefined set of groups. It finds all available systems, instantiates them, and adds them to the predefined simulation group in the default World. You can specify the update order of systems within the same group. A group is a kind of system, so you can add a group to another group and specify its order just like any other system. All systems within a group update before the next system or group. If you do not specify an order, ECS inserts systems into the update order in a deterministic way that does not depend on creation order. In other words, the same set of systems always updates in the same order within their group even when you don't explicitly specify an order. Entity component buffer systems System updates happen on the main thread. However, systems can use jobs to offload work to other threads. SystemBase provide a straightforward way to create and schedule Jobs. For more information about system creation, update order, and the attributes you can use to organize your systems, see the documentation on System Update Order . ECS authoring When you create your game or application in the Unity Editor, you can use GameObjects and MonoBehaviours to create a conversion system to map those UnityEngine objects and components to entities. For more information, see Creating Gameplay ."
  },
  "manual/ecs_components.html": {
    "href": "manual/ecs_components.html",
    "title": "Components | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Components Components are one of the three principle elements of an Entity Component System architecture. They represent the data of your game or application. Entities are identifiers that index your collections of components, while systems provide the behavior. A component in ECS is a struct that has one of the following \"marker interfaces\": IComponentData — Use for general purpose and chunk components . IBufferElementData — Associates dynamic buffers with an entity. ISharedComponentData — Categorizes or groups entities by value within an archetype. For more information, see Shared Component Data . ISystemStateComponentData — Associates a system-specific state with an entity and detects when individual entities are created or destroyed. For more information, see System State Components . ISharedSystemStateComponentData — a combination of shared and system state data. See System State Components . Blob assets – While not technically a \"component,\" you can use blob assets to store data. Blob assets can be referenced by one or more components using a BlobAssetReference and are immutable. You can use blob assets to share data between assets and access that data in C# jobs. The EntityManager organizes unique combinations of components into archetypes . It stores the components of all entities with the same archetype together in blocks of memory called chunks . The entities in a given chunk all have the same component archetype. This diagram illustrates how ECS stores component data chunks by their archetypes. Shared components and chunk components are exceptions because ECS stores them outside of the chunk. A single instance of these component types apply to all of the entities in the applicable chunks. Additionally, you can optionally store dynamic buffers outside of the chunk. Even though ECS does not store these types of components inside of the chunk, you can generally treat them the same as other component types when querying for entities."
  },
  "manual/ecs_chunk_component.html": {
    "href": "manual/ecs_chunk_component.html",
    "title": "Chunk component data | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Chunk component data Use chunk components to associate data with a specific chunk . Chunk components contain data that applies to all entities in a specific chunk. For example, if you have chunks of entities that represent 3D objects that are organized by proximity, you can use a chunk component to store a collective bounding box for them. chunk components use the interface type IComponentData . Add and set the values of a chunk component Although chunk components can have values unique to an individual chunk, they are still part of the archetype of the entities in the chunk. Therefore, if you remove a chunk component from an entity, ECS moves that entity to a different chunk (possibly a new one). Likewise, if you add a chunk component to an entity, ECS moves that entity to a different chunk because its archetype changes; the addition of the chunk component does not affect the remaining entities in the original chunk. If you use an entity in a chunk to change the value of a chunk component, it changes the value of the chunk component that is common to all the entities in that chunk. If you change the archetype of an entity so that it moves into a new chunk that has the same type of chunk component, then the existing value in the destination chunk is unaffected. Note: If the entity is moved to a newly created chunk, then ECS creates a new chunk component for that chunk and assigns its default value. The main differences between working with chunk components and general-purpose components is that you use different functions to add, set, and remove them. chunk components also have their own ComponentType functions that you use to define entity archetypes and queries. Relevant APIs Purpose Function Declaration IComponentData ArchetypeChunk methods Read GetChunkComponentData (ArchetypeChunkComponentType ) Check HasChunkComponent (ArchetypeChunkComponentType ) Write SetChunkComponentData (ArchetypeChunkComponentType , T) EntityManager methods Create AddChunkComponentData (Entity) Create AddChunkComponentData (EntityQuery, T) Create AddComponents(Entity,ComponentTypes) Get type info GetArchetypeChunkComponentType (Boolean) Read GetChunkComponentData (ArchetypeChunk) Read GetChunkComponentData (Entity) Check HasChunkComponent (Entity) Delete RemoveChunkComponent (Entity) Delete RemoveChunkComponentData (EntityQuery) Write EntityManager.SetChunkComponentData (ArchetypeChunk, T) Declaring a chunk component Chunk components use the interface type IComponentData . public struct ChunkComponentA : IComponentData { public float Value; } Creating a chunk component To add a chunk component directly, use an entity in the target chunk, or use an entity query that selects a group of target chunks. You cannot add chunk components inside a job, nor can they be added with an EntityCommandBuffer . You can also include chunk components as part of the EntityArchetype or list of ComponentType objects that ECS uses to create entities. ECS creates the chunk components for each chunk and stores entities with that archetype. Use ComponentType.ChunkComponent<T> or ComponentType.ChunkComponentReadOnly<T> with these methods. Otherwise, ECS treats the component as a general-purpose component instead of a chunk component. With an entity in a chunk Given an entity in the target chunk, you can use the EntityManager.AddChunkComponentData<T>() function to add a chunk component to the chunk: EntityManager.AddChunkComponentData<ChunkComponentA>(entity); When you use this method, you cannot immediately set a value for the chunk component. With an EntityQuery Given an entity query that selects all the chunks that you want to add a chunk component to, you can use the EntityManager.AddChunkComponentData<T>() function to add and set the component: EntityQueryDesc ChunksWithoutComponentADesc = new EntityQueryDesc() { None = new ComponentType[] { ComponentType.ChunkComponent<ChunkComponentA>() } }; EntityQuery ChunksWithoutChunkComponentA = GetEntityQuery(ChunksWithoutComponentADesc); EntityManager.AddChunkComponentData<ChunkComponentA>(ChunksWithoutChunkComponentA, new ChunkComponentA() { Value = 4 }); When you use this method, you can set the same initial value for all of the new chunk components. With an EntityArchetype When you create entities with an archetype or a list of component types, include the chunk component types in the archetype: EntityArchetype ArchetypeWithChunkComponent = EntityManager.CreateArchetype( ComponentType.ChunkComponent(typeof(ChunkComponentA)), ComponentType.ReadWrite<GeneralPurposeComponentA>()); Entity newEntity = EntityManager.CreateEntity(ArchetypeWithChunkComponent); or list of component types: ComponentType[] compTypes = {ComponentType.ChunkComponent<ChunkComponentA>(), ComponentType.ReadOnly<GeneralPurposeComponentA>()}; Entity entity = EntityManager.CreateEntity(compTypes); When you use these methods, the chunk components for new chunks that ECS creates as part of entity construction receive the default struct value. ECS does not change chunk components in existing chunks. See Updating a chunk component for how to set the chunk component value given a reference to an entity. Reading a chunk component To read a chunk component, you can use the ArchetypeChunk object that represents the chunk, or use an entity in the target chunk. With the ArchetypeChunk instance Given a chunk, you can use the EntityManager.GetChunkComponentData<T> function to read its chunk component. The following code iterates over all of the chunks that match a query and accesses a chunk component of type ChunkComponentA : NativeArray<ArchetypeChunk> chunks = ChunksWithChunkComponentA.CreateArchetypeChunkArray(Allocator.TempJob); foreach (var chunk in chunks) { var compValue = EntityManager.GetChunkComponentData<ChunkComponentA>(chunk); //.. } chunks.Dispose(); With an entity in a chunk Given an entity, you can access a chunk component in the chunk that contains the entity with EntityManager.GetChunkComponentData<T> : if (EntityManager.HasChunkComponent<ChunkComponentA>(entity)) { ChunkComponentA chunkComponentValue = EntityManager.GetChunkComponentData<ChunkComponentA>(entity); } Updating a chunk component You can update a chunk component given a reference to the chunk it belongs to. In an IJobChunk job, you can call ArchetypeChunk.SetChunkComponentData . On the main thread, you can use the EntityManager version: EntityManager.SetChunkComponentData . Note: You cannot access chunk components using SystemBase Entities.ForEach because you do not have access to the ArchetypeChunk object or the EntityManager. With the ArchetypeChunk instance To update a chunk component in a job, see Reading and writing in a system . To update a chunk component on the main thread, use the EntityManager: EntityManager.SetChunkComponentData<ChunkComponentA>(chunk, new ChunkComponentA() { Value = 7 }); With an Entity instance If you have an entity in the chunk rather than the chunk reference itself, you can also use the EntityManger to get the chunk that contains the entity: Note: If you only want to read a chunk component and not write to it, you should use ComponentType.ChunkComponentReadOnly when you define the entity query to avoid creating unnecessary job scheduling constraints. Deleting a chunk component Use the EntityManager.RemoveChunkComponent functions to delete a chunk component. You can remove a chunk component given an entity in the target chunk or you can remove all of the chunk components of a given type from all chunks an entity query selects. If you remove a chunk component from an individual entity, that entity moves to a different chunk because the archetype of the entity changes. The chunk keeps the unchanged chunk component as long as there are other entities that remain in the chunk. Using a chunk component in a query To use a chunk component in an entity query, you must use either the ComponentType.ChunkComponent<T> or ComponentType.ChunkComponentReadOnly<T> functions to specify the type. Otherwise, ECS treats the component as a general-purpose component instead of a Chunk component. In an EntityQueryDesc You can use the following query description to create an entity query that selects all chunks, and entities in those chunks, that have a chunk component of type, ChunkComponentA : EntityQueryDesc ChunksWithChunkComponentADesc = new EntityQueryDesc() { All = new ComponentType[] { ComponentType.ChunkComponent<ChunkComponentA>() } }; Iterating over chunks to set chunk components To iterate over all chunks for which you want to set a chunk component, you can create an entity query that selects the correct chunks and then use the EntityQuery object to get a list of the ArchetypeChunk instances as a native array. The ArchetypeChunk object allows you to write a new value to the chunk component. public class ChunkComponentExamples : SystemBase { private EntityQuery ChunksWithChunkComponentA; protected override void OnCreate() { EntityQueryDesc ChunksWithComponentADesc = new EntityQueryDesc() { All = new ComponentType[] { ComponentType.ChunkComponent<ChunkComponentA>() } }; ChunksWithChunkComponentA = GetEntityQuery(ChunksWithComponentADesc); } [BurstCompile] struct ChunkComponentCheckerJob : IJobChunk { public ArchetypeChunkComponentType<ChunkComponentA> ChunkComponentATypeInfo; public void Execute(ArchetypeChunk chunk, int chunkIndex, int firstEntityIndex) { var compValue = chunk.GetChunkComponentData(ChunkComponentATypeInfo); //... var squared = compValue.Value * compValue.Value; chunk.SetChunkComponentData(ChunkComponentATypeInfo, new ChunkComponentA() { Value = squared }); } } protected override void OnUpdate() { var job = new ChunkComponentCheckerJob() { ChunkComponentATypeInfo = GetArchetypeChunkComponentType<ChunkComponentA>() }; this.Dependency = job.Schedule(ChunksWithChunkComponentA, this.Dependency); } } Note that if you need to read the components in a chunk to determine the proper value of a chunk component, you should use IJobChunk . For example, the following code calculates the axis-aligned bounding box for all chunks containing entities that have LocalToWorld components: public struct ChunkAABB : IComponentData { public AABB Value; } [UpdateInGroup(typeof(PresentationSystemGroup))] [UpdateBefore(typeof(UpdateAABBSystem))] public class AddAABBSystem : SystemBase { EntityQuery queryWithoutChunkComponent; protected override void OnCreate() { queryWithoutChunkComponent = GetEntityQuery(new EntityQueryDesc() { All = new ComponentType[] { ComponentType.ReadOnly<LocalToWorld>() }, None = new ComponentType[] { ComponentType.ChunkComponent<ChunkAABB>() } }); } protected override void OnUpdate() { // This is a structural change and a sync point EntityManager.AddChunkComponentData<ChunkAABB>(queryWithoutChunkComponent, new ChunkAABB()); } } [UpdateInGroup(typeof(PresentationSystemGroup))] public class UpdateAABBSystem : SystemBase { EntityQuery queryWithChunkComponent; protected override void OnCreate() { queryWithChunkComponent = GetEntityQuery(new EntityQueryDesc() { All = new ComponentType[] { ComponentType.ReadOnly<LocalToWorld>(), ComponentType.ChunkComponent<ChunkAABB>()} }); } [BurstCompile] struct AABBJob : IJobChunk { [ReadOnly] public ArchetypeChunkComponentType<LocalToWorld> LocalToWorldTypeInfo; public ArchetypeChunkComponentType<ChunkAABB> ChunkAABBTypeInfo; public uint L2WChangeVersion; public void Execute(ArchetypeChunk chunk, int chunkIndex, int firstEntityIndex) { bool chunkHasChanges = chunk.DidChange(LocalToWorldTypeInfo, L2WChangeVersion); if (!chunkHasChanges) return; // early out if the chunk transforms haven't changed NativeArray<LocalToWorld> transforms = chunk.GetNativeArray<LocalToWorld>(LocalToWorldTypeInfo); UnityEngine.Bounds bounds = new UnityEngine.Bounds(); bounds.center = transforms[0].Position; for (int i = 1; i < transforms.Length; i++) { bounds.Encapsulate(transforms[i].Position); } chunk.SetChunkComponentData(ChunkAABBTypeInfo, new ChunkAABB() { Value = bounds.ToAABB() }); } } protected override void OnUpdate() { var job = new AABBJob() { LocalToWorldTypeInfo = GetArchetypeChunkComponentType<LocalToWorld>(true), ChunkAABBTypeInfo = GetArchetypeChunkComponentType<ChunkAABB>(false), L2WChangeVersion = this.LastSystemVersion }; this.Dependency = job.Schedule(queryWithChunkComponent, this.Dependency); } }"
  },
  "manual/ecs_burst.html": {
    "href": "manual/ecs_burst.html",
    "title": "Using Burst | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Using Burst Synopsis: Cover how, when, and why to use the Burst compiler with ECS. Everything burst -elated within ECS should go here."
  },
  "manual/ecs_building_projects.html": {
    "href": "manual/ecs_building_projects.html",
    "title": "Building your project | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Building your project Synopsis: Cover any unique aspects for building ECS projects, including any cross-platform details."
  },
  "manual/ecs_blob_asset_data.html": {
    "href": "manual/ecs_blob_asset_data.html",
    "title": "Blob Assets | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Blob Assets"
  },
  "manual/dynamic_buffers.html": {
    "href": "manual/dynamic_buffers.html",
    "title": "Dynamic buffer components | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Dynamic buffer components Use dynamic buffer components to associate array-like data with an entity. Dynamic buffers are ECS components that can hold a variable number of elements, and automatically resize as necessary. To create a dynamic buffer, first declare a struct that implements IBufferElementData and defines the elements stored in the buffer. For example, you can use the following struct for a buffer component that stores integers: public struct IntBufferElement : IBufferElementData { public int Value; } To associate a dynamic buffer with an entity, add an IBufferElementData component directly to the entity rather than adding the dynamic buffer container itself. ECS manages the container. For most purposes, you can use a declared IBufferElementData type to treat a dynamic buffer the same as any other ECS component. For example, you can use the IBufferElementData type in entity queries as well as when you add or remove the buffer component. However, you must use different functions to access a buffer component and those functions provide the DynamicBuffer instance, which gives an array-like interface to the buffer data. To specify an “internal capacity\" for a dynamic buffer component, use the InternalBufferCapacity attribute . The internal capacity defines the number of elements the dynamic buffer stores in the ArchetypeChunk along with the other components of an entity. If you increase the size of a buffer beyond the internal capacity, the buffer allocates a heap memory block outside the current chunk and moves all existing elements. ECS manages this external buffer memory automatically, and frees the memory when the buffer component is removed. Note: If the data in a buffer is not dynamic, you can use a blob asset instead of a dynamic buffer. Blob assets can store structured data, including arrays. Multiple entities can share blob assets. Declaring buffer element types To declare a buffer, declare a struct that defines the type of element that you want to put into the buffer. The struct must implement IBufferElementData , like so: // InternalBufferCapacity specifies how many elements a buffer can have before // the buffer storage is moved outside the chunk. [InternalBufferCapacity(8)] public struct MyBufferElement : IBufferElementData { // Actual value each buffer element will store. public int Value; // The following implicit conversions are optional, but can be convenient. public static implicit operator int(MyBufferElement e) { return e.Value; } public static implicit operator MyBufferElement(int e) { return new MyBufferElement { Value = e }; } } Adding buffer types to entities To add a buffer to an entity, add the IBufferElementData struct that defines the data type of the buffer element, and then add that type directly to an entity or to an archetype : Using EntityManager.AddBuffer() For more information, see the documentation on EntityManager.AddBuffer() . EntityManager.AddBuffer<MyBufferElement>(entity); Using an archetype Entity e = EntityManager.CreateEntity(typeof(MyBufferElement)); Using the [GenerateAuthoringComponent] attribute You can use [GenerateAuthoringComponent] to generate authoring components for simple IBufferElementData implementations that contain only one field. Setting this attribute allows you add an ECS IBufferElementData component to a GameObject so that you can set the buffer elements in the Editor. For example, if you declare the following type, you can add it directly to a GameObject in the Editor: [GenerateAuthoringComponent] public struct IntBufferElement: IBufferElementData { public int Value; } In the background, Unity generates a class named IntBufferElementAuthoring (which inherits from MonoBehaviour ), which exposes a public field of List<int> type. When the GameObject containing this generated authoring component is converted into an entity, the list is converted into DynamicBuffer<IntBufferElement> , and then added to the converted entity. Note the following restrictions: Only one component in a single C# file can have a generated authoring component, and the C# file must not have another MonoBehaviour in it. IBufferElementData authoring components cannot be automatically generated for types that contain more than one field. IBufferElementData authoring components cannot be automatically generated for types that have an explicit layout. Using an EntityCommandBuffer You can add or set a buffer component when you add commands to an entity command buffer. Use AddBuffer to create a new buffer for the entity, which changes the entity's archetype. Use SetBuffer to wipe out the existing buffer (which must exist) and create a new, empty buffer in its place. Both functions return a DynamicBuffer instance that you can use to populate the new buffer. You can add elements to the buffer immediately, but they are not otherwise accessible until the buffer is added to the entity when the command buffer is executed. The following job creates a new entity using a command buffer and then adds a dynamic buffer component using EntityCommandBuffer.AddBuffer . The job also adds a number of elements to the dynamic buffer. struct DataSpawnJob : IJobForEachWithEntity<DataToSpawn> { // A command buffer marshals structural changes to the data public EntityCommandBuffer.Concurrent CommandBuffer; //The DataToSpawn component tells us how many entities with buffers to create public void Execute(Entity spawnEntity, int index, [ReadOnly] ref DataToSpawn data) { for (int e = 0; e < data.EntityCount; e++) { //Create a new entity for the command buffer Entity newEntity = CommandBuffer.CreateEntity(index); //Create the dynamic buffer and add it to the new entity DynamicBuffer<MyBufferElement> buffer = CommandBuffer.AddBuffer<MyBufferElement>(index, newEntity); //Reinterpret to plain int buffer DynamicBuffer<int> intBuffer = buffer.Reinterpret<int>(); //Optionally, populate the dynamic buffer for (int j = 0; j < data.ElementCount; j++) { intBuffer.Add(j); } } //Destroy the DataToSpawn entity since it has done its job CommandBuffer.DestroyEntity(index, spawnEntity); } } Note: You are not required to add data to the dynamic buffer immediately. However, you won't have access to the buffer again until after the entity command buffer you are using is executed. Accessing buffers You can use EntityManager , systems , and jobs to access the DynamicBuffer instance in much the same way as you access other component types of entities. EntityManager You can use an instance of the EntityManager to access a dynamic buffer: DynamicBuffer<MyBufferElement> dynamicBuffer = EntityManager.GetBuffer<MyBufferElement>(entity); Looking up buffers of another entity When you need to look up the buffer data belonging to another entity in a job, you can pass a BufferFromEntity variable to the job. BufferFromEntity<MyBufferElement> lookup = GetBufferFromEntity<MyBufferElement>(); var buffer = lookup[entity]; buffer.Add(17); buffer.RemoveAt(0); SystemBase Entities.ForEach You can access dynamic buffers associated with the entities you process with Entities.ForEach by passing the buffer as one of your lambda function parameters. The following example adds all the values stored in the buffers of type, MyBufferElement : public class DynamicBufferSystem : SystemBase { protected override void OnUpdate() { var sum = 0; Entities.ForEach((DynamicBuffer<MyBufferElement> buffer) => { foreach (var integer in buffer.Reinterpret<int>()) { sum += integer; } }).Run(); Debug.Log(\"Sum of all buffers: \" + sum); } } Note that we can write directly to the captured sum variable in this example because we execute the code with Run() . If we scheduled the function to run in a job, we could only write to a native container such as NativeArray, even though the result is a single value. IJobChunk To access an individual buffer in an IJobChunk job, pass the buffer data type to the job and use that to get a BufferAccessor . A buffer accessor is an array-like structure that provides access to all of the dynamic buffers in the current chunk. Like the previous example, the following example adds up the contents of all dynamic buffers that contain elements of type, MyBufferElement . IJobChunk jobs can also run in parallel on each chunk, so in the example, it first stores the intermediate sum for each buffer in a native array and then uses a second job to calculate the final sum. In this case, the intermediate array holds one result for each chunk, rather than one result for each entity. public class DynamicBufferJobSystem : SystemBase { private EntityQuery query; protected override void OnCreate() { //Create a query to find all entities with a dynamic buffer // containing MyBufferElement EntityQueryDesc queryDescription = new EntityQueryDesc(); queryDescription.All = new[] {ComponentType.ReadOnly<MyBufferElement>()}; query = GetEntityQuery(queryDescription); } public struct BuffersInChunks : IJobChunk { //The data type and safety object public ArchetypeChunkBufferType<MyBufferElement> BufferType; //An array to hold the output, intermediate sums public NativeArray<int> sums; public void Execute(ArchetypeChunk chunk, int chunkIndex, int firstEntityIndex) { //A buffer accessor is a list of all the buffers in the chunk BufferAccessor<MyBufferElement> buffers = chunk.GetBufferAccessor(BufferType); for (int c = 0; c < chunk.Count; c++) { //An individual dynamic buffer for a specific entity DynamicBuffer<MyBufferElement> buffer = buffers[c]; foreach (MyBufferElement element in buffer) { sums[chunkIndex] += element.Value; } } } } //Sums the intermediate results into the final total public struct SumResult : IJob { [DeallocateOnJobCompletion] public NativeArray<int> sums; public NativeArray<int> result; public void Execute() { foreach (int integer in sums) { result[0] += integer; } } } protected override void OnUpdate() { //Create a native array to hold the intermediate sums int chunksInQuery = query.CalculateChunkCount(); NativeArray<int> intermediateSums = new NativeArray<int>(chunksInQuery, Allocator.TempJob); //Schedule the first job to add all the buffer elements BuffersInChunks bufferJob = new BuffersInChunks(); bufferJob.BufferType = GetArchetypeChunkBufferType<MyBufferElement>(); bufferJob.sums = intermediateSums; this.Dependency = bufferJob.ScheduleParallel(query, this.Dependency); //Schedule the second job, which depends on the first SumResult finalSumJob = new SumResult(); finalSumJob.sums = intermediateSums; NativeArray<int> finalSum = new NativeArray<int>(1, Allocator.Temp); finalSumJob.result = finalSum; this.Dependency = finalSumJob.Schedule(this.Dependency); this.CompleteDependency(); Debug.Log(\"Sum of all buffers: \" + finalSum[0]); finalSum.Dispose(); } } Reinterpreting buffers Buffers can be reinterpreted as a type of the same size. The intention is to allow controlled type-punning and to get rid of the wrapper element types when they get in the way. To reinterpret, call Reinterpret<T> : DynamicBuffer<int> intBuffer = EntityManager.GetBuffer<MyBufferElement>(entity).Reinterpret<int>(); The reinterpreted buffer instance retains the safety handle of the original buffer, and is safe to use. Reinterpreted buffers reference original data, so modifications to one reinterpreted buffer are immediately reflected in others. Note: The reinterpret function only enforces that the types involved have the same length. For example, you can alias a uint and float buffer without raising an error because both types are 32-bits long. You must make sure that the reinterpretation makes sense logically. Buffer reference invalidation Every structural change invalidates all references to dynamic buffers. Structural changes generally cause entities to move from one chunk to another. Small dynamic buffers can reference memory within a chunk (as opposed to from main memory) and therefore, they need to be reacquired after a structural change. var entity1 = EntityManager.CreateEntity(); var entity2 = EntityManager.CreateEntity(); DynamicBuffer<MyBufferElement> buffer1 = EntityManager.AddBuffer<MyBufferElement>(entity1); // This line causes a structural change and invalidates // the previously acquired dynamic buffer DynamicBuffer<MyBufferElement> buffer2 = EntityManager.AddBuffer<MyBufferElement>(entity1); // This line will cause an error: buffer1.Add(17);"
  },
  "manual/custom_job_types.html": {
    "href": "manual/custom_job_types.html",
    "title": "Custom job types | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Custom job types On the lowest level of the job system, jobs are scheduled by calling one of the Schedule functions in JobsUtility . The currently existing job types all use these functions, but it is also possible to create specialized job types using the same APIs. These APIs use unsafe code and have to be crafted carefully, since they can easily introduce unwanted race conditions. If you add your own job types, we strongly recommend to aim for full test coverage. As an example we have a custom job type IJobParallelForBatch (see file: /Packages/com.unity.jobs/Unity.Jobs/IJobParallelForBatch.cs ). It works like IJobParallelFor , but instead of calling a single execute function per index it calls one execute function per batch being executed. This is useful if you need to do something on more than one item at a time, but still want to do it in parallel. A common scenario for this job type is if you need to create a temporary array and you want to avoid creating each item in the array one at a time. By using IJobParallelFor you can instead create one temporary array per batch. In the IJobParallelForBatch example, the entry point where the job is actually scheduled looks like this: unsafe static public JobHandle ScheduleBatch&lt;T&gt;(this T jobData, int arrayLength, int minIndicesPerJobCount, JobHandle dependsOn = new JobHandle()) where T : struct, IJobParallelForBatch { var scheduleParams = new JobsUtility.JobScheduleParameters(UnsafeUtility.AddressOf(ref jobData), ParallelForBatchJobStruct&lt;T&gt;.Initialize(), dependsOn, ScheduleMode.Batched); return JobsUtility.ScheduleParallelFor(ref scheduleParams, arrayLength, minIndicesPerJobCount); } The first line creates a struct containing the scheduling parameters. When creating it you need to set a pointer to the data which will be copied to the jobs. The reason this is a pointer is that the native code which uses it does not know about the type. You also need to pass it a pointer to the JobReflectionData created by calling: JobsUtility.CreateJobReflectionData(typeof(T), JobType.ParallelFor, (ExecuteJobFunction)Execute); JobReflection stores information about the struct with the data for the job, such as which NativeContainers it has and how they need to be patched when scheduling a job. It lives on the native side of the engine and the managed code only has access to it though pointers without any information about what the type is. When creating JobReflectionData you need to specify the type of the struct implementing the job, the JobType and the method which will be called to execute the job. The JobReflectionData does not depend on the data in the struct you schedule, only its type, so it should only be created once for all jobs implementing the same interface. There are currently only two job types, Single and ParallelFor . Single means the job will only get a single call, ParallelFor means there will be multiple calls to process it; where each call is restricted to a subset of the range of indices to process. Which job type you choose affects which schedule function you are allowed to call. The third parameter of JobsUtility.JobScheduleParameters is the JobHandle that the scheduled job should depend on. The final parameter is the schedule mode. There are two scheduling modes to choose from, Run and Batched . Batched means one or more jobs will be scheduled to do the processing, while Run means the processing will be done on the main thread before Schedule returns. Once the schedule parameters are created we actually schedule the job. There are three ways to schedule jobs depending on their type: JobHandle Schedule(ref JobScheduleParameters parameters); JobHandle ScheduleParallelFor(ref JobScheduleParameters parameters, int arrayLength, int innerLoopBatchCount); JobHandle ScheduleParallelForTransform(ref JobScheduleParameters parameters, IntPtr transfromAccessArray); Schedule can only be used if the ScheduleParameters are created with JobType.Single , the other two schedule functions require JobType.ParallelFor . The arrayLength and innerLoopBatchCount parameter passed to ScheduleParallelFor are used to determine how many indices the jobs should process and how many indices it should handle in the inner loop (see the section on Execution and JobRanges for more information on the inner loop count). ScheduleParallelForTransform is similar to ScheduleParallelFor, but it also has access to a TransformAccessArray that allows you to modify Transform components on GameObjects . The number of indices and batch size is inferred from the TransformAccessArray. Execution and JobRanges After scheduling the job, Unity will call the entry point you specified directly from the native side. It works in a similar way to how Update is called on MonoBehaviours, but from inside a job instead. You only get one call per job and there is either one job, or one job per worker thread; in the case of ParallelFor. The signature used for Execute is public delegate void ExecuteJobFunction(ref T data, IntPtr additionalPtr, IntPtr bufferRangePatchData, ref JobRanges ranges, int jobIndex); For Single jobs, only the data is needed and you can just do your processing right away, but for ParallelFor jobs it requires some more work before you can start processing indices. We need to split up the indices into a number of sequential sub-sets that each job will process in parallel. This way we do not process the same thing twice and we are sure that everything gets covered. The memory layout will determine the order of indices. The JobRanges contain the batches and indices a ParallelFor job is supposed to process. The indices are split into batches based on the batch size, the batches are evenly distributed between the jobs doing the execution in such a way that each job can iterate over a continuous section of memory. The ParallelFor job should call: JobsUtility.GetWorkStealingRange(ref ranges, jobIndex, out begin, out end) This continues until it returns false , and after calling it process all items with index between begin and end . The reason you get batches of items, rather than the full set of items the job should process, is that Unity will apply work stealing if one job completes before the others. Work stealing in this context means that when one job is done it will look at the other jobs running and see if any of them still have a lot of work left. If it finds a job which is not complete it will steal some of the batches that it has not yet started; to dynamically redistribute the work. Before a ParallelFor job starts processing items it also needs to limit the write access to NativeContainers on the range of items which the job is processing. If it does not do this several jobs can potentially write to the same index which leads to race conditions. The NativeContainers that need to be limited is passed to the job and there is a function to patch them; so they cannot access items outside the correct range. The code to do it looks like this: #if ENABLE_UNITY_COLLECTIONS_CHECKS JobsUtility.PatchBufferMinMaxRanges(bufferRangePatchData, UnsafeUtility.AddressOf(ref jobData), begin, end - begin); #endif Custom NativeContainers When writing jobs, the data communication between jobs is one of the hardest parts to get right. Just using NativeArray is very limiting. Using NativeQueue , NativeHashMap and NativeMultiHashMap and their Concurrent versions solves most scenarios. For the remaining scenarios it is possible to write your own custom NativeContainers. When writing custom containers for thread synchronization it is very important to write correct code. We strongly recommend full test coverage for any new containers you add. As a very simple example of this we will create a NativeCounter that can be incremented in a ParallelFor job through NativeCounter.Concurrent and read in a later job or on the main thread. Let's start with the basic container type: // Mark this struct as a NativeContainer, usually this would be a generic struct for containers, but a counter does not need to be generic // TODO - why does a counter not need to be generic? - explain the argument for this reasoning please. [StructLayout(LayoutKind.Sequential)] [NativeContainer] unsafe public struct NativeCounter { // The actual pointer to the allocated count needs to have restrictions relaxed so jobs can be schedled with this container [NativeDisableUnsafePtrRestriction] int* m_Counter; #if ENABLE_UNITY_COLLECTIONS_CHECKS AtomicSafetyHandle m_Safety; // The dispose sentinel tracks memory leaks. It is a managed type so it is cleared to null when scheduling a job // The job cannot dispose the container, and no one else can dispose it until the job has run, so it is ok to not pass it along // This attribute is required, without it this NativeContainer cannot be passed to a job; since that would give the job access to a managed object [NativeSetClassTypeToNullOnSchedule] DisposeSentinel m_DisposeSentinel; #endif // Keep track of where the memory for this was allocated Allocator m_AllocatorLabel; public NativeCounter(Allocator label) { // This check is redundant since we always use an int that is blittable. // It is here as an example of how to check for type correctness for generic types. #if ENABLE_UNITY_COLLECTIONS_CHECKS if (!UnsafeUtility.IsBlittable<int>()) throw new ArgumentException(string.Format(\"{0} used in NativeQueue<{0}> must be blittable\", typeof(int))); #endif m_AllocatorLabel = label; // Allocate native memory for a single integer m_Counter = (int*)UnsafeUtility.Malloc(UnsafeUtility.SizeOf<int>(), 4, label); // Create a dispose sentinel to track memory leaks. This also creates the AtomicSafetyHandle #if ENABLE_UNITY_COLLECTIONS_CHECKS DisposeSentinel.Create(out m_Safety, out m_DisposeSentinel, 0); #endif // Initialize the count to 0 to avoid uninitialized data Count = 0; } public void Increment() { // Verify that the caller has write permission on this data. // This is the race condition protection, without these checks the AtomicSafetyHandle is useless #if ENABLE_UNITY_COLLECTIONS_CHECKS AtomicSafetyHandle.CheckWriteAndThrow(m_Safety); #endif (*m_Counter)++; } public int Count { get { // Verify that the caller has read permission on this data. // This is the race condition protection, without these checks the AtomicSafetyHandle is useless #if ENABLE_UNITY_COLLECTIONS_CHECKS AtomicSafetyHandle.CheckReadAndThrow(m_Safety); #endif return *m_Counter; } set { // Verify that the caller has write permission on this data. This is the race condition protection, without these checks the AtomicSafetyHandle is useless #if ENABLE_UNITY_COLLECTIONS_CHECKS AtomicSafetyHandle.CheckWriteAndThrow(m_Safety); #endif *m_Counter = value; } } public bool IsCreated { get { return m_Counter != null; } } public void Dispose() { // Let the dispose sentinel know that the data has been freed so it does not report any memory leaks #if ENABLE_UNITY_COLLECTIONS_CHECKS DisposeSentinel.Dispose(m_Safety, ref m_DisposeSentinel); #endif UnsafeUtility.Free(m_Counter, m_AllocatorLabel); m_Counter = null; } } With this we have a simple NativeContainer where we can get, set, and increment the count. This container can be passed to a job, but it has the same restrictions as NativeArray, which means it cannot be passed to a ParallelFor job with write access. The next step is to make it usable in ParallelFor. In order to avoid race conditions we want to make sure no-one else is reading it while the ParallelFor is writing to it. To achieve this we create a separate inner struct called Concurrent that can handle multiple writers, but no readers. We make sure NativeCounter.Concurrent can be assigned to from within a normal NativeCounter, since it is not possible for it to live separately outside a NativeCounter. TODO - why is that? [NativeContainer] // This attribute is what makes it possible to use NativeCounter.Concurrent in a ParallelFor job [NativeContainerIsAtomicWriteOnly] unsafe public struct Concurrent { // Copy of the pointer from the full NativeCounter [NativeDisableUnsafePtrRestriction] int* m_Counter; // Copy of the AtomicSafetyHandle from the full NativeCounter. The dispose sentinel is not copied since this inner struct does not own the memory and is not responsible for freeing it. #if ENABLE_UNITY_COLLECTIONS_CHECKS AtomicSafetyHandle m_Safety; #endif // This is what makes it possible to assign to NativeCounter.Concurrent from NativeCounter public static implicit operator NativeCounter.Concurrent (NativeCounter cnt) { NativeCounter.Concurrent concurrent; #if ENABLE_UNITY_COLLECTIONS_CHECKS AtomicSafetyHandle.CheckWriteAndThrow(cnt.m_Safety); concurrent.m_Safety = cnt.m_Safety; AtomicSafetyHandle.UseSecondaryVersion(ref concurrent.m_Safety); #endif concurrent.m_Counter = cnt.m_Counter; return concurrent; } public void Increment() { // Increment still needs to check for write permissions #if ENABLE_UNITY_COLLECTIONS_CHECKS AtomicSafetyHandle.CheckWriteAndThrow(m_Safety); #endif // The actual increment is implemented with an atomic, since it can be incremented by multiple threads at the same time Interlocked.Increment(ref *m_Counter); } } With this setup we can schedule ParallelFor with write access to a NativeCounter through the inner Concurrent struct, like this: struct CountZeros : IJobParallelFor { [ReadOnly] public NativeArray<int> input; public NativeCounter.Concurrent counter; public void Execute(int i) { if (input[i] == 0) { counter.Increment(); } } } var counter = new NativeCounter(Allocator.Temp); var jobData = new CountZeros(); jobData.input = input; jobData.counter = counter; counter.Count = 0; var handle = jobData.Schedule(input.Length, 8); handle.Complete(); Debug.Log(\"The array countains \" + counter.Count + \" zeros\"); counter.Dispose(); Better cache usage The NativeCounter from the previous section is a working implementation of a counter, but all jobs in the ParallelFor will access the same atomic to increment the value. This is not optimal as it means the same cache line is used by all threads. The way this is generally solved in NativeContainers is to have a local cache per worker thread, which is stored on its own cache line. The [NativeSetThreadIndex] attribute can inject a worker thread index, the index is guaranteed to be unique while accessing the NativeContainer from the ParallelFor jobs. In order to make such an optimization here we need to change a few things. The first thing we need to change is the data layout. For performance reasons we need one full cache line per worker thread, rather than a single int to avoid false sharing . We start by adding a constant for the number of ints on a cache line. public const int IntsPerCacheLine = JobsUtility.CacheLineSize / sizeof(int); Next we change the amount of memory allocated. // One full cache line (integers per cacheline * size of integer) for each potential worker index, JobsUtility.MaxJobThreadCount m_Counter = (int*)UnsafeUtility.Malloc(UnsafeUtility.SizeOf<int>()*IntsPerCacheLine*JobsUtility.MaxJobThreadCount, 4, label); TODO: I'm not sure which example you are referring to when you say: main, non-concurrent, version below (is this an example you used on this page or what you would do if you were not using jobified code/ECS etc. It has potential for confusion.) When accessing the counter from the main, non-concurrent, version there can only be one writer so the increment function is fine with the new memory layout. For get and set of the count we need to loop over all potential worker indices. public int Count { get { // Verify that the caller has read permission on this data. // This is the race condition protection, without these checks the AtomicSafetyHandle is useless #if ENABLE_UNITY_COLLECTIONS_CHECKS AtomicSafetyHandle.CheckReadAndThrow(m_Safety); #endif int count = 0; for (int i = 0; i < JobsUtility.MaxJobThreadCount; ++i) count += m_Counter[IntsPerCacheLine * i]; return count; } set { // Verify that the caller has write permission on this data. // This is the race condition protection, without these checks the AtomicSafetyHandle is useless #if ENABLE_UNITY_COLLECTIONS_CHECKS AtomicSafetyHandle.CheckWriteAndThrow(m_Safety); #endif // Clear all locally cached counts, // set the first one to the required value for (int i = 1; i < JobsUtility.MaxJobThreadCount; ++i) m_Counter[IntsPerCacheLine * i] = 0; *m_Counter = value; } } The final change is the inner Concurrent struct that needs to get the worker index injected into it. Since each worker only runs one job at a time, there is no longer any need to use atomics when only accessing the local count. [NativeContainer] [NativeContainerIsAtomicWriteOnly] // Let the job system know that it should inject the current worker index into this container unsafe public struct Concurrent { [NativeDisableUnsafePtrRestriction] int* m_Counter; #if ENABLE_UNITY_COLLECTIONS_CHECKS AtomicSafetyHandle m_Safety; #endif // The current worker thread index; it must use this exact name since it is injected [NativeSetThreadIndex] int m_ThreadIndex; public static implicit operator NativeCacheCounter.Concurrent (NativeCacheCounter cnt) { NativeCacheCounter.Concurrent concurrent; #if ENABLE_UNITY_COLLECTIONS_CHECKS AtomicSafetyHandle.CheckWriteAndThrow(cnt.m_Safety); concurrent.m_Safety = cnt.m_Safety; AtomicSafetyHandle.UseSecondaryVersion(ref concurrent.m_Safety); #endif concurrent.m_Counter = cnt.m_Counter; concurrent.m_ThreadIndex = 0; return concurrent; } public void Increment() { #if ENABLE_UNITY_COLLECTIONS_CHECKS AtomicSafetyHandle.CheckWriteAndThrow(m_Safety); #endif // No need for atomics any more since we are just incrementing the local count ++m_Counter[IntsPerCacheLine*m_ThreadIndex]; } } Writing the NativeCounter this way significantly reduces the overhead of having multiple threads writing to it. It does, however, come at a price. The cost of getting the count on the main thread has increased significantly since it now needs to check all local caches and sum them up. If you are aware of this and make sure to cache the return values it is usually worth it, but you need to know the limitations of your data structures. So we strongly recommend documenting the performance characteristics. Tests The NativeCounter is not complete, the only thing left is to add tests for it to make sure it is correct and that it does not break in the future. When writing tests you should try to cover as many unusual scenarios as possible. It is also a good idea to add some kind of stress test using jobs to detect race conditions, even if it is unlikely to find all of them. The NativeCounter API is very small so the number of tests required is not huge. Both versions of the counter examples above are available at: /Assets/NativeCounterDemo . The tests for them can be found at: /Assets/NativeCounterDemo/Editor/NativeCounterTests.cs . Available attributes The NativeCounter uses many attributes, but there are a few more available for other types of containers. Here is a list of the available attributes you can use on the NativeContainer struct. NativeContainer - marks a struct as a NativeContainer.Required for all native containers. NativeContainerSupportsMinMaxWriteRestriction - signals that the NativeContainer can restrict its writable ranges to be between a min and max index. This is used when passing the container to an IJobParallelFor to make sure that the job does not write to indices it is not supposed to process. In order to use this the NativeContainer must have the members int m_Length , int m_MinIndex and int m_MaxIndex in that order with no other members between them. The container must also throw an exception for writes outside the min/max range. NativeContainerIsAtomicWriteOnly - signals that the NativeContainer uses atomic writes and no reads. By adding this is is possible to pass the NativeContainer to an IJobParallelFor as writable without restrictions on which indices can be written to. NativeContainerSupportsDeallocateOnJobCompletion - makes the NativeContainer usable with DeallocateOnJobCompletion . In order to use this the NativeContainer must have a single allocation in m_Buffer , an allocator label in m_AllocatorLabel and a dispose sentinel in m_DisposeSentinel . NativeSetThreadIndex - Patches an int with the thread index of the job. In addition to these attributes on the native container struct itself there are a few attributes which can be used on members of the native container. NativeDisableUnsafePtrRestriction - allows the NativeContainer to be passed to a job even though it contains a pointer, which is usually not allowed. NativeSetClassTypeToNullOnSchedule - allows the NativeContainer to be passed to a job even though it contains a managed object. The managed object will be set to null on the copy passed to the job."
  },
  "manual/component_data.html": {
    "href": "manual/component_data.html",
    "title": "General purpose components | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "General purpose components ComponentData in Unity (also known as a component in standard ECS terms) is a struct that contains only the instance data for an entity . ComponentData should not contain methods beyond utility functions to access the data in the struct. You should implement all of your game logic and behavior in systems. To put this in terms of the object-oriented Unity system, this is somewhat similar to a Component class, but one that only contains variables . The Unity ECS API provides an interface called IComponentData that you can implement in your code to declare a general-purpose component type. IComponentData Traditional Unity components (including MonoBehaviour ) are object-oriented classes that contain data and methods for behavior. IComponentData is a pure ECS-style component, which means that it defines no behavior, only data. You should implement IComponentData as struct rather than a class, which means that it is copied by value instead of by reference by default. You usually need to use the following pattern to modify data: var transform = group.transform[index]; // Read transform.heading = playerInput.move; // Modify transform.position += deltaTime * playerInput.move * settings.playerMoveSpeed; group.transform[index] = transform; // Write IComponentData structs must not contain references to managed objects. This is because ComponentData lives in simple non-garbage-collected tracked Chunk memory , which has many performance advantages. Managed IComponentData It is helpful to use a managed IComponentData (that is, IComponentData declared using a class rather than struct ) to help port existing code over to ECS in a piecemeal fashion, interoperate with managed data not suitable in ISharedComponentData , or to prototype a data layout. These components are used the same way as value type IComponentData . However, ECS handles them internally in a much different (and slower) way. If you don't need managed component support, define UNITY_DISABLE_MANAGED_COMPONENTS in your application's Player Settings (menu: Edit > Project Settings > Player > Scripting Define Symbols ) to prevent accidental usage. Because managed IComponentData is a managed type, it has the following performance drawbacks compared to valuetype IComponentData : It cannot be used with the Burst Compiler It cannot be used in job structs It cannot use Chunk memory It requires garbage collection You should try to limit the number of managed components, and use blittable types as much as possible. Managed IComponentData must implement the IEquatable<T> interface and override for Object.GetHashCode() . Additionally, for serialization purposes, managed components must be default constructible. You must set the value of the component on the main thread. To do this, use either the EntityManager or EntityCommandBuffer . Because a component is a reference type, you can change the value of the component without moving entities across Chunks, unlike ISharedComponentData . This does not create a sync-point. However, while managed components are logically stored separate from value-type components, they still contribute to an entity's EntityArchetype definition. As such, adding a new managed component to an entity still causes ECS to create a new archetype (if a matching archetype doesn't exist already) and it moves the entity to a new Chunk. For an example, see the file: /Packages/com.unity.entities/Unity.Entities/IComponentData.cs ."
  },
  "manual/chunk_iteration_job.html": {
    "href": "manual/chunk_iteration_job.html",
    "title": "Using IJobChunk jobs | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Using IJobChunk jobs You can implement IJobChunk inside a system to iterate through your data by chunk. When you schedule an IJobChunk job in the OnUpdate() function of a system, the job invokes your Execute() function once for each chunk that matches the entity query passed to the job's Schedule() method. You can then iterate over the data inside each chunk, entity by entity. Iterating with IJobChunk requires more code setup than does Entities.ForEach, but is also more explicit and represents the most direct access to the data, as it is actually stored. Another benefit of iterating by chunks is that you can check whether an optional component is present in each chunk with Archetype.Has<T>() , and then process all of the entities in the chunk accordingly. To implement an IJobChunk job, use the following steps: Create an EntityQuery to identify the entities that you want to process. Define the job struct, and include fields for ArchetypeChunkComponentType objects that identify the types of components the job must directly access. Also, specify whether the job reads or writes to those components. Instantiate the job struct and schedule the job in the system OnUpdate() function. In the Execute() function, get the NativeArray instances for the components the job reads or writes and then iterate over the current chunk to perform the desired work. For more information, the ECS samples repository contains a simple HelloCube example that demonstrates how to use IJobChunk . Query for data with a EntityQuery An EntityQuery defines the set of component types that an archetype must contain for the system to process its associated chunks and entities. An archetype can have additional components, but it must have at least those that the EntityQuery defines. You can also exclude archetypes that contain specific types of components. For simple queries, you can use the SystemBase.GetEntityQuery() function and pass in the component types as follows: public class RotationSpeedSystem : SystemBase { private EntityQuery m_Query; protected override void OnCreate() { m_Query = GetEntityQuery(ComponentType.ReadOnly<Rotation>(), ComponentType.ReadOnly<RotationSpeed>()); //... } For more complex situations, you can use an EntityQueryDesc . An EntityQueryDesc provides a flexible query mechanism to specify the component types: All : All component types in this array must exist in the archetype Any : At least one of the component types in this array must exist in the archetype None : None of the component types in this array can exist in the archetype For example, the following query includes archetypes that contain the RotationQuaternion and RotationSpeed components, but excludes any archetypes that contain the Frozen component: protected override void OnCreate() { var queryDescription = new EntityQueryDesc() { None = new ComponentType[] { typeof(Static) }, All = new ComponentType[] { ComponentType.ReadWrite<Rotation>(), ComponentType.ReadOnly<RotationSpeed>() } }; m_Query = GetEntityQuery(queryDescription); } The query uses ComponentType.ReadOnly<T> instead of the simpler typeof expression to designate that the system does not write to RotationSpeed . You can also combine multiple queries. To do this, pass an array of EntityQueryDesc objects rather than a single instance. ECS uses a logical OR operation to combine each query. The following example selects any archetypes that contain a RotationQuaternion component or a RotationSpeed component (or both): protected override void OnCreate() { var queryDescription0 = new EntityQueryDesc { All = new ComponentType[] {typeof(Rotation)} }; var queryDescription1 = new EntityQueryDesc { All = new ComponentType[] {typeof(RotationSpeed)} }; m_Query = GetEntityQuery(new EntityQueryDesc[] {queryDescription0, queryDescription1}); } Note: Do not include completely optional components in the EntityQueryDesc . To handle optional components, use the chunk.Has<T>() method inside IJobChunk.Execute() to determine whether the current ArchetypeChunk has the optional component or not. Because all entities in the same chunk have the same components, you only need to check whether an optional component exists once per chunk: not once per entity. For efficiency and to avoid needless creation of garbage-collected reference types, you should create the EntityQueries for a system in the system’s OnCreate() function and store the result in an instance variable. (In the above examples, the m_Query variable is used for this purpose.) Define the IJobChunk struct The IJobChunk struct defines fields for the data the job needs when it runs, as well as the job’s Execute() method. To access the component arrays inside of the chunks that the system passes to your Execute() method, you must create an ArchetypeChunkComponentType<T> object for each type of component that the job reads or writes to. You can use these objects to get instances of the NativeArray s that provide access to the components of an entity. Include all of the components referenced in the job’s EntityQuery that the Execute() method reads or writes. You can also provide ArchetypeChunkComponentType variables for optional component types that you do not include in the EntityQuery. You must check to make sure that the current chunk has an optional component before you try to access it. For example, the HelloCube IJobChunk example declares a job struct that defines ArchetypeChunkComponentType<T> variables for two components; RotationQuaternion and RotationSpeed : [BurstCompile] struct RotationSpeedJob : IJobChunk { public float DeltaTime; public ArchetypeChunkComponentType<Rotation> RotationType; [ReadOnly] public ArchetypeChunkComponentType<RotationSpeed> RotationSpeedType; public void Execute(ArchetypeChunk chunk, int chunkIndex, int firstEntityIndex) { // ... } } The system assigns values to these variables in the OnUpdate() function. ECS uses the variables inside the Execute() method when it runs the job. The job also uses the Unity delta time to animate the rotation of a 3D object. The example uses a struct field to pass this value to the Execute() method. Writing the Execute method The signature of the IJobChunk Execute() method is: public void Execute(ArchetypeChunk chunk, int chunkIndex, int firstEntityIndex) The chunk parameter is a handle to the block of memory that contains the entities and components that this iteration of the job has to process. Because a chunk can only contain a single archetype, all of the entities in a chunk have the same set of components. Use the chunk parameter to get the NativeArray instances for components: var chunkRotations = chunk.GetNativeArray(RotationType); var chunkRotationSpeeds = chunk.GetNativeArray(RotationSpeedType); These arrays are aligned so that an entity has the same index in all of them. You can then use a normal for loop to iterate through the component arrays. Use chunk.Count to get the number of entities stored in the current chunk: var chunkRotations = chunk.GetNativeArray(RotationType); var chunkRotationSpeeds = chunk.GetNativeArray(RotationSpeedType); for (var i = 0; i < chunk.Count; i++) { var rotation = chunkRotations[i]; var rotationSpeed = chunkRotationSpeeds[i]; // Rotate something about its up vector at the speed given by RotationSpeed. chunkRotations[i] = new Rotation { Value = math.mul(math.normalize(rotation.Value), quaternion.AxisAngle(math.up(), rotationSpeed.RadiansPerSecond * DeltaTime)) }; } If you have the Any filter in your EntityQueryDesc or have completely optional components that don’t appear in the query at all, you can use the ArchetypeChunk.Has<T>() function to test whether the current chunk contains one of those components before you use it: if (chunk.Has<OptionalComp>(OptionalCompType)) {//...} Note: If you use a concurrent entity command buffer, pass the chunkIndex argument as the jobIndex parameter to the command buffer functions. Skipping chunks with unchanged entities If you only need to update entities when a component value has changed, you can add that component type to the change filter of the EntityQuery that selects the entities and chunks for the job. For example, if you have a system that reads two components and only needs to update a third when one of the first two has changed, you can use a EntityQuery as follows: private EntityQuery m_Query; protected override void OnCreate() { m_Query = GetEntityQuery( ComponentType.ReadWrite<Output>(), ComponentType.ReadOnly<InputA>(), ComponentType.ReadOnly<InputB>()); m_Query.SetChangedVersionFilter( new ComponentType[] { ComponentType.ReadWrite<InputA>(), ComponentType.ReadWrite<InputB>() }); } The EntityQuery change filter supports up to two components. If you want to check more or you aren't using a EntityQuery, you can make the check manually. To make this check, use the ArchetypeChunk.DidChange() function to compare the chunk’s change version for the component to the system's LastSystemVersion . If this function returns false, you can skip the current chunk altogether because none of the components of that type have changed since the last time the system ran. You must use a struct field to pass the LastSystemVersion from the system into the job, as follows: [BurstCompile] struct UpdateJob : IJobChunk { public ArchetypeChunkComponentType<InputA> InputAType; public ArchetypeChunkComponentType<InputB> InputBType; [ReadOnly] public ArchetypeChunkComponentType<Output> OutputType; public uint LastSystemVersion; public void Execute(ArchetypeChunk chunk, int chunkIndex, int firstEntityIndex) { var inputAChanged = chunk.DidChange(InputAType, LastSystemVersion); var inputBChanged = chunk.DidChange(InputBType, LastSystemVersion); // If neither component changed, skip the current chunk if (!(inputAChanged || inputBChanged)) return; var inputAs = chunk.GetNativeArray(InputAType); var inputBs = chunk.GetNativeArray(InputBType); var outputs = chunk.GetNativeArray(OutputType); for (var i = 0; i < outputs.Length; i++) { outputs[i] = new Output{ Value = inputAs[i].Value + inputBs[i].Value }; } } } As with all the job struct fields, you must assign its value before you schedule the job: protected override void OnUpdate() { var job = new UpdateJob(); job.LastSystemVersion = this.LastSystemVersion; job.InputAType = GetArchetypeChunkComponentType<InputA>(true); job.InputBType = GetArchetypeChunkComponentType<InputB>(true); job.OutputType = GetArchetypeChunkComponentType<Output>(false); this.Dependency = job.ScheduleParallel(m_Query, this.Dependency); } Note: For efficiency, the change version applies to whole chunks not individual entities. If another job which has the ability to write to that type of component accesses a chunk, then ECS increments the change version for that component and the DidChange() function returns true. ECS increments the change version even if the job that declares write access to a component does not actually change the component value. Instantiate and schedule the job To run an IJobChunk job, you must create an instance of your job struct, setting the struct fields, and then schedule the job. When you do this in the OnUpdate() function of a SystemBase implementation, the system schedules the job to run every frame. protected override void OnUpdate() { var job = new RotationSpeedJob() { RotationType = GetArchetypeChunkComponentType<Rotation>(false), RotationSpeedType = GetArchetypeChunkComponentType<RotationSpeed>(true), DeltaTime = Time.DeltaTime }; this.Dependency = job.ScheduleParallel(m_Query, this.Dependency); } When you call the GetArchetypeChunkComponentType<T>() function to set your component type variables, make sure that you set the isReadOnly parameter to true for components that the job reads, but doesn’t write. Setting these parameters correctly can have a significant impact on how efficiently the ECS framework can schedule your jobs. These access mode settings must match their equivalents in both the struct definition, and the EntityQuery. Do not cache the return value of GetArchetypeChunkComponentType<T>() in a system class variable. You must call the function every time the system runs, and pass the updated value to the job."
  },
  "license/LICENSE.html": {
    "href": "license/LICENSE.html",
    "title": "| Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Unity Companion License (“License”) Software Copyright © 2017-2020 Unity Technologies ApS Unity Technologies ApS (“Unity”) grants to you a worldwide, non-exclusive, no-charge, and royalty-free copyright license to reproduce, prepare derivative works of, publicly display, publicly perform, sublicense, and distribute the software that is made available under this License (“Software”), subject to the following terms and conditions: Unity Companion Use Only. Exercise of the license granted herein is limited to exercise for the creation, use, and/or distribution of applications, software, or other content pursuant to a valid Unity content authoring and rendering engine software license (“Engine License”). That means while use of the Software is not limited to use in the software licensed under the Engine License, the Software may not be used for any purpose other than the creation, use, and/or distribution of Engine License-dependent applications, software, or other content. No other exercise of the license granted herein is permitted, and in no event may the Software be used for competitive analysis or to develop a competing product or service. No Modification of Engine License. Neither this License nor any exercise of the license granted herein modifies the Engine License in any way. Ownership & Grant Back to You. 3.1 You own your content. In this License, “derivative works” means derivatives of the Software itself--works derived only from the Software by you under this License (for example, modifying the code of the Software itself to improve its efficacy); “derivative works” of the Software do not include, for example, games, apps, or content that you create using the Software. You keep all right, title, and interest to your own content. 3.2 Unity owns its content. While you keep all right, title, and interest to your own content per the above, as between Unity and you, Unity will own all right, title, and interest to all intellectual property rights (including patent, trademark, and copyright) in the Software and derivative works of the Software, and you hereby assign and agree to assign all such rights in those derivative works to Unity. 3.3 You have a license to those derivative works. Subject to this License, Unity grants to you the same worldwide, non-exclusive, no-charge, and royalty-free copyright license to derivative works of the Software you create as is granted to you for the Software under this License. Trademarks. You are not granted any right or license under this License to use any trademarks, service marks, trade names, products names, or branding of Unity or its affiliates (“Trademarks”). Descriptive uses of Trademarks are permitted; see, for example, Unity’s Branding Usage Guidelines at https://unity3d.com/public-relations/brand . Notices & Third-Party Rights. This License, including the copyright notice associated with the Software, must be provided in all substantial portions of the Software and derivative works thereof (or, if that is impracticable, in any other location where such notices are customarily placed). Further, if the Software is accompanied by a Unity “third-party notices” or similar file, you acknowledge and agree that software identified in that file is governed by those separate license terms. DISCLAIMER, LIMITATION OF LIABILITY. THE SOFTWARE AND ANY DERIVATIVE WORKS THEREOF IS PROVIDED ON AN \"AS IS\" BASIS, AND IS PROVIDED WITHOUT WARRANTY OF ANY KIND, WHETHER EXPRESS OR IMPLIED, INCLUDING ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, AND/OR NONINFRINGEMENT. IN NO EVENT SHALL ANY COPYRIGHT HOLDER OR AUTHOR BE LIABLE FOR ANY CLAIM, DAMAGES (WHETHER DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL, INCLUDING PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, LOSS OF USE, DATA, OR PROFITS, AND BUSINESS INTERRUPTION), OR OTHER LIABILITY WHATSOEVER, WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM OR OUT OF, OR IN CONNECTION WITH, THE SOFTWARE OR ANY DERIVATIVE WORKS THEREOF OR THE USE OF OR OTHER DEALINGS IN SAME, EVEN WHERE ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. USE IS ACCEPTANCE and License Versions. Your receipt and use of the Software constitutes your acceptance of this License and its terms and conditions. Software released by Unity under this License may be modified or updated and the License with it; upon any such modification or update, you will comply with the terms of the updated License for any use of any of the Software under the updated License. Use in Compliance with Law and Termination. Your exercise of the license granted herein will at all times be in compliance with applicable law and will not infringe any proprietary rights (including intellectual property rights); this License will terminate immediately on any breach by you of this License. Severability. If any provision of this License is held to be unenforceable or invalid, that provision will be enforced to the maximum extent possible and the other provisions will remain in full force and effect. Governing Law and Venue. This License is governed by and construed in accordance with the laws of Denmark, except for its conflict of laws rules; the United Nations Convention on Contracts for the International Sale of Goods will not apply. If you reside (or your principal place of business is) within the United States, you and Unity agree to submit to the personal and exclusive jurisdiction of and venue in the state and federal courts located in San Francisco County, California concerning any dispute arising out of this License (“Dispute”). If you reside (or your principal place of business is) outside the United States, you and Unity agree to submit to the personal and exclusive jurisdiction of and venue in the courts located in Copenhagen, Denmark concerning any Dispute."
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "| Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "This is the documentation for the Scripting APIs of this package."
  },
  "api/Unity.Entities.BeginInitializationEntityCommandBufferSystem.html": {
    "href": "api/Unity.Entities.BeginInitializationEntityCommandBufferSystem.html",
    "title": "Class BeginInitializationEntityCommandBufferSystem | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class BeginInitializationEntityCommandBufferSystem Inheritance Object ComponentSystemBase ComponentSystem EntityCommandBufferSystem BeginInitializationEntityCommandBufferSystem Inherited Members EntityCommandBufferSystem.CreateCommandBuffer() EntityCommandBufferSystem.AddJobHandleForProducer(JobHandle) EntityCommandBufferSystem.OnCreate() EntityCommandBufferSystem.OnDestroy() EntityCommandBufferSystem.OnUpdate() ComponentSystem.PostUpdateCommands ComponentSystem.InitEntityQueryCache(Int32) ComponentSystem.Entities ComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnDestroyManager() ComponentSystemBase.OnCreateManager() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetArchetypeChunkComponentType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkComponentTypeDynamic(ComponentType) ComponentSystemBase.GetArchetypeChunkBufferType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkSharedComponentType<T>() ComponentSystemBase.GetArchetypeChunkEntityType() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [UpdateInGroup(typeof(InitializationSystemGroup))] public class BeginInitializationEntityCommandBufferSystem : EntityCommandBufferSystem Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Entities.ArchetypeChunkSharedComponentType-1.html": {
    "href": "api/Unity.Entities.ArchetypeChunkSharedComponentType-1.html",
    "title": "Struct ArchetypeChunkSharedComponentType<T> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct ArchetypeChunkSharedComponentType<T> Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct ArchetypeChunkSharedComponentType<T> where T : struct, ISharedComponentData Type Parameters Name Description T"
  },
  "api/Unity.Entities.ArchetypeChunkComponentType-1.html": {
    "href": "api/Unity.Entities.ArchetypeChunkComponentType-1.html",
    "title": "Struct ArchetypeChunkComponentType<T> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct ArchetypeChunkComponentType<T> Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct ArchetypeChunkComponentType<T> Type Parameters Name Description T Properties | Improve this Doc GlobalSystemVersion Declaration public uint GlobalSystemVersion { get; } Property Value Type Description UInt32 | Improve this Doc IsReadOnly Declaration public bool IsReadOnly { get; } Property Value Type Description Boolean"
  },
  "api/Unity.Entities.AlwaysSynchronizeSystemAttribute.html": {
    "href": "api/Unity.Entities.AlwaysSynchronizeSystemAttribute.html",
    "title": "Class AlwaysSynchronizeSystemAttribute | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class AlwaysSynchronizeSystemAttribute AlwaysSynchronizeSystem can be applied to a JobComponentSystem to force it to synchronize on all of its dependencies before every update. This attribute should only be applied when a synchronization point is necessary every frame. Inheritance Object Attribute AlwaysSynchronizeSystemAttribute Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [AttributeUsage(AttributeTargets.Class)] public class AlwaysSynchronizeSystemAttribute : Attribute, _Attribute"
  },
  "api/Unity.Core.XXHash.html": {
    "href": "api/Unity.Core.XXHash.html",
    "title": "Class XXHash | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class XXHash XXHash implementation. Inheritance Object XXHash Namespace : Unity.Core <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class XXHash Methods | Improve this Doc Hash32(Byte*, Int32, UInt32) Generate a 32-bit xxHash value. Declaration public static uint Hash32(byte *buffer, int bufferLength, uint seed = 0U) Parameters Type Name Description Byte * buffer Input buffer. Int32 bufferLength UInt32 seed Optional seed. Returns Type Description UInt32 32-bit hash value. | Improve this Doc Hash32(Stream, UInt32) Generate a 32-bit xxHash value from a stream. Declaration public static uint Hash32(Stream stream, uint seed = 0U) Parameters Type Name Description Stream stream Input stream. UInt32 seed Optional seed. Returns Type Description UInt32 32-bit hash value. | Improve this Doc Hash64(Byte*, Int32, UInt64) Generate a 64-bit xxHash value. Declaration public static ulong Hash64(byte *buffer, int bufferLength, ulong seed = 0UL) Parameters Type Name Description Byte * buffer Input buffer. Int32 bufferLength UInt64 seed Optional seed. Returns Type Description UInt64 Computed 64-bit hash value. | Improve this Doc Hash64(Stream, UInt64) Generate a 64-bit xxHash value from a stream. Declaration public static ulong Hash64(Stream stream, ulong seed = 0UL) Parameters Type Name Description Stream stream Input stream. UInt64 seed Optional seed. Returns Type Description UInt64 Computed 64-bit hash value."
  },
  "api/Unity.Transforms.TRSToLocalToParentSystem.html": {
    "href": "api/Unity.Transforms.TRSToLocalToParentSystem.html",
    "title": "Class TRSToLocalToParentSystem | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class TRSToLocalToParentSystem Inheritance Object ComponentSystemBase JobComponentSystem TRSToLocalToParentSystem EndFrameTRSToLocalToParentSystem Inherited Members JobComponentSystem.Entities JobComponentSystem.Job JobComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnDestroyManager() ComponentSystemBase.OnCreateManager() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetArchetypeChunkComponentType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkComponentTypeDynamic(ComponentType) ComponentSystemBase.GetArchetypeChunkBufferType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkSharedComponentType<T>() ComponentSystemBase.GetArchetypeChunkEntityType() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public abstract class TRSToLocalToParentSystem : JobComponentSystem Methods | Improve this Doc OnCreate() Declaration protected override void OnCreate() Overrides ComponentSystemBase.OnCreate() | Improve this Doc OnUpdate(JobHandle) Declaration protected override JobHandle OnUpdate(JobHandle inputDeps) Parameters Type Name Description JobHandle inputDeps Returns Type Description JobHandle Overrides JobComponentSystem.OnUpdate(JobHandle) Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Transforms.Static.html": {
    "href": "api/Unity.Transforms.Static.html",
    "title": "Struct Static | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct Static When added, TransformSystem will process transform compomnnts once to update LocalToWorld. Once that is resolved, the Frozen component will be added and LocalToWorld will no longer be updated. Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct Static : IComponentData"
  },
  "api/Unity.Transforms.ScalePivotTranslation.html": {
    "href": "api/Unity.Transforms.ScalePivotTranslation.html",
    "title": "Struct ScalePivotTranslation | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct ScalePivotTranslation Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] [WriteGroup(typeof(CompositeScale))] public struct ScalePivotTranslation : IComponentData Fields | Improve this Doc Value Declaration public float3 Value Field Value Type Description float3"
  },
  "api/Unity.Transforms.ScalePivot.html": {
    "href": "api/Unity.Transforms.ScalePivot.html",
    "title": "Struct ScalePivot | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct ScalePivot Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] [WriteGroup(typeof(CompositeScale))] public struct ScalePivot : IComponentData Fields | Improve this Doc Value Declaration public float3 Value Field Value Type Description float3"
  },
  "api/Unity.Transforms.Scale.html": {
    "href": "api/Unity.Transforms.Scale.html",
    "title": "Struct Scale | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct Scale Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] [WriteGroup(typeof(LocalToWorld))] [WriteGroup(typeof(LocalToParent))] [WriteGroup(typeof(CompositeScale))] [WriteGroup(typeof(ParentScaleInverse))] public struct Scale : IComponentData Fields | Improve this Doc Value Declaration public float Value Field Value Type Description Single"
  },
  "api/Unity.Transforms.RotationProxy.html": {
    "href": "api/Unity.Transforms.RotationProxy.html",
    "title": "Class RotationProxy | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class RotationProxy Inheritance Object ComponentDataProxyBase ComponentDataProxy < Rotation > RotationProxy Inherited Members ComponentDataProxy<Rotation>.Value ComponentDataProxyBase.OnEnable() ComponentDataProxyBase.OnDisable() Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class RotationProxy : ComponentDataProxy<Rotation>, ISerializationCallbackReceiver Methods | Improve this Doc ValidateSerializedData(ref Rotation) Declaration protected override void ValidateSerializedData(ref Rotation serializedData) Parameters Type Name Description Rotation serializedData Overrides Unity.Entities.ComponentDataProxy<Unity.Transforms.Rotation>.ValidateSerializedData(Unity.Transforms.Rotation)"
  },
  "api/Unity.Transforms.RotationPivotTranslation.html": {
    "href": "api/Unity.Transforms.RotationPivotTranslation.html",
    "title": "Struct RotationPivotTranslation | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct RotationPivotTranslation Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] [WriteGroup(typeof(CompositeRotation))] public struct RotationPivotTranslation : IComponentData Fields | Improve this Doc Value Declaration public float3 Value Field Value Type Description float3"
  },
  "api/Unity.Transforms.RotationPivot.html": {
    "href": "api/Unity.Transforms.RotationPivot.html",
    "title": "Struct RotationPivot | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct RotationPivot Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] [WriteGroup(typeof(CompositeRotation))] public struct RotationPivot : IComponentData Fields | Improve this Doc Value Declaration public float3 Value Field Value Type Description float3"
  },
  "api/Unity.Transforms.RotationEulerZYX.html": {
    "href": "api/Unity.Transforms.RotationEulerZYX.html",
    "title": "Struct RotationEulerZYX | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct RotationEulerZYX Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] [WriteGroup(typeof(Rotation))] public struct RotationEulerZYX : IComponentData Fields | Improve this Doc Value Declaration public float3 Value Field Value Type Description float3"
  },
  "api/Unity.Transforms.RotationEulerZXY.html": {
    "href": "api/Unity.Transforms.RotationEulerZXY.html",
    "title": "Struct RotationEulerZXY | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct RotationEulerZXY Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] [WriteGroup(typeof(Rotation))] public struct RotationEulerZXY : IComponentData Fields | Improve this Doc Value Declaration public float3 Value Field Value Type Description float3"
  },
  "api/Unity.Transforms.RotationEulerYZX.html": {
    "href": "api/Unity.Transforms.RotationEulerYZX.html",
    "title": "Struct RotationEulerYZX | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct RotationEulerYZX Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] [WriteGroup(typeof(Rotation))] public struct RotationEulerYZX : IComponentData Fields | Improve this Doc Value Declaration public float3 Value Field Value Type Description float3"
  },
  "api/Unity.Transforms.RotationEulerYXZ.html": {
    "href": "api/Unity.Transforms.RotationEulerYXZ.html",
    "title": "Struct RotationEulerYXZ | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct RotationEulerYXZ Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] [WriteGroup(typeof(Rotation))] public struct RotationEulerYXZ : IComponentData Fields | Improve this Doc Value Declaration public float3 Value Field Value Type Description float3"
  },
  "api/Unity.Transforms.RotationEulerXZY.html": {
    "href": "api/Unity.Transforms.RotationEulerXZY.html",
    "title": "Struct RotationEulerXZY | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct RotationEulerXZY Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] [WriteGroup(typeof(Rotation))] public struct RotationEulerXZY : IComponentData Fields | Improve this Doc Value Declaration public float3 Value Field Value Type Description float3"
  },
  "api/Unity.Transforms.RotationEulerXYZ.html": {
    "href": "api/Unity.Transforms.RotationEulerXYZ.html",
    "title": "Struct RotationEulerXYZ | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct RotationEulerXYZ Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] [WriteGroup(typeof(Rotation))] public struct RotationEulerXYZ : IComponentData Fields | Improve this Doc Value Declaration public float3 Value Field Value Type Description float3"
  },
  "api/Unity.Transforms.WorldToLocalSystem.html": {
    "href": "api/Unity.Transforms.WorldToLocalSystem.html",
    "title": "Class WorldToLocalSystem | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class WorldToLocalSystem Inheritance Object ComponentSystemBase JobComponentSystem WorldToLocalSystem EndFrameWorldToLocalSystem Inherited Members JobComponentSystem.Entities JobComponentSystem.Job JobComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnDestroyManager() ComponentSystemBase.OnCreateManager() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetArchetypeChunkComponentType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkComponentTypeDynamic(ComponentType) ComponentSystemBase.GetArchetypeChunkBufferType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkSharedComponentType<T>() ComponentSystemBase.GetArchetypeChunkEntityType() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public abstract class WorldToLocalSystem : JobComponentSystem Methods | Improve this Doc OnCreate() Declaration protected override void OnCreate() Overrides ComponentSystemBase.OnCreate() | Improve this Doc OnUpdate(JobHandle) Declaration protected override JobHandle OnUpdate(JobHandle inputDeps) Parameters Type Name Description JobHandle inputDeps Returns Type Description JobHandle Overrides JobComponentSystem.OnUpdate(JobHandle) Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Transforms.WorldToLocal.html": {
    "href": "api/Unity.Transforms.WorldToLocal.html",
    "title": "Struct WorldToLocal | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct WorldToLocal Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] public struct WorldToLocal : IComponentData Fields | Improve this Doc Value Declaration public float4x4 Value Field Value Type Description float4x4 Properties | Improve this Doc Forward Declaration public float3 Forward { get; } Property Value Type Description float3 | Improve this Doc Position Declaration public float3 Position { get; } Property Value Type Description float3 | Improve this Doc Right Declaration public float3 Right { get; } Property Value Type Description float3 | Improve this Doc Up Declaration public float3 Up { get; } Property Value Type Description float3"
  },
  "api/Unity.Transforms.TranslationProxy.html": {
    "href": "api/Unity.Transforms.TranslationProxy.html",
    "title": "Class TranslationProxy | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class TranslationProxy Inheritance Object ComponentDataProxyBase ComponentDataProxy < Translation > TranslationProxy Inherited Members ComponentDataProxy<Translation>.ValidateSerializedData(Translation) ComponentDataProxy<Translation>.Value ComponentDataProxyBase.OnEnable() ComponentDataProxyBase.OnDisable() Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class TranslationProxy : ComponentDataProxy<Translation>, ISerializationCallbackReceiver"
  },
  "api/Unity.Transforms.Translation.html": {
    "href": "api/Unity.Transforms.Translation.html",
    "title": "Struct Translation | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct Translation Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] [WriteGroup(typeof(LocalToWorld))] [WriteGroup(typeof(LocalToParent))] public struct Translation : IComponentData Fields | Improve this Doc Value Declaration public float3 Value Field Value Type Description float3"
  },
  "api/Unity.Transforms.TransformSystemGroup.html": {
    "href": "api/Unity.Transforms.TransformSystemGroup.html",
    "title": "Class TransformSystemGroup | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class TransformSystemGroup Inheritance Object ComponentSystemBase ComponentSystem ComponentSystemGroup TransformSystemGroup Inherited Members ComponentSystemGroup.m_systemsToUpdate ComponentSystemGroup.m_systemsToRemove ComponentSystemGroup.Systems ComponentSystemGroup.AddSystemToUpdateList(ComponentSystemBase) ComponentSystemGroup.RemoveSystemFromUpdateList(ComponentSystemBase) ComponentSystemGroup.SortSystemUpdateList() ComponentSystemGroup.OnStopRunning() ComponentSystemGroup.UpdateCallback ComponentSystemGroup.OnUpdate() ComponentSystem.PostUpdateCommands ComponentSystem.InitEntityQueryCache(Int32) ComponentSystem.Entities ComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnCreate() ComponentSystemBase.OnDestroyManager() ComponentSystemBase.OnCreateManager() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetArchetypeChunkComponentType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkComponentTypeDynamic(ComponentType) ComponentSystemBase.GetArchetypeChunkBufferType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkSharedComponentType<T>() ComponentSystemBase.GetArchetypeChunkEntityType() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class TransformSystemGroup : ComponentSystemGroup Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Transforms.TRSToLocalToWorldSystem.html": {
    "href": "api/Unity.Transforms.TRSToLocalToWorldSystem.html",
    "title": "Class TRSToLocalToWorldSystem | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class TRSToLocalToWorldSystem Inheritance Object ComponentSystemBase JobComponentSystem TRSToLocalToWorldSystem EndFrameTRSToLocalToWorldSystem Inherited Members JobComponentSystem.Entities JobComponentSystem.Job JobComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnDestroyManager() ComponentSystemBase.OnCreateManager() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetArchetypeChunkComponentType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkComponentTypeDynamic(ComponentType) ComponentSystemBase.GetArchetypeChunkBufferType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkSharedComponentType<T>() ComponentSystemBase.GetArchetypeChunkEntityType() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public abstract class TRSToLocalToWorldSystem : JobComponentSystem Methods | Improve this Doc OnCreate() Declaration protected override void OnCreate() Overrides ComponentSystemBase.OnCreate() | Improve this Doc OnUpdate(JobHandle) Declaration protected override JobHandle OnUpdate(JobHandle inputDeps) Parameters Type Name Description JobHandle inputDeps Returns Type Description JobHandle Overrides JobComponentSystem.OnUpdate(JobHandle) Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Transforms.PostRotation.html": {
    "href": "api/Unity.Transforms.PostRotation.html",
    "title": "Struct PostRotation | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct PostRotation Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] [WriteGroup(typeof(CompositeRotation))] public struct PostRotation : IComponentData Fields | Improve this Doc Value Declaration public quaternion Value Field Value Type Description quaternion"
  },
  "api/Unity.Entities.UpdateWorldTimeSystem.html": {
    "href": "api/Unity.Entities.UpdateWorldTimeSystem.html",
    "title": "Class UpdateWorldTimeSystem | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class UpdateWorldTimeSystem Inheritance Object ComponentSystemBase ComponentSystem UpdateWorldTimeSystem Inherited Members ComponentSystem.PostUpdateCommands ComponentSystem.InitEntityQueryCache(Int32) ComponentSystem.Entities ComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnCreate() ComponentSystemBase.OnDestroyManager() ComponentSystemBase.OnCreateManager() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetArchetypeChunkComponentType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkComponentTypeDynamic(ComponentType) ComponentSystemBase.GetArchetypeChunkBufferType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkSharedComponentType<T>() ComponentSystemBase.GetArchetypeChunkEntityType() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [UpdateInGroup(typeof(InitializationSystemGroup))] public class UpdateWorldTimeSystem : ComponentSystem Methods | Improve this Doc OnUpdate() Declaration protected override void OnUpdate() Overrides ComponentSystem.OnUpdate() Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Entities.UpdateInGroupAttribute.html": {
    "href": "api/Unity.Entities.UpdateInGroupAttribute.html",
    "title": "Class UpdateInGroupAttribute | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class UpdateInGroupAttribute Inheritance Object Attribute UpdateInGroupAttribute Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [AttributeUsage(AttributeTargets.Class)] public class UpdateInGroupAttribute : Attribute, _Attribute Constructors | Improve this Doc UpdateInGroupAttribute(Type) Declaration public UpdateInGroupAttribute(Type groupType) Parameters Type Name Description Type groupType Properties | Improve this Doc GroupType Declaration public Type GroupType { get; } Property Value Type Description Type"
  },
  "api/Unity.Entities.IComponentData.html": {
    "href": "api/Unity.Entities.IComponentData.html",
    "title": "Interface IComponentData | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Interface IComponentData An interface for implementing general-purpose components. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface IComponentData Remarks An IComponentData implementation must be a struct and can only contain unmanaged, blittable types, including: C#-defined blittable types bool char (a fixed-sized character buffer) BlobAssetReference<T> (a reference to a Blob data structure) fixed arrays (in an unsafe context) structs containing these unmanaged, blittable fields Note that you can also use a separate, IBufferElementData component in a DynamicBuffer<T> as an array-like data structure. A single IComponentData implementation should only contain fields for data that is always, or almost always, accessed at the same time. In general, using a greater number of smaller component types is more efficient than using fewer, larger component types. Add, set, and remove the components of an entity using the EntityManager or an EntityCommandBuffer . (You can also update the fields of an IComponentData struct normally when you have a reference to it.) IComponentData objects are stored in chunks ( ArchetypeChunk ), indexed by Entity . You can implement systems ( ComponentSystemBase ) to select and iterate over a set of entities having specific components. Use EntityQueryBuilder with ComponentSystem for non-Job based systems. Use EntityQuery with JobComponentSystem for IJobForEach<T0> and IJobChunk based systems. All the components of an entity must fit into a single chunk and thus cannot exceed 16 KB. (Some components, such as DynamicBuffer<T> and BlobArray<T> can store data outside the chunk, so may not fully count against that limit.) While, most of the components that you add to entities implement IComponentData, ECS also provides several, specialized component types. These specialized types include: IBufferElementData -- for use in a DynamicBuffer<T> ISharedComponentData -- a component whose value is shared by all entities in the same chunk ISystemStateComponentData -- a component for storing internal system state associated with an entity. ISystemStateSharedComponentData -- the system state version of the shared component interface. ISystemStateBufferElementData -- the system state version of the buffer element interface. Note: Chunk components, which you can use to store data associated with a chunk (see AddChunkComponentData<T>(Entity) ) and singleton components, which are components for which only one instance of a type is allowed (see SetSingleton<T>(T) ), use the IComponentData interface. See General-purpose components for additional information."
  },
  "api/Unity.Entities.IBufferElementData.html": {
    "href": "api/Unity.Entities.IBufferElementData.html",
    "title": "Interface IBufferElementData | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Interface IBufferElementData An interface for creating structs that can be stored in a DynamicBuffer<T> . Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface IBufferElementData Remarks IBufferElementData implementations are subject to the same constraints as IComponentData . Create a DynamicBuffer<T> containing a given type T by adding that IBufferElementData type to an entity. The DynamicBuffer container is created automatically. You can specify the maximum number of elements a buffer stores inside a chunk by placing an InternalBufferCapacityAttribute on the IBufferElementData declaration. When the number of elements exceeds the internal capacity, the entire is moved outside the chunk into heap memory. (In either case, you access an element the same way through the dynamic buffer API.) To remove a buffer from an entity, remove that entity's IBufferElementData component. (To remove an individual element from a buffer, call RemoveAt(Int32) .) You can find entities with a particular type of buffer using either EntityQuery or EntityQueryBuilder in the same way you select entities with specific types of IComponentData . Use the IBufferElementData type in the query (not DynamicBuffer). To access the buffer of an entity in a ComponentSystem , use GetBuffer<T>(Entity) , where T is the IBufferElementData subtype. To access the buffer of an entity in a JobComponentSystem , define a field of type, , as part of the Job struct. Set the field value when you schedule the Job with Unity.Entities.EntityManager.GetBufferFromEntity``1(System.Boolean) . The DynamicBuffer interface provides array-like access to buffer contents. You can treat a buffer like a NativeArray . You can also use Reinterpret<U>() to treat the buffer as a container of the underlying type, rather than a container of IBufferElementData. See Dynamic Buffers for additional information."
  },
  "api/Unity.Entities.Hybrid.html": {
    "href": "api/Unity.Entities.Hybrid.html",
    "title": "Namespace Unity.Entities.Hybrid | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Namespace Unity.Entities.Hybrid Structs ResourceCatalogData Container for resource data. ResourceMetaData Information for resources to be loaded at runtime. Enums ResourceMetaData.Flags For scenes, if AutoLoad is true, the scene will be loaded when the player starts ResourceMetaData.Type Currently Scene types are supported, assetbundles will need to be supported when dependencies are implemented"
  },
  "api/Unity.Entities.Hybrid.ResourceMetaData.html": {
    "href": "api/Unity.Entities.Hybrid.ResourceMetaData.html",
    "title": "Struct ResourceMetaData | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct ResourceMetaData Information for resources to be loaded at runtime. Namespace : Unity.Entities.Hybrid <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct ResourceMetaData Fields | Improve this Doc ResourceFlags Flags to control the behavior of the asset Declaration public ResourceMetaData.Flags ResourceFlags Field Value Type Description ResourceMetaData.Flags | Improve this Doc ResourceId The guid of the asset Declaration public Hash128 ResourceId Field Value Type Description Hash128 | Improve this Doc ResourceType The type of resource. Declaration public ResourceMetaData.Type ResourceType Field Value Type Description ResourceMetaData.Type"
  },
  "api/Unity.Entities.FastEquality.TypeInfo.CompareEqualDelegate.html": {
    "href": "api/Unity.Entities.FastEquality.TypeInfo.CompareEqualDelegate.html",
    "title": "Delegate FastEquality.TypeInfo.CompareEqualDelegate | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate FastEquality.TypeInfo.CompareEqualDelegate Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate bool CompareEqualDelegate(void *lhs, void *rhs); Parameters Type Name Description Void * lhs Void * rhs Returns Type Description Boolean"
  },
  "api/Unity.Entities.FastEquality.Layout.html": {
    "href": "api/Unity.Entities.FastEquality.Layout.html",
    "title": "Struct FastEquality.Layout | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct FastEquality.Layout Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct Layout Fields | Improve this Doc Aligned4 Declaration public bool Aligned4 Field Value Type Description Boolean | Improve this Doc count Declaration public int count Field Value Type Description Int32 | Improve this Doc offset Declaration public int offset Field Value Type Description Int32 Methods | Improve this Doc ToString() Declaration public override string ToString() Returns Type Description String Overrides ValueType.ToString()"
  },
  "api/Unity.Entities.GameObjectConversionUtility.html": {
    "href": "api/Unity.Entities.GameObjectConversionUtility.html",
    "title": "Class GameObjectConversionUtility | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class GameObjectConversionUtility Inheritance Object GameObjectConversionUtility Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class GameObjectConversionUtility Methods | Improve this Doc ConvertGameObjectHierarchy(GameObject, GameObjectConversionSettings) Declaration public static Entity ConvertGameObjectHierarchy(GameObject root, GameObjectConversionSettings settings) Parameters Type Name Description GameObject root GameObjectConversionSettings settings Returns Type Description Entity | Improve this Doc ConvertGameObjectsToEntitiesField(GameObjectConversionSystem, GameObject[], out Entity[]) Declaration public static void ConvertGameObjectsToEntitiesField(GameObjectConversionSystem conversionSystem, GameObject[] gameObjects, out Entity[] entities) Parameters Type Name Description GameObjectConversionSystem conversionSystem GameObject [] gameObjects Entity [] entities | Improve this Doc ConvertIncremental(World, IEnumerable<GameObject>, GameObjectConversionUtility.ConversionFlags) Declaration public static void ConvertIncremental(World conversionWorld, IEnumerable<GameObject> gameObjects, GameObjectConversionUtility.ConversionFlags flags) Parameters Type Name Description World conversionWorld IEnumerable < GameObject > gameObjects GameObjectConversionUtility.ConversionFlags flags | Improve this Doc ConvertIncrementalInitialize(Scene, GameObjectConversionSettings) Declaration public static World ConvertIncrementalInitialize(Scene scene, GameObjectConversionSettings settings) Parameters Type Name Description Scene scene GameObjectConversionSettings settings Returns Type Description World | Improve this Doc ConvertScene(Scene, GameObjectConversionSettings) Declaration public static void ConvertScene(Scene scene, GameObjectConversionSettings settings) Parameters Type Name Description Scene scene GameObjectConversionSettings settings | Improve this Doc GetEntityGuid(GameObject, Int32) Declaration public static EntityGuid GetEntityGuid(GameObject gameObject, int index) Parameters Type Name Description GameObject gameObject Int32 index Returns Type Description EntityGuid"
  },
  "api/Unity.Entities.GameObjectConversionUtility.ConversionFlags.html": {
    "href": "api/Unity.Entities.GameObjectConversionUtility.ConversionFlags.html",
    "title": "Enum GameObjectConversionUtility.ConversionFlags | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Enum GameObjectConversionUtility.ConversionFlags Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Flags] public enum ConversionFlags : uint Fields Name Description AddEntityGUID AssignName ForceStaticOptimization GameViewLiveLink SceneViewLiveLink"
  },
  "api/Unity.Entities.FastEquality.TypeInfo.html": {
    "href": "api/Unity.Entities.FastEquality.TypeInfo.html",
    "title": "Struct FastEquality.TypeInfo | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct FastEquality.TypeInfo Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct TypeInfo Fields | Improve this Doc EqualFn Declaration public Delegate EqualFn Field Value Type Description Delegate | Improve this Doc GetHashFn Declaration public Delegate GetHashFn Field Value Type Description Delegate | Improve this Doc Hash Declaration public int Hash Field Value Type Description Int32 | Improve this Doc Layouts Declaration public FastEquality.Layout[] Layouts Field Value Type Description FastEquality.Layout [] Properties | Improve this Doc Null Declaration public static FastEquality.TypeInfo Null { get; } Property Value Type Description FastEquality.TypeInfo"
  },
  "api/Unity.Entities.FastEquality.TypeInfo.ManagedGetHashCodeDelegate.html": {
    "href": "api/Unity.Entities.FastEquality.TypeInfo.ManagedGetHashCodeDelegate.html",
    "title": "Delegate FastEquality.TypeInfo.ManagedGetHashCodeDelegate | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate FastEquality.TypeInfo.ManagedGetHashCodeDelegate Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate int ManagedGetHashCodeDelegate(object obj); Parameters Type Name Description Object obj Returns Type Description Int32"
  },
  "api/Unity.Entities.FastEquality.TypeInfo.ManagedCompareEqualDelegate.html": {
    "href": "api/Unity.Entities.FastEquality.TypeInfo.ManagedCompareEqualDelegate.html",
    "title": "Delegate FastEquality.TypeInfo.ManagedCompareEqualDelegate | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate FastEquality.TypeInfo.ManagedCompareEqualDelegate Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate bool ManagedCompareEqualDelegate(object lhs, object rhs); Parameters Type Name Description Object lhs Object rhs Returns Type Description Boolean"
  },
  "api/Unity.Entities.FastEquality.TypeInfo.GetHashCodeDelegate.html": {
    "href": "api/Unity.Entities.FastEquality.TypeInfo.GetHashCodeDelegate.html",
    "title": "Delegate FastEquality.TypeInfo.GetHashCodeDelegate | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate FastEquality.TypeInfo.GetHashCodeDelegate Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate int GetHashCodeDelegate(void *obj); Parameters Type Name Description Void * obj Returns Type Description Int32"
  },
  "api/Unity.Entities.EntityQueryMask.html": {
    "href": "api/Unity.Entities.EntityQueryMask.html",
    "title": "Struct EntityQueryMask | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct EntityQueryMask A EntityQueryMask provides a fast check of whether an entity would be selected by an entity query. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct EntityQueryMask Remarks Create an entity query mask using the GetEntityQueryMask(EntityQuery) function. You can create up to 1024 unique EntityQueryMasks instances in a given progrom. Entity query masks cannot be created from entity queries with filters. Methods | Improve this Doc Matches(Entity) Reports whether an entity would be selected by the EntityQuery instance used to create this entity query mask. Declaration public bool Matches(Entity entity) Parameters Type Name Description Entity entity The entity to check. Returns Type Description Boolean True if the entity would be returned by the EntityQuery, false if it would not. Remarks The check does not take the results of filters into account. See Also GetEntityQueryMask(EntityQuery)"
  },
  "api/Unity.Entities.EntityQueryManagedComponentExtensions.html": {
    "href": "api/Unity.Entities.EntityQueryManagedComponentExtensions.html",
    "title": "Class EntityQueryManagedComponentExtensions | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class EntityQueryManagedComponentExtensions Inheritance Object EntityQueryManagedComponentExtensions Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class EntityQueryManagedComponentExtensions Methods | Improve this Doc GetSingleton<T>(EntityQuery) Gets the value of a singleton component. Declaration public static T GetSingleton<T>(this EntityQuery query) where T : class, IComponentData Parameters Type Name Description EntityQuery query Returns Type Description T A copy of the singleton component. Type Parameters Name Description T The component type. Remarks A singleton component is a component of which only one instance exists in the world and which has been set with . Exceptions Type Condition InvalidOperationException | Improve this Doc SetSingleton<T>(EntityQuery, T) Sets the value of a singleton component. Declaration public static void SetSingleton<T>(this EntityQuery query, T value) where T : class, IComponentData Parameters Type Name Description EntityQuery query T value An instance of type T containing the values to set. Type Parameters Name Description T The component type. Remarks For a component to be a singleton, there can be only one instance of that component in a World . The component must be the only component in its archetype and you cannot use the same type of component as a normal component. To create a singleton, create an entity with the singleton component as its only component, and then use SetSingleton() to assign a value. For example, if you had a component defined as: public class Singlet : IComponentData{ public int Value; } You could create a singleton as follows: var singletonEntity = entityManager.CreateEntity(typeof(Singlet)); var singletonGroup = entityManager.CreateEntityQuery(typeof(Singlet)); singletonGroup.SetSingleton<Singlet>(new Singlet {Value = 1}); You can set and get the singleton value from a EntityQuery or a ComponentSystem. Exceptions Type Condition InvalidOperationException Thrown if more than one instance of this component type exists in the world or the component type appears in more than one archetype."
  },
  "api/Unity.Entities.EntityQueryExtensionsForTransformAccessArray.html": {
    "href": "api/Unity.Entities.EntityQueryExtensionsForTransformAccessArray.html",
    "title": "Class EntityQueryExtensionsForTransformAccessArray | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class EntityQueryExtensionsForTransformAccessArray Inheritance Object EntityQueryExtensionsForTransformAccessArray Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class EntityQueryExtensionsForTransformAccessArray Methods | Improve this Doc GetTransformAccessArray(EntityQuery) Declaration public static TransformAccessArray GetTransformAccessArray(this EntityQuery group) Parameters Type Name Description EntityQuery group Returns Type Description TransformAccessArray"
  },
  "api/Unity.Entities.EntityQueryExtensionsForComponentArray.html": {
    "href": "api/Unity.Entities.EntityQueryExtensionsForComponentArray.html",
    "title": "Class EntityQueryExtensionsForComponentArray | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class EntityQueryExtensionsForComponentArray Inheritance Object EntityQueryExtensionsForComponentArray Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class EntityQueryExtensionsForComponentArray Methods | Improve this Doc ToComponentArray<T>(EntityQuery) Declaration public static T[] ToComponentArray<T>(this EntityQuery group) where T : Component Parameters Type Name Description EntityQuery group Returns Type Description T[] Type Parameters Name Description T"
  },
  "api/Unity.Entities.EntityContainer.html": {
    "href": "api/Unity.Entities.EntityContainer.html",
    "title": "Struct EntityContainer | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct EntityContainer Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct EntityContainer Constructors | Improve this Doc EntityContainer(EntityManager, Entity, Boolean) Declaration public EntityContainer(EntityManager entityManager, Entity entity, bool readOnly = true) Parameters Type Name Description EntityManager entityManager Entity entity Boolean readOnly Fields | Improve this Doc Entity Declaration public readonly Entity Entity Field Value Type Description Entity | Improve this Doc EntityManager Declaration public readonly EntityManager EntityManager Field Value Type Description EntityManager | Improve this Doc IsReadOnly Declaration public readonly bool IsReadOnly Field Value Type Description Boolean Methods | Improve this Doc GetComponentCount() Declaration public int GetComponentCount() Returns Type Description Int32"
  },
  "api/Unity.Entities.ExclusiveEntityTransaction.html": {
    "href": "api/Unity.Entities.ExclusiveEntityTransaction.html",
    "title": "Struct ExclusiveEntityTransaction | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct ExclusiveEntityTransaction Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct ExclusiveEntityTransaction Methods | Improve this Doc AddBuffer<T>(Entity) Declaration public DynamicBuffer<T> AddBuffer<T>(Entity entity) where T : struct, IBufferElementData Parameters Type Name Description Entity entity Returns Type Description DynamicBuffer <T> Type Parameters Name Description T | Improve this Doc AddComponent(Entity, ComponentType) Declaration public void AddComponent(Entity entity, ComponentType componentType) Parameters Type Name Description Entity entity ComponentType componentType | Improve this Doc CheckAccess() Declaration [Conditional(\"ENABLE_UNITY_COLLECTIONS_CHECKS\")] public void CheckAccess() | Improve this Doc CreateArchetype(ComponentType[]) Declaration public EntityArchetype CreateArchetype(params ComponentType[] types) Parameters Type Name Description ComponentType [] types Returns Type Description EntityArchetype | Improve this Doc CreateEntity(ComponentType[]) Declaration public Entity CreateEntity(params ComponentType[] types) Parameters Type Name Description ComponentType [] types Returns Type Description Entity | Improve this Doc CreateEntity(EntityArchetype) Declaration public Entity CreateEntity(EntityArchetype archetype) Parameters Type Name Description EntityArchetype archetype Returns Type Description Entity | Improve this Doc CreateEntity(EntityArchetype, NativeArray<Entity>) Declaration public void CreateEntity(EntityArchetype archetype, NativeArray<Entity> entities) Parameters Type Name Description EntityArchetype archetype NativeArray < Entity > entities | Improve this Doc DestroyEntity(NativeArray<Entity>) Declaration public void DestroyEntity(NativeArray<Entity> entities) Parameters Type Name Description NativeArray < Entity > entities | Improve this Doc DestroyEntity(NativeSlice<Entity>) Declaration public void DestroyEntity(NativeSlice<Entity> entities) Parameters Type Name Description NativeSlice < Entity > entities | Improve this Doc DestroyEntity(Entity) Declaration public void DestroyEntity(Entity entity) Parameters Type Name Description Entity entity | Improve this Doc Exists(Entity) Declaration public bool Exists(Entity entity) Parameters Type Name Description Entity entity Returns Type Description Boolean | Improve this Doc GetBuffer<T>(Entity) Declaration public DynamicBuffer<T> GetBuffer<T>(Entity entity) where T : struct, IBufferElementData Parameters Type Name Description Entity entity Returns Type Description DynamicBuffer <T> Type Parameters Name Description T | Improve this Doc GetComponentData<T>(Entity) Declaration public T GetComponentData<T>(Entity entity) where T : struct, IComponentData Parameters Type Name Description Entity entity Returns Type Description T Type Parameters Name Description T | Improve this Doc GetSharedComponentData<T>(Entity) Declaration public T GetSharedComponentData<T>(Entity entity) where T : struct, ISharedComponentData Parameters Type Name Description Entity entity Returns Type Description T Type Parameters Name Description T | Improve this Doc HasComponent(Entity, ComponentType) Declaration public bool HasComponent(Entity entity, ComponentType type) Parameters Type Name Description Entity entity ComponentType type Returns Type Description Boolean | Improve this Doc Instantiate(Entity) Declaration public Entity Instantiate(Entity srcEntity) Parameters Type Name Description Entity srcEntity Returns Type Description Entity | Improve this Doc Instantiate(Entity, NativeArray<Entity>) Declaration public void Instantiate(Entity srcEntity, NativeArray<Entity> outputEntities) Parameters Type Name Description Entity srcEntity NativeArray < Entity > outputEntities | Improve this Doc RemoveComponent(Entity, ComponentType) Declaration public void RemoveComponent(Entity entity, ComponentType type) Parameters Type Name Description Entity entity ComponentType type | Improve this Doc SetComponentData<T>(Entity, T) Declaration public void SetComponentData<T>(Entity entity, T componentData) where T : struct, IComponentData Parameters Type Name Description Entity entity T componentData Type Parameters Name Description T | Improve this Doc SetSharedComponentData<T>(Entity, T) Declaration public void SetSharedComponentData<T>(Entity entity, T componentData) where T : struct, ISharedComponentData Parameters Type Name Description Entity entity T componentData Type Parameters Name Description T | Improve this Doc SwapComponents(ArchetypeChunk, Int32, ArchetypeChunk, Int32) Declaration public void SwapComponents(ArchetypeChunk leftChunk, int leftIndex, ArchetypeChunk rightChunk, int rightIndex) Parameters Type Name Description ArchetypeChunk leftChunk Int32 leftIndex ArchetypeChunk rightChunk Int32 rightIndex"
  },
  "api/Unity.Entities.ExcludeComponentAttribute.html": {
    "href": "api/Unity.Entities.ExcludeComponentAttribute.html",
    "title": "Class ExcludeComponentAttribute | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class ExcludeComponentAttribute Inheritance Object Attribute ExcludeComponentAttribute Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [AttributeUsage(AttributeTargets.Struct)] public class ExcludeComponentAttribute : Attribute, _Attribute Constructors | Improve this Doc ExcludeComponentAttribute(Type[]) Declaration public ExcludeComponentAttribute(params Type[] excludeComponents) Parameters Type Name Description Type [] excludeComponents Fields | Improve this Doc ExcludeComponents Declaration public Type[] ExcludeComponents Field Value Type Description Type []"
  },
  "api/Unity.Entities.EntityQueryDescValidationException.html": {
    "href": "api/Unity.Entities.EntityQueryDescValidationException.html",
    "title": "Class EntityQueryDescValidationException | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class EntityQueryDescValidationException Inheritance Object Exception EntityQueryDescValidationException Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class EntityQueryDescValidationException : Exception, ISerializable, _Exception Constructors | Improve this Doc EntityQueryDescValidationException(String) Declaration public EntityQueryDescValidationException(string message) Parameters Type Name Description String message"
  },
  "api/Unity.Entities.EntityQueryDesc.html": {
    "href": "api/Unity.Entities.EntityQueryDesc.html",
    "title": "Class EntityQueryDesc | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class EntityQueryDesc Describes a query used to find archetypes with specific components. Inheritance Object EntityQueryDesc Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class EntityQueryDesc Remarks A query description combines components in the All, Any, and None sets according to the following rules: All - Includes archetypes that have every component in this set Any - Includes archetypes that have at least one component in this set None - Excludes archetypes that have any component in this set For example, given entities with the following components: Player has components: Position, Rotation, Player Enemy1 has components: Position, Rotation, Melee Enemy2 has components: Position, Rotation, Ranger The query description below gives you all of the archetypes that: have any of [Melee or Ranger], AND have none of [Player], AND have all of [Position and Rotation] new EntityQueryDesc { Any = new ComponentType[] {typeof(Melee), typeof(Ranger)}, None = new ComponentType[] {typeof(Player)}, All = new ComponentType[] {typeof(Position), typeof(Rotation)} } In other words, the query description selects the Enemy1 and Enemy2 entities, but not the Player entity. Use an EntityQueryDesc object to create an EntityQuery object. In a system, call GetEntityQuery(EntityQueryDesc[]) ; otherwise, call CreateEntityQuery(EntityQueryDesc[]) . Fields | Improve this Doc All Include archetypes that contain all of the components in the All list. Declaration public ComponentType[] All Field Value Type Description ComponentType [] | Improve this Doc Any Include archetypes that contain at least one (but possibly more) of the components in the Any list. Declaration public ComponentType[] Any Field Value Type Description ComponentType [] | Improve this Doc None Exclude archetypes that contain any of the components in the None list. Declaration public ComponentType[] None Field Value Type Description ComponentType [] | Improve this Doc Options Specialized options for the query. Declaration public EntityQueryOptions Options Field Value Type Description EntityQueryOptions Remarks You should not need to set these options for most queries. Options is a bit mask; use the bitwise OR operator to combine multiple options. Methods | Improve this Doc Validate() Declaration [Conditional(\"ENABLE_UNITY_COLLECTIONS_CHECKS\")] public void Validate()"
  },
  "api/Unity.Entities.EntityQueryBuilder.html": {
    "href": "api/Unity.Entities.EntityQueryBuilder.html",
    "title": "Struct EntityQueryBuilder | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct EntityQueryBuilder Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct EntityQueryBuilder Methods | Improve this Doc Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object) | Improve this Doc ForEach(EntityQueryBuilder.F_E) Declaration public void ForEach(EntityQueryBuilder.F_E action) Parameters Type Name Description Unity.Entities.EntityQueryBuilder.F_E action | Improve this Doc GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() | Improve this Doc ToEntityQuery() Declaration public EntityQuery ToEntityQuery() Returns Type Description EntityQuery | Improve this Doc ToEntityQueryDesc() Declaration public EntityQueryDesc ToEntityQueryDesc() Returns Type Description EntityQueryDesc | Improve this Doc With(EntityQuery) Declaration public EntityQueryBuilder With(EntityQuery entityQuery) Parameters Type Name Description EntityQuery entityQuery Returns Type Description EntityQueryBuilder | Improve this Doc With(EntityQueryOptions) Declaration public EntityQueryBuilder With(EntityQueryOptions options) Parameters Type Name Description EntityQueryOptions options Returns Type Description EntityQueryBuilder | Improve this Doc WithAll(ComponentType) Declaration public EntityQueryBuilder WithAll(ComponentType type0) Parameters Type Name Description ComponentType type0 Returns Type Description EntityQueryBuilder | Improve this Doc WithAll(ComponentType, ComponentType) Declaration public EntityQueryBuilder WithAll(ComponentType type0, ComponentType type1) Parameters Type Name Description ComponentType type0 ComponentType type1 Returns Type Description EntityQueryBuilder | Improve this Doc WithAll(ComponentType, ComponentType, ComponentType) Declaration public EntityQueryBuilder WithAll(ComponentType type0, ComponentType type1, ComponentType type2) Parameters Type Name Description ComponentType type0 ComponentType type1 ComponentType type2 Returns Type Description EntityQueryBuilder | Improve this Doc WithAll(ComponentType, ComponentType, ComponentType, ComponentType) Declaration public EntityQueryBuilder WithAll(ComponentType type0, ComponentType type1, ComponentType type2, ComponentType type3) Parameters Type Name Description ComponentType type0 ComponentType type1 ComponentType type2 ComponentType type3 Returns Type Description EntityQueryBuilder | Improve this Doc WithAll(ComponentType, ComponentType, ComponentType, ComponentType, ComponentType) Declaration public EntityQueryBuilder WithAll(ComponentType type0, ComponentType type1, ComponentType type2, ComponentType type3, ComponentType type4) Parameters Type Name Description ComponentType type0 ComponentType type1 ComponentType type2 ComponentType type3 ComponentType type4 Returns Type Description EntityQueryBuilder | Improve this Doc WithAll<T0>() Declaration public EntityQueryBuilder WithAll<T0>() Returns Type Description EntityQueryBuilder Type Parameters Name Description T0 | Improve this Doc WithAll<T0, T1>() Declaration public EntityQueryBuilder WithAll<T0, T1>() Returns Type Description EntityQueryBuilder Type Parameters Name Description T0 T1 | Improve this Doc WithAll<T0, T1, T2>() Declaration public EntityQueryBuilder WithAll<T0, T1, T2>() Returns Type Description EntityQueryBuilder Type Parameters Name Description T0 T1 T2 | Improve this Doc WithAll<T0, T1, T2, T3>() Declaration public EntityQueryBuilder WithAll<T0, T1, T2, T3>() Returns Type Description EntityQueryBuilder Type Parameters Name Description T0 T1 T2 T3 | Improve this Doc WithAll<T0, T1, T2, T3, T4>() Declaration public EntityQueryBuilder WithAll<T0, T1, T2, T3, T4>() Returns Type Description EntityQueryBuilder Type Parameters Name Description T0 T1 T2 T3 T4 | Improve this Doc WithAllReadOnly(ComponentType) Declaration public EntityQueryBuilder WithAllReadOnly(ComponentType type0) Parameters Type Name Description ComponentType type0 Returns Type Description EntityQueryBuilder | Improve this Doc WithAllReadOnly(ComponentType, ComponentType) Declaration public EntityQueryBuilder WithAllReadOnly(ComponentType type0, ComponentType type1) Parameters Type Name Description ComponentType type0 ComponentType type1 Returns Type Description EntityQueryBuilder | Improve this Doc WithAllReadOnly(ComponentType, ComponentType, ComponentType) Declaration public EntityQueryBuilder WithAllReadOnly(ComponentType type0, ComponentType type1, ComponentType type2) Parameters Type Name Description ComponentType type0 ComponentType type1 ComponentType type2 Returns Type Description EntityQueryBuilder | Improve this Doc WithAllReadOnly(ComponentType, ComponentType, ComponentType, ComponentType) Declaration public EntityQueryBuilder WithAllReadOnly(ComponentType type0, ComponentType type1, ComponentType type2, ComponentType type3) Parameters Type Name Description ComponentType type0 ComponentType type1 ComponentType type2 ComponentType type3 Returns Type Description EntityQueryBuilder | Improve this Doc WithAllReadOnly(ComponentType, ComponentType, ComponentType, ComponentType, ComponentType) Declaration public EntityQueryBuilder WithAllReadOnly(ComponentType type0, ComponentType type1, ComponentType type2, ComponentType type3, ComponentType type4) Parameters Type Name Description ComponentType type0 ComponentType type1 ComponentType type2 ComponentType type3 ComponentType type4 Returns Type Description EntityQueryBuilder | Improve this Doc WithAllReadOnly<T0>() Declaration public EntityQueryBuilder WithAllReadOnly<T0>() Returns Type Description EntityQueryBuilder Type Parameters Name Description T0 | Improve this Doc WithAllReadOnly<T0, T1>() Declaration public EntityQueryBuilder WithAllReadOnly<T0, T1>() Returns Type Description EntityQueryBuilder Type Parameters Name Description T0 T1 | Improve this Doc WithAllReadOnly<T0, T1, T2>() Declaration public EntityQueryBuilder WithAllReadOnly<T0, T1, T2>() Returns Type Description EntityQueryBuilder Type Parameters Name Description T0 T1 T2 | Improve this Doc WithAllReadOnly<T0, T1, T2, T3>() Declaration public EntityQueryBuilder WithAllReadOnly<T0, T1, T2, T3>() Returns Type Description EntityQueryBuilder Type Parameters Name Description T0 T1 T2 T3 | Improve this Doc WithAllReadOnly<T0, T1, T2, T3, T4>() Declaration public EntityQueryBuilder WithAllReadOnly<T0, T1, T2, T3, T4>() Returns Type Description EntityQueryBuilder Type Parameters Name Description T0 T1 T2 T3 T4 | Improve this Doc WithAny(ComponentType) Declaration public EntityQueryBuilder WithAny(ComponentType type0) Parameters Type Name Description ComponentType type0 Returns Type Description EntityQueryBuilder | Improve this Doc WithAny(ComponentType, ComponentType) Declaration public EntityQueryBuilder WithAny(ComponentType type0, ComponentType type1) Parameters Type Name Description ComponentType type0 ComponentType type1 Returns Type Description EntityQueryBuilder | Improve this Doc WithAny(ComponentType, ComponentType, ComponentType) Declaration public EntityQueryBuilder WithAny(ComponentType type0, ComponentType type1, ComponentType type2) Parameters Type Name Description ComponentType type0 ComponentType type1 ComponentType type2 Returns Type Description EntityQueryBuilder | Improve this Doc WithAny(ComponentType, ComponentType, ComponentType, ComponentType) Declaration public EntityQueryBuilder WithAny(ComponentType type0, ComponentType type1, ComponentType type2, ComponentType type3) Parameters Type Name Description ComponentType type0 ComponentType type1 ComponentType type2 ComponentType type3 Returns Type Description EntityQueryBuilder | Improve this Doc WithAny(ComponentType, ComponentType, ComponentType, ComponentType, ComponentType) Declaration public EntityQueryBuilder WithAny(ComponentType type0, ComponentType type1, ComponentType type2, ComponentType type3, ComponentType type4) Parameters Type Name Description ComponentType type0 ComponentType type1 ComponentType type2 ComponentType type3 ComponentType type4 Returns Type Description EntityQueryBuilder | Improve this Doc WithAny<T0>() Declaration public EntityQueryBuilder WithAny<T0>() Returns Type Description EntityQueryBuilder Type Parameters Name Description T0 | Improve this Doc WithAny<T0, T1>() Declaration public EntityQueryBuilder WithAny<T0, T1>() Returns Type Description EntityQueryBuilder Type Parameters Name Description T0 T1 | Improve this Doc WithAny<T0, T1, T2>() Declaration public EntityQueryBuilder WithAny<T0, T1, T2>() Returns Type Description EntityQueryBuilder Type Parameters Name Description T0 T1 T2 | Improve this Doc WithAny<T0, T1, T2, T3>() Declaration public EntityQueryBuilder WithAny<T0, T1, T2, T3>() Returns Type Description EntityQueryBuilder Type Parameters Name Description T0 T1 T2 T3 | Improve this Doc WithAny<T0, T1, T2, T3, T4>() Declaration public EntityQueryBuilder WithAny<T0, T1, T2, T3, T4>() Returns Type Description EntityQueryBuilder Type Parameters Name Description T0 T1 T2 T3 T4 | Improve this Doc WithAnyReadOnly(ComponentType) Declaration public EntityQueryBuilder WithAnyReadOnly(ComponentType type0) Parameters Type Name Description ComponentType type0 Returns Type Description EntityQueryBuilder | Improve this Doc WithAnyReadOnly(ComponentType, ComponentType) Declaration public EntityQueryBuilder WithAnyReadOnly(ComponentType type0, ComponentType type1) Parameters Type Name Description ComponentType type0 ComponentType type1 Returns Type Description EntityQueryBuilder | Improve this Doc WithAnyReadOnly(ComponentType, ComponentType, ComponentType) Declaration public EntityQueryBuilder WithAnyReadOnly(ComponentType type0, ComponentType type1, ComponentType type2) Parameters Type Name Description ComponentType type0 ComponentType type1 ComponentType type2 Returns Type Description EntityQueryBuilder | Improve this Doc WithAnyReadOnly(ComponentType, ComponentType, ComponentType, ComponentType) Declaration public EntityQueryBuilder WithAnyReadOnly(ComponentType type0, ComponentType type1, ComponentType type2, ComponentType type3) Parameters Type Name Description ComponentType type0 ComponentType type1 ComponentType type2 ComponentType type3 Returns Type Description EntityQueryBuilder | Improve this Doc WithAnyReadOnly(ComponentType, ComponentType, ComponentType, ComponentType, ComponentType) Declaration public EntityQueryBuilder WithAnyReadOnly(ComponentType type0, ComponentType type1, ComponentType type2, ComponentType type3, ComponentType type4) Parameters Type Name Description ComponentType type0 ComponentType type1 ComponentType type2 ComponentType type3 ComponentType type4 Returns Type Description EntityQueryBuilder | Improve this Doc WithAnyReadOnly<T0>() Declaration public EntityQueryBuilder WithAnyReadOnly<T0>() Returns Type Description EntityQueryBuilder Type Parameters Name Description T0 | Improve this Doc WithAnyReadOnly<T0, T1>() Declaration public EntityQueryBuilder WithAnyReadOnly<T0, T1>() Returns Type Description EntityQueryBuilder Type Parameters Name Description T0 T1 | Improve this Doc WithAnyReadOnly<T0, T1, T2>() Declaration public EntityQueryBuilder WithAnyReadOnly<T0, T1, T2>() Returns Type Description EntityQueryBuilder Type Parameters Name Description T0 T1 T2 | Improve this Doc WithAnyReadOnly<T0, T1, T2, T3>() Declaration public EntityQueryBuilder WithAnyReadOnly<T0, T1, T2, T3>() Returns Type Description EntityQueryBuilder Type Parameters Name Description T0 T1 T2 T3 | Improve this Doc WithAnyReadOnly<T0, T1, T2, T3, T4>() Declaration public EntityQueryBuilder WithAnyReadOnly<T0, T1, T2, T3, T4>() Returns Type Description EntityQueryBuilder Type Parameters Name Description T0 T1 T2 T3 T4 | Improve this Doc WithIncludeAll() This sets the options IncludeDisabled and EntityQueryOptions.IncludePrefab so that Entities with Disabled or Prefab components will not be hidden from the query. Declaration public EntityQueryBuilder WithIncludeAll() Returns Type Description EntityQueryBuilder | Improve this Doc WithNone(ComponentType) Declaration public EntityQueryBuilder WithNone(ComponentType type0) Parameters Type Name Description ComponentType type0 Returns Type Description EntityQueryBuilder | Improve this Doc WithNone(ComponentType, ComponentType) Declaration public EntityQueryBuilder WithNone(ComponentType type0, ComponentType type1) Parameters Type Name Description ComponentType type0 ComponentType type1 Returns Type Description EntityQueryBuilder | Improve this Doc WithNone(ComponentType, ComponentType, ComponentType) Declaration public EntityQueryBuilder WithNone(ComponentType type0, ComponentType type1, ComponentType type2) Parameters Type Name Description ComponentType type0 ComponentType type1 ComponentType type2 Returns Type Description EntityQueryBuilder | Improve this Doc WithNone(ComponentType, ComponentType, ComponentType, ComponentType) Declaration public EntityQueryBuilder WithNone(ComponentType type0, ComponentType type1, ComponentType type2, ComponentType type3) Parameters Type Name Description ComponentType type0 ComponentType type1 ComponentType type2 ComponentType type3 Returns Type Description EntityQueryBuilder | Improve this Doc WithNone(ComponentType, ComponentType, ComponentType, ComponentType, ComponentType) Declaration public EntityQueryBuilder WithNone(ComponentType type0, ComponentType type1, ComponentType type2, ComponentType type3, ComponentType type4) Parameters Type Name Description ComponentType type0 ComponentType type1 ComponentType type2 ComponentType type3 ComponentType type4 Returns Type Description EntityQueryBuilder | Improve this Doc WithNone<T0>() Declaration public EntityQueryBuilder WithNone<T0>() Returns Type Description EntityQueryBuilder Type Parameters Name Description T0 | Improve this Doc WithNone<T0, T1>() Declaration public EntityQueryBuilder WithNone<T0, T1>() Returns Type Description EntityQueryBuilder Type Parameters Name Description T0 T1 | Improve this Doc WithNone<T0, T1, T2>() Declaration public EntityQueryBuilder WithNone<T0, T1, T2>() Returns Type Description EntityQueryBuilder Type Parameters Name Description T0 T1 T2 | Improve this Doc WithNone<T0, T1, T2, T3>() Declaration public EntityQueryBuilder WithNone<T0, T1, T2, T3>() Returns Type Description EntityQueryBuilder Type Parameters Name Description T0 T1 T2 T3 | Improve this Doc WithNone<T0, T1, T2, T3, T4>() Declaration public EntityQueryBuilder WithNone<T0, T1, T2, T3, T4>() Returns Type Description EntityQueryBuilder Type Parameters Name Description T0 T1 T2 T3 T4"
  },
  "api/Unity.Entities.BlobString.html": {
    "href": "api/Unity.Entities.BlobString.html",
    "title": "Struct BlobString | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct BlobString An immutable, variable-length string stored in a blob asset. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct BlobString Properties | Improve this Doc Length The length of the string in characters. Declaration public int Length { get; } Property Value Type Description Int32 Methods | Improve this Doc ToString() Converts this BlobString to a standard C# String . Declaration public string ToString() Returns Type Description String The C# string. See Also BlobBuilder"
  },
  "api/Unity.Entities.BlobAssetStore.html": {
    "href": "api/Unity.Entities.BlobAssetStore.html",
    "title": "Class BlobAssetStore | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class BlobAssetStore Purpose of this class is to provide a consistent cache of BlobAsset object in order to avoid rebuilding them when it is not necessary Inheritance Object BlobAssetStore Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class BlobAssetStore : IDisposable Remarks Right now the lifetime scope of this cache is bound to the LiveLinkDiffGenerator's one and it is scoped by SubScene. In other words the cache is created when we enter edit mode for a given SubScene and it is released when we close edit mode. And instance of this cache is exposed in GameObjectConversionSettings to allow users to query and avoid rebuilding assets. During conversion process the user must rely on the BlobAssetComputationContext<TS, TB> to associate the BlobAsset with their corresponding Authoring UnityObject and to determine which ones are to compute. Thread-safety: nothing is thread-safe, we assume this class is consumed through the main-thread only. Calling Dispose on an instance will reset the content and dispose all BlobAssetReference object stored. Constructors | Improve this Doc BlobAssetStore() Declaration public BlobAssetStore() Methods | Improve this Doc Contains<T>(Hash128) Check if the Store contains a BlobAsset of a given type and hash Declaration public bool Contains<T>(Hash128 key) Parameters Type Name Description Hash128 key The hash associated with the BlobAsset Returns Type Description Boolean true if the Store contains the BlobAsset or false if it doesn't Type Parameters Name Description T The type of the BlobAsset | Improve this Doc Dispose() Calling dispose will reset the cache content and release all the BlobAssetReference that were stored Declaration public void Dispose() | Improve this Doc Remove<T>(Hash128, Boolean) Remove a BlobAssetReference from the store Declaration public bool Remove<T>(Hash128 key, bool releaseBlobAsset) Parameters Type Name Description Hash128 key The key associated with the BlobAssetReference Boolean releaseBlobAsset If true the BlobAsset data will be released Returns Type Description Boolean True if the BLobAsset was removed from the store, false if it wasn't found Type Parameters Name Description T The type of the BlobAsset | Improve this Doc ResetCache(Boolean) Call this method to clear the whole content of the Cache Declaration public void ResetCache(bool disposeAllBlobAssetReference) Parameters Type Name Description Boolean disposeAllBlobAssetReference If true all BlobAssetReference present in the cache will be dispose. If false they will remain present in memory | Improve this Doc TryAdd<T>(Hash128, BlobAssetReference<T>) Get a BlobAssetReference from its key Declaration public bool TryAdd<T>(Hash128 key, BlobAssetReference<T> result) where T : struct Parameters Type Name Description Hash128 key The key associated with the BlobAssetReference BlobAssetReference <T> result The BlobAssetReference if found or default Returns Type Description Boolean true if the BlobAssetReference was found, false if not found Type Parameters Name Description T The type of BlobAsset | Improve this Doc TryGet<T>(Hash128, out BlobAssetReference<T>) Try to access to a BlobAssetReference from its key Declaration public bool TryGet<T>(Hash128 key, out BlobAssetReference<T> blobAssetReference) where T : struct Parameters Type Name Description Hash128 key The key associated with the BlobAssetReference when it was added to the cache BlobAssetReference <T> blobAssetReference The corresponding BlobAssetReference or default if none was found Returns Type Description Boolean Type Parameters Name Description T The type of BlobAsset"
  },
  "api/Unity.Entities.BlobAssetComputationContext-2.html": {
    "href": "api/Unity.Entities.BlobAssetComputationContext-2.html",
    "title": "Struct BlobAssetComputationContext<TS, TB> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct BlobAssetComputationContext<TS, TB> The BlobAssetComputationContext must be used during Authoring to ECS conversion process to detect which BlobAsset should be computed and to declare their association with a UnityObject Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct BlobAssetComputationContext<TS, TB> : IDisposable where TS : struct where TB : struct Type Parameters Name Description TS The type of the setting struct to be used to generate the BlobAsset TB The type of the BlobAsset to generate Remarks The context must typically be used in a three stages conversion process, for given type of BlobAsset to process. Multiple context can be used if multiple BlobAsset types are generated. Stages: 1) Each Authoring component to convert are evaluated> The user calls AssociateBlobAssetWithUnityObject(Hash128, UnityEngine.Object) to declare the association between the UnityObject owning the Authoring component and the BlobAsset being processed. Then NeedToComputeBlobAsset(Hash128) is called to determine if the BlobAsset needs to be computed or if it's already in the store (or registered for computation). The user creates the setting object that contains the necessary information to create the BlobAsset later on and calls AddBlobAssetToCompute(Hash128, TS) . 2) The user creates a job to compute all BlobAsset and calls GetSettings(Allocator) to feed the job with the settings of each BlobAsset to compute. During the job execution, the BlobAsset will be created and typically stored in a result array. After the job is done, the user must call AddComputedBlobAsset(Hash128, BlobAssetReference<TB>) to add the newly created BlobAsset to the context (and the Store) 3) The user create ECS Components and attaches the BlobAsset by calling GetBlobAsset(Hash128, out BlobAssetReference<TB>) . When the context will be disposed (typically after the conversion process is done), the store will be updated with the new associations between the BlobAsset and the UnityObject(s) that use them. If a BlobAsset is no longer used by any UnityObject, it will be disposed. Thread-safety: main thread only. Constructors | Improve this Doc BlobAssetComputationContext(BlobAssetStore, Int32, Allocator) Declaration public BlobAssetComputationContext(BlobAssetStore blobAssetStore, int initialCapacity, Allocator allocator) Parameters Type Name Description BlobAssetStore blobAssetStore Int32 initialCapacity Allocator allocator Properties | Improve this Doc IsCreated Declaration public bool IsCreated { get; } Property Value Type Description Boolean Methods | Improve this Doc AddBlobAssetToCompute(Hash128, TS) Call this method to record a setting object that will be used to compute a BlobAsset Declaration public void AddBlobAssetToCompute(Hash128 hash, TS settings) Parameters Type Name Description Hash128 hash The hash associated with the BlobAsset TS settings The setting object to store | Improve this Doc AddComputedBlobAsset(Hash128, BlobAssetReference<TB>) Add a newly created BlobAsset in the context and its Store. Declaration public void AddComputedBlobAsset(Hash128 hash, BlobAssetReference<TB> blob) Parameters Type Name Description Hash128 hash The hash associated to the BlobAsset BlobAssetReference <TB> blob The BlobAsset to add | Improve this Doc AssociateBlobAssetWithUnityObject(Hash128, UnityEngine.Object) Declare the BlobAsset being associated with the given UnityObject Declaration public void AssociateBlobAssetWithUnityObject(Hash128 hash, UnityEngine.Object unityObject) Parameters Type Name Description Hash128 hash The hash associated to the BlobAsset UnityEngine.Object unityObject The UnityObject associated with the BlobAsset Remarks One of the role of the BlobAssetComputationContext<TS, TB> is to track the new association between Authoring UnityObject and BlobAsset and report them to the BlobAssetStore to automatically track the life-time of the BlobAssetReference<T> and release the instances that are no longer used. | Improve this Doc Dispose() Dispose the Computation context, update the BlobAssetStore with the new BlobAsset/UnityObject associations Declaration public void Dispose() Remarks This method will calls UpdateBlobStore() to ensure the store is up to date. | Improve this Doc GetBlobAsset(Hash128, out BlobAssetReference<TB>) Get the blob asset for the corresponding hash Declaration public bool GetBlobAsset(Hash128 hash, out BlobAssetReference<TB> blob) Parameters Type Name Description Hash128 hash The hash associated with the BlobAsset BlobAssetReference <TB> blob The BlobAsset corresponding to the given Hash Returns Type Description Boolean true if the blob asset was found, false otherwise | Improve this Doc GetSettings(Allocator) Declaration public NativeArray<TS> GetSettings(Allocator allocator) Parameters Type Name Description Allocator allocator Returns Type Description NativeArray <TS> | Improve this Doc NeedToComputeBlobAsset(Hash128) During the conversion process, the user must call this method for each BlobAsset being processed, to determine if it requires to be computed Declaration public bool NeedToComputeBlobAsset(Hash128 hash) Parameters Type Name Description Hash128 hash The hash associated to the BlobAsset Returns Type Description Boolean true if the BlobAsset must be computed, false if it's already in the store or the computing queue | Improve this Doc UpdateBlobStore() Update the store with the recorded BlobAsset/UnityObject associations. Declaration public void UpdateBlobStore() Remarks User don't have to call this method because Dispose() will do it. This method can be called multiple times, on the first one will matter."
  },
  "api/Unity.Transforms.Parent.html": {
    "href": "api/Unity.Transforms.Parent.html",
    "title": "Struct Parent | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct Parent Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] [WriteGroup(typeof(LocalToWorld))] public struct Parent : IComponentData Fields | Improve this Doc Value Declaration public Entity Value Field Value Type Description Entity"
  },
  "api/Unity.Transforms.NonUniformScaleProxy.html": {
    "href": "api/Unity.Transforms.NonUniformScaleProxy.html",
    "title": "Class NonUniformScaleProxy | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class NonUniformScaleProxy Inheritance Object ComponentDataProxyBase ComponentDataProxy < NonUniformScale > NonUniformScaleProxy Inherited Members ComponentDataProxy<NonUniformScale>.ValidateSerializedData(NonUniformScale) ComponentDataProxy<NonUniformScale>.Value ComponentDataProxyBase.OnEnable() ComponentDataProxyBase.OnDisable() Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class NonUniformScaleProxy : ComponentDataProxy<NonUniformScale>, ISerializationCallbackReceiver"
  },
  "api/Unity.Transforms.NonUniformScale.html": {
    "href": "api/Unity.Transforms.NonUniformScale.html",
    "title": "Struct NonUniformScale | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct NonUniformScale Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] [WriteGroup(typeof(LocalToWorld))] [WriteGroup(typeof(LocalToParent))] [WriteGroup(typeof(CompositeScale))] [WriteGroup(typeof(ParentScaleInverse))] public struct NonUniformScale : IComponentData Fields | Improve this Doc Value Declaration public float3 Value Field Value Type Description float3"
  },
  "api/Unity.Transforms.LocalToWorldProxy.html": {
    "href": "api/Unity.Transforms.LocalToWorldProxy.html",
    "title": "Class LocalToWorldProxy | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class LocalToWorldProxy Inheritance Object ComponentDataProxyBase ComponentDataProxy < LocalToWorld > LocalToWorldProxy Inherited Members ComponentDataProxy<LocalToWorld>.ValidateSerializedData(LocalToWorld) ComponentDataProxy<LocalToWorld>.Value ComponentDataProxyBase.OnEnable() ComponentDataProxyBase.OnDisable() Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class LocalToWorldProxy : ComponentDataProxy<LocalToWorld>, ISerializationCallbackReceiver"
  },
  "api/Unity.Scenes.SceneSystem.html": {
    "href": "api/Unity.Scenes.SceneSystem.html",
    "title": "Class SceneSystem | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class SceneSystem Inheritance Object ComponentSystemBase ComponentSystem SceneSystem Inherited Members ComponentSystem.PostUpdateCommands ComponentSystem.InitEntityQueryCache(Int32) ComponentSystem.Entities ComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnDestroyManager() ComponentSystemBase.OnCreateManager() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetArchetypeChunkComponentType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkComponentTypeDynamic(ComponentType) ComponentSystemBase.GetArchetypeChunkBufferType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkSharedComponentType<T>() ComponentSystemBase.GetArchetypeChunkEntityType() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Scenes <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [UpdateInGroup(typeof(SceneSystemGroup))] public class SceneSystem : ComponentSystem Fields | Improve this Doc k_BootstrapFileName Declaration public const string k_BootstrapFileName = \"livelink-bootstrap.txt\" Field Value Type Description String | Improve this Doc k_SceneInfoFileName Declaration public const string k_SceneInfoFileName = \"catalog.bin\" Field Value Type Description String | Improve this Doc sceneLoadRequestArchetype Declaration protected EntityArchetype sceneLoadRequestArchetype Field Value Type Description EntityArchetype | Improve this Doc sceneLoadRequestQuery Declaration protected EntityQuery sceneLoadRequestQuery Field Value Type Description EntityQuery Properties | Improve this Doc BuildConfigurationGUID Declaration public Hash128 BuildConfigurationGUID { get; set; } Property Value Type Description Hash128 Methods | Improve this Doc GetSceneEntity(Hash128) Find the scene given a guid. For GameObject scenes, this will only return the first matching scene. Declaration public Entity GetSceneEntity(Hash128 sceneGUID) Parameters Type Name Description Hash128 sceneGUID The guid of the scene. Returns Type Description Entity The entity for the scene. | Improve this Doc GetSceneGUID(String) Get the guid for a scene path or name. This is a slow method - it is best to use the guid directly. Declaration public Hash128 GetSceneGUID(string scenePath) Parameters Type Name Description String scenePath The scene path or name. Returns Type Description Hash128 True if the scene guid exists. | Improve this Doc IsSceneLoaded(Entity) Check if a scene or subscene is loaded. Declaration public bool IsSceneLoaded(Entity entity) Parameters Type Name Description Entity entity The entity with the loading component data. This is the entity returned by LoadSceneAsync. Returns Type Description Boolean True if the scene is loaded. | Improve this Doc LoadSceneAsync(Hash128, SceneSystem.LoadParameters) Load a scene by its asset GUID. Declaration public Entity LoadSceneAsync(Hash128 sceneGUID, SceneSystem.LoadParameters parameters = default(SceneSystem.LoadParameters)) Parameters Type Name Description Hash128 sceneGUID The guid of the scene. SceneSystem.LoadParameters parameters The load parameters for the scene. Returns Type Description Entity An entity representing the loading state of the scene. | Improve this Doc OnCreate() Declaration protected override void OnCreate() Overrides ComponentSystemBase.OnCreate() | Improve this Doc OnUpdate() Declaration protected override void OnUpdate() Overrides ComponentSystem.OnUpdate() | Improve this Doc UnloadScene(Entity, SceneSystem.UnloadParameters) Unload the scene. Declaration public void UnloadScene(Entity sceneEntity, SceneSystem.UnloadParameters unloadParams = SceneSystem.UnloadParameters.Default) Parameters Type Name Description Entity sceneEntity The entity for the scene. SceneSystem.UnloadParameters unloadParams Parameters controlling the unload process. These are ignored for GameObject scenes. | Improve this Doc UnloadScene(Hash128, SceneSystem.UnloadParameters) Unload a SubScene by GUID. If this is called on a GameObject scene, it will only unload the first matching scene. Declaration public void UnloadScene(Hash128 sceneGUID, SceneSystem.UnloadParameters unloadParams = SceneSystem.UnloadParameters.Default) Parameters Type Name Description Hash128 sceneGUID The guid of the scene. SceneSystem.UnloadParameters unloadParams Parameters controlling the unload process. These are ignored for GameObject scenes. Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Scenes.SceneSystem.UnloadParameters.html": {
    "href": "api/Unity.Scenes.SceneSystem.UnloadParameters.html",
    "title": "Enum SceneSystem.UnloadParameters | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Enum SceneSystem.UnloadParameters Flags controlling the unload process for SubScenes. Namespace : Unity.Scenes <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Flags] public enum UnloadParameters Fields Name Description Default DestroySceneProxyEntity DestroySectionProxyEntities DontRemoveRequestSceneLoaded"
  },
  "api/Unity.Scenes.SceneSystem.LoadParameters.html": {
    "href": "api/Unity.Scenes.SceneSystem.LoadParameters.html",
    "title": "Struct SceneSystem.LoadParameters | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct SceneSystem.LoadParameters Parameters for loading scenes. Namespace : Unity.Scenes <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct LoadParameters Fields | Improve this Doc Flags Declaration public SceneLoadFlags Flags Field Value Type Description SceneLoadFlags | Improve this Doc Priority Declaration public int Priority Field Value Type Description Int32 Properties | Improve this Doc AutoLoad Declaration public bool AutoLoad { get; set; } Property Value Type Description Boolean"
  },
  "api/Unity.Scenes.SceneBundleHandle.html": {
    "href": "api/Unity.Scenes.SceneBundleHandle.html",
    "title": "Class SceneBundleHandle | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class SceneBundleHandle Inheritance Object SceneBundleHandle Namespace : Unity.Scenes <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class SceneBundleHandle"
  },
  "api/Unity.Scenes.LiveLinkMode.html": {
    "href": "api/Unity.Scenes.LiveLinkMode.html",
    "title": "Enum LiveLinkMode | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Enum LiveLinkMode Namespace : Unity.Scenes <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public enum LiveLinkMode Fields Name Description Disabled LiveConvertGameView LiveConvertSceneView"
  },
  "api/Unity.Scenes.Editor.html": {
    "href": "api/Unity.Scenes.Editor.html",
    "title": "Namespace Unity.Scenes.Editor | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Namespace Unity.Scenes.Editor Classes EditorEntityScenes LiveLinkBuildImporter SceneInspector Inspector for scene assets. Structs LiveLinkBuildImporter.BuildMetaData SceneImporterData Contains scene data that is stored in the userData field of the importer."
  },
  "api/Unity.Scenes.Editor.SceneInspector.html": {
    "href": "api/Unity.Scenes.Editor.SceneInspector.html",
    "title": "Class SceneInspector | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class SceneInspector Inspector for scene assets. Inheritance Object SceneInspector Namespace : Unity.Scenes.Editor <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class SceneInspector : Editor Methods | Improve this Doc OnInspectorGUI() Draw the inspector GUI. Declaration public override void OnInspectorGUI()"
  },
  "api/Unity.Scenes.Editor.SceneImporterData.html": {
    "href": "api/Unity.Scenes.Editor.SceneImporterData.html",
    "title": "Struct SceneImporterData | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct SceneImporterData Contains scene data that is stored in the userData field of the importer. Namespace : Unity.Scenes.Editor <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct SceneImporterData Fields | Improve this Doc DisableLiveLink Exclude this scene from the LiveLink system. If excluded, the scene will be built into the player data if it is in the BuildSettings scenes list. Declaration public bool DisableLiveLink Field Value Type Description Boolean Methods | Improve this Doc CanLiveLinkScene(String) Method to check if a scene can be used by the LiveLink system. Declaration public static bool CanLiveLinkScene(string path) Parameters Type Name Description String path The scene path. Returns Type Description Boolean If true, the scene can be used. | Improve this Doc GetAtPath(String) Get the importer data for a scene given its path. Declaration public static SceneImporterData GetAtPath(string path) Parameters Type Name Description String path The scene path. Returns Type Description SceneImporterData The data for the scene. | Improve this Doc SetAtPath(String, SceneImporterData) Set the scene data for the scene at the given path. Declaration public static void SetAtPath(string path, SceneImporterData data) Parameters Type Name Description String path The scene path. SceneImporterData data The scene data."
  },
  "api/Unity.Entities.World.html": {
    "href": "api/Unity.Entities.World.html",
    "title": "Class World | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class World Inheritance Object World Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class World : IDisposable Constructors | Improve this Doc World(String) Declaration public World(string name) Parameters Type Name Description String name Fields | Improve this Doc Flags Declaration public readonly WorldFlags Flags Field Value Type Description WorldFlags | Improve this Doc m_CurrentTime Declaration protected TimeData m_CurrentTime Field Value Type Description TimeData | Improve this Doc m_TimeSingletonQuery Declaration protected EntityQuery m_TimeSingletonQuery Field Value Type Description EntityQuery Properties | Improve this Doc All Declaration public static World.NoAllocReadOnlyCollection<World> All { get; } Property Value Type Description World.NoAllocReadOnlyCollection < World > | Improve this Doc DefaultGameObjectInjectionWorld Declaration public static World DefaultGameObjectInjectionWorld { get; set; } Property Value Type Description World | Improve this Doc EntityManager Declaration public EntityManager EntityManager { get; } Property Value Type Description EntityManager | Improve this Doc IsCreated Declaration public bool IsCreated { get; } Property Value Type Description Boolean | Improve this Doc Name Declaration public string Name { get; } Property Value Type Description String | Improve this Doc QuitUpdate Declaration public bool QuitUpdate { get; set; } Property Value Type Description Boolean | Improve this Doc SequenceNumber Declaration public ulong SequenceNumber { get; } Property Value Type Description UInt64 | Improve this Doc Systems Declaration public World.NoAllocReadOnlyCollection<ComponentSystemBase> Systems { get; } Property Value Type Description World.NoAllocReadOnlyCollection < ComponentSystemBase > | Improve this Doc Time Declaration public TimeData Time { get; } Property Value Type Description TimeData | Improve this Doc TimeSingleton Declaration protected Entity TimeSingleton { get; } Property Value Type Description Entity | Improve this Doc Version Declaration public int Version { get; } Property Value Type Description Int32 Methods | Improve this Doc AddSystem<T>(T) Declaration public T AddSystem<T>(T system) where T : ComponentSystemBase Parameters Type Name Description T system Returns Type Description T Type Parameters Name Description T | Improve this Doc CreateSystem(Type, Object[]) Declaration public ComponentSystemBase CreateSystem(Type type, params object[] constructorArguments) Parameters Type Name Description Type type Object [] constructorArguments Returns Type Description ComponentSystemBase | Improve this Doc CreateSystem<T>(Object[]) Declaration public T CreateSystem<T>(params object[] constructorArguments) where T : ComponentSystemBase Parameters Type Name Description Object [] constructorArguments Returns Type Description T Type Parameters Name Description T | Improve this Doc DestroySystem(ComponentSystemBase) Declaration public void DestroySystem(ComponentSystemBase system) Parameters Type Name Description ComponentSystemBase system | Improve this Doc Dispose() Declaration public void Dispose() | Improve this Doc DisposeAllWorlds() Declaration public static void DisposeAllWorlds() | Improve this Doc GetExistingSystem(Type) Declaration public ComponentSystemBase GetExistingSystem(Type type) Parameters Type Name Description Type type Returns Type Description ComponentSystemBase | Improve this Doc GetExistingSystem<T>() Declaration public T GetExistingSystem<T>() where T : ComponentSystemBase Returns Type Description T Type Parameters Name Description T | Improve this Doc GetOrCreateSystem(Type) Declaration public ComponentSystemBase GetOrCreateSystem(Type type) Parameters Type Name Description Type type Returns Type Description ComponentSystemBase | Improve this Doc GetOrCreateSystem<T>() Declaration public T GetOrCreateSystem<T>() where T : ComponentSystemBase Returns Type Description T Type Parameters Name Description T | Improve this Doc PopTime() Declaration public void PopTime() | Improve this Doc PushTime(TimeData) Declaration public void PushTime(TimeData newTimeData) Parameters Type Name Description TimeData newTimeData | Improve this Doc SetTime(TimeData) Declaration public void SetTime(TimeData newTimeData) Parameters Type Name Description TimeData newTimeData | Improve this Doc ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString() | Improve this Doc Update() Declaration public void Update()"
  },
  "api/Unity.Transforms.EndFrameTRSToLocalToParentSystem.html": {
    "href": "api/Unity.Transforms.EndFrameTRSToLocalToParentSystem.html",
    "title": "Class EndFrameTRSToLocalToParentSystem | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class EndFrameTRSToLocalToParentSystem Inheritance Object ComponentSystemBase JobComponentSystem TRSToLocalToParentSystem EndFrameTRSToLocalToParentSystem Inherited Members TRSToLocalToParentSystem.OnCreate() TRSToLocalToParentSystem.OnUpdate(JobHandle) JobComponentSystem.Entities JobComponentSystem.Job JobComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnDestroyManager() ComponentSystemBase.OnCreateManager() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetArchetypeChunkComponentType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkComponentTypeDynamic(ComponentType) ComponentSystemBase.GetArchetypeChunkBufferType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkSharedComponentType<T>() ComponentSystemBase.GetArchetypeChunkEntityType() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [UpdateInGroup(typeof(TransformSystemGroup))] [UpdateAfter(typeof(EndFrameCompositeRotationSystem))] [UpdateAfter(typeof(EndFrameCompositeScaleSystem))] [UpdateAfter(typeof(EndFrameParentScaleInverseSystem))] public class EndFrameTRSToLocalToParentSystem : TRSToLocalToParentSystem Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVV-5.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVV-5.html",
    "title": "Delegate VVVVV<T0, T1, T2, T3, T4> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VVVVV<T0, T1, T2, T3, T4> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVV<T0, T1, T2, T3, T4>(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 Type Parameters Name Description T0 T1 T2 T3 T4"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVRRRR-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVRRRR-8.html",
    "title": "Delegate VVVVRRRR<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VVVVRRRR<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVRRRR<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, T1 t1, T2 t2, T3 t3, ref T4 t4, ref T5 t5, ref T6 t6, ref T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VVVII-5.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVII-5.html",
    "title": "Delegate VVVII<T0, T1, T2, T3, T4> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VVVII<T0, T1, T2, T3, T4> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVII<T0, T1, T2, T3, T4>(T0 t0, T1 t1, T2 t2, in T3 t3, in T4 t4); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 Type Parameters Name Description T0 T1 T2 T3 T4"
  },
  "api/Unity.Entities.UniversalDelegates.VVVI-4.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVI-4.html",
    "title": "Delegate VVVI<T0, T1, T2, T3> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VVVI<T0, T1, T2, T3> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVI<T0, T1, T2, T3>(T0 t0, T1 t1, T2 t2, in T3 t3); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 Type Parameters Name Description T0 T1 T2 T3"
  },
  "api/Unity.Entities.UniversalDelegates.VVV-3.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVV-3.html",
    "title": "Delegate VVV<T0, T1, T2> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VVV<T0, T1, T2> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVV<T0, T1, T2>(T0 t0, T1 t1, T2 t2); Parameters Type Name Description T0 t0 T1 t1 T2 t2 Type Parameters Name Description T0 T1 T2"
  },
  "api/Unity.Entities.UniversalDelegates.VVRRRRRR-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVRRRRRR-8.html",
    "title": "Delegate VVRRRRRR<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VVRRRRRR<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVRRRRRR<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, T1 t1, ref T2 t2, ref T3 t3, ref T4 t4, ref T5 t5, ref T6 t6, ref T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VVII-4.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVII-4.html",
    "title": "Delegate VVII<T0, T1, T2, T3> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VVII<T0, T1, T2, T3> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVII<T0, T1, T2, T3>(T0 t0, T1 t1, in T2 t2, in T3 t3); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 Type Parameters Name Description T0 T1 T2 T3"
  },
  "api/Unity.Entities.UniversalDelegates.VVI-3.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVI-3.html",
    "title": "Delegate VVI<T0, T1, T2> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VVI<T0, T1, T2> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVI<T0, T1, T2>(T0 t0, T1 t1, in T2 t2); Parameters Type Name Description T0 t0 T1 t1 T2 t2 Type Parameters Name Description T0 T1 T2"
  },
  "api/Unity.Entities.UniversalDelegates.VV-2.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VV-2.html",
    "title": "Delegate VV<T0, T1> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VV<T0, T1> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VV<T0, T1>(T0 t0, T1 t1); Parameters Type Name Description T0 t0 T1 t1 Type Parameters Name Description T0 T1"
  },
  "api/Unity.Entities.UniversalDelegates.VRRRRRRR-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VRRRRRRR-8.html",
    "title": "Delegate VRRRRRRR<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VRRRRRRR<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VRRRRRRR<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, ref T1 t1, ref T2 t2, ref T3 t3, ref T4 t4, ref T5 t5, ref T6 t6, ref T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VII-3.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VII-3.html",
    "title": "Delegate VII<T0, T1, T2> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VII<T0, T1, T2> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VII<T0, T1, T2>(T0 t0, in T1 t1, in T2 t2); Parameters Type Name Description T0 t0 T1 t1 T2 t2 Type Parameters Name Description T0 T1 T2"
  },
  "api/Unity.Entities.UniversalDelegates.VI-2.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VI-2.html",
    "title": "Delegate VI<T0, T1> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VI<T0, T1> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VI<T0, T1>(T0 t0, in T1 t1); Parameters Type Name Description T0 t0 T1 t1 Type Parameters Name Description T0 T1"
  },
  "api/Unity.Entities.UniversalDelegates.V-1.html": {
    "href": "api/Unity.Entities.UniversalDelegates.V-1.html",
    "title": "Delegate V<T0> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate V<T0> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void V<T0>(T0 t0); Parameters Type Name Description T0 t0 Type Parameters Name Description T0"
  },
  "api/Unity.Entities.UniversalDelegates.RRRRRRRR-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RRRRRRRR-8.html",
    "title": "Delegate RRRRRRRR<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate RRRRRRRR<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RRRRRRRR<T0, T1, T2, T3, T4, T5, T6, T7>(ref T0 t0, ref T1 t1, ref T2 t2, ref T3 t3, ref T4 t4, ref T5 t5, ref T6 t6, ref T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.EntityCommandBufferSystem.html": {
    "href": "api/Unity.Entities.EntityCommandBufferSystem.html",
    "title": "Class EntityCommandBufferSystem | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class EntityCommandBufferSystem A system that provides EntityCommandBuffer objects for other systems. Inheritance Object ComponentSystemBase ComponentSystem EntityCommandBufferSystem BeginInitializationEntityCommandBufferSystem BeginPresentationEntityCommandBufferSystem BeginSimulationEntityCommandBufferSystem EndInitializationEntityCommandBufferSystem EndSimulationEntityCommandBufferSystem Inherited Members ComponentSystem.PostUpdateCommands ComponentSystem.InitEntityQueryCache(Int32) ComponentSystem.Entities ComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnDestroyManager() ComponentSystemBase.OnCreateManager() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetArchetypeChunkComponentType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkComponentTypeDynamic(ComponentType) ComponentSystemBase.GetArchetypeChunkBufferType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkSharedComponentType<T>() ComponentSystemBase.GetArchetypeChunkEntityType() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public abstract class EntityCommandBufferSystem : ComponentSystem Remarks Each system that uses the EntityCommandBuffer provided by a command buffer system must call CreateCommandBuffer() to create its own command buffer instance. This buffer system executes each of these separate command buffers in the order that you created them. The commands are executed during this system's OnUpdate() function. When you write to a command buffer from a Job, you must add the of that Job to the buffer system's dependency list with AddJobHandleForProducer(JobHandle) . If you write to a command buffer from a Job that runs in parallel (and this includes both IJobForEach<T0> and IJobChunk ), you must use the concurrent version of the command buffer ( ToConcurrent() ). Executing the commands in an EntityCommandBuffer invokes the corresponding functions of the EntityManager . Any structural change, such as adding or removing entities, adding or removing components from entities, or changing shared component values, creates a sync-point in your application. At a sync point, all Jobs accessing entity components must complete before new Jobs can start. Such sync points make it difficult for the Job scheduler to fully utilize available computing power. To avoid sync points, you should use as few entity command buffer systems as possible. The default ECS World code creates a ComponentSystemGroup setup with three main groups, InitializationSystemGroup , SimulationSystemGroup , and PresentationSystemGroup . Each of these main groups provides an existing EntityCommandBufferSystem executed at the start and the end of other, child systems. Note that unused command buffers systems do not create sync points because there are no commands to execute and thus no structural changes created. The EntityCommandBufferSystem class is abstract, so you must implement a subclass to create your own entity command buffer system. However, none of its methods are abstract, so you do not need to implement your own logic. Typically, you create an EntityCommandBufferSystem subclass to create a named buffer system for other systems to use and update it at an appropriate place in a custom ComponentSystemGroup setup. Methods | Improve this Doc AddJobHandleForProducer(JobHandle) Adds the specified JobHandle to this system's list of dependencies. Declaration public void AddJobHandleForProducer(JobHandle producerJob) Parameters Type Name Description JobHandle producerJob The JobHandle of a Job which this buffer system should wait for before playing back its pending command buffers. Remarks When you write to a command buffer from a Job, you must add the of that Job to this buffer system's dependency list by calling this function. Otherwise, the buffer system could execute the commands currently in the command buffer while the writing Job is still in progress. Examples The following example illustrates how to use one of the default EntityCommandBuffer systems. The code selects all entities that have one custom component, in this case, AsyncProcessInfo , and processes each entity in the Execute() function of an IJobForEachWithEntity<T0> Job (the actual process is not shown since that part of the example is hypothetical). After processing, the Job uses an EntityCommandBuffer to remove the ProcessInfo component and add an ProcessCompleteTag component. Another system could use the ProcessCompleteTag to find entities that represent the end results of the process. public struct ProcessInfo: IComponentData{ public float Value; } public struct ProcessCompleteTag : IComponentData{} public class AsyncProcessJobSystem : JobComponentSystem { [BurstCompile] public struct ProcessInBackgroundJob : IJobForEachWithEntity<ProcessInfo> { [ReadOnly] public EntityCommandBuffer.Concurrent ConcurrentCommands; public void Execute(Entity entity, int index, [ReadOnly] ref ProcessInfo info) { // Process based on the ProcessInfo component, // then remove ProcessInfo and add a ProcessCompleteTag... ConcurrentCommands.RemoveComponent<ProcessInfo>(index, entity); ConcurrentCommands.AddComponent(index, entity, new ProcessCompleteTag()); } } protected override JobHandle OnUpdate(JobHandle inputDeps) { var job = new ProcessInBackgroundJob(); var ecbSystem = World.GetOrCreateSystem<EndSimulationEntityCommandBufferSystem>(); job.ConcurrentCommands = ecbSystem.CreateCommandBuffer().ToConcurrent(); var handle = job.Schedule(this, inputDeps); ecbSystem.AddJobHandleForProducer(handle); return handle; } } | Improve this Doc CreateCommandBuffer() Creates an EntityCommandBuffer and adds it to this system's list of command buffers. Declaration public EntityCommandBuffer CreateCommandBuffer() Returns Type Description EntityCommandBuffer A command buffer that will be executed by this system. Remarks This buffer system executes its list of command buffers during its OnUpdate() function in the order you created the command buffers. If you write to a command buffer in a Job, you must add the Job as a dependency of this system by calling AddJobHandleForProducer(JobHandle) . The dependency ensures that the buffer system waits for the Job to complete before executing the command buffer. If you write to a command buffer from a parallel Job, such as IJobForEach<T0> or IJobChunk , you must use the concurrent version of the command buffer, provided by EntityCommandBuffer.Concurrent . | Improve this Doc OnCreate() Initializes this command buffer system. Declaration protected override void OnCreate() Overrides ComponentSystemBase.OnCreate() Remarks If you override this method, you should call base.OnCreate() to retain the default initialization logic. | Improve this Doc OnDestroy() Destroys this system, executing any pending command buffers first. Declaration protected override void OnDestroy() Overrides ComponentSystemBase.OnDestroy() Remarks If you override this method, you should call base.OnDestroy() to retain the default destruction logic. | Improve this Doc OnUpdate() Executes the command buffers in this system in the order they were created. Declaration protected override void OnUpdate() Overrides ComponentSystem.OnUpdate() Remarks If you override this method, you should call base.OnUpdate() to retain the default update logic. Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVR-5.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVR-5.html",
    "title": "Delegate VVVVR<T0, T1, T2, T3, T4> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VVVVR<T0, T1, T2, T3, T4> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVR<T0, T1, T2, T3, T4>(T0 t0, T1 t1, T2 t2, T3 t3, ref T4 t4); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 Type Parameters Name Description T0 T1 T2 T3 T4"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVIIII-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVIIII-8.html",
    "title": "Delegate VVVVIIII<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VVVVIIII<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVIIII<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, T1 t1, T2 t2, T3 t3, in T4 t4, in T5 t5, in T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVIII-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVIII-7.html",
    "title": "Delegate VVVVIII<T0, T1, T2, T3, T4, T5, T6> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VVVVIII<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVIII<T0, T1, T2, T3, T4, T5, T6>(T0 t0, T1 t1, T2 t2, T3 t3, in T4 t4, in T5 t5, in T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVII-6.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVII-6.html",
    "title": "Delegate VVVVII<T0, T1, T2, T3, T4, T5> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VVVVII<T0, T1, T2, T3, T4, T5> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVII<T0, T1, T2, T3, T4, T5>(T0 t0, T1 t1, T2 t2, T3 t3, in T4 t4, in T5 t5); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 Type Parameters Name Description T0 T1 T2 T3 T4 T5"
  },
  "api/Unity.Entities.UniversalDelegates.VVRRRRRI-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVRRRRRI-8.html",
    "title": "Delegate VVRRRRRI<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VVRRRRRI<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVRRRRRI<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, T1 t1, ref T2 t2, ref T3 t3, ref T4 t4, ref T5 t5, ref T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VVRRRRR-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVRRRRR-7.html",
    "title": "Delegate VVRRRRR<T0, T1, T2, T3, T4, T5, T6> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VVRRRRR<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVRRRRR<T0, T1, T2, T3, T4, T5, T6>(T0 t0, T1 t1, ref T2 t2, ref T3 t3, ref T4 t4, ref T5 t5, ref T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.VVRRRRII-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVRRRRII-8.html",
    "title": "Delegate VVRRRRII<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VVRRRRII<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVRRRRII<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, T1 t1, ref T2 t2, ref T3 t3, ref T4 t4, ref T5 t5, in T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VVRRRRI-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVRRRRI-7.html",
    "title": "Delegate VVRRRRI<T0, T1, T2, T3, T4, T5, T6> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VVRRRRI<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVRRRRI<T0, T1, T2, T3, T4, T5, T6>(T0 t0, T1 t1, ref T2 t2, ref T3 t3, ref T4 t4, ref T5 t5, in T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.VVRRRR-6.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVRRRR-6.html",
    "title": "Delegate VVRRRR<T0, T1, T2, T3, T4, T5> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VVRRRR<T0, T1, T2, T3, T4, T5> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVRRRR<T0, T1, T2, T3, T4, T5>(T0 t0, T1 t1, ref T2 t2, ref T3 t3, ref T4 t4, ref T5 t5); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 Type Parameters Name Description T0 T1 T2 T3 T4 T5"
  },
  "api/Unity.Entities.UniversalDelegates.VVRRRIII-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVRRRIII-8.html",
    "title": "Delegate VVRRRIII<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VVRRRIII<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVRRRIII<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, T1 t1, ref T2 t2, ref T3 t3, ref T4 t4, in T5 t5, in T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VVRRRII-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVRRRII-7.html",
    "title": "Delegate VVRRRII<T0, T1, T2, T3, T4, T5, T6> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VVRRRII<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVRRRII<T0, T1, T2, T3, T4, T5, T6>(T0 t0, T1 t1, ref T2 t2, ref T3 t3, ref T4 t4, in T5 t5, in T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.VVRRRI-6.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVRRRI-6.html",
    "title": "Delegate VVRRRI<T0, T1, T2, T3, T4, T5> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VVRRRI<T0, T1, T2, T3, T4, T5> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVRRRI<T0, T1, T2, T3, T4, T5>(T0 t0, T1 t1, ref T2 t2, ref T3 t3, ref T4 t4, in T5 t5); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 Type Parameters Name Description T0 T1 T2 T3 T4 T5"
  },
  "api/Unity.Entities.UniversalDelegates.VRRRRR-6.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VRRRRR-6.html",
    "title": "Delegate VRRRRR<T0, T1, T2, T3, T4, T5> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VRRRRR<T0, T1, T2, T3, T4, T5> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VRRRRR<T0, T1, T2, T3, T4, T5>(T0 t0, ref T1 t1, ref T2 t2, ref T3 t3, ref T4 t4, ref T5 t5); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 Type Parameters Name Description T0 T1 T2 T3 T4 T5"
  },
  "api/Unity.Entities.UniversalDelegates.VRRRRIII-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VRRRRIII-8.html",
    "title": "Delegate VRRRRIII<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VRRRRIII<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VRRRRIII<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, ref T1 t1, ref T2 t2, ref T3 t3, ref T4 t4, in T5 t5, in T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VRRRRII-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VRRRRII-7.html",
    "title": "Delegate VRRRRII<T0, T1, T2, T3, T4, T5, T6> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VRRRRII<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VRRRRII<T0, T1, T2, T3, T4, T5, T6>(T0 t0, ref T1 t1, ref T2 t2, ref T3 t3, ref T4 t4, in T5 t5, in T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.VRRRRI-6.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VRRRRI-6.html",
    "title": "Delegate VRRRRI<T0, T1, T2, T3, T4, T5> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VRRRRI<T0, T1, T2, T3, T4, T5> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VRRRRI<T0, T1, T2, T3, T4, T5>(T0 t0, ref T1 t1, ref T2 t2, ref T3 t3, ref T4 t4, in T5 t5); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 Type Parameters Name Description T0 T1 T2 T3 T4 T5"
  },
  "api/Unity.Entities.UniversalDelegates.VRRRR-5.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VRRRR-5.html",
    "title": "Delegate VRRRR<T0, T1, T2, T3, T4> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VRRRR<T0, T1, T2, T3, T4> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VRRRR<T0, T1, T2, T3, T4>(T0 t0, ref T1 t1, ref T2 t2, ref T3 t3, ref T4 t4); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 Type Parameters Name Description T0 T1 T2 T3 T4"
  },
  "api/Unity.Entities.UniversalDelegates.VRRRIIII-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VRRRIIII-8.html",
    "title": "Delegate VRRRIIII<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VRRRIIII<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VRRRIIII<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, ref T1 t1, ref T2 t2, ref T3 t3, in T4 t4, in T5 t5, in T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VRRRIII-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VRRRIII-7.html",
    "title": "Delegate VRRRIII<T0, T1, T2, T3, T4, T5, T6> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VRRRIII<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VRRRIII<T0, T1, T2, T3, T4, T5, T6>(T0 t0, ref T1 t1, ref T2 t2, ref T3 t3, in T4 t4, in T5 t5, in T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.VRRRII-6.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VRRRII-6.html",
    "title": "Delegate VRRRII<T0, T1, T2, T3, T4, T5> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VRRRII<T0, T1, T2, T3, T4, T5> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VRRRII<T0, T1, T2, T3, T4, T5>(T0 t0, ref T1 t1, ref T2 t2, ref T3 t3, in T4 t4, in T5 t5); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 Type Parameters Name Description T0 T1 T2 T3 T4 T5"
  },
  "api/Unity.Entities.UniversalDelegates.RRRRRRRI-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RRRRRRRI-8.html",
    "title": "Delegate RRRRRRRI<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate RRRRRRRI<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RRRRRRRI<T0, T1, T2, T3, T4, T5, T6, T7>(ref T0 t0, ref T1 t1, ref T2 t2, ref T3 t3, ref T4 t4, ref T5 t5, ref T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.RRRRRRR-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RRRRRRR-7.html",
    "title": "Delegate RRRRRRR<T0, T1, T2, T3, T4, T5, T6> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate RRRRRRR<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RRRRRRR<T0, T1, T2, T3, T4, T5, T6>(ref T0 t0, ref T1 t1, ref T2 t2, ref T3 t3, ref T4 t4, ref T5 t5, ref T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.RRRRRRII-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RRRRRRII-8.html",
    "title": "Delegate RRRRRRII<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate RRRRRRII<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RRRRRRII<T0, T1, T2, T3, T4, T5, T6, T7>(ref T0 t0, ref T1 t1, ref T2 t2, ref T3 t3, ref T4 t4, ref T5 t5, in T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.RRRRRRI-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RRRRRRI-7.html",
    "title": "Delegate RRRRRRI<T0, T1, T2, T3, T4, T5, T6> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate RRRRRRI<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RRRRRRI<T0, T1, T2, T3, T4, T5, T6>(ref T0 t0, ref T1 t1, ref T2 t2, ref T3 t3, ref T4 t4, ref T5 t5, in T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.RRRRRR-6.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RRRRRR-6.html",
    "title": "Delegate RRRRRR<T0, T1, T2, T3, T4, T5> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate RRRRRR<T0, T1, T2, T3, T4, T5> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RRRRRR<T0, T1, T2, T3, T4, T5>(ref T0 t0, ref T1 t1, ref T2 t2, ref T3 t3, ref T4 t4, ref T5 t5); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 Type Parameters Name Description T0 T1 T2 T3 T4 T5"
  },
  "api/Unity.Entities.UniversalDelegates.RRRRRIII-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RRRRRIII-8.html",
    "title": "Delegate RRRRRIII<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate RRRRRIII<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RRRRRIII<T0, T1, T2, T3, T4, T5, T6, T7>(ref T0 t0, ref T1 t1, ref T2 t2, ref T3 t3, ref T4 t4, in T5 t5, in T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.RRRRRII-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RRRRRII-7.html",
    "title": "Delegate RRRRRII<T0, T1, T2, T3, T4, T5, T6> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate RRRRRII<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RRRRRII<T0, T1, T2, T3, T4, T5, T6>(ref T0 t0, ref T1 t1, ref T2 t2, ref T3 t3, ref T4 t4, in T5 t5, in T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.RRRRRI-6.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RRRRRI-6.html",
    "title": "Delegate RRRRRI<T0, T1, T2, T3, T4, T5> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate RRRRRI<T0, T1, T2, T3, T4, T5> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RRRRRI<T0, T1, T2, T3, T4, T5>(ref T0 t0, ref T1 t1, ref T2 t2, ref T3 t3, ref T4 t4, in T5 t5); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 Type Parameters Name Description T0 T1 T2 T3 T4 T5"
  },
  "api/Unity.Entities.UniversalDelegates.RRII-4.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RRII-4.html",
    "title": "Delegate RRII<T0, T1, T2, T3> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate RRII<T0, T1, T2, T3> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RRII<T0, T1, T2, T3>(ref T0 t0, ref T1 t1, in T2 t2, in T3 t3); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 Type Parameters Name Description T0 T1 T2 T3"
  },
  "api/Unity.Entities.UniversalDelegates.RRI-3.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RRI-3.html",
    "title": "Delegate RRI<T0, T1, T2> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate RRI<T0, T1, T2> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RRI<T0, T1, T2>(ref T0 t0, ref T1 t1, in T2 t2); Parameters Type Name Description T0 t0 T1 t1 T2 t2 Type Parameters Name Description T0 T1 T2"
  },
  "api/Unity.Entities.UniversalDelegates.RR-2.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RR-2.html",
    "title": "Delegate RR<T0, T1> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate RR<T0, T1> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RR<T0, T1>(ref T0 t0, ref T1 t1); Parameters Type Name Description T0 t0 T1 t1 Type Parameters Name Description T0 T1"
  },
  "api/Unity.Entities.SystemBase.html": {
    "href": "api/Unity.Entities.SystemBase.html",
    "title": "Class SystemBase | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class SystemBase Implement SystemBase to create a systems in ECS. Inheritance Object ComponentSystemBase SystemBase Inherited Members ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnCreate() ComponentSystemBase.OnDestroyManager() ComponentSystemBase.OnCreateManager() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetArchetypeChunkComponentType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkComponentTypeDynamic(ComponentType) ComponentSystemBase.GetArchetypeChunkBufferType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkSharedComponentType<T>() ComponentSystemBase.GetArchetypeChunkEntityType() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public abstract class SystemBase : ComponentSystemBase Remarks Systems in ECS A typical system operates on a set of entities that have specific components. The system identifies the components of interest, reading and writing data, and performing other entity operations as appropriate. The following example shows a basic system that iterates over entities using a Entities.ForEach construction. In this example, the system iterates over all entities with both a Displacement and a Velocity component and updates the Displacement based on the delta time elapsed since the last frame. public struct Position : IComponentData { public float3 Value; } public struct Velocity : IComponentData { public float3 Value; } public class ECSSystem : SystemBase { protected override void OnUpdate() { // Local variable captured in ForEach float dT = Time.DeltaTime; Entities .WithName(\"Update_Displacement\") .ForEach( (ref Position position, in Velocity velocity) => { position = new Position() { Value = position.Value + velocity.Value * dT }; } ) .ScheduleParallel(); } } System lifecycle callbacks You can define a set of system lifecycle event functions when you implement a system. The runtime invokes these functions in the following order: OnCreate() -- called when the system is created. OnStartRunning() -- before the first OnUpdate and whenever the system resumes running. OnUpdate() -- every frame as long as the system has work to do (see ShouldRunSystem() ) and the system is Enabled . OnStopRunning() -- whenever the system stops updating because it finds no entities matching its queries. Also called before OnDestroy. OnDestroy() -- when the system is destroyed. All of these functions are executed on the main thread. To perform work on background threads, you can schedule jobs from the OnUpdate() function. System update order The runtime executes systems in the order determined by their ComponentSystemGroup . Place a system in a group using UpdateInGroupAttribute . Use UpdateBeforeAttribute and UpdateAfterAttribute to specify the execution order within a group. If you do not explicitly place a system in a specific group, the runtime places it in the default World SimulationSystemGroup . By default, all systems are discovered, instantiated, and added to the default World. You can use the DisableAutoCreationAttribute to prevent a system from being created automatically. Entity queries A system caches all queries created through an Entities.ForEach construction, through ComponentSystemBase.GetEntityQuery , or through ComponentSystemBase.RequireForUpdate . By default, the runtime only calls a system's OnUpdate() function when one of these cached queries finds entities. You can use the AlwaysUpdateSystemAttribute to have the system always update. Note that a system with no queries is also updated every frame. Entities.ForEach and Job.WithCode constructions The Entities property provides a convenient mechanism for iterating over entity data. Using an Entities.ForEach construction, you can define your entity query, specify a lambda function to run for each entity, and either schedule the work to be done on a background thread or execute the work immediately on the main thread. The Entities.ForEach construction uses a C# compiler extension to take a data query syntax that describes your intent and translate it into efficient (optionally) job-based code. The Job property provides a similar mechanism for defining a C# Job . You can only use Schedule() to run a Job.WithCode construction, which executes the lambda function as a single job. System attributes You can use a number of attributes on your SystemBase implementation to control when it updates: UpdateInGroupAttribute -- place the system in a ComponentSystemGroup . UpdateBeforeAttribute -- always update the system before another system in the same group. UpdateAfterAttribute -- always update the system after another system in the same group. AlwaysUpdateSystemAttribute -- invoke OnUpdate every frame. DisableAutoCreationAttribute -- do not create the system automatically. AlwaysSynchronizeSystemAttribute -- force a sync point before invoking OnUpdate . Properties | Improve this Doc Dependency The ECS-related data dependencies of the system. Declaration protected JobHandle Dependency { get; set; } Property Value Type Description JobHandle Remarks Before OnUpdate() , the Dependency property represents the combined job handles of any job that writes to the same components that the current system reads -- or reads the same components that the current system writes to. When you use Entities.ForEach or Job.WithCode , the system uses the Dependency property to specify a job’s dependencies when scheduling it. The system also combines the new job's JobHandle with Dependency so that any subsequent job scheduled in the system depends on the earlier jobs (in sequence). The following example illustrates an OnUpdate() implementation that relies on implicit dependency management. The function schedules three jobs, each depending on the previous one: protected override void OnUpdate() { Entities .WithName(\"ForEach_Job_One\") .ForEach((ref AComponent c) => { /*...*/ }) .ScheduleParallel(); Entities .WithName(\"ForEach_Job_Two\") .ForEach((ref AnotherComponent c) => { /*...*/ }) .ScheduleParallel(); Job .WithName(\"Job_Three\") .WithCode(() => { /*...*/ }) .Schedule(); } You can opt out of this default dependency management by explicitly passing a JobHandle to Entities.ForEach or Job.WithCode . When you pass in a JobHandle , these constructions also return a JobHandle representing the input dependencies combined with the new job. The JobHandle objects of any jobs scheduled with explicit dependencies are not combined with the system’s Dependency property. You must set the Dependency property manually to make sure that later systems receive the correct job dependencies. The following OnUpdate() function illustrates manual dependency management. The function uses two [Entity.ForEach] constructions that schedule jobs which do not depend upon each other, only the incoming dependencies of the system. Then a Job.WithCode construction schedules a job that depends on both of the prior jobs, who’s dependencies are combined using [JobHandle.CombineDependencies]. Finally, the JobHandle of the last job is assigned to the Dependency property so that the ECS safety manager can propagate the dependencies to subsequent systems. protected override void OnUpdate() { JobHandle One = Entities .WithName(\"ForEach_Job_One\") .ForEach((ref AComponent c) => { /*...*/ }) .ScheduleParallel(this.Dependency); JobHandle Two = Entities .WithName(\"ForEach_Job_Two\") .ForEach((ref AnotherComponent c) => { /*...*/ }) .ScheduleParallel(this.Dependency); JobHandle intermediateDependencies = JobHandle.CombineDependencies(One, Two); JobHandle finalDependency = Job .WithName(\"Job_Three\") .WithCode(() => { /*...*/ }) .Schedule(intermediateDependencies); this.Dependency = finalDependency; } You can combine implicit and explicit dependency management (by using [JobHandle.CombineDependencies]); however, doing so can be error prone. When you set the Dependency property, the assigned JobHandle replaces any existing dependency, it is not combined with them. Note that the default, implicit dependency management does not include IJobChunk jobs. You must manage the dependencies for IJobChunk explicitly. | Improve this Doc Entities Provides a mechanism for defining an entity query and invoking a lambda expression on each entity selected by that query. Declaration protected ForEachLambdaJobDescription Entities { get; } Property Value Type Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription Remarks The Entities property provides a convenient mechanism for implementing the most common operation performed by systems in ECS, namely, iterating over a set of entities to read and update component data. Entities provides a LINQ method-style syntax that you use to describe the work to be performed. Unity uses a compiler extension to convert the description into efficient, (optionally) multi-threaded executable code. Entities .WithName(\"Update_Position\") // Shown in error messages and profiler .WithAll<LocalToWorld>() // Require the LocalToWorld component .ForEach( // Write to Displacement (ref), read Velocity (in) (ref Position position, in Velocity velocity) => { //Execute for each selected entity position = new Position() { // dT is a captured variable Value = position.Value + velocity.Value * dT }; } ) .ScheduleParallel(); // Schedule as a parallel job Describing the entity query The components that you specify as parameters for your lambda function are automatically added to the entity query created for an Entities.Foreach construction. You can also add a number of \"With\" clauses to identify which entities that you want to process These clauses include: WithAll -- An entity must have all of these component types (in addition to having all the component types found in the lambda parameter list). WithAny -- An entity must have one or more of these component types. WithNone -- An entity must not have any of these component types. WithChangeFilter() -- Only selects entities in chunks in which the specified component might have changed since the last time this system instance updated. WithSharedComponentFilter(ISharedComponentData) -- Only select chunks that have a specified value for a shared component. WithEntityQueryOptions(EntityQueryOptions) -- Specify additonal options defined in a EntityQueryOptions object. WithStoreEntityQueryInField(EntityQuery) -- Stores the EntityQuery object generated by the Entities.ForEach in an EntityQuery field on your system. You can use this EntityQuery object for such purposes as getting the number of entities that will be selected by the query. Note that this function assigns the EntityQuery instance to your field when the system is created. This means that you can use the query before the first execution of the lambda function. Defining the lambda function Define the lambda function inside the ForEach() method of the entities property. When the system invokes the lambda function, it assigns values to the function parameters based on the current entity. You can pass ECS component types as parameters as well as a set of special, named parameters. Parameters passed-by-value first (no parameter modifiers) Writable parameters second( ref parameter modifier) Read-only parameters last( in parameter modifier) All components should use either the ref or the in parameter modifier keywords. You can pass up to eight parameters to the lambda function. In addition to ECS component types, you can use the following: Entity entity — the Entity instance of the current entity. (The parameter can be named anything as long as the type is Entity.) int entityInQueryIndex — the index of the entity in the list of all entities selected by the query. Use the entity index value when you have a native array that you need to fill with a unique value for each entity. You can use the entityInQueryIndex as the index in that array. The entityInQueryIndex should also be used as the jobIndex for adding commands to a concurrent EntityCommandBuffer . int nativeThreadIndex — a unique index for the thread executing the current iteration of the lambda function. When you execute the lambda function using Run(), nativeThreadIndex is always zero. .ForEach((Entity entity, int entityInQueryIndex, ref WritableComponent aReadwriteComponent, in ReadonlyComponent aReadonlyComponent) => { /*..*/ }) Capturing variables You can capture local variables in the lambda function. When you execute the function using a job (by calling ScheduleParallel() or ScheduleSingle() instead of Run() ) there are some restrictions on the captured variables and how you use them: Only native containers and blittable types can be captured. A job can only write to captured variables that are native containers. (To “return” a single value, create a native array with one element.) You can use the following functions to apply modifiers and attributes to the captured native container variables, including native arrays . See Job.WithCode for a list of these modifiers and attributes. Executing the lambda function To execute a ForEach construction, you have three options: ScheduleParallel() -- schedules the work to be done in parallel using the C# Job system. Each parallel job instance processes at least one chunk of entities at a time. In other words, if all the selected entities are in the same chunk, then only one job instance is spawned. Schedule() -- schedules the work to be done in a single job (no matter how many entities are selected). Run() -- evaluates the entity query and invokes the lambda function for each selected entity immediately on the main thread. Calling Run() completes the system Dependency JobHandle before running, blocking the main thread, if necessary, while it waits for those jobs to finish. When you call Schedule() or ScheduleParallel() without parameters, then the scheduled jobs use the current value of Dependency . You can also pass a JobHandle to these functions to define the dependencies of the scheduled job. In this case, the Entities.forEach construction returns a new JobHandle that adds the scheduled job to the passed in JobHandle . See Dependency for more information. Additional options WithName(string) -— assigns the specified string as the name of the generated job class. Assigning a name is optional, but can help identify the function when debugging and profiling. WithStructuralChanges() -— executes the lambda function on the main thread and disables Burst so that you can make structural changes to your entity data within the function. For better performance, use an EntityCommandBuffer instead. WithoutBurst() —- disables Burst compilation. Use this function when your lambda function contains code not supported by Burst or while debugging. WithBurst(FloatMode, FloatPrecision, bool) — sets options for the Burst compiler: floatMode —- sets the floating point math optimization mode.Fast mode executes faster, but produces larger floating point error than Strict mode.Defaults to Strict. See Burst FloatMode . floatPrecision —- sets the floating point math precision. See Burst FloatPrecision . synchronousCompilation —- compiles the function immediately instead of scheduling the function for compilation later. | Improve this Doc Job Provides a mechanism for defining and executing an [IJob]. Declaration protected LambdaSingleJobDescription Job { get; } Property Value Type Description Unity.Entities.CodeGeneratedJobForEach.LambdaSingleJobDescription Remarks The Jobs property provides a convenient mechanism for implementing single jobs. Unity uses a compiler extension to convert the job description you create with Job.WithCode into efficient, executable code that (optionally) runs in a background thread. public class RandomSumJob : SystemBase { private uint seed = 1; protected override void OnUpdate() { Random randomGen = new Random(seed++); NativeArray<float> randomNumbers = new NativeArray<float>(500, Allocator.TempJob); Job.WithCode(() => { for (int i = 0; i < randomNumbers.Length; i++) { randomNumbers[i] = randomGen.NextFloat(); } }).Schedule(); // To get data out of a job, you must use a NativeArray // even if there is only one value NativeArray<float> result = new NativeArray<float>(1, Allocator.TempJob); Job.WithCode(() => { for (int i = 0; i < randomNumbers.Length; i++) { result[0] += randomNumbers[i]; } }).Schedule(); // This completes the scheduled jobs to get the result immediately, but for // better efficiency you should schedule jobs early in the frame with one // system and get the results late in the frame with a different system. this.CompleteDependency(); UnityEngine.Debug.Log(\"The sum of \" + randomNumbers.Length + \" numbers is \" + result[0]); randomNumbers.Dispose(); result.Dispose(); } } Implement your lambda function inside the Job.WithCode(lambda) function. The lambda function cannot take any parameters. You can capture local variables. Schedule() -- executes the lambda function as a single job. Run() -- executes immediately on the main thread. Immediately before it invokes Run() the system completes all jobs with a JobHandle in the system Dependency property as well as any jobs with a JobHandle passed as a dependency to Run() as an (optional) parameter. When scheduling a job, you can pass a JobHandle to set the job's dependencies explicitly and the construction returns the updated JobHandle combining the earlier dependencies with the new job. If you do not provide a JobHandle , the system uses Dependency when scheduling the job, and updates the property to include the new job automatically. You can use the additional options listed for Entities.ForEach with a Job.WithCode construction. Capturing variables You can capture local variables in the lambda function. When you execute the function using a job (by calling Schedule() , ScheduleParallel() or ScheduleSingle() instead of Run() ) there are some restrictions on the captured variables and how you use them: Only native containers and blittable types can be captured. A job can only write to captured variables that are native containers. (To “return” a single value, create a [native array] with one element.) You can use the following functions to apply modifiers and attributes to the captured [native container] variables, including [native arrays]: WithReadOnly(myvar) — restricts access to the variable as read-only. WithDeallocateOnJobCompletion(myvar) — deallocates the native container after the job is complete. See DeallocateOnJobCompletionAttribute . WithNativeDisableParallelForRestriction(myvar) — permits multiple threads to access the same writable native container. Parallel access is only safe when each thread only accesses its own, unique range of elements in the container. If more than one thread accesses the same element a race condition is created in which the timing of the access changes the result. See NativeDisableParallelForRestriction . WithNativeDisableContainerSafetyRestriction(myvar) — disables normal safety restrictions that prevent dangerous access to the native container. Disabling safety restrictions unwisely can lead to race conditions, subtle bugs, and crashes in your application. See NativeDisableContainerSafetyRestrictionAttribute . WithNativeDisableUnsafePtrRestrictionAttribute(myvar) — Allows you to use unsafe pointers provided by the native container. Incorrect pointer use can lead to subtle bugs, instability, and crashes in your application. See NativeDisableUnsafePtrRestrictionAttribute . Methods | Improve this Doc CompleteDependency() Declaration protected void CompleteDependency() | Improve this Doc GetComponent<T>(Entity) Look up the value of a component for an entity. Declaration protected T GetComponent<T>(Entity entity) where T : struct, IComponentData Parameters Type Name Description Entity entity The entity. Returns Type Description T A struct of type T containing the component value. Type Parameters Name Description T The type of component to retrieve. Remarks Use this method to look up data in another entity using its Entity object. For example, if you have a component that contains an Entity field, you can look up the component data for the referenced entity using this method. When iterating over a set of entities via Entities.ForEach , do not use this method to access data of the current entity in the set. This function is much slower than accessing the data directly (by passing the component containing the data to your lambda iteration function as a parameter). When you call this method on the main thread, it invokes GetComponentData<T>(Entity) . (An Entities.ForEach function invoked with Run() executes on the main thread.) When you call this method inside a job scheduled using Entities.ForEach , this method gets replaced with component access methods through ComponentDataFromEntity<T> . In both cases, this lookup method results in a slower, indirect memory access. When possible, organize your data to minimize the need for indirect lookups. Exceptions Type Condition ArgumentException Thrown if the component type has no fields. | Improve this Doc HasComponent<T>(Entity) Checks whether an entity has a specific type of component. Declaration protected bool HasComponent<T>(Entity entity) where T : struct, IComponentData Parameters Type Name Description Entity entity The Entity object. Returns Type Description Boolean True, if the specified entity has the component. Type Parameters Name Description T The data type of the component. Remarks Always returns false for an entity that has been destroyed. Use this method to check if another entity has a given type of component using its Entity object. For example, if you have a component that contains an Entity field, you can check whether the referenced entity has a specific type of component using this method. (Entities in the set always have required components, so you don’t need to check for them.) When iterating over a set of entities via Entities.ForEach , avoid using this method with the current entity in the set. It is generally faster to change your entity query methods to avoid optional components; this may require a different Entities.ForEach construction to handle each combination of optional and non-optional components. When you call this method on the main thread, it invokes HasComponent<T>(Entity) . (An Entities.ForEach function invoked with Run() executes on the main thread.) When you call this method inside a job scheduled using Entities.ForEach , this method gets replaced with component access methods through ComponentDataFromEntity<T> . In both cases, this lookup method results in a slower, indirect memory access. When possible, organize your data to minimize the need for indirect lookups. | Improve this Doc OnUpdate() Implement OnUpdate() to perform the major work of this system. Declaration protected abstract void OnUpdate() Remarks The system invokes OnUpdate() once per frame on the main thread when any of this system's EntityQueries match existing entities, the system has the [AlwaysUpdateSystem] attribute, or the system has no queries at all. OnUpdate() is triggered by the system's parent system group, which calls the Update() method of all its child systems in its own OnUpdate() function. The Update() function evaluates whether a system should, in fact, update before calling OnUpdate() . The Entities.ForEach and Job.WithCode constructions provide convenient mechanisms for defining jobs. You can also instantiate and schedule an IJobChunk instance; you can use the [C# JobSystem] or you can perform work on the main thread. If you call EntityManager methods that perform structural changes on the main thread, be sure to arrange the system order to minimize the performance impact of the resulting sync points . | Improve this Doc SetComponent<T>(Entity, T) Sets the value of a component of an entity. Declaration protected void SetComponent<T>(Entity entity, T component) where T : struct, IComponentData Parameters Type Name Description Entity entity The entity. T component The data to set. Type Parameters Name Description T The component type. Remarks Use this method to look up and set data in another entity using its Entity object. For example, if you have a component that contains an Entity field, you can update the component data for the referenced entity using this method. When iterating over a set of entities via Entities.ForEach , do not use this method to update data of the current entity in the set. This function is much slower than accessing the data directly (by passing the component containing the data to your lambda iteration function as a parameter). When you call this method on the main thread, it invokes SetComponentData<T>(Entity, T) . (An Entities.ForEach function invoked with Run() executes on the main thread.) When you call this method inside a job scheduled using Entities.ForEach , this method gets replaced with component access methods through ComponentDataFromEntity<T> . In both cases, this lookup method results in a slower, indirect memory access. When possible, organize your data to minimize the need for indirect lookups. Exceptions Type Condition ArgumentException Thrown if the component type has no fields. | Improve this Doc Update() Update the system manually. Declaration public override sealed void Update() Overrides ComponentSystemBase.Update() Remarks Most programs should not update systems manually. SystemBase implementations cannot override Update() . Instead, implement system behavior in OnUpdate() . Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVVRII-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVVRII-8.html",
    "title": "Delegate VVVVVRII<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VVVVVRII<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVVRII<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, ref T5 t5, in T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVVRI-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVVRI-7.html",
    "title": "Delegate VVVVVRI<T0, T1, T2, T3, T4, T5, T6> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VVVVVRI<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVVRI<T0, T1, T2, T3, T4, T5, T6>(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, ref T5 t5, in T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVVR-6.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVVR-6.html",
    "title": "Delegate VVVVVR<T0, T1, T2, T3, T4, T5> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VVVVVR<T0, T1, T2, T3, T4, T5> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVVR<T0, T1, T2, T3, T4, T5>(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, ref T5 t5); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 Type Parameters Name Description T0 T1 T2 T3 T4 T5"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVVIII-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVVIII-8.html",
    "title": "Delegate VVVVVIII<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VVVVVIII<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVVIII<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, in T5 t5, in T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VVVRRIII-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVRRIII-8.html",
    "title": "Delegate VVVRRIII<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VVVRRIII<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVRRIII<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, T1 t1, T2 t2, ref T3 t3, ref T4 t4, in T5 t5, in T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VVVRRII-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVRRII-7.html",
    "title": "Delegate VVVRRII<T0, T1, T2, T3, T4, T5, T6> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VVVRRII<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVRRII<T0, T1, T2, T3, T4, T5, T6>(T0 t0, T1 t1, T2 t2, ref T3 t3, ref T4 t4, in T5 t5, in T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.VVVRRI-6.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVRRI-6.html",
    "title": "Delegate VVVRRI<T0, T1, T2, T3, T4, T5> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VVVRRI<T0, T1, T2, T3, T4, T5> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVRRI<T0, T1, T2, T3, T4, T5>(T0 t0, T1 t1, T2 t2, ref T3 t3, ref T4 t4, in T5 t5); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 Type Parameters Name Description T0 T1 T2 T3 T4 T5"
  },
  "api/Unity.Entities.Hybrid.ResourceMetaData.Flags.html": {
    "href": "api/Unity.Entities.Hybrid.ResourceMetaData.Flags.html",
    "title": "Enum ResourceMetaData.Flags | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Enum ResourceMetaData.Flags For scenes, if AutoLoad is true, the scene will be loaded when the player starts Namespace : Unity.Entities.Hybrid <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Flags] public enum Flags Fields Name Description AutoLoad None"
  },
  "api/Unity.Entities.EntityRemapUtility.ManagedEntityPatchInfo.html": {
    "href": "api/Unity.Entities.EntityRemapUtility.ManagedEntityPatchInfo.html",
    "title": "Struct EntityRemapUtility.ManagedEntityPatchInfo | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct EntityRemapUtility.ManagedEntityPatchInfo Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct ManagedEntityPatchInfo Fields | Improve this Doc Type Declaration public ComponentType Type Field Value Type Description ComponentType"
  },
  "api/Unity.Entities.EntityRemapUtility.EntityRemapInfo.html": {
    "href": "api/Unity.Entities.EntityRemapUtility.EntityRemapInfo.html",
    "title": "Struct EntityRemapUtility.EntityRemapInfo | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct EntityRemapUtility.EntityRemapInfo Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct EntityRemapInfo Fields | Improve this Doc SourceVersion Declaration public int SourceVersion Field Value Type Description Int32 | Improve this Doc Target Declaration public Entity Target Field Value Type Description Entity"
  },
  "api/Unity.Entities.EndInitializationEntityCommandBufferSystem.html": {
    "href": "api/Unity.Entities.EndInitializationEntityCommandBufferSystem.html",
    "title": "Class EndInitializationEntityCommandBufferSystem | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class EndInitializationEntityCommandBufferSystem Inheritance Object ComponentSystemBase ComponentSystem EntityCommandBufferSystem EndInitializationEntityCommandBufferSystem Inherited Members EntityCommandBufferSystem.CreateCommandBuffer() EntityCommandBufferSystem.AddJobHandleForProducer(JobHandle) EntityCommandBufferSystem.OnCreate() EntityCommandBufferSystem.OnDestroy() EntityCommandBufferSystem.OnUpdate() ComponentSystem.PostUpdateCommands ComponentSystem.InitEntityQueryCache(Int32) ComponentSystem.Entities ComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnDestroyManager() ComponentSystemBase.OnCreateManager() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetArchetypeChunkComponentType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkComponentTypeDynamic(ComponentType) ComponentSystemBase.GetArchetypeChunkBufferType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkSharedComponentType<T>() ComponentSystemBase.GetArchetypeChunkEntityType() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [UpdateInGroup(typeof(InitializationSystemGroup))] public class EndInitializationEntityCommandBufferSystem : EntityCommandBufferSystem Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Entities.EditorRenderData.html": {
    "href": "api/Unity.Entities.EditorRenderData.html",
    "title": "Struct EditorRenderData | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct EditorRenderData Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct EditorRenderData : ISharedComponentData, IEquatable<EditorRenderData> Fields | Improve this Doc LiveLinkEditGameViewMask Declaration public const ulong LiveLinkEditGameViewMask = 576460752303423488UL Field Value Type Description UInt64 | Improve this Doc LiveLinkEditSceneViewMask Declaration public const ulong LiveLinkEditSceneViewMask = 1152921504606846976UL Field Value Type Description UInt64 | Improve this Doc PickableObject Declaration public GameObject PickableObject Field Value Type Description GameObject | Improve this Doc SceneCullingMask Declaration public ulong SceneCullingMask Field Value Type Description UInt64 Methods | Improve this Doc Equals(EditorRenderData) Declaration public bool Equals(EditorRenderData other) Parameters Type Name Description EditorRenderData other Returns Type Description Boolean | Improve this Doc GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode()"
  },
  "api/Unity.Entities.BufferAccessor-1.html": {
    "href": "api/Unity.Entities.BufferAccessor-1.html",
    "title": "Struct BufferAccessor<T> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct BufferAccessor<T> Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct BufferAccessor<T> where T : struct, IBufferElementData Type Parameters Name Description T Constructors | Improve this Doc BufferAccessor(Byte*, Int32, Int32, Int32) Declaration public BufferAccessor(byte *basePointer, int length, int stride, int internalCapacity) Parameters Type Name Description Byte * basePointer Int32 length Int32 stride Int32 internalCapacity Properties | Improve this Doc Item[Int32] Declaration public DynamicBuffer<T> this[int index] { get; } Parameters Type Name Description Int32 index Property Value Type Description DynamicBuffer <T> Exceptions Type Condition InvalidOperationException | Improve this Doc Length Declaration public int Length { get; } Property Value Type Description Int32"
  },
  "api/Unity.Entities.BlobBuilderArray-1.html": {
    "href": "api/Unity.Entities.BlobBuilderArray-1.html",
    "title": "Struct BlobBuilderArray<T> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct BlobBuilderArray<T> Used by the BlobBuilder methods to reference the arrays within a blob asset. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct BlobBuilderArray<T> where T : struct Type Parameters Name Description T The data type of the elements in the array. Remarks Use this reference to initialize the data of a newly created BlobArray<T> . Constructors | Improve this Doc BlobBuilderArray(Void*, Int32) For internal, BlobBuilder , use only. Declaration public BlobBuilderArray(void *data, int length) Parameters Type Name Description Void * data Int32 length Properties | Improve this Doc Item[Int32] Array index accessor for the elements in the array. Declaration public T this[int index] { get; } Parameters Type Name Description Int32 index The sequential index of an array item. Property Value Type Description T Exceptions Type Condition IndexOutOfRangeException Thrown when index is less than zero or greater than the length of the array (minus one). | Improve this Doc Length Reports the number of elements in the array. Declaration public int Length { get; } Property Value Type Description Int32 Methods | Improve this Doc GetUnsafePtr() Provides a pointer to the data stored in the array. Declaration public void *GetUnsafePtr() Returns Type Description Void * A pointer to the first element in the array. Remarks You can only call this function in an Unsafe context."
  },
  "api/Unity.Entities.SceneViewWorldPositionAttribute.html": {
    "href": "api/Unity.Entities.SceneViewWorldPositionAttribute.html",
    "title": "Class SceneViewWorldPositionAttribute | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class SceneViewWorldPositionAttribute Inheritance Object Attribute SceneViewWorldPositionAttribute Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class SceneViewWorldPositionAttribute : Attribute, _Attribute"
  },
  "api/Unity.Entities.ReferencedUnityObjects.html": {
    "href": "api/Unity.Entities.ReferencedUnityObjects.html",
    "title": "Class ReferencedUnityObjects | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class ReferencedUnityObjects Inheritance Object ReferencedUnityObjects Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class ReferencedUnityObjects : ScriptableObject Fields | Improve this Doc Array Declaration public UnityEngine.Object[] Array Field Value Type Description UnityEngine.Object []"
  },
  "api/Unity.Entities.PresentationSystemGroup.html": {
    "href": "api/Unity.Entities.PresentationSystemGroup.html",
    "title": "Class PresentationSystemGroup | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class PresentationSystemGroup Inheritance Object ComponentSystemBase ComponentSystem ComponentSystemGroup PresentationSystemGroup Inherited Members ComponentSystemGroup.m_systemsToUpdate ComponentSystemGroup.m_systemsToRemove ComponentSystemGroup.Systems ComponentSystemGroup.AddSystemToUpdateList(ComponentSystemBase) ComponentSystemGroup.RemoveSystemFromUpdateList(ComponentSystemBase) ComponentSystemGroup.OnStopRunning() ComponentSystemGroup.UpdateCallback ComponentSystemGroup.OnUpdate() ComponentSystem.PostUpdateCommands ComponentSystem.InitEntityQueryCache(Int32) ComponentSystem.Entities ComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnCreate() ComponentSystemBase.OnDestroyManager() ComponentSystemBase.OnCreateManager() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetArchetypeChunkComponentType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkComponentTypeDynamic(ComponentType) ComponentSystemBase.GetArchetypeChunkBufferType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkSharedComponentType<T>() ComponentSystemBase.GetArchetypeChunkEntityType() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class PresentationSystemGroup : ComponentSystemGroup Constructors | Improve this Doc PresentationSystemGroup() Declaration public PresentationSystemGroup() Methods | Improve this Doc SortSystemUpdateList() Declaration public override void SortSystemUpdateList() Overrides ComponentSystemGroup.SortSystemUpdateList() Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Entities.Prefab.html": {
    "href": "api/Unity.Entities.Prefab.html",
    "title": "Struct Prefab | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct Prefab Marks the entity as a prefab, which implicitly disables the entity. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct Prefab : IComponentData Remarks By default, an EntityQuery ignores all entities that have a Prefab component. You can override this default behavior by setting the IncludePrefab flag of the EntityQueryDesc object used to create the query. When using the EntityQueryBuilder class in a ComponentSystem, set this flag by calling the With(EntityQueryOptions) function."
  },
  "api/Unity.Entities.PlaybackPolicy.html": {
    "href": "api/Unity.Entities.PlaybackPolicy.html",
    "title": "Enum PlaybackPolicy | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Enum PlaybackPolicy Specifies if the EntityCommandBuffer can be played a single time or multiple times. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public enum PlaybackPolicy Fields Name Description MultiPlayback The EntityCommandBuffer can be played back more than once. SinglePlayback The EntityCommandBuffer can only be played once. After a first playback, the EntityCommandBuffer must be disposed."
  },
  "api/Unity.Entities.LayerFieldAttribute.html": {
    "href": "api/Unity.Entities.LayerFieldAttribute.html",
    "title": "Class LayerFieldAttribute | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class LayerFieldAttribute Attribute used to make an int field display as a layer selector drop-down. Inheritance Object LayerFieldAttribute Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public sealed class LayerFieldAttribute : PropertyAttribute"
  },
  "api/Unity.Entities.LateSimulationSystemGroup.html": {
    "href": "api/Unity.Entities.LateSimulationSystemGroup.html",
    "title": "Class LateSimulationSystemGroup | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class LateSimulationSystemGroup Inheritance Object ComponentSystemBase ComponentSystem ComponentSystemGroup LateSimulationSystemGroup Inherited Members ComponentSystemGroup.m_systemsToUpdate ComponentSystemGroup.m_systemsToRemove ComponentSystemGroup.Systems ComponentSystemGroup.AddSystemToUpdateList(ComponentSystemBase) ComponentSystemGroup.RemoveSystemFromUpdateList(ComponentSystemBase) ComponentSystemGroup.SortSystemUpdateList() ComponentSystemGroup.OnStopRunning() ComponentSystemGroup.UpdateCallback ComponentSystemGroup.OnUpdate() ComponentSystem.PostUpdateCommands ComponentSystem.InitEntityQueryCache(Int32) ComponentSystem.Entities ComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnCreate() ComponentSystemBase.OnDestroyManager() ComponentSystemBase.OnCreateManager() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetArchetypeChunkComponentType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkComponentTypeDynamic(ComponentType) ComponentSystemBase.GetArchetypeChunkBufferType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkSharedComponentType<T>() ComponentSystemBase.GetArchetypeChunkEntityType() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [UpdateInGroup(typeof(SimulationSystemGroup))] public class LateSimulationSystemGroup : ComponentSystemGroup Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Entities.LambdaSingleJobDescriptionExecutionMethodsJCS.html": {
    "href": "api/Unity.Entities.LambdaSingleJobDescriptionExecutionMethodsJCS.html",
    "title": "Class LambdaSingleJobDescriptionExecutionMethodsJCS | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class LambdaSingleJobDescriptionExecutionMethodsJCS Inheritance Object LambdaSingleJobDescriptionExecutionMethodsJCS Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class LambdaSingleJobDescriptionExecutionMethodsJCS Methods | Improve this Doc Run<TDescription>(TDescription) Declaration public static void Run<TDescription>(this TDescription description) where TDescription : ILambdaSingleJobExecutionDescriptionJCS Parameters Type Name Description TDescription description Type Parameters Name Description TDescription | Improve this Doc Schedule<TDescription>(TDescription, JobHandle) Declaration public static JobHandle Schedule<TDescription>(this TDescription description, JobHandle dependency) where TDescription : ILambdaSingleJobExecutionDescriptionJCS Parameters Type Name Description TDescription description JobHandle dependency Returns Type Description JobHandle Type Parameters Name Description TDescription"
  },
  "api/Unity.Entities.LambdaSingleJobDescriptionExecutionMethods.html": {
    "href": "api/Unity.Entities.LambdaSingleJobDescriptionExecutionMethods.html",
    "title": "Class LambdaSingleJobDescriptionExecutionMethods | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class LambdaSingleJobDescriptionExecutionMethods Inheritance Object LambdaSingleJobDescriptionExecutionMethods Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class LambdaSingleJobDescriptionExecutionMethods Methods | Improve this Doc Run<TDescription>(TDescription) Declaration public static void Run<TDescription>(this TDescription description) where TDescription : ILambdaSingleJobExecutionDescription Parameters Type Name Description TDescription description Type Parameters Name Description TDescription | Improve this Doc Schedule<TDescription>(TDescription) Declaration public static void Schedule<TDescription>(this TDescription description) where TDescription : ILambdaSingleJobExecutionDescription Parameters Type Name Description TDescription description Type Parameters Name Description TDescription | Improve this Doc Schedule<TDescription>(TDescription, JobHandle) Declaration public static JobHandle Schedule<TDescription>(this TDescription description, JobHandle dependency) where TDescription : ILambdaSingleJobExecutionDescription Parameters Type Name Description TDescription description JobHandle dependency Returns Type Description JobHandle Type Parameters Name Description TDescription"
  },
  "api/Unity.Entities.JobChunkExtensions.html": {
    "href": "api/Unity.Entities.JobChunkExtensions.html",
    "title": "Class JobChunkExtensions | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class JobChunkExtensions Extensions for scheduling and running IJobChunk Jobs. Inheritance Object JobChunkExtensions Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class JobChunkExtensions Methods | Improve this Doc Run<T>(T, EntityQuery) Runs the Job immediately on the current thread. Declaration public static void Run<T>(this T jobData, EntityQuery query) where T : struct, IJobChunk Parameters Type Name Description T jobData An IJobChunk instance. EntityQuery query The query selecting chunks with the necessary components. Type Parameters Name Description T The specific IJobChunk implementation type. | Improve this Doc RunWithoutJobs<T>(ref T, ref ArchetypeChunkIterator) Runs the job using an ArchetypeChunkIterator instead of the jobs API. Declaration public static void RunWithoutJobs<T>(this ref T jobData, ref ArchetypeChunkIterator chunkIterator) where T : struct, IJobChunk Parameters Type Name Description T jobData The job to execute. ArchetypeChunkIterator chunkIterator The ArchetypeChunkIterator of the EntityQuery to run over. Type Parameters Name Description T The specific IJobChunk implementation type. | Improve this Doc Schedule<T>(T, EntityQuery, JobHandle) Adds an IJobChunk instance to the Job scheduler queue for parallel execution. Note: This method is being replaced with use of ScheduleParallel to make non-sequential execution explicit. Declaration public static JobHandle Schedule<T>(this T jobData, EntityQuery query, JobHandle dependsOn = null) where T : struct, IJobChunk Parameters Type Name Description T jobData An IJobChunk instance. EntityQuery query The query selecting chunks with the necessary components. JobHandle dependsOn The handle identifying already scheduled Jobs that could constrain this Job. A Job that writes to a component must run before other Jobs that read or write that component. Jobs that only read the same components can run in parallel. Returns Type Description JobHandle A handle that combines the current Job with previous dependencies identified by the dependsOn parameter. Type Parameters Name Description T The specific IJobChunk implementation type. | Improve this Doc ScheduleParallel<T>(T, EntityQuery, JobHandle) Adds an IJobChunk instance to the Job scheduler queue for parallel execution. Declaration public static JobHandle ScheduleParallel<T>(this T jobData, EntityQuery query, JobHandle dependsOn = null) where T : struct, IJobChunk Parameters Type Name Description T jobData An IJobChunk instance. EntityQuery query The query selecting chunks with the necessary components. JobHandle dependsOn The handle identifying already scheduled Jobs that could constrain this Job. A Job that writes to a component must run before other Jobs that read or write that component. Jobs that only read the same components can run in parallel. Returns Type Description JobHandle A handle that combines the current Job with previous dependencies identified by the dependsOn parameter. Type Parameters Name Description T The specific IJobChunk implementation type. | Improve this Doc ScheduleSingle<T>(T, EntityQuery, JobHandle) Adds an IJobChunk instance to the Job scheduler queue for sequential (non-parallel) execution. Declaration public static JobHandle ScheduleSingle<T>(this T jobData, EntityQuery query, JobHandle dependsOn = null) where T : struct, IJobChunk Parameters Type Name Description T jobData An IJobChunk instance. EntityQuery query The query selecting chunks with the necessary components. JobHandle dependsOn The handle identifying already scheduled Jobs that could constrain this Job. A Job that writes to a component must run before other Jobs that read or write that component. Jobs that only read the same components can run in parallel. Returns Type Description JobHandle A handle that combines the current Job with previous dependencies identified by the dependsOn parameter. Type Parameters Name Description T The specific IJobChunk implementation type."
  },
  "api/Unity.Entities.InternalCompilerInterface.html": {
    "href": "api/Unity.Entities.InternalCompilerInterface.html",
    "title": "Class InternalCompilerInterface | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class InternalCompilerInterface Inheritance Object InternalCompilerInterface Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class InternalCompilerInterface Methods | Improve this Doc BurstCompile(InternalCompilerInterface.JobChunkRunWithoutJobSystemDelegate) Declaration public static InternalCompilerInterface.JobChunkRunWithoutJobSystemDelegate BurstCompile(InternalCompilerInterface.JobChunkRunWithoutJobSystemDelegate d) Parameters Type Name Description InternalCompilerInterface.JobChunkRunWithoutJobSystemDelegate d Returns Type Description InternalCompilerInterface.JobChunkRunWithoutJobSystemDelegate | Improve this Doc BurstCompile(InternalCompilerInterface.JobRunWithoutJobSystemDelegate) Declaration public static InternalCompilerInterface.JobRunWithoutJobSystemDelegate BurstCompile(InternalCompilerInterface.JobRunWithoutJobSystemDelegate d) Parameters Type Name Description InternalCompilerInterface.JobRunWithoutJobSystemDelegate d Returns Type Description InternalCompilerInterface.JobRunWithoutJobSystemDelegate | Improve this Doc RunIJob<T>(ref T, InternalCompilerInterface.JobRunWithoutJobSystemDelegate) Declaration public static void RunIJob<T>(ref T jobData, InternalCompilerInterface.JobRunWithoutJobSystemDelegate functionPointer) where T : struct, IJob Parameters Type Name Description T jobData InternalCompilerInterface.JobRunWithoutJobSystemDelegate functionPointer Type Parameters Name Description T | Improve this Doc RunJobChunk<T>(ref T, EntityQuery, InternalCompilerInterface.JobChunkRunWithoutJobSystemDelegate) Declaration public static void RunJobChunk<T>(ref T jobData, EntityQuery query, InternalCompilerInterface.JobChunkRunWithoutJobSystemDelegate functionPointer) where T : struct, IJobChunk Parameters Type Name Description T jobData EntityQuery query InternalCompilerInterface.JobChunkRunWithoutJobSystemDelegate functionPointer Type Parameters Name Description T"
  },
  "api/Unity.Entities.InternalCompilerInterface.JobRunWithoutJobSystemDelegate.html": {
    "href": "api/Unity.Entities.InternalCompilerInterface.JobRunWithoutJobSystemDelegate.html",
    "title": "Delegate InternalCompilerInterface.JobRunWithoutJobSystemDelegate | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate InternalCompilerInterface.JobRunWithoutJobSystemDelegate Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void JobRunWithoutJobSystemDelegate(void *job); Parameters Type Name Description Void * job"
  },
  "api/Unity.Entities.InternalCompilerInterface.JobChunkRunWithoutJobSystemDelegate.html": {
    "href": "api/Unity.Entities.InternalCompilerInterface.JobChunkRunWithoutJobSystemDelegate.html",
    "title": "Delegate InternalCompilerInterface.JobChunkRunWithoutJobSystemDelegate | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate InternalCompilerInterface.JobChunkRunWithoutJobSystemDelegate Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void JobChunkRunWithoutJobSystemDelegate(ArchetypeChunkIterator*iterator, void *job); Parameters Type Name Description ArchetypeChunkIterator * iterator Void * job"
  },
  "api/Unity.Entities.IDynamicBufferContainer.html": {
    "href": "api/Unity.Entities.IDynamicBufferContainer.html",
    "title": "Interface IDynamicBufferContainer | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Interface IDynamicBufferContainer Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface IDynamicBufferContainer Properties | Improve this Doc ElementType Declaration Type ElementType { get; } Property Value Type Description Type"
  },
  "api/Unity.Entities.IDeclareReferencedPrefabs.html": {
    "href": "api/Unity.Entities.IDeclareReferencedPrefabs.html",
    "title": "Interface IDeclareReferencedPrefabs | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Interface IDeclareReferencedPrefabs Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface IDeclareReferencedPrefabs Methods | Improve this Doc DeclareReferencedPrefabs(List<GameObject>) Declaration void DeclareReferencedPrefabs(List<GameObject> referencedPrefabs) Parameters Type Name Description List < GameObject > referencedPrefabs"
  },
  "api/Unity.Entities.UniversalDelegates.VVVRR-5.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVRR-5.html",
    "title": "Delegate VVVRR<T0, T1, T2, T3, T4> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VVVRR<T0, T1, T2, T3, T4> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVRR<T0, T1, T2, T3, T4>(T0 t0, T1 t1, T2 t2, ref T3 t3, ref T4 t4); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 Type Parameters Name Description T0 T1 T2 T3 T4"
  },
  "api/Unity.Entities.UniversalDelegates.VVVRIIII-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVRIIII-8.html",
    "title": "Delegate VVVRIIII<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VVVRIIII<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVRIIII<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, T1 t1, T2 t2, ref T3 t3, in T4 t4, in T5 t5, in T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VVVRIII-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVRIII-7.html",
    "title": "Delegate VVVRIII<T0, T1, T2, T3, T4, T5, T6> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VVVRIII<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVRIII<T0, T1, T2, T3, T4, T5, T6>(T0 t0, T1 t1, T2 t2, ref T3 t3, in T4 t4, in T5 t5, in T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.VVVRII-6.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVRII-6.html",
    "title": "Delegate VVVRII<T0, T1, T2, T3, T4, T5> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VVVRII<T0, T1, T2, T3, T4, T5> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVRII<T0, T1, T2, T3, T4, T5>(T0 t0, T1 t1, T2 t2, ref T3 t3, in T4 t4, in T5 t5); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 Type Parameters Name Description T0 T1 T2 T3 T4 T5"
  },
  "api/Unity.Entities.UniversalDelegates.VVVRI-5.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVRI-5.html",
    "title": "Delegate VVVRI<T0, T1, T2, T3, T4> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VVVRI<T0, T1, T2, T3, T4> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVRI<T0, T1, T2, T3, T4>(T0 t0, T1 t1, T2 t2, ref T3 t3, in T4 t4); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 Type Parameters Name Description T0 T1 T2 T3 T4"
  },
  "api/Unity.Entities.UniversalDelegates.VVRIII-6.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVRIII-6.html",
    "title": "Delegate VVRIII<T0, T1, T2, T3, T4, T5> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VVRIII<T0, T1, T2, T3, T4, T5> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVRIII<T0, T1, T2, T3, T4, T5>(T0 t0, T1 t1, ref T2 t2, in T3 t3, in T4 t4, in T5 t5); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 Type Parameters Name Description T0 T1 T2 T3 T4 T5"
  },
  "api/Unity.Entities.UniversalDelegates.VVRII-5.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVRII-5.html",
    "title": "Delegate VVRII<T0, T1, T2, T3, T4> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VVRII<T0, T1, T2, T3, T4> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVRII<T0, T1, T2, T3, T4>(T0 t0, T1 t1, ref T2 t2, in T3 t3, in T4 t4); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 Type Parameters Name Description T0 T1 T2 T3 T4"
  },
  "api/Unity.Entities.UniversalDelegates.VVRI-4.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVRI-4.html",
    "title": "Delegate VVRI<T0, T1, T2, T3> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VVRI<T0, T1, T2, T3> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVRI<T0, T1, T2, T3>(T0 t0, T1 t1, ref T2 t2, in T3 t3); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 Type Parameters Name Description T0 T1 T2 T3"
  },
  "api/Unity.Entities.UniversalDelegates.VVR-3.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVR-3.html",
    "title": "Delegate VVR<T0, T1, T2> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VVR<T0, T1, T2> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVR<T0, T1, T2>(T0 t0, T1 t1, ref T2 t2); Parameters Type Name Description T0 t0 T1 t1 T2 t2 Type Parameters Name Description T0 T1 T2"
  },
  "api/Unity.Entities.UniversalDelegates.VVIIIIII-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVIIIIII-8.html",
    "title": "Delegate VVIIIIII<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VVIIIIII<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVIIIIII<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, T1 t1, in T2 t2, in T3 t3, in T4 t4, in T5 t5, in T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VVIIIII-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVIIIII-7.html",
    "title": "Delegate VVIIIII<T0, T1, T2, T3, T4, T5, T6> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VVIIIII<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVIIIII<T0, T1, T2, T3, T4, T5, T6>(T0 t0, T1 t1, in T2 t2, in T3 t3, in T4 t4, in T5 t5, in T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.VVIIII-6.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVIIII-6.html",
    "title": "Delegate VVIIII<T0, T1, T2, T3, T4, T5> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VVIIII<T0, T1, T2, T3, T4, T5> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVIIII<T0, T1, T2, T3, T4, T5>(T0 t0, T1 t1, in T2 t2, in T3 t3, in T4 t4, in T5 t5); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 Type Parameters Name Description T0 T1 T2 T3 T4 T5"
  },
  "api/Unity.Entities.UniversalDelegates.VVIII-5.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVIII-5.html",
    "title": "Delegate VVIII<T0, T1, T2, T3, T4> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VVIII<T0, T1, T2, T3, T4> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVIII<T0, T1, T2, T3, T4>(T0 t0, T1 t1, in T2 t2, in T3 t3, in T4 t4); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 Type Parameters Name Description T0 T1 T2 T3 T4"
  },
  "api/Unity.Entities.UniversalDelegates.VRIIIIII-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VRIIIIII-8.html",
    "title": "Delegate VRIIIIII<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VRIIIIII<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VRIIIIII<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, ref T1 t1, in T2 t2, in T3 t3, in T4 t4, in T5 t5, in T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VRIIIII-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VRIIIII-7.html",
    "title": "Delegate VRIIIII<T0, T1, T2, T3, T4, T5, T6> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VRIIIII<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VRIIIII<T0, T1, T2, T3, T4, T5, T6>(T0 t0, ref T1 t1, in T2 t2, in T3 t3, in T4 t4, in T5 t5, in T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.InternalBufferCapacityAttribute.html": {
    "href": "api/Unity.Entities.InternalBufferCapacityAttribute.html",
    "title": "Class InternalBufferCapacityAttribute | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class InternalBufferCapacityAttribute Specifies the maximum number of elements to store inside a chunk. Inheritance Object Attribute InternalBufferCapacityAttribute Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [AttributeUsage(AttributeTargets.Struct)] public class InternalBufferCapacityAttribute : Attribute, _Attribute Remarks Use this attribute on the declaration of your IBufferElementData subtype: [InternalBufferCapacity(10)] public struct FloatBufferElement : IBufferElementData { public float Value; } All DynamicBuffer<T> with this type of element store the specified number of elements inside the chunk along with other component types in the same archetype. When the number of elements in the buffer exceeds this limit, the entire buffer is moved outside the chunk. Constructors | Improve this Doc InternalBufferCapacityAttribute(Int32) The number of elements stored inside the chunk. Declaration public InternalBufferCapacityAttribute(int capacity) Parameters Type Name Description Int32 capacity Fields | Improve this Doc Capacity The number of elements stored inside the chunk. Declaration public readonly int Capacity Field Value Type Description Int32"
  },
  "api/Unity.Entities.InitializationSystemGroup.html": {
    "href": "api/Unity.Entities.InitializationSystemGroup.html",
    "title": "Class InitializationSystemGroup | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class InitializationSystemGroup Inheritance Object ComponentSystemBase ComponentSystem ComponentSystemGroup InitializationSystemGroup Inherited Members ComponentSystemGroup.m_systemsToUpdate ComponentSystemGroup.m_systemsToRemove ComponentSystemGroup.Systems ComponentSystemGroup.AddSystemToUpdateList(ComponentSystemBase) ComponentSystemGroup.RemoveSystemFromUpdateList(ComponentSystemBase) ComponentSystemGroup.OnStopRunning() ComponentSystemGroup.UpdateCallback ComponentSystemGroup.OnUpdate() ComponentSystem.PostUpdateCommands ComponentSystem.InitEntityQueryCache(Int32) ComponentSystem.Entities ComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnCreate() ComponentSystemBase.OnDestroyManager() ComponentSystemBase.OnCreateManager() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetArchetypeChunkComponentType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkComponentTypeDynamic(ComponentType) ComponentSystemBase.GetArchetypeChunkBufferType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkSharedComponentType<T>() ComponentSystemBase.GetArchetypeChunkEntityType() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class InitializationSystemGroup : ComponentSystemGroup Constructors | Improve this Doc InitializationSystemGroup() Declaration public InitializationSystemGroup() Methods | Improve this Doc SortSystemUpdateList() Declaration public override void SortSystemUpdateList() Overrides ComponentSystemGroup.SortSystemUpdateList() Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Transforms.RotationEulerSystem.html": {
    "href": "api/Unity.Transforms.RotationEulerSystem.html",
    "title": "Class RotationEulerSystem | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class RotationEulerSystem Inheritance Object ComponentSystemBase JobComponentSystem RotationEulerSystem EndFrameRotationEulerSystem Inherited Members JobComponentSystem.Entities JobComponentSystem.Job JobComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnDestroyManager() ComponentSystemBase.OnCreateManager() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetArchetypeChunkComponentType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkComponentTypeDynamic(ComponentType) ComponentSystemBase.GetArchetypeChunkBufferType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkSharedComponentType<T>() ComponentSystemBase.GetArchetypeChunkEntityType() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public abstract class RotationEulerSystem : JobComponentSystem Methods | Improve this Doc OnCreate() Declaration protected override void OnCreate() Overrides ComponentSystemBase.OnCreate() | Improve this Doc OnUpdate(JobHandle) Declaration protected override JobHandle OnUpdate(JobHandle inputDependencies) Parameters Type Name Description JobHandle inputDependencies Returns Type Description JobHandle Overrides JobComponentSystem.OnUpdate(JobHandle) Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Transforms.Rotation.html": {
    "href": "api/Unity.Transforms.Rotation.html",
    "title": "Struct Rotation | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct Rotation Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] [WriteGroup(typeof(LocalToWorld))] [WriteGroup(typeof(LocalToParent))] [WriteGroup(typeof(CompositeRotation))] public struct Rotation : IComponentData Fields | Improve this Doc Value Declaration public quaternion Value Field Value Type Description quaternion"
  },
  "api/Unity.Transforms.EndFramePostRotationEulerSystem.html": {
    "href": "api/Unity.Transforms.EndFramePostRotationEulerSystem.html",
    "title": "Class EndFramePostRotationEulerSystem | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class EndFramePostRotationEulerSystem Inheritance Object ComponentSystemBase JobComponentSystem PostRotationEulerSystem EndFramePostRotationEulerSystem Inherited Members PostRotationEulerSystem.OnCreate() PostRotationEulerSystem.OnUpdate(JobHandle) JobComponentSystem.Entities JobComponentSystem.Job JobComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnDestroyManager() ComponentSystemBase.OnCreateManager() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetArchetypeChunkComponentType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkComponentTypeDynamic(ComponentType) ComponentSystemBase.GetArchetypeChunkBufferType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkSharedComponentType<T>() ComponentSystemBase.GetArchetypeChunkEntityType() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [UpdateInGroup(typeof(TransformSystemGroup))] public class EndFramePostRotationEulerSystem : PostRotationEulerSystem Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Transforms.EndFrameParentSystem.html": {
    "href": "api/Unity.Transforms.EndFrameParentSystem.html",
    "title": "Class EndFrameParentSystem | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class EndFrameParentSystem Inheritance Object ComponentSystemBase JobComponentSystem ParentSystem EndFrameParentSystem Inherited Members ParentSystem.OnCreate() ParentSystem.OnUpdate(JobHandle) JobComponentSystem.Entities JobComponentSystem.Job JobComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnDestroyManager() ComponentSystemBase.OnCreateManager() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetArchetypeChunkComponentType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkComponentTypeDynamic(ComponentType) ComponentSystemBase.GetArchetypeChunkBufferType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkSharedComponentType<T>() ComponentSystemBase.GetArchetypeChunkEntityType() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [UpdateInGroup(typeof(TransformSystemGroup))] public class EndFrameParentSystem : ParentSystem Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Transforms.EndFrameParentScaleInverseSystem.html": {
    "href": "api/Unity.Transforms.EndFrameParentScaleInverseSystem.html",
    "title": "Class EndFrameParentScaleInverseSystem | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class EndFrameParentScaleInverseSystem Inheritance Object ComponentSystemBase JobComponentSystem ParentScaleInverseSystem EndFrameParentScaleInverseSystem Inherited Members ParentScaleInverseSystem.OnCreate() ParentScaleInverseSystem.OnUpdate(JobHandle) JobComponentSystem.Entities JobComponentSystem.Job JobComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnDestroyManager() ComponentSystemBase.OnCreateManager() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetArchetypeChunkComponentType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkComponentTypeDynamic(ComponentType) ComponentSystemBase.GetArchetypeChunkBufferType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkSharedComponentType<T>() ComponentSystemBase.GetArchetypeChunkEntityType() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [UpdateInGroup(typeof(TransformSystemGroup))] [UpdateAfter(typeof(EndFrameParentSystem))] [UpdateAfter(typeof(EndFrameCompositeRotationSystem))] public class EndFrameParentScaleInverseSystem : ParentScaleInverseSystem Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Transforms.EndFrameLocalToParentSystem.html": {
    "href": "api/Unity.Transforms.EndFrameLocalToParentSystem.html",
    "title": "Class EndFrameLocalToParentSystem | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class EndFrameLocalToParentSystem Inheritance Object ComponentSystemBase JobComponentSystem LocalToParentSystem EndFrameLocalToParentSystem Inherited Members LocalToParentSystem.OnCreate() LocalToParentSystem.OnUpdate(JobHandle) JobComponentSystem.Entities JobComponentSystem.Job JobComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnDestroyManager() ComponentSystemBase.OnCreateManager() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetArchetypeChunkComponentType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkComponentTypeDynamic(ComponentType) ComponentSystemBase.GetArchetypeChunkBufferType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkSharedComponentType<T>() ComponentSystemBase.GetArchetypeChunkEntityType() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [UpdateInGroup(typeof(TransformSystemGroup))] [UpdateAfter(typeof(EndFrameTRSToLocalToParentSystem))] public class EndFrameLocalToParentSystem : LocalToParentSystem Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Transforms.EndFrameCompositeScaleSystem.html": {
    "href": "api/Unity.Transforms.EndFrameCompositeScaleSystem.html",
    "title": "Class EndFrameCompositeScaleSystem | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class EndFrameCompositeScaleSystem Inheritance Object ComponentSystemBase JobComponentSystem CompositeScaleSystem EndFrameCompositeScaleSystem Inherited Members CompositeScaleSystem.OnCreate() CompositeScaleSystem.OnUpdate(JobHandle) JobComponentSystem.Entities JobComponentSystem.Job JobComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnDestroyManager() ComponentSystemBase.OnCreateManager() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetArchetypeChunkComponentType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkComponentTypeDynamic(ComponentType) ComponentSystemBase.GetArchetypeChunkBufferType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkSharedComponentType<T>() ComponentSystemBase.GetArchetypeChunkEntityType() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [UpdateInGroup(typeof(TransformSystemGroup))] public class EndFrameCompositeScaleSystem : CompositeScaleSystem Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Transforms.EndFrameCompositeRotationSystem.html": {
    "href": "api/Unity.Transforms.EndFrameCompositeRotationSystem.html",
    "title": "Class EndFrameCompositeRotationSystem | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class EndFrameCompositeRotationSystem Inheritance Object ComponentSystemBase JobComponentSystem CompositeRotationSystem EndFrameCompositeRotationSystem Inherited Members CompositeRotationSystem.OnCreate() CompositeRotationSystem.OnUpdate(JobHandle) JobComponentSystem.Entities JobComponentSystem.Job JobComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnDestroyManager() ComponentSystemBase.OnCreateManager() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetArchetypeChunkComponentType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkComponentTypeDynamic(ComponentType) ComponentSystemBase.GetArchetypeChunkBufferType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkSharedComponentType<T>() ComponentSystemBase.GetArchetypeChunkEntityType() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [UpdateInGroup(typeof(TransformSystemGroup))] [UpdateAfter(typeof(EndFrameRotationEulerSystem))] public class EndFrameCompositeRotationSystem : CompositeRotationSystem Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Transforms.CopyTransformToGameObjectSystem.html": {
    "href": "api/Unity.Transforms.CopyTransformToGameObjectSystem.html",
    "title": "Class CopyTransformToGameObjectSystem | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class CopyTransformToGameObjectSystem Inheritance Object ComponentSystemBase JobComponentSystem CopyTransformToGameObjectSystem Inherited Members JobComponentSystem.Entities JobComponentSystem.Job JobComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnDestroyManager() ComponentSystemBase.OnCreateManager() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetArchetypeChunkComponentType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkComponentTypeDynamic(ComponentType) ComponentSystemBase.GetArchetypeChunkBufferType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkSharedComponentType<T>() ComponentSystemBase.GetArchetypeChunkEntityType() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [UpdateInGroup(typeof(TransformSystemGroup))] [UpdateAfter(typeof(EndFrameLocalToParentSystem))] public class CopyTransformToGameObjectSystem : JobComponentSystem Methods | Improve this Doc OnCreate() Declaration protected override void OnCreate() Overrides ComponentSystemBase.OnCreate() | Improve this Doc OnUpdate(JobHandle) Declaration protected override JobHandle OnUpdate(JobHandle inputDeps) Parameters Type Name Description JobHandle inputDeps Returns Type Description JobHandle Overrides JobComponentSystem.OnUpdate(JobHandle) Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Transforms.CopyTransformToGameObjectProxy.html": {
    "href": "api/Unity.Transforms.CopyTransformToGameObjectProxy.html",
    "title": "Class CopyTransformToGameObjectProxy | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class CopyTransformToGameObjectProxy Inheritance Object ComponentDataProxyBase ComponentDataProxy < CopyTransformToGameObject > CopyTransformToGameObjectProxy Inherited Members ComponentDataProxy<CopyTransformToGameObject>.ValidateSerializedData(CopyTransformToGameObject) ComponentDataProxy<CopyTransformToGameObject>.Value ComponentDataProxyBase.OnEnable() ComponentDataProxyBase.OnDisable() Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class CopyTransformToGameObjectProxy : ComponentDataProxy<CopyTransformToGameObject>, ISerializationCallbackReceiver"
  },
  "api/Unity.Scenes.Editor.LiveLinkBuildImporter.html": {
    "href": "api/Unity.Scenes.Editor.LiveLinkBuildImporter.html",
    "title": "Class LiveLinkBuildImporter | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class LiveLinkBuildImporter Inheritance Object LiveLinkBuildImporter Namespace : Unity.Scenes.Editor <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class LiveLinkBuildImporter : ScriptedImporter Fields | Improve this Doc k_BundleExtension Declaration public const string k_BundleExtension = \"bundle\" Field Value Type Description String | Improve this Doc k_ManifestExtension Declaration public const string k_ManifestExtension = \"manifest\" Field Value Type Description String Methods | Improve this Doc GetBundlePath(String, BuildTarget) Declaration public static string GetBundlePath(string guid, BuildTarget target) Parameters Type Name Description String guid BuildTarget target Returns Type Description String | Improve this Doc GetDependencies(String, BuildTarget) Declaration public static Hash128[] GetDependencies(string guid, BuildTarget target) Parameters Type Name Description String guid BuildTarget target Returns Type Description Hash128 [] | Improve this Doc GetHash(String, BuildTarget) Declaration public static Hash128 GetHash(string guid, BuildTarget target) Parameters Type Name Description String guid BuildTarget target Returns Type Description Hash128 | Improve this Doc OnImportAsset(AssetImportContext) Declaration public override void OnImportAsset(AssetImportContext ctx) Parameters Type Name Description AssetImportContext ctx"
  },
  "api/Unity.Scenes.Editor.LiveLinkBuildImporter.BuildMetaData.html": {
    "href": "api/Unity.Scenes.Editor.LiveLinkBuildImporter.BuildMetaData.html",
    "title": "Struct LiveLinkBuildImporter.BuildMetaData | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct LiveLinkBuildImporter.BuildMetaData Namespace : Unity.Scenes.Editor <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] public struct BuildMetaData Fields | Improve this Doc Dependencies Declaration public BlobArray<Hash128> Dependencies Field Value Type Description BlobArray < Hash128 >"
  },
  "api/Unity.Scenes.Editor.EditorEntityScenes.html": {
    "href": "api/Unity.Scenes.Editor.EditorEntityScenes.html",
    "title": "Class EditorEntityScenes | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class EditorEntityScenes Inheritance Object EditorEntityScenes Namespace : Unity.Scenes.Editor <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class EditorEntityScenes Methods | Improve this Doc IsEntitySubScene(Scene) Declaration public static bool IsEntitySubScene(Scene scene) Parameters Type Name Description Scene scene Returns Type Description Boolean | Improve this Doc WriteEntityScene(Scene, GameObjectConversionSettings, List<ReferencedUnityObjects>) Declaration public static SceneSectionData[] WriteEntityScene(Scene scene, GameObjectConversionSettings settings, List<ReferencedUnityObjects> sectionRefObjs = null) Parameters Type Name Description Scene scene GameObjectConversionSettings settings List < ReferencedUnityObjects > sectionRefObjs Returns Type Description SceneSectionData []"
  },
  "api/Unity.Entities.UniversalDelegates.VRIIII-6.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VRIIII-6.html",
    "title": "Delegate VRIIII<T0, T1, T2, T3, T4, T5> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VRIIII<T0, T1, T2, T3, T4, T5> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VRIIII<T0, T1, T2, T3, T4, T5>(T0 t0, ref T1 t1, in T2 t2, in T3 t3, in T4 t4, in T5 t5); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 Type Parameters Name Description T0 T1 T2 T3 T4 T5"
  },
  "api/Unity.Entities.UniversalDelegates.VRIII-5.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VRIII-5.html",
    "title": "Delegate VRIII<T0, T1, T2, T3, T4> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VRIII<T0, T1, T2, T3, T4> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VRIII<T0, T1, T2, T3, T4>(T0 t0, ref T1 t1, in T2 t2, in T3 t3, in T4 t4); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 Type Parameters Name Description T0 T1 T2 T3 T4"
  },
  "api/Unity.Entities.UniversalDelegates.VRII-4.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VRII-4.html",
    "title": "Delegate VRII<T0, T1, T2, T3> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VRII<T0, T1, T2, T3> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VRII<T0, T1, T2, T3>(T0 t0, ref T1 t1, in T2 t2, in T3 t3); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 Type Parameters Name Description T0 T1 T2 T3"
  },
  "api/Unity.Entities.UniversalDelegates.VRI-3.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VRI-3.html",
    "title": "Delegate VRI<T0, T1, T2> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VRI<T0, T1, T2> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VRI<T0, T1, T2>(T0 t0, ref T1 t1, in T2 t2); Parameters Type Name Description T0 t0 T1 t1 T2 t2 Type Parameters Name Description T0 T1 T2"
  },
  "api/Unity.Entities.UniversalDelegates.VR-2.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VR-2.html",
    "title": "Delegate VR<T0, T1> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VR<T0, T1> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VR<T0, T1>(T0 t0, ref T1 t1); Parameters Type Name Description T0 t0 T1 t1 Type Parameters Name Description T0 T1"
  },
  "api/Unity.Entities.UniversalDelegates.VIIIIIII-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VIIIIIII-8.html",
    "title": "Delegate VIIIIIII<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VIIIIIII<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VIIIIIII<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, in T1 t1, in T2 t2, in T3 t3, in T4 t4, in T5 t5, in T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.RRRIII-6.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RRRIII-6.html",
    "title": "Delegate RRRIII<T0, T1, T2, T3, T4, T5> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate RRRIII<T0, T1, T2, T3, T4, T5> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RRRIII<T0, T1, T2, T3, T4, T5>(ref T0 t0, ref T1 t1, ref T2 t2, in T3 t3, in T4 t4, in T5 t5); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 Type Parameters Name Description T0 T1 T2 T3 T4 T5"
  },
  "api/Unity.Entities.UniversalDelegates.RRRII-5.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RRRII-5.html",
    "title": "Delegate RRRII<T0, T1, T2, T3, T4> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate RRRII<T0, T1, T2, T3, T4> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RRRII<T0, T1, T2, T3, T4>(ref T0 t0, ref T1 t1, ref T2 t2, in T3 t3, in T4 t4); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 Type Parameters Name Description T0 T1 T2 T3 T4"
  },
  "api/Unity.Entities.UniversalDelegates.RRRI-4.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RRRI-4.html",
    "title": "Delegate RRRI<T0, T1, T2, T3> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate RRRI<T0, T1, T2, T3> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RRRI<T0, T1, T2, T3>(ref T0 t0, ref T1 t1, ref T2 t2, in T3 t3); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 Type Parameters Name Description T0 T1 T2 T3"
  },
  "api/Unity.Entities.UniversalDelegates.RRR-3.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RRR-3.html",
    "title": "Delegate RRR<T0, T1, T2> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate RRR<T0, T1, T2> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RRR<T0, T1, T2>(ref T0 t0, ref T1 t1, ref T2 t2); Parameters Type Name Description T0 t0 T1 t1 T2 t2 Type Parameters Name Description T0 T1 T2"
  },
  "api/Unity.Entities.UniversalDelegates.RRIIIIII-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RRIIIIII-8.html",
    "title": "Delegate RRIIIIII<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate RRIIIIII<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RRIIIIII<T0, T1, T2, T3, T4, T5, T6, T7>(ref T0 t0, ref T1 t1, in T2 t2, in T3 t3, in T4 t4, in T5 t5, in T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.RRIIIII-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RRIIIII-7.html",
    "title": "Delegate RRIIIII<T0, T1, T2, T3, T4, T5, T6> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate RRIIIII<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RRIIIII<T0, T1, T2, T3, T4, T5, T6>(ref T0 t0, ref T1 t1, in T2 t2, in T3 t3, in T4 t4, in T5 t5, in T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.RRIIII-6.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RRIIII-6.html",
    "title": "Delegate RRIIII<T0, T1, T2, T3, T4, T5> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate RRIIII<T0, T1, T2, T3, T4, T5> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RRIIII<T0, T1, T2, T3, T4, T5>(ref T0 t0, ref T1 t1, in T2 t2, in T3 t3, in T4 t4, in T5 t5); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 Type Parameters Name Description T0 T1 T2 T3 T4 T5"
  },
  "api/Unity.Entities.UniversalDelegates.RRIII-5.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RRIII-5.html",
    "title": "Delegate RRIII<T0, T1, T2, T3, T4> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate RRIII<T0, T1, T2, T3, T4> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RRIII<T0, T1, T2, T3, T4>(ref T0 t0, ref T1 t1, in T2 t2, in T3 t3, in T4 t4); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 Type Parameters Name Description T0 T1 T2 T3 T4"
  },
  "api/Unity.Entities.TypeManager.ForcedMemoryOrderingAttribute.html": {
    "href": "api/Unity.Entities.TypeManager.ForcedMemoryOrderingAttribute.html",
    "title": "Class TypeManager.ForcedMemoryOrderingAttribute | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class TypeManager.ForcedMemoryOrderingAttribute Inheritance Object Attribute TypeManager.ForcedMemoryOrderingAttribute Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [AttributeUsage(AttributeTargets.Struct)] public class ForcedMemoryOrderingAttribute : Attribute, _Attribute Constructors | Improve this Doc ForcedMemoryOrderingAttribute(UInt64) Declaration public ForcedMemoryOrderingAttribute(ulong ordering) Parameters Type Name Description UInt64 ordering Fields | Improve this Doc MemoryOrdering Declaration public ulong MemoryOrdering Field Value Type Description UInt64"
  },
  "api/Unity.Entities.TypeManager.EntityOffsetInfo.html": {
    "href": "api/Unity.Entities.TypeManager.EntityOffsetInfo.html",
    "title": "Struct TypeManager.EntityOffsetInfo | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct TypeManager.EntityOffsetInfo Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct EntityOffsetInfo Fields | Improve this Doc Offset Declaration public int Offset Field Value Type Description Int32"
  },
  "api/Unity.Entities.TypeHash.html": {
    "href": "api/Unity.Entities.TypeHash.html",
    "title": "Class TypeHash | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class TypeHash Inheritance Object TypeHash Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class TypeHash Methods | Improve this Doc CalculateMemoryOrdering(Type) Declaration public static ulong CalculateMemoryOrdering(Type type) Parameters Type Name Description Type type Returns Type Description UInt64 | Improve this Doc CalculateStableTypeHash(Type) Declaration public static ulong CalculateStableTypeHash(Type type) Parameters Type Name Description Type type Returns Type Description UInt64 | Improve this Doc CombineFNV1A64(UInt64, UInt64[]) Declaration public static ulong CombineFNV1A64(ulong hash, params ulong[] values) Parameters Type Name Description UInt64 hash UInt64 [] values Returns Type Description UInt64 | Improve this Doc FNV1A64(Int32) Declaration public static ulong FNV1A64(int val) Parameters Type Name Description Int32 val Returns Type Description UInt64 | Improve this Doc FNV1A64(String) Declaration public static ulong FNV1A64(string text) Parameters Type Name Description String text Returns Type Description UInt64 | Improve this Doc HashType(Type, Int32) Declaration public static ulong HashType(Type type, int fieldIndex = 0) Parameters Type Name Description Type type Int32 fieldIndex Returns Type Description UInt64"
  },
  "api/Unity.Transforms.ParentSystem.html": {
    "href": "api/Unity.Transforms.ParentSystem.html",
    "title": "Class ParentSystem | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class ParentSystem Inheritance Object ComponentSystemBase JobComponentSystem ParentSystem EndFrameParentSystem Inherited Members JobComponentSystem.Entities JobComponentSystem.Job JobComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnDestroyManager() ComponentSystemBase.OnCreateManager() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetArchetypeChunkComponentType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkComponentTypeDynamic(ComponentType) ComponentSystemBase.GetArchetypeChunkBufferType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkSharedComponentType<T>() ComponentSystemBase.GetArchetypeChunkEntityType() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public abstract class ParentSystem : JobComponentSystem Methods | Improve this Doc OnCreate() Declaration protected override void OnCreate() Overrides ComponentSystemBase.OnCreate() | Improve this Doc OnUpdate(JobHandle) Declaration protected override JobHandle OnUpdate(JobHandle inputDeps) Parameters Type Name Description JobHandle inputDeps Returns Type Description JobHandle Overrides JobComponentSystem.OnUpdate(JobHandle) Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Transforms.ParentScaleInverseSystem.html": {
    "href": "api/Unity.Transforms.ParentScaleInverseSystem.html",
    "title": "Class ParentScaleInverseSystem | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class ParentScaleInverseSystem Inheritance Object ComponentSystemBase JobComponentSystem ParentScaleInverseSystem EndFrameParentScaleInverseSystem Inherited Members JobComponentSystem.Entities JobComponentSystem.Job JobComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnDestroyManager() ComponentSystemBase.OnCreateManager() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetArchetypeChunkComponentType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkComponentTypeDynamic(ComponentType) ComponentSystemBase.GetArchetypeChunkBufferType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkSharedComponentType<T>() ComponentSystemBase.GetArchetypeChunkEntityType() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public abstract class ParentScaleInverseSystem : JobComponentSystem Methods | Improve this Doc OnCreate() Declaration protected override void OnCreate() Overrides ComponentSystemBase.OnCreate() | Improve this Doc OnUpdate(JobHandle) Declaration protected override JobHandle OnUpdate(JobHandle inputDeps) Parameters Type Name Description JobHandle inputDeps Returns Type Description JobHandle Overrides JobComponentSystem.OnUpdate(JobHandle) Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Transforms.ParentScaleInverse.html": {
    "href": "api/Unity.Transforms.ParentScaleInverse.html",
    "title": "Struct ParentScaleInverse | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct ParentScaleInverse Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] [WriteGroup(typeof(LocalToParent))] public struct ParentScaleInverse : IComponentData Fields | Improve this Doc Value Declaration public float4x4 Value Field Value Type Description float4x4 Properties | Improve this Doc Forward Declaration public float3 Forward { get; } Property Value Type Description float3 | Improve this Doc Position Declaration public float3 Position { get; } Property Value Type Description float3 | Improve this Doc Right Declaration public float3 Right { get; } Property Value Type Description float3 | Improve this Doc Up Declaration public float3 Up { get; } Property Value Type Description float3"
  },
  "api/Unity.Entities.UniversalDelegates.RRRRI-5.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RRRRI-5.html",
    "title": "Delegate RRRRI<T0, T1, T2, T3, T4> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate RRRRI<T0, T1, T2, T3, T4> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RRRRI<T0, T1, T2, T3, T4>(ref T0 t0, ref T1 t1, ref T2 t2, ref T3 t3, in T4 t4); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 Type Parameters Name Description T0 T1 T2 T3 T4"
  },
  "api/Unity.Entities.UniversalDelegates.RRRR-4.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RRRR-4.html",
    "title": "Delegate RRRR<T0, T1, T2, T3> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate RRRR<T0, T1, T2, T3> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RRRR<T0, T1, T2, T3>(ref T0 t0, ref T1 t1, ref T2 t2, ref T3 t3); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 Type Parameters Name Description T0 T1 T2 T3"
  },
  "api/Unity.Entities.UniversalDelegates.RRRIIIII-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RRRIIIII-8.html",
    "title": "Delegate RRRIIIII<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate RRRIIIII<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RRRIIIII<T0, T1, T2, T3, T4, T5, T6, T7>(ref T0 t0, ref T1 t1, ref T2 t2, in T3 t3, in T4 t4, in T5 t5, in T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.RRRIIII-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RRRIIII-7.html",
    "title": "Delegate RRRIIII<T0, T1, T2, T3, T4, T5, T6> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate RRRIIII<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RRRIIII<T0, T1, T2, T3, T4, T5, T6>(ref T0 t0, ref T1 t1, ref T2 t2, in T3 t3, in T4 t4, in T5 t5, in T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.III-3.html": {
    "href": "api/Unity.Entities.UniversalDelegates.III-3.html",
    "title": "Delegate III<T0, T1, T2> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate III<T0, T1, T2> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void III<T0, T1, T2>(in T0 t0, in T1 t1, in T2 t2); Parameters Type Name Description T0 t0 T1 t1 T2 t2 Type Parameters Name Description T0 T1 T2"
  },
  "api/Unity.Entities.UniversalDelegates.II-2.html": {
    "href": "api/Unity.Entities.UniversalDelegates.II-2.html",
    "title": "Delegate II<T0, T1> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate II<T0, T1> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void II<T0, T1>(in T0 t0, in T1 t1); Parameters Type Name Description T0 t0 T1 t1 Type Parameters Name Description T0 T1"
  },
  "api/Unity.Entities.UniversalDelegates.I-1.html": {
    "href": "api/Unity.Entities.UniversalDelegates.I-1.html",
    "title": "Delegate I<T0> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate I<T0> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void I<T0>(in T0 t0); Parameters Type Name Description T0 t0 Type Parameters Name Description T0"
  },
  "api/Unity.Entities.TypeManager.html": {
    "href": "api/Unity.Entities.TypeManager.html",
    "title": "Class TypeManager | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class TypeManager Inheritance Object TypeManager Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class TypeManager Fields | Improve this Doc BufferComponentTypeFlag Declaration public const int BufferComponentTypeFlag = 67108864 Field Value Type Description Int32 | Improve this Doc ChunkComponentTypeFlag Declaration public const int ChunkComponentTypeFlag = 536870912 Field Value Type Description Int32 | Improve this Doc ClearFlagsMask Declaration public const int ClearFlagsMask = 16777215 Field Value Type Description Int32 | Improve this Doc DefaultBufferCapacityNumerator BufferCapacity is by default calculated as DefaultBufferCapacityNumerator / sizeof(BufferElementDataType) thus for a 1 byte component, the maximum number of elements possible to be stored in chunk memory before the buffer is allocated separately from chunk data, is DefaultBufferCapacityNumerator elements. For a 2 byte sized component, (DefaultBufferCapacityNumerator / 2) elements can be stored, etc... Declaration public const int DefaultBufferCapacityNumerator = 128 Field Value Type Description Int32 | Improve this Doc HasNoEntityReferencesFlag Declaration public const int HasNoEntityReferencesFlag = 16777216 Field Value Type Description Int32 | Improve this Doc ManagedComponentTypeFlag Declaration public const int ManagedComponentTypeFlag = 268435456 Field Value Type Description Int32 | Improve this Doc MaximumChunkCapacity Declaration public const int MaximumChunkCapacity = 2147483647 Field Value Type Description Int32 | Improve this Doc MaximumSupportedAlignment Declaration public const int MaximumSupportedAlignment = 16 Field Value Type Description Int32 | Improve this Doc MaximumTypesCount Declaration public const int MaximumTypesCount = 10240 Field Value Type Description Int32 | Improve this Doc ObjectOffset Declaration public static int ObjectOffset Field Value Type Description Int32 | Improve this Doc SharedComponentTypeFlag Declaration public const int SharedComponentTypeFlag = 134217728 Field Value Type Description Int32 | Improve this Doc SystemStateSharedComponentTypeFlag Declaration public const int SystemStateSharedComponentTypeFlag = 167772160 Field Value Type Description Int32 | Improve this Doc SystemStateTypeFlag Declaration public const int SystemStateTypeFlag = 33554432 Field Value Type Description Int32 | Improve this Doc ZeroSizeInChunkTypeFlag Declaration public const int ZeroSizeInChunkTypeFlag = 1073741824 Field Value Type Description Int32 Properties | Improve this Doc AllTypes Declaration public static IEnumerable<TypeManager.TypeInfo> AllTypes { get; } Property Value Type Description IEnumerable < TypeManager.TypeInfo > Methods | Improve this Doc CheckIsAllowedAsComponentData(Type, String) Declaration [Conditional(\"ENABLE_UNITY_COLLECTIONS_CHECKS\")] public static void CheckIsAllowedAsComponentData(Type type, string baseTypeDesc) Parameters Type Name Description Type type String baseTypeDesc | Improve this Doc CheckIsAllowedAsManagedComponentData(Type, String) Declaration [Conditional(\"ENABLE_UNITY_COLLECTIONS_CHECKS\")] public static void CheckIsAllowedAsManagedComponentData(Type type, string baseTypeDesc) Parameters Type Name Description Type type String baseTypeDesc | Improve this Doc ConstructComponentFromBuffer(Int32, Void*) Declaration public static object ConstructComponentFromBuffer(int typeIndex, void *data) Parameters Type Name Description Int32 typeIndex Void * data Returns Type Description Object | Improve this Doc ConstructSystem(Type) Construct a System from a Type. Uses the same list in GetSystems() Declaration public static ComponentSystemBase ConstructSystem(Type systemType) Parameters Type Name Description Type systemType Returns Type Description ComponentSystemBase | Improve this Doc ConstructSystem<T>() Declaration public static T ConstructSystem<T>() where T : ComponentSystemBase Returns Type Description T Type Parameters Name Description T | Improve this Doc ConstructSystem<T>(Type) Declaration public static T ConstructSystem<T>(Type systemType) where T : ComponentSystemBase Parameters Type Name Description Type systemType Returns Type Description T Type Parameters Name Description T | Improve this Doc Equals(Object, Object, Int32) Declaration public static bool Equals(object left, object right, int typeIndex) Parameters Type Name Description Object left Object right Int32 typeIndex Returns Type Description Boolean | Improve this Doc Equals(Object, Void*, Int32) Declaration public static bool Equals(object left, void *right, int typeIndex) Parameters Type Name Description Object left Void * right Int32 typeIndex Returns Type Description Boolean | Improve this Doc Equals(Void*, Void*, Int32) Declaration public static bool Equals(void *left, void *right, int typeIndex) Parameters Type Name Description Void * left Void * right Int32 typeIndex Returns Type Description Boolean | Improve this Doc Equals<T>(ref T, ref T) Declaration public static bool Equals<T>(ref T left, ref T right) where T : struct Parameters Type Name Description T left T right Returns Type Description Boolean Type Parameters Name Description T | Improve this Doc GetAllTypes() Declaration public static TypeManager.TypeInfo[] GetAllTypes() Returns Type Description TypeManager.TypeInfo [] | Improve this Doc GetEntityOffsets(Int32) Declaration public static TypeManager.EntityOffsetInfo*GetEntityOffsets(int typeIndex) Parameters Type Name Description Int32 typeIndex Returns Type Description TypeManager.EntityOffsetInfo * | Improve this Doc GetFastEqualityTypeInfo(TypeManager.TypeInfo) Declaration public static FastEquality.TypeInfo GetFastEqualityTypeInfo(TypeManager.TypeInfo typeInfo) Parameters Type Name Description TypeManager.TypeInfo typeInfo Returns Type Description FastEquality.TypeInfo | Improve this Doc GetHashCode(Object, Int32) Declaration public static int GetHashCode(object val, int typeIndex) Parameters Type Name Description Object val Int32 typeIndex Returns Type Description Int32 | Improve this Doc GetHashCode(Void*, Int32) Declaration public static int GetHashCode(void *val, int typeIndex) Parameters Type Name Description Void * val Int32 typeIndex Returns Type Description Int32 | Improve this Doc GetHashCode<T>(ref T) Declaration public static int GetHashCode<T>(ref T val) where T : struct Parameters Type Name Description T val Returns Type Description Int32 Type Parameters Name Description T | Improve this Doc GetSystemAttributes(Type, Type) Get all the attribute objects of Type attributeType for a System. Declaration public static Attribute[] GetSystemAttributes(Type systemType, Type attributeType) Parameters Type Name Description Type systemType Type attributeType Returns Type Description Attribute [] | Improve this Doc GetSystemName(Type) Declaration public static string GetSystemName(Type t) Parameters Type Name Description Type t Returns Type Description String | Improve this Doc GetSystems() Return an array of all the Systems in use. (They are found at compile time, and inserted by code generation.) Declaration public static Type[] GetSystems() Returns Type Description Type [] | Improve this Doc GetSystemTypeIndex(Type) Declaration public static int GetSystemTypeIndex(Type t) Parameters Type Name Description Type t Returns Type Description Int32 | Improve this Doc GetType(Int32) Declaration public static Type GetType(int typeIndex) Parameters Type Name Description Int32 typeIndex Returns Type Description Type | Improve this Doc GetTypeCount() Declaration public static int GetTypeCount() Returns Type Description Int32 | Improve this Doc GetTypeIndex(Type) Declaration public static int GetTypeIndex(Type type) Parameters Type Name Description Type type Returns Type Description Int32 | Improve this Doc GetTypeIndex<T>() Declaration public static int GetTypeIndex<T>() Returns Type Description Int32 Type Parameters Name Description T | Improve this Doc GetTypeIndexFromStableTypeHash(UInt64) Declaration public static int GetTypeIndexFromStableTypeHash(ulong stableTypeHash) Parameters Type Name Description UInt64 stableTypeHash Returns Type Description Int32 | Improve this Doc GetTypeInfo(Int32) Declaration public static TypeManager.TypeInfo GetTypeInfo(int typeIndex) Parameters Type Name Description Int32 typeIndex Returns Type Description TypeManager.TypeInfo | Improve this Doc GetTypeInfo<T>() Declaration public static TypeManager.TypeInfo GetTypeInfo<T>() Returns Type Description TypeManager.TypeInfo Type Parameters Name Description T | Improve this Doc GetWriteGroupTypes(Int32) Declaration public static NativeArray<int> GetWriteGroupTypes(int typeIndex) Parameters Type Name Description Int32 typeIndex Returns Type Description NativeArray < Int32 > | Improve this Doc HasEntityReferences(Int32) Declaration public static bool HasEntityReferences(int typeIndex) Parameters Type Name Description Int32 typeIndex Returns Type Description Boolean | Improve this Doc Initialize() Initializes the TypeManager with all ECS type information. May be called multiple times; only the first call will do any work. Always must be called from the main thread. Declaration public static void Initialize() | Improve this Doc IsAssemblyReferencingEntities(Assembly) Declaration public static bool IsAssemblyReferencingEntities(Assembly assembly) Parameters Type Name Description Assembly assembly Returns Type Description Boolean | Improve this Doc IsAssemblyReferencingUnityEngine(Assembly) Declaration public static bool IsAssemblyReferencingUnityEngine(Assembly assembly) Parameters Type Name Description Assembly assembly Returns Type Description Boolean | Improve this Doc IsBuffer(Int32) Declaration public static bool IsBuffer(int typeIndex) Parameters Type Name Description Int32 typeIndex Returns Type Description Boolean | Improve this Doc IsChunkComponent(Int32) Declaration public static bool IsChunkComponent(int typeIndex) Parameters Type Name Description Int32 typeIndex Returns Type Description Boolean | Improve this Doc IsManagedComponent(Int32) Declaration public static bool IsManagedComponent(int typeIndex) Parameters Type Name Description Int32 typeIndex Returns Type Description Boolean | Improve this Doc IsSharedComponent(Int32) Declaration public static bool IsSharedComponent(int typeIndex) Parameters Type Name Description Int32 typeIndex Returns Type Description Boolean | Improve this Doc IsSystemAGroup(Type) Declaration public static bool IsSystemAGroup(Type t) Parameters Type Name Description Type t Returns Type Description Boolean | Improve this Doc IsSystemStateComponent(Int32) Declaration public static bool IsSystemStateComponent(int typeIndex) Parameters Type Name Description Int32 typeIndex Returns Type Description Boolean | Improve this Doc IsSystemStateSharedComponent(Int32) Declaration public static bool IsSystemStateSharedComponent(int typeIndex) Parameters Type Name Description Int32 typeIndex Returns Type Description Boolean | Improve this Doc IsZeroSized(Int32) Declaration public static bool IsZeroSized(int typeIndex) Parameters Type Name Description Int32 typeIndex Returns Type Description Boolean | Improve this Doc MakeChunkComponentTypeIndex(Int32) Declaration public static int MakeChunkComponentTypeIndex(int typeIndex) Parameters Type Name Description Int32 typeIndex Returns Type Description Int32 | Improve this Doc RegisterUnityEngineObjectType(Type) Declaration public static void RegisterUnityEngineObjectType(Type type) Parameters Type Name Description Type type | Improve this Doc Shutdown() Removes all ECS type information and any allocated memory. May only be called once globally, and must be called from the main thread. Declaration public static void Shutdown() | Improve this Doc ThrowOnDisallowedComponentData(Type, Type, String) Declaration [Conditional(\"ENABLE_UNITY_COLLECTIONS_CHECKS\")] public static void ThrowOnDisallowedComponentData(Type type, Type baseType, string baseTypeDesc) Parameters Type Name Description Type type Type baseType String baseTypeDesc | Improve this Doc ThrowOnDisallowedManagedComponentData(Type, Type, String) Declaration [Conditional(\"ENABLE_UNITY_COLLECTIONS_CHECKS\")] public static void ThrowOnDisallowedManagedComponentData(Type type, Type baseType, string baseTypeDesc) Parameters Type Name Description Type type Type baseType String baseTypeDesc"
  },
  "api/Unity.Entities.TypeManager.TypeVersionAttribute.html": {
    "href": "api/Unity.Entities.TypeManager.TypeVersionAttribute.html",
    "title": "Class TypeManager.TypeVersionAttribute | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class TypeManager.TypeVersionAttribute Inheritance Object Attribute TypeManager.TypeVersionAttribute Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [AttributeUsage(AttributeTargets.Struct)] public class TypeVersionAttribute : Attribute, _Attribute Constructors | Improve this Doc TypeVersionAttribute(Int32) Declaration public TypeVersionAttribute(int version) Parameters Type Name Description Int32 version Fields | Improve this Doc TypeVersion Declaration public int TypeVersion Field Value Type Description Int32"
  },
  "api/Unity.Entities.TypeManager.TypeInfoDebug.html": {
    "href": "api/Unity.Entities.TypeManager.TypeInfoDebug.html",
    "title": "Struct TypeManager.TypeInfoDebug | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct TypeManager.TypeInfoDebug Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct TypeInfoDebug Constructors | Improve this Doc TypeInfoDebug(TypeManager.TypeInfo) Declaration public TypeInfoDebug(TypeManager.TypeInfo typeInfo) Parameters Type Name Description TypeManager.TypeInfo typeInfo Properties | Improve this Doc TypeName Declaration public string TypeName { get; } Property Value Type Description String"
  },
  "api/Unity.Entities.TypeManager.TypeInfo.html": {
    "href": "api/Unity.Entities.TypeManager.TypeInfo.html",
    "title": "Struct TypeManager.TypeInfo | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct TypeManager.TypeInfo Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct TypeInfo Constructors | Improve this Doc TypeInfo(Int32, TypeManager.TypeCategory, Int32, Int32, UInt64, UInt64, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32) Declaration public TypeInfo(int typeIndex, TypeManager.TypeCategory category, int entityOffsetCount, int entityOffsetStartIndex, ulong memoryOrdering, ulong stableTypeHash, int bufferCapacity, int sizeInChunk, int elementSize, int alignmentInBytes, int maximumChunkCapacity, int writeGroupCount, int writeGroupStartIndex, int blobAssetRefOffsetCount, int blobAssetRefOffsetStartIndex, int fastEqualityIndex, int typeSize) Parameters Type Name Description Int32 typeIndex TypeManager.TypeCategory category Int32 entityOffsetCount Int32 entityOffsetStartIndex UInt64 memoryOrdering UInt64 stableTypeHash Int32 bufferCapacity Int32 sizeInChunk Int32 elementSize Int32 alignmentInBytes Int32 maximumChunkCapacity Int32 writeGroupCount Int32 writeGroupStartIndex Int32 blobAssetRefOffsetCount Int32 blobAssetRefOffsetStartIndex Int32 fastEqualityIndex Int32 typeSize Fields | Improve this Doc AlignmentInBytes Declaration public int AlignmentInBytes Field Value Type Description Int32 | Improve this Doc BlobAssetRefOffsetCount Declaration public int BlobAssetRefOffsetCount Field Value Type Description Int32 | Improve this Doc BufferCapacity Declaration public int BufferCapacity Field Value Type Description Int32 | Improve this Doc Category Declaration public TypeManager.TypeCategory Category Field Value Type Description TypeManager.TypeCategory | Improve this Doc ElementSize Declaration public int ElementSize Field Value Type Description Int32 | Improve this Doc EntityOffsetCount Declaration public int EntityOffsetCount Field Value Type Description Int32 | Improve this Doc MaximumChunkCapacity Declaration public int MaximumChunkCapacity Field Value Type Description Int32 | Improve this Doc MemoryOrdering Declaration public ulong MemoryOrdering Field Value Type Description UInt64 | Improve this Doc SizeInChunk Declaration public int SizeInChunk Field Value Type Description Int32 | Improve this Doc StableTypeHash Declaration public ulong StableTypeHash Field Value Type Description UInt64 | Improve this Doc TypeIndex Declaration public int TypeIndex Field Value Type Description Int32 | Improve this Doc TypeSize Declaration public int TypeSize Field Value Type Description Int32 | Improve this Doc WriteGroupCount Declaration public int WriteGroupCount Field Value Type Description Int32 Properties | Improve this Doc AlignmentInChunkInBytes Declaration public int AlignmentInChunkInBytes { get; } Property Value Type Description Int32 | Improve this Doc Debug Provides debug type information. This information may be stripped in non-debug builds Declaration public TypeManager.TypeInfoDebug Debug { get; } Property Value Type Description TypeManager.TypeInfoDebug | Improve this Doc HasEntities Declaration public bool HasEntities { get; } Property Value Type Description Boolean | Improve this Doc HasWriteGroups Declaration public bool HasWriteGroups { get; } Property Value Type Description Boolean | Improve this Doc IsZeroSized Declaration public bool IsZeroSized { get; } Property Value Type Description Boolean | Improve this Doc Type Declaration public Type Type { get; } Property Value Type Description Type"
  },
  "api/Unity.Entities.TypeManager.TypeCategory.html": {
    "href": "api/Unity.Entities.TypeManager.TypeCategory.html",
    "title": "Enum TypeManager.TypeCategory | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Enum TypeManager.TypeCategory Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public enum TypeCategory Fields Name Description BufferData Implements IBufferElementData (struct only) Class Inherits from UnityEngine.Object (class only) ComponentData Implements IComponentData (can be either a struct or a class) EntityData Is an Entity ISharedComponentData Implement ISharedComponentData (struct only)"
  },
  "api/Unity.Entities.Serialization.BinaryWriterExtensions.html": {
    "href": "api/Unity.Entities.Serialization.BinaryWriterExtensions.html",
    "title": "Class BinaryWriterExtensions | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class BinaryWriterExtensions Inheritance Object BinaryWriterExtensions Namespace : Unity.Entities.Serialization <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class BinaryWriterExtensions Methods | Improve this Doc Write(BinaryWriter, Byte) Declaration public static void Write(this BinaryWriter writer, byte value) Parameters Type Name Description BinaryWriter writer Byte value | Improve this Doc Write(BinaryWriter, Byte[]) Declaration public static void Write(this BinaryWriter writer, byte[] bytes) Parameters Type Name Description BinaryWriter writer Byte [] bytes | Improve this Doc Write(BinaryWriter, Int32) Declaration public static void Write(this BinaryWriter writer, int value) Parameters Type Name Description BinaryWriter writer Int32 value | Improve this Doc Write(BinaryWriter, UInt64) Declaration public static void Write(this BinaryWriter writer, ulong value) Parameters Type Name Description BinaryWriter writer UInt64 value | Improve this Doc WriteArray<T>(BinaryWriter, NativeArray<T>) Declaration public static void WriteArray<T>(this BinaryWriter writer, NativeArray<T> data) where T : struct Parameters Type Name Description BinaryWriter writer NativeArray <T> data Type Parameters Name Description T | Improve this Doc WriteList<T>(BinaryWriter, NativeList<T>) Declaration public static void WriteList<T>(this BinaryWriter writer, NativeList<T> data) where T : struct Parameters Type Name Description BinaryWriter writer NativeList <T> data Type Parameters Name Description T"
  },
  "api/Unity.Entities.Serialization.BinaryWriter.html": {
    "href": "api/Unity.Entities.Serialization.BinaryWriter.html",
    "title": "Interface BinaryWriter | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Interface BinaryWriter Namespace : Unity.Entities.Serialization <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface BinaryWriter : IDisposable Methods | Improve this Doc WriteBytes(Void*, Int32) Declaration void WriteBytes(void *data, int bytes) Parameters Type Name Description Void * data Int32 bytes Extension Methods BlobAssetSerializeExtensions.Write<T>(BinaryWriter, BlobAssetReference<T>) BinaryWriterExtensions.Write(BinaryWriter, Byte) BinaryWriterExtensions.Write(BinaryWriter, Int32) BinaryWriterExtensions.Write(BinaryWriter, UInt64) BinaryWriterExtensions.Write(BinaryWriter, Byte[]) BinaryWriterExtensions.WriteArray<T>(BinaryWriter, NativeArray<T>) BinaryWriterExtensions.WriteList<T>(BinaryWriter, NativeList<T>)"
  },
  "api/Unity.Entities.Serialization.BinaryReaderExtensions.html": {
    "href": "api/Unity.Entities.Serialization.BinaryReaderExtensions.html",
    "title": "Class BinaryReaderExtensions | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class BinaryReaderExtensions Inheritance Object BinaryReaderExtensions Namespace : Unity.Entities.Serialization <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class BinaryReaderExtensions Methods | Improve this Doc ReadArray<T>(BinaryReader, NativeArray<T>, Int32) Declaration public static void ReadArray<T>(this BinaryReader reader, NativeArray<T> elements, int count) where T : struct Parameters Type Name Description BinaryReader reader NativeArray <T> elements Int32 count Type Parameters Name Description T | Improve this Doc ReadByte(BinaryReader) Declaration public static byte ReadByte(this BinaryReader reader) Parameters Type Name Description BinaryReader reader Returns Type Description Byte | Improve this Doc ReadBytes(BinaryReader, NativeArray<Byte>, Int32, Int32) Declaration public static void ReadBytes(this BinaryReader writer, NativeArray<byte> elements, int count, int offset = 0) Parameters Type Name Description BinaryReader writer NativeArray < Byte > elements Int32 count Int32 offset | Improve this Doc ReadInt(BinaryReader) Declaration public static int ReadInt(this BinaryReader reader) Parameters Type Name Description BinaryReader reader Returns Type Description Int32 | Improve this Doc ReadULong(BinaryReader) Declaration public static ulong ReadULong(this BinaryReader reader) Parameters Type Name Description BinaryReader reader Returns Type Description UInt64"
  },
  "api/Unity.Entities.Serialization.BinaryReader.html": {
    "href": "api/Unity.Entities.Serialization.BinaryReader.html",
    "title": "Interface BinaryReader | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Interface BinaryReader Namespace : Unity.Entities.Serialization <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface BinaryReader : IDisposable Methods | Improve this Doc ReadBytes(Void*, Int32) Declaration void ReadBytes(void *data, int bytes) Parameters Type Name Description Void * data Int32 bytes Extension Methods BlobAssetSerializeExtensions.Read<T>(BinaryReader) BinaryReaderExtensions.ReadByte(BinaryReader) BinaryReaderExtensions.ReadInt(BinaryReader) BinaryReaderExtensions.ReadULong(BinaryReader) BinaryReaderExtensions.ReadBytes(BinaryReader, NativeArray<Byte>, Int32, Int32) BinaryReaderExtensions.ReadArray<T>(BinaryReader, NativeArray<T>, Int32)"
  },
  "api/Unity.Entities.RequiresEntityConversionAttribute.html": {
    "href": "api/Unity.Entities.RequiresEntityConversionAttribute.html",
    "title": "Class RequiresEntityConversionAttribute | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class RequiresEntityConversionAttribute Inheritance Object Attribute RequiresEntityConversionAttribute Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [AttributeUsage(AttributeTargets.Class)] public class RequiresEntityConversionAttribute : Attribute, _Attribute"
  },
  "api/Unity.Entities.RequireComponentTagAttribute.html": {
    "href": "api/Unity.Entities.RequireComponentTagAttribute.html",
    "title": "Class RequireComponentTagAttribute | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class RequireComponentTagAttribute Inheritance Object Attribute RequireComponentTagAttribute Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [AttributeUsage(AttributeTargets.Struct)] public class RequireComponentTagAttribute : Attribute, _Attribute Constructors | Improve this Doc RequireComponentTagAttribute(Type[]) Declaration public RequireComponentTagAttribute(params Type[] tagComponents) Parameters Type Name Description Type [] tagComponents Fields | Improve this Doc TagComponents Declaration public Type[] TagComponents Field Value Type Description Type []"
  },
  "api/Unity.Entities.RequestSceneLoaded.html": {
    "href": "api/Unity.Entities.RequestSceneLoaded.html",
    "title": "Struct RequestSceneLoaded | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct RequestSceneLoaded Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct RequestSceneLoaded : IComponentData Fields | Improve this Doc LoadFlags Declaration public SceneLoadFlags LoadFlags Field Value Type Description SceneLoadFlags"
  },
  "api/Unity.Entities.RegisterGenericComponentTypeAttribute.html": {
    "href": "api/Unity.Entities.RegisterGenericComponentTypeAttribute.html",
    "title": "Class RegisterGenericComponentTypeAttribute | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class RegisterGenericComponentTypeAttribute Inheritance Object Attribute RegisterGenericComponentTypeAttribute Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [AttributeUsage(AttributeTargets.Assembly, AllowMultiple = true)] public class RegisterGenericComponentTypeAttribute : Attribute, _Attribute Constructors | Improve this Doc RegisterGenericComponentTypeAttribute(Type) Declaration public RegisterGenericComponentTypeAttribute(Type type) Parameters Type Name Description Type type Fields | Improve this Doc ConcreteType Declaration public Type ConcreteType Field Value Type Description Type"
  },
  "api/Unity.Entities.NativeArraySharedValues-1.html": {
    "href": "api/Unity.Entities.NativeArraySharedValues-1.html",
    "title": "Struct NativeArraySharedValues<S> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct NativeArraySharedValues<S> Merge sort index list referencing NativeArray values. Provide list of shared values, indices to shared values, and lists of source i value indices with identical shared value. As an example: Given Source NativeArray: [A,A,A,B,B,C,C,A,B] Provides: Shared value indices: [0,0,0,1,1,2,2,0,1] Shared value counts: [4,3,2] (number of occurrences of a shared value) Shared values: [A,B,C] (not stored in this structure) Sorted indices: [0,1,2,7,3,4,8,5,6] (using these indices to look up values in the source array would give you [A,A,A,A,B,B,B,C,C]) Shared value start offsets (into sorted indices): [0,4,7] Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct NativeArraySharedValues<S> : IDisposable where S : struct, IComparable<S> Type Parameters Name Description S Constructors | Improve this Doc NativeArraySharedValues(NativeArray<S>, Allocator) Declaration public NativeArraySharedValues(NativeArray<S> sourceBuffer, Allocator allocator) Parameters Type Name Description NativeArray <S> sourceBuffer Allocator allocator Properties | Improve this Doc SharedValueCount Number of shared (unique) values in source NativeArray Declaration public int SharedValueCount { get; } Property Value Type Description Int32 | Improve this Doc SourceBuffer Original Source Values (passed into constructor) Declaration public NativeArray<S> SourceBuffer { get; } Property Value Type Description NativeArray <S> Methods | Improve this Doc Dispose() Declaration public void Dispose() | Improve this Doc GetSharedIndexArray() Indices into shared values. For example, given source array: [A,A,A,B,B,C,C,A,B] shared values are: [A,B,C] shared index array would contain: [0,0,0,1,1,2,2,0,1] Declaration public NativeArray<int> GetSharedIndexArray() Returns Type Description NativeArray < Int32 > Index NativeArray where each element refers to the index of a shared value in a list of shared (unique) values. | Improve this Doc GetSharedIndexBySourceIndex(Int32) Index of shared value associated with an element in the source buffer. For example, given source array: [A,A,A,B,B,C,C,A,B] shared values are: [A,B,C] Given the index 2 into the source array (A), the return value would be 0 (A in shared values). Declaration public int GetSharedIndexBySourceIndex(int indexIntoSourceBuffer) Parameters Type Name Description Int32 indexIntoSourceBuffer Index of source value Returns Type Description Int32 Index into the list of shared values | Improve this Doc GetSharedValueIndexCountArray() Array of number of occurrences of all shared values. For example, given source array: [A,A,A,B,B,C,C,A,B] shared values are: [A,B,C] Shared value counts: [4,3,2] (number of occurrences of a shared value) Declaration public NativeArray<int> GetSharedValueIndexCountArray() Returns Type Description NativeArray < Int32 > Count NativeArray where each element refers to the number of occurrences of each shared value. | Improve this Doc GetSharedValueIndexCountBySourceIndex(Int32) Number of occurrences of a shared (unique) value shared by a given a source index. For example, given source array: [A,A,A,B,B,C,C,A,B] shared values are: [A,B,C] Shared value counts: [4,3,2] (number of occurrences of a shared value) Given the index 2 into the source array (A), the return value would be 4 (for 4 occurrences of A in the source buffer). Declaration public int GetSharedValueIndexCountBySourceIndex(int indexIntoSourceBuffer) Parameters Type Name Description Int32 indexIntoSourceBuffer Index of source value. Returns Type Description Int32 Count of total occurrences of the shared value at a source buffer index in the source buffer. | Improve this Doc GetSharedValueIndicesBySharedIndex(Int32) Array of indices into source NativeArray which share the same shared value For example, given source array: [A,A,A,B,B,C,C,A,B] shared values are: [A,B,C] Shared value counts: [4,3,2] (number of occurrences of a shared value) Shared value start offsets (into sorted indices): [0,4,7] Given the index 0 into the shared value array (A), the returned array would contain [0,1,2,7] (indices into the source array which point to the shared value A). Declaration public NativeArray<int> GetSharedValueIndicesBySharedIndex(int sharedValueIndex) Parameters Type Name Description Int32 sharedValueIndex Index of shared value Returns Type Description NativeArray < Int32 > Index NativeArray where each element refers to an index into the source array. | Improve this Doc GetSharedValueIndicesBySourceIndex(Int32) Array of indices into shared value indices NativeArray which share the same source value For example, given Source NativeArray: [A,A,A,B,B,C,C,A,B] shared values are: [A,B,C] Shared value indices: [0,0,0,1,1,2,2,0,1] Given the index 2 into the source array (A), the returned array would contain: [0,1,2,7] (indices in SharedValueIndices that have a value of 0, i.e. where A is in the shared values) Declaration public NativeArray<int> GetSharedValueIndicesBySourceIndex(int indexIntoSourceBuffer) Parameters Type Name Description Int32 indexIntoSourceBuffer Index of source value Returns Type Description NativeArray < Int32 > Index NativeArray where each element refers to an index into the shared value indices array. | Improve this Doc GetSortedIndices() Indices into source NativeArray sorted by value Declaration public NativeArray<int> GetSortedIndices() Returns Type Description NativeArray < Int32 > Index NativeArray where each element refers to an element in the source NativeArray | Improve this Doc Schedule(JobHandle) Schedule jobs to collect and sort shared values. Declaration public JobHandle Schedule(JobHandle inputDeps) Parameters Type Name Description JobHandle inputDeps Dependent JobHandle Returns Type Description JobHandle JobHandle"
  },
  "api/Unity.Entities.MemsetNativeArray-1.html": {
    "href": "api/Unity.Entities.MemsetNativeArray-1.html",
    "title": "Struct MemsetNativeArray<T> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct MemsetNativeArray<T> Assign Value to each element of NativeArray Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct MemsetNativeArray<T> : IJobParallelFor where T : struct Type Parameters Name Description T Type of element in NativeArray Fields | Improve this Doc Source Declaration public NativeArray<T> Source Field Value Type Description NativeArray <T> | Improve this Doc Value Declaration public T Value Field Value Type Description T Methods | Improve this Doc Execute(Int32) Declaration public void Execute(int index) Parameters Type Name Description Int32 index"
  },
  "api/Unity.Entities.MayOnlyLiveInBlobStorageAttribute.html": {
    "href": "api/Unity.Entities.MayOnlyLiveInBlobStorageAttribute.html",
    "title": "Class MayOnlyLiveInBlobStorageAttribute | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class MayOnlyLiveInBlobStorageAttribute Use this attribute if you have structs that use offset pointers that are only valid when they live inside the blob storage. It will turn ensure a compiler error is generated for every time a reference to the struct is copied, or a field is read from a reference to the struct this attribute is applied on. Inheritance Object Attribute MayOnlyLiveInBlobStorageAttribute Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class MayOnlyLiveInBlobStorageAttribute : Attribute, _Attribute"
  },
  "api/Unity.Entities.MaximumChunkCapacityAttribute.html": {
    "href": "api/Unity.Entities.MaximumChunkCapacityAttribute.html",
    "title": "Class MaximumChunkCapacityAttribute | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class MaximumChunkCapacityAttribute Specifies the maximum number of components of a type that can be stored in the same chunk. Inheritance Object Attribute MaximumChunkCapacityAttribute Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct)] public class MaximumChunkCapacityAttribute : Attribute, _Attribute Remarks Place this attribute on the declaration of a component, such as IComponentData , to limit the number of entities with that component which can be stored in a single chunk. Note that the actual limit on the number of entities in a chunk can be smaller, based on the actual size of all the components in the same EntityArchetype as the component defining this limit. If an archetype contains more than one component type specifying a chunk capacity limit, then the lowest limit is used. Constructors | Improve this Doc MaximumChunkCapacityAttribute(Int32) The maximum number of entities having this component type in an ArchetypeChunk . Declaration public MaximumChunkCapacityAttribute(int capacity) Parameters Type Name Description Int32 capacity Fields | Improve this Doc Capacity The maximum number of entities having this component type in an ArchetypeChunk . Declaration public readonly int Capacity Field Value Type Description Int32"
  },
  "api/Unity.Entities.LambdaJobDescriptionExecutionMethods.html": {
    "href": "api/Unity.Entities.LambdaJobDescriptionExecutionMethods.html",
    "title": "Class LambdaJobDescriptionExecutionMethods | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class LambdaJobDescriptionExecutionMethods Inheritance Object LambdaJobDescriptionExecutionMethods Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class LambdaJobDescriptionExecutionMethods Methods | Improve this Doc Run<TDescription>(TDescription) Declaration public static void Run<TDescription>(this TDescription description) where TDescription : ILambdaJobExecutionDescription Parameters Type Name Description TDescription description Type Parameters Name Description TDescription | Improve this Doc Schedule<TDescription>(TDescription) Declaration public static void Schedule<TDescription>(this TDescription description) where TDescription : ILambdaJobExecutionDescription Parameters Type Name Description TDescription description Type Parameters Name Description TDescription | Improve this Doc Schedule<TDescription>(TDescription, JobHandle) Declaration public static JobHandle Schedule<TDescription>(this TDescription description, JobHandle dependency) where TDescription : ILambdaJobExecutionDescription Parameters Type Name Description TDescription description JobHandle dependency Returns Type Description JobHandle Type Parameters Name Description TDescription | Improve this Doc ScheduleParallel<TDescription>(TDescription) Declaration public static void ScheduleParallel<TDescription>(this TDescription description) where TDescription : ILambdaJobExecutionDescription Parameters Type Name Description TDescription description Type Parameters Name Description TDescription | Improve this Doc ScheduleParallel<TDescription>(TDescription, JobHandle) Declaration public static JobHandle ScheduleParallel<TDescription>(this TDescription description, JobHandle dependency) where TDescription : ILambdaJobExecutionDescription Parameters Type Name Description TDescription description JobHandle dependency Returns Type Description JobHandle Type Parameters Name Description TDescription"
  },
  "api/Unity.Entities.LambdaJobDescriptionConstructionMethods.html": {
    "href": "api/Unity.Entities.LambdaJobDescriptionConstructionMethods.html",
    "title": "Class LambdaJobDescriptionConstructionMethods | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class LambdaJobDescriptionConstructionMethods Inheritance Object LambdaJobDescriptionConstructionMethods Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class LambdaJobDescriptionConstructionMethods Methods | Improve this Doc WithBurst<TDescription>(TDescription, FloatMode, FloatPrecision, Boolean) Declaration public static TDescription WithBurst<TDescription>(this TDescription description, FloatMode floatMode = null, FloatPrecision floatPrecision = null, bool synchronousCompilation = false) where TDescription : ILambdaJobDescription Parameters Type Name Description TDescription description FloatMode floatMode FloatPrecision floatPrecision Boolean synchronousCompilation Returns Type Description TDescription Type Parameters Name Description TDescription | Improve this Doc WithDeallocateOnJobCompletion<TDescription, TCapturedVariableType>(TDescription, TCapturedVariableType) Declaration public static TDescription WithDeallocateOnJobCompletion<TDescription, TCapturedVariableType>(this TDescription description, TCapturedVariableType capturedVariable) where TDescription : ILambdaJobDescription Parameters Type Name Description TDescription description TCapturedVariableType capturedVariable Returns Type Description TDescription Type Parameters Name Description TDescription TCapturedVariableType | Improve this Doc WithName<TDescription>(TDescription, String) Declaration public static TDescription WithName<TDescription>(this TDescription description, string name) where TDescription : ILambdaJobDescription Parameters Type Name Description TDescription description String name Returns Type Description TDescription Type Parameters Name Description TDescription | Improve this Doc WithNativeDisableContainerSafetyRestriction<TDescription, TCapturedVariableType>(TDescription, TCapturedVariableType) Declaration public static TDescription WithNativeDisableContainerSafetyRestriction<TDescription, TCapturedVariableType>(this TDescription description, TCapturedVariableType capturedVariable) where TDescription : ILambdaJobDescription Parameters Type Name Description TDescription description TCapturedVariableType capturedVariable Returns Type Description TDescription Type Parameters Name Description TDescription TCapturedVariableType | Improve this Doc WithNativeDisableParallelForRestriction<TDescription, TCapturedVariableType>(TDescription, TCapturedVariableType) Declaration public static TDescription WithNativeDisableParallelForRestriction<TDescription, TCapturedVariableType>(this TDescription description, TCapturedVariableType capturedVariable) where TDescription : ILambdaJobDescription Parameters Type Name Description TDescription description TCapturedVariableType capturedVariable Returns Type Description TDescription Type Parameters Name Description TDescription TCapturedVariableType | Improve this Doc WithNativeDisableUnsafePtrRestriction<TDescription, TCapturedVariableType>(TDescription, TCapturedVariableType*) Declaration public static TDescription WithNativeDisableUnsafePtrRestriction<TDescription, TCapturedVariableType>(this TDescription description, TCapturedVariableType*capturedVariable) where TDescription : ILambdaJobDescription where TCapturedVariableType : struct Parameters Type Name Description TDescription description TCapturedVariableType* capturedVariable Returns Type Description TDescription Type Parameters Name Description TDescription TCapturedVariableType | Improve this Doc WithoutBurst<TDescription>(TDescription) Declaration public static TDescription WithoutBurst<TDescription>(this TDescription description) where TDescription : ILambdaJobDescription Parameters Type Name Description TDescription description Returns Type Description TDescription Type Parameters Name Description TDescription | Improve this Doc WithReadOnly<TDescription, TCapturedVariableType>(TDescription, TCapturedVariableType) Declaration public static TDescription WithReadOnly<TDescription, TCapturedVariableType>(this TDescription description, TCapturedVariableType capturedVariable) where TDescription : ILambdaJobDescription Parameters Type Name Description TDescription description TCapturedVariableType capturedVariable Returns Type Description TDescription Type Parameters Name Description TDescription TCapturedVariableType | Improve this Doc WithStructuralChanges<TDescription>(TDescription) Declaration public static TDescription WithStructuralChanges<TDescription>(this TDescription description) where TDescription : ILambdaJobDescription Parameters Type Name Description TDescription description Returns Type Description TDescription Type Parameters Name Description TDescription"
  },
  "api/Unity.Entities.LambdaJobChunkDescription_SetSharedComponent.html": {
    "href": "api/Unity.Entities.LambdaJobChunkDescription_SetSharedComponent.html",
    "title": "Class LambdaJobChunkDescription_SetSharedComponent | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class LambdaJobChunkDescription_SetSharedComponent Inheritance Object LambdaJobChunkDescription_SetSharedComponent Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class LambdaJobChunkDescription_SetSharedComponent Methods | Improve this Doc SetSharedComponentFilterOnQuery<T>(LambdaJobChunkDescription, T, EntityQuery) Declaration public static LambdaJobChunkDescription SetSharedComponentFilterOnQuery<T>(LambdaJobChunkDescription description, T sharedComponent, EntityQuery query) where T : struct, ISharedComponentData Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription description T sharedComponent EntityQuery query Returns Type Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription Type Parameters Name Description T"
  },
  "api/Unity.Entities.LambdaJobChunkDescriptionConstructionMethods.html": {
    "href": "api/Unity.Entities.LambdaJobChunkDescriptionConstructionMethods.html",
    "title": "Class LambdaJobChunkDescriptionConstructionMethods | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class LambdaJobChunkDescriptionConstructionMethods Inheritance Object LambdaJobChunkDescriptionConstructionMethods Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class LambdaJobChunkDescriptionConstructionMethods Methods | Improve this Doc ForEach(LambdaJobChunkDescription, LambdaJobChunkDescriptionConstructionMethods.JobChunkDelegate) Declaration public static LambdaJobChunkDescription ForEach(this LambdaJobChunkDescription description, LambdaJobChunkDescriptionConstructionMethods.JobChunkDelegate code) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription description LambdaJobChunkDescriptionConstructionMethods.JobChunkDelegate code Returns Type Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription"
  },
  "api/Unity.Entities.SceneSectionData.html": {
    "href": "api/Unity.Entities.SceneSectionData.html",
    "title": "Struct SceneSectionData | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct SceneSectionData Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] public struct SceneSectionData : IComponentData Fields | Improve this Doc BoundingVolume Declaration public MinMaxAABB BoundingVolume Field Value Type Description MinMaxAABB | Improve this Doc FileSize Declaration public int FileSize Field Value Type Description Int32 | Improve this Doc ObjectReferenceCount Declaration public int ObjectReferenceCount Field Value Type Description Int32 | Improve this Doc SceneGUID Declaration public Hash128 SceneGUID Field Value Type Description Hash128 | Improve this Doc SubSectionIndex Declaration public int SubSectionIndex Field Value Type Description Int32"
  },
  "api/Unity.Entities.SceneSection.html": {
    "href": "api/Unity.Entities.SceneSection.html",
    "title": "Struct SceneSection | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct SceneSection Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] public struct SceneSection : ISharedComponentData, IEquatable<SceneSection> Fields | Improve this Doc SceneGUID Declaration public Hash128 SceneGUID Field Value Type Description Hash128 | Improve this Doc Section Declaration public int Section Field Value Type Description Int32 Methods | Improve this Doc Equals(SceneSection) Declaration public bool Equals(SceneSection other) Parameters Type Name Description SceneSection other Returns Type Description Boolean | Improve this Doc GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode()"
  },
  "api/Unity.Entities.SceneReference.html": {
    "href": "api/Unity.Entities.SceneReference.html",
    "title": "Struct SceneReference | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct SceneReference Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct SceneReference : IComponentData, IEquatable<SceneReference> Fields | Improve this Doc SceneGUID Declaration public Hash128 SceneGUID Field Value Type Description Hash128 Methods | Improve this Doc Equals(SceneReference) Declaration public bool Equals(SceneReference other) Parameters Type Name Description SceneReference other Returns Type Description Boolean | Improve this Doc GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode()"
  },
  "api/Unity.Entities.PackedSharedComponentDataChange.html": {
    "href": "api/Unity.Entities.PackedSharedComponentDataChange.html",
    "title": "Struct PackedSharedComponentDataChange | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct PackedSharedComponentDataChange Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct PackedSharedComponentDataChange Fields | Improve this Doc BoxedSharedValue Declaration public object BoxedSharedValue Field Value Type Description Object | Improve this Doc Component Declaration public PackedComponent Component Field Value Type Description PackedComponent"
  },
  "api/Unity.Entities.PackedManagedComponentDataChange.html": {
    "href": "api/Unity.Entities.PackedManagedComponentDataChange.html",
    "title": "Struct PackedManagedComponentDataChange | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct PackedManagedComponentDataChange Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct PackedManagedComponentDataChange Fields | Improve this Doc BoxedValue Declaration public object BoxedValue Field Value Type Description Object | Improve this Doc Component Declaration public PackedComponent Component Field Value Type Description PackedComponent"
  },
  "api/Unity.Entities.PackedComponentDataChange.html": {
    "href": "api/Unity.Entities.PackedComponentDataChange.html",
    "title": "Struct PackedComponentDataChange | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct PackedComponentDataChange Represents a packed component data change within a EntityChangeSet Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct PackedComponentDataChange Fields | Improve this Doc Component The entity and component this change is targeted. Declaration public PackedComponent Component Field Value Type Description PackedComponent | Improve this Doc Offset The start offset for this data change. Declaration public int Offset Field Value Type Description Int32 Remarks This is the field offset and NOT the payload offset. | Improve this Doc Size The size of this data change. This is be the size in ComponentData for this entry. Declaration public int Size Field Value Type Description Int32"
  },
  "api/Unity.Entities.PackedComponent.html": {
    "href": "api/Unity.Entities.PackedComponent.html",
    "title": "Struct PackedComponent | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct PackedComponent Represents a packed component within an EntityChangeSet Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct PackedComponent Fields | Improve this Doc PackedEntityIndex Entity index in the packed entities array. Entities Declaration public int PackedEntityIndex Field Value Type Description Int32 | Improve this Doc PackedTypeIndex Type index in the packed stableTypeHash array. TypeHashes Declaration public int PackedTypeIndex Field Value Type Description Int32"
  },
  "api/Unity.Entities.LambdaSingleJobDescriptionConstructionMethods.html": {
    "href": "api/Unity.Entities.LambdaSingleJobDescriptionConstructionMethods.html",
    "title": "Class LambdaSingleJobDescriptionConstructionMethods | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class LambdaSingleJobDescriptionConstructionMethods Inheritance Object LambdaSingleJobDescriptionConstructionMethods Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class LambdaSingleJobDescriptionConstructionMethods Methods | Improve this Doc WithCode<TDescription>(TDescription, LambdaSingleJobDescriptionConstructionMethods.WithCodeAction) Declaration public static TDescription WithCode<TDescription>(this TDescription description, LambdaSingleJobDescriptionConstructionMethods.WithCodeAction code) where TDescription : ISingleJobDescription Parameters Type Name Description TDescription description LambdaSingleJobDescriptionConstructionMethods.WithCodeAction code Returns Type Description TDescription Type Parameters Name Description TDescription"
  },
  "api/Unity.Entities.LambdaSingleJobDescriptionConstructionMethods.WithCodeAction.html": {
    "href": "api/Unity.Entities.LambdaSingleJobDescriptionConstructionMethods.WithCodeAction.html",
    "title": "Delegate LambdaSingleJobDescriptionConstructionMethods.WithCodeAction | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate LambdaSingleJobDescriptionConstructionMethods.WithCodeAction Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void WithCodeAction();"
  },
  "api/Unity.Entities.EntityCommandBufferManagedComponentExtensions.html": {
    "href": "api/Unity.Entities.EntityCommandBufferManagedComponentExtensions.html",
    "title": "Class EntityCommandBufferManagedComponentExtensions | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class EntityCommandBufferManagedComponentExtensions Inheritance Object EntityCommandBufferManagedComponentExtensions Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class EntityCommandBufferManagedComponentExtensions Methods | Improve this Doc AddComponent<T>(EntityCommandBuffer, Entity) Declaration public static void AddComponent<T>(this EntityCommandBuffer ecb, Entity e) where T : class, IComponentData Parameters Type Name Description EntityCommandBuffer ecb Entity e Type Parameters Name Description T | Improve this Doc AddComponent<T>(EntityCommandBuffer, Entity, T) Declaration public static void AddComponent<T>(this EntityCommandBuffer ecb, Entity e, T component) where T : class, IComponentData Parameters Type Name Description EntityCommandBuffer ecb Entity e T component Type Parameters Name Description T | Improve this Doc SetComponent<T>(EntityCommandBuffer, Entity, T) Declaration public static void SetComponent<T>(this EntityCommandBuffer ecb, Entity e, T component) where T : class, IComponentData Parameters Type Name Description EntityCommandBuffer ecb Entity e T component Type Parameters Name Description T"
  },
  "api/Unity.Entities.EntityCommandBuffer.html": {
    "href": "api/Unity.Entities.EntityCommandBuffer.html",
    "title": "Struct EntityCommandBuffer | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct EntityCommandBuffer A thread-safe command buffer that can buffer commands that affect entities and components for later playback. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct EntityCommandBuffer : IDisposable Constructors | Improve this Doc EntityCommandBuffer(Allocator) Creates a new command buffer. Declaration public EntityCommandBuffer(Allocator label) Parameters Type Name Description Allocator label Memory allocator to use for chunks and data | Improve this Doc EntityCommandBuffer(Allocator, PlaybackPolicy) Creates a new command buffer. Declaration public EntityCommandBuffer(Allocator label, PlaybackPolicy playbackPolicy) Parameters Type Name Description Allocator label Memory allocator to use for chunks and data PlaybackPolicy playbackPolicy Specifies if the EntityCommandBuffer can be played a single time or more than once. Properties | Improve this Doc IsCreated Declaration public bool IsCreated { get; } Property Value Type Description Boolean | Improve this Doc MinimumChunkSize Allows controlling the size of chunks allocated from the temp job allocator to back the command buffer. Declaration public int MinimumChunkSize { get; set; } Property Value Type Description Int32 | Improve this Doc ShouldPlayback Controls whether this command buffer should play back. Declaration public bool ShouldPlayback { get; set; } Property Value Type Description Boolean Methods | Improve this Doc AddBuffer<T>(Entity) Declaration public DynamicBuffer<T> AddBuffer<T>(Entity e) where T : struct, IBufferElementData Parameters Type Name Description Entity e Returns Type Description DynamicBuffer <T> Type Parameters Name Description T | Improve this Doc AddComponent(Entity, ComponentType) Declaration public void AddComponent(Entity e, ComponentType componentType) Parameters Type Name Description Entity e ComponentType componentType | Improve this Doc AddComponent(EntityQuery, ComponentType) Declaration public void AddComponent(EntityQuery entityQuery, ComponentType componentType) Parameters Type Name Description EntityQuery entityQuery ComponentType componentType | Improve this Doc AddComponent<T>(Entity) Declaration public void AddComponent<T>(Entity e) where T : struct, IComponentData Parameters Type Name Description Entity e Type Parameters Name Description T | Improve this Doc AddComponent<T>(Entity, T) Declaration public void AddComponent<T>(Entity e, T component) where T : struct, IComponentData Parameters Type Name Description Entity e T component Type Parameters Name Description T | Improve this Doc AddComponent<T>(EntityQuery) Declaration public void AddComponent<T>(EntityQuery entityQuery) Parameters Type Name Description EntityQuery entityQuery Type Parameters Name Description T | Improve this Doc AddSharedComponent<T>(Entity, T) Declaration public void AddSharedComponent<T>(Entity e, T component) where T : struct, ISharedComponentData Parameters Type Name Description Entity e T component Type Parameters Name Description T | Improve this Doc AddSharedComponent<T>(EntityQuery, T) Declaration public void AddSharedComponent<T>(EntityQuery entityQuery, T component) where T : struct, ISharedComponentData Parameters Type Name Description EntityQuery entityQuery T component Type Parameters Name Description T | Improve this Doc CreateEntity(EntityArchetype) Declaration public Entity CreateEntity(EntityArchetype archetype = default(EntityArchetype)) Parameters Type Name Description EntityArchetype archetype Returns Type Description Entity | Improve this Doc DestroyEntity(Entity) Declaration public void DestroyEntity(Entity e) Parameters Type Name Description Entity e | Improve this Doc DestroyEntity(EntityQuery) Declaration public void DestroyEntity(EntityQuery entityQuery) Parameters Type Name Description EntityQuery entityQuery | Improve this Doc Dispose() Declaration public void Dispose() | Improve this Doc Instantiate(Entity) Declaration public Entity Instantiate(Entity e) Parameters Type Name Description Entity e Returns Type Description Entity | Improve this Doc Playback(EntityManager) Play back all recorded operations against an entity manager. Declaration public void Playback(EntityManager mgr) Parameters Type Name Description EntityManager mgr The entity manager that will receive the operations | Improve this Doc Playback(ExclusiveEntityTransaction) Play back all recorded operations with an exclusive entity transaction. BeginExclusiveEntityTransaction() . Declaration public void Playback(ExclusiveEntityTransaction mgr) Parameters Type Name Description ExclusiveEntityTransaction mgr The exclusive entity transaction that will process the operations | Improve this Doc RemoveComponent(Entity, ComponentType) Declaration public void RemoveComponent(Entity e, ComponentType componentType) Parameters Type Name Description Entity e ComponentType componentType | Improve this Doc RemoveComponent(EntityQuery, ComponentType) Declaration public void RemoveComponent(EntityQuery entityQuery, ComponentType componentType) Parameters Type Name Description EntityQuery entityQuery ComponentType componentType | Improve this Doc RemoveComponent<T>(Entity) Declaration public void RemoveComponent<T>(Entity e) Parameters Type Name Description Entity e Type Parameters Name Description T | Improve this Doc RemoveComponent<T>(EntityQuery) Declaration public void RemoveComponent<T>(EntityQuery entityQuery) Parameters Type Name Description EntityQuery entityQuery Type Parameters Name Description T | Improve this Doc SetBuffer<T>(Entity) Declaration public DynamicBuffer<T> SetBuffer<T>(Entity e) where T : struct, IBufferElementData Parameters Type Name Description Entity e Returns Type Description DynamicBuffer <T> Type Parameters Name Description T | Improve this Doc SetComponent<T>(Entity, T) Declaration public void SetComponent<T>(Entity e, T component) where T : struct, IComponentData Parameters Type Name Description Entity e T component Type Parameters Name Description T | Improve this Doc SetSharedComponent<T>(Entity, T) Declaration public void SetSharedComponent<T>(Entity e, T component) where T : struct, ISharedComponentData Parameters Type Name Description Entity e T component Type Parameters Name Description T | Improve this Doc ToConcurrent() Declaration public EntityCommandBuffer.Concurrent ToConcurrent() Returns Type Description EntityCommandBuffer.Concurrent Extension Methods EntityCommandBufferManagedComponentExtensions.AddComponent<T>(EntityCommandBuffer, Entity, T) EntityCommandBufferManagedComponentExtensions.AddComponent<T>(EntityCommandBuffer, Entity) EntityCommandBufferManagedComponentExtensions.SetComponent<T>(EntityCommandBuffer, Entity, T)"
  },
  "api/Unity.Entities.DisableAutoCreationAttribute.html": {
    "href": "api/Unity.Entities.DisableAutoCreationAttribute.html",
    "title": "Class DisableAutoCreationAttribute | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class DisableAutoCreationAttribute Prevents a system from being automatically created and run. Inheritance Object Attribute DisableAutoCreationAttribute Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class)] public sealed class DisableAutoCreationAttribute : Attribute, _Attribute Remarks By default, all systems (classes derived from ComponentSystemBase ) are automatically discovered, instantiated, and added to the default World when that World is created. Add this attribute to a system class that you do not want created automatically. Note that the attribute is not inherited by any subclasses. using Unity.Entities; [DisableAutoCreation] public class CustomSystem : JobComponentSystem { // Implementation... } You can also apply this attribute to an entire assembly to prevent any system class in that assembly from being created automatically. This is useful for test assemblies containing many systems that expect to be tested in isolation. To declare an assembly attribute, place it in any C# file compiled into the assembly, outside the namespace declaration: using Unity.Entities; [assembly: DisableAutoCreation] namespace Tests{}"
  },
  "api/Unity.Entities.DefaultWorldInitialization.html": {
    "href": "api/Unity.Entities.DefaultWorldInitialization.html",
    "title": "Class DefaultWorldInitialization | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class DefaultWorldInitialization Inheritance Object DefaultWorldInitialization Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class DefaultWorldInitialization Methods | Improve this Doc AddSystemsToRootLevelSystemGroups(World, IEnumerable<Type>) Adds the collection of systems to the world by injecting them into the root level system groups (InitializationSystemGroup, SimulationSystemGroup and PresentationSystemGroup) Declaration public static void AddSystemsToRootLevelSystemGroups(World world, IEnumerable<Type> systems) Parameters Type Name Description World world IEnumerable < Type > systems | Improve this Doc DefaultLazyEditModeInitialize() Can be called when in edit mode in the editor to initialize a the default world. Declaration public static void DefaultLazyEditModeInitialize() | Improve this Doc GetAllSystems(WorldSystemFilterFlags, Boolean) Calculates a list of all systems filtered with WorldSystemFilterFlags, [DisableAutoCreation] etc. Declaration public static IReadOnlyList<Type> GetAllSystems(WorldSystemFilterFlags filterFlags, bool requireExecuteAlways = false) Parameters Type Name Description WorldSystemFilterFlags filterFlags Boolean requireExecuteAlways Optionally require that [ExecuteAlways] is present on the system. This is used when creating edit mode worlds. Returns Type Description IReadOnlyList < Type > The list of filtered systems | Improve this Doc Initialize(String, Boolean) Initializes the default world or runs ICustomBootstrap if one is available. Declaration public static void Initialize(string defaultWorldName, bool editorWorld) Parameters Type Name Description String defaultWorldName The name of the world that will be created. Unless there is a custom bootstrap. Boolean editorWorld Editor worlds by default only include systems with [ExecuteAlways]. If editorWorld is true, ICustomBootstrap will not be used."
  },
  "api/Unity.Entities.ComponentTypes.Masks.html": {
    "href": "api/Unity.Entities.ComponentTypes.Masks.html",
    "title": "Struct ComponentTypes.Masks | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct ComponentTypes.Masks Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct Masks Fields | Improve this Doc m_BufferMask Declaration public ushort m_BufferMask Field Value Type Description UInt16 | Improve this Doc m_SharedComponentMask Declaration public ushort m_SharedComponentMask Field Value Type Description UInt16 | Improve this Doc m_SystemStateComponentMask Declaration public ushort m_SystemStateComponentMask Field Value Type Description UInt16 | Improve this Doc m_ZeroSizedMask Declaration public ushort m_ZeroSizedMask Field Value Type Description UInt16 Properties | Improve this Doc Buffers Declaration public int Buffers { get; } Property Value Type Description Int32 | Improve this Doc SharedComponents Declaration public int SharedComponents { get; } Property Value Type Description Int32 | Improve this Doc SystemStateComponents Declaration public int SystemStateComponents { get; } Property Value Type Description Int32 | Improve this Doc ZeroSizeds Declaration public int ZeroSizeds { get; } Property Value Type Description Int32 Methods | Improve this Doc IsSharedComponent(Int32) Declaration public bool IsSharedComponent(int index) Parameters Type Name Description Int32 index Returns Type Description Boolean | Improve this Doc IsZeroSized(Int32) Declaration public bool IsZeroSized(int index) Parameters Type Name Description Int32 index Returns Type Description Boolean"
  },
  "api/Unity.Entities.BufferFromEntity-1.html": {
    "href": "api/Unity.Entities.BufferFromEntity-1.html",
    "title": "Struct BufferFromEntity<T> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct BufferFromEntity<T> Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct BufferFromEntity<T> where T : struct, IBufferElementData Type Parameters Name Description T Properties | Improve this Doc Item[Entity] Declaration public DynamicBuffer<T> this[Entity entity] { get; } Parameters Type Name Description Entity entity Property Value Type Description DynamicBuffer <T> Methods | Improve this Doc Exists(Entity) Declaration public bool Exists(Entity entity) Parameters Type Name Description Entity entity Returns Type Description Boolean"
  },
  "api/Unity.Entities.ArchetypeChunkComponentTypeDynamic.html": {
    "href": "api/Unity.Entities.ArchetypeChunkComponentTypeDynamic.html",
    "title": "Struct ArchetypeChunkComponentTypeDynamic | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct ArchetypeChunkComponentTypeDynamic Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct ArchetypeChunkComponentTypeDynamic Fields | Improve this Doc m_TypeLookupCache Declaration public int m_TypeLookupCache Field Value Type Description Int32 Properties | Improve this Doc GlobalSystemVersion Declaration public uint GlobalSystemVersion { get; } Property Value Type Description UInt32 | Improve this Doc IsReadOnly Declaration public bool IsReadOnly { get; } Property Value Type Description Boolean"
  },
  "api/Unity.Entities.ICustomBootstrap.html": {
    "href": "api/Unity.Entities.ICustomBootstrap.html",
    "title": "Interface ICustomBootstrap | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Interface ICustomBootstrap When entering playmode or the game starts in the Player a default world is created. Sometimes you need multiple worlds to be setup when the game starts or perform some custom world initialization. This lets you override the bootstrap of game code world creation. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface ICustomBootstrap Methods | Improve this Doc Initialize(String) Declaration bool Initialize(string defaultWorldName) Parameters Type Name Description String defaultWorldName Returns Type Description Boolean"
  },
  "api/Unity.Entities.IConvertGameObjectToEntity.html": {
    "href": "api/Unity.Entities.IConvertGameObjectToEntity.html",
    "title": "Interface IConvertGameObjectToEntity | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Interface IConvertGameObjectToEntity Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface IConvertGameObjectToEntity Methods | Improve this Doc Convert(Entity, EntityManager, GameObjectConversionSystem) Declaration void Convert(Entity entity, EntityManager dstManager, GameObjectConversionSystem conversionSystem) Parameters Type Name Description Entity entity EntityManager dstManager GameObjectConversionSystem conversionSystem"
  },
  "api/Unity.Entities.GameObjectConversionSettings.html": {
    "href": "api/Unity.Entities.GameObjectConversionSettings.html",
    "title": "Class GameObjectConversionSettings | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class GameObjectConversionSettings Inheritance Object GameObjectConversionSettings Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class GameObjectConversionSettings Constructors | Improve this Doc GameObjectConversionSettings() Declaration public GameObjectConversionSettings() | Improve this Doc GameObjectConversionSettings(World, GameObjectConversionUtility.ConversionFlags, BlobAssetStore) Declaration public GameObjectConversionSettings(World destinationWorld, GameObjectConversionUtility.ConversionFlags conversionFlags, BlobAssetStore blobAssetStore = null) Parameters Type Name Description World destinationWorld GameObjectConversionUtility.ConversionFlags conversionFlags BlobAssetStore blobAssetStore Fields | Improve this Doc ConversionFlags Declaration public GameObjectConversionUtility.ConversionFlags ConversionFlags Field Value Type Description GameObjectConversionUtility.ConversionFlags | Improve this Doc ConversionWorldCreated Declaration public Action<World> ConversionWorldCreated Field Value Type Description Action < World > | Improve this Doc ConversionWorldPreDispose Declaration public Action<World> ConversionWorldPreDispose Field Value Type Description Action < World > | Improve this Doc DebugConversionName Declaration public string DebugConversionName Field Value Type Description String | Improve this Doc DestinationWorld Declaration public World DestinationWorld Field Value Type Description World | Improve this Doc ExtraSystems Declaration public Type[] ExtraSystems Field Value Type Description Type [] | Improve this Doc NamespaceID Declaration public byte NamespaceID Field Value Type Description Byte | Improve this Doc SceneGUID Declaration public Hash128 SceneGUID Field Value Type Description Hash128 Properties | Improve this Doc BlobAssetStore Declaration public BlobAssetStore BlobAssetStore { get; protected set; } Property Value Type Description BlobAssetStore | Improve this Doc SupportsExporting Declaration public bool SupportsExporting { get; } Property Value Type Description Boolean Methods | Improve this Doc CreateConversionWorld() Declaration public World CreateConversionWorld() Returns Type Description World | Improve this Doc Fork(Byte) Declaration public GameObjectConversionSettings Fork(byte entityGuidNamespaceID) Parameters Type Name Description Byte entityGuidNamespaceID Returns Type Description GameObjectConversionSettings | Improve this Doc FromHash(Hash128, BlobAssetStore) Declaration public static GameObjectConversionSettings FromHash(Hash128 hash, BlobAssetStore blobAssetStore) Parameters Type Name Description Hash128 hash BlobAssetStore blobAssetStore Returns Type Description GameObjectConversionSettings | Improve this Doc FromWorld(World, BlobAssetStore) Declaration public static GameObjectConversionSettings FromWorld(World destinationWorld, BlobAssetStore blobAssetStore) Parameters Type Name Description World destinationWorld BlobAssetStore blobAssetStore Returns Type Description GameObjectConversionSettings | Improve this Doc GetGuidForAssetExport(UnityEngine.Object) Declaration public virtual Guid GetGuidForAssetExport(UnityEngine.Object uobject) Parameters Type Name Description UnityEngine.Object uobject Returns Type Description Guid | Improve this Doc TryCreateAssetExportWriter(UnityEngine.Object) Declaration public virtual Stream TryCreateAssetExportWriter(UnityEngine.Object uobject) Parameters Type Name Description UnityEngine.Object uobject Returns Type Description Stream | Improve this Doc WithExtraSystem<T>() Declaration public GameObjectConversionSettings WithExtraSystem<T>() Returns Type Description GameObjectConversionSettings Type Parameters Name Description T | Improve this Doc WithExtraSystems(Type[]) Declaration public GameObjectConversionSettings WithExtraSystems(params Type[] extraSystems) Parameters Type Name Description Type [] extraSystems Returns Type Description GameObjectConversionSettings | Improve this Doc WithExtraSystems<T1, T2>() Declaration public GameObjectConversionSettings WithExtraSystems<T1, T2>() Returns Type Description GameObjectConversionSettings Type Parameters Name Description T1 T2 | Improve this Doc WithExtraSystems<T1, T2, T3>() Declaration public GameObjectConversionSettings WithExtraSystems<T1, T2, T3>() Returns Type Description GameObjectConversionSettings Type Parameters Name Description T1 T2 T3"
  },
  "api/Unity.Entities.ForEachLambdaJobDescription_SetSharedComponent.html": {
    "href": "api/Unity.Entities.ForEachLambdaJobDescription_SetSharedComponent.html",
    "title": "Class ForEachLambdaJobDescription_SetSharedComponent | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class ForEachLambdaJobDescription_SetSharedComponent Inheritance Object ForEachLambdaJobDescription_SetSharedComponent Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class ForEachLambdaJobDescription_SetSharedComponent Methods | Improve this Doc SetSharedComponentFilterOnQuery<TDescription, T>(TDescription, T, EntityQuery) Declaration public static TDescription SetSharedComponentFilterOnQuery<TDescription, T>(this TDescription description, T sharedComponent, EntityQuery query) where TDescription : struct, ISupportForEachWithUniversalDelegate where T : struct, ISharedComponentData Parameters Type Name Description TDescription description T sharedComponent EntityQuery query Returns Type Description TDescription Type Parameters Name Description TDescription T"
  },
  "api/Unity.Entities.FixedRateUtils.html": {
    "href": "api/Unity.Entities.FixedRateUtils.html",
    "title": "Class FixedRateUtils | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class FixedRateUtils Inheritance Object FixedRateUtils Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class FixedRateUtils Methods | Improve this Doc DisableFixedRate(ComponentSystemGroup) Disable fixed rate updates on the given group, by setting the UpdateCallback to null. Declaration public static void DisableFixedRate(ComponentSystemGroup group) Parameters Type Name Description ComponentSystemGroup group The group whose UpdateCallback to set to null. | Improve this Doc EnableFixedRateSimple(ComponentSystemGroup, Single) Configure the given ComponentSystemGroup to update at a fixed timestep, given by timeStep. The group will always be ticked exactly once, and the time will be the given timeStep since the last time it was ticked. This clock will drift from actual elapsed wall clock time. Declaration public static void EnableFixedRateSimple(ComponentSystemGroup group, float timeStep) Parameters Type Name Description ComponentSystemGroup group The group whose UpdateCallback will be configured with a fixed time step update call Single timeStep The fixed time step (in seconds) | Improve this Doc EnableFixedRateWithCatchUp(ComponentSystemGroup, Single) Configure the given ComponentSystemGroup to update at a fixed timestep, given by timeStep. If the interval between the current time and the last update is bigger than the timestep, the group's systems will be updated more than once. Declaration public static void EnableFixedRateWithCatchUp(ComponentSystemGroup group, float timeStep) Parameters Type Name Description ComponentSystemGroup group The group whose UpdateCallback will be configured with a fixed time step update call Single timeStep The fixed time step (in seconds)"
  },
  "api/Unity.Entities.FastEquality.html": {
    "href": "api/Unity.Entities.FastEquality.html",
    "title": "Class FastEquality | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class FastEquality Inheritance Object FastEquality Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class FastEquality Methods | Improve this Doc AddExtraAOTTypes(Type, HashSet<String>) Declaration public static void AddExtraAOTTypes(Type type, HashSet<string> output) Parameters Type Name Description Type type HashSet < String > output | Improve this Doc Equals(Void*, Void*, FastEquality.TypeInfo) Declaration public static bool Equals(void *lhsPtr, void *rhsPtr, FastEquality.TypeInfo typeInfo) Parameters Type Name Description Void * lhsPtr Void * rhsPtr FastEquality.TypeInfo typeInfo Returns Type Description Boolean | Improve this Doc Equals<T>(T, T, FastEquality.TypeInfo) Declaration public static bool Equals<T>(T lhs, T rhs, FastEquality.TypeInfo typeInfo) where T : struct Parameters Type Name Description T lhs T rhs FastEquality.TypeInfo typeInfo Returns Type Description Boolean Type Parameters Name Description T | Improve this Doc Equals<T>(ref T, ref T, FastEquality.TypeInfo) Declaration public static bool Equals<T>(ref T lhs, ref T rhs, FastEquality.TypeInfo typeInfo) where T : struct Parameters Type Name Description T lhs T rhs FastEquality.TypeInfo typeInfo Returns Type Description Boolean Type Parameters Name Description T | Improve this Doc GetHashCode(Void*, FastEquality.TypeInfo) Declaration public static int GetHashCode(void *dataPtr, FastEquality.TypeInfo typeInfo) Parameters Type Name Description Void * dataPtr FastEquality.TypeInfo typeInfo Returns Type Description Int32 | Improve this Doc GetHashCode<T>(T, FastEquality.TypeInfo) Declaration public static int GetHashCode<T>(T lhs, FastEquality.TypeInfo typeInfo) where T : struct Parameters Type Name Description T lhs FastEquality.TypeInfo typeInfo Returns Type Description Int32 Type Parameters Name Description T | Improve this Doc GetHashCode<T>(ref T, FastEquality.TypeInfo) Declaration public static int GetHashCode<T>(ref T lhs, FastEquality.TypeInfo typeInfo) where T : struct Parameters Type Name Description T lhs FastEquality.TypeInfo typeInfo Returns Type Description Int32 Type Parameters Name Description T | Improve this Doc ManagedEquals(Object, Object, FastEquality.TypeInfo) Declaration public static bool ManagedEquals(object lhs, object rhs, FastEquality.TypeInfo typeInfo) Parameters Type Name Description Object lhs Object rhs FastEquality.TypeInfo typeInfo Returns Type Description Boolean | Improve this Doc ManagedGetHashCode(Object, FastEquality.TypeInfo) Declaration public static int ManagedGetHashCode(object lhs, FastEquality.TypeInfo typeInfo) Parameters Type Name Description Object lhs FastEquality.TypeInfo typeInfo Returns Type Description Int32"
  },
  "api/Unity.Entities.EntityRemapUtility.EntityPatchInfo.html": {
    "href": "api/Unity.Entities.EntityRemapUtility.EntityPatchInfo.html",
    "title": "Struct EntityRemapUtility.EntityPatchInfo | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct EntityRemapUtility.EntityPatchInfo Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct EntityPatchInfo Fields | Improve this Doc Offset Declaration public int Offset Field Value Type Description Int32 | Improve this Doc Stride Declaration public int Stride Field Value Type Description Int32"
  },
  "api/Unity.Entities.EntityRemapUtility.BufferEntityPatchInfo.html": {
    "href": "api/Unity.Entities.EntityRemapUtility.BufferEntityPatchInfo.html",
    "title": "Struct EntityRemapUtility.BufferEntityPatchInfo | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct EntityRemapUtility.BufferEntityPatchInfo Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct BufferEntityPatchInfo Fields | Improve this Doc BufferOffset Declaration public int BufferOffset Field Value Type Description Int32 | Improve this Doc BufferStride Declaration public int BufferStride Field Value Type Description Int32 | Improve this Doc ElementOffset Declaration public int ElementOffset Field Value Type Description Int32 | Improve this Doc ElementStride Declaration public int ElementStride Field Value Type Description Int32"
  },
  "api/Unity.Entities.EntityReferenceChange.html": {
    "href": "api/Unity.Entities.EntityReferenceChange.html",
    "title": "Struct EntityReferenceChange | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct EntityReferenceChange Represents an entity reference that was changed within a EntityChangeSet This structure references the entity by it's unique EntityGuid . Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct EntityReferenceChange Remarks Multiple patches could exist for the same component with different offsets. Fields | Improve this Doc Component The entity and component this patched is targeted at. Declaration public PackedComponent Component Field Value Type Description PackedComponent | Improve this Doc Offset The field offset for the Entity field. Declaration public int Offset Field Value Type Description Int32 | Improve this Doc Value The entity that the field should reference. Identified by the unique EntityGuid . Declaration public EntityGuid Value Field Value Type Description EntityGuid"
  },
  "api/Unity.Entities.UpdateBeforeAttribute.html": {
    "href": "api/Unity.Entities.UpdateBeforeAttribute.html",
    "title": "Class UpdateBeforeAttribute | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class UpdateBeforeAttribute Inheritance Object Attribute UpdateBeforeAttribute Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)] public class UpdateBeforeAttribute : Attribute, _Attribute Constructors | Improve this Doc UpdateBeforeAttribute(Type) Declaration public UpdateBeforeAttribute(Type systemType) Parameters Type Name Description Type systemType Properties | Improve this Doc SystemType Declaration public Type SystemType { get; } Property Value Type Description Type"
  },
  "api/Unity.Entities.UpdateAfterAttribute.html": {
    "href": "api/Unity.Entities.UpdateAfterAttribute.html",
    "title": "Class UpdateAfterAttribute | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class UpdateAfterAttribute Inheritance Object Attribute UpdateAfterAttribute Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)] public class UpdateAfterAttribute : Attribute, _Attribute Constructors | Improve this Doc UpdateAfterAttribute(Type) Declaration public UpdateAfterAttribute(Type systemType) Parameters Type Name Description Type systemType Properties | Improve this Doc SystemType Declaration public Type SystemType { get; } Property Value Type Description Type"
  },
  "api/Unity.Entities.UniversalDelegates.html": {
    "href": "api/Unity.Entities.UniversalDelegates.html",
    "title": "Namespace Unity.Entities.UniversalDelegates | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Namespace Unity.Entities.UniversalDelegates Delegates I<T0> II<T0, T1> III<T0, T1, T2> IIII<T0, T1, T2, T3> IIIII<T0, T1, T2, T3, T4> IIIIII<T0, T1, T2, T3, T4, T5> IIIIIII<T0, T1, T2, T3, T4, T5, T6> IIIIIIII<T0, T1, T2, T3, T4, T5, T6, T7> R<T0> RI<T0, T1> RII<T0, T1, T2> RIII<T0, T1, T2, T3> RIIII<T0, T1, T2, T3, T4> RIIIII<T0, T1, T2, T3, T4, T5> RIIIIII<T0, T1, T2, T3, T4, T5, T6> RIIIIIII<T0, T1, T2, T3, T4, T5, T6, T7> RR<T0, T1> RRI<T0, T1, T2> RRII<T0, T1, T2, T3> RRIII<T0, T1, T2, T3, T4> RRIIII<T0, T1, T2, T3, T4, T5> RRIIIII<T0, T1, T2, T3, T4, T5, T6> RRIIIIII<T0, T1, T2, T3, T4, T5, T6, T7> RRR<T0, T1, T2> RRRI<T0, T1, T2, T3> RRRII<T0, T1, T2, T3, T4> RRRIII<T0, T1, T2, T3, T4, T5> RRRIIII<T0, T1, T2, T3, T4, T5, T6> RRRIIIII<T0, T1, T2, T3, T4, T5, T6, T7> RRRR<T0, T1, T2, T3> RRRRI<T0, T1, T2, T3, T4> RRRRII<T0, T1, T2, T3, T4, T5> RRRRIII<T0, T1, T2, T3, T4, T5, T6> RRRRIIII<T0, T1, T2, T3, T4, T5, T6, T7> RRRRR<T0, T1, T2, T3, T4> RRRRRI<T0, T1, T2, T3, T4, T5> RRRRRII<T0, T1, T2, T3, T4, T5, T6> RRRRRIII<T0, T1, T2, T3, T4, T5, T6, T7> RRRRRR<T0, T1, T2, T3, T4, T5> RRRRRRI<T0, T1, T2, T3, T4, T5, T6> RRRRRRII<T0, T1, T2, T3, T4, T5, T6, T7> RRRRRRR<T0, T1, T2, T3, T4, T5, T6> RRRRRRRI<T0, T1, T2, T3, T4, T5, T6, T7> RRRRRRRR<T0, T1, T2, T3, T4, T5, T6, T7> V<T0> VI<T0, T1> VII<T0, T1, T2> VIII<T0, T1, T2, T3> VIIII<T0, T1, T2, T3, T4> VIIIII<T0, T1, T2, T3, T4, T5> VIIIIII<T0, T1, T2, T3, T4, T5, T6> VIIIIIII<T0, T1, T2, T3, T4, T5, T6, T7> VR<T0, T1> VRI<T0, T1, T2> VRII<T0, T1, T2, T3> VRIII<T0, T1, T2, T3, T4> VRIIII<T0, T1, T2, T3, T4, T5> VRIIIII<T0, T1, T2, T3, T4, T5, T6> VRIIIIII<T0, T1, T2, T3, T4, T5, T6, T7> VRR<T0, T1, T2> VRRI<T0, T1, T2, T3> VRRII<T0, T1, T2, T3, T4> VRRIII<T0, T1, T2, T3, T4, T5> VRRIIII<T0, T1, T2, T3, T4, T5, T6> VRRIIIII<T0, T1, T2, T3, T4, T5, T6, T7> VRRR<T0, T1, T2, T3> VRRRI<T0, T1, T2, T3, T4> VRRRII<T0, T1, T2, T3, T4, T5> VRRRIII<T0, T1, T2, T3, T4, T5, T6> VRRRIIII<T0, T1, T2, T3, T4, T5, T6, T7> VRRRR<T0, T1, T2, T3, T4> VRRRRI<T0, T1, T2, T3, T4, T5> VRRRRII<T0, T1, T2, T3, T4, T5, T6> VRRRRIII<T0, T1, T2, T3, T4, T5, T6, T7> VRRRRR<T0, T1, T2, T3, T4, T5> VRRRRRI<T0, T1, T2, T3, T4, T5, T6> VRRRRRII<T0, T1, T2, T3, T4, T5, T6, T7> VRRRRRR<T0, T1, T2, T3, T4, T5, T6> VRRRRRRI<T0, T1, T2, T3, T4, T5, T6, T7> VRRRRRRR<T0, T1, T2, T3, T4, T5, T6, T7> VV<T0, T1> VVI<T0, T1, T2> VVII<T0, T1, T2, T3> VVIII<T0, T1, T2, T3, T4> VVIIII<T0, T1, T2, T3, T4, T5> VVIIIII<T0, T1, T2, T3, T4, T5, T6> VVIIIIII<T0, T1, T2, T3, T4, T5, T6, T7> VVR<T0, T1, T2> VVRI<T0, T1, T2, T3> VVRII<T0, T1, T2, T3, T4> VVRIII<T0, T1, T2, T3, T4, T5> VVRIIII<T0, T1, T2, T3, T4, T5, T6> VVRIIIII<T0, T1, T2, T3, T4, T5, T6, T7> VVRR<T0, T1, T2, T3> VVRRI<T0, T1, T2, T3, T4> VVRRII<T0, T1, T2, T3, T4, T5> VVRRIII<T0, T1, T2, T3, T4, T5, T6> VVRRIIII<T0, T1, T2, T3, T4, T5, T6, T7> VVRRR<T0, T1, T2, T3, T4> VVRRRI<T0, T1, T2, T3, T4, T5> VVRRRII<T0, T1, T2, T3, T4, T5, T6> VVRRRIII<T0, T1, T2, T3, T4, T5, T6, T7> VVRRRR<T0, T1, T2, T3, T4, T5> VVRRRRI<T0, T1, T2, T3, T4, T5, T6> VVRRRRII<T0, T1, T2, T3, T4, T5, T6, T7> VVRRRRR<T0, T1, T2, T3, T4, T5, T6> VVRRRRRI<T0, T1, T2, T3, T4, T5, T6, T7> VVRRRRRR<T0, T1, T2, T3, T4, T5, T6, T7> VVV<T0, T1, T2> VVVI<T0, T1, T2, T3> VVVII<T0, T1, T2, T3, T4> VVVIII<T0, T1, T2, T3, T4, T5> VVVIIII<T0, T1, T2, T3, T4, T5, T6> VVVIIIII<T0, T1, T2, T3, T4, T5, T6, T7> VVVR<T0, T1, T2, T3> VVVRI<T0, T1, T2, T3, T4> VVVRII<T0, T1, T2, T3, T4, T5> VVVRIII<T0, T1, T2, T3, T4, T5, T6> VVVRIIII<T0, T1, T2, T3, T4, T5, T6, T7> VVVRR<T0, T1, T2, T3, T4> VVVRRI<T0, T1, T2, T3, T4, T5> VVVRRII<T0, T1, T2, T3, T4, T5, T6> VVVRRIII<T0, T1, T2, T3, T4, T5, T6, T7> VVVRRR<T0, T1, T2, T3, T4, T5> VVVRRRI<T0, T1, T2, T3, T4, T5, T6> VVVRRRII<T0, T1, T2, T3, T4, T5, T6, T7> VVVRRRR<T0, T1, T2, T3, T4, T5, T6> VVVRRRRI<T0, T1, T2, T3, T4, T5, T6, T7> VVVRRRRR<T0, T1, T2, T3, T4, T5, T6, T7> VVVV<T0, T1, T2, T3> VVVVI<T0, T1, T2, T3, T4> VVVVII<T0, T1, T2, T3, T4, T5> VVVVIII<T0, T1, T2, T3, T4, T5, T6> VVVVIIII<T0, T1, T2, T3, T4, T5, T6, T7> VVVVR<T0, T1, T2, T3, T4> VVVVRI<T0, T1, T2, T3, T4, T5> VVVVRII<T0, T1, T2, T3, T4, T5, T6> VVVVRIII<T0, T1, T2, T3, T4, T5, T6, T7> VVVVRR<T0, T1, T2, T3, T4, T5> VVVVRRI<T0, T1, T2, T3, T4, T5, T6> VVVVRRII<T0, T1, T2, T3, T4, T5, T6, T7> VVVVRRR<T0, T1, T2, T3, T4, T5, T6> VVVVRRRI<T0, T1, T2, T3, T4, T5, T6, T7> VVVVRRRR<T0, T1, T2, T3, T4, T5, T6, T7> VVVVV<T0, T1, T2, T3, T4> VVVVVI<T0, T1, T2, T3, T4, T5> VVVVVII<T0, T1, T2, T3, T4, T5, T6> VVVVVIII<T0, T1, T2, T3, T4, T5, T6, T7> VVVVVR<T0, T1, T2, T3, T4, T5> VVVVVRI<T0, T1, T2, T3, T4, T5, T6> VVVVVRII<T0, T1, T2, T3, T4, T5, T6, T7> VVVVVRR<T0, T1, T2, T3, T4, T5, T6> VVVVVRRI<T0, T1, T2, T3, T4, T5, T6, T7> VVVVVRRR<T0, T1, T2, T3, T4, T5, T6, T7> VVVVVV<T0, T1, T2, T3, T4, T5> VVVVVVI<T0, T1, T2, T3, T4, T5, T6> VVVVVVII<T0, T1, T2, T3, T4, T5, T6, T7> VVVVVVR<T0, T1, T2, T3, T4, T5, T6> VVVVVVRI<T0, T1, T2, T3, T4, T5, T6, T7> VVVVVVRR<T0, T1, T2, T3, T4, T5, T6, T7> VVVVVVV<T0, T1, T2, T3, T4, T5, T6> VVVVVVVI<T0, T1, T2, T3, T4, T5, T6, T7> VVVVVVVR<T0, T1, T2, T3, T4, T5, T6, T7> VVVVVVVV<T0, T1, T2, T3, T4, T5, T6, T7>"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVVVVV-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVVVVV-8.html",
    "title": "Delegate VVVVVVVV<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VVVVVVVV<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVVVVV<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, T6 t6, T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVI-5.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVI-5.html",
    "title": "Delegate VVVVI<T0, T1, T2, T3, T4> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VVVVI<T0, T1, T2, T3, T4> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVI<T0, T1, T2, T3, T4>(T0 t0, T1 t1, T2 t2, T3 t3, in T4 t4); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 Type Parameters Name Description T0 T1 T2 T3 T4"
  },
  "api/Unity.Entities.UniversalDelegates.VVVV-4.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVV-4.html",
    "title": "Delegate VVVV<T0, T1, T2, T3> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VVVV<T0, T1, T2, T3> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVV<T0, T1, T2, T3>(T0 t0, T1 t1, T2 t2, T3 t3); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 Type Parameters Name Description T0 T1 T2 T3"
  },
  "api/Unity.Entities.UniversalDelegates.VVVRRRRR-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVRRRRR-8.html",
    "title": "Delegate VVVRRRRR<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VVVRRRRR<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVRRRRR<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, T1 t1, T2 t2, ref T3 t3, ref T4 t4, ref T5 t5, ref T6 t6, ref T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VVVRRRRI-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVRRRRI-8.html",
    "title": "Delegate VVVRRRRI<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VVVRRRRI<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVRRRRI<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, T1 t1, T2 t2, ref T3 t3, ref T4 t4, ref T5 t5, ref T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VVVRRRR-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVRRRR-7.html",
    "title": "Delegate VVVRRRR<T0, T1, T2, T3, T4, T5, T6> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VVVRRRR<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVRRRR<T0, T1, T2, T3, T4, T5, T6>(T0 t0, T1 t1, T2 t2, ref T3 t3, ref T4 t4, ref T5 t5, ref T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.VVVRRRII-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVRRRII-8.html",
    "title": "Delegate VVVRRRII<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VVVRRRII<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVRRRII<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, T1 t1, T2 t2, ref T3 t3, ref T4 t4, ref T5 t5, in T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VVVRRRI-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVRRRI-7.html",
    "title": "Delegate VVVRRRI<T0, T1, T2, T3, T4, T5, T6> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VVVRRRI<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVRRRI<T0, T1, T2, T3, T4, T5, T6>(T0 t0, T1 t1, T2 t2, ref T3 t3, ref T4 t4, ref T5 t5, in T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.VVVRRR-6.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVRRR-6.html",
    "title": "Delegate VVVRRR<T0, T1, T2, T3, T4, T5> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VVVRRR<T0, T1, T2, T3, T4, T5> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVRRR<T0, T1, T2, T3, T4, T5>(T0 t0, T1 t1, T2 t2, ref T3 t3, ref T4 t4, ref T5 t5); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 Type Parameters Name Description T0 T1 T2 T3 T4 T5"
  },
  "api/Unity.Entities.UniversalDelegates.VVRRR-5.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVRRR-5.html",
    "title": "Delegate VVRRR<T0, T1, T2, T3, T4> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VVRRR<T0, T1, T2, T3, T4> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVRRR<T0, T1, T2, T3, T4>(T0 t0, T1 t1, ref T2 t2, ref T3 t3, ref T4 t4); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 Type Parameters Name Description T0 T1 T2 T3 T4"
  },
  "api/Unity.Entities.UniversalDelegates.VVRRIIII-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVRRIIII-8.html",
    "title": "Delegate VVRRIIII<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VVRRIIII<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVRRIIII<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, T1 t1, ref T2 t2, ref T3 t3, in T4 t4, in T5 t5, in T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VVRRIII-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVRRIII-7.html",
    "title": "Delegate VVRRIII<T0, T1, T2, T3, T4, T5, T6> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VVRRIII<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVRRIII<T0, T1, T2, T3, T4, T5, T6>(T0 t0, T1 t1, ref T2 t2, ref T3 t3, in T4 t4, in T5 t5, in T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.VVRRII-6.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVRRII-6.html",
    "title": "Delegate VVRRII<T0, T1, T2, T3, T4, T5> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VVRRII<T0, T1, T2, T3, T4, T5> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVRRII<T0, T1, T2, T3, T4, T5>(T0 t0, T1 t1, ref T2 t2, ref T3 t3, in T4 t4, in T5 t5); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 Type Parameters Name Description T0 T1 T2 T3 T4 T5"
  },
  "api/Unity.Entities.UniversalDelegates.VVRRI-5.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVRRI-5.html",
    "title": "Delegate VVRRI<T0, T1, T2, T3, T4> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VVRRI<T0, T1, T2, T3, T4> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVRRI<T0, T1, T2, T3, T4>(T0 t0, T1 t1, ref T2 t2, ref T3 t3, in T4 t4); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 Type Parameters Name Description T0 T1 T2 T3 T4"
  },
  "api/Unity.Entities.UniversalDelegates.VVRR-4.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVRR-4.html",
    "title": "Delegate VVRR<T0, T1, T2, T3> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VVRR<T0, T1, T2, T3> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVRR<T0, T1, T2, T3>(T0 t0, T1 t1, ref T2 t2, ref T3 t3); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 Type Parameters Name Description T0 T1 T2 T3"
  },
  "api/Unity.Entities.UniversalDelegates.VVRIIIII-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVRIIIII-8.html",
    "title": "Delegate VVRIIIII<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VVRIIIII<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVRIIIII<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, T1 t1, ref T2 t2, in T3 t3, in T4 t4, in T5 t5, in T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VVRIIII-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVRIIII-7.html",
    "title": "Delegate VVRIIII<T0, T1, T2, T3, T4, T5, T6> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VVRIIII<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVRIIII<T0, T1, T2, T3, T4, T5, T6>(T0 t0, T1 t1, ref T2 t2, in T3 t3, in T4 t4, in T5 t5, in T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.VRRRI-5.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VRRRI-5.html",
    "title": "Delegate VRRRI<T0, T1, T2, T3, T4> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VRRRI<T0, T1, T2, T3, T4> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VRRRI<T0, T1, T2, T3, T4>(T0 t0, ref T1 t1, ref T2 t2, ref T3 t3, in T4 t4); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 Type Parameters Name Description T0 T1 T2 T3 T4"
  },
  "api/Unity.Entities.UniversalDelegates.VRRR-4.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VRRR-4.html",
    "title": "Delegate VRRR<T0, T1, T2, T3> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VRRR<T0, T1, T2, T3> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VRRR<T0, T1, T2, T3>(T0 t0, ref T1 t1, ref T2 t2, ref T3 t3); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 Type Parameters Name Description T0 T1 T2 T3"
  },
  "api/Unity.Entities.UniversalDelegates.VRRIIIII-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VRRIIIII-8.html",
    "title": "Delegate VRRIIIII<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VRRIIIII<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VRRIIIII<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, ref T1 t1, ref T2 t2, in T3 t3, in T4 t4, in T5 t5, in T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.Editor.StartLiveLinkWindow.html": {
    "href": "api/Unity.Entities.Editor.StartLiveLinkWindow.html",
    "title": "Class StartLiveLinkWindow | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class StartLiveLinkWindow Inheritance Object StartLiveLinkWindow Namespace : Unity.Entities.Editor <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class StartLiveLinkWindow : EditorWindow Methods | Improve this Doc OpenWindow() Declaration public static void OpenWindow()"
  },
  "api/Unity.Entities.DynamicBufferProxy-1.html": {
    "href": "api/Unity.Entities.DynamicBufferProxy-1.html",
    "title": "Class DynamicBufferProxy<T> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class DynamicBufferProxy<T> Inheritance Object ComponentDataProxyBase DynamicBufferProxy<T> Inherited Members ComponentDataProxyBase.OnEnable() ComponentDataProxyBase.OnDisable() Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public abstract class DynamicBufferProxy<T> : ComponentDataProxyBase, ISerializationCallbackReceiver where T : struct, IBufferElementData Type Parameters Name Description T Properties | Improve this Doc Value Declaration public IEnumerable<T> Value { get; } Property Value Type Description IEnumerable <T> Methods | Improve this Doc SetValue(IReadOnlyList<T>) Declaration public void SetValue(IReadOnlyList<T> value) Parameters Type Name Description IReadOnlyList <T> value | Improve this Doc ValidateSerializedData(List<T>) Declaration protected virtual void ValidateSerializedData(List<T> serializedData) Parameters Type Name Description List <T> serializedData"
  },
  "api/Unity.Entities.DynamicBufferContainer-1.html": {
    "href": "api/Unity.Entities.DynamicBufferContainer-1.html",
    "title": "Struct DynamicBufferContainer<T> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct DynamicBufferContainer<T> Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct DynamicBufferContainer<T> : IDynamicBufferContainer Type Parameters Name Description T Constructors | Improve this Doc DynamicBufferContainer(Void*, Int32, Int32, Boolean) Declaration public DynamicBufferContainer(void *buffer, int length, int size, bool isReadOnly) Parameters Type Name Description Void * buffer Int32 length Int32 size Boolean isReadOnly Properties | Improve this Doc ElementType Declaration public Type ElementType { get; } Property Value Type Description Type Implements IDynamicBufferContainer.ElementType | Improve this Doc Length Declaration public int Length { get; } Property Value Type Description Int32 Methods | Improve this Doc GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode()"
  },
  "api/Unity.Entities.ConverterVersionAttribute.html": {
    "href": "api/Unity.Entities.ConverterVersionAttribute.html",
    "title": "Class ConverterVersionAttribute | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class ConverterVersionAttribute By declaring a version number a ComponentSystem can ensure that any cached data by the asset pipeline was prepared using the active code. If the version number of any conversion system or optimization system changes or a new conversion system is added, then the scene will be re-converted. Inheritance Object Attribute ConverterVersionAttribute Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [AttributeUsage(AttributeTargets.Class)] public class ConverterVersionAttribute : Attribute, _Attribute Constructors | Improve this Doc ConverterVersionAttribute(String, Int32) Declaration public ConverterVersionAttribute(string userName, int version) Parameters Type Name Description String userName Int32 version Fields | Improve this Doc UserName Declaration public string UserName Field Value Type Description String | Improve this Doc Version Declaration public int Version Field Value Type Description Int32"
  },
  "api/Unity.Entities.BeginPresentationEntityCommandBufferSystem.html": {
    "href": "api/Unity.Entities.BeginPresentationEntityCommandBufferSystem.html",
    "title": "Class BeginPresentationEntityCommandBufferSystem | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class BeginPresentationEntityCommandBufferSystem Inheritance Object ComponentSystemBase ComponentSystem EntityCommandBufferSystem BeginPresentationEntityCommandBufferSystem Inherited Members EntityCommandBufferSystem.CreateCommandBuffer() EntityCommandBufferSystem.AddJobHandleForProducer(JobHandle) EntityCommandBufferSystem.OnCreate() EntityCommandBufferSystem.OnDestroy() EntityCommandBufferSystem.OnUpdate() ComponentSystem.PostUpdateCommands ComponentSystem.InitEntityQueryCache(Int32) ComponentSystem.Entities ComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnDestroyManager() ComponentSystemBase.OnCreateManager() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetArchetypeChunkComponentType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkComponentTypeDynamic(ComponentType) ComponentSystemBase.GetArchetypeChunkBufferType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkSharedComponentType<T>() ComponentSystemBase.GetArchetypeChunkEntityType() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [UpdateInGroup(typeof(PresentationSystemGroup))] public class BeginPresentationEntityCommandBufferSystem : EntityCommandBufferSystem Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Entities.ArchetypeChunkEntityType.html": {
    "href": "api/Unity.Entities.ArchetypeChunkEntityType.html",
    "title": "Struct ArchetypeChunkEntityType | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct ArchetypeChunkEntityType Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct ArchetypeChunkEntityType"
  },
  "api/Unity.Entities.ArchetypeChunkComponentObjects-1.html": {
    "href": "api/Unity.Entities.ArchetypeChunkComponentObjects-1.html",
    "title": "Struct ArchetypeChunkComponentObjects<T> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct ArchetypeChunkComponentObjects<T> Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct ArchetypeChunkComponentObjects<T> where T : class Type Parameters Name Description T Properties | Improve this Doc Item[Int32] Declaration public T this[int index] { get; set; } Parameters Type Name Description Int32 index Property Value Type Description T Exceptions Type Condition IndexOutOfRangeException"
  },
  "api/Unity.Entities.AlwaysUpdateSystemAttribute.html": {
    "href": "api/Unity.Entities.AlwaysUpdateSystemAttribute.html",
    "title": "Class AlwaysUpdateSystemAttribute | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class AlwaysUpdateSystemAttribute Inheritance Object Attribute AlwaysUpdateSystemAttribute Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [AttributeUsage(AttributeTargets.Class)] public class AlwaysUpdateSystemAttribute : Attribute, _Attribute"
  },
  "api/Unity.Core.TimeData.html": {
    "href": "api/Unity.Core.TimeData.html",
    "title": "Struct TimeData | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct TimeData Namespace : Unity.Core <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct TimeData Constructors | Improve this Doc TimeData(Double, Single) Create a new TimeData struct with the given values. Declaration public TimeData(double elapsedTime, float deltaTime) Parameters Type Name Description Double elapsedTime Time since the start of time collection. Single deltaTime Elapsed time since the last time-updating event occurred. Fields | Improve this Doc DeltaTime The time in seconds since the last time-updating event occurred. (For example, a frame.) Declaration public readonly float DeltaTime Field Value Type Description Single | Improve this Doc ElapsedTime The total cumulative elapsed time in seconds. Declaration public readonly double ElapsedTime Field Value Type Description Double Properties | Improve this Doc fixedDeltaTime Declaration public float fixedDeltaTime { get; } Property Value Type Description Single"
  },
  "api/Unity.Transforms.html": {
    "href": "api/Unity.Transforms.html",
    "title": "Namespace Unity.Transforms | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Namespace Unity.Transforms Classes CompositeRotationSystem CompositeScaleSystem CopyInitialTransformFromGameObjectProxy CopyInitialTransformFromGameObjectSystem CopyTransformFromGameObjectProxy CopyTransformFromGameObjectSystem CopyTransformToGameObjectProxy CopyTransformToGameObjectSystem EndFrameCompositeRotationSystem EndFrameCompositeScaleSystem EndFrameLocalToParentSystem EndFrameParentScaleInverseSystem EndFrameParentSystem EndFramePostRotationEulerSystem EndFrameRotationEulerSystem EndFrameTRSToLocalToParentSystem EndFrameTRSToLocalToWorldSystem EndFrameWorldToLocalSystem LocalToParentSystem LocalToWorldProxy NonUniformScaleProxy ParentScaleInverseSystem ParentSystem PostRotationEulerSystem RotationEulerSystem RotationProxy TransformSystemGroup TranslationProxy TRSToLocalToParentSystem TRSToLocalToWorldSystem WorldToLocalSystem Structs BoneIndexOffset Holds the index offset at which the skin matrices of this entity are stored in the buffer containing all skin matrices. Child CompositeRotation CompositeScale CopyInitialTransformFromGameObject Copy Transform from GameObject associated with Entity to TransformMatrix. Once only. Component is removed after copy. CopyTransformFromGameObject Copy Transform from GameObject associated with Entity to TransformMatrix. CopyTransformToGameObject Copy Transform to GameObject associated with Entity from TransformMatrix. Frozen Frozen is added by system when Static is resolved. Signals that LocalToWorld will no longer be updated. Read-only from other systems. User responsible for removing. LocalToParent LocalToWorld NonUniformScale Parent ParentScaleInverse PostRotation PostRotationEulerXYZ PostRotationEulerXZY PostRotationEulerYXZ PostRotationEulerYZX PostRotationEulerZXY PostRotationEulerZYX PreviousParent Rotation RotationEulerXYZ RotationEulerXZY RotationEulerYXZ RotationEulerYZX RotationEulerZXY RotationEulerZYX RotationPivot RotationPivotTranslation Scale ScalePivot ScalePivotTranslation Static When added, TransformSystem will process transform compomnnts once to update LocalToWorld. Once that is resolved, the Frozen component will be added and LocalToWorld will no longer be updated. Translation WorldToLocal"
  },
  "api/Unity.Entities.EntityQuery.html": {
    "href": "api/Unity.Entities.EntityQuery.html",
    "title": "Class EntityQuery | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class EntityQuery Use an EntityQuery object to select entities with components that meet specific requirements. Inheritance Object EntityQuery Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class EntityQuery : IDisposable Remarks An entity query defines the set of component types that an archetype must contain in order for its chunks and entities to be selected and specifies whether the components accessed through the query are read-only or read-write. For simple queries, you can create an EntityQuery based on an array of component types. The following example defines a EntityQuery that finds all entities with both Rotation and RotationSpeed components. The query uses ComponentType.ReadOnly instead of the simpler typeof expression to designate that the system does not write to RotationSpeed. Always specify read-only when possible, since there are fewer constraints on read-only access to data, which can help the Job scheduler execute your Jobs more efficiently. For more complex queries, you can use an EntityQueryDesc object to create the entity query. A query description provides a flexible query mechanism to specify which archetypes to select based on the following sets of components: All = All component types in this array must exist in the archetype Any = At least one of the component types in this array must exist in the archetype None = None of the component types in this array can exist in the archetype For example, the following query includes archetypes containing Rotation and RotationSpeed components, but excludes any archetypes containing a Frozen component: Note: Do not include completely optional components in the query description. To handle optional components, use IJobChunk and the ArchetypeChunk.Has() method to determine whether a chunk contains the optional component or not. Since all entities within the same chunk have the same components, you only need to check whether an optional component exists once per chunk -- not once per entity. Within a system class, use the ComponentSystemBase.GetEntityQuery() function to get a EntityQuery instance. Outside a system, use the EntityManager.CreateEntityQuery() function. You can filter entities based on whether they have changed or whether they have a specific value for a shared component . Once you have created an EntityQuery object, you can reset and change the filter settings, but you cannot modify the base query. Use an EntityQuery for the following purposes: To get a native array of a the values for a specific IComponentData type for all entities matching the query To get an native array of the ArchetypeChunk objects matching the query To schedule an IJobChunk job To control whether a system updates using [ComponentSystemBase.RequireForUpdate(query)] Note that Entities.ForEach defines an entity query implicitly based on the methods you call. You can access this implicit EntityQuery object using Entities.WithStoreEntityQueryInField . However, you cannot create an Entities.ForEach construction based on an existing EntityQuery object. Properties | Improve this Doc IsCreated Declaration public bool IsCreated { get; } Property Value Type Description Boolean | Improve this Doc IsEmptyIgnoreFilter Reports whether this query would currently select zero entities. Declaration public bool IsEmptyIgnoreFilter { get; } Property Value Type Description Boolean True, if this EntityQuery matches zero existing entities. False, if it matches one or more entities. Methods | Improve this Doc AddChangedVersionFilter(ComponentType) Declaration public void AddChangedVersionFilter(ComponentType componentType) Parameters Type Name Description ComponentType componentType | Improve this Doc AddDependency(JobHandle) Adds another job handle to this EntityQuery's dependencies. Declaration public JobHandle AddDependency(JobHandle job) Parameters Type Name Description JobHandle job Returns Type Description JobHandle Remarks An entity query uses jobs internally when required to create arrays of entities and chunks. This junction adds an external job as a dependency for those internal jobs. | Improve this Doc AddSharedComponentFilter<SharedComponent>(SharedComponent) Declaration public void AddSharedComponentFilter<SharedComponent>(SharedComponent sharedComponent) where SharedComponent : struct, ISharedComponentData Parameters Type Name Description SharedComponent sharedComponent Type Parameters Name Description SharedComponent | Improve this Doc CalculateChunkCount() Calculates the number of chunks that match this EntityQuery. Declaration public int CalculateChunkCount() Returns Type Description Int32 The number of chunks based on the current EntityQuery properties. Remarks The EntityQuery must run the query and apply any filters to calculate the chunk count. | Improve this Doc CalculateChunkCountWithoutFiltering() Calculates the number of chunks that match this EntityQuery, ignoring any set filters. Declaration public int CalculateChunkCountWithoutFiltering() Returns Type Description Int32 The number of chunks based on the current EntityQuery properties. Remarks The EntityQuery must run the query to calculate the chunk count. | Improve this Doc CalculateEntityCount() Calculates the number of entities selected by this EntityQuery. Declaration public int CalculateEntityCount() Returns Type Description Int32 The number of entities based on the current EntityQuery properties. Remarks The EntityQuery must run the query and apply any filters to calculate the entity count. | Improve this Doc CalculateEntityCountWithoutFiltering() Calculates the number of entities selected by this EntityQuery, ignoring any set filters. Declaration public int CalculateEntityCountWithoutFiltering() Returns Type Description Int32 The number of entities based on the current EntityQuery properties. Remarks The EntityQuery must run the query to calculate the entity count. | Improve this Doc CompareComponents(NativeArray<ComponentType>) Compares a list of component types to the types defining this EntityQuery. Declaration public bool CompareComponents(NativeArray<ComponentType> componentTypes) Parameters Type Name Description NativeArray < ComponentType > componentTypes An array of ComponentType objects. Returns Type Description Boolean True, if the list of types, including any read/write access specifiers, matches the list of required component types of this EntityQuery. Remarks Only required types in the query are used as the basis for the comparison. If you include types that the query excludes or only includes as optional, the comparison returns false. Do not include the Entity type, which is included implicitly. | Improve this Doc CompareComponents(ComponentType[]) Compares a list of component types to the types defining this EntityQuery. Declaration public bool CompareComponents(ComponentType[] componentTypes) Parameters Type Name Description ComponentType [] componentTypes An array of ComponentType objects. Returns Type Description Boolean True, if the list of types, including any read/write access specifiers, matches the list of required component types of this EntityQuery. Remarks Only required types in the query are used as the basis for the comparison. If you include types that the query excludes or only includes as optional, the comparison returns false. | Improve this Doc CompareQuery(EntityQueryDesc[]) Compares a query description to the description defining this EntityQuery. Declaration public bool CompareQuery(EntityQueryDesc[] queryDesc) Parameters Type Name Description EntityQueryDesc [] queryDesc The query description to compare. Returns Type Description Boolean True, if the query description contains the same components with the same read/write access modifiers as this EntityQuery. Remarks The All , Any , and None components in the query description are compared to the corresponding list in this EntityQuery. | Improve this Doc CompleteDependency() Ensures all jobs running on this EntityQuery complete. Declaration public void CompleteDependency() Remarks An entity query uses jobs internally when required to create arrays of entities and chunks. This function completes those jobs and returns when they are finished. | Improve this Doc CopyFromComponentDataArray<T>(NativeArray<T>) Declaration public void CopyFromComponentDataArray<T>(NativeArray<T> componentDataArray) where T : struct, IComponentData Parameters Type Name Description NativeArray <T> componentDataArray Type Parameters Name Description T | Improve this Doc CopyFromComponentDataArrayAsync<T>(NativeArray<T>, out JobHandle) Declaration public void CopyFromComponentDataArrayAsync<T>(NativeArray<T> componentDataArray, out JobHandle jobhandle) where T : struct, IComponentData Parameters Type Name Description NativeArray <T> componentDataArray JobHandle jobhandle Type Parameters Name Description T | Improve this Doc CreateArchetypeChunkArray(Allocator) Synchronously creates an array of the chunks containing entities matching this EntityQuery. Declaration public NativeArray<ArchetypeChunk> CreateArchetypeChunkArray(Allocator allocator) Parameters Type Name Description Allocator allocator Allocator to use for the array. Returns Type Description NativeArray < ArchetypeChunk > NativeArray of all the chunks in this ComponentChunkIterator. Remarks This method blocks until the internal job that performs the query completes. | Improve this Doc CreateArchetypeChunkArrayAsync(Allocator, out JobHandle) Asynchronously creates an array of the chunks containing entities matching this EntityQuery. Declaration public NativeArray<ArchetypeChunk> CreateArchetypeChunkArrayAsync(Allocator allocator, out JobHandle jobhandle) Parameters Type Name Description Allocator allocator Allocator to use for the array. JobHandle jobhandle An out parameter assigned the handle to the internal job that gathers the chunks matching this EntityQuery. Returns Type Description NativeArray < ArchetypeChunk > NativeArray of all the chunks containing entities matching this query. Remarks Use jobhandle as a dependency for jobs that use the returned chunk array. . | Improve this Doc Dispose() Disposes this EntityQuery instance. Declaration public void Dispose() Remarks Do not dispose the EntityQuery instances created using Entities . The system automatically disposes of its own entity queries. Exceptions Type Condition InvalidOperationException Thrown if you attempt to dispose an EntityQuery belonging to a SystemBase instance. | Improve this Doc GetArchetypeChunkIterator() Gets an ArchetypeChunkIterator which can be used to iterate over every chunk returned by this EntityQuery. Declaration public ArchetypeChunkIterator GetArchetypeChunkIterator() Returns Type Description ArchetypeChunkIterator ArchetypeChunkIterator for this EntityQuery | Improve this Doc GetCombinedComponentOrderVersion() Declaration public int GetCombinedComponentOrderVersion() Returns Type Description Int32 | Improve this Doc GetDependency() Combines all dependencies in this EntityQuery into a single JobHandle. Declaration public JobHandle GetDependency() Returns Type Description JobHandle JobHandle that represents the combined dependencies of this EntityQuery Remarks An entity query uses jobs internally when required to create arrays of entities and chunks. | Improve this Doc GetSingleton<T>() Gets the value of a singleton component. Declaration public T GetSingleton<T>() where T : struct, IComponentData Returns Type Description T A copy of the singleton component. Type Parameters Name Description T The component type. Remarks A singleton component is a component of which only one instance exists in the world and which has been set with SetSingleton<T>(T) . Exceptions Type Condition InvalidOperationException | Improve this Doc GetSingletonEntity() Declaration public Entity GetSingletonEntity() Returns Type Description Entity | Improve this Doc HasFilter() Returns if the entity query has a filter applied to it. Declaration public bool HasFilter() Returns Type Description Boolean Returns true if the query has a filter, returns false if the query does not have a filter. | Improve this Doc ResetFilter() Resets this EntityQuery's filter. Declaration public void ResetFilter() Remarks Removes references to shared component data, if applicable, then resets the filter type to None. | Improve this Doc SetChangedVersionFilter(ComponentType) Filters out entities in chunks for which the specified component has not changed. Declaration public void SetChangedVersionFilter(ComponentType componentType) Parameters Type Name Description ComponentType componentType ComponentType to mark as changed on this EntityQuery's filter. Remarks Saves a given ComponentType's index in RequiredComponents in this group's Changed filter. | Improve this Doc SetChangedVersionFilter(ComponentType[]) Declaration public void SetChangedVersionFilter(ComponentType[] componentType) Parameters Type Name Description ComponentType [] componentType | Improve this Doc SetSharedComponentFilter<SharedComponent1>(SharedComponent1) Filters this EntityQuery so that it only selects entities with shared component values matching the values specified by the sharedComponent1 parameter. Declaration public void SetSharedComponentFilter<SharedComponent1>(SharedComponent1 sharedComponent1) where SharedComponent1 : struct, ISharedComponentData Parameters Type Name Description SharedComponent1 sharedComponent1 The shared component values on which to filter. Type Parameters Name Description SharedComponent1 The type of shared component. (The type must also be one of the types used to create the EntityQuery. | Improve this Doc SetSharedComponentFilter<SharedComponent1, SharedComponent2>(SharedComponent1, SharedComponent2) Filters this EntityQuery based on the values of two separate shared components. Declaration public void SetSharedComponentFilter<SharedComponent1, SharedComponent2>(SharedComponent1 sharedComponent1, SharedComponent2 sharedComponent2) where SharedComponent1 : struct, ISharedComponentData where SharedComponent2 : struct, ISharedComponentData Parameters Type Name Description SharedComponent1 sharedComponent1 Shared component values on which to filter. SharedComponent2 sharedComponent2 Shared component values on which to filter. Type Parameters Name Description SharedComponent1 The type of shared component. (The type must also be one of the types used to create the EntityQuery. SharedComponent2 The type of shared component. (The type must also be one of the types used to create the EntityQuery. Remarks The filter only selects entities for which both shared component values specified by the sharedComponent1 and sharedComponent2 parameters match. | Improve this Doc SetSingleton<T>(T) Sets the value of a singleton component. Declaration public void SetSingleton<T>(T value) where T : struct, IComponentData Parameters Type Name Description T value An instance of type T containing the values to set. Type Parameters Name Description T The component type. Remarks For a component to be a singleton, there can be only one instance of that component in a World . The component must be the only component in its archetype and you cannot use the same type of component as a normal component. To create a singleton, create an entity with the singleton component as its only component, and then use SetSingleton() to assign a value. For example, if you had a component defined as: public struct Singlet: IComponentData{ public int Value; } You could create a singleton as follows: var singletonEntity = entityManager.CreateEntity(typeof(Singlet)); var singletonGroup = entityManager.CreateEntityQuery(typeof(Singlet)); singletonGroup.SetSingleton<Singlet>(new Singlet {Value = 1}); You can set and get the singleton value from a EntityQuery or a ComponentSystem. Exceptions Type Condition InvalidOperationException Thrown if more than one instance of this component type exists in the world or the component type appears in more than one archetype. | Improve this Doc ToComponentDataArray<T>() Declaration public T[] ToComponentDataArray<T>() where T : class, IComponentData Returns Type Description T[] Type Parameters Name Description T | Improve this Doc ToComponentDataArray<T>(Allocator) Creates a NativeArray containing the components of type T for the selected entities. Declaration public NativeArray<T> ToComponentDataArray<T>(Allocator allocator) where T : struct, IComponentData Parameters Type Name Description Allocator allocator The type of memory to allocate. Returns Type Description NativeArray <T> An array containing the specified component for all the entities selected by the EntityQuery. Type Parameters Name Description T The component type. Exceptions Type Condition InvalidOperationException Thrown if you ask for a component that is not part of the group. | Improve this Doc ToComponentDataArrayAsync<T>(Allocator, out JobHandle) Creates a NativeArray containing the components of type T for the selected entities. Declaration public NativeArray<T> ToComponentDataArrayAsync<T>(Allocator allocator, out JobHandle jobhandle) where T : struct, IComponentData Parameters Type Name Description Allocator allocator The type of memory to allocate. JobHandle jobhandle An out parameter assigned a handle that you can use as a dependency for a Job that uses the NativeArray. Returns Type Description NativeArray <T> An array containing the specified component for all the entities selected by the EntityQuery. Type Parameters Name Description T The component type. | Improve this Doc ToEntityArray(Allocator) Creates a NativeArray containing the selected entities. Declaration public NativeArray<Entity> ToEntityArray(Allocator allocator) Parameters Type Name Description Allocator allocator The type of memory to allocate. Returns Type Description NativeArray < Entity > An array containing all the entities selected by the EntityQuery. Remarks This version of the function blocks until the Job used to fill the array is complete. | Improve this Doc ToEntityArrayAsync(Allocator, out JobHandle) Creates a NativeArray containing the selected entities. Declaration public NativeArray<Entity> ToEntityArrayAsync(Allocator allocator, out JobHandle jobhandle) Parameters Type Name Description Allocator allocator The type of memory to allocate. JobHandle jobhandle An out parameter assigned a handle that you can use as a dependency for a Job that uses the NativeArray. Returns Type Description NativeArray < Entity > An array containing all the entities selected by the EntityQuery. Extension Methods EntityQueryManagedComponentExtensions.GetSingleton<T>(EntityQuery) EntityQueryManagedComponentExtensions.SetSingleton<T>(EntityQuery, T) EntityQueryExtensionsForComponentArray.ToComponentArray<T>(EntityQuery) EntityQueryExtensionsForTransformAccessArray.GetTransformAccessArray(EntityQuery)"
  },
  "api/Unity.Entities.EntityGuid.html": {
    "href": "api/Unity.Entities.EntityGuid.html",
    "title": "Struct EntityGuid | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct EntityGuid This component is attached to converted Entities and is guaranteed to be unique within a World. It can be used to map back to the authoring GameObject from which it was converted. Note that an EntityGuid does not have enough information to be persistent across sessions. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] public struct EntityGuid : IComponentData, IEquatable<EntityGuid>, IComparable<EntityGuid> Constructors | Improve this Doc EntityGuid(Int32, Byte, UInt32) Declaration public EntityGuid(int originatingId, byte namespaceId, uint serial) Parameters Type Name Description Int32 originatingId Byte namespaceId UInt32 serial Fields | Improve this Doc a This field, when combined with b , is for working with EntityGuid as opaque bits (the packing may change again in the future, as there are still unused bits remaining). Declaration public ulong a Field Value Type Description UInt64 | Improve this Doc b Use same as a field. Declaration public ulong b Field Value Type Description UInt64 | Improve this Doc Null Declaration public static readonly EntityGuid Null Field Value Type Description EntityGuid Properties | Improve this Doc NamespaceId An ID that supports multiple primary groupings of converted Entities with the same originating object. ID zero is reserved for default conversions. Nonzero ID's are for the developer to manage. Declaration public byte NamespaceId { get; } Property Value Type Description Byte | Improve this Doc OriginatingId Session-unique ID for originating object (typically the authoring GameObject's InstanceID). Declaration public int OriginatingId { get; } Property Value Type Description Int32 | Improve this Doc Serial A unique number used to differentiate Entities associated with the same originating object and namespace. Declaration public uint Serial { get; } Property Value Type Description UInt32 Methods | Improve this Doc CompareTo(EntityGuid) Declaration public int CompareTo(EntityGuid other) Parameters Type Name Description EntityGuid other Returns Type Description Int32 | Improve this Doc Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object) | Improve this Doc Equals(EntityGuid) Declaration public bool Equals(EntityGuid other) Parameters Type Name Description EntityGuid other Returns Type Description Boolean | Improve this Doc GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() | Improve this Doc ToString() Declaration public override string ToString() Returns Type Description String Overrides ValueType.ToString() Operators | Improve this Doc Equality(EntityGuid, EntityGuid) Declaration public static bool operator ==(in EntityGuid lhs, in EntityGuid rhs) Parameters Type Name Description EntityGuid lhs EntityGuid rhs Returns Type Description Boolean | Improve this Doc Inequality(EntityGuid, EntityGuid) Declaration public static bool operator !=(in EntityGuid lhs, in EntityGuid rhs) Parameters Type Name Description EntityGuid lhs EntityGuid rhs Returns Type Description Boolean"
  },
  "api/Unity.Entities.EntityContainerPropertyBag.html": {
    "href": "api/Unity.Entities.EntityContainerPropertyBag.html",
    "title": "Class EntityContainerPropertyBag | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class EntityContainerPropertyBag Inheritance Object EntityContainerPropertyBag Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class EntityContainerPropertyBag : PropertyBag<EntityContainer> Methods | Improve this Doc Accept<TVisitor>(ref EntityContainer, ref TVisitor, ref ChangeTracker) Declaration public override void Accept<TVisitor>(ref EntityContainer container, ref TVisitor visitor, ref ChangeTracker changeTracker) Parameters Type Name Description EntityContainer container TVisitor visitor ChangeTracker changeTracker Type Parameters Name Description TVisitor | Improve this Doc FindProperty<TAction>(String, ref EntityContainer, ref ChangeTracker, ref TAction) Declaration public override bool FindProperty<TAction>(string name, ref EntityContainer container, ref ChangeTracker changeTracker, ref TAction action) Parameters Type Name Description String name EntityContainer container ChangeTracker changeTracker TAction action Returns Type Description Boolean Type Parameters Name Description TAction"
  },
  "api/Unity.Entities.EntityChangeSet.html": {
    "href": "api/Unity.Entities.EntityChangeSet.html",
    "title": "Struct EntityChangeSet | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct EntityChangeSet An atomic package of changes to entity and component data. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct EntityChangeSet : IDisposable Constructors | Improve this Doc EntityChangeSet(Int32, Int32, NativeArray<EntityGuid>, NativeArray<ComponentTypeHash>, NativeArray<NativeString64>, NativeArray<PackedComponent>, NativeArray<PackedComponent>, NativeArray<PackedComponentDataChange>, NativeArray<Byte>, NativeArray<EntityReferenceChange>, NativeArray<BlobAssetReferenceChange>, PackedManagedComponentDataChange[], PackedSharedComponentDataChange[], NativeArray<LinkedEntityGroupChange>, NativeArray<LinkedEntityGroupChange>, NativeArray<BlobAssetChange>, NativeArray<UInt64>, NativeArray<Byte>) Declaration public EntityChangeSet(int createdEntityCount, int destroyedEntityCount, NativeArray<EntityGuid> entities, NativeArray<ComponentTypeHash> typeHashes, NativeArray<NativeString64> names, NativeArray<PackedComponent> addComponents, NativeArray<PackedComponent> removeComponents, NativeArray<PackedComponentDataChange> setComponents, NativeArray<byte> componentData, NativeArray<EntityReferenceChange> entityReferenceChanges, NativeArray<BlobAssetReferenceChange> blobAssetReferenceChanges, PackedManagedComponentDataChange[] setManagedComponents, PackedSharedComponentDataChange[] setSharedComponents, NativeArray<LinkedEntityGroupChange> linkedEntityGroupAdditions, NativeArray<LinkedEntityGroupChange> linkedEntityGroupRemovals, NativeArray<BlobAssetChange> createdBlobAssets, NativeArray<ulong> destroyedBlobAssets, NativeArray<byte> blobAssetData) Parameters Type Name Description Int32 createdEntityCount Int32 destroyedEntityCount NativeArray < EntityGuid > entities NativeArray < ComponentTypeHash > typeHashes NativeArray < NativeString64 > names NativeArray < PackedComponent > addComponents NativeArray < PackedComponent > removeComponents NativeArray < PackedComponentDataChange > setComponents NativeArray < Byte > componentData NativeArray < EntityReferenceChange > entityReferenceChanges NativeArray < BlobAssetReferenceChange > blobAssetReferenceChanges PackedManagedComponentDataChange [] setManagedComponents PackedSharedComponentDataChange [] setSharedComponents NativeArray < LinkedEntityGroupChange > linkedEntityGroupAdditions NativeArray < LinkedEntityGroupChange > linkedEntityGroupRemovals NativeArray < BlobAssetChange > createdBlobAssets NativeArray < UInt64 > destroyedBlobAssets NativeArray < Byte > blobAssetData Fields | Improve this Doc AddComponents A set of all component additions in this change-set. Declaration public readonly NativeArray<PackedComponent> AddComponents Field Value Type Description NativeArray < PackedComponent > | Improve this Doc BlobAssetData The payload for all blob assets in this change set. Declaration public readonly NativeArray<byte> BlobAssetData Field Value Type Description NativeArray < Byte > | Improve this Doc BlobAssetReferenceChanges A packed set of all blob asset references to patch. Declaration public readonly NativeArray<BlobAssetReferenceChange> BlobAssetReferenceChanges Field Value Type Description NativeArray < BlobAssetReferenceChange > | Improve this Doc ComponentData Data payload for all component changes specified in SetComponents Declaration public readonly NativeArray<byte> ComponentData Field Value Type Description NativeArray < Byte > Remarks Data changes are tightly packed. Use the Size to read back. | Improve this Doc CreatedBlobAssets A set of all blob asset creations in this change set. Declaration public readonly NativeArray<BlobAssetChange> CreatedBlobAssets Field Value Type Description NativeArray < BlobAssetChange > Remarks The BlobAssetChange is used to describe the payload within the BlobAssetData array. | Improve this Doc CreatedEntityCount Number of entities from the start of Entities that should be considered as created. Declaration public readonly int CreatedEntityCount Field Value Type Description Int32 | Improve this Doc DestroyedBlobAssets A set of all blob assets destroyed in this change set. Identified by the content hash. Declaration public readonly NativeArray<ulong> DestroyedBlobAssets Field Value Type Description NativeArray < UInt64 > | Improve this Doc DestroyedEntityCount Number of entities from the end of Entities that should be considered as destroyed. Declaration public readonly int DestroyedEntityCount Field Value Type Description Int32 | Improve this Doc Entities A packed array of all entities in this change-set. Declaration public readonly NativeArray<EntityGuid> Entities Field Value Type Description NativeArray < EntityGuid > | Improve this Doc EntityReferenceChanges A packed set of all entity references to patch. Declaration public readonly NativeArray<EntityReferenceChange> EntityReferenceChanges Field Value Type Description NativeArray < EntityReferenceChange > | Improve this Doc LinkedEntityGroupAdditions A set of all linked entity group additions. Declaration public readonly NativeArray<LinkedEntityGroupChange> LinkedEntityGroupAdditions Field Value Type Description NativeArray < LinkedEntityGroupChange > | Improve this Doc LinkedEntityGroupRemovals A set of all linked entity group removals. Declaration public readonly NativeArray<LinkedEntityGroupChange> LinkedEntityGroupRemovals Field Value Type Description NativeArray < LinkedEntityGroupChange > | Improve this Doc Names Names for each entity in this change-set. Declaration public readonly NativeArray<NativeString64> Names Field Value Type Description NativeArray < NativeString64 > | Improve this Doc RemoveComponents A set of all component removals in this change-set. Declaration public readonly NativeArray<PackedComponent> RemoveComponents Field Value Type Description NativeArray < PackedComponent > | Improve this Doc SetComponents A set of all component data modifications in this change-set. Declaration public readonly NativeArray<PackedComponentDataChange> SetComponents Field Value Type Description NativeArray < PackedComponentDataChange > | Improve this Doc SetManagedComponents A set of all managed component data changes. Declaration public readonly PackedManagedComponentDataChange[] SetManagedComponents Field Value Type Description PackedManagedComponentDataChange [] | Improve this Doc SetSharedComponents A set of all shared component data changes. Declaration public readonly PackedSharedComponentDataChange[] SetSharedComponents Field Value Type Description PackedSharedComponentDataChange [] | Improve this Doc TypeHashes A packed array of all types in this change-set. Declaration public readonly NativeArray<ComponentTypeHash> TypeHashes Field Value Type Description NativeArray < ComponentTypeHash > Properties | Improve this Doc HasChanges Declaration public bool HasChanges { get; } Property Value Type Description Boolean | Improve this Doc IsCreated Returns true if this object is allocated. Declaration public bool IsCreated { get; } Property Value Type Description Boolean Methods | Improve this Doc Dispose() Declaration public void Dispose()"
  },
  "api/Unity.Entities.EntityArchetype.html": {
    "href": "api/Unity.Entities.EntityArchetype.html",
    "title": "Struct EntityArchetype | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct EntityArchetype An EntityArchetype is a unique combination of component types. The EntityManager uses the archetype to group all entities that have the same sets of components. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct EntityArchetype : IEquatable<EntityArchetype> Remarks An entity can change archetype fluidly over its lifespan. For example, when you add or remove components, the archetype of the affected entity changes. An archetype object is not a container; rather it is an identifier to each unique combination of component types that an application has created at run time, either directly or implicitly. You can create archetypes directly using CreateArchetype(ComponentType[]) . You also implicitly create archetypes whenever you add or remove a component from an entity. An EntityArchetype object is an immutable singleton; creating an archetype with the same set of components, either directly or implicitly, results in the same archetype for a given EntityManager. The ECS framework uses archetypes to group entities that have the same structure together. The ECS framework stores component data in blocks of memory called chunks . A given chunk stores only entities having the same archetype. You can get the EntityArchetype object for a chunk from its Archetype property. Properties | Improve this Doc ChunkCapacity The number of entities having this archetype that can fit into a single chunk of memory. Declaration public int ChunkCapacity { get; } Property Value Type Description Int32 Capacity is determined by the fixed, 16KB size of the memory blocks allocated by the ECS framework and the total storage size of all the component types in the archetype. | Improve this Doc ChunkCount The current number of chunks storing entities having this archetype. Declaration public int ChunkCount { get; } Property Value Type Description Int32 The number of chunks. Remarks This value can change whenever structural changes occur. Structural changes include creating or destroying entities, adding components to or removing them from an entity, and changing the value of shared components, all of which alter where entities are stored. | Improve this Doc Valid Reports whether this EntityArchetype instance references a non-null archetype. Declaration public bool Valid { get; } Property Value Type Description Boolean True, if the archetype is valid. Methods | Improve this Doc Equals(Object) Reports whether this EntityArchetype references the same archetype as another object. Declaration public override bool Equals(object compare) Parameters Type Name Description Object compare The object to compare. Returns Type Description Boolean True, if the compare parameter is a EntityArchetype instance that points to the same archetype. Overrides ValueType.Equals(Object) | Improve this Doc Equals(EntityArchetype) Compares archetypes for equality. Declaration public bool Equals(EntityArchetype entityArchetype) Parameters Type Name Description EntityArchetype entityArchetype The EntityArchetype to compare. Returns Type Description Boolean Returns true, if both EntityArchetype instances reference the same archetype. | Improve this Doc GetComponentTypes(Allocator) Gets the types of the components making up this archetype. Declaration public NativeArray<ComponentType> GetComponentTypes(Allocator allocator = null) Parameters Type Name Description Allocator allocator The allocation type to use for the returned NativeArray. Returns Type Description NativeArray < ComponentType > A native array containing the ComponentType objects of this archetype. Remarks The set of component types in an archetype cannot change; adding components to an entity or removing components from an entity changes the archetype of that entity (possibly resulting in the creation of a new archetype). The original archetype remains unchanged. | Improve this Doc GetHashCode() Returns the hash of the archetype. Declaration public override int GetHashCode() Returns Type Description Int32 An integer hash code. Overrides ValueType.GetHashCode() Remarks Two EntityArchetype instances referencing the same archetype return the same hash. Operators | Improve this Doc Equality(EntityArchetype, EntityArchetype) Compares the archetypes for equality. Declaration public static bool operator ==(EntityArchetype lhs, EntityArchetype rhs) Parameters Type Name Description EntityArchetype lhs A EntityArchetype object. EntityArchetype rhs Another EntityArchetype object. Returns Type Description Boolean True, if these EntityArchetype instances reference the same archetype. | Improve this Doc Inequality(EntityArchetype, EntityArchetype) Compares the archetypes for inequality. Declaration public static bool operator !=(EntityArchetype lhs, EntityArchetype rhs) Parameters Type Name Description EntityArchetype lhs A EntityArchetype object. EntityArchetype rhs Another EntityArchetype object. Returns Type Description Boolean True, if these EntityArchetype instances reference different archetypes."
  },
  "api/Unity.Entities.ArchetypeChunkIterator.html": {
    "href": "api/Unity.Entities.ArchetypeChunkIterator.html",
    "title": "Struct ArchetypeChunkIterator | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct ArchetypeChunkIterator Can be passed into IJobChunk.RunWithoutJobs to iterate over an entity query without running any jobs. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct ArchetypeChunkIterator"
  },
  "api/Unity.Entities.UniversalDelegates.VRRIIII-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VRRIIII-7.html",
    "title": "Delegate VRRIIII<T0, T1, T2, T3, T4, T5, T6> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VRRIIII<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VRRIIII<T0, T1, T2, T3, T4, T5, T6>(T0 t0, ref T1 t1, ref T2 t2, in T3 t3, in T4 t4, in T5 t5, in T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.VRRIII-6.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VRRIII-6.html",
    "title": "Delegate VRRIII<T0, T1, T2, T3, T4, T5> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VRRIII<T0, T1, T2, T3, T4, T5> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VRRIII<T0, T1, T2, T3, T4, T5>(T0 t0, ref T1 t1, ref T2 t2, in T3 t3, in T4 t4, in T5 t5); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 Type Parameters Name Description T0 T1 T2 T3 T4 T5"
  },
  "api/Unity.Entities.UniversalDelegates.VRRII-5.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VRRII-5.html",
    "title": "Delegate VRRII<T0, T1, T2, T3, T4> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VRRII<T0, T1, T2, T3, T4> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VRRII<T0, T1, T2, T3, T4>(T0 t0, ref T1 t1, ref T2 t2, in T3 t3, in T4 t4); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 Type Parameters Name Description T0 T1 T2 T3 T4"
  },
  "api/Unity.Entities.UniversalDelegates.VRRI-4.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VRRI-4.html",
    "title": "Delegate VRRI<T0, T1, T2, T3> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VRRI<T0, T1, T2, T3> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VRRI<T0, T1, T2, T3>(T0 t0, ref T1 t1, ref T2 t2, in T3 t3); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 Type Parameters Name Description T0 T1 T2 T3"
  },
  "api/Unity.Entities.UniversalDelegates.VRR-3.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VRR-3.html",
    "title": "Delegate VRR<T0, T1, T2> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VRR<T0, T1, T2> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VRR<T0, T1, T2>(T0 t0, ref T1 t1, ref T2 t2); Parameters Type Name Description T0 t0 T1 t1 T2 t2 Type Parameters Name Description T0 T1 T2"
  },
  "api/Unity.Entities.UniversalDelegates.RRRRR-5.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RRRRR-5.html",
    "title": "Delegate RRRRR<T0, T1, T2, T3, T4> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate RRRRR<T0, T1, T2, T3, T4> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RRRRR<T0, T1, T2, T3, T4>(ref T0 t0, ref T1 t1, ref T2 t2, ref T3 t3, ref T4 t4); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 Type Parameters Name Description T0 T1 T2 T3 T4"
  },
  "api/Unity.Entities.UniversalDelegates.RRRRIIII-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RRRRIIII-8.html",
    "title": "Delegate RRRRIIII<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate RRRRIIII<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RRRRIIII<T0, T1, T2, T3, T4, T5, T6, T7>(ref T0 t0, ref T1 t1, ref T2 t2, ref T3 t3, in T4 t4, in T5 t5, in T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.RRRRIII-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RRRRIII-7.html",
    "title": "Delegate RRRRIII<T0, T1, T2, T3, T4, T5, T6> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate RRRRIII<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RRRRIII<T0, T1, T2, T3, T4, T5, T6>(ref T0 t0, ref T1 t1, ref T2 t2, ref T3 t3, in T4 t4, in T5 t5, in T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.RRRRII-6.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RRRRII-6.html",
    "title": "Delegate RRRRII<T0, T1, T2, T3, T4, T5> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate RRRRII<T0, T1, T2, T3, T4, T5> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RRRRII<T0, T1, T2, T3, T4, T5>(ref T0 t0, ref T1 t1, ref T2 t2, ref T3 t3, in T4 t4, in T5 t5); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 Type Parameters Name Description T0 T1 T2 T3 T4 T5"
  },
  "api/Unity.Entities.Editor.GameObjectEntityEditor.html": {
    "href": "api/Unity.Entities.Editor.GameObjectEntityEditor.html",
    "title": "Class GameObjectEntityEditor | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class GameObjectEntityEditor Inheritance Object GameObjectEntityEditor Namespace : Unity.Entities.Editor <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class GameObjectEntityEditor : Editor Methods | Improve this Doc OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Unity.Entities.Editor.ExtraTypesProvider.html": {
    "href": "api/Unity.Entities.Editor.ExtraTypesProvider.html",
    "title": "Class ExtraTypesProvider | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class ExtraTypesProvider Inheritance Object ExtraTypesProvider Namespace : Unity.Entities.Editor <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public sealed class ExtraTypesProvider"
  },
  "api/Unity.Entities.DynamicBuffer-1.html": {
    "href": "api/Unity.Entities.DynamicBuffer-1.html",
    "title": "Struct DynamicBuffer<T> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct DynamicBuffer<T> An array-like data structure that can be used as a component. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct DynamicBuffer<T> : IEnumerable<T>, IEnumerable where T : struct Type Parameters Name Description T The data type stored in the buffer. Must be a value type. Examples [InternalBufferCapacity(8)] public struct FloatBufferElement : IBufferElementData { // Actual value each buffer element will store. public float Value; // The following implicit conversions are optional, but can be convenient. public static implicit operator float(FloatBufferElement e) { return e.Value; } public static implicit operator FloatBufferElement(float e) { return new FloatBufferElement {Value = e}; } } public class DynamicBufferExample : ComponentSystem { protected override void OnUpdate() { float sum = 0; Entities.ForEach((DynamicBuffer<FloatBufferElement> buffer) => { foreach (var element in buffer.Reinterpret<float>()) { sum += element; } }); Debug.Log(\"Sum of all buffers: \" + sum); } } Properties | Improve this Doc Capacity The number of elements the buffer can hold. Declaration public int Capacity { get; set; } Property Value Type Description Int32 Remarks Capacity can not be set lower than Length - this will raise an exception. If Capacity grows greater than the internal capacity of the DynamicBuffer, memory external to the DynamicBuffer will be allocated. If Capacity shrinks to the internal capacity of the DynamicBuffer or smaller, memory external to the DynamicBuffer will be freed. No effort is made to avoid costly reallocations when Capacity changes slightly; if Capacity is incremented by 1, an array 1 element bigger is allocated. | Improve this Doc IsCreated Whether the memory for this dynamic buffer has been allocated. Declaration public bool IsCreated { get; } Property Value Type Description Boolean | Improve this Doc Item[Int32] Array-like indexing operator. Declaration public T this[int index] { get; set; } Parameters Type Name Description Int32 index The zero-based index. Property Value Type Description T Examples for (int i = 0; i < buffer.Length; i++) { buffer[i] = i * i; } | Improve this Doc Length The number of elements the buffer holds. Declaration public int Length { get; } Property Value Type Description Int32 Examples for (int i = 0; i < buffer.Length; i++) { buffer[i] = i * i; } Methods | Improve this Doc Add(T) Adds an element to the end of the buffer, resizing as necessary. Declaration public int Add(T elem) Parameters Type Name Description T elem The element to add to the buffer. Returns Type Description Int32 The new length of the buffer. Remarks The buffer is resized if it has no additional capacity. Examples buffer.Add(5); | Improve this Doc AddRange(NativeArray<T>) Adds all the elements from newElems to the end of the buffer, resizing as necessary. Declaration public void AddRange(NativeArray<T> newElems) Parameters Type Name Description NativeArray <T> newElems The native array of elements to insert. Remarks The buffer is resized if it has no additional capacity. Examples int[] source = {1, 2, 3, 4, 5}; NativeArray<int> newElements = new NativeArray<int>(source, Allocator.Persistent); buffer.AddRange(newElements); | Improve this Doc AsNativeArray() Return a native array that aliases the original buffer contents. Declaration public NativeArray<T> AsNativeArray() Returns Type Description NativeArray <T> Remarks You can only access the native array as long as the the buffer memory has not been reallocated. Several dynamic buffer operations, such as Add(T) and TrimExcess() can result in buffer reallocation. Examples int[] intArray = {1, 2, 3, 4, 5}; NativeArray<int>.Copy(intArray, buffer.AsNativeArray()); | Improve this Doc Clear() Sets the buffer length to zero. Declaration public void Clear() Remarks The capacity of the buffer remains unchanged. Buffer memory is not overwritten. Examples buffer.Clear(); | Improve this Doc CopyFrom(T[]) Copies all the elements from an array. Declaration public void CopyFrom(T[] v) Parameters Type Name Description T[] v A C# array containing the elements to copy. Examples int[] integerArray = {1, 2, 3, 4, 5}; buffer.CopyFrom(integerArray); Exceptions Type Condition ArgumentNullException | Improve this Doc CopyFrom(NativeArray<T>) Copies all the elements from the specified native array into this dynamic buffer. Declaration public void CopyFrom(NativeArray<T> v) Parameters Type Name Description NativeArray <T> v The native array containing the elements to copy. Examples int[] sourceArray = {1, 2, 3, 4, 5}; NativeArray<int> nativeArray = new NativeArray<int>(source, Allocator.Persistent); buffer.CopyFrom(nativeArray); | Improve this Doc CopyFrom(DynamicBuffer<T>) Copies all the elements from another dynamic buffer. Declaration public void CopyFrom(DynamicBuffer<T> v) Parameters Type Name Description DynamicBuffer <T> v The dynamic buffer containing the elements to copy. Examples buffer.CopyFrom(secondBuffer); | Improve this Doc EnsureCapacity(Int32) Ensures that the buffer has at least the specified capacity. Declaration public void EnsureCapacity(int length) Parameters Type Name Description Int32 length The buffer capacity is ensured to be at least this big. Remarks If length is greater than the current Capacity of this buffer and greater than the capacity reserved with InternalBufferCapacityAttribute , this function allocates a new memory block and copies the current buffer to it. The number of elements in the buffer remains unchanged. Examples buffer.EnsureCapacity(buffer.Capacity + 10); | Improve this Doc GetEnumerator() Provides an enumerator for iterating over the buffer elements. Declaration public NativeArray<T>.Enumerator GetEnumerator() Returns Type Description NativeArray.Enumerator <> The enumerator. Examples foreach (var element in buffer) { //Use element... } | Improve this Doc GetUnsafePtr() Gets an langword_csharp_unsafe pointer to the contents of the buffer. Declaration public void *GetUnsafePtr() Returns Type Description Void * A typed, unsafe pointer to the first element in the buffer. Remarks This function can only be called in unsafe code contexts. | Improve this Doc Insert(Int32, T) Inserts an element at the specified index, resizing as necessary. Declaration public void Insert(int index, T elem) Parameters Type Name Description Int32 index The position at which to insert the new element. T elem The element to add to the buffer. Remarks The buffer is resized if it has no additional capacity. Examples if (insertionIndex < buffer.Length) buffer.Insert(insertionIndex, 6); | Improve this Doc Reinterpret<U>() Returns a dynamic buffer of a different type, pointing to the same buffer memory. Declaration public DynamicBuffer<U> Reinterpret<U>() where U : struct Returns Type Description DynamicBuffer <U> A dynamic buffer of the reinterpreted type. Type Parameters Name Description U The reinterpreted type. Remarks No memory modification occurs. The reinterpreted type must be the same size in memory as the original type. Examples Entities.ForEach((DynamicBuffer<FloatBufferElement> buffer) => { DynamicBuffer<float> floatBuffer = buffer.Reinterpret<float>(); for (int i = 0; i < floatBuffer.Length; i++) { floatBuffer[i] = i * 1.2f; } }).ScheduleParallel(); Exceptions Type Condition InvalidOperationException If the reinterpreted type is a different size than the original. | Improve this Doc RemoveAt(Int32) Removes the element at the specified index. Declaration public void RemoveAt(int index) Parameters Type Name Description Int32 index The index of the element to remove. Examples if (insertionIndex < buffer.Length) buffer.RemoveAt(insertionIndex); | Improve this Doc RemoveRange(Int32, Int32) Removes the specified number of elements, starting with the element at the specified index. Declaration public void RemoveRange(int index, int count) Parameters Type Name Description Int32 index The first element to remove. Int32 count How many elements tot remove. Remarks The buffer capacity remains unchanged. Examples buffer.RemoveRange(start, 5); | Improve this Doc ResizeUninitialized(Int32) Increases the buffer capacity and length. Declaration public void ResizeUninitialized(int length) Parameters Type Name Description Int32 length The new length of the buffer. Remarks If length is less than the current length of the buffer, the length of the buffer is reduced while the capacity remains unchanged. Examples buffer.ResizeUninitialized(buffer.Length + 10); | Improve this Doc ToNativeArray(Allocator) Copies the buffer into a new native array. Declaration public NativeArray<T> ToNativeArray(Allocator allocator) Parameters Type Name Description Allocator allocator The type of memory allocation to use when creating the native array. Returns Type Description NativeArray <T> A native array containing copies of the buffer elements. Examples NativeArray<int> copy = buffer.ToNativeArray(Allocator.Persistent); | Improve this Doc TrimExcess() Removes any excess capacity in the buffer. Declaration public void TrimExcess() Remarks Sets the buffer capacity to the current length. If the buffer memory size changes, the current contents of the buffer are copied to a new block of memory and the old memory is freed. If the buffer now fits in the space in the chunk reserved with InternalBufferCapacityAttribute , then the buffer contents are moved to the chunk. Examples if (buffer.Capacity > buffer.Length) buffer.TrimExcess();"
  },
  "api/Unity.Entities.DisallowRefReturnCrossingThisAttribute.html": {
    "href": "api/Unity.Entities.DisallowRefReturnCrossingThisAttribute.html",
    "title": "Class DisallowRefReturnCrossingThisAttribute | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class DisallowRefReturnCrossingThisAttribute What is this : Attribute signaling that ref returned values, of a type that has this attribute, cannot intersect with calls to methods that also have this attribute. Motivation(s): ref returns of values that are backed by native memory (unsafe), like IComponentData in ecs chunks, can have the referenced memory invalidated by certain methods. A way is needed to detect these situations a compilation time to prevent accessing invalidated references. Notes: This attribute is used/feeds a Static Analyzer at compilation time. Attribute transfers with aggragations: struct A has this attribute, struct B has a field of type A; both A and B are concidered to have the attribute. Inheritance Object Attribute DisallowRefReturnCrossingThisAttribute Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [AttributeUsage(AttributeTargets.Struct | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Interface)] public class DisallowRefReturnCrossingThisAttribute : Attribute, _Attribute"
  },
  "api/Unity.Entities.ConvertToEntity.html": {
    "href": "api/Unity.Entities.ConvertToEntity.html",
    "title": "Class ConvertToEntity | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class ConvertToEntity Inheritance Object ConvertToEntity Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class ConvertToEntity : MonoBehaviour Fields | Improve this Doc ConversionMode Declaration public ConvertToEntity.Mode ConversionMode Field Value Type Description ConvertToEntity.Mode"
  },
  "api/Unity.Entities.ConvertToEntity.Mode.html": {
    "href": "api/Unity.Entities.ConvertToEntity.Mode.html",
    "title": "Enum ConvertToEntity.Mode | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Enum ConvertToEntity.Mode Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public enum Mode Fields Name Description ConvertAndDestroy ConvertAndInjectGameObject"
  },
  "api/Unity.Entities.ComponentType.html": {
    "href": "api/Unity.Entities.ComponentType.html",
    "title": "Struct ComponentType | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct ComponentType Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct ComponentType : IEquatable<ComponentType> Constructors | Improve this Doc ComponentType(Type, ComponentType.AccessMode) Declaration public ComponentType(Type type, ComponentType.AccessMode accessModeType = ComponentType.AccessMode.ReadWrite) Parameters Type Name Description Type type ComponentType.AccessMode accessModeType Fields | Improve this Doc AccessModeType Declaration public ComponentType.AccessMode AccessModeType Field Value Type Description ComponentType.AccessMode | Improve this Doc TypeIndex Declaration public int TypeIndex Field Value Type Description Int32 Properties | Improve this Doc HasEntityReferences Declaration public bool HasEntityReferences { get; } Property Value Type Description Boolean | Improve this Doc IsBuffer Declaration public bool IsBuffer { get; } Property Value Type Description Boolean | Improve this Doc IsChunkComponent Declaration public bool IsChunkComponent { get; } Property Value Type Description Boolean | Improve this Doc IsManagedComponent Declaration public bool IsManagedComponent { get; } Property Value Type Description Boolean | Improve this Doc IsSharedComponent Declaration public bool IsSharedComponent { get; } Property Value Type Description Boolean | Improve this Doc IsSystemStateComponent Declaration public bool IsSystemStateComponent { get; } Property Value Type Description Boolean | Improve this Doc IsSystemStateSharedComponent Declaration public bool IsSystemStateSharedComponent { get; } Property Value Type Description Boolean | Improve this Doc IsZeroSized Declaration public bool IsZeroSized { get; } Property Value Type Description Boolean Methods | Improve this Doc ChunkComponent(Type) Declaration public static ComponentType ChunkComponent(Type type) Parameters Type Name Description Type type Returns Type Description ComponentType | Improve this Doc ChunkComponent<T>() Declaration public static ComponentType ChunkComponent<T>() Returns Type Description ComponentType Type Parameters Name Description T | Improve this Doc ChunkComponentReadOnly<T>() Declaration public static ComponentType ChunkComponentReadOnly<T>() Returns Type Description ComponentType Type Parameters Name Description T | Improve this Doc Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object) | Improve this Doc Equals(ComponentType) Declaration public bool Equals(ComponentType other) Parameters Type Name Description ComponentType other Returns Type Description Boolean | Improve this Doc Exclude(Type) Declaration public static ComponentType Exclude(Type type) Parameters Type Name Description Type type Returns Type Description ComponentType | Improve this Doc Exclude<T>() Declaration public static ComponentType Exclude<T>() Returns Type Description ComponentType Type Parameters Name Description T | Improve this Doc FromTypeIndex(Int32) Declaration public static ComponentType FromTypeIndex(int typeIndex) Parameters Type Name Description Int32 typeIndex Returns Type Description ComponentType | Improve this Doc GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() | Improve this Doc GetManagedType() Declaration public Type GetManagedType() Returns Type Description Type | Improve this Doc ReadOnly(Int32) Declaration public static ComponentType ReadOnly(int typeIndex) Parameters Type Name Description Int32 typeIndex Returns Type Description ComponentType | Improve this Doc ReadOnly(Type) Declaration public static ComponentType ReadOnly(Type type) Parameters Type Name Description Type type Returns Type Description ComponentType | Improve this Doc ReadOnly<T>() Declaration public static ComponentType ReadOnly<T>() Returns Type Description ComponentType Type Parameters Name Description T | Improve this Doc ReadWrite<T>() Declaration public static ComponentType ReadWrite<T>() Returns Type Description ComponentType Type Parameters Name Description T Operators | Improve this Doc Equality(ComponentType, ComponentType) Declaration public static bool operator ==(ComponentType lhs, ComponentType rhs) Parameters Type Name Description ComponentType lhs ComponentType rhs Returns Type Description Boolean | Improve this Doc GreaterThan(ComponentType, ComponentType) Declaration public static bool operator>(ComponentType lhs, ComponentType rhs) Parameters Type Name Description ComponentType lhs ComponentType rhs Returns Type Description Boolean | Improve this Doc Implicit(Type to ComponentType) Declaration public static implicit operator ComponentType(Type type) Parameters Type Name Description Type type Returns Type Description ComponentType | Improve this Doc Inequality(ComponentType, ComponentType) Declaration public static bool operator !=(ComponentType lhs, ComponentType rhs) Parameters Type Name Description ComponentType lhs ComponentType rhs Returns Type Description Boolean | Improve this Doc LessThan(ComponentType, ComponentType) Declaration public static bool operator <(ComponentType lhs, ComponentType rhs) Parameters Type Name Description ComponentType lhs ComponentType rhs Returns Type Description Boolean"
  },
  "api/Unity.Entities.ComponentType.AccessMode.html": {
    "href": "api/Unity.Entities.ComponentType.AccessMode.html",
    "title": "Enum ComponentType.AccessMode | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Enum ComponentType.AccessMode Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public enum AccessMode Fields Name Description Exclude ReadOnly ReadWrite"
  },
  "api/Unity.Entities.ComponentSystem.html": {
    "href": "api/Unity.Entities.ComponentSystem.html",
    "title": "Class ComponentSystem | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class ComponentSystem An abstract class to implement in order to create a system. Inheritance Object ComponentSystemBase ComponentSystem ComponentSystemGroup ConvertToEntitySystem EntityCommandBufferSystem UpdateWorldTimeSystem SceneSystem Inherited Members ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnCreate() ComponentSystemBase.OnDestroyManager() ComponentSystemBase.OnCreateManager() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetArchetypeChunkComponentType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkComponentTypeDynamic(ComponentType) ComponentSystemBase.GetArchetypeChunkBufferType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkSharedComponentType<T>() ComponentSystemBase.GetArchetypeChunkEntityType() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public abstract class ComponentSystem : ComponentSystemBase Remarks Implement a ComponentSystem subclass for systems that perform their work on the main thread or that use Jobs not specifically optimized for ECS. To use the ECS-specific Jobs, such as IJobForEach<T0> or IJobChunk , implement JobComponentSystem instead. Properties | Improve this Doc Entities This system's query builder object. Declaration protected EntityQueryBuilder Entities { get; } Property Value Type Description EntityQueryBuilder Use to select and iterate over entities. | Improve this Doc PostUpdateCommands This system's EntityCommandBuffer . Declaration public EntityCommandBuffer PostUpdateCommands { get; } Property Value Type Description EntityCommandBuffer A queue of entity-related commands to playback after the system's update function finishes. Remarks When iterating over a collection of entities with Entities , the system prohibits structural changes that would invalidate that collection. Such changes include creating and destroying entities, adding or removing components, and changing the value of shared components. Instead, add structural change commands to this PostUpdateCommands command buffer. The system executes commands added to this command buffer in order after this system's OnUpdate() function returns. Methods | Improve this Doc InitEntityQueryCache(Int32) Initializes this system's internal cache of EntityQuery objects to the specified number of queries. Declaration protected void InitEntityQueryCache(int cacheSize) Parameters Type Name Description Int32 cacheSize The initial capacity of the system's EntityQuery array. Remarks A system's entity query cache expands automatically as you add additional queries. However, initializing the cache to the correct size when you initialize a system is more efficient and avoids unnecessary, garbage-collected memory allocations. | Improve this Doc OnUpdate() Implement OnUpdate to perform the major work of this system. Declaration protected abstract void OnUpdate() Remarks The system invokes OnUpdate once per frame on the main thread when any of this system's EntityQueries match existing entities, or if the system has the AlwaysUpdateSystemAttribute . See Also ShouldRunSystem () | Improve this Doc Update() Declaration public override sealed void Update() Overrides ComponentSystemBase.Update() Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Entities.ComponentDataProxyBase.html": {
    "href": "api/Unity.Entities.ComponentDataProxyBase.html",
    "title": "Class ComponentDataProxyBase | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class ComponentDataProxyBase Inheritance Object ComponentDataProxyBase ComponentDataProxy<T> DynamicBufferProxy<T> SharedComponentDataProxy<T> Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public abstract class ComponentDataProxyBase : MonoBehaviour, ISerializationCallbackReceiver Methods | Improve this Doc OnDisable() Declaration protected virtual void OnDisable() | Improve this Doc OnEnable() Declaration protected virtual void OnEnable()"
  },
  "api/Unity.Entities.ChangeVersionUtility.html": {
    "href": "api/Unity.Entities.ChangeVersionUtility.html",
    "title": "Class ChangeVersionUtility | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class ChangeVersionUtility Inheritance Object ChangeVersionUtility Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class ChangeVersionUtility Methods | Improve this Doc DidChange(UInt32, UInt32) Declaration public static bool DidChange(uint changeVersion, uint requiredVersion) Parameters Type Name Description UInt32 changeVersion UInt32 requiredVersion Returns Type Description Boolean"
  },
  "api/Unity.Entities.BuildUtils.html": {
    "href": "api/Unity.Entities.BuildUtils.html",
    "title": "Namespace Unity.Entities.BuildUtils | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Namespace Unity.Entities.BuildUtils Classes MonoExtensions TypeHash TypeUtils Structs TypeUtils.AlignAndSize"
  },
  "api/Unity.Entities.BlobStringExtensions.html": {
    "href": "api/Unity.Entities.BlobStringExtensions.html",
    "title": "Class BlobStringExtensions | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class BlobStringExtensions Extensions that allow the creation of BlobString instances by a BlobBuilder . Inheritance Object BlobStringExtensions Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class BlobStringExtensions Methods | Improve this Doc AllocateString(ref BlobBuilder, ref BlobString, String) Allocates memory to store the string in a blob asset and copies the string data into it. Declaration public static void AllocateString(this ref BlobBuilder builder, ref BlobString blobStr, string value) Parameters Type Name Description BlobBuilder builder The BlobBuilder instance building the blob asset. BlobString blobStr A reference to the field in the blob asset that will store the string. This function allocates memory for that field and sets the string value. String value The string to copy into the blob asset."
  },
  "api/Unity.Entities.BlobBuilder.html": {
    "href": "api/Unity.Entities.BlobBuilder.html",
    "title": "Struct BlobBuilder | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct BlobBuilder Creates blob assets. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct BlobBuilder : IDisposable Remarks A blob asset is an immutable data structure stored in unmanaged memory. Blob assets can contain primitive types, strings, structs, arrays, and arrays of arrays. Arrays and structs must only contain blittable types. Strings must be of type BlobString (or a specialized unmanaged string type such as ). To use a BlobBuilder object to create a blob asset: Declare the structure of the blob asset as a struct. Create a BlobBuilder object. Call the ConstructRoot<T>() method, where T is the struct definng the asset structure. Initialize primitive values defined at the root level of the asset. Allocate memory for arrays, structs, and BlobString instances at the root. Initialize the values of those arrays, structs, and strings. Continue allocating memory and initializing values until you have fully constructed the asset. Call CreateBlobAssetReference<T>(Allocator) to create a reference to the blob asset in memory. Dispose the BlobBuilder object. Use the BlobAssetReference<T> returned by CreateBlobAssetReference<T>(Allocator) to reference the blob asset. You can use a BlobAssetReference<T> as a field of an IComponentData struct. More than one entity can reference the same blob asset. Call Dispose() to free the memory allocated for a blob asset. Blob assets cannot be modified once created. Instead, you must create a new blob asset, update any references to the old one and then dispose of it. Examples public class UsingBuilder { } Constructors | Improve this Doc BlobBuilder(Allocator, Int32) Constructs a BlobBuilder object. Declaration public BlobBuilder(Allocator allocator, int chunkSize = 65536) Parameters Type Name Description Allocator allocator The type of allocator to use for the BlobBuilder's internal, temporary data. Use unless the BlobBuilder exists across more than four Unity frames. Int32 chunkSize (Optional) The minimum amount of memory to allocate while building an asset. The default value should suit most use cases. A smaller chunkSize results in more allocations; a larger chunkSize could increase the BlobBuilder's total memory allocation (which is freed when you dispose of the BlobBuilder. Methods | Improve this Doc Allocate<T>(ref BlobArray<T>, Int32) Allocates enough memory to store length elements of struct T . Declaration public BlobBuilderArray<T> Allocate<T>(ref BlobArray<T> ptr, int length) where T : struct Parameters Type Name Description BlobArray <T> ptr A reference to a BlobArray field in a blob asset. Int32 length The number of elements to allocate. Returns Type Description BlobBuilderArray <T> A reference to the newly allocated array as a mutable BlobBuilderArray instance. Type Parameters Name Description T The struct data type. | Improve this Doc Allocate<T>(ref BlobPtr<T>) Allocates enough memory to store a struct of type T . Declaration public T Allocate<T>(ref BlobPtr<T> ptr) where T : struct Parameters Type Name Description BlobPtr <T> ptr A reference to a blob pointer field in a blob asset. Returns Type Description T A reference to the newly allocated struct. Type Parameters Name Description T The struct data type. | Improve this Doc Construct<T>(ref BlobArray<T>, T[]) Copies an array of structs to an array in a blob asset after allocating the necessary memory. Declaration public BlobBuilderArray<T> Construct<T>(ref BlobArray<T> blobArray, params T[] data) where T : struct Parameters Type Name Description BlobArray <T> blobArray A reference to a BlobArray field in a blob asset. T[] data An array containing structs of type T . Returns Type Description BlobBuilderArray <T> A reference to the newly constructed array as a mutable BlobBuilderArray instance. Type Parameters Name Description T The struct data type. | Improve this Doc ConstructRoot<T>() Creates the top-level fields of a single blob asset. Declaration public T ConstructRoot<T>() where T : struct Returns Type Description T A reference to the blob data under construction. Type Parameters Name Description T A struct that defines the structure of the blob asset. Remarks This function allocates memory for the top-level fields of a blob asset and returns a reference to it. Use this root reference to initialize field values and to allocate memory for arrays and structs. | Improve this Doc CreateBlobAssetReference<T>(Allocator) Completes construction of the blob asset and returns a reference to the asset in unmanaged memory. Declaration public BlobAssetReference<T> CreateBlobAssetReference<T>(Allocator allocator) where T : struct Parameters Type Name Description Allocator allocator The type of memory to allocate. Unless the asset has a very short life span, use . Returns Type Description BlobAssetReference <T> Type Parameters Name Description T The data type of the struct used to construct the asset's root. Use the same struct type that you used when calling ConstructRoot<T>() . Remarks Use the BlobAssetReference<T> to access the blob asset. When the asset is no longer needed, call Dispose() to destroy the blob asset and free its allocated memory. | Improve this Doc Dispose() Disposes of this BlobBuilder instance and frees its temporary memory allocations. Declaration public void Dispose() Remarks Call Dispose() after calling CreateBlobAssetReference<T>(Allocator) . Extension Methods BlobStringExtensions.AllocateString(ref BlobBuilder, ref BlobString, String)"
  },
  "api/Unity.Entities.BlobAssetReference-1.html": {
    "href": "api/Unity.Entities.BlobAssetReference-1.html",
    "title": "Struct BlobAssetReference<T> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct BlobAssetReference<T> A reference to a blob asset stored in unmanaged memory. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct BlobAssetReference<T> : IDisposable, IEquatable<BlobAssetReference<T>> where T : struct Type Parameters Name Description T The struct data type defining the data structure of the blob asset. Remarks Create a blob asset using a BlobBuilder or by deserializing a serialized blob asset. Properties | Improve this Doc IsCreated Reports whether this instance references a valid blob asset. Declaration public bool IsCreated { get; } Property Value Type Description Boolean True, if this instance references a valid blob instance. | Improve this Doc Null A \"null\" blob asset reference that can be used to test if a BlobAssetReference instance Declaration public static BlobAssetReference<T> Null { get; } Property Value Type Description BlobAssetReference <T> | Improve this Doc Value A reference to the blob asset data. Declaration public T Value { get; } Property Value Type Description T The root data structure of the blob asset data. Remarks The property is a reference return . Methods | Improve this Doc Create(T) Creates a blob asset from an instance of a struct. Declaration public static BlobAssetReference<T> Create(T value) Parameters Type Name Description T value An instance of T . Returns Type Description BlobAssetReference <T> A reference to newly created blob asset. Remarks The struct must only contain blittable fields (primitive types, fixed-length arrays, or other structs meeting these same criteria). The blob asset is created in unmanaged memory. Call Dispose() to free the asset memory when it is no longer needed. This function can only be used in an context. See Also BlobBuilder | Improve this Doc Create(Byte[]) Creates a blob asset from a byte array. Declaration public static BlobAssetReference<T> Create(byte[] data) Parameters Type Name Description Byte [] data The byte array containing the data to store in the blob asset. Returns Type Description BlobAssetReference <T> A reference to newly created blob asset. Remarks The blob asset is created in unmanaged memory. Call Dispose() to free the asset memory when it is no longer needed. This function can only be used in an context. See Also BlobBuilder | Improve this Doc Create(Void*, Int32) Creates a blob asset from a pointer to data and a specified size. Declaration public static BlobAssetReference<T> Create(void *ptr, int length) Parameters Type Name Description Void * ptr A pointer to the buffer containing the data to store in the blob asset. Int32 length The length of the buffer in bytes. Returns Type Description BlobAssetReference <T> A reference to newly created blob asset. Remarks The blob asset is created in unmanaged memory. Call Dispose() to free the asset memory when it is no longer needed. This function can only be used in an context. See Also BlobBuilder | Improve this Doc Dispose() Destroys the referenced blob asset and frees its memory. Declaration public void Dispose() Exceptions Type Condition InvalidOperationException Thrown if you attempt to dispose a blob asset that loaded as part of a scene or subscene. | Improve this Doc Equals(Object) Two BlobAssetReferences are equal when they reference the same data. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare to this reference Returns Type Description Boolean True, if the object is a BlobAssetReference instance that references to the same data as this one, or if both objects are Null BlobAssetReference instances. Overrides ValueType.Equals(Object) | Improve this Doc Equals(BlobAssetReference<T>) Two BlobAssetReferences are equal when they reference the same data. Declaration public bool Equals(BlobAssetReference<T> other) Parameters Type Name Description BlobAssetReference <T> other The reference to compare to this one. Returns Type Description Boolean True, if both references point to the same data or if both are Null . | Improve this Doc GetHashCode() Generates the hash code for this object. Declaration public override int GetHashCode() Returns Type Description Int32 A standard C# value-type hash code. Overrides ValueType.GetHashCode() | Improve this Doc GetUnsafePtr() Provides an unsafe pointer to the blob asset data. Declaration public void *GetUnsafePtr() Returns Type Description Void * An unsafe pointer. The pointer is null for invalid BlobAssetReference instances. Remarks You can only use unsafe pointers in contexts. | Improve this Doc TryRead(Byte[], Int32, out BlobAssetReference<T>) Reads bytes from a buffer, validates the expected serialized version, and deserializes them into a new blob asset. Declaration public static bool TryRead(byte[] buffer, int version, out BlobAssetReference<T> result) Parameters Type Name Description Byte [] buffer Byte array of buffer Int32 version Expected version number of the blob data. BlobAssetReference <T> result The resulting BlobAssetReference if the data was read successful. Returns Type Description Boolean A bool if the read was successful or not. | Improve this Doc TryRead(String, Int32, out BlobAssetReference<T>) Reads bytes from a fileName, validates the expected serialized version, and deserializes them into a new blob asset. Declaration public static bool TryRead(string path, int version, out BlobAssetReference<T> result) Parameters Type Name Description String path The path of the blob data to read. Int32 version Expected version number of the blob data. BlobAssetReference <T> result The resulting BlobAssetReference if the data was read successful. Returns Type Description Boolean A bool if the read was successful or not. | Improve this Doc Write(BlobBuilder, String, Int32) Writes the blob data to a path with serialized version. Declaration public static void Write(BlobBuilder builder, string path, int verison) Parameters Type Name Description BlobBuilder builder The BlobBuilder containing the blob to write. String path The path to write the blob data. Int32 verison Operators | Improve this Doc Equality(BlobAssetReference<T>, BlobAssetReference<T>) Two BlobAssetReferences are equal when they reference the same data. Declaration public static bool operator ==(BlobAssetReference<T> lhs, BlobAssetReference<T> rhs) Parameters Type Name Description BlobAssetReference <T> lhs The BlobAssetReference on the left side of the operator. BlobAssetReference <T> rhs The BlobAssetReference on the right side of the operator. Returns Type Description Boolean True, if both references point to the same data or if both are Null . | Improve this Doc Inequality(BlobAssetReference<T>, BlobAssetReference<T>) Two BlobAssetReferences are not equal unless they reference the same data. Declaration public static bool operator !=(BlobAssetReference<T> lhs, BlobAssetReference<T> rhs) Parameters Type Name Description BlobAssetReference <T> lhs The BlobAssetReference on the left side of the operator. BlobAssetReference <T> rhs The BlobAssetReference on the right side of the operator. Returns Type Description Boolean True, if the references point to different data in memory or if one is Null ."
  },
  "api/Unity.Entities.BeginSimulationEntityCommandBufferSystem.html": {
    "href": "api/Unity.Entities.BeginSimulationEntityCommandBufferSystem.html",
    "title": "Class BeginSimulationEntityCommandBufferSystem | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class BeginSimulationEntityCommandBufferSystem Inheritance Object ComponentSystemBase ComponentSystem EntityCommandBufferSystem BeginSimulationEntityCommandBufferSystem Inherited Members EntityCommandBufferSystem.CreateCommandBuffer() EntityCommandBufferSystem.AddJobHandleForProducer(JobHandle) EntityCommandBufferSystem.OnCreate() EntityCommandBufferSystem.OnDestroy() EntityCommandBufferSystem.OnUpdate() ComponentSystem.PostUpdateCommands ComponentSystem.InitEntityQueryCache(Int32) ComponentSystem.Entities ComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnDestroyManager() ComponentSystemBase.OnCreateManager() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetArchetypeChunkComponentType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkComponentTypeDynamic(ComponentType) ComponentSystemBase.GetArchetypeChunkBufferType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkSharedComponentType<T>() ComponentSystemBase.GetArchetypeChunkEntityType() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [UpdateInGroup(typeof(SimulationSystemGroup))] public class BeginSimulationEntityCommandBufferSystem : EntityCommandBufferSystem Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Transforms.PostRotationEulerYXZ.html": {
    "href": "api/Unity.Transforms.PostRotationEulerYXZ.html",
    "title": "Struct PostRotationEulerYXZ | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct PostRotationEulerYXZ Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] [WriteGroup(typeof(PostRotation))] public struct PostRotationEulerYXZ : IComponentData Fields | Improve this Doc Value Declaration public float3 Value Field Value Type Description float3"
  },
  "api/Unity.Transforms.PostRotationEulerXZY.html": {
    "href": "api/Unity.Transforms.PostRotationEulerXZY.html",
    "title": "Struct PostRotationEulerXZY | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct PostRotationEulerXZY Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] [WriteGroup(typeof(PostRotation))] public struct PostRotationEulerXZY : IComponentData Fields | Improve this Doc Value Declaration public float3 Value Field Value Type Description float3"
  },
  "api/Unity.Transforms.PostRotationEulerXYZ.html": {
    "href": "api/Unity.Transforms.PostRotationEulerXYZ.html",
    "title": "Struct PostRotationEulerXYZ | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct PostRotationEulerXYZ Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] [WriteGroup(typeof(PostRotation))] public struct PostRotationEulerXYZ : IComponentData Fields | Improve this Doc Value Declaration public float3 Value Field Value Type Description float3"
  },
  "api/Unity.Transforms.PostRotationEulerSystem.html": {
    "href": "api/Unity.Transforms.PostRotationEulerSystem.html",
    "title": "Class PostRotationEulerSystem | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class PostRotationEulerSystem Inheritance Object ComponentSystemBase JobComponentSystem PostRotationEulerSystem EndFramePostRotationEulerSystem Inherited Members JobComponentSystem.Entities JobComponentSystem.Job JobComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnDestroyManager() ComponentSystemBase.OnCreateManager() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetArchetypeChunkComponentType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkComponentTypeDynamic(ComponentType) ComponentSystemBase.GetArchetypeChunkBufferType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkSharedComponentType<T>() ComponentSystemBase.GetArchetypeChunkEntityType() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public abstract class PostRotationEulerSystem : JobComponentSystem Methods | Improve this Doc OnCreate() Declaration protected override void OnCreate() Overrides ComponentSystemBase.OnCreate() | Improve this Doc OnUpdate(JobHandle) Declaration protected override JobHandle OnUpdate(JobHandle inputDependencies) Parameters Type Name Description JobHandle inputDependencies Returns Type Description JobHandle Overrides JobComponentSystem.OnUpdate(JobHandle) Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Transforms.CopyTransformToGameObject.html": {
    "href": "api/Unity.Transforms.CopyTransformToGameObject.html",
    "title": "Struct CopyTransformToGameObject | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct CopyTransformToGameObject Copy Transform to GameObject associated with Entity from TransformMatrix. Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct CopyTransformToGameObject : IComponentData"
  },
  "api/Unity.Transforms.CopyTransformFromGameObjectSystem.html": {
    "href": "api/Unity.Transforms.CopyTransformFromGameObjectSystem.html",
    "title": "Class CopyTransformFromGameObjectSystem | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class CopyTransformFromGameObjectSystem Inheritance Object ComponentSystemBase JobComponentSystem CopyTransformFromGameObjectSystem Inherited Members JobComponentSystem.Entities JobComponentSystem.Job JobComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnDestroyManager() ComponentSystemBase.OnCreateManager() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetArchetypeChunkComponentType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkComponentTypeDynamic(ComponentType) ComponentSystemBase.GetArchetypeChunkBufferType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkSharedComponentType<T>() ComponentSystemBase.GetArchetypeChunkEntityType() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [UpdateInGroup(typeof(TransformSystemGroup))] [UpdateBefore(typeof(EndFrameTRSToLocalToWorldSystem))] public class CopyTransformFromGameObjectSystem : JobComponentSystem Methods | Improve this Doc OnCreate() Declaration protected override void OnCreate() Overrides ComponentSystemBase.OnCreate() | Improve this Doc OnUpdate(JobHandle) Declaration protected override JobHandle OnUpdate(JobHandle inputDeps) Parameters Type Name Description JobHandle inputDeps Returns Type Description JobHandle Overrides JobComponentSystem.OnUpdate(JobHandle) Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Transforms.CopyTransformFromGameObjectProxy.html": {
    "href": "api/Unity.Transforms.CopyTransformFromGameObjectProxy.html",
    "title": "Class CopyTransformFromGameObjectProxy | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class CopyTransformFromGameObjectProxy Inheritance Object ComponentDataProxyBase ComponentDataProxy < CopyTransformFromGameObject > CopyTransformFromGameObjectProxy Inherited Members ComponentDataProxy<CopyTransformFromGameObject>.ValidateSerializedData(CopyTransformFromGameObject) ComponentDataProxy<CopyTransformFromGameObject>.Value ComponentDataProxyBase.OnEnable() ComponentDataProxyBase.OnDisable() Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class CopyTransformFromGameObjectProxy : ComponentDataProxy<CopyTransformFromGameObject>, ISerializationCallbackReceiver"
  },
  "api/Unity.Transforms.CopyTransformFromGameObject.html": {
    "href": "api/Unity.Transforms.CopyTransformFromGameObject.html",
    "title": "Struct CopyTransformFromGameObject | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct CopyTransformFromGameObject Copy Transform from GameObject associated with Entity to TransformMatrix. Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [WriteGroup(typeof(LocalToWorld))] public struct CopyTransformFromGameObject : IComponentData"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVRRRI-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVRRRI-8.html",
    "title": "Delegate VVVVRRRI<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VVVVRRRI<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVRRRI<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, T1 t1, T2 t2, T3 t3, ref T4 t4, ref T5 t5, ref T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVRRR-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVRRR-7.html",
    "title": "Delegate VVVVRRR<T0, T1, T2, T3, T4, T5, T6> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VVVVRRR<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVRRR<T0, T1, T2, T3, T4, T5, T6>(T0 t0, T1 t1, T2 t2, T3 t3, ref T4 t4, ref T5 t5, ref T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVRRII-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVRRII-8.html",
    "title": "Delegate VVVVRRII<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VVVVRRII<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVRRII<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, T1 t1, T2 t2, T3 t3, ref T4 t4, ref T5 t5, in T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVRRI-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVRRI-7.html",
    "title": "Delegate VVVVRRI<T0, T1, T2, T3, T4, T5, T6> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VVVVRRI<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVRRI<T0, T1, T2, T3, T4, T5, T6>(T0 t0, T1 t1, T2 t2, T3 t3, ref T4 t4, ref T5 t5, in T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.VVVR-4.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVR-4.html",
    "title": "Delegate VVVR<T0, T1, T2, T3> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VVVR<T0, T1, T2, T3> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVR<T0, T1, T2, T3>(T0 t0, T1 t1, T2 t2, ref T3 t3); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 Type Parameters Name Description T0 T1 T2 T3"
  },
  "api/Unity.Entities.UniversalDelegates.VVVIIIII-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVIIIII-8.html",
    "title": "Delegate VVVIIIII<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VVVIIIII<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVIIIII<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, T1 t1, T2 t2, in T3 t3, in T4 t4, in T5 t5, in T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VVVIIII-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVIIII-7.html",
    "title": "Delegate VVVIIII<T0, T1, T2, T3, T4, T5, T6> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VVVIIII<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVIIII<T0, T1, T2, T3, T4, T5, T6>(T0 t0, T1 t1, T2 t2, in T3 t3, in T4 t4, in T5 t5, in T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.VVVIII-6.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVIII-6.html",
    "title": "Delegate VVVIII<T0, T1, T2, T3, T4, T5> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VVVIII<T0, T1, T2, T3, T4, T5> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVIII<T0, T1, T2, T3, T4, T5>(T0 t0, T1 t1, T2 t2, in T3 t3, in T4 t4, in T5 t5); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 Type Parameters Name Description T0 T1 T2 T3 T4 T5"
  },
  "api/Unity.Entities.UniversalDelegates.VRRRRRRI-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VRRRRRRI-8.html",
    "title": "Delegate VRRRRRRI<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VRRRRRRI<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VRRRRRRI<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, ref T1 t1, ref T2 t2, ref T3 t3, ref T4 t4, ref T5 t5, ref T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VRRRRRR-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VRRRRRR-7.html",
    "title": "Delegate VRRRRRR<T0, T1, T2, T3, T4, T5, T6> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VRRRRRR<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VRRRRRR<T0, T1, T2, T3, T4, T5, T6>(T0 t0, ref T1 t1, ref T2 t2, ref T3 t3, ref T4 t4, ref T5 t5, ref T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.VRRRRRII-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VRRRRRII-8.html",
    "title": "Delegate VRRRRRII<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VRRRRRII<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VRRRRRII<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, ref T1 t1, ref T2 t2, ref T3 t3, ref T4 t4, ref T5 t5, in T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VRRRRRI-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VRRRRRI-7.html",
    "title": "Delegate VRRRRRI<T0, T1, T2, T3, T4, T5, T6> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VRRRRRI<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VRRRRRI<T0, T1, T2, T3, T4, T5, T6>(T0 t0, ref T1 t1, ref T2 t2, ref T3 t3, ref T4 t4, ref T5 t5, in T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.VIIIIII-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VIIIIII-7.html",
    "title": "Delegate VIIIIII<T0, T1, T2, T3, T4, T5, T6> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VIIIIII<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VIIIIII<T0, T1, T2, T3, T4, T5, T6>(T0 t0, in T1 t1, in T2 t2, in T3 t3, in T4 t4, in T5 t5, in T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.VIIIII-6.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VIIIII-6.html",
    "title": "Delegate VIIIII<T0, T1, T2, T3, T4, T5> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VIIIII<T0, T1, T2, T3, T4, T5> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VIIIII<T0, T1, T2, T3, T4, T5>(T0 t0, in T1 t1, in T2 t2, in T3 t3, in T4 t4, in T5 t5); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 Type Parameters Name Description T0 T1 T2 T3 T4 T5"
  },
  "api/Unity.Entities.UniversalDelegates.VIIII-5.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VIIII-5.html",
    "title": "Delegate VIIII<T0, T1, T2, T3, T4> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VIIII<T0, T1, T2, T3, T4> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VIIII<T0, T1, T2, T3, T4>(T0 t0, in T1 t1, in T2 t2, in T3 t3, in T4 t4); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 Type Parameters Name Description T0 T1 T2 T3 T4"
  },
  "api/Unity.Entities.UniversalDelegates.VIII-4.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VIII-4.html",
    "title": "Delegate VIII<T0, T1, T2, T3> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VIII<T0, T1, T2, T3> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VIII<T0, T1, T2, T3>(T0 t0, in T1 t1, in T2 t2, in T3 t3); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 Type Parameters Name Description T0 T1 T2 T3"
  },
  "api/Unity.Entities.UniversalDelegates.RII-3.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RII-3.html",
    "title": "Delegate RII<T0, T1, T2> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate RII<T0, T1, T2> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RII<T0, T1, T2>(ref T0 t0, in T1 t1, in T2 t2); Parameters Type Name Description T0 t0 T1 t1 T2 t2 Type Parameters Name Description T0 T1 T2"
  },
  "api/Unity.Entities.UniversalDelegates.RI-2.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RI-2.html",
    "title": "Delegate RI<T0, T1> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate RI<T0, T1> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RI<T0, T1>(ref T0 t0, in T1 t1); Parameters Type Name Description T0 t0 T1 t1 Type Parameters Name Description T0 T1"
  },
  "api/Unity.Entities.UniversalDelegates.R-1.html": {
    "href": "api/Unity.Entities.UniversalDelegates.R-1.html",
    "title": "Delegate R<T0> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate R<T0> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void R<T0>(ref T0 t0); Parameters Type Name Description T0 t0 Type Parameters Name Description T0"
  },
  "api/Unity.Entities.UniversalDelegates.IIIIIIII-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.IIIIIIII-8.html",
    "title": "Delegate IIIIIIII<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate IIIIIIII<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void IIIIIIII<T0, T1, T2, T3, T4, T5, T6, T7>(in T0 t0, in T1 t1, in T2 t2, in T3 t3, in T4 t4, in T5 t5, in T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.IIIIIII-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.IIIIIII-7.html",
    "title": "Delegate IIIIIII<T0, T1, T2, T3, T4, T5, T6> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate IIIIIII<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void IIIIIII<T0, T1, T2, T3, T4, T5, T6>(in T0 t0, in T1 t1, in T2 t2, in T3 t3, in T4 t4, in T5 t5, in T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.IIIIII-6.html": {
    "href": "api/Unity.Entities.UniversalDelegates.IIIIII-6.html",
    "title": "Delegate IIIIII<T0, T1, T2, T3, T4, T5> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate IIIIII<T0, T1, T2, T3, T4, T5> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void IIIIII<T0, T1, T2, T3, T4, T5>(in T0 t0, in T1 t1, in T2 t2, in T3 t3, in T4 t4, in T5 t5); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 Type Parameters Name Description T0 T1 T2 T3 T4 T5"
  },
  "api/Unity.Entities.UniversalDelegates.IIIII-5.html": {
    "href": "api/Unity.Entities.UniversalDelegates.IIIII-5.html",
    "title": "Delegate IIIII<T0, T1, T2, T3, T4> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate IIIII<T0, T1, T2, T3, T4> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void IIIII<T0, T1, T2, T3, T4>(in T0 t0, in T1 t1, in T2 t2, in T3 t3, in T4 t4); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 Type Parameters Name Description T0 T1 T2 T3 T4"
  },
  "api/Unity.Entities.UniversalDelegates.IIII-4.html": {
    "href": "api/Unity.Entities.UniversalDelegates.IIII-4.html",
    "title": "Delegate IIII<T0, T1, T2, T3> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate IIII<T0, T1, T2, T3> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void IIII<T0, T1, T2, T3>(in T0 t0, in T1 t1, in T2 t2, in T3 t3); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 Type Parameters Name Description T0 T1 T2 T3"
  },
  "api/Unity.Entities.Hybrid.ResourceCatalogData.html": {
    "href": "api/Unity.Entities.Hybrid.ResourceCatalogData.html",
    "title": "Struct ResourceCatalogData | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct ResourceCatalogData Container for resource data. Namespace : Unity.Entities.Hybrid <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct ResourceCatalogData Fields | Improve this Doc CurrentFileFormatVersion File format needs to change anytime the data layout for this class changes. Declaration public static readonly int CurrentFileFormatVersion Field Value Type Description Int32 | Improve this Doc paths Path information for resources. This is separate to keep the resources data streamlined as using paths is slow. Declaration public BlobArray<BlobString> paths Field Value Type Description BlobArray < BlobString > | Improve this Doc resources The resource data. Declaration public BlobArray<ResourceMetaData> resources Field Value Type Description BlobArray < ResourceMetaData > Methods | Improve this Doc GetGUIDFromPath(String) Slow path to lookup guid from a path. This first checks the passed in path then just the filename, then the lowercase version of the filename. Declaration public Hash128 GetGUIDFromPath(string path) Parameters Type Name Description String path The resource path. Returns Type Description Hash128 The guid for the resource."
  },
  "api/Unity.Entities.Hash128.html": {
    "href": "api/Unity.Entities.Hash128.html",
    "title": "Struct Hash128 | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct Hash128 Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] public struct Hash128 : IEquatable<Hash128>, IComparable<Hash128> Constructors | Improve this Doc Hash128(String) Construct a hash from a 32 character hex string If the string has the incorrect length or non-hex characters the Value will be all 0 Declaration public Hash128(string value) Parameters Type Name Description String value | Improve this Doc Hash128(UInt32, UInt32, UInt32, UInt32) Declaration public Hash128(uint x, uint y, uint z, uint w) Parameters Type Name Description UInt32 x UInt32 y UInt32 z UInt32 w | Improve this Doc Hash128(uint4) Declaration public Hash128(uint4 value) Parameters Type Name Description uint4 value Fields | Improve this Doc Value Declaration public uint4 Value Field Value Type Description uint4 Properties | Improve this Doc IsValid Declaration public bool IsValid { get; } Property Value Type Description Boolean Methods | Improve this Doc CompareTo(Hash128) Declaration public int CompareTo(Hash128 other) Parameters Type Name Description Hash128 other Returns Type Description Int32 | Improve this Doc Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object) | Improve this Doc Equals(Hash128) Declaration public bool Equals(Hash128 obj) Parameters Type Name Description Hash128 obj Returns Type Description Boolean | Improve this Doc GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() | Improve this Doc ToString() Declaration public override string ToString() Returns Type Description String Overrides ValueType.ToString() Operators | Improve this Doc Equality(Hash128, Hash128) Declaration public static bool operator ==(Hash128 obj1, Hash128 obj2) Parameters Type Name Description Hash128 obj1 Hash128 obj2 Returns Type Description Boolean | Improve this Doc GreaterThan(Hash128, Hash128) Declaration public static bool operator>(Hash128 a, Hash128 b) Parameters Type Name Description Hash128 a Hash128 b Returns Type Description Boolean | Improve this Doc Inequality(Hash128, Hash128) Declaration public static bool operator !=(Hash128 obj1, Hash128 obj2) Parameters Type Name Description Hash128 obj1 Hash128 obj2 Returns Type Description Boolean | Improve this Doc LessThan(Hash128, Hash128) Declaration public static bool operator <(Hash128 a, Hash128 b) Parameters Type Name Description Hash128 a Hash128 b Returns Type Description Boolean"
  },
  "api/Unity.Entities.ExcludeComponent-1.html": {
    "href": "api/Unity.Entities.ExcludeComponent-1.html",
    "title": "Struct ExcludeComponent<T> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct ExcludeComponent<T> Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct ExcludeComponent<T> Type Parameters Name Description T"
  },
  "api/Unity.Entities.EntityRemapUtility.html": {
    "href": "api/Unity.Entities.EntityRemapUtility.html",
    "title": "Class EntityRemapUtility | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class EntityRemapUtility Inheritance Object EntityRemapUtility Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class EntityRemapUtility Methods | Improve this Doc AddEntityRemapping(ref NativeArray<EntityRemapUtility.EntityRemapInfo>, Entity, Entity) Declaration public static void AddEntityRemapping(ref NativeArray<EntityRemapUtility.EntityRemapInfo> remapping, Entity source, Entity target) Parameters Type Name Description NativeArray < EntityRemapUtility.EntityRemapInfo > remapping Entity source Entity target | Improve this Doc AppendBufferEntityPatches(EntityRemapUtility.BufferEntityPatchInfo*, TypeManager.EntityOffsetInfo*, Int32, Int32, Int32, Int32) Declaration public static EntityRemapUtility.BufferEntityPatchInfo*AppendBufferEntityPatches(EntityRemapUtility.BufferEntityPatchInfo*patches, TypeManager.EntityOffsetInfo*offsets, int offsetCount, int bufferBaseOffset, int bufferStride, int elementStride) Parameters Type Name Description EntityRemapUtility.BufferEntityPatchInfo * patches TypeManager.EntityOffsetInfo * offsets Int32 offsetCount Int32 bufferBaseOffset Int32 bufferStride Int32 elementStride Returns Type Description EntityRemapUtility.BufferEntityPatchInfo * | Improve this Doc AppendEntityPatches(EntityRemapUtility.EntityPatchInfo*, TypeManager.EntityOffsetInfo*, Int32, Int32, Int32) Declaration public static EntityRemapUtility.EntityPatchInfo*AppendEntityPatches(EntityRemapUtility.EntityPatchInfo*patches, TypeManager.EntityOffsetInfo*offsets, int offsetCount, int baseOffset, int stride) Parameters Type Name Description EntityRemapUtility.EntityPatchInfo * patches TypeManager.EntityOffsetInfo * offsets Int32 offsetCount Int32 baseOffset Int32 stride Returns Type Description EntityRemapUtility.EntityPatchInfo * | Improve this Doc AppendManagedEntityPatches(EntityRemapUtility.ManagedEntityPatchInfo*, ComponentType) Declaration public static EntityRemapUtility.ManagedEntityPatchInfo*AppendManagedEntityPatches(EntityRemapUtility.ManagedEntityPatchInfo*patches, ComponentType type) Parameters Type Name Description EntityRemapUtility.ManagedEntityPatchInfo * patches ComponentType type Returns Type Description EntityRemapUtility.ManagedEntityPatchInfo * | Improve this Doc CalculateEntityOffsets(Type) Declaration public static TypeManager.EntityOffsetInfo[] CalculateEntityOffsets(Type type) Parameters Type Name Description Type type Returns Type Description TypeManager.EntityOffsetInfo [] | Improve this Doc CalculateEntityOffsets<T>() Declaration public static TypeManager.EntityOffsetInfo[] CalculateEntityOffsets<T>() Returns Type Description TypeManager.EntityOffsetInfo [] Type Parameters Name Description T | Improve this Doc GetTargets(out NativeArray<Entity>, NativeArray<EntityRemapUtility.EntityRemapInfo>) Declaration public static void GetTargets(out NativeArray<Entity> output, NativeArray<EntityRemapUtility.EntityRemapInfo> remapping) Parameters Type Name Description NativeArray < Entity > output NativeArray < EntityRemapUtility.EntityRemapInfo > remapping | Improve this Doc HasEntityMembers(Type) Declaration public static bool HasEntityMembers(Type type) Parameters Type Name Description Type type Returns Type Description Boolean | Improve this Doc PatchEntities(EntityRemapUtility.EntityPatchInfo*, Int32, EntityRemapUtility.BufferEntityPatchInfo*, Int32, Byte*, Int32, ref NativeArray<EntityRemapUtility.EntityRemapInfo>) Declaration public static void PatchEntities(EntityRemapUtility.EntityPatchInfo*scalarPatches, int scalarPatchCount, EntityRemapUtility.BufferEntityPatchInfo*bufferPatches, int bufferPatchCount, byte *chunkBuffer, int entityCount, ref NativeArray<EntityRemapUtility.EntityRemapInfo> remapping) Parameters Type Name Description EntityRemapUtility.EntityPatchInfo * scalarPatches Int32 scalarPatchCount EntityRemapUtility.BufferEntityPatchInfo * bufferPatches Int32 bufferPatchCount Byte * chunkBuffer Int32 entityCount NativeArray < EntityRemapUtility.EntityRemapInfo > remapping | Improve this Doc PatchEntities(TypeManager.EntityOffsetInfo[], Byte*, ref NativeArray<EntityRemapUtility.EntityRemapInfo>) Declaration public static void PatchEntities(TypeManager.EntityOffsetInfo[] scalarPatches, byte *chunkBuffer, ref NativeArray<EntityRemapUtility.EntityRemapInfo> remapping) Parameters Type Name Description TypeManager.EntityOffsetInfo [] scalarPatches Byte * chunkBuffer NativeArray < EntityRemapUtility.EntityRemapInfo > remapping | Improve this Doc PatchEntitiesForPrefab(EntityRemapUtility.EntityPatchInfo*, Int32, EntityRemapUtility.BufferEntityPatchInfo*, Int32, Byte*, Int32, Int32, Entity*, Entity*, Int32) Declaration public static void PatchEntitiesForPrefab(EntityRemapUtility.EntityPatchInfo*scalarPatches, int scalarPatchCount, EntityRemapUtility.BufferEntityPatchInfo*bufferPatches, int bufferPatchCount, byte *chunkBuffer, int indexInChunk, int entityCount, Entity*remapSrc, Entity*remapDst, int remappingCount) Parameters Type Name Description EntityRemapUtility.EntityPatchInfo * scalarPatches Int32 scalarPatchCount EntityRemapUtility.BufferEntityPatchInfo * bufferPatches Int32 bufferPatchCount Byte * chunkBuffer Int32 indexInChunk Int32 entityCount Entity * remapSrc Entity * remapDst Int32 remappingCount | Improve this Doc RemapEntity(ref NativeArray<EntityRemapUtility.EntityRemapInfo>, Entity) Declaration public static Entity RemapEntity(ref NativeArray<EntityRemapUtility.EntityRemapInfo> remapping, Entity source) Parameters Type Name Description NativeArray < EntityRemapUtility.EntityRemapInfo > remapping Entity source Returns Type Description Entity | Improve this Doc RemapEntity(EntityRemapUtility.EntityRemapInfo*, Entity) Declaration public static Entity RemapEntity(EntityRemapUtility.EntityRemapInfo*remapping, Entity source) Parameters Type Name Description EntityRemapUtility.EntityRemapInfo * remapping Entity source Returns Type Description Entity | Improve this Doc RemapEntityForPrefab(Entity*, Entity*, Int32, Entity) Declaration public static Entity RemapEntityForPrefab(Entity*remapSrc, Entity*remapDst, int remappingCount, Entity source) Parameters Type Name Description Entity * remapSrc Entity * remapDst Int32 remappingCount Entity source Returns Type Description Entity"
  },
  "api/Unity.Entities.EntityPatcher.html": {
    "href": "api/Unity.Entities.EntityPatcher.html",
    "title": "Class EntityPatcher | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class EntityPatcher Inheritance Object EntityPatcher Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class EntityPatcher Methods | Improve this Doc ApplyChangeSet(EntityManager, EntityChangeSet) Applies the given change set to the given entity manager. Declaration public static void ApplyChangeSet(EntityManager entityManager, EntityChangeSet changeSet) Parameters Type Name Description EntityManager entityManager The EntityManager to apply the change set to. EntityChangeSet changeSet The EntityChangeSet to apply."
  },
  "api/Unity.Entities.EntityManagerManagedComponentExtensions.html": {
    "href": "api/Unity.Entities.EntityManagerManagedComponentExtensions.html",
    "title": "Class EntityManagerManagedComponentExtensions | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class EntityManagerManagedComponentExtensions Inheritance Object EntityManagerManagedComponentExtensions Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class EntityManagerManagedComponentExtensions Methods | Improve this Doc AddChunkComponentData<T>(EntityManager, Entity) Adds a chunk component to the specified entity. Declaration public static void AddChunkComponentData<T>(this EntityManager manager, Entity entity) where T : class, IComponentData Parameters Type Name Description EntityManager manager Entity entity The entity. Type Parameters Name Description T The type of component, which must implement IComponentData. Remarks Adding a chunk component to an entity changes that entity's archetype and results in the entity being moved to a different chunk, either one that already has an archetype containing the chunk component or a new chunk. A chunk component is common to all entities in a chunk. You can access a chunk IComponentData instance through either the chunk itself or through an entity stored in that chunk. In either case, getting or setting the component reads or writes the same data. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before adding the component and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. | Improve this Doc AddChunkComponentData<T>(EntityManager, EntityQuery, T) Adds a component to each of the chunks identified by a EntityQuery and set the component values. Declaration public static void AddChunkComponentData<T>(this EntityManager manager, EntityQuery entityQuery, T componentData) where T : class, IComponentData Parameters Type Name Description EntityManager manager EntityQuery entityQuery The EntityQuery identifying the chunks to modify. T componentData The data to set. Type Parameters Name Description T The type of component, which must implement IComponentData. Remarks This function finds all chunks whose archetype satisfies the EntityQuery and adds the specified component to them. A chunk component is common to all entities in a chunk. You can access a chunk IComponentData instance through either the chunk itself or through an entity stored in that chunk. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before adding the component and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. | Improve this Doc AddComponentData<T>(EntityManager, Entity, T) Adds a component to an entity and set the value of that component. Declaration public static void AddComponentData<T>(this EntityManager manager, Entity entity, T componentData) where T : class, IComponentData Parameters Type Name Description EntityManager manager Entity entity The entity. T componentData The data to set. Type Parameters Name Description T The type of component. Remarks Adding a component changes an entity's archetype and results in the entity being moved to a different chunk. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before adding the component and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. | Improve this Doc GetChunkComponentData<T>(EntityManager, ArchetypeChunk) Gets the value of a chunk component. Declaration public static T GetChunkComponentData<T>(this EntityManager manager, ArchetypeChunk chunk) where T : class, IComponentData Parameters Type Name Description EntityManager manager ArchetypeChunk chunk The chunk. Returns Type Description T A struct of type T containing the component value. Type Parameters Name Description T The component type. Remarks A chunk component is common to all entities in a chunk. You can access a chunk IComponentData instance through either the chunk itself or through an entity stored in that chunk. Exceptions Type Condition ArgumentException Thrown if the ArchetypeChunk object is invalid. | Improve this Doc GetChunkComponentData<T>(EntityManager, Entity) Gets the value of chunk component for the chunk containing the specified entity. Declaration public static T GetChunkComponentData<T>(this EntityManager manager, Entity entity) where T : class, IComponentData Parameters Type Name Description EntityManager manager Entity entity The entity. Returns Type Description T A struct of type T containing the component value. Type Parameters Name Description T The component type. Remarks A chunk component is common to all entities in a chunk. You can access a chunk IComponentData instance through either the chunk itself or through an entity stored in that chunk. | Improve this Doc GetComponentData<T>(EntityManager, Entity) Gets the value of a component for an entity. Declaration public static T GetComponentData<T>(this EntityManager manager, Entity entity) where T : class, IComponentData Parameters Type Name Description EntityManager manager Entity entity The entity. Returns Type Description T A struct of type T containing the component value. Type Parameters Name Description T The type of component to retrieve. Exceptions Type Condition ArgumentException Thrown if the component type has no fields. | Improve this Doc SetChunkComponentData<T>(EntityManager, ArchetypeChunk, T) Sets the value of a chunk component. Declaration public static void SetChunkComponentData<T>(this EntityManager manager, ArchetypeChunk chunk, T componentValue) where T : class, IComponentData Parameters Type Name Description EntityManager manager ArchetypeChunk chunk The chunk to modify. T componentValue The component data to set. Type Parameters Name Description T The component type. Remarks A chunk component is common to all entities in a chunk. You can access a chunk IComponentData instance through either the chunk itself or through an entity stored in that chunk. Exceptions Type Condition ArgumentException Thrown if the ArchetypeChunk object is invalid. | Improve this Doc SetComponentData<T>(EntityManager, Entity, T) Sets the value of a component of an entity. Declaration public static void SetComponentData<T>(this EntityManager manager, Entity entity, T componentData) where T : class, IComponentData Parameters Type Name Description EntityManager manager Entity entity The entity. T componentData The data to set. Type Parameters Name Description T The component type. Exceptions Type Condition ArgumentException Thrown if the component type has no fields."
  },
  "api/Unity.Entities.EntityManagerExtensions.html": {
    "href": "api/Unity.Entities.EntityManagerExtensions.html",
    "title": "Class EntityManagerExtensions | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class EntityManagerExtensions Inheritance Object EntityManagerExtensions Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class EntityManagerExtensions Methods | Improve this Doc GetComponentObject<T>(EntityManager, Entity) Declaration public static T GetComponentObject<T>(this EntityManager entityManager, Entity entity) where T : Component Parameters Type Name Description EntityManager entityManager Entity entity Returns Type Description T Type Parameters Name Description T | Improve this Doc Instantiate(EntityManager, GameObject) Declaration public static Entity Instantiate(this EntityManager entityManager, GameObject srcGameObject) Parameters Type Name Description EntityManager entityManager GameObject srcGameObject Returns Type Description Entity | Improve this Doc Instantiate(EntityManager, GameObject, NativeArray<Entity>) Declaration public static void Instantiate(this EntityManager entityManager, GameObject srcGameObject, NativeArray<Entity> outputEntities) Parameters Type Name Description EntityManager entityManager GameObject srcGameObject NativeArray < Entity > outputEntities"
  },
  "api/Unity.Entities.EntityManagerDifferOptions.html": {
    "href": "api/Unity.Entities.EntityManagerDifferOptions.html",
    "title": "Enum EntityManagerDifferOptions | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Enum EntityManagerDifferOptions Parameters used to configure the the execution of the differ. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Flags] public enum EntityManagerDifferOptions Fields Name Description ClearMissingReferences If set; all references to destroyed or missing entities will be set to Entity.Null before computing changes. When applying a change this is needed to patch references to restored entities (they were destroyed but are being brought back by the change set). Default The default set of options used by the Unity.Entities.EntityDiffer FastForwardShadowWorld If set; the shadow world will be updated with the latest changes. IncludeForwardChangeSet If set; the resulting EntityChanges will include the forward change set. IncludeReverseChangeSet If set; the resulting EntityChanges will include the reverse change set. This can be applied to the world to reverse the changes (i.e. undo). None ValidateUniqueEntityGuid If this flag is set; the entire world is checks for duplicate EntityGuid components."
  },
  "api/Unity.Entities.Editor.DynamicBufferProxyBaseEditor.html": {
    "href": "api/Unity.Entities.Editor.DynamicBufferProxyBaseEditor.html",
    "title": "Class DynamicBufferProxyBaseEditor | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class DynamicBufferProxyBaseEditor Inheritance Object ComponentDataProxyBaseEditor DynamicBufferProxyBaseEditor Inherited Members ComponentDataProxyBaseEditor.SerializedData ComponentDataProxyBaseEditor.ComponentDataType ComponentDataProxyBaseEditor.OnInspectorGUI() Namespace : Unity.Entities.Editor <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class DynamicBufferProxyBaseEditor : ComponentDataProxyBaseEditor Properties | Improve this Doc CapacityStatusString Declaration public string CapacityStatusString { get; } Property Value Type Description String Methods | Improve this Doc DisplaySerializedDataPropertyField() Declaration protected override void DisplaySerializedDataPropertyField() Overrides ComponentDataProxyBaseEditor.DisplaySerializedDataPropertyField() | Improve this Doc DisplayStatusMessages() Declaration protected override void DisplayStatusMessages() Overrides ComponentDataProxyBaseEditor.DisplayStatusMessages() | Improve this Doc OnEnable() Declaration protected override void OnEnable() Overrides ComponentDataProxyBaseEditor.OnEnable()"
  },
  "api/Unity.Entities.Editor.ComponentDataProxyBaseEditor.html": {
    "href": "api/Unity.Entities.Editor.ComponentDataProxyBaseEditor.html",
    "title": "Class ComponentDataProxyBaseEditor | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class ComponentDataProxyBaseEditor Inheritance Object ComponentDataProxyBaseEditor DynamicBufferProxyBaseEditor Namespace : Unity.Entities.Editor <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class ComponentDataProxyBaseEditor : Editor Properties | Improve this Doc ComponentDataType Declaration protected Type ComponentDataType { get; } Property Value Type Description Type | Improve this Doc SerializedData Declaration protected SerializedProperty SerializedData { get; } Property Value Type Description SerializedProperty Methods | Improve this Doc DisplaySerializedDataPropertyField() Declaration protected virtual void DisplaySerializedDataPropertyField() | Improve this Doc DisplayStatusMessages() Declaration protected virtual void DisplayStatusMessages() | Improve this Doc OnEnable() Declaration protected virtual void OnEnable() | Improve this Doc OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Unity.Entities.ComponentTypes.html": {
    "href": "api/Unity.Entities.ComponentTypes.html",
    "title": "Struct ComponentTypes | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct ComponentTypes Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct ComponentTypes Constructors | Improve this Doc ComponentTypes(ComponentType) Declaration public ComponentTypes(ComponentType a) Parameters Type Name Description ComponentType a | Improve this Doc ComponentTypes(ComponentType, ComponentType) Declaration public ComponentTypes(ComponentType a, ComponentType b) Parameters Type Name Description ComponentType a ComponentType b | Improve this Doc ComponentTypes(ComponentType, ComponentType, ComponentType) Declaration public ComponentTypes(ComponentType a, ComponentType b, ComponentType c) Parameters Type Name Description ComponentType a ComponentType b ComponentType c | Improve this Doc ComponentTypes(ComponentType, ComponentType, ComponentType, ComponentType) Declaration public ComponentTypes(ComponentType a, ComponentType b, ComponentType c, ComponentType d) Parameters Type Name Description ComponentType a ComponentType b ComponentType c ComponentType d | Improve this Doc ComponentTypes(ComponentType, ComponentType, ComponentType, ComponentType, ComponentType) Declaration public ComponentTypes(ComponentType a, ComponentType b, ComponentType c, ComponentType d, ComponentType e) Parameters Type Name Description ComponentType a ComponentType b ComponentType c ComponentType d ComponentType e | Improve this Doc ComponentTypes(ComponentType[]) Declaration public ComponentTypes(ComponentType[] componentType) Parameters Type Name Description ComponentType [] componentType Fields | Improve this Doc m_masks Declaration public ComponentTypes.Masks m_masks Field Value Type Description ComponentTypes.Masks Properties | Improve this Doc Length Declaration public int Length { get; } Property Value Type Description Int32 Methods | Improve this Doc GetComponentType(Int32) Declaration public ComponentType GetComponentType(int index) Parameters Type Name Description Int32 index Returns Type Description ComponentType | Improve this Doc GetTypeIndex(Int32) Declaration public int GetTypeIndex(int index) Parameters Type Name Description Int32 index Returns Type Description Int32"
  },
  "api/Unity.Entities.ComponentSystemSorter.CircularSystemDependencyException.html": {
    "href": "api/Unity.Entities.ComponentSystemSorter.CircularSystemDependencyException.html",
    "title": "Class ComponentSystemSorter.CircularSystemDependencyException | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class ComponentSystemSorter.CircularSystemDependencyException Inheritance Object Exception ComponentSystemSorter.CircularSystemDependencyException Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class CircularSystemDependencyException : Exception, ISerializable, _Exception Constructors | Improve this Doc CircularSystemDependencyException(IEnumerable<Type>) Declaration public CircularSystemDependencyException(IEnumerable<Type> chain) Parameters Type Name Description IEnumerable < Type > chain Properties | Improve this Doc Chain Declaration public IEnumerable<Type> Chain { get; } Property Value Type Description IEnumerable < Type > | Improve this Doc Message Declaration public override string Message { get; } Property Value Type Description String Overrides Exception.Message"
  },
  "api/Unity.Entities.ArchetypeChunkArray.html": {
    "href": "api/Unity.Entities.ArchetypeChunkArray.html",
    "title": "Struct ArchetypeChunkArray | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct ArchetypeChunkArray Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct ArchetypeChunkArray Methods | Improve this Doc CalculateEntityCount(NativeArray<ArchetypeChunk>) Declaration public static int CalculateEntityCount(NativeArray<ArchetypeChunk> chunks) Parameters Type Name Description NativeArray < ArchetypeChunk > chunks Returns Type Description Int32"
  },
  "api/Unity.Entities.Entity.html": {
    "href": "api/Unity.Entities.Entity.html",
    "title": "Struct Entity | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct Entity Identifies an entity. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct Entity : IEquatable<Entity>, IComparable<Entity> Remarks The entity is a fundamental part of the Entity Component System. Everything in your game that has data or an identity of its own is an entity. However, an entity does not contain either data or behavior itself. Instead, the data is stored in the components and the behavior is provided by the systems that process those components. The entity acts as an identifier or key to the data stored in components. Entities are managed by the EntityManager class and exist within a World . An Entity struct refers to an entity, but is not a reference. Rather the Entity struct contains an Index used to access entity data and a Version used to check whether the Index is still valid. Note that you generally do not use the Index or Version values directly, but instead pass the Entity struct to the relevant API methods. Pass an Entity struct to methods of the EntityManager , the EntityCommandBuffer , or the ComponentSystem in order to add or remove components, to access components, or to destroy the entity. Fields | Improve this Doc Index The ID of an entity. Declaration public int Index Field Value Type Description Int32 The index into the internal list of entities. Remarks Entity indexes are recycled when an entity is destroyed. When an entity is destroyed, the EntityManager increments the version identifier. To represent the same entity, both the Index and the Version fields of the Entity object must match. If the Index is the same, but the Version is different, then the entity has been recycled. | Improve this Doc Version The generational version of the entity. Declaration public int Version Field Value Type Description Int32 Used to determine whether this Entity object still identifies an existing entity. Remarks The Version number can, theoretically, overflow and wrap around within the lifetime of an application. For this reason, you cannot assume that an Entity instance with a larger Version is a more recent incarnation of the entity than one with a smaller Version (and the same Index). Properties | Improve this Doc Null A \"blank\" Entity object that does not refer to an actual entity. Declaration public static Entity Null { get; } Property Value Type Description Entity Methods | Improve this Doc CompareTo(Entity) Compare this entity against a given one Declaration public int CompareTo(Entity other) Parameters Type Name Description Entity other The other entity to compare to Returns Type Description Int32 Difference based on the Entity Index value | Improve this Doc Equals(Object) Entity instances are equal if they refer to the same entity. Declaration public override bool Equals(object compare) Parameters Type Name Description Object compare The object to compare to this Entity. Returns Type Description Boolean True, if the compare parameter contains an Entity object having the same Index and Version as this Entity. Overrides ValueType.Equals(Object) | Improve this Doc Equals(Entity) Entity instances are equal if they represent the same entity. Declaration public bool Equals(Entity entity) Parameters Type Name Description Entity entity The other Entity. Returns Type Description Boolean True, if the Entity instances have the same Index and Version. | Improve this Doc GetHashCode() A hash used for comparisons. Declaration public override int GetHashCode() Returns Type Description Int32 A unique hash code. Overrides ValueType.GetHashCode() | Improve this Doc ToString() Provides a debugging string. Declaration public override string ToString() Returns Type Description String A string containing the entity index and generational version. Overrides ValueType.ToString() Operators | Improve this Doc Equality(Entity, Entity) Entity instances are equal if they refer to the same entity. Declaration public static bool operator ==(Entity lhs, Entity rhs) Parameters Type Name Description Entity lhs An Entity object. Entity rhs Another Entity object. Returns Type Description Boolean True, if both Index and Version are identical. | Improve this Doc Inequality(Entity, Entity) Entity instances are equal if they refer to the same entity. Declaration public static bool operator !=(Entity lhs, Entity rhs) Parameters Type Name Description Entity lhs An Entity object. Entity rhs Another Entity object. Returns Type Description Boolean True, if either Index or Version are different."
  },
  "api/Unity.Entities.EndSimulationEntityCommandBufferSystem.html": {
    "href": "api/Unity.Entities.EndSimulationEntityCommandBufferSystem.html",
    "title": "Class EndSimulationEntityCommandBufferSystem | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class EndSimulationEntityCommandBufferSystem Inheritance Object ComponentSystemBase ComponentSystem EntityCommandBufferSystem EndSimulationEntityCommandBufferSystem Inherited Members EntityCommandBufferSystem.CreateCommandBuffer() EntityCommandBufferSystem.AddJobHandleForProducer(JobHandle) EntityCommandBufferSystem.OnCreate() EntityCommandBufferSystem.OnDestroy() EntityCommandBufferSystem.OnUpdate() ComponentSystem.PostUpdateCommands ComponentSystem.InitEntityQueryCache(Int32) ComponentSystem.Entities ComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnDestroyManager() ComponentSystemBase.OnCreateManager() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetArchetypeChunkComponentType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkComponentTypeDynamic(ComponentType) ComponentSystemBase.GetArchetypeChunkBufferType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkSharedComponentType<T>() ComponentSystemBase.GetArchetypeChunkEntityType() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [UpdateInGroup(typeof(SimulationSystemGroup))] public class EndSimulationEntityCommandBufferSystem : EntityCommandBufferSystem Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Entities.Editor.EntitySelectionProxy.html": {
    "href": "api/Unity.Entities.Editor.EntitySelectionProxy.html",
    "title": "Class EntitySelectionProxy | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class EntitySelectionProxy Inheritance Object EntitySelectionProxy Namespace : Unity.Entities.Editor <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class EntitySelectionProxy : ScriptableObject Properties | Improve this Doc Container Declaration public EntityContainer Container { get; } Property Value Type Description EntityContainer | Improve this Doc Entity Declaration public Entity Entity { get; } Property Value Type Description Entity | Improve this Doc EntityManager Declaration public EntityManager EntityManager { get; } Property Value Type Description EntityManager | Improve this Doc Exists Declaration public bool Exists { get; } Property Value Type Description Boolean | Improve this Doc World Declaration public World World { get; } Property Value Type Description World Methods | Improve this Doc OnEntityControlSelectButton(World, Entity) Declaration public void OnEntityControlSelectButton(World world, Entity entity) Parameters Type Name Description World world Entity entity | Improve this Doc SetEntity(World, Entity) Declaration public void SetEntity(World world, Entity entity) Parameters Type Name Description World world Entity entity Events | Improve this Doc EntityControlSelectButton Declaration public event EntitySelectionProxy.EntityControlSelectButtonHandler EntityControlSelectButton Event Type Type Description EntitySelectionProxy.EntityControlSelectButtonHandler"
  },
  "api/Unity.Entities.Editor.EntitySelectionProxy.EntityControlSelectButtonHandler.html": {
    "href": "api/Unity.Entities.Editor.EntitySelectionProxy.EntityControlSelectButtonHandler.html",
    "title": "Delegate EntitySelectionProxy.EntityControlSelectButtonHandler | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate EntitySelectionProxy.EntityControlSelectButtonHandler Namespace : Unity.Entities.Editor <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void EntityControlSelectButtonHandler(World world, Entity entity); Parameters Type Name Description World world Entity entity"
  },
  "api/Unity.Entities.Disabled.html": {
    "href": "api/Unity.Entities.Disabled.html",
    "title": "Struct Disabled | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct Disabled Disables the entity. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct Disabled : IComponentData Remarks By default, an EntityQuery ignores all entities that have a Disabled component. You can override this default behavior by setting the IncludeDisabled flag of the EntityQueryDesc object used to create the query. When using the EntityQueryBuilder class in a ComponentSystem, set this flag by calling the With(EntityQueryOptions) function."
  },
  "api/Unity.Entities.DisableAutoTypeRegistration.html": {
    "href": "api/Unity.Entities.DisableAutoTypeRegistration.html",
    "title": "Class DisableAutoTypeRegistration | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class DisableAutoTypeRegistration [DisableAutoTypeRegistration] prevents a Component Type from being registered in the TypeManager during TypeManager.Initialize(). Types that are not registered will not be recognized by EntityManager. Inheritance Object Attribute DisableAutoTypeRegistration Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class DisableAutoTypeRegistration : Attribute, _Attribute"
  },
  "api/Unity.Entities.Conversion.html": {
    "href": "api/Unity.Entities.Conversion.html",
    "title": "Namespace Unity.Entities.Conversion | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Namespace Unity.Entities.Conversion Structs MultiListEnumerator<T>"
  },
  "api/Unity.Entities.Conversion.MultiListEnumerator-1.html": {
    "href": "api/Unity.Entities.Conversion.MultiListEnumerator-1.html",
    "title": "Struct MultiListEnumerator<T> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct MultiListEnumerator<T> Namespace : Unity.Entities.Conversion <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct MultiListEnumerator<T> : IEnumerable<T>, IEnumerable, IEnumerator<T>, IDisposable, IEnumerator Type Parameters Name Description T Properties | Improve this Doc Any Declaration public bool Any { get; } Property Value Type Description Boolean | Improve this Doc Current Declaration public T Current { get; } Property Value Type Description T | Improve this Doc Empty Declaration public static MultiListEnumerator<T> Empty { get; } Property Value Type Description MultiListEnumerator <T> | Improve this Doc IsEmpty Declaration public bool IsEmpty { get; } Property Value Type Description Boolean | Improve this Doc IsValid Declaration public bool IsValid { get; } Property Value Type Description Boolean Methods | Improve this Doc Count() Declaration public int Count() Returns Type Description Int32 | Improve this Doc Dispose() Declaration public void Dispose() | Improve this Doc MoveNext() Declaration public bool MoveNext() Returns Type Description Boolean | Improve this Doc Reset() Declaration public void Reset()"
  },
  "api/Unity.Entities.ComponentSystemSorter.html": {
    "href": "api/Unity.Entities.ComponentSystemSorter.html",
    "title": "Class ComponentSystemSorter | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class ComponentSystemSorter Inheritance Object ComponentSystemSorter Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class ComponentSystemSorter"
  },
  "api/Unity.Entities.ComponentSystemSorter.TypeHeapElement.html": {
    "href": "api/Unity.Entities.ComponentSystemSorter.TypeHeapElement.html",
    "title": "Struct ComponentSystemSorter.TypeHeapElement | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct ComponentSystemSorter.TypeHeapElement Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct TypeHeapElement : IComparable<ComponentSystemSorter.TypeHeapElement> Constructors | Improve this Doc TypeHeapElement(Int32, Type) Declaration public TypeHeapElement(int index, Type t) Parameters Type Name Description Int32 index Type t Fields | Improve this Doc unsortedIndex Declaration public int unsortedIndex Field Value Type Description Int32 Methods | Improve this Doc CompareTo(ComponentSystemSorter.TypeHeapElement) Declaration public int CompareTo(ComponentSystemSorter.TypeHeapElement other) Parameters Type Name Description ComponentSystemSorter.TypeHeapElement other Returns Type Description Int32"
  },
  "api/Unity.Entities.ArchetypeChunkBufferType-1.html": {
    "href": "api/Unity.Entities.ArchetypeChunkBufferType-1.html",
    "title": "Struct ArchetypeChunkBufferType<T> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct ArchetypeChunkBufferType<T> Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct ArchetypeChunkBufferType<T> where T : struct, IBufferElementData Type Parameters Name Description T Properties | Improve this Doc GlobalSystemVersion Declaration public uint GlobalSystemVersion { get; } Property Value Type Description UInt32 | Improve this Doc IsReadOnly Declaration public bool IsReadOnly { get; } Property Value Type Description Boolean"
  },
  "api/Unity.Transforms.LocalToWorld.html": {
    "href": "api/Unity.Transforms.LocalToWorld.html",
    "title": "Struct LocalToWorld | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct LocalToWorld Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] [WriteGroup(typeof(WorldToLocal))] public struct LocalToWorld : IComponentData Fields | Improve this Doc Value Declaration public float4x4 Value Field Value Type Description float4x4 Properties | Improve this Doc Forward Declaration public float3 Forward { get; } Property Value Type Description float3 | Improve this Doc Position Declaration public float3 Position { get; } Property Value Type Description float3 | Improve this Doc Right Declaration public float3 Right { get; } Property Value Type Description float3 | Improve this Doc Rotation Declaration public quaternion Rotation { get; } Property Value Type Description quaternion | Improve this Doc Up Declaration public float3 Up { get; } Property Value Type Description float3"
  },
  "api/Unity.Transforms.LocalToParentSystem.html": {
    "href": "api/Unity.Transforms.LocalToParentSystem.html",
    "title": "Class LocalToParentSystem | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class LocalToParentSystem Inheritance Object ComponentSystemBase JobComponentSystem LocalToParentSystem EndFrameLocalToParentSystem Inherited Members JobComponentSystem.Entities JobComponentSystem.Job JobComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnDestroyManager() ComponentSystemBase.OnCreateManager() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetArchetypeChunkComponentType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkComponentTypeDynamic(ComponentType) ComponentSystemBase.GetArchetypeChunkBufferType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkSharedComponentType<T>() ComponentSystemBase.GetArchetypeChunkEntityType() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public abstract class LocalToParentSystem : JobComponentSystem Methods | Improve this Doc OnCreate() Declaration protected override void OnCreate() Overrides ComponentSystemBase.OnCreate() | Improve this Doc OnUpdate(JobHandle) Declaration protected override JobHandle OnUpdate(JobHandle inputDeps) Parameters Type Name Description JobHandle inputDeps Returns Type Description JobHandle Overrides JobComponentSystem.OnUpdate(JobHandle) Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Transforms.LocalToParent.html": {
    "href": "api/Unity.Transforms.LocalToParent.html",
    "title": "Struct LocalToParent | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct LocalToParent Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] [WriteGroup(typeof(LocalToWorld))] public struct LocalToParent : IComponentData Fields | Improve this Doc Value Declaration public float4x4 Value Field Value Type Description float4x4 Properties | Improve this Doc Forward Declaration public float3 Forward { get; } Property Value Type Description float3 | Improve this Doc Position Declaration public float3 Position { get; } Property Value Type Description float3 | Improve this Doc Right Declaration public float3 Right { get; } Property Value Type Description float3 | Improve this Doc Up Declaration public float3 Up { get; } Property Value Type Description float3"
  },
  "api/Unity.Entities.IJobChunk.html": {
    "href": "api/Unity.Entities.IJobChunk.html",
    "title": "Interface IJobChunk | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Interface IJobChunk IJobChunk is a type of Job that iterates over a set of ArchetypeChunk instances. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface IJobChunk Remarks Create and schedule an IJobChunk Job inside the OnUpdate() function of a SystemBase implementation. The Job component system calls the Execute function once for each ArchetypeChunk found by the EntityQuery used to schedule the Job. To pass data to the Execute function beyond the parameters of the Execute() function, add public fields to the IJobChunk struct declaration and set those fields immediately before scheduling the Job. You must pass the component type information for any components that the Job reads or writes using a field of type, ArchetypeChunkComponentType<T> . Get this type information by calling the appropriate GetArchetypeChunkComponentType<T>(Boolean) function for the type of component. For more information see Using IJobChunk . [GenerateAuthoringComponent] public struct Target : IComponentData { public Entity entity; } public class ChaserSystem : SystemBase { private EntityQuery query; // Initialized in Oncreate() [BurstCompile] private struct ChaserSystemJob : IJobChunk { // Read-write data in the current chunk public ArchetypeChunkComponentType<Translation> PositionTypeAccessor; // Read-only data in the current chunk [ReadOnly] public ArchetypeChunkComponentType<Target> TargetTypeAccessor; // Read-only data stored (potentially) in other chunks [ReadOnly] //[NativeDisableParallelForRestriction] public ComponentDataFromEntity<LocalToWorld> EntityPositions; // Non-entity data public float deltaTime; public void Execute(ArchetypeChunk chunk, int chunkIndex, int firstEntityIndex) { NativeArray<Translation> positions = chunk.GetNativeArray<Translation>(PositionTypeAccessor); NativeArray<Target> targets = chunk.GetNativeArray<Target>(TargetTypeAccessor); for (int i = 0; i < positions.Length; i++) { Entity targetEntity = targets[i].entity; float3 targetPosition = EntityPositions[targetEntity].Position; float3 chaserPosition = positions[i].Value; float3 displacement = (targetPosition - chaserPosition); positions[i] = new Translation { Value = chaserPosition + displacement * deltaTime }; } } } protected override void OnCreate() { query = this.GetEntityQuery(typeof(Translation), ComponentType.ReadOnly<Target>()); } protected override void OnUpdate() { var job = new ChaserSystemJob(); job.PositionTypeAccessor = this.GetArchetypeChunkComponentType<Translation>(false); job.TargetTypeAccessor = this.GetArchetypeChunkComponentType<Target>(true); job.EntityPositions = this.GetComponentDataFromEntity<LocalToWorld>(true); job.deltaTime = this.Time.DeltaTime; this.Dependency = job.Schedule(query, this.Dependency); } } Methods | Improve this Doc Execute(ArchetypeChunk, Int32, Int32) Implement the Execute() function to perform a unit of work on an ArchetypeChunk . Declaration void Execute(ArchetypeChunk chunk, int chunkIndex, int firstEntityIndex) Parameters Type Name Description ArchetypeChunk chunk The current chunk. Int32 chunkIndex The index of the current chunk within the list of all chunks found by the Job's EntityQuery . Note that chunks are not processed in index order, except by chance. Int32 firstEntityIndex The index of the first entity in the current chunk within the list of all entities in all the chunks found by the Job's EntityQuery . Remarks The Job component system calls the Execute function once for each EntityArchetype found by the EntityQuery used to schedule the Job."
  },
  "api/Unity.Entities.GenerateAuthoringComponentAttribute.html": {
    "href": "api/Unity.Entities.GenerateAuthoringComponentAttribute.html",
    "title": "Class GenerateAuthoringComponentAttribute | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class GenerateAuthoringComponentAttribute Inheritance Object Attribute GenerateAuthoringComponentAttribute Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct)] public class GenerateAuthoringComponentAttribute : Attribute, _Attribute"
  },
  "api/Unity.Entities.GameObjectEntity.html": {
    "href": "api/Unity.Entities.GameObjectEntity.html",
    "title": "Class GameObjectEntity | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class GameObjectEntity Inheritance Object GameObjectEntity Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class GameObjectEntity : UnityEngine.MonoBehaviour Properties | Improve this Doc Entity Declaration public Entity Entity { get; } Property Value Type Description Entity | Improve this Doc EntityManager Declaration public EntityManager EntityManager { get; } Property Value Type Description EntityManager Methods | Improve this Doc AddToEntity(EntityManager, UnityEngine.GameObject, Entity) Declaration public static void AddToEntity(EntityManager entityManager, UnityEngine.GameObject gameObject, Entity entity) Parameters Type Name Description EntityManager entityManager UnityEngine.GameObject gameObject Entity entity | Improve this Doc AddToEntityManager(EntityManager, UnityEngine.GameObject) Declaration public static Entity AddToEntityManager(EntityManager entityManager, UnityEngine.GameObject gameObject) Parameters Type Name Description EntityManager entityManager UnityEngine.GameObject gameObject Returns Type Description Entity | Improve this Doc CopyAllComponentsToEntity(UnityEngine.GameObject, EntityManager, Entity) Declaration public static void CopyAllComponentsToEntity(UnityEngine.GameObject gameObject, EntityManager entityManager, Entity entity) Parameters Type Name Description UnityEngine.GameObject gameObject EntityManager entityManager Entity entity | Improve this Doc OnDisable() Declaration protected virtual void OnDisable() | Improve this Doc OnEnable() Declaration protected virtual void OnEnable()"
  },
  "api/Unity.Entities.ConvertToEntitySystem.html": {
    "href": "api/Unity.Entities.ConvertToEntitySystem.html",
    "title": "Class ConvertToEntitySystem | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class ConvertToEntitySystem Inheritance Object ComponentSystemBase ComponentSystem ConvertToEntitySystem Inherited Members ComponentSystem.PostUpdateCommands ComponentSystem.InitEntityQueryCache(Int32) ComponentSystem.Entities ComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnDestroyManager() ComponentSystemBase.OnCreateManager() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetArchetypeChunkComponentType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkComponentTypeDynamic(ComponentType) ComponentSystemBase.GetArchetypeChunkBufferType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkSharedComponentType<T>() ComponentSystemBase.GetArchetypeChunkEntityType() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [UpdateInGroup(typeof(InitializationSystemGroup))] public class ConvertToEntitySystem : ComponentSystem Properties | Improve this Doc BlobAssetStore Declaration public BlobAssetStore BlobAssetStore { get; } Property Value Type Description BlobAssetStore Methods | Improve this Doc AddToBeConverted(World, ConvertToEntity) Declaration public void AddToBeConverted(World world, ConvertToEntity convertToEntity) Parameters Type Name Description World world ConvertToEntity convertToEntity | Improve this Doc OnCreate() Declaration protected override void OnCreate() Overrides ComponentSystemBase.OnCreate() | Improve this Doc OnDestroy() Declaration protected override void OnDestroy() Overrides ComponentSystemBase.OnDestroy() | Improve this Doc OnUpdate() Declaration protected override void OnUpdate() Overrides ComponentSystem.OnUpdate() Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Entities.ComponentTypeHash.html": {
    "href": "api/Unity.Entities.ComponentTypeHash.html",
    "title": "Struct ComponentTypeHash | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct ComponentTypeHash Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct ComponentTypeHash : IEquatable<ComponentTypeHash> Fields | Improve this Doc Flags Declaration public ComponentTypeFlags Flags Field Value Type Description ComponentTypeFlags | Improve this Doc StableTypeHash Declaration public ulong StableTypeHash Field Value Type Description UInt64 Methods | Improve this Doc Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object) | Improve this Doc Equals(ComponentTypeHash) Declaration public bool Equals(ComponentTypeHash other) Parameters Type Name Description ComponentTypeHash other Returns Type Description Boolean | Improve this Doc GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() Operators | Improve this Doc Equality(ComponentTypeHash, ComponentTypeHash) Declaration public static bool operator ==(ComponentTypeHash left, ComponentTypeHash right) Parameters Type Name Description ComponentTypeHash left ComponentTypeHash right Returns Type Description Boolean | Improve this Doc Inequality(ComponentTypeHash, ComponentTypeHash) Declaration public static bool operator !=(ComponentTypeHash left, ComponentTypeHash right) Parameters Type Name Description ComponentTypeHash left ComponentTypeHash right Returns Type Description Boolean"
  },
  "api/Unity.Entities.ComponentTypeFlags.html": {
    "href": "api/Unity.Entities.ComponentTypeFlags.html",
    "title": "Enum ComponentTypeFlags | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Enum ComponentTypeFlags Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Flags] public enum ComponentTypeFlags Fields Name Description ChunkComponent None"
  },
  "api/Unity.Entities.ComponentSystemBaseManagedComponentExtensions.html": {
    "href": "api/Unity.Entities.ComponentSystemBaseManagedComponentExtensions.html",
    "title": "Class ComponentSystemBaseManagedComponentExtensions | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class ComponentSystemBaseManagedComponentExtensions Inheritance Object ComponentSystemBaseManagedComponentExtensions Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class ComponentSystemBaseManagedComponentExtensions Methods | Improve this Doc GetSingleton<T>(ComponentSystemBase) Gets the value of a singleton component. Declaration public static T GetSingleton<T>(this ComponentSystemBase sys) where T : class, IComponentData Parameters Type Name Description ComponentSystemBase sys Returns Type Description T The component. Type Parameters Name Description T The IComponentData subtype of the singleton component. See Also GetSingleton<T>() | Improve this Doc HasSingleton<T>(ComponentSystemBase) Checks whether a singelton component of the specified type exists. Declaration public static bool HasSingleton<T>(this ComponentSystemBase sys) where T : class, IComponentData Parameters Type Name Description ComponentSystemBase sys Returns Type Description Boolean True, if a singleton of the specified type exists in the current World . Type Parameters Name Description T The IComponentData subtype of the singleton component. | Improve this Doc SetSingleton<T>(ComponentSystemBase, T) Sets the value of a singleton component. Declaration public static void SetSingleton<T>(this ComponentSystemBase sys, T value) where T : class, IComponentData Parameters Type Name Description ComponentSystemBase sys T value A component containing the value to assign to the singleton. Type Parameters Name Description T The IComponentData subtype of the singleton component. See Also SetSingleton<T>(T)"
  },
  "api/Unity.Entities.ComponentSystemBase.html": {
    "href": "api/Unity.Entities.ComponentSystemBase.html",
    "title": "Class ComponentSystemBase | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class ComponentSystemBase A system provides behavior in an ECS architecture. Inheritance Object ComponentSystemBase ComponentSystem JobComponentSystem SystemBase Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public abstract class ComponentSystemBase Remarks System implementations should inherit SystemBase , which is a subclass of ComponentSystemBase. Properties | Improve this Doc Enabled Controls whether this system executes when its OnUpdate function is called. Declaration public bool Enabled { get; set; } Property Value Type Description Boolean True, if the system is enabled. Remarks The Enabled property is intended for debugging so that you can easily turn on and off systems from the Entity Debugger window. A system with Enabled set to false will not update, even if its ShouldRunSystem() function returns true. | Improve this Doc EntityManager The EntityManager object of the World in which this system exists. Declaration public EntityManager EntityManager { get; } Property Value Type Description EntityManager The EntityManager for this system. | Improve this Doc EntityQueries The query objects cached by this system. Declaration public EntityQuery[] EntityQueries { get; } Property Value Type Description EntityQuery [] A read-only array of the cached EntityQuery objects. Remarks A system caches any queries it implicitly creates through the IJob interfaces or EntityQueryBuilder , that you create explicitly by calling GetEntityQuery(ComponentType[]) , or that you add to the system as a required query with RequireForUpdate(EntityQuery) . Implicit queries may be created lazily and not exist before a system has run for the first time. | Improve this Doc GlobalSystemVersion The current change version number in this World . Declaration public uint GlobalSystemVersion { get; } Property Value Type Description UInt32 Remarks The system updates the component version numbers inside any ArchetypeChunk instances that this system accesses with write permissions to this value. | Improve this Doc LastSystemVersion The current version of this system. Declaration public uint LastSystemVersion { get; } Property Value Type Description UInt32 The GlobalSystemVersion the last time this system ran. Remarks LastSystemVersion is updated to match the GlobalSystemVersion whenever a system runs. When you use or DidChange<T>(ArchetypeChunkComponentType<T>, UInt32) , LastSystemVersion provides the basis for determining whether a component could have changed since the last time the system ran. When a system accesses a component and has write permission, it updates the change version of that component type to the current value of LastSystemVersion. The system updates the component type's version whether or not it actually modifies data in any instances of the component type -- this is one reason why you should specify read-only access to components whenever possible. For efficiency, ECS tracks the change version of component types by chunks, not by individual entities. If a system updates the component of a given type for any entity in a chunk, then ECS assumes that the components of all entities in that chunk could have been changed. Change filtering allows you to save processing time by skipping all entities in an unchanged chunk, but does not support skipping individual entities in a chunk that does contain changes. | Improve this Doc Time The current Time data for this system's world. Declaration public TimeData Time { get; } Property Value Type Description TimeData | Improve this Doc World The World in which this system exists. Declaration public World World { get; } Property Value Type Description World The World of this system. Methods | Improve this Doc GetArchetypeChunkBufferType<T>(Boolean) Gets the run-time type information required to access an array of buffer components in a chunk. Declaration public ArchetypeChunkBufferType<T> GetArchetypeChunkBufferType<T>(bool isReadOnly = false) where T : struct, IBufferElementData Parameters Type Name Description Boolean isReadOnly Whether the data is only read, not written. Access data as read-only whenever possible. Returns Type Description ArchetypeChunkBufferType <T> An object representing the type information required to safely access buffer components stored in a chunk. Type Parameters Name Description T A struct that implements IBufferElementData . Remarks Pass a GetArchetypeChunkBufferType instance to a job that has access to chunk data, such as an IJobChunk job, to access that type of buffer component inside the job. | Improve this Doc GetArchetypeChunkComponentType<T>(Boolean) Gets the run-time type information required to access an array of component data in a chunk. Declaration public ArchetypeChunkComponentType<T> GetArchetypeChunkComponentType<T>(bool isReadOnly = false) where T : struct, IComponentData Parameters Type Name Description Boolean isReadOnly Whether the component data is only read, not written. Access components as read-only whenever possible. Returns Type Description ArchetypeChunkComponentType <T> An object representing the type information required to safely access component data stored in a chunk. Type Parameters Name Description T A struct that implements IComponentData . Remarks Pass an instance to a job that has access to chunk data, such as an IJobChunk job, to access that type of component inside the job. | Improve this Doc GetArchetypeChunkComponentTypeDynamic(ComponentType) Gets the run-time type information required to access an array of component data in a chunk. Declaration public ArchetypeChunkComponentTypeDynamic GetArchetypeChunkComponentTypeDynamic(ComponentType componentType) Parameters Type Name Description ComponentType componentType Type of the component Returns Type Description ArchetypeChunkComponentTypeDynamic An object representing the type information required to safely access component data stored in a chunk. Remarks Pass an ArchetypeChunkComponentTypeDynamic instance to a job that has access to chunk data, such as an IJobChunk job, to access that type of component inside the job. | Improve this Doc GetArchetypeChunkEntityType() Gets the run-time type information required to access the array of Entity objects in a chunk. Declaration public ArchetypeChunkEntityType GetArchetypeChunkEntityType() Returns Type Description ArchetypeChunkEntityType An object representing the type information required to safely access Entity instances stored in a chunk. | Improve this Doc GetArchetypeChunkSharedComponentType<T>() Gets the run-time type information required to access a shared component data in a chunk. Declaration public ArchetypeChunkSharedComponentType<T> GetArchetypeChunkSharedComponentType<T>() where T : struct, ISharedComponentData Returns Type Description ArchetypeChunkSharedComponentType <T> An object representing the type information required to safely access shared component data stored in a chunk. Type Parameters Name Description T A struct that implements ISharedComponentData . | Improve this Doc GetBufferFromEntity<T>(Boolean) Gets a BufferFromEntity<T> object that can access a DynamicBuffer<T> . Declaration public BufferFromEntity<T> GetBufferFromEntity<T>(bool isReadOnly = false) where T : struct, IBufferElementData Parameters Type Name Description Boolean isReadOnly Whether the buffer data is only read or is also written. Access data in a read-only fashion whenever possible. Returns Type Description BufferFromEntity <T> An array-like object that provides access to buffers, indexed by Entity . Type Parameters Name Description T The type of IBufferElementData stored in the buffer. Remarks Assign the returned object to a field of your Job struct so that you can access the contents of the buffer in a Job. See Also ComponentDataFromEntity <T> | Improve this Doc GetComponentDataFromEntity<T>(Boolean) Gets an array-like container containing all components of type T, indexed by Entity. Declaration public ComponentDataFromEntity<T> GetComponentDataFromEntity<T>(bool isReadOnly = false) where T : struct, IComponentData Parameters Type Name Description Boolean isReadOnly Whether the data is only read, not written. Access data as read-only whenever possible. Returns Type Description ComponentDataFromEntity <T> All component data of type T. Type Parameters Name Description T A struct that implements IComponentData . | Improve this Doc GetEntityQuery(NativeArray<ComponentType>) Gets the cached query for the specified component types, if one exists; otherwise, creates a new query instance and caches it. Declaration protected EntityQuery GetEntityQuery(NativeArray<ComponentType> componentTypes) Parameters Type Name Description NativeArray < ComponentType > componentTypes An array of component types. Returns Type Description EntityQuery The new or cached query. | Improve this Doc GetEntityQuery(ComponentType[]) Gets the cached query for the specified component types, if one exists; otherwise, creates a new query instance and caches it. Declaration protected EntityQuery GetEntityQuery(params ComponentType[] componentTypes) Parameters Type Name Description ComponentType [] componentTypes An array or comma-separated list of component types. Returns Type Description EntityQuery The new or cached query. | Improve this Doc GetEntityQuery(EntityQueryDesc[]) Combines an array of query description objects into a single query. Declaration protected EntityQuery GetEntityQuery(params EntityQueryDesc[] queryDesc) Parameters Type Name Description EntityQueryDesc [] queryDesc An array of query description objects to be combined to define the query. Returns Type Description EntityQuery The new or cached query. Remarks This function looks for a cached query matching the combined query descriptions, and returns it if one exists; otherwise, the function creates a new query instance and caches it. | Improve this Doc GetSingleton<T>() Gets the value of a singleton component. Declaration public T GetSingleton<T>() where T : struct, IComponentData Returns Type Description T The component. Type Parameters Name Description T The IComponentData subtype of the singleton component. See Also GetSingleton<T>() | Improve this Doc GetSingletonEntity<T>() Gets the Entity instance for a singleton. Declaration public Entity GetSingletonEntity<T>() Returns Type Description Entity The entity associated with the specified singleton component. Type Parameters Name Description T The Type of the singleton component. See Also GetSingletonEntity() | Improve this Doc HasSingleton<T>() Checks whether a singelton component of the specified type exists. Declaration public bool HasSingleton<T>() where T : struct, IComponentData Returns Type Description Boolean True, if a singleton of the specified type exists in the current World . Type Parameters Name Description T The IComponentData subtype of the singleton component. | Improve this Doc OnCreate() Called when this system is created. Declaration protected virtual void OnCreate() Remarks Implement an OnCreate() function to set up system resources when it is created. OnCreate is invoked before the the first time OnStartRunning() and OnUpdate are invoked. | Improve this Doc OnCreateForCompiler() Declaration protected virtual void OnCreateForCompiler() | Improve this Doc OnCreateManager() WARNING: OnCreateManager() is obsolete and should be renamed to OnCreate. OnCreateManager will not be called by Unity after 2020-01-22 Declaration protected virtual void OnCreateManager() | Improve this Doc OnDestroy() Called when this system is destroyed. Declaration protected virtual void OnDestroy() Remarks Systems are destroyed when the application shuts down, the World is destroyed, or you call DestroySystem(ComponentSystemBase) . In the Unity Editor, system destruction occurs when you exit Play Mode and when scripts are reloaded. | Improve this Doc OnDestroyManager() WARNING: OnDestroyManager() is obsolete and should be renamed to OnDestroy. OnDestroyManager will not be called by Unity after 2020-01-22 Declaration protected virtual void OnDestroyManager() | Improve this Doc OnStartRunning() Called before the first call to OnUpdate and when a system resumes updating after being stopped or disabled. Declaration protected virtual void OnStartRunning() Remarks If the EntityQuery objects defined for a system do not match any existing entities then the system skips updates until a successful match is found. Likewise, if you set Enabled to false, then the system stops running. In both cases, OnStopRunning() is called when a running system stops updating; OnStartRunning is called when it starts updating again. | Improve this Doc OnStopRunning() Called when this system stops running because no entities match the system's EntityQuery objects or because you change the system Enabled property to false. Declaration protected virtual void OnStopRunning() Remarks If the EntityQuery objects defined for a system do not match any existing entities then the system skips updating until a successful match is found. Likewise, if you set Enabled to false, then the system stops running. In both cases, OnStopRunning() is called when a running system stops updating; OnStartRunning is called when it starts updating again. | Improve this Doc RequireForUpdate(EntityQuery) Adds a query that must return entities for the system to run. You can add multiple required queries to a system; all of them must match at least one entity for the system to run. Declaration public void RequireForUpdate(EntityQuery query) Parameters Type Name Description EntityQuery query A query that must match entities this frame in order for this system to run. Remarks Any queries added through RequireforUpdate override all other queries cached by this system. In other words, if any required query does not find matching entities, the update is skipped even if another query created for the system (either explicitly or implicitly) does match entities and vice versa. | Improve this Doc RequireSingletonForUpdate<T>() Require that a specific singleton component exist for this system to run. Declaration public void RequireSingletonForUpdate<T>() Type Parameters Name Description T The IComponentData subtype of the singleton component. | Improve this Doc SetSingleton<T>(T) Sets the value of a singleton component. Declaration public void SetSingleton<T>(T value) where T : struct, IComponentData Parameters Type Name Description T value A component containing the value to assign to the singleton. Type Parameters Name Description T The IComponentData subtype of the singleton component. See Also SetSingleton<T>(T) | Improve this Doc ShouldRunSystem() Reports whether any of this system's entity queries currently match any chunks. This function is used internally to determine whether the system's OnUpdate function can be skipped. Declaration public bool ShouldRunSystem() Returns Type Description Boolean True, if the queries in this system match existing entities or the system has the AlwaysUpdateSystemAttribute . Remarks A system without any queries also returns true. Note that even if this function returns true, other factors may prevent a system from updating. For example, a system will not be updated if its Enabled property is false. | Improve this Doc Update() Executes the system immediately. Declaration public abstract void Update() Remarks The exact behavior is determined by this system's specific subclass. See Also SystemBase ComponentSystemGroup EntityCommandBufferSystem Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Entities.ChunkSerializableAttribute.html": {
    "href": "api/Unity.Entities.ChunkSerializableAttribute.html",
    "title": "Class ChunkSerializableAttribute | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class ChunkSerializableAttribute States that a component type is serializable. Inheritance Object Attribute ChunkSerializableAttribute Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct)] public class ChunkSerializableAttribute : Attribute, _Attribute Remarks By default, ECS does not support storing pointer types in chunks. Apply this attribute to a component declaration to allow the use of pointers as fields in the component. Note that ECS does not perform any pre- or post-serialization processing to maintain pointer validity. When using this attribute, your code assumes responsibility for handling pointer serialization and deserialization."
  },
  "api/Unity.Entities.ChunkHeader.html": {
    "href": "api/Unity.Entities.ChunkHeader.html",
    "title": "Struct ChunkHeader | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct ChunkHeader Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct ChunkHeader : ISystemStateComponentData, IComponentData Fields | Improve this Doc ArchetypeChunk Declaration public ArchetypeChunk ArchetypeChunk Field Value Type Description ArchetypeChunk Properties | Improve this Doc Null Declaration public static ChunkHeader Null { get; } Property Value Type Description ChunkHeader"
  },
  "api/Unity.Entities.BuildUtils.TypeHash.html": {
    "href": "api/Unity.Entities.BuildUtils.TypeHash.html",
    "title": "Class TypeHash | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class TypeHash Inheritance Object TypeHash Namespace : Unity.Entities.BuildUtils <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class TypeHash Methods | Improve this Doc CalculateMemoryOrdering(TypeDefinition) Declaration public static ulong CalculateMemoryOrdering(TypeDefinition typeDef) Parameters Type Name Description TypeDefinition typeDef Returns Type Description UInt64 | Improve this Doc CalculateMemoryOrderingRefl(Type) Declaration public static ulong CalculateMemoryOrderingRefl(Type type) Parameters Type Name Description Type type Returns Type Description UInt64 | Improve this Doc CalculateStableTypeHash(TypeDefinition) Declaration public static ulong CalculateStableTypeHash(TypeDefinition typeDef) Parameters Type Name Description TypeDefinition typeDef Returns Type Description UInt64 | Improve this Doc CalculateStableTypeHashRefl(Type) Declaration public static ulong CalculateStableTypeHashRefl(Type type) Parameters Type Name Description Type type Returns Type Description UInt64 | Improve this Doc CombineFNV1A64(UInt64, UInt64[]) Declaration public static ulong CombineFNV1A64(ulong hash, params ulong[] values) Parameters Type Name Description UInt64 hash UInt64 [] values Returns Type Description UInt64 | Improve this Doc FNV1A64(Int32) Declaration public static ulong FNV1A64(int val) Parameters Type Name Description Int32 val Returns Type Description UInt64 | Improve this Doc FNV1A64(String) Declaration public static ulong FNV1A64(string text) Parameters Type Name Description String text Returns Type Description UInt64 | Improve this Doc HashType(Type, Int32) Declaration public static ulong HashType(Type type, int fieldIndex = 0) Parameters Type Name Description Type type Int32 fieldIndex Returns Type Description UInt64 | Improve this Doc HashType(TypeDefinition, Int32) Declaration public static ulong HashType(TypeDefinition typeDef, int fieldIndex = 0) Parameters Type Name Description TypeDefinition typeDef Int32 fieldIndex Returns Type Description UInt64 | Improve this Doc HashVersionAttribute(TypeDefinition) Declaration public static ulong HashVersionAttribute(TypeDefinition typeDef) Parameters Type Name Description TypeDefinition typeDef Returns Type Description UInt64"
  },
  "api/Unity.Entities.BuildUtils.MonoExtensions.html": {
    "href": "api/Unity.Entities.BuildUtils.MonoExtensions.html",
    "title": "Class MonoExtensions | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class MonoExtensions Inheritance Object MonoExtensions Namespace : Unity.Entities.BuildUtils <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class MonoExtensions Methods | Improve this Doc CalculateMemoryOrdering(TypeDefinition) Declaration public static ulong CalculateMemoryOrdering(this TypeDefinition typeDef) Parameters Type Name Description TypeDefinition typeDef Returns Type Description UInt64 | Improve this Doc CalculateStableTypeHash(TypeDefinition) Declaration public static ulong CalculateStableTypeHash(this TypeDefinition typeDef) Parameters Type Name Description TypeDefinition typeDef Returns Type Description UInt64 | Improve this Doc DynamicArrayElementType(TypeReference) Declaration public static TypeReference DynamicArrayElementType(this TypeReference typeRef) Parameters Type Name Description TypeReference typeRef Returns Type Description TypeReference | Improve this Doc FixedSpecialType(TypeReference) Declaration public static TypeDefinition FixedSpecialType(this TypeReference typeRef) Parameters Type Name Description TypeReference typeRef Returns Type Description TypeDefinition | Improve this Doc GetReflectionName(TypeReference) Declaration public static string GetReflectionName(this TypeReference type) Parameters Type Name Description TypeReference type Returns Type Description String | Improve this Doc GetSystemReflectionType(TypeReference) Declaration public static Type GetSystemReflectionType(this TypeReference type) Parameters Type Name Description TypeReference type Returns Type Description Type | Improve this Doc GetSystemRunsAfter(TypeDefinition) Declaration public static TypeDefinition[] GetSystemRunsAfter(this TypeDefinition type) Parameters Type Name Description TypeDefinition type Returns Type Description TypeDefinition [] | Improve this Doc GetSystemRunsBefore(TypeDefinition) Declaration public static TypeDefinition[] GetSystemRunsBefore(this TypeDefinition type) Parameters Type Name Description TypeDefinition type Returns Type Description TypeDefinition [] | Improve this Doc IsBufferElementComponentType(TypeReference) Declaration public static bool IsBufferElementComponentType(this TypeReference typeRef) Parameters Type Name Description TypeReference typeRef Returns Type Description Boolean | Improve this Doc IsComplex(TypeReference) Declaration public static bool IsComplex(this TypeReference typeRef) Parameters Type Name Description TypeReference typeRef Returns Type Description Boolean | Improve this Doc IsComponentType(TypeReference) Declaration public static bool IsComponentType(this TypeReference typeRef) Parameters Type Name Description TypeReference typeRef Returns Type Description Boolean | Improve this Doc IsCppBasicType(TypeDefinition) Declaration public static bool IsCppBasicType(this TypeDefinition type) Parameters Type Name Description TypeDefinition type Returns Type Description Boolean | Improve this Doc IsDynamicArray(TypeReference) Declaration public static bool IsDynamicArray(this TypeReference type) Parameters Type Name Description TypeReference type Returns Type Description Boolean | Improve this Doc IsEntityType(TypeReference) Declaration public static bool IsEntityType(this TypeReference typeRef) Parameters Type Name Description TypeReference typeRef Returns Type Description Boolean | Improve this Doc IsManagedType(TypeReference) Declaration public static bool IsManagedType(this TypeReference typeRef) Parameters Type Name Description TypeReference typeRef Returns Type Description Boolean | Improve this Doc IsPodType(TypeReference) Declaration public static bool IsPodType(this TypeReference typeRef) Parameters Type Name Description TypeReference typeRef Returns Type Description Boolean | Improve this Doc IsSharedComponentType(TypeReference) Declaration public static bool IsSharedComponentType(this TypeReference typeRef) Parameters Type Name Description TypeReference typeRef Returns Type Description Boolean | Improve this Doc IsStructValueType(TypeDefinition) Declaration public static bool IsStructValueType(this TypeDefinition type) Parameters Type Name Description TypeDefinition type Returns Type Description Boolean | Improve this Doc IsStructValueType(TypeReference) Declaration public static bool IsStructValueType(this TypeReference type) Parameters Type Name Description TypeReference type Returns Type Description Boolean | Improve this Doc IsStructWithInterface(TypeDefinition, String) Declaration public static bool IsStructWithInterface(this TypeDefinition type, string fullName) Parameters Type Name Description TypeDefinition type String fullName Returns Type Description Boolean | Improve this Doc IsSystemFenceType(TypeDefinition) Declaration public static bool IsSystemFenceType(this TypeDefinition type) Parameters Type Name Description TypeDefinition type Returns Type Description Boolean | Improve this Doc IsSystemStateComponentType(TypeReference) Declaration public static bool IsSystemStateComponentType(this TypeReference typeRef) Parameters Type Name Description TypeReference typeRef Returns Type Description Boolean | Improve this Doc IsSystemType(TypeDefinition) Declaration public static bool IsSystemType(this TypeDefinition type) Parameters Type Name Description TypeDefinition type Returns Type Description Boolean"
  },
  "api/Unity.Entities.World.NoAllocReadOnlyCollection-1.html": {
    "href": "api/Unity.Entities.World.NoAllocReadOnlyCollection-1.html",
    "title": "Struct World.NoAllocReadOnlyCollection<T> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct World.NoAllocReadOnlyCollection<T> Read only collection that doesn't generate garbage when used in a foreach. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct NoAllocReadOnlyCollection<T> : IEnumerable<T>, IEnumerable Type Parameters Name Description T Constructors | Improve this Doc NoAllocReadOnlyCollection(List<T>) Declaration public NoAllocReadOnlyCollection(List<T> source) Parameters Type Name Description List <T> source Properties | Improve this Doc Count Declaration public int Count { get; } Property Value Type Description Int32 | Improve this Doc Item[Int32] Declaration public T this[int index] { get; } Parameters Type Name Description Int32 index Property Value Type Description T Methods | Improve this Doc Contains(T) Declaration public bool Contains(T item) Parameters Type Name Description T item Returns Type Description Boolean | Improve this Doc GetEnumerator() Declaration public List<T>.Enumerator GetEnumerator() Returns Type Description List.Enumerator <>"
  },
  "api/Unity.Entities.ArchetypeChunk.html": {
    "href": "api/Unity.Entities.ArchetypeChunk.html",
    "title": "Struct ArchetypeChunk | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct ArchetypeChunk A block of unmanaged memory containing the components for entities sharing the same Unity.Entities.Archetype . Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct ArchetypeChunk : IEquatable<ArchetypeChunk> Properties | Improve this Doc Archetype The archetype of the entities stored in this chunk. Declaration public EntityArchetype Archetype { get; } Property Value Type Description EntityArchetype Remarks All entities in a chunk must have the same Unity.Entities.Archetype . | Improve this Doc Capacity The number of entities that can fit in this chunk. Declaration public int Capacity { get; } Property Value Type Description Int32 Remarks The capacity of a chunk depends on the size of the components making up the Unity.Entities.Archetype of the entities stored in the chunk. | Improve this Doc Count The number of entities currently stored in the chunk. Declaration public int Count { get; } Property Value Type Description Int32 | Improve this Doc Full Whether this chunk is exactly full. Declaration public bool Full { get; } Property Value Type Description Boolean | Improve this Doc Null A special \"null\" ArchetypeChunk that you can use to test whether ArchetypeChunk instances are valid. Declaration public static ArchetypeChunk Null { get; } Property Value Type Description ArchetypeChunk Remarks An ArchetypeChunk struct that refers to a chunk of memory that has been freed will be equal to this \"null\" ArchetypeChunk instance. Methods | Improve this Doc DidChange<T>(ArchetypeChunkBufferType<T>, UInt32) Reports whether any of dynamic buffer components in the chunk, of the type identified by chunkBufferType , could have changed. Declaration public bool DidChange<T>(ArchetypeChunkBufferType<T> chunkBufferType, uint version) where T : struct, IBufferElementData Parameters Type Name Description ArchetypeChunkBufferType <T> chunkBufferType An object containing type and job safety information. Create this object by calling immediately before scheduling a job. Pass the object to a job using a public field you define as part of the job struct. UInt32 version The version to compare. In a system, this parameter should be set to the current LastSystemVersion at the time the job is run or scheduled. Returns Type Description Boolean True, if the version number stored in the chunk for this component is more recent than the version passed to the version parameter. Type Parameters Name Description T The data type of the elements in the dynamic buffer. Remarks Note that for efficiency, the change version applies to whole chunks not individual entities. The change version is incremented even when another job or system that has declared write access to a component does not actually change the component value. | Improve this Doc DidChange<T>(ArchetypeChunkComponentType<T>, UInt32) Reports whether any of IComponentData components in the chunk, of the type identified by chunkComponentType , could have changed. Declaration public bool DidChange<T>(ArchetypeChunkComponentType<T> chunkComponentType, uint version) where T : IComponentData Parameters Type Name Description ArchetypeChunkComponentType <T> chunkComponentType An object containing type and job safety information. Create this object by calling immediately before scheduling a job. Pass the object to a job using a public field you define as part of the job struct. UInt32 version The version to compare. In a system, this parameter should be set to the current LastSystemVersion at the time the job is run or scheduled. Returns Type Description Boolean True, if the version number stored in the chunk for this component is more recent than the version passed to the version parameter. Type Parameters Name Description T The component type. Remarks Note that for efficiency, the change version applies to whole chunks not individual entities. The change version is incremented even when another job or system that has declared write access to a component does not actually change the component value. | Improve this Doc DidChange<T>(ArchetypeChunkSharedComponentType<T>, UInt32) Declaration public bool DidChange<T>(ArchetypeChunkSharedComponentType<T> chunkSharedComponentData, uint version) where T : struct, ISharedComponentData Parameters Type Name Description ArchetypeChunkSharedComponentType <T> chunkSharedComponentData UInt32 version Returns Type Description Boolean Type Parameters Name Description T | Improve this Doc Equals(Object) Two ArchetypeChunk instances are equal if they reference the same block of chunk memory. Declaration public override bool Equals(object compare) Parameters Type Name Description Object compare An object Returns Type Description Boolean True if compare is an ArchetypeChunk instance that references the same memory, or both contain null memory references; otherwise false. Overrides ValueType.Equals(Object) | Improve this Doc Equals(ArchetypeChunk) Two ArchetypeChunk instances are equal if they reference the same block of chunk memory. Declaration public bool Equals(ArchetypeChunk archetypeChunk) Parameters Type Name Description ArchetypeChunk archetypeChunk Another ArchetypeChunk instance Returns Type Description Boolean True, if both ArchetypeChunk instances reference the same memory or both contain null memory references. | Improve this Doc GetBufferAccessor<T>(ArchetypeChunkBufferType<T>) Declaration public BufferAccessor<T> GetBufferAccessor<T>(ArchetypeChunkBufferType<T> bufferComponentType) where T : struct, IBufferElementData Parameters Type Name Description ArchetypeChunkBufferType <T> bufferComponentType Returns Type Description BufferAccessor <T> Type Parameters Name Description T | Improve this Doc GetChunkComponentData<T>(ArchetypeChunkComponentType<T>) Declaration public T GetChunkComponentData<T>(ArchetypeChunkComponentType<T> chunkComponentType) where T : struct Parameters Type Name Description ArchetypeChunkComponentType <T> chunkComponentType Returns Type Description T Type Parameters Name Description T | Improve this Doc GetComponentObjects<T>(ArchetypeChunkComponentType<T>, EntityManager) Declaration public ArchetypeChunkComponentObjects<T> GetComponentObjects<T>(ArchetypeChunkComponentType<T> componentType, EntityManager manager) where T : class Parameters Type Name Description ArchetypeChunkComponentType <T> componentType EntityManager manager Returns Type Description ArchetypeChunkComponentObjects <T> Type Parameters Name Description T | Improve this Doc GetComponentVersion<T>(ArchetypeChunkBufferType<T>) Declaration public uint GetComponentVersion<T>(ArchetypeChunkBufferType<T> chunkBufferType) where T : struct, IBufferElementData Parameters Type Name Description ArchetypeChunkBufferType <T> chunkBufferType Returns Type Description UInt32 Type Parameters Name Description T | Improve this Doc GetComponentVersion<T>(ArchetypeChunkComponentType<T>) Declaration public uint GetComponentVersion<T>(ArchetypeChunkComponentType<T> chunkComponentType) where T : IComponentData Parameters Type Name Description ArchetypeChunkComponentType <T> chunkComponentType Returns Type Description UInt32 Type Parameters Name Description T | Improve this Doc GetComponentVersion<T>(ArchetypeChunkSharedComponentType<T>) Declaration public uint GetComponentVersion<T>(ArchetypeChunkSharedComponentType<T> chunkSharedComponentData) where T : struct, ISharedComponentData Parameters Type Name Description ArchetypeChunkSharedComponentType <T> chunkSharedComponentData Returns Type Description UInt32 Type Parameters Name Description T | Improve this Doc GetDynamicComponentDataArrayReinterpret<T>(ArchetypeChunkComponentTypeDynamic, Int32) Declaration public NativeArray<T> GetDynamicComponentDataArrayReinterpret<T>(ArchetypeChunkComponentTypeDynamic chunkComponentType, int expectedTypeSize) where T : struct Parameters Type Name Description ArchetypeChunkComponentTypeDynamic chunkComponentType Int32 expectedTypeSize Returns Type Description NativeArray <T> Type Parameters Name Description T Exceptions Type Condition ArgumentException InvalidOperationException | Improve this Doc GetHashCode() Computes a hashcode to support hash-based collections. Declaration public override int GetHashCode() Returns Type Description Int32 The computed hash. Overrides ValueType.GetHashCode() | Improve this Doc GetNativeArray(ArchetypeChunkEntityType) Provides a native array interface to entity instances stored in this chunk. Declaration public NativeArray<Entity> GetNativeArray(ArchetypeChunkEntityType archetypeChunkEntityType) Parameters Type Name Description ArchetypeChunkEntityType archetypeChunkEntityType An object containing type and job safety information. Create this object by calling immediately before scheduling a job. Pass the object to a job using a public field you define as part of the job struct. Returns Type Description NativeArray < Entity > A native array containing the entities in the chunk. Remarks The native array returned by this method references existing data, not a copy. | Improve this Doc GetNativeArray<T>(ArchetypeChunkComponentType<T>) Provides a native array interface to components stored in this chunk. Declaration public NativeArray<T> GetNativeArray<T>(ArchetypeChunkComponentType<T> chunkComponentType) where T : struct, IComponentData Parameters Type Name Description ArchetypeChunkComponentType <T> chunkComponentType An object containing type and job safety information. Create this object by calling immediately before scheduling a job. Pass the object to a job using a public field you define as part of the job struct. Returns Type Description NativeArray <T> A native array containing the components in the chunk. Type Parameters Name Description T The data type of the component. Remarks The native array returned by this method references existing data, not a copy. Exceptions Type Condition ArgumentException If you call this function on a \"tag\" component type (which is an empty component with no fields). | Improve this Doc GetSharedComponentData<T>(ArchetypeChunkSharedComponentType<T>, EntityManager) Declaration public T GetSharedComponentData<T>(ArchetypeChunkSharedComponentType<T> chunkSharedComponentData, EntityManager entityManager) where T : struct, ISharedComponentData Parameters Type Name Description ArchetypeChunkSharedComponentType <T> chunkSharedComponentData EntityManager entityManager Returns Type Description T Type Parameters Name Description T | Improve this Doc GetSharedComponentIndex<T>(ArchetypeChunkSharedComponentType<T>) Declaration public int GetSharedComponentIndex<T>(ArchetypeChunkSharedComponentType<T> chunkSharedComponentData) where T : struct, ISharedComponentData Parameters Type Name Description ArchetypeChunkSharedComponentType <T> chunkSharedComponentData Returns Type Description Int32 Type Parameters Name Description T | Improve this Doc Has(ArchetypeChunkComponentTypeDynamic) Declaration public bool Has(ArchetypeChunkComponentTypeDynamic chunkComponentType) Parameters Type Name Description ArchetypeChunkComponentTypeDynamic chunkComponentType Returns Type Description Boolean | Improve this Doc Has<T>(ArchetypeChunkBufferType<T>) Reports whether this chunk contains a dynamic buffer containing the specified component type. Declaration public bool Has<T>(ArchetypeChunkBufferType<T> chunkBufferType) where T : struct, IBufferElementData Parameters Type Name Description ArchetypeChunkBufferType <T> chunkBufferType An object containing type and job safety information. Create this object by calling immediately before scheduling a job. Pass the object to a job using a public field you define as part of the job struct. Returns Type Description Boolean True, if this chunk contains an array of the dynamic buffers containing the specified component type. Type Parameters Name Description T The data type of the component stored in the dynamic buffer. Remarks When an EntityQuery includes optional dynamic buffer types (with Any ), some chunks returned by the query may have these dynamic buffers components and some may not. Use this function to determine whether or not the current chunk contains one of these optional dynamic buffers. | Improve this Doc Has<T>(ArchetypeChunkComponentType<T>) Reports whether this chunk contains the specified component type. Declaration public bool Has<T>(ArchetypeChunkComponentType<T> chunkComponentType) where T : IComponentData Parameters Type Name Description ArchetypeChunkComponentType <T> chunkComponentType An object containing type and job safety information. Create this object by calling immediately before scheduling a job. Pass the object to a job using a public field you define as part of the job struct. Returns Type Description Boolean True, if this chunk contains an array of the specified component type. Type Parameters Name Description T The data type of the component. Remarks When an EntityQuery includes optional components (using Any ), some chunks returned by the query may contain such components and some may not. Use this function to determine whether or not the current chunk contains one of these optional component types. | Improve this Doc Has<T>(ArchetypeChunkSharedComponentType<T>) Reports whether this chunk contains a shared component of the specified component type. Declaration public bool Has<T>(ArchetypeChunkSharedComponentType<T> chunkComponentType) where T : struct, ISharedComponentData Parameters Type Name Description ArchetypeChunkSharedComponentType <T> chunkComponentType An object containing type and job safety information. Create this object by calling immediately before scheduling a job. Pass the object to a job using a public field you define as part of the job struct. Returns Type Description Boolean True, if this chunk contains a shared component of the specified type. Type Parameters Name Description T The data type of the shared component. Remarks When an EntityQuery includes optional components used as shared components (with Any ), some chunks returned by the query may have these shared components and some may not. Use this function to determine whether or not the current chunk contains one of these optional component types as a shared component. | Improve this Doc HasChunkComponent<T>(ArchetypeChunkComponentType<T>) Reports whether this chunk contains a chunk component of the specified component type. Declaration public bool HasChunkComponent<T>(ArchetypeChunkComponentType<T> chunkComponentType) where T : struct, IComponentData Parameters Type Name Description ArchetypeChunkComponentType <T> chunkComponentType An object containing type and job safety information. Create this object by calling immediately before scheduling a job. Pass the object to a job using a public field you define as part of the job struct. Returns Type Description Boolean True, if this chunk contains a chunk component of the specified type. Type Parameters Name Description T The data type of the chunk component. Remarks When an EntityQuery includes optional components used as chunk components (with Any ), some chunks returned by the query may have these chunk components and some may not. Use this function to determine whether or not the current chunk contains one of these optional component types as a chunk component. | Improve this Doc Invalid() Reports whether this ArchetypeChunk instance is invalid. Declaration public bool Invalid() Returns Type Description Boolean True, if no Unity.Entities.Archetype is associated with the this ArchetypeChunk instance. | Improve this Doc Locked() Reports whether this ArchetypeChunk is locked. Declaration public bool Locked() Returns Type Description Boolean True, if locked. See Also LockChunk(ArchetypeChunk) UnlockChunk(ArchetypeChunk) | Improve this Doc NumSharedComponents() The number of shared components in the archetype associated with this chunk. Declaration public int NumSharedComponents() Returns Type Description Int32 The shared component count. | Improve this Doc SetChunkComponentData<T>(ArchetypeChunkComponentType<T>, T) Declaration public void SetChunkComponentData<T>(ArchetypeChunkComponentType<T> chunkComponentType, T value) where T : struct Parameters Type Name Description ArchetypeChunkComponentType <T> chunkComponentType T value Type Parameters Name Description T Operators | Improve this Doc Equality(ArchetypeChunk, ArchetypeChunk) Two ArchetypeChunk instances are equal if they reference the same block of chunk memory. Declaration public static bool operator ==(ArchetypeChunk lhs, ArchetypeChunk rhs) Parameters Type Name Description ArchetypeChunk lhs An ArchetypeChunk ArchetypeChunk rhs Another ArchetypeChunk Returns Type Description Boolean True, if both ArchetypeChunk instances reference the same memory, or both contain null memory references. | Improve this Doc Inequality(ArchetypeChunk, ArchetypeChunk) Two ArchetypeChunk instances are only equal if they reference the same block of chunk memory. Declaration public static bool operator !=(ArchetypeChunk lhs, ArchetypeChunk rhs) Parameters Type Name Description ArchetypeChunk lhs An ArchetypeChunk ArchetypeChunk rhs Another ArchetypeChunk Returns Type Description Boolean True, if the ArchetypeChunk instances reference different blocks of memory."
  },
  "api/Unity.Assertions.Assert.html": {
    "href": "api/Unity.Assertions.Assert.html",
    "title": "Class Assert | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class Assert Inheritance Object Assert Namespace : Unity.Assertions <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class Assert Methods | Improve this Doc AreApproximatelyEqual(Single, Single) Declaration [Conditional(\"UNITY_ASSERTIONS\")] public static void AreApproximatelyEqual(float expected, float actual) Parameters Type Name Description Single expected Single actual | Improve this Doc AreApproximatelyEqual(Single, Single, Single) Declaration [Conditional(\"UNITY_ASSERTIONS\")] public static void AreApproximatelyEqual(float expected, float actual, float tolerance) Parameters Type Name Description Single expected Single actual Single tolerance | Improve this Doc AreApproximatelyEqual(Single, Single, String) Declaration [Conditional(\"UNITY_ASSERTIONS\")] public static void AreApproximatelyEqual(float expected, float actual, string message) Parameters Type Name Description Single expected Single actual String message | Improve this Doc AreEqual(Boolean, Boolean) Declaration [Conditional(\"UNITY_ASSERTIONS\")] public static void AreEqual(bool expected, bool actual) Parameters Type Name Description Boolean expected Boolean actual | Improve this Doc AreEqual(Int32, Int32) Declaration [Conditional(\"UNITY_ASSERTIONS\")] public static void AreEqual(int expected, int actual) Parameters Type Name Description Int32 expected Int32 actual | Improve this Doc AreEqual<T>(T, T) Declaration [Conditional(\"UNITY_ASSERTIONS\")] public static void AreEqual<T>(T expected, T actual) Parameters Type Name Description T expected T actual Type Parameters Name Description T | Improve this Doc AreEqual<T>(T, T, String) Declaration [Conditional(\"UNITY_ASSERTIONS\")] public static void AreEqual<T>(T expected, T actual, string message) Parameters Type Name Description T expected T actual String message Type Parameters Name Description T | Improve this Doc AreNotEqual(Boolean, Boolean) Declaration [Conditional(\"UNITY_ASSERTIONS\")] public static void AreNotEqual(bool expected, bool actual) Parameters Type Name Description Boolean expected Boolean actual | Improve this Doc AreNotEqual(Int32, Int32) Declaration [Conditional(\"UNITY_ASSERTIONS\")] public static void AreNotEqual(int expected, int actual) Parameters Type Name Description Int32 expected Int32 actual | Improve this Doc AreNotEqual<T>(T, T) Declaration [Conditional(\"UNITY_ASSERTIONS\")] public static void AreNotEqual<T>(T expected, T actual) Parameters Type Name Description T expected T actual Type Parameters Name Description T | Improve this Doc AreNotEqual<T>(T, T, String) Declaration [Conditional(\"UNITY_ASSERTIONS\")] public static void AreNotEqual<T>(T expected, T actual, string message) Parameters Type Name Description T expected T actual String message Type Parameters Name Description T | Improve this Doc IsFalse(Boolean) Declaration [Conditional(\"UNITY_ASSERTIONS\")] public static void IsFalse(bool condition) Parameters Type Name Description Boolean condition | Improve this Doc IsFalse(Boolean, String) Declaration [Conditional(\"UNITY_ASSERTIONS\")] public static void IsFalse(bool condition, string message) Parameters Type Name Description Boolean condition String message | Improve this Doc IsNotNull<T>(T) Declaration [Conditional(\"UNITY_ASSERTIONS\")] public static void IsNotNull<T>(T value) where T : class Parameters Type Name Description T value Type Parameters Name Description T | Improve this Doc IsNotNull<T>(T, String) Declaration [Conditional(\"UNITY_ASSERTIONS\")] public static void IsNotNull<T>(T value, string message) where T : class Parameters Type Name Description T value String message Type Parameters Name Description T | Improve this Doc IsNull<T>(T) Declaration [Conditional(\"UNITY_ASSERTIONS\")] public static void IsNull<T>(T value) where T : class Parameters Type Name Description T value Type Parameters Name Description T | Improve this Doc IsNull<T>(T, String) Declaration [Conditional(\"UNITY_ASSERTIONS\")] public static void IsNull<T>(T value, string message) where T : class Parameters Type Name Description T value String message Type Parameters Name Description T | Improve this Doc IsTrue(Boolean) Declaration [Conditional(\"UNITY_ASSERTIONS\")] public static void IsTrue(bool condition) Parameters Type Name Description Boolean condition | Improve this Doc IsTrue(Boolean, String) Declaration [Conditional(\"UNITY_ASSERTIONS\")] public static void IsTrue(bool condition, string message) Parameters Type Name Description Boolean condition String message"
  },
  "api/Unity.Transforms.PreviousParent.html": {
    "href": "api/Unity.Transforms.PreviousParent.html",
    "title": "Struct PreviousParent | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct PreviousParent Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] public struct PreviousParent : ISystemStateComponentData, IComponentData Fields | Improve this Doc Value Declaration public Entity Value Field Value Type Description Entity"
  },
  "api/Unity.Transforms.PostRotationEulerZYX.html": {
    "href": "api/Unity.Transforms.PostRotationEulerZYX.html",
    "title": "Struct PostRotationEulerZYX | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct PostRotationEulerZYX Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] [WriteGroup(typeof(PostRotation))] public struct PostRotationEulerZYX : IComponentData Fields | Improve this Doc Value Declaration public float3 Value Field Value Type Description float3"
  },
  "api/Unity.Transforms.PostRotationEulerZXY.html": {
    "href": "api/Unity.Transforms.PostRotationEulerZXY.html",
    "title": "Struct PostRotationEulerZXY | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct PostRotationEulerZXY Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] [WriteGroup(typeof(PostRotation))] public struct PostRotationEulerZXY : IComponentData Fields | Improve this Doc Value Declaration public float3 Value Field Value Type Description float3"
  },
  "api/Unity.Transforms.PostRotationEulerYZX.html": {
    "href": "api/Unity.Transforms.PostRotationEulerYZX.html",
    "title": "Struct PostRotationEulerYZX | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct PostRotationEulerYZX Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] [WriteGroup(typeof(PostRotation))] public struct PostRotationEulerYZX : IComponentData Fields | Improve this Doc Value Declaration public float3 Value Field Value Type Description float3"
  },
  "api/Unity.Entities.WriteGroupAttribute.html": {
    "href": "api/Unity.Entities.WriteGroupAttribute.html",
    "title": "Class WriteGroupAttribute | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class WriteGroupAttribute [WriteGroup] Can exclude components which are unknown at the time of creating the query that have been declared to write to the same component. This allows for extending systems of components safely without editing the previously existing systems. The goal is to have a way for systems that expect to transform data from one set of components (inputs) to another (output[s]) be able to declare that explicit transform, and they exclusively know about one set of inputs. If there are other inputs that want to write to the same output, the query shouldn't match because it's a nonsensical/unhandled setup. It's both a way to guard against nonsensical components (having two systems write to the same output value), and a way to \"turn off\" existing systems/queries by putting a component with the same write lock on an entity, letting another system handle it. Inheritance Object Attribute WriteGroupAttribute Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [AttributeUsage(AttributeTargets.Struct, AllowMultiple = true)] public class WriteGroupAttribute : Attribute, _Attribute Constructors | Improve this Doc WriteGroupAttribute(Type) Declaration public WriteGroupAttribute(Type targetType) Parameters Type Name Description Type targetType Fields | Improve this Doc TargetType Declaration public Type TargetType Field Value Type Description Type"
  },
  "api/Unity.Entities.WorldSystemFilterFlags.html": {
    "href": "api/Unity.Entities.WorldSystemFilterFlags.html",
    "title": "Enum WorldSystemFilterFlags | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Enum WorldSystemFilterFlags For internal use only. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Flags] public enum WorldSystemFilterFlags Remarks Defines where internal Unity systems should be created. The existence of these flags and the specialized Worlds they represent are subject to change. Fields Name Description Default The default World . EntitySceneOptimizations A specialized World created for optimizing scene rendering. GameObjectConversion A specialized World created for converting GameObjects to entities."
  },
  "api/Unity.Entities.WorldSystemFilterAttribute.html": {
    "href": "api/Unity.Entities.WorldSystemFilterAttribute.html",
    "title": "Class WorldSystemFilterAttribute | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class WorldSystemFilterAttribute For internal use only. Inheritance Object Attribute WorldSystemFilterAttribute Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [AttributeUsage(AttributeTargets.Class)] public sealed class WorldSystemFilterAttribute : Attribute, _Attribute Remarks Defines where internal Unity systems should be created. The existence of these Worlds is subject to change. Constructors | Improve this Doc WorldSystemFilterAttribute(WorldSystemFilterFlags) For internal use only. Declaration public WorldSystemFilterAttribute(WorldSystemFilterFlags flags) Parameters Type Name Description WorldSystemFilterFlags flags Defines where internal Unity systems should be created. Fields | Improve this Doc FilterFlags The World the system belongs in. Declaration public WorldSystemFilterFlags FilterFlags Field Value Type Description WorldSystemFilterFlags"
  },
  "api/Unity.Entities.WorldFlags.html": {
    "href": "api/Unity.Entities.WorldFlags.html",
    "title": "Enum WorldFlags | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Enum WorldFlags Specify all traits a World can have. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Flags] public enum WorldFlags : byte Fields Name Description Conversion World on which conversion systems run to transform authoring data to runtime data. Editor Main Live World running in the Editor. Game Main Live World running in the Player. Live The main World for a game/application. This flag is combined with Editor , Game and Simulation . None Default WorldFlags value. Shadow World representing a previous state of another World typically to compute a diff of runtime data - for example useful for undo/redo or Live Link. Simulation Any additional Live World running in the application for background processes that queue up data for other Live World (ie. physics, AI simulation, networking, etc.). Staging World in which temporary results are staged before being moved into a Live World . Typically combined with Conversion to represent an intermediate step in the full conversion process. Streaming Dedicated World for managing incoming streamed data to the Player."
  },
  "api/Unity.Entities.UniversalDelegates.VVVVVII-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVVII-7.html",
    "title": "Delegate VVVVVII<T0, T1, T2, T3, T4, T5, T6> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VVVVVII<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVVII<T0, T1, T2, T3, T4, T5, T6>(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, in T5 t5, in T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVVI-6.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVVI-6.html",
    "title": "Delegate VVVVVI<T0, T1, T2, T3, T4, T5> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VVVVVI<T0, T1, T2, T3, T4, T5> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVVI<T0, T1, T2, T3, T4, T5>(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, in T5 t5); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 Type Parameters Name Description T0 T1 T2 T3 T4 T5"
  },
  "api/Unity.Transforms.Frozen.html": {
    "href": "api/Unity.Transforms.Frozen.html",
    "title": "Struct Frozen | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct Frozen Frozen is added by system when Static is resolved. Signals that LocalToWorld will no longer be updated. Read-only from other systems. User responsible for removing. Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct Frozen : IComponentData"
  },
  "api/Unity.Transforms.EndFrameWorldToLocalSystem.html": {
    "href": "api/Unity.Transforms.EndFrameWorldToLocalSystem.html",
    "title": "Class EndFrameWorldToLocalSystem | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class EndFrameWorldToLocalSystem Inheritance Object ComponentSystemBase JobComponentSystem WorldToLocalSystem EndFrameWorldToLocalSystem Inherited Members WorldToLocalSystem.OnCreate() WorldToLocalSystem.OnUpdate(JobHandle) JobComponentSystem.Entities JobComponentSystem.Job JobComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnDestroyManager() ComponentSystemBase.OnCreateManager() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetArchetypeChunkComponentType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkComponentTypeDynamic(ComponentType) ComponentSystemBase.GetArchetypeChunkBufferType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkSharedComponentType<T>() ComponentSystemBase.GetArchetypeChunkEntityType() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [UpdateInGroup(typeof(TransformSystemGroup))] [UpdateAfter(typeof(EndFrameTRSToLocalToWorldSystem))] [UpdateAfter(typeof(EndFrameLocalToParentSystem))] public class EndFrameWorldToLocalSystem : WorldToLocalSystem Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Transforms.EndFrameTRSToLocalToWorldSystem.html": {
    "href": "api/Unity.Transforms.EndFrameTRSToLocalToWorldSystem.html",
    "title": "Class EndFrameTRSToLocalToWorldSystem | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class EndFrameTRSToLocalToWorldSystem Inheritance Object ComponentSystemBase JobComponentSystem TRSToLocalToWorldSystem EndFrameTRSToLocalToWorldSystem Inherited Members TRSToLocalToWorldSystem.OnCreate() TRSToLocalToWorldSystem.OnUpdate(JobHandle) JobComponentSystem.Entities JobComponentSystem.Job JobComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnDestroyManager() ComponentSystemBase.OnCreateManager() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetArchetypeChunkComponentType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkComponentTypeDynamic(ComponentType) ComponentSystemBase.GetArchetypeChunkBufferType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkSharedComponentType<T>() ComponentSystemBase.GetArchetypeChunkEntityType() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [UpdateInGroup(typeof(TransformSystemGroup))] [UpdateAfter(typeof(EndFrameCompositeRotationSystem))] [UpdateAfter(typeof(EndFrameCompositeScaleSystem))] [UpdateBefore(typeof(EndFrameLocalToParentSystem))] public class EndFrameTRSToLocalToWorldSystem : TRSToLocalToWorldSystem Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Entities.ISystemStateSharedComponentData.html": {
    "href": "api/Unity.Entities.ISystemStateSharedComponentData.html",
    "title": "Interface ISystemStateSharedComponentData | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Interface ISystemStateSharedComponentData An interface for a component type that stores shared system-specific data. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface ISystemStateSharedComponentData : ISharedComponentData See Also ISystemStateComponentData ISharedComponentData"
  },
  "api/Unity.Entities.ISystemStateComponentData.html": {
    "href": "api/Unity.Entities.ISystemStateComponentData.html",
    "title": "Interface ISystemStateComponentData | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Interface ISystemStateComponentData An interface for a component type that stores system-specific data. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface ISystemStateComponentData : IComponentData Remarks ISystemStateComponentData implementations are subject to the same constraints as IComponentData : they can only contain blittable data types. System state components are specialized components designed to allow systems to store their own stateful data on an entity. The functional difference between a general-purpose component and a system state component is that the presence of a system state component delays entity destruction until the system explicitly removes the component. This delay allows a system to cleanup any state or persistent resources it has created and associated with an entity. The typical pattern for using a system state component is for the system to find new entities by querying for entities with specific archetype, that do not have the component. The system can add a system state component to the entity and then set state values or create resources for the new entity. A system can then detect entity destruction by querying for entities that have the system state component, but not the other components in the original archetype. The system must then cleanup any state or resources and then remove the system state component. The ECS code only fully deletes the entity after the system removes the system state component. See System State Components for additional information."
  },
  "api/Unity.Transforms.CopyInitialTransformFromGameObjectSystem.html": {
    "href": "api/Unity.Transforms.CopyInitialTransformFromGameObjectSystem.html",
    "title": "Class CopyInitialTransformFromGameObjectSystem | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class CopyInitialTransformFromGameObjectSystem Inheritance Object ComponentSystemBase JobComponentSystem CopyInitialTransformFromGameObjectSystem Inherited Members JobComponentSystem.Entities JobComponentSystem.Job JobComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnDestroyManager() ComponentSystemBase.OnCreateManager() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetArchetypeChunkComponentType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkComponentTypeDynamic(ComponentType) ComponentSystemBase.GetArchetypeChunkBufferType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkSharedComponentType<T>() ComponentSystemBase.GetArchetypeChunkEntityType() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [UpdateInGroup(typeof(InitializationSystemGroup))] public class CopyInitialTransformFromGameObjectSystem : JobComponentSystem Methods | Improve this Doc OnCreate() Declaration protected override void OnCreate() Overrides ComponentSystemBase.OnCreate() | Improve this Doc OnUpdate(JobHandle) Declaration protected override JobHandle OnUpdate(JobHandle inputDeps) Parameters Type Name Description JobHandle inputDeps Returns Type Description JobHandle Overrides JobComponentSystem.OnUpdate(JobHandle) Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Transforms.CopyInitialTransformFromGameObjectProxy.html": {
    "href": "api/Unity.Transforms.CopyInitialTransformFromGameObjectProxy.html",
    "title": "Class CopyInitialTransformFromGameObjectProxy | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class CopyInitialTransformFromGameObjectProxy Inheritance Object ComponentDataProxyBase ComponentDataProxy < CopyInitialTransformFromGameObject > CopyInitialTransformFromGameObjectProxy Inherited Members ComponentDataProxy<CopyInitialTransformFromGameObject>.ValidateSerializedData(CopyInitialTransformFromGameObject) ComponentDataProxy<CopyInitialTransformFromGameObject>.Value ComponentDataProxyBase.OnEnable() ComponentDataProxyBase.OnDisable() Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class CopyInitialTransformFromGameObjectProxy : ComponentDataProxy<CopyInitialTransformFromGameObject>, ISerializationCallbackReceiver"
  },
  "api/Unity.Transforms.CopyInitialTransformFromGameObject.html": {
    "href": "api/Unity.Transforms.CopyInitialTransformFromGameObject.html",
    "title": "Struct CopyInitialTransformFromGameObject | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct CopyInitialTransformFromGameObject Copy Transform from GameObject associated with Entity to TransformMatrix. Once only. Component is removed after copy. Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct CopyInitialTransformFromGameObject : IComponentData"
  },
  "api/Unity.Transforms.CompositeScaleSystem.html": {
    "href": "api/Unity.Transforms.CompositeScaleSystem.html",
    "title": "Class CompositeScaleSystem | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class CompositeScaleSystem Inheritance Object ComponentSystemBase JobComponentSystem CompositeScaleSystem EndFrameCompositeScaleSystem Inherited Members JobComponentSystem.Entities JobComponentSystem.Job JobComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnDestroyManager() ComponentSystemBase.OnCreateManager() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetArchetypeChunkComponentType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkComponentTypeDynamic(ComponentType) ComponentSystemBase.GetArchetypeChunkBufferType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkSharedComponentType<T>() ComponentSystemBase.GetArchetypeChunkEntityType() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public abstract class CompositeScaleSystem : JobComponentSystem Methods | Improve this Doc OnCreate() Declaration protected override void OnCreate() Overrides ComponentSystemBase.OnCreate() | Improve this Doc OnUpdate(JobHandle) Declaration protected override JobHandle OnUpdate(JobHandle inputDeps) Parameters Type Name Description JobHandle inputDeps Returns Type Description JobHandle Overrides JobComponentSystem.OnUpdate(JobHandle) Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Mathematics.GeneratePoints.html": {
    "href": "api/Unity.Mathematics.GeneratePoints.html",
    "title": "Struct GeneratePoints | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct GeneratePoints Namespace : Unity.Mathematics <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct GeneratePoints Methods | Improve this Doc RandomPointsInSphere(float3, Single, NativeArray<float3>) Declaration public static void RandomPointsInSphere(float3 center, float radius, NativeArray<float3> points) Parameters Type Name Description float3 center Single radius NativeArray < float3 > points | Improve this Doc RandomPointsInSphere(float3, Single, NativeArray<float3>, JobHandle) Declaration public static JobHandle RandomPointsInSphere(float3 center, float radius, NativeArray<float3> points, JobHandle inputDeps) Parameters Type Name Description float3 center Single radius NativeArray < float3 > points JobHandle inputDeps Returns Type Description JobHandle | Improve this Doc RandomPointsInUnitSphere(NativeArray<float3>) Declaration public static void RandomPointsInUnitSphere(NativeArray<float3> points) Parameters Type Name Description NativeArray < float3 > points | Improve this Doc RandomPositionInsideUnitSphere(UInt32) Declaration public static float3 RandomPositionInsideUnitSphere(uint seed) Parameters Type Name Description UInt32 seed Returns Type Description float3"
  },
  "api/Unity.Mathematics.AABBExtensions.html": {
    "href": "api/Unity.Mathematics.AABBExtensions.html",
    "title": "Class AABBExtensions | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class AABBExtensions Inheritance Object AABBExtensions Namespace : Unity.Mathematics <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class AABBExtensions Methods | Improve this Doc ToAABB(Bounds) Declaration public static AABB ToAABB(this Bounds bounds) Parameters Type Name Description Bounds bounds Returns Type Description AABB | Improve this Doc ToBounds(AABB) Declaration public static Bounds ToBounds(this AABB aabb) Parameters Type Name Description AABB aabb Returns Type Description Bounds"
  },
  "api/Unity.Mathematics.AABB.html": {
    "href": "api/Unity.Mathematics.AABB.html",
    "title": "Struct AABB | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct AABB Namespace : Unity.Mathematics <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] public struct AABB Fields | Improve this Doc Center Declaration public float3 Center Field Value Type Description float3 | Improve this Doc Extents Declaration public float3 Extents Field Value Type Description float3 Properties | Improve this Doc Max Declaration public float3 Max { get; } Property Value Type Description float3 | Improve this Doc Min Declaration public float3 Min { get; } Property Value Type Description float3 | Improve this Doc Size Declaration public float3 Size { get; } Property Value Type Description float3 Methods | Improve this Doc Contains(float3) Declaration public bool Contains(float3 point) Parameters Type Name Description float3 point Returns Type Description Boolean | Improve this Doc Contains(AABB) Declaration public bool Contains(AABB b) Parameters Type Name Description AABB b Returns Type Description Boolean | Improve this Doc DistanceSq(float3) Declaration public float DistanceSq(float3 point) Parameters Type Name Description float3 point Returns Type Description Single | Improve this Doc ToString() Returns a string representation of the AABB. Declaration public override string ToString() Returns Type Description String Overrides ValueType.ToString() | Improve this Doc Transform(float4x4, AABB) Declaration public static AABB Transform(float4x4 transform, AABB localBounds) Parameters Type Name Description float4x4 transform AABB localBounds Returns Type Description AABB Extension Methods AABBExtensions.ToBounds(AABB)"
  },
  "api/Unity.Entities.html": {
    "href": "api/Unity.Entities.html",
    "title": "Namespace Unity.Entities | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Namespace Unity.Entities Classes AlwaysSynchronizeSystemAttribute AlwaysSynchronizeSystem can be applied to a JobComponentSystem to force it to synchronize on all of its dependencies before every update. This attribute should only be applied when a synchronization point is necessary every frame. AlwaysUpdateSystemAttribute BeginInitializationEntityCommandBufferSystem BeginPresentationEntityCommandBufferSystem BeginSimulationEntityCommandBufferSystem BlobAssetSerializeExtensions Extensions for supporting serialization and deserialization of blob assets. BlobAssetStore Purpose of this class is to provide a consistent cache of BlobAsset object in order to avoid rebuilding them when it is not necessary BlobStringExtensions Extensions that allow the creation of BlobString instances by a BlobBuilder . ChangedFilterAttribute ChangeVersionUtility ChunkSerializableAttribute States that a component type is serializable. ComponentDataProxy<T> ComponentDataProxyBase ComponentSystem An abstract class to implement in order to create a system. ComponentSystemBase A system provides behavior in an ECS architecture. ComponentSystemBaseManagedComponentExtensions ComponentSystemGroup ComponentSystemSorter ComponentSystemSorter.CircularSystemDependencyException ConverterVersionAttribute By declaring a version number a ComponentSystem can ensure that any cached data by the asset pipeline was prepared using the active code. If the version number of any conversion system or optimization system changes or a new conversion system is added, then the scene will be re-converted. ConvertToEntity ConvertToEntitySystem DefaultWorldInitialization DisableAutoCreationAttribute Prevents a system from being automatically created and run. DisableAutoTypeRegistration [DisableAutoTypeRegistration] prevents a Component Type from being registered in the TypeManager during TypeManager.Initialize(). Types that are not registered will not be recognized by EntityManager. DisallowRefReturnCrossingThisAttribute What is this : Attribute signaling that ref returned values, of a type that has this attribute, cannot intersect with calls to methods that also have this attribute. Motivation(s): ref returns of values that are backed by native memory (unsafe), like IComponentData in ecs chunks, can have the referenced memory invalidated by certain methods. A way is needed to detect these situations a compilation time to prevent accessing invalidated references. Notes: This attribute is used/feeds a Static Analyzer at compilation time. Attribute transfers with aggragations: struct A has this attribute, struct B has a field of type A; both A and B are concidered to have the attribute. DynamicBufferProxy<T> EndInitializationEntityCommandBufferSystem EndSimulationEntityCommandBufferSystem EntityCommandBufferManagedComponentExtensions EntityCommandBufferSystem A system that provides EntityCommandBuffer objects for other systems. EntityContainerPropertyBag EntityManager The EntityManager manages entities and components in a World. EntityManager.EntityManagerDebug Provides information and utility functions for debugging. EntityManagerExtensions EntityManagerManagedComponentExtensions EntityPatcher EntityQuery Use an EntityQuery object to select entities with components that meet specific requirements. EntityQueryDesc Describes a query used to find archetypes with specific components. EntityQueryDescValidationException EntityQueryExtensionsForComponentArray EntityQueryExtensionsForTransformAccessArray EntityQueryManagedComponentExtensions EntityRemapUtility ExcludeComponentAttribute FastEquality FixedRateUtils ForEachLambdaJobDescription_SetSharedComponent GameObjectConversionSettings GameObjectConversionUtility GameObjectEntity GenerateAuthoringComponentAttribute InitializationSystemGroup InternalBufferCapacityAttribute Specifies the maximum number of elements to store inside a chunk. InternalCompilerInterface JobChunkExtensions Extensions for scheduling and running IJobChunk Jobs. JobComponentSystem An abstract class to implement in order to create a system that uses ECS-specific Jobs. JobForEachExtensions LambdaJobChunkDescription_SetSharedComponent LambdaJobChunkDescriptionConstructionMethods LambdaJobDescriptionConstructionMethods LambdaJobDescriptionExecutionMethods LambdaJobDescriptionExecutionMethodsJCS LambdaJobQueryConstructionMethods LambdaSingleJobDescriptionConstructionMethods LambdaSingleJobDescriptionExecutionMethods LambdaSingleJobDescriptionExecutionMethodsJCS LateSimulationSystemGroup LayerFieldAttribute Attribute used to make an int field display as a layer selector drop-down. MaximumChunkCapacityAttribute Specifies the maximum number of components of a type that can be stored in the same chunk. MayOnlyLiveInBlobStorageAttribute Use this attribute if you have structs that use offset pointers that are only valid when they live inside the blob storage. It will turn ensure a compiler error is generated for every time a reference to the struct is copied, or a field is read from a reference to the struct this attribute is applied on. PresentationSystemGroup ReferencedUnityObjects RegisterGenericComponentTypeAttribute RequireComponentTagAttribute RequiresEntityConversionAttribute RestrictAuthoringInputToAttribute SceneViewWorldPositionAttribute ScriptBehaviourUpdateOrder SharedComponentDataProxy<T> SimulationSystemGroup StaticOptimizeEntity SystemBase Implement SystemBase to create a systems in ECS. TypeHash TypeManager TypeManager.ForcedMemoryOrderingAttribute TypeManager.TypeVersionAttribute UpdateAfterAttribute UpdateBeforeAttribute UpdateInGroupAttribute UpdateWorldTimeSystem World WorldSystemFilterAttribute For internal use only. WriteGroupAttribute [WriteGroup] Can exclude components which are unknown at the time of creating the query that have been declared to write to the same component. This allows for extending systems of components safely without editing the previously existing systems. The goal is to have a way for systems that expect to transform data from one set of components (inputs) to another (output[s]) be able to declare that explicit transform, and they exclusively know about one set of inputs. If there are other inputs that want to write to the same output, the query shouldn't match because it's a nonsensical/unhandled setup. It's both a way to guard against nonsensical components (having two systems write to the same output value), and a way to \"turn off\" existing systems/queries by putting a component with the same write lock on an entity, letting another system handle it. Structs ArchetypeChunk A block of unmanaged memory containing the components for entities sharing the same Unity.Entities.Archetype . ArchetypeChunkArray ArchetypeChunkBufferType<T> ArchetypeChunkComponentObjects<T> ArchetypeChunkComponentType<T> ArchetypeChunkComponentTypeDynamic ArchetypeChunkEntityType ArchetypeChunkIterator Can be passed into IJobChunk.RunWithoutJobs to iterate over an entity query without running any jobs. ArchetypeChunkSharedComponentType<T> Asset Marks the entity as an asset, which is used for the Export phase of GameObject conversion. BlobArray<T> An immutable array of value types stored in a blob asset. BlobAssetChange Header for a changed blob asset. BlobAssetComputationContext<TS, TB> The BlobAssetComputationContext must be used during Authoring to ECS conversion process to detect which BlobAsset should be computed and to declare their association with a UnityObject BlobAssetReference<T> A reference to a blob asset stored in unmanaged memory. BlobAssetReferenceChange Represents a blob asset reference that was changed within a EntityChangeSet BlobBuilder Creates blob assets. BlobBuilderArray<T> Used by the BlobBuilder methods to reference the arrays within a blob asset. BlobPtr<T> A pointer referencing a struct, array, or field inside a blob asset. BlobString An immutable, variable-length string stored in a blob asset. BufferAccessor<T> BufferFromEntity<T> ChunkEntitiesDescription ChunkHeader ComponentDataFromEntity<T> A [NativeContainer] that provides access to all instances of components of type T, indexed by Entity . ComponentSystemSorter.TypeHeapElement ComponentType ComponentTypeHash ComponentTypes ComponentTypes.Masks Disabled Disables the entity. DynamicBuffer<T> An array-like data structure that can be used as a component. DynamicBufferContainer<T> EditorRenderData Entity Identifies an entity. EntityArchetype An EntityArchetype is a unique combination of component types. The EntityManager uses the archetype to group all entities that have the same sets of components. EntityChanges EntityChangeSet An atomic package of changes to entity and component data. EntityCommandBuffer A thread-safe command buffer that can buffer commands that affect entities and components for later playback. EntityCommandBuffer.Concurrent Allows concurrent (deterministic) command buffer recording. EntityContainer EntityGuid This component is attached to converted Entities and is guaranteed to be unique within a World. It can be used to map back to the authoring GameObject from which it was converted. Note that an EntityGuid does not have enough information to be persistent across sessions. EntityInChunk EntityManagerDiffer The EntityManagerDiffer is used to efficiently track changes to a given world over time. EntityQueryBuilder EntityQueryMask A EntityQueryMask provides a fast check of whether an entity would be selected by an entity query. EntityReferenceChange Represents an entity reference that was changed within a EntityChangeSet This structure references the entity by it's unique EntityGuid . EntityRemapUtility.BufferEntityPatchInfo EntityRemapUtility.EntityPatchInfo EntityRemapUtility.EntityRemapInfo EntityRemapUtility.ManagedEntityPatchInfo ExcludeComponent<T> ExclusiveEntityTransaction FastEquality.Layout FastEquality.TypeInfo Hash128 LayoutUtility Low-level utility functions for AOS->SOA (scatter) and SOA->AOS (gather) conversions. LayoutUtilityManaged LinkedEntityGroup The LinkedEntityGroup buffer makes the entity be the root of a set of connected entities. LinkedEntityGroupChange MemsetNativeArray<T> Assign Value to each element of NativeArray NativeArraySharedValues<S> Merge sort index list referencing NativeArray values. Provide list of shared values, indices to shared values, and lists of source i value indices with identical shared value. As an example: Given Source NativeArray: [A,A,A,B,B,C,C,A,B] Provides: Shared value indices: [0,0,0,1,1,2,2,0,1] Shared value counts: [4,3,2] (number of occurrences of a shared value) Shared values: [A,B,C] (not stored in this structure) Sorted indices: [0,1,2,7,3,4,8,5,6] (using these indices to look up values in the source array would give you [A,A,A,A,B,B,B,C,C]) Shared value start offsets (into sorted indices): [0,4,7] PackedComponent Represents a packed component within an EntityChangeSet PackedComponentDataChange Represents a packed component data change within a EntityChangeSet PackedManagedComponentDataChange PackedSharedComponentDataChange Prefab Marks the entity as a prefab, which implicitly disables the entity. RequestSceneLoaded SceneBoundingVolume SceneReference SceneSection SceneSectionData SceneTag A Unity-defined shared component assigned to all entities in the same subscene. SOAFieldInfo TypeManager.EntityOffsetInfo TypeManager.TypeInfo TypeManager.TypeInfoDebug World.NoAllocReadOnlyCollection<T> Read only collection that doesn't generate garbage when used in a foreach. Interfaces IBufferElementData An interface for creating structs that can be stored in a DynamicBuffer<T> . IComponentData An interface for implementing general-purpose components. IConvertGameObjectToEntity ICustomBootstrap When entering playmode or the game starts in the Player a default world is created. Sometimes you need multiple worlds to be setup when the game starts or perform some custom world initialization. This lets you override the bootstrap of game code world creation. IDeclareReferencedPrefabs IDynamicBufferContainer IJobChunk IJobChunk is a type of Job that iterates over a set of ArchetypeChunk instances. IJobForEach<T0> IJobForEachWithEntity<T0> IRefCounted ISharedComponentData An interface for a component type whose value is shared by all entities in the same chunk. ISystemStateBufferElementData An interface for a component type that stores system-specific data in a buffer. ISystemStateComponentData An interface for a component type that stores system-specific data. ISystemStateSharedComponentData An interface for a component type that stores shared system-specific data. JobForEachExtensions.IBaseJobForEach Enums ComponentType.AccessMode ComponentTypeFlags ConvertToEntity.Mode EntityManagerDifferOptions Parameters used to configure the the execution of the differ. EntityQueryOptions The bit flags to use for the Options field. GameObjectConversionUtility.ConversionFlags PlaybackPolicy Specifies if the EntityCommandBuffer can be played a single time or multiple times. SceneLoadFlags TypeManager.TypeCategory WorldFlags Specify all traits a World can have. WorldSystemFilterFlags For internal use only. Delegates FastEquality.TypeInfo.CompareEqualDelegate FastEquality.TypeInfo.GetHashCodeDelegate FastEquality.TypeInfo.ManagedCompareEqualDelegate FastEquality.TypeInfo.ManagedGetHashCodeDelegate InternalCompilerInterface.JobChunkRunWithoutJobSystemDelegate InternalCompilerInterface.JobRunWithoutJobSystemDelegate LambdaJobChunkDescriptionConstructionMethods.JobChunkDelegate LambdaSingleJobDescriptionConstructionMethods.WithCodeAction"
  },
  "api/Unity.Entities.SharedComponentDataProxy-1.html": {
    "href": "api/Unity.Entities.SharedComponentDataProxy-1.html",
    "title": "Class SharedComponentDataProxy<T> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class SharedComponentDataProxy<T> Inheritance Object ComponentDataProxyBase SharedComponentDataProxy<T> Inherited Members ComponentDataProxyBase.OnEnable() ComponentDataProxyBase.OnDisable() Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public abstract class SharedComponentDataProxy<T> : ComponentDataProxyBase, ISerializationCallbackReceiver where T : struct, ISharedComponentData Type Parameters Name Description T Properties | Improve this Doc Value Declaration public T Value { get; set; } Property Value Type Description T Methods | Improve this Doc ValidateSerializedData(ref T) Declaration protected virtual void ValidateSerializedData(ref T serializedData) Parameters Type Name Description T serializedData"
  },
  "api/Unity.Entities.Serialization.html": {
    "href": "api/Unity.Entities.Serialization.html",
    "title": "Namespace Unity.Entities.Serialization | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Namespace Unity.Entities.Serialization Classes BinaryPrimitiveReaderAdapter BinaryPrimitiveWriterAdapter BinaryReaderExtensions BinaryWriterExtensions MemoryBinaryReader MemoryBinaryWriter SerializeUtility SerializeUtilityHybrid StreamBinaryReader StreamBinaryWriter Interfaces BinaryReader BinaryWriter"
  },
  "api/Unity.Entities.Serialization.StreamBinaryWriter.html": {
    "href": "api/Unity.Entities.Serialization.StreamBinaryWriter.html",
    "title": "Class StreamBinaryWriter | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class StreamBinaryWriter Inheritance Object StreamBinaryWriter Namespace : Unity.Entities.Serialization <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class StreamBinaryWriter : BinaryWriter, IDisposable Constructors | Improve this Doc StreamBinaryWriter(String, Int32) Declaration public StreamBinaryWriter(string fileName, int bufferSize = 65536) Parameters Type Name Description String fileName Int32 bufferSize Properties | Improve this Doc Length Declaration public long Length { get; } Property Value Type Description Int64 Methods | Improve this Doc Dispose() Declaration public void Dispose() | Improve this Doc WriteBytes(Void*, Int32) Declaration public void WriteBytes(void *data, int bytes) Parameters Type Name Description Void * data Int32 bytes Implements BinaryWriter.WriteBytes(Void*, Int32) Extension Methods BlobAssetSerializeExtensions.Write<T>(BinaryWriter, BlobAssetReference<T>) BinaryWriterExtensions.Write(BinaryWriter, Byte) BinaryWriterExtensions.Write(BinaryWriter, Int32) BinaryWriterExtensions.Write(BinaryWriter, UInt64) BinaryWriterExtensions.Write(BinaryWriter, Byte[]) BinaryWriterExtensions.WriteArray<T>(BinaryWriter, NativeArray<T>) BinaryWriterExtensions.WriteList<T>(BinaryWriter, NativeList<T>)"
  },
  "api/Unity.Entities.Serialization.StreamBinaryReader.html": {
    "href": "api/Unity.Entities.Serialization.StreamBinaryReader.html",
    "title": "Class StreamBinaryReader | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class StreamBinaryReader Inheritance Object StreamBinaryReader Namespace : Unity.Entities.Serialization <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class StreamBinaryReader : BinaryReader, IDisposable Constructors | Improve this Doc StreamBinaryReader(String, Int32) Declaration public StreamBinaryReader(string fileName, int bufferSize = 65536) Parameters Type Name Description String fileName Int32 bufferSize Methods | Improve this Doc Dispose() Declaration public void Dispose() | Improve this Doc ReadBytes(Void*, Int32) Declaration public void ReadBytes(void *data, int bytes) Parameters Type Name Description Void * data Int32 bytes Implements BinaryReader.ReadBytes(Void*, Int32) Extension Methods BlobAssetSerializeExtensions.Read<T>(BinaryReader) BinaryReaderExtensions.ReadByte(BinaryReader) BinaryReaderExtensions.ReadInt(BinaryReader) BinaryReaderExtensions.ReadULong(BinaryReader) BinaryReaderExtensions.ReadBytes(BinaryReader, NativeArray<Byte>, Int32, Int32) BinaryReaderExtensions.ReadArray<T>(BinaryReader, NativeArray<T>, Int32)"
  },
  "api/Unity.Entities.SceneTag.html": {
    "href": "api/Unity.Entities.SceneTag.html",
    "title": "Struct SceneTag | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct SceneTag A Unity-defined shared component assigned to all entities in the same subscene. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] public struct SceneTag : ISharedComponentData, IEquatable<SceneTag> Fields | Improve this Doc SceneEntity The root entity of the subscene. Declaration public Entity SceneEntity Field Value Type Description Entity Methods | Improve this Doc Equals(SceneTag) Two SceneTags are equal if they have the same root subscene entity. Declaration public bool Equals(SceneTag other) Parameters Type Name Description SceneTag other The other SceneTag. Returns Type Description Boolean True if both SceneTags refer to the same Subscene. False, otherwise. | Improve this Doc GetHashCode() A unique hash code for comparison. Declaration public override int GetHashCode() Returns Type Description Int32 The scene entity has code. Overrides ValueType.GetHashCode() | Improve this Doc ToString() A string for logging. Declaration public override string ToString() Returns Type Description String A string identifying the root subscene entity. Overrides ValueType.ToString()"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVRI-6.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVRI-6.html",
    "title": "Delegate VVVVRI<T0, T1, T2, T3, T4, T5> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VVVVRI<T0, T1, T2, T3, T4, T5> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVRI<T0, T1, T2, T3, T4, T5>(T0 t0, T1 t1, T2 t2, T3 t3, ref T4 t4, in T5 t5); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 Type Parameters Name Description T0 T1 T2 T3 T4 T5"
  },
  "api/Unity.Entities.SOAFieldInfo.html": {
    "href": "api/Unity.Entities.SOAFieldInfo.html",
    "title": "Struct SOAFieldInfo | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct SOAFieldInfo Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct SOAFieldInfo Fields | Improve this Doc Offset Declaration public ushort Offset Field Value Type Description UInt16 | Improve this Doc Size Declaration public ushort Size Field Value Type Description UInt16"
  },
  "api/Unity.Entities.RestrictAuthoringInputToAttribute.html": {
    "href": "api/Unity.Entities.RestrictAuthoringInputToAttribute.html",
    "title": "Class RestrictAuthoringInputToAttribute | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class RestrictAuthoringInputToAttribute Inheritance Object RestrictAuthoringInputToAttribute Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [AttributeUsage(AttributeTargets.Field)] public class RestrictAuthoringInputToAttribute : PropertyAttribute Constructors | Improve this Doc RestrictAuthoringInputToAttribute(Type) Declaration public RestrictAuthoringInputToAttribute(Type type) Parameters Type Name Description Type type Properties | Improve this Doc Type Declaration public Type Type { get; } Property Value Type Description Type"
  },
  "api/Unity.Entities.LinkedEntityGroupChange.html": {
    "href": "api/Unity.Entities.LinkedEntityGroupChange.html",
    "title": "Struct LinkedEntityGroupChange | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct LinkedEntityGroupChange Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct LinkedEntityGroupChange Fields | Improve this Doc ChildEntityGuid Declaration public EntityGuid ChildEntityGuid Field Value Type Description EntityGuid | Improve this Doc RootEntityGuid Declaration public EntityGuid RootEntityGuid Field Value Type Description EntityGuid"
  },
  "api/Unity.Entities.LinkedEntityGroup.html": {
    "href": "api/Unity.Entities.LinkedEntityGroup.html",
    "title": "Struct LinkedEntityGroup | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct LinkedEntityGroup The LinkedEntityGroup buffer makes the entity be the root of a set of connected entities. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct LinkedEntityGroup : IBufferElementData Remarks Referenced Prefabs automatically add a LinkedEntityGroup with the complete child hierarchy. EntityManager.Instantiate uses LinkedEntityGroup to instantiate the whole set of entities automatically. EntityManager.SetEnabled uses LinkedEntityGroup to enable the whole set of entities. Fields | Improve this Doc Value A child entity. Declaration public Entity Value Field Value Type Description Entity Operators | Improve this Doc Implicit(Entity to LinkedEntityGroup) Provides implicit conversion of an Entity to a LinkedEntityGroup element. Declaration public static implicit operator LinkedEntityGroup(Entity e) Parameters Type Name Description Entity e The entity to convert Returns Type Description LinkedEntityGroup A new buffer element."
  },
  "api/Unity.Entities.LayoutUtilityManaged.html": {
    "href": "api/Unity.Entities.LayoutUtilityManaged.html",
    "title": "Struct LayoutUtilityManaged | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct LayoutUtilityManaged Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct LayoutUtilityManaged Methods | Improve this Doc CreateDescriptor(Type, Allocator) Declaration public static NativeArray<SOAFieldInfo> CreateDescriptor(Type type, Allocator allocator) Parameters Type Name Description Type type Allocator allocator Returns Type Description NativeArray < SOAFieldInfo >"
  },
  "api/Unity.Entities.LayoutUtility.html": {
    "href": "api/Unity.Entities.LayoutUtility.html",
    "title": "Struct LayoutUtility | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct LayoutUtility Low-level utility functions for AOS->SOA (scatter) and SOA->AOS (gather) conversions. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct LayoutUtility Methods | Improve this Doc GatherChunkedSOA8(NativeArray<SOAFieldInfo>, Int32, Byte*, Void*, Int32) Declaration public static void GatherChunkedSOA8(NativeArray<SOAFieldInfo> fields, int fieldSizeSum, byte *sourceBaseAddress, void *target, int sourceIndex) Parameters Type Name Description NativeArray < SOAFieldInfo > fields Int32 fieldSizeSum Byte * sourceBaseAddress Void * target Int32 sourceIndex | Improve this Doc GatherFullSOA(NativeArray<SOAFieldInfo>, Byte*, Void*, Int32, Int32) Gather AOS data from fully parallel arrays of fields. Declaration public static void GatherFullSOA(NativeArray<SOAFieldInfo> fields, byte *sourceBaseAddress, void *target, int sourceIndex, int sourceArraySize) Parameters Type Name Description NativeArray < SOAFieldInfo > fields Struct type descriptor Byte * sourceBaseAddress Pointer to first byte of source SOA array Void * target Pointer to target AOS struct instance to be gathered into Int32 sourceIndex The index of the SOA element to be gathered Int32 sourceArraySize The number of elements in the SOA data | Improve this Doc ScatterChunkedSOA8(NativeArray<SOAFieldInfo>, Int32, Byte*, Void*, Int32) Declaration public static void ScatterChunkedSOA8(NativeArray<SOAFieldInfo> fields, int fieldSizeSum, byte *targetBaseAddress, void *source, int targetIndex) Parameters Type Name Description NativeArray < SOAFieldInfo > fields Int32 fieldSizeSum Byte * targetBaseAddress Void * source Int32 targetIndex | Improve this Doc ScatterFullSOA(NativeArray<SOAFieldInfo>, Byte*, Void*, Int32, Int32) Declaration public static void ScatterFullSOA(NativeArray<SOAFieldInfo> fields, byte *targetBaseAddress, void *source, int targetIndex, int targetArraySize) Parameters Type Name Description NativeArray < SOAFieldInfo > fields Byte * targetBaseAddress Void * source Int32 targetIndex Int32 targetArraySize"
  },
  "api/Unity.Entities.LambdaJobChunkDescriptionConstructionMethods.JobChunkDelegate.html": {
    "href": "api/Unity.Entities.LambdaJobChunkDescriptionConstructionMethods.JobChunkDelegate.html",
    "title": "Delegate LambdaJobChunkDescriptionConstructionMethods.JobChunkDelegate | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate LambdaJobChunkDescriptionConstructionMethods.JobChunkDelegate Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void JobChunkDelegate(ArchetypeChunk chunk, int chunkIndex, int queryIndexOfFirstEntityInChunk); Parameters Type Name Description ArchetypeChunk chunk Int32 chunkIndex Int32 queryIndexOfFirstEntityInChunk"
  },
  "api/Unity.Entities.JobForEachExtensions.html": {
    "href": "api/Unity.Entities.JobForEachExtensions.html",
    "title": "Class JobForEachExtensions | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class JobForEachExtensions Inheritance Object JobForEachExtensions Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class JobForEachExtensions Methods | Improve this Doc CalculateEntityCount<T>(T, ComponentSystemBase) Declaration public static int CalculateEntityCount<T>(this T jobData, ComponentSystemBase system) where T : struct, JobForEachExtensions.IBaseJobForEach Parameters Type Name Description T jobData ComponentSystemBase system Returns Type Description Int32 Type Parameters Name Description T | Improve this Doc GetEntityQueryForIJobForEach(ComponentSystemBase, Type) Declaration public static EntityQuery GetEntityQueryForIJobForEach(this ComponentSystemBase system, Type jobType) Parameters Type Name Description ComponentSystemBase system Type jobType Returns Type Description EntityQuery | Improve this Doc PrepareEntityQuery<T>(T, ComponentSystemBase) Declaration public static void PrepareEntityQuery<T>(this T jobData, ComponentSystemBase system) where T : struct, JobForEachExtensions.IBaseJobForEach Parameters Type Name Description T jobData ComponentSystemBase system Type Parameters Name Description T | Improve this Doc Run<T>(T, ComponentSystemBase, JobHandle) Declaration public static JobHandle Run<T>(this T jobData, ComponentSystemBase system, JobHandle dependsOn = null) where T : struct, JobForEachExtensions.IBaseJobForEach Parameters Type Name Description T jobData ComponentSystemBase system JobHandle dependsOn Returns Type Description JobHandle Type Parameters Name Description T | Improve this Doc Run<T>(T, EntityQuery, JobHandle) Declaration public static JobHandle Run<T>(this T jobData, EntityQuery query, JobHandle dependsOn = null) where T : struct, JobForEachExtensions.IBaseJobForEach Parameters Type Name Description T jobData EntityQuery query JobHandle dependsOn Returns Type Description JobHandle Type Parameters Name Description T | Improve this Doc Schedule<T>(T, ComponentSystemBase, JobHandle) Declaration public static JobHandle Schedule<T>(this T jobData, ComponentSystemBase system, JobHandle dependsOn = null) where T : struct, JobForEachExtensions.IBaseJobForEach Parameters Type Name Description T jobData ComponentSystemBase system JobHandle dependsOn Returns Type Description JobHandle Type Parameters Name Description T | Improve this Doc Schedule<T>(T, EntityQuery, JobHandle) Declaration public static JobHandle Schedule<T>(this T jobData, EntityQuery query, JobHandle dependsOn = null) where T : struct, JobForEachExtensions.IBaseJobForEach Parameters Type Name Description T jobData EntityQuery query JobHandle dependsOn Returns Type Description JobHandle Type Parameters Name Description T | Improve this Doc ScheduleSingle<T>(T, ComponentSystemBase, JobHandle) Declaration public static JobHandle ScheduleSingle<T>(this T jobData, ComponentSystemBase system, JobHandle dependsOn = null) where T : struct, JobForEachExtensions.IBaseJobForEach Parameters Type Name Description T jobData ComponentSystemBase system JobHandle dependsOn Returns Type Description JobHandle Type Parameters Name Description T | Improve this Doc ScheduleSingle<T>(T, EntityQuery, JobHandle) Declaration public static JobHandle ScheduleSingle<T>(this T jobData, EntityQuery query, JobHandle dependsOn = null) where T : struct, JobForEachExtensions.IBaseJobForEach Parameters Type Name Description T jobData EntityQuery query JobHandle dependsOn Returns Type Description JobHandle Type Parameters Name Description T"
  },
  "api/Unity.Entities.JobForEachExtensions.IBaseJobForEach.html": {
    "href": "api/Unity.Entities.JobForEachExtensions.IBaseJobForEach.html",
    "title": "Interface JobForEachExtensions.IBaseJobForEach | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Interface JobForEachExtensions.IBaseJobForEach Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface IBaseJobForEach"
  },
  "api/Unity.Entities.JobComponentSystem.html": {
    "href": "api/Unity.Entities.JobComponentSystem.html",
    "title": "Class JobComponentSystem | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class JobComponentSystem An abstract class to implement in order to create a system that uses ECS-specific Jobs. Inheritance Object ComponentSystemBase JobComponentSystem CompositeRotationSystem CompositeScaleSystem CopyInitialTransformFromGameObjectSystem CopyTransformFromGameObjectSystem CopyTransformToGameObjectSystem LocalToParentSystem ParentScaleInverseSystem ParentSystem PostRotationEulerSystem RotationEulerSystem TRSToLocalToParentSystem TRSToLocalToWorldSystem WorldToLocalSystem Inherited Members ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnCreate() ComponentSystemBase.OnDestroyManager() ComponentSystemBase.OnCreateManager() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetArchetypeChunkComponentType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkComponentTypeDynamic(ComponentType) ComponentSystemBase.GetArchetypeChunkBufferType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkSharedComponentType<T>() ComponentSystemBase.GetArchetypeChunkEntityType() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public abstract class JobComponentSystem : ComponentSystemBase Remarks Implement a JobComponentSystem subclass for systems that perform their work using IJobForEach<T0> or IJobChunk . Properties | Improve this Doc Entities Use Entities.ForEach((ref Translation translation, in Velocity velocity) => { translation.Value += velocity.Value * dt; }).Schedule(inputDependencies); Declaration protected ForEachLambdaJobDescriptionJCS Entities { get; } Property Value Type Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescriptionJCS | Improve this Doc Job Use Job.WithCode(() => { YourCodeGoesHere(); }).Schedule(inputDependencies); Declaration protected LambdaSingleJobDescriptionJCS Job { get; } Property Value Type Description Unity.Entities.CodeGeneratedJobForEach.LambdaSingleJobDescriptionJCS Methods | Improve this Doc OnUpdate(JobHandle) Implement OnUpdate to perform the major work of this system. Declaration protected abstract JobHandle OnUpdate(JobHandle inputDeps) Parameters Type Name Description JobHandle inputDeps Existing dependencies for this system. Returns Type Description JobHandle A Job handle that contains the dependencies of the Jobs in this system. Remarks The system invokes OnUpdate once per frame on the main thread when any of this system's EntityQueries match existing entities, or if the system has the AlwaysUpdate attribute. To run a Job, create an instance of the Job struct, assign appropriate values to the struct fields and call one of the Job schedule functions. The system passes any current dependencies between Jobs -- which can include Jobs internal to this system, such as gathering entities or chunks, as well as Jobs external to this system, such as Jobs that write to the components read by this system -- in the inputDeps parameter. Your function must combine the input dependencies with any dependencies of the Jobs created in OnUpdate and return the combined object. | Improve this Doc Update() Declaration public override sealed void Update() Overrides ComponentSystemBase.Update() Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type) See Also ComponentSystem"
  },
  "api/Unity.Entities.IL2CPPProcessing.ComponentSystemProcessing.html": {
    "href": "api/Unity.Entities.IL2CPPProcessing.ComponentSystemProcessing.html",
    "title": "Class ComponentSystemProcessing | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class ComponentSystemProcessing Inheritance Object ComponentSystemProcessing Namespace : Unity.Entities.IL2CPPProcessing <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class ComponentSystemProcessing : IUnityLinkerProcessor Properties | Improve this Doc callbackOrder Declaration public int callbackOrder { get; } Property Value Type Description Int32 Methods | Improve this Doc GenerateAdditionalLinkXmlFile(BuildReport, UnityLinkerBuildPipelineData) Declaration public string GenerateAdditionalLinkXmlFile(BuildReport report, UnityLinkerBuildPipelineData data) Parameters Type Name Description BuildReport report UnityLinkerBuildPipelineData data Returns Type Description String | Improve this Doc OnAfterRun(BuildReport, UnityLinkerBuildPipelineData) Declaration public void OnAfterRun(BuildReport report, UnityLinkerBuildPipelineData data) Parameters Type Name Description BuildReport report UnityLinkerBuildPipelineData data | Improve this Doc OnBeforeRun(BuildReport, UnityLinkerBuildPipelineData) Declaration public void OnBeforeRun(BuildReport report, UnityLinkerBuildPipelineData data) Parameters Type Name Description BuildReport report UnityLinkerBuildPipelineData data"
  },
  "api/Unity.Entities.IJobForEachWithEntity-1.html": {
    "href": "api/Unity.Entities.IJobForEachWithEntity-1.html",
    "title": "Interface IJobForEachWithEntity<T0> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Interface IJobForEachWithEntity<T0> Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface IJobForEachWithEntity<T0> : IJobForEachWithEntity_EC<T0>, JobForEachExtensions.IBaseJobForEach_EC, JobForEachExtensions.IBaseJobForEach where T0 : struct, IComponentData Type Parameters Name Description T0"
  },
  "api/Unity.Entities.IJobForEach-1.html": {
    "href": "api/Unity.Entities.IJobForEach-1.html",
    "title": "Interface IJobForEach<T0> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Interface IJobForEach<T0> Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface IJobForEach<T0> : IJobForEach_C<T0>, JobForEachExtensions.IBaseJobForEach_C, JobForEachExtensions.IBaseJobForEach where T0 : struct, IComponentData Type Parameters Name Description T0"
  },
  "api/Unity.Entities.EntityQueryOptions.html": {
    "href": "api/Unity.Entities.EntityQueryOptions.html",
    "title": "Enum EntityQueryOptions | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Enum EntityQueryOptions The bit flags to use for the Options field. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Flags] public enum EntityQueryOptions Fields Name Description Default No options specified. FilterWriteGroup The query filters selected entities based on the WriteGroupAttribute settings of the components specified in the query description. IncludeDisabled The query does not exclude the special Disabled component. IncludePrefab The query does not exclude the special Prefab component."
  },
  "api/Unity.Entities.EntityManagerDiffer.html": {
    "href": "api/Unity.Entities.EntityManagerDiffer.html",
    "title": "Struct EntityManagerDiffer | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct EntityManagerDiffer The EntityManagerDiffer is used to efficiently track changes to a given world over time. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct EntityManagerDiffer : IDisposable Constructors | Improve this Doc EntityManagerDiffer(EntityManager, Allocator, EntityQueryDesc) Declaration public EntityManagerDiffer(EntityManager sourceEntityManager, Allocator allocator, EntityQueryDesc entityQueryDesc = null) Parameters Type Name Description EntityManager sourceEntityManager Allocator allocator EntityQueryDesc entityQueryDesc Methods | Improve this Doc Dispose() Declaration public void Dispose() | Improve this Doc GetChanges(EntityManagerDifferOptions, Allocator) Generates a detailed change set for the world. All entities to be considered for diffing must have the EntityGuid component with a unique value. Declaration public EntityChanges GetChanges(EntityManagerDifferOptions options, Allocator allocator) Parameters Type Name Description EntityManagerDifferOptions options A set of options which can be toggled. Allocator allocator The allocator to use for the results object. Returns Type Description EntityChanges A set of changes for the world since the last fast-forward. Remarks The resulting EntityChanges must be disposed when no longer needed."
  },
  "api/Unity.Entities.ChunkEntitiesDescription.html": {
    "href": "api/Unity.Entities.ChunkEntitiesDescription.html",
    "title": "Struct ChunkEntitiesDescription | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct ChunkEntitiesDescription Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct ChunkEntitiesDescription : ISupportForEachWithUniversalDelegate Extension Methods LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0>(TDescription, Unity.Entities.UniversalDelegates.R<T0>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0>(TDescription, Unity.Entities.UniversalDelegates.I<T0>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0>(TDescription, Unity.Entities.UniversalDelegates.V<T0>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1>(TDescription, Unity.Entities.UniversalDelegates.RI<T0, T1>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1>(TDescription, Unity.Entities.UniversalDelegates.RR<T0, T1>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1>(TDescription, Unity.Entities.UniversalDelegates.II<T0, T1>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1>(TDescription, Unity.Entities.UniversalDelegates.VI<T0, T1>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1>(TDescription, Unity.Entities.UniversalDelegates.VR<T0, T1>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1>(TDescription, Unity.Entities.UniversalDelegates.VV<T0, T1>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2>(TDescription, Unity.Entities.UniversalDelegates.RII<T0, T1, T2>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2>(TDescription, Unity.Entities.UniversalDelegates.RRI<T0, T1, T2>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2>(TDescription, Unity.Entities.UniversalDelegates.RRR<T0, T1, T2>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2>(TDescription, Unity.Entities.UniversalDelegates.III<T0, T1, T2>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2>(TDescription, Unity.Entities.UniversalDelegates.VII<T0, T1, T2>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2>(TDescription, Unity.Entities.UniversalDelegates.VRI<T0, T1, T2>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2>(TDescription, Unity.Entities.UniversalDelegates.VRR<T0, T1, T2>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2>(TDescription, Unity.Entities.UniversalDelegates.VVI<T0, T1, T2>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2>(TDescription, Unity.Entities.UniversalDelegates.VVR<T0, T1, T2>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2>(TDescription, Unity.Entities.UniversalDelegates.VVV<T0, T1, T2>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3>(TDescription, Unity.Entities.UniversalDelegates.RIII<T0, T1, T2, T3>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3>(TDescription, Unity.Entities.UniversalDelegates.RRII<T0, T1, T2, T3>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3>(TDescription, Unity.Entities.UniversalDelegates.RRRI<T0, T1, T2, T3>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3>(TDescription, Unity.Entities.UniversalDelegates.RRRR<T0, T1, T2, T3>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3>(TDescription, Unity.Entities.UniversalDelegates.IIII<T0, T1, T2, T3>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3>(TDescription, Unity.Entities.UniversalDelegates.VIII<T0, T1, T2, T3>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3>(TDescription, Unity.Entities.UniversalDelegates.VRII<T0, T1, T2, T3>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3>(TDescription, Unity.Entities.UniversalDelegates.VRRI<T0, T1, T2, T3>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3>(TDescription, Unity.Entities.UniversalDelegates.VRRR<T0, T1, T2, T3>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3>(TDescription, Unity.Entities.UniversalDelegates.VVII<T0, T1, T2, T3>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3>(TDescription, Unity.Entities.UniversalDelegates.VVRI<T0, T1, T2, T3>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3>(TDescription, Unity.Entities.UniversalDelegates.VVRR<T0, T1, T2, T3>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3>(TDescription, Unity.Entities.UniversalDelegates.VVVI<T0, T1, T2, T3>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3>(TDescription, Unity.Entities.UniversalDelegates.VVVR<T0, T1, T2, T3>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3>(TDescription, Unity.Entities.UniversalDelegates.VVVV<T0, T1, T2, T3>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, Unity.Entities.UniversalDelegates.RIIII<T0, T1, T2, T3, T4>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, Unity.Entities.UniversalDelegates.RRIII<T0, T1, T2, T3, T4>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, Unity.Entities.UniversalDelegates.RRRII<T0, T1, T2, T3, T4>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, Unity.Entities.UniversalDelegates.RRRRI<T0, T1, T2, T3, T4>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, Unity.Entities.UniversalDelegates.RRRRR<T0, T1, T2, T3, T4>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, Unity.Entities.UniversalDelegates.IIIII<T0, T1, T2, T3, T4>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, Unity.Entities.UniversalDelegates.VIIII<T0, T1, T2, T3, T4>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, Unity.Entities.UniversalDelegates.VRIII<T0, T1, T2, T3, T4>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, Unity.Entities.UniversalDelegates.VRRII<T0, T1, T2, T3, T4>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, Unity.Entities.UniversalDelegates.VRRRI<T0, T1, T2, T3, T4>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, Unity.Entities.UniversalDelegates.VRRRR<T0, T1, T2, T3, T4>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, Unity.Entities.UniversalDelegates.VVIII<T0, T1, T2, T3, T4>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, Unity.Entities.UniversalDelegates.VVRII<T0, T1, T2, T3, T4>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, Unity.Entities.UniversalDelegates.VVRRI<T0, T1, T2, T3, T4>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, Unity.Entities.UniversalDelegates.VVRRR<T0, T1, T2, T3, T4>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, Unity.Entities.UniversalDelegates.VVVII<T0, T1, T2, T3, T4>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, Unity.Entities.UniversalDelegates.VVVRI<T0, T1, T2, T3, T4>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, Unity.Entities.UniversalDelegates.VVVRR<T0, T1, T2, T3, T4>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, Unity.Entities.UniversalDelegates.VVVVI<T0, T1, T2, T3, T4>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, Unity.Entities.UniversalDelegates.VVVVR<T0, T1, T2, T3, T4>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, Unity.Entities.UniversalDelegates.VVVVV<T0, T1, T2, T3, T4>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, Unity.Entities.UniversalDelegates.RIIIII<T0, T1, T2, T3, T4, T5>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, Unity.Entities.UniversalDelegates.RRIIII<T0, T1, T2, T3, T4, T5>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, Unity.Entities.UniversalDelegates.RRRIII<T0, T1, T2, T3, T4, T5>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, Unity.Entities.UniversalDelegates.RRRRII<T0, T1, T2, T3, T4, T5>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, Unity.Entities.UniversalDelegates.RRRRRI<T0, T1, T2, T3, T4, T5>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, Unity.Entities.UniversalDelegates.RRRRRR<T0, T1, T2, T3, T4, T5>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, Unity.Entities.UniversalDelegates.IIIIII<T0, T1, T2, T3, T4, T5>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, Unity.Entities.UniversalDelegates.VIIIII<T0, T1, T2, T3, T4, T5>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, Unity.Entities.UniversalDelegates.VRIIII<T0, T1, T2, T3, T4, T5>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, Unity.Entities.UniversalDelegates.VRRIII<T0, T1, T2, T3, T4, T5>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, Unity.Entities.UniversalDelegates.VRRRII<T0, T1, T2, T3, T4, T5>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, Unity.Entities.UniversalDelegates.VRRRRI<T0, T1, T2, T3, T4, T5>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, Unity.Entities.UniversalDelegates.VRRRRR<T0, T1, T2, T3, T4, T5>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, Unity.Entities.UniversalDelegates.VVIIII<T0, T1, T2, T3, T4, T5>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, Unity.Entities.UniversalDelegates.VVRIII<T0, T1, T2, T3, T4, T5>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, Unity.Entities.UniversalDelegates.VVRRII<T0, T1, T2, T3, T4, T5>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, Unity.Entities.UniversalDelegates.VVRRRI<T0, T1, T2, T3, T4, T5>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, Unity.Entities.UniversalDelegates.VVRRRR<T0, T1, T2, T3, T4, T5>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, Unity.Entities.UniversalDelegates.VVVIII<T0, T1, T2, T3, T4, T5>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, Unity.Entities.UniversalDelegates.VVVRII<T0, T1, T2, T3, T4, T5>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, Unity.Entities.UniversalDelegates.VVVRRI<T0, T1, T2, T3, T4, T5>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, Unity.Entities.UniversalDelegates.VVVRRR<T0, T1, T2, T3, T4, T5>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, Unity.Entities.UniversalDelegates.VVVVII<T0, T1, T2, T3, T4, T5>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, Unity.Entities.UniversalDelegates.VVVVRI<T0, T1, T2, T3, T4, T5>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, Unity.Entities.UniversalDelegates.VVVVRR<T0, T1, T2, T3, T4, T5>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, Unity.Entities.UniversalDelegates.VVVVVI<T0, T1, T2, T3, T4, T5>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, Unity.Entities.UniversalDelegates.VVVVVR<T0, T1, T2, T3, T4, T5>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, Unity.Entities.UniversalDelegates.VVVVVV<T0, T1, T2, T3, T4, T5>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, Unity.Entities.UniversalDelegates.RIIIIII<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, Unity.Entities.UniversalDelegates.RRIIIII<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, Unity.Entities.UniversalDelegates.RRRIIII<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, Unity.Entities.UniversalDelegates.RRRRIII<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, Unity.Entities.UniversalDelegates.RRRRRII<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, Unity.Entities.UniversalDelegates.RRRRRRI<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, Unity.Entities.UniversalDelegates.RRRRRRR<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, Unity.Entities.UniversalDelegates.IIIIIII<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, Unity.Entities.UniversalDelegates.VIIIIII<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, Unity.Entities.UniversalDelegates.VRIIIII<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, Unity.Entities.UniversalDelegates.VRRIIII<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, Unity.Entities.UniversalDelegates.VRRRIII<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, Unity.Entities.UniversalDelegates.VRRRRII<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, Unity.Entities.UniversalDelegates.VRRRRRI<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, Unity.Entities.UniversalDelegates.VRRRRRR<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, Unity.Entities.UniversalDelegates.VVIIIII<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, Unity.Entities.UniversalDelegates.VVRIIII<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, Unity.Entities.UniversalDelegates.VVRRIII<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, Unity.Entities.UniversalDelegates.VVRRRII<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, Unity.Entities.UniversalDelegates.VVRRRRI<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, Unity.Entities.UniversalDelegates.VVRRRRR<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, Unity.Entities.UniversalDelegates.VVVIIII<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, Unity.Entities.UniversalDelegates.VVVRIII<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, Unity.Entities.UniversalDelegates.VVVRRII<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, Unity.Entities.UniversalDelegates.VVVRRRI<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, Unity.Entities.UniversalDelegates.VVVRRRR<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, Unity.Entities.UniversalDelegates.VVVVIII<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, Unity.Entities.UniversalDelegates.VVVVRII<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, Unity.Entities.UniversalDelegates.VVVVRRI<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, Unity.Entities.UniversalDelegates.VVVVRRR<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, Unity.Entities.UniversalDelegates.VVVVVII<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, Unity.Entities.UniversalDelegates.VVVVVRI<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, Unity.Entities.UniversalDelegates.VVVVVRR<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, Unity.Entities.UniversalDelegates.VVVVVVI<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, Unity.Entities.UniversalDelegates.VVVVVVR<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, Unity.Entities.UniversalDelegates.VVVVVVV<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.RIIIIIII<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.RRIIIIII<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.RRRIIIII<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.RRRRIIII<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.RRRRRIII<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.RRRRRRII<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.RRRRRRRI<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.RRRRRRRR<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.IIIIIIII<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.VIIIIIII<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.VRIIIIII<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.VRRIIIII<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.VRRRIIII<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.VRRRRIII<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.VRRRRRII<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.VRRRRRRI<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.VRRRRRRR<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.VVIIIIII<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.VVRIIIII<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.VVRRIIII<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.VVRRRIII<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.VVRRRRII<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.VVRRRRRI<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.VVRRRRRR<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.VVVIIIII<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.VVVRIIII<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.VVVRRIII<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.VVVRRRII<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.VVVRRRRI<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.VVVRRRRR<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.VVVVIIII<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.VVVVRIII<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.VVVVRRII<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.VVVVRRRI<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.VVVVRRRR<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.VVVVVIII<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.VVVVVRII<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.VVVVVRRI<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.VVVVVRRR<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.VVVVVVII<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.VVVVVVRI<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.VVVVVVRR<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.VVVVVVVI<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.VVVVVVVR<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.VVVVVVVV<T0, T1, T2, T3, T4, T5, T6, T7>) ForEachLambdaJobDescription_SetSharedComponent.SetSharedComponentFilterOnQuery<TDescription, T>(TDescription, T, EntityQuery)"
  },
  "api/Unity.Entities.ChangedFilterAttribute.html": {
    "href": "api/Unity.Entities.ChangedFilterAttribute.html",
    "title": "Class ChangedFilterAttribute | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class ChangedFilterAttribute Inheritance Object Attribute ChangedFilterAttribute Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [AttributeUsage(AttributeTargets.Parameter)] public class ChangedFilterAttribute : Attribute, _Attribute"
  },
  "api/Unity.Entities.BlobArray-1.html": {
    "href": "api/Unity.Entities.BlobArray-1.html",
    "title": "Struct BlobArray<T> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct BlobArray<T> An immutable array of value types stored in a blob asset. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct BlobArray<T> where T : struct Type Parameters Name Description T The data type of the elements in the array. Must be a struct or other value type. Remarks When creating a blob asset, use the BlobBuilderArray<T> provided by a BlobBuilder instance to set the array elements. Properties | Improve this Doc Item[Int32] The element of the array at the index position. Declaration public T this[int index] { get; } Parameters Type Name Description Int32 index The array index. Property Value Type Description T Remarks The array element is a reference return . Exceptions Type Condition IndexOutOfRangeException Thrown if index is out of bounds. | Improve this Doc Length The number of elements in the array. Declaration public int Length { get; } Property Value Type Description Int32 Methods | Improve this Doc GetUnsafePtr() Provides an unsafe pointer to the array data. Declaration public void *GetUnsafePtr() Returns Type Description Void * An unsafe pointer. Remarks You can only use unsafe pointers in contexts. | Improve this Doc ToArray() Declaration public T[] ToArray() Returns Type Description T[] See Also BlobBuilder"
  },
  "api/Unity.Core.html": {
    "href": "api/Unity.Core.html",
    "title": "Namespace Unity.Core | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Namespace Unity.Core Classes XXHash XXHash implementation. Structs TimeData"
  },
  "api/Unity.Transforms.EndFrameRotationEulerSystem.html": {
    "href": "api/Unity.Transforms.EndFrameRotationEulerSystem.html",
    "title": "Class EndFrameRotationEulerSystem | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class EndFrameRotationEulerSystem Inheritance Object ComponentSystemBase JobComponentSystem RotationEulerSystem EndFrameRotationEulerSystem Inherited Members RotationEulerSystem.OnCreate() RotationEulerSystem.OnUpdate(JobHandle) JobComponentSystem.Entities JobComponentSystem.Job JobComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnDestroyManager() ComponentSystemBase.OnCreateManager() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetArchetypeChunkComponentType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkComponentTypeDynamic(ComponentType) ComponentSystemBase.GetArchetypeChunkBufferType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkSharedComponentType<T>() ComponentSystemBase.GetArchetypeChunkEntityType() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [UpdateInGroup(typeof(TransformSystemGroup))] public class EndFrameRotationEulerSystem : RotationEulerSystem Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Transforms.CompositeScale.html": {
    "href": "api/Unity.Transforms.CompositeScale.html",
    "title": "Struct CompositeScale | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct CompositeScale Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] [WriteGroup(typeof(LocalToWorld))] [WriteGroup(typeof(LocalToParent))] [WriteGroup(typeof(ParentScaleInverse))] public struct CompositeScale : IComponentData Fields | Improve this Doc Value Declaration public float4x4 Value Field Value Type Description float4x4"
  },
  "api/Unity.Transforms.CompositeRotationSystem.html": {
    "href": "api/Unity.Transforms.CompositeRotationSystem.html",
    "title": "Class CompositeRotationSystem | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class CompositeRotationSystem Inheritance Object ComponentSystemBase JobComponentSystem CompositeRotationSystem EndFrameCompositeRotationSystem Inherited Members JobComponentSystem.Entities JobComponentSystem.Job JobComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnDestroyManager() ComponentSystemBase.OnCreateManager() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetArchetypeChunkComponentType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkComponentTypeDynamic(ComponentType) ComponentSystemBase.GetArchetypeChunkBufferType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkSharedComponentType<T>() ComponentSystemBase.GetArchetypeChunkEntityType() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public abstract class CompositeRotationSystem : JobComponentSystem Methods | Improve this Doc OnCreate() Declaration protected override void OnCreate() Overrides ComponentSystemBase.OnCreate() | Improve this Doc OnUpdate(JobHandle) Declaration protected override JobHandle OnUpdate(JobHandle inputDeps) Parameters Type Name Description JobHandle inputDeps Returns Type Description JobHandle Overrides JobComponentSystem.OnUpdate(JobHandle) Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Transforms.CompositeRotation.html": {
    "href": "api/Unity.Transforms.CompositeRotation.html",
    "title": "Struct CompositeRotation | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct CompositeRotation Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] [WriteGroup(typeof(LocalToWorld))] [WriteGroup(typeof(LocalToParent))] public struct CompositeRotation : IComponentData Fields | Improve this Doc Value Declaration public float4x4 Value Field Value Type Description float4x4"
  },
  "api/Unity.Transforms.Child.html": {
    "href": "api/Unity.Transforms.Child.html",
    "title": "Struct Child | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct Child Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] [InternalBufferCapacity(8)] [WriteGroup(typeof(ParentScaleInverse))] public struct Child : ISystemStateBufferElementData, IBufferElementData Fields | Improve this Doc Value Declaration public Entity Value Field Value Type Description Entity"
  },
  "api/Unity.Transforms.BoneIndexOffset.html": {
    "href": "api/Unity.Transforms.BoneIndexOffset.html",
    "title": "Struct BoneIndexOffset | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct BoneIndexOffset Holds the index offset at which the skin matrices of this entity are stored in the buffer containing all skin matrices. Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct BoneIndexOffset : IComponentData Fields | Improve this Doc Value Declaration public float Value Field Value Type Description Single"
  },
  "api/Unity.Scenes.html": {
    "href": "api/Unity.Scenes.html",
    "title": "Namespace Unity.Scenes | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Namespace Unity.Scenes Classes SceneBundleHandle SceneSystem SceneSystemGroup SubScene Structs SceneSystem.LoadParameters Parameters for loading scenes. Enums LiveLinkMode SceneSystem.UnloadParameters Flags controlling the unload process for SubScenes."
  },
  "api/Unity.Scenes.SubScene.html": {
    "href": "api/Unity.Scenes.SubScene.html",
    "title": "Class SubScene | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class SubScene Inheritance Object SubScene Namespace : Unity.Scenes <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class SubScene : MonoBehaviour Fields | Improve this Doc AutoLoadScene Declaration public bool AutoLoadScene Field Value Type Description Boolean Properties | Improve this Doc SceneGUID Declaration public Hash128 SceneGUID { get; } Property Value Type Description Hash128"
  },
  "api/Unity.Scenes.SceneSystemGroup.html": {
    "href": "api/Unity.Scenes.SceneSystemGroup.html",
    "title": "Class SceneSystemGroup | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class SceneSystemGroup Inheritance Object ComponentSystemBase ComponentSystem ComponentSystemGroup SceneSystemGroup Inherited Members ComponentSystemGroup.m_systemsToUpdate ComponentSystemGroup.m_systemsToRemove ComponentSystemGroup.Systems ComponentSystemGroup.AddSystemToUpdateList(ComponentSystemBase) ComponentSystemGroup.RemoveSystemFromUpdateList(ComponentSystemBase) ComponentSystemGroup.SortSystemUpdateList() ComponentSystemGroup.OnStopRunning() ComponentSystemGroup.UpdateCallback ComponentSystemGroup.OnUpdate() ComponentSystem.PostUpdateCommands ComponentSystem.InitEntityQueryCache(Int32) ComponentSystem.Entities ComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnCreate() ComponentSystemBase.OnDestroyManager() ComponentSystemBase.OnCreateManager() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetArchetypeChunkComponentType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkComponentTypeDynamic(ComponentType) ComponentSystemBase.GetArchetypeChunkBufferType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkSharedComponentType<T>() ComponentSystemBase.GetArchetypeChunkEntityType() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Scenes <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [UpdateInGroup(typeof(InitializationSystemGroup))] public class SceneSystemGroup : ComponentSystemGroup Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVVVVR-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVVVVR-8.html",
    "title": "Delegate VVVVVVVR<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VVVVVVVR<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVVVVR<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, T6 t6, ref T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVVVVI-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVVVVI-8.html",
    "title": "Delegate VVVVVVVI<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VVVVVVVI<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVVVVI<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVVVV-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVVVV-7.html",
    "title": "Delegate VVVVVVV<T0, T1, T2, T3, T4, T5, T6> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VVVVVVV<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVVVV<T0, T1, T2, T3, T4, T5, T6>(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVVVRR-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVVVRR-8.html",
    "title": "Delegate VVVVVVRR<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VVVVVVRR<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVVVRR<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, ref T6 t6, ref T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVVVRI-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVVVRI-8.html",
    "title": "Delegate VVVVVVRI<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VVVVVVRI<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVVVRI<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, ref T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVVVR-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVVVR-7.html",
    "title": "Delegate VVVVVVR<T0, T1, T2, T3, T4, T5, T6> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VVVVVVR<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVVVR<T0, T1, T2, T3, T4, T5, T6>(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, ref T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVVVII-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVVVII-8.html",
    "title": "Delegate VVVVVVII<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VVVVVVII<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVVVII<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, in T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVVVI-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVVVI-7.html",
    "title": "Delegate VVVVVVI<T0, T1, T2, T3, T4, T5, T6> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VVVVVVI<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVVVI<T0, T1, T2, T3, T4, T5, T6>(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, in T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVRR-6.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVRR-6.html",
    "title": "Delegate VVVVRR<T0, T1, T2, T3, T4, T5> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VVVVRR<T0, T1, T2, T3, T4, T5> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVRR<T0, T1, T2, T3, T4, T5>(T0 t0, T1 t1, T2 t2, T3 t3, ref T4 t4, ref T5 t5); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 Type Parameters Name Description T0 T1 T2 T3 T4 T5"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVRIII-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVRIII-8.html",
    "title": "Delegate VVVVRIII<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VVVVRIII<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVRIII<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, T1 t1, T2 t2, T3 t3, ref T4 t4, in T5 t5, in T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVRII-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVRII-7.html",
    "title": "Delegate VVVVRII<T0, T1, T2, T3, T4, T5, T6> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VVVVRII<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVRII<T0, T1, T2, T3, T4, T5, T6>(T0 t0, T1 t1, T2 t2, T3 t3, ref T4 t4, in T5 t5, in T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.RIIIIIII-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RIIIIIII-8.html",
    "title": "Delegate RIIIIIII<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate RIIIIIII<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RIIIIIII<T0, T1, T2, T3, T4, T5, T6, T7>(ref T0 t0, in T1 t1, in T2 t2, in T3 t3, in T4 t4, in T5 t5, in T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.RIIIIII-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RIIIIII-7.html",
    "title": "Delegate RIIIIII<T0, T1, T2, T3, T4, T5, T6> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate RIIIIII<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RIIIIII<T0, T1, T2, T3, T4, T5, T6>(ref T0 t0, in T1 t1, in T2 t2, in T3 t3, in T4 t4, in T5 t5, in T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.RIIIII-6.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RIIIII-6.html",
    "title": "Delegate RIIIII<T0, T1, T2, T3, T4, T5> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate RIIIII<T0, T1, T2, T3, T4, T5> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RIIIII<T0, T1, T2, T3, T4, T5>(ref T0 t0, in T1 t1, in T2 t2, in T3 t3, in T4 t4, in T5 t5); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 Type Parameters Name Description T0 T1 T2 T3 T4 T5"
  },
  "api/Unity.Entities.UniversalDelegates.RIIII-5.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RIIII-5.html",
    "title": "Delegate RIIII<T0, T1, T2, T3, T4> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate RIIII<T0, T1, T2, T3, T4> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RIIII<T0, T1, T2, T3, T4>(ref T0 t0, in T1 t1, in T2 t2, in T3 t3, in T4 t4); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 Type Parameters Name Description T0 T1 T2 T3 T4"
  },
  "api/Unity.Entities.UniversalDelegates.RIII-4.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RIII-4.html",
    "title": "Delegate RIII<T0, T1, T2, T3> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate RIII<T0, T1, T2, T3> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RIII<T0, T1, T2, T3>(ref T0 t0, in T1 t1, in T2 t2, in T3 t3); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 Type Parameters Name Description T0 T1 T2 T3"
  },
  "api/Unity.Entities.Serialization.SerializeUtilityHybrid.html": {
    "href": "api/Unity.Entities.Serialization.SerializeUtilityHybrid.html",
    "title": "Class SerializeUtilityHybrid | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class SerializeUtilityHybrid Inheritance Object SerializeUtilityHybrid Namespace : Unity.Entities.Serialization <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class SerializeUtilityHybrid Methods | Improve this Doc Deserialize(EntityManager, BinaryReader, ReferencedUnityObjects) Declaration public static void Deserialize(EntityManager manager, BinaryReader reader, ReferencedUnityObjects objRefs) Parameters Type Name Description EntityManager manager BinaryReader reader ReferencedUnityObjects objRefs | Improve this Doc DeserializeObjectReferences(EntityManager, ReferencedUnityObjects, String, out UnityEngine.Object[]) Declaration public static void DeserializeObjectReferences(EntityManager manager, ReferencedUnityObjects objRefs, string debugSceneName, out UnityEngine.Object[] objectReferences) Parameters Type Name Description EntityManager manager ReferencedUnityObjects objRefs String debugSceneName UnityEngine.Object [] objectReferences | Improve this Doc Serialize(EntityManager, BinaryWriter, out ReferencedUnityObjects) Declaration public static void Serialize(EntityManager manager, BinaryWriter writer, out ReferencedUnityObjects objRefs) Parameters Type Name Description EntityManager manager BinaryWriter writer ReferencedUnityObjects objRefs | Improve this Doc Serialize(EntityManager, BinaryWriter, out ReferencedUnityObjects, NativeArray<EntityRemapUtility.EntityRemapInfo>) Declaration public static void Serialize(EntityManager manager, BinaryWriter writer, out ReferencedUnityObjects objRefs, NativeArray<EntityRemapUtility.EntityRemapInfo> entityRemapInfos) Parameters Type Name Description EntityManager manager BinaryWriter writer ReferencedUnityObjects objRefs NativeArray < EntityRemapUtility.EntityRemapInfo > entityRemapInfos | Improve this Doc SerializeObjectReferences(EntityManager, BinaryWriter, UnityEngine.Object[], out ReferencedUnityObjects) Declaration public static void SerializeObjectReferences(EntityManager manager, BinaryWriter writer, UnityEngine.Object[] referencedObjects, out ReferencedUnityObjects objRefs) Parameters Type Name Description EntityManager manager BinaryWriter writer UnityEngine.Object [] referencedObjects ReferencedUnityObjects objRefs"
  },
  "api/Unity.Entities.Serialization.SerializeUtility.html": {
    "href": "api/Unity.Entities.Serialization.SerializeUtility.html",
    "title": "Class SerializeUtility | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class SerializeUtility Inheritance Object SerializeUtility Namespace : Unity.Entities.Serialization <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class SerializeUtility Fields | Improve this Doc CurrentFileFormatVersion Declaration public static int CurrentFileFormatVersion Field Value Type Description Int32 Methods | Improve this Doc DeserializeWorld(ExclusiveEntityTransaction, BinaryReader, Object[]) Declaration public static void DeserializeWorld(ExclusiveEntityTransaction manager, BinaryReader reader, object[] unityObjects = null) Parameters Type Name Description ExclusiveEntityTransaction manager BinaryReader reader Object [] unityObjects | Improve this Doc SerializeWorld(EntityManager, BinaryWriter) Declaration public static void SerializeWorld(EntityManager entityManager, BinaryWriter writer) Parameters Type Name Description EntityManager entityManager BinaryWriter writer | Improve this Doc SerializeWorld(EntityManager, BinaryWriter, NativeArray<EntityRemapUtility.EntityRemapInfo>) Declaration public static void SerializeWorld(EntityManager entityManager, BinaryWriter writer, NativeArray<EntityRemapUtility.EntityRemapInfo> entityRemapInfos) Parameters Type Name Description EntityManager entityManager BinaryWriter writer NativeArray < EntityRemapUtility.EntityRemapInfo > entityRemapInfos | Improve this Doc SerializeWorld(EntityManager, BinaryWriter, out Object[]) Declaration public static void SerializeWorld(EntityManager entityManager, BinaryWriter writer, out object[] referencedObjects) Parameters Type Name Description EntityManager entityManager BinaryWriter writer Object [] referencedObjects | Improve this Doc SerializeWorld(EntityManager, BinaryWriter, out Object[], NativeArray<EntityRemapUtility.EntityRemapInfo>) Declaration public static void SerializeWorld(EntityManager entityManager, BinaryWriter writer, out object[] referencedObjects, NativeArray<EntityRemapUtility.EntityRemapInfo> entityRemapInfos) Parameters Type Name Description EntityManager entityManager BinaryWriter writer Object [] referencedObjects NativeArray < EntityRemapUtility.EntityRemapInfo > entityRemapInfos"
  },
  "api/Unity.Entities.Serialization.MemoryBinaryWriter.html": {
    "href": "api/Unity.Entities.Serialization.MemoryBinaryWriter.html",
    "title": "Class MemoryBinaryWriter | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class MemoryBinaryWriter Inheritance Object MemoryBinaryWriter Namespace : Unity.Entities.Serialization <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class MemoryBinaryWriter : BinaryWriter, IDisposable Properties | Improve this Doc Data Declaration public byte *Data { get; } Property Value Type Description Byte * | Improve this Doc Length Declaration public int Length { get; } Property Value Type Description Int32 Methods | Improve this Doc Dispose() Declaration public void Dispose() | Improve this Doc WriteBytes(Void*, Int32) Declaration public void WriteBytes(void *data, int bytes) Parameters Type Name Description Void * data Int32 bytes Implements BinaryWriter.WriteBytes(Void*, Int32) Extension Methods BlobAssetSerializeExtensions.Write<T>(BinaryWriter, BlobAssetReference<T>) BinaryWriterExtensions.Write(BinaryWriter, Byte) BinaryWriterExtensions.Write(BinaryWriter, Int32) BinaryWriterExtensions.Write(BinaryWriter, UInt64) BinaryWriterExtensions.Write(BinaryWriter, Byte[]) BinaryWriterExtensions.WriteArray<T>(BinaryWriter, NativeArray<T>) BinaryWriterExtensions.WriteList<T>(BinaryWriter, NativeList<T>)"
  },
  "api/Unity.Entities.Serialization.MemoryBinaryReader.html": {
    "href": "api/Unity.Entities.Serialization.MemoryBinaryReader.html",
    "title": "Class MemoryBinaryReader | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class MemoryBinaryReader Inheritance Object MemoryBinaryReader Namespace : Unity.Entities.Serialization <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class MemoryBinaryReader : BinaryReader, IDisposable Constructors | Improve this Doc MemoryBinaryReader(Byte*) Declaration public MemoryBinaryReader(byte *content) Parameters Type Name Description Byte * content Methods | Improve this Doc Dispose() Declaration public void Dispose() | Improve this Doc ReadBytes(Void*, Int32) Declaration public void ReadBytes(void *data, int bytes) Parameters Type Name Description Void * data Int32 bytes Implements BinaryReader.ReadBytes(Void*, Int32) Extension Methods BlobAssetSerializeExtensions.Read<T>(BinaryReader) BinaryReaderExtensions.ReadByte(BinaryReader) BinaryReaderExtensions.ReadInt(BinaryReader) BinaryReaderExtensions.ReadULong(BinaryReader) BinaryReaderExtensions.ReadBytes(BinaryReader, NativeArray<Byte>, Int32, Int32) BinaryReaderExtensions.ReadArray<T>(BinaryReader, NativeArray<T>, Int32)"
  },
  "api/Unity.Entities.Streaming.html": {
    "href": "api/Unity.Entities.Streaming.html",
    "title": "Namespace Unity.Entities.Streaming | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Namespace Unity.Entities.Streaming Classes EntitySceneOptimization"
  },
  "api/Unity.Entities.Streaming.EntitySceneOptimization.html": {
    "href": "api/Unity.Entities.Streaming.EntitySceneOptimization.html",
    "title": "Class EntitySceneOptimization | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class EntitySceneOptimization Inheritance Object EntitySceneOptimization Namespace : Unity.Entities.Streaming <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class EntitySceneOptimization Methods | Improve this Doc Optimize(World) Declaration public static void Optimize(World world) Parameters Type Name Description World world"
  },
  "api/Unity.Entities.StaticOptimizeEntity.html": {
    "href": "api/Unity.Entities.StaticOptimizeEntity.html",
    "title": "Class StaticOptimizeEntity | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class StaticOptimizeEntity Inheritance Object StaticOptimizeEntity Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class StaticOptimizeEntity : UnityEngine.MonoBehaviour"
  },
  "api/Unity.Entities.SimulationSystemGroup.html": {
    "href": "api/Unity.Entities.SimulationSystemGroup.html",
    "title": "Class SimulationSystemGroup | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class SimulationSystemGroup Inheritance Object ComponentSystemBase ComponentSystem ComponentSystemGroup SimulationSystemGroup Inherited Members ComponentSystemGroup.m_systemsToUpdate ComponentSystemGroup.m_systemsToRemove ComponentSystemGroup.Systems ComponentSystemGroup.AddSystemToUpdateList(ComponentSystemBase) ComponentSystemGroup.RemoveSystemFromUpdateList(ComponentSystemBase) ComponentSystemGroup.OnStopRunning() ComponentSystemGroup.UpdateCallback ComponentSystemGroup.OnUpdate() ComponentSystem.PostUpdateCommands ComponentSystem.InitEntityQueryCache(Int32) ComponentSystem.Entities ComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnCreate() ComponentSystemBase.OnDestroyManager() ComponentSystemBase.OnCreateManager() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetArchetypeChunkComponentType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkComponentTypeDynamic(ComponentType) ComponentSystemBase.GetArchetypeChunkBufferType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkSharedComponentType<T>() ComponentSystemBase.GetArchetypeChunkEntityType() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class SimulationSystemGroup : ComponentSystemGroup Constructors | Improve this Doc SimulationSystemGroup() Declaration public SimulationSystemGroup() Methods | Improve this Doc SortSystemUpdateList() Declaration public override void SortSystemUpdateList() Overrides ComponentSystemGroup.SortSystemUpdateList() Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Entities.Serialization.BinaryPrimitiveWriterAdapter.html": {
    "href": "api/Unity.Entities.Serialization.BinaryPrimitiveWriterAdapter.html",
    "title": "Class BinaryPrimitiveWriterAdapter | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class BinaryPrimitiveWriterAdapter Inheritance Object BinaryPrimitiveWriterAdapter Namespace : Unity.Entities.Serialization <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class BinaryPrimitiveWriterAdapter : IPropertyVisitorAdapter, IVisitAdapterPrimitives, IVisitAdapter<string>, IVisitAdapter Constructors | Improve this Doc BinaryPrimitiveWriterAdapter(UnsafeAppendBuffer*) Declaration public BinaryPrimitiveWriterAdapter(UnsafeAppendBuffer*buffer) Parameters Type Name Description UnsafeAppendBuffer * buffer Properties | Improve this Doc Buffer Declaration public UnsafeAppendBuffer Buffer { get; } Property Value Type Description UnsafeAppendBuffer Methods | Improve this Doc Visit<TProperty, TContainer>(IPropertyVisitor, TProperty, ref TContainer, ref Boolean, ref ChangeTracker) Declaration public VisitStatus Visit<TProperty, TContainer>(IPropertyVisitor visitor, TProperty property, ref TContainer container, ref bool value, ref ChangeTracker changeTracker) where TProperty : IProperty<TContainer, bool> Parameters Type Name Description IPropertyVisitor visitor TProperty property TContainer container Boolean value ChangeTracker changeTracker Returns Type Description VisitStatus Type Parameters Name Description TProperty TContainer | Improve this Doc Visit<TProperty, TContainer>(IPropertyVisitor, TProperty, ref TContainer, ref Byte, ref ChangeTracker) Declaration public VisitStatus Visit<TProperty, TContainer>(IPropertyVisitor visitor, TProperty property, ref TContainer container, ref byte value, ref ChangeTracker changeTracker) where TProperty : IProperty<TContainer, byte> Parameters Type Name Description IPropertyVisitor visitor TProperty property TContainer container Byte value ChangeTracker changeTracker Returns Type Description VisitStatus Type Parameters Name Description TProperty TContainer | Improve this Doc Visit<TProperty, TContainer>(IPropertyVisitor, TProperty, ref TContainer, ref Char, ref ChangeTracker) Declaration public VisitStatus Visit<TProperty, TContainer>(IPropertyVisitor visitor, TProperty property, ref TContainer container, ref char value, ref ChangeTracker changeTracker) where TProperty : IProperty<TContainer, char> Parameters Type Name Description IPropertyVisitor visitor TProperty property TContainer container Char value ChangeTracker changeTracker Returns Type Description VisitStatus Type Parameters Name Description TProperty TContainer | Improve this Doc Visit<TProperty, TContainer>(IPropertyVisitor, TProperty, ref TContainer, ref Double, ref ChangeTracker) Declaration public VisitStatus Visit<TProperty, TContainer>(IPropertyVisitor visitor, TProperty property, ref TContainer container, ref double value, ref ChangeTracker changeTracker) where TProperty : IProperty<TContainer, double> Parameters Type Name Description IPropertyVisitor visitor TProperty property TContainer container Double value ChangeTracker changeTracker Returns Type Description VisitStatus Type Parameters Name Description TProperty TContainer | Improve this Doc Visit<TProperty, TContainer>(IPropertyVisitor, TProperty, ref TContainer, ref Int16, ref ChangeTracker) Declaration public VisitStatus Visit<TProperty, TContainer>(IPropertyVisitor visitor, TProperty property, ref TContainer container, ref short value, ref ChangeTracker changeTracker) where TProperty : IProperty<TContainer, short> Parameters Type Name Description IPropertyVisitor visitor TProperty property TContainer container Int16 value ChangeTracker changeTracker Returns Type Description VisitStatus Type Parameters Name Description TProperty TContainer | Improve this Doc Visit<TProperty, TContainer>(IPropertyVisitor, TProperty, ref TContainer, ref Int32, ref ChangeTracker) Declaration public VisitStatus Visit<TProperty, TContainer>(IPropertyVisitor visitor, TProperty property, ref TContainer container, ref int value, ref ChangeTracker changeTracker) where TProperty : IProperty<TContainer, int> Parameters Type Name Description IPropertyVisitor visitor TProperty property TContainer container Int32 value ChangeTracker changeTracker Returns Type Description VisitStatus Type Parameters Name Description TProperty TContainer | Improve this Doc Visit<TProperty, TContainer>(IPropertyVisitor, TProperty, ref TContainer, ref Int64, ref ChangeTracker) Declaration public VisitStatus Visit<TProperty, TContainer>(IPropertyVisitor visitor, TProperty property, ref TContainer container, ref long value, ref ChangeTracker changeTracker) where TProperty : IProperty<TContainer, long> Parameters Type Name Description IPropertyVisitor visitor TProperty property TContainer container Int64 value ChangeTracker changeTracker Returns Type Description VisitStatus Type Parameters Name Description TProperty TContainer | Improve this Doc Visit<TProperty, TContainer>(IPropertyVisitor, TProperty, ref TContainer, ref SByte, ref ChangeTracker) Declaration public VisitStatus Visit<TProperty, TContainer>(IPropertyVisitor visitor, TProperty property, ref TContainer container, ref sbyte value, ref ChangeTracker changeTracker) where TProperty : IProperty<TContainer, sbyte> Parameters Type Name Description IPropertyVisitor visitor TProperty property TContainer container SByte value ChangeTracker changeTracker Returns Type Description VisitStatus Type Parameters Name Description TProperty TContainer | Improve this Doc Visit<TProperty, TContainer>(IPropertyVisitor, TProperty, ref TContainer, ref Single, ref ChangeTracker) Declaration public VisitStatus Visit<TProperty, TContainer>(IPropertyVisitor visitor, TProperty property, ref TContainer container, ref float value, ref ChangeTracker changeTracker) where TProperty : IProperty<TContainer, float> Parameters Type Name Description IPropertyVisitor visitor TProperty property TContainer container Single value ChangeTracker changeTracker Returns Type Description VisitStatus Type Parameters Name Description TProperty TContainer | Improve this Doc Visit<TProperty, TContainer>(IPropertyVisitor, TProperty, ref TContainer, ref String, ref ChangeTracker) Declaration public VisitStatus Visit<TProperty, TContainer>(IPropertyVisitor visitor, TProperty property, ref TContainer container, ref string value, ref ChangeTracker changeTracker) where TProperty : IProperty<TContainer, string> Parameters Type Name Description IPropertyVisitor visitor TProperty property TContainer container String value ChangeTracker changeTracker Returns Type Description VisitStatus Type Parameters Name Description TProperty TContainer | Improve this Doc Visit<TProperty, TContainer>(IPropertyVisitor, TProperty, ref TContainer, ref UInt16, ref ChangeTracker) Declaration public VisitStatus Visit<TProperty, TContainer>(IPropertyVisitor visitor, TProperty property, ref TContainer container, ref ushort value, ref ChangeTracker changeTracker) where TProperty : IProperty<TContainer, ushort> Parameters Type Name Description IPropertyVisitor visitor TProperty property TContainer container UInt16 value ChangeTracker changeTracker Returns Type Description VisitStatus Type Parameters Name Description TProperty TContainer | Improve this Doc Visit<TProperty, TContainer>(IPropertyVisitor, TProperty, ref TContainer, ref UInt32, ref ChangeTracker) Declaration public VisitStatus Visit<TProperty, TContainer>(IPropertyVisitor visitor, TProperty property, ref TContainer container, ref uint value, ref ChangeTracker changeTracker) where TProperty : IProperty<TContainer, uint> Parameters Type Name Description IPropertyVisitor visitor TProperty property TContainer container UInt32 value ChangeTracker changeTracker Returns Type Description VisitStatus Type Parameters Name Description TProperty TContainer | Improve this Doc Visit<TProperty, TContainer>(IPropertyVisitor, TProperty, ref TContainer, ref UInt64, ref ChangeTracker) Declaration public VisitStatus Visit<TProperty, TContainer>(IPropertyVisitor visitor, TProperty property, ref TContainer container, ref ulong value, ref ChangeTracker changeTracker) where TProperty : IProperty<TContainer, ulong> Parameters Type Name Description IPropertyVisitor visitor TProperty property TContainer container UInt64 value ChangeTracker changeTracker Returns Type Description VisitStatus Type Parameters Name Description TProperty TContainer | Improve this Doc Visit<TProperty, TContainer, TValue>(IPropertyVisitor, TProperty, ref TContainer, ref TValue, ref ChangeTracker) Declaration public VisitStatus Visit<TProperty, TContainer, TValue>(IPropertyVisitor visitor, TProperty property, ref TContainer container, ref TValue value, ref ChangeTracker changeTracker) where TProperty : IProperty<TContainer, TValue> Parameters Type Name Description IPropertyVisitor visitor TProperty property TContainer container TValue value ChangeTracker changeTracker Returns Type Description VisitStatus Type Parameters Name Description TProperty TContainer TValue"
  },
  "api/Unity.Entities.Serialization.BinaryPrimitiveReaderAdapter.html": {
    "href": "api/Unity.Entities.Serialization.BinaryPrimitiveReaderAdapter.html",
    "title": "Class BinaryPrimitiveReaderAdapter | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class BinaryPrimitiveReaderAdapter Inheritance Object BinaryPrimitiveReaderAdapter Namespace : Unity.Entities.Serialization <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class BinaryPrimitiveReaderAdapter : IPropertyVisitorAdapter, IVisitAdapterPrimitives, IVisitAdapter<string>, IVisitAdapter Constructors | Improve this Doc BinaryPrimitiveReaderAdapter(UnsafeAppendBuffer.Reader*) Declaration public BinaryPrimitiveReaderAdapter(UnsafeAppendBuffer.Reader*buffer) Parameters Type Name Description UnsafeAppendBuffer.Reader * buffer Fields | Improve this Doc Buffer Declaration public UnsafeAppendBuffer.Reader*Buffer Field Value Type Description UnsafeAppendBuffer.Reader * Methods | Improve this Doc Visit<TProperty, TContainer>(IPropertyVisitor, TProperty, ref TContainer, ref Boolean, ref ChangeTracker) Declaration public VisitStatus Visit<TProperty, TContainer>(IPropertyVisitor visitor, TProperty property, ref TContainer container, ref bool value, ref ChangeTracker changeTracker) where TProperty : IProperty<TContainer, bool> Parameters Type Name Description IPropertyVisitor visitor TProperty property TContainer container Boolean value ChangeTracker changeTracker Returns Type Description VisitStatus Type Parameters Name Description TProperty TContainer | Improve this Doc Visit<TProperty, TContainer>(IPropertyVisitor, TProperty, ref TContainer, ref Byte, ref ChangeTracker) Declaration public VisitStatus Visit<TProperty, TContainer>(IPropertyVisitor visitor, TProperty property, ref TContainer container, ref byte value, ref ChangeTracker changeTracker) where TProperty : IProperty<TContainer, byte> Parameters Type Name Description IPropertyVisitor visitor TProperty property TContainer container Byte value ChangeTracker changeTracker Returns Type Description VisitStatus Type Parameters Name Description TProperty TContainer | Improve this Doc Visit<TProperty, TContainer>(IPropertyVisitor, TProperty, ref TContainer, ref Char, ref ChangeTracker) Declaration public VisitStatus Visit<TProperty, TContainer>(IPropertyVisitor visitor, TProperty property, ref TContainer container, ref char value, ref ChangeTracker changeTracker) where TProperty : IProperty<TContainer, char> Parameters Type Name Description IPropertyVisitor visitor TProperty property TContainer container Char value ChangeTracker changeTracker Returns Type Description VisitStatus Type Parameters Name Description TProperty TContainer | Improve this Doc Visit<TProperty, TContainer>(IPropertyVisitor, TProperty, ref TContainer, ref Double, ref ChangeTracker) Declaration public VisitStatus Visit<TProperty, TContainer>(IPropertyVisitor visitor, TProperty property, ref TContainer container, ref double value, ref ChangeTracker changeTracker) where TProperty : IProperty<TContainer, double> Parameters Type Name Description IPropertyVisitor visitor TProperty property TContainer container Double value ChangeTracker changeTracker Returns Type Description VisitStatus Type Parameters Name Description TProperty TContainer | Improve this Doc Visit<TProperty, TContainer>(IPropertyVisitor, TProperty, ref TContainer, ref Int16, ref ChangeTracker) Declaration public VisitStatus Visit<TProperty, TContainer>(IPropertyVisitor visitor, TProperty property, ref TContainer container, ref short value, ref ChangeTracker changeTracker) where TProperty : IProperty<TContainer, short> Parameters Type Name Description IPropertyVisitor visitor TProperty property TContainer container Int16 value ChangeTracker changeTracker Returns Type Description VisitStatus Type Parameters Name Description TProperty TContainer | Improve this Doc Visit<TProperty, TContainer>(IPropertyVisitor, TProperty, ref TContainer, ref Int32, ref ChangeTracker) Declaration public VisitStatus Visit<TProperty, TContainer>(IPropertyVisitor visitor, TProperty property, ref TContainer container, ref int value, ref ChangeTracker changeTracker) where TProperty : IProperty<TContainer, int> Parameters Type Name Description IPropertyVisitor visitor TProperty property TContainer container Int32 value ChangeTracker changeTracker Returns Type Description VisitStatus Type Parameters Name Description TProperty TContainer | Improve this Doc Visit<TProperty, TContainer>(IPropertyVisitor, TProperty, ref TContainer, ref Int64, ref ChangeTracker) Declaration public VisitStatus Visit<TProperty, TContainer>(IPropertyVisitor visitor, TProperty property, ref TContainer container, ref long value, ref ChangeTracker changeTracker) where TProperty : IProperty<TContainer, long> Parameters Type Name Description IPropertyVisitor visitor TProperty property TContainer container Int64 value ChangeTracker changeTracker Returns Type Description VisitStatus Type Parameters Name Description TProperty TContainer | Improve this Doc Visit<TProperty, TContainer>(IPropertyVisitor, TProperty, ref TContainer, ref SByte, ref ChangeTracker) Declaration public VisitStatus Visit<TProperty, TContainer>(IPropertyVisitor visitor, TProperty property, ref TContainer container, ref sbyte value, ref ChangeTracker changeTracker) where TProperty : IProperty<TContainer, sbyte> Parameters Type Name Description IPropertyVisitor visitor TProperty property TContainer container SByte value ChangeTracker changeTracker Returns Type Description VisitStatus Type Parameters Name Description TProperty TContainer | Improve this Doc Visit<TProperty, TContainer>(IPropertyVisitor, TProperty, ref TContainer, ref Single, ref ChangeTracker) Declaration public VisitStatus Visit<TProperty, TContainer>(IPropertyVisitor visitor, TProperty property, ref TContainer container, ref float value, ref ChangeTracker changeTracker) where TProperty : IProperty<TContainer, float> Parameters Type Name Description IPropertyVisitor visitor TProperty property TContainer container Single value ChangeTracker changeTracker Returns Type Description VisitStatus Type Parameters Name Description TProperty TContainer | Improve this Doc Visit<TProperty, TContainer>(IPropertyVisitor, TProperty, ref TContainer, ref String, ref ChangeTracker) Declaration public VisitStatus Visit<TProperty, TContainer>(IPropertyVisitor visitor, TProperty property, ref TContainer container, ref string value, ref ChangeTracker changeTracker) where TProperty : IProperty<TContainer, string> Parameters Type Name Description IPropertyVisitor visitor TProperty property TContainer container String value ChangeTracker changeTracker Returns Type Description VisitStatus Type Parameters Name Description TProperty TContainer | Improve this Doc Visit<TProperty, TContainer>(IPropertyVisitor, TProperty, ref TContainer, ref UInt16, ref ChangeTracker) Declaration public VisitStatus Visit<TProperty, TContainer>(IPropertyVisitor visitor, TProperty property, ref TContainer container, ref ushort value, ref ChangeTracker changeTracker) where TProperty : IProperty<TContainer, ushort> Parameters Type Name Description IPropertyVisitor visitor TProperty property TContainer container UInt16 value ChangeTracker changeTracker Returns Type Description VisitStatus Type Parameters Name Description TProperty TContainer | Improve this Doc Visit<TProperty, TContainer>(IPropertyVisitor, TProperty, ref TContainer, ref UInt32, ref ChangeTracker) Declaration public VisitStatus Visit<TProperty, TContainer>(IPropertyVisitor visitor, TProperty property, ref TContainer container, ref uint value, ref ChangeTracker changeTracker) where TProperty : IProperty<TContainer, uint> Parameters Type Name Description IPropertyVisitor visitor TProperty property TContainer container UInt32 value ChangeTracker changeTracker Returns Type Description VisitStatus Type Parameters Name Description TProperty TContainer | Improve this Doc Visit<TProperty, TContainer>(IPropertyVisitor, TProperty, ref TContainer, ref UInt64, ref ChangeTracker) Declaration public VisitStatus Visit<TProperty, TContainer>(IPropertyVisitor visitor, TProperty property, ref TContainer container, ref ulong value, ref ChangeTracker changeTracker) where TProperty : IProperty<TContainer, ulong> Parameters Type Name Description IPropertyVisitor visitor TProperty property TContainer container UInt64 value ChangeTracker changeTracker Returns Type Description VisitStatus Type Parameters Name Description TProperty TContainer | Improve this Doc Visit<TProperty, TContainer, TValue>(IPropertyVisitor, TProperty, ref TContainer, ref TValue, ref ChangeTracker) Declaration public VisitStatus Visit<TProperty, TContainer, TValue>(IPropertyVisitor visitor, TProperty property, ref TContainer container, ref TValue value, ref ChangeTracker changeTracker) where TProperty : IProperty<TContainer, TValue> Parameters Type Name Description IPropertyVisitor visitor TProperty property TContainer container TValue value ChangeTracker changeTracker Returns Type Description VisitStatus Type Parameters Name Description TProperty TContainer TValue"
  },
  "api/Unity.Entities.ScriptBehaviourUpdateOrder.html": {
    "href": "api/Unity.Entities.ScriptBehaviourUpdateOrder.html",
    "title": "Class ScriptBehaviourUpdateOrder | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class ScriptBehaviourUpdateOrder Inheritance Object ScriptBehaviourUpdateOrder Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class ScriptBehaviourUpdateOrder Properties | Improve this Doc CurrentPlayerLoop Declaration public static PlayerLoopSystem CurrentPlayerLoop { get; } Property Value Type Description PlayerLoopSystem Methods | Improve this Doc SetPlayerLoop(PlayerLoopSystem) Declaration public static void SetPlayerLoop(PlayerLoopSystem playerLoop) Parameters Type Name Description PlayerLoopSystem playerLoop | Improve this Doc UpdatePlayerLoop(World, Nullable<PlayerLoopSystem>) Update the player loop with a world's root-level systems Declaration public static void UpdatePlayerLoop(World world, PlayerLoopSystem? existingPlayerLoop = default(PlayerLoopSystem? )) Parameters Type Name Description World world World with root-level systems that need insertion into the player loop Nullable < PlayerLoopSystem > existingPlayerLoop Optional parameter to preserve existing player loops (e.g. ScriptBehaviourUpdateOrder.CurrentPlayerLoop)"
  },
  "api/Unity.Entities.BlobAssetReferenceChange.html": {
    "href": "api/Unity.Entities.BlobAssetReferenceChange.html",
    "title": "Struct BlobAssetReferenceChange | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct BlobAssetReferenceChange Represents a blob asset reference that was changed within a EntityChangeSet Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct BlobAssetReferenceChange Fields | Improve this Doc Component The entity and component this patched is targeted at. Declaration public PackedComponent Component Field Value Type Description PackedComponent | Improve this Doc Offset The field offset for the data. Declaration public int Offset Field Value Type Description Int32 | Improve this Doc Value The blob asset this component should point to in the batch. Declaration public ulong Value Field Value Type Description UInt64"
  },
  "api/Unity.Entities.Asset.html": {
    "href": "api/Unity.Entities.Asset.html",
    "title": "Struct Asset | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct Asset Marks the entity as an asset, which is used for the Export phase of GameObject conversion. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct Asset : IComponentData"
  },
  "api/Unity.Assertions.html": {
    "href": "api/Unity.Assertions.html",
    "title": "Namespace Unity.Assertions | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Namespace Unity.Assertions Classes Assert"
  },
  "api/Unity.Entities.ComponentDataProxy-1.html": {
    "href": "api/Unity.Entities.ComponentDataProxy-1.html",
    "title": "Class ComponentDataProxy<T> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class ComponentDataProxy<T> Inheritance Object ComponentDataProxyBase ComponentDataProxy<T> CopyInitialTransformFromGameObjectProxy CopyTransformFromGameObjectProxy CopyTransformToGameObjectProxy LocalToWorldProxy NonUniformScaleProxy RotationProxy TranslationProxy Inherited Members ComponentDataProxyBase.OnEnable() ComponentDataProxyBase.OnDisable() Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public abstract class ComponentDataProxy<T> : ComponentDataProxyBase, ISerializationCallbackReceiver where T : struct, IComponentData Type Parameters Name Description T Properties | Improve this Doc Value Declaration public T Value { get; set; } Property Value Type Description T Methods | Improve this Doc ValidateSerializedData(ref T) Declaration protected virtual void ValidateSerializedData(ref T serializedData) Parameters Type Name Description T serializedData"
  },
  "api/Unity.Entities.ComponentDataFromEntity-1.html": {
    "href": "api/Unity.Entities.ComponentDataFromEntity-1.html",
    "title": "Struct ComponentDataFromEntity<T> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct ComponentDataFromEntity<T> A [NativeContainer] that provides access to all instances of components of type T, indexed by Entity . Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct ComponentDataFromEntity<T> where T : struct, IComponentData Type Parameters Name Description T The type of IComponentData to access. Remarks ComponentDataFromEntity is a native container that provides array-like access to components of a specific type. You can use ComponentDataFromEntity to look up data associated with one entity while iterating over a different set of entities. For example, Unity.Transforms stores the Entity object of parent entities in a Parent component and looks up the parent's LocalToWorld matrix using ComponentDataFromEntity<LocalToWorld> when calculating the world positions of child entities. To get a ComponentDataFromEntity, call GetComponentDataFromEntity<T>(Boolean) . Pass a ComponentDataFromEntity container to a job by defining a public field of the appropriate type in your IJob implementation. You can safely read from ComponentDataFromEntity in any job, but by default, you cannot write to components in the container in parallel jobs (including IJobForEach<T0> and IJobChunk ). If you know that two instances of a parallel job can never write to the same index in the container, you can disable the restriction on parallel writing by adding NativeDisableParallelForRestrictionAttribute to the ComponentDataFromEntity field definition in the job struct. If you would like to access an entity's components outside of a job, consider using the EntityManager methods GetComponentData<T>(Entity) and SetComponentData<T>(Entity, T) instead, to avoid the overhead of creating a ComponentDataFromEntity object. Properties | Improve this Doc Item[Entity] Gets the IComponentData instance of type T for the specified entity. Declaration public T this[Entity entity] { get; set; } Parameters Type Name Description Entity entity The entity. Property Value Type Description T An IComponentData type. Remarks You cannot use ComponentDataFromEntity to get zero-sized IComponentData . Use Exists(Entity) to check whether an entity has the zero-sized component instead. Normally, you cannot write to components accessed using a ComponentDataFromEntity instance in a parallel Job. This restriction is in place because multiple threads could write to the same component, leading to a race condition and nondeterministic results. However, when you are certain that your algorithm cannot write to the same component from different threads, you can manually disable this safety check by putting the [NativeDisableParallelForRestrictions] attribute on the ComponentDataFromEntity field in the Job. Exceptions Type Condition ArgumentException Thrown if T is zero-size. Methods | Improve this Doc DidChange(Entity, UInt32) Reports whether any of IComponentData components of the type T, in the chunk containing the specified Entity , could have changed. Declaration public bool DidChange(Entity entity, uint version) Parameters Type Name Description Entity entity The entity. UInt32 version The version to compare. In a system, this parameter should be set to the current LastSystemVersion at the time the job is run or scheduled. Returns Type Description Boolean True, if the version number stored in the chunk for this component is more recent than the version passed to the version parameter. Remarks Note that for efficiency, the change version applies to whole chunks not individual entities. The change version is incremented even when another job or system that has declared write access to a component does not actually change the component value. | Improve this Doc Exists(Entity) Reports whether the specified Entity instance still refers to a valid entity and that it has a component of type T. Declaration public bool Exists(Entity entity) Parameters Type Name Description Entity entity The entity. Returns Type Description Boolean True if the entity has a component of type T, and false if it does not. Also returns false if the Entity instance refers to an entity that has been destroyed. Remarks To report if the provided entity has a component of type T, this function confirms whether the EntityArchetype of the provided entity includes components of type T. | Improve this Doc HasComponent(Entity) Reports whether the specified Entity instance still refers to a valid entity and that it has a component of type T. Declaration public bool HasComponent(Entity entity) Parameters Type Name Description Entity entity The entity. Returns Type Description Boolean True if the entity has a component of type T, and false if it does not. Also returns false if the Entity instance refers to an entity that has been destroyed. Remarks To report if the provided entity has a component of type T, this function confirms whether the EntityArchetype of the provided entity includes components of type T."
  },
  "api/Unity.Entities.BuildUtils.TypeUtils.html": {
    "href": "api/Unity.Entities.BuildUtils.TypeUtils.html",
    "title": "Class TypeUtils | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class TypeUtils Inheritance Object TypeUtils Namespace : Unity.Entities.BuildUtils <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class TypeUtils Methods | Improve this Doc AlignAndSizeOfField(FieldReference, Int32) Declaration public static TypeUtils.AlignAndSize AlignAndSizeOfField(FieldReference fieldRef, int bits) Parameters Type Name Description FieldReference fieldRef Int32 bits Returns Type Description TypeUtils.AlignAndSize | Improve this Doc AlignAndSizeOfType(MetadataType, Int32) Declaration public static TypeUtils.AlignAndSize AlignAndSizeOfType(MetadataType mtype, int bits) Parameters Type Name Description MetadataType mtype Int32 bits Returns Type Description TypeUtils.AlignAndSize | Improve this Doc AlignAndSizeOfType(TypeReference, Int32) Declaration public static TypeUtils.AlignAndSize AlignAndSizeOfType(TypeReference typeRef, int bits) Parameters Type Name Description TypeReference typeRef Int32 bits Returns Type Description TypeUtils.AlignAndSize | Improve this Doc AlignUp(Int32, Int32) Declaration public static int AlignUp(int sz, int align) Parameters Type Name Description Int32 sz Int32 align Returns Type Description Int32 | Improve this Doc GetEntityFieldOffsets(TypeReference, Int32) Declaration public static List<int> GetEntityFieldOffsets(TypeReference type, int archBits) Parameters Type Name Description TypeReference type Int32 archBits Returns Type Description List < Int32 > | Improve this Doc GetFieldOffsetsOf(Func<FieldReference, TypeReference, Boolean>, TypeReference, Int32) Declaration public static List<int> GetFieldOffsetsOf(Func<FieldReference, TypeReference, bool> match, TypeReference typeToLookIn, int archBits) Parameters Type Name Description Func < FieldReference , TypeReference , Boolean > match TypeReference typeToLookIn Int32 archBits Returns Type Description List < Int32 > | Improve this Doc GetFieldOffsetsOf(String, TypeReference, Int32) Declaration public static List<int> GetFieldOffsetsOf(string fieldTypeName, TypeReference typeToLookIn, int archBits) Parameters Type Name Description String fieldTypeName TypeReference typeToLookIn Int32 archBits Returns Type Description List < Int32 > | Improve this Doc GetFieldOffsetsOf(TypeReference, TypeReference, Int32) Declaration public static List<int> GetFieldOffsetsOf(TypeReference typeToFind, TypeReference typeToLookIn, int archBits) Parameters Type Name Description TypeReference typeToFind TypeReference typeToLookIn Int32 archBits Returns Type Description List < Int32 > | Improve this Doc GetFieldOffsetsOfByFieldName(String, TypeReference, Int32) Declaration public static List<int> GetFieldOffsetsOfByFieldName(string fieldName, TypeReference typeToLookIn, int archBits) Parameters Type Name Description String fieldName TypeReference typeToLookIn Int32 archBits Returns Type Description List < Int32 > | Improve this Doc HasNestedDynamicArrayType(TypeReference) Declaration public static bool HasNestedDynamicArrayType(TypeReference type) Parameters Type Name Description TypeReference type Returns Type Description Boolean | Improve this Doc PreprocessTypeFields(TypeReference, Int32) Declaration public static void PreprocessTypeFields(TypeReference valuetype, int bits) Parameters Type Name Description TypeReference valuetype Int32 bits | Improve this Doc ValidateAllowedObjectType(TypeReference) Declaration public static void ValidateAllowedObjectType(TypeReference typeRef) Parameters Type Name Description TypeReference typeRef"
  },
  "api/Unity.Entities.BuildUtils.TypeUtils.AlignAndSize.html": {
    "href": "api/Unity.Entities.BuildUtils.TypeUtils.AlignAndSize.html",
    "title": "Struct TypeUtils.AlignAndSize | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct TypeUtils.AlignAndSize Namespace : Unity.Entities.BuildUtils <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct AlignAndSize Constructors | Improve this Doc AlignAndSize(Int32) Declaration public AlignAndSize(int single) Parameters Type Name Description Int32 single | Improve this Doc AlignAndSize(Int32, Int32) Declaration public AlignAndSize(int a, int s) Parameters Type Name Description Int32 a Int32 s | Improve this Doc AlignAndSize(Int32, Int32, Int32) Declaration public AlignAndSize(int a, int s, int o) Parameters Type Name Description Int32 a Int32 s Int32 o | Improve this Doc AlignAndSize(Int32, Int32, Int32, Boolean) Declaration public AlignAndSize(int a, int s, int o, bool e) Parameters Type Name Description Int32 a Int32 s Int32 o Boolean e Fields | Improve this Doc align Declaration public readonly int align Field Value Type Description Int32 | Improve this Doc Eight Declaration public static readonly TypeUtils.AlignAndSize Eight Field Value Type Description TypeUtils.AlignAndSize | Improve this Doc empty Declaration public readonly bool empty Field Value Type Description Boolean | Improve this Doc Four Declaration public static readonly TypeUtils.AlignAndSize Four Field Value Type Description TypeUtils.AlignAndSize | Improve this Doc offset Declaration public readonly int offset Field Value Type Description Int32 | Improve this Doc One Declaration public static readonly TypeUtils.AlignAndSize One Field Value Type Description TypeUtils.AlignAndSize | Improve this Doc Pointer2_32 Declaration public static readonly TypeUtils.AlignAndSize Pointer2_32 Field Value Type Description TypeUtils.AlignAndSize | Improve this Doc Pointer2_64 Declaration public static readonly TypeUtils.AlignAndSize Pointer2_64 Field Value Type Description TypeUtils.AlignAndSize | Improve this Doc Pointer3_32 Declaration public static readonly TypeUtils.AlignAndSize Pointer3_32 Field Value Type Description TypeUtils.AlignAndSize | Improve this Doc Pointer3_64 Declaration public static readonly TypeUtils.AlignAndSize Pointer3_64 Field Value Type Description TypeUtils.AlignAndSize | Improve this Doc Pointer4_32 Declaration public static readonly TypeUtils.AlignAndSize Pointer4_32 Field Value Type Description TypeUtils.AlignAndSize | Improve this Doc Pointer4_64 Declaration public static readonly TypeUtils.AlignAndSize Pointer4_64 Field Value Type Description TypeUtils.AlignAndSize | Improve this Doc Sentinel Declaration public static readonly TypeUtils.AlignAndSize Sentinel Field Value Type Description TypeUtils.AlignAndSize | Improve this Doc size Declaration public readonly int size Field Value Type Description Int32 | Improve this Doc Two Declaration public static readonly TypeUtils.AlignAndSize Two Field Value Type Description TypeUtils.AlignAndSize | Improve this Doc Zero Declaration public static readonly TypeUtils.AlignAndSize Zero Field Value Type Description TypeUtils.AlignAndSize Properties | Improve this Doc IsSentinel Declaration public bool IsSentinel { get; } Property Value Type Description Boolean Methods | Improve this Doc DynamicArray(Int32) Declaration public static TypeUtils.AlignAndSize DynamicArray(int bits) Parameters Type Name Description Int32 bits Returns Type Description TypeUtils.AlignAndSize | Improve this Doc NativeString(Int32) Declaration public static TypeUtils.AlignAndSize NativeString(int bits) Parameters Type Name Description Int32 bits Returns Type Description TypeUtils.AlignAndSize | Improve this Doc Pointer(Int32) Declaration public static TypeUtils.AlignAndSize Pointer(int bits) Parameters Type Name Description Int32 bits Returns Type Description TypeUtils.AlignAndSize | Improve this Doc ToString() Declaration public override string ToString() Returns Type Description String Overrides ValueType.ToString()"
  },
  "api/Unity.Entities.BlobPtr-1.html": {
    "href": "api/Unity.Entities.BlobPtr-1.html",
    "title": "Struct BlobPtr<T> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct BlobPtr<T> A pointer referencing a struct, array, or field inside a blob asset. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct BlobPtr<T> where T : struct Type Parameters Name Description T The data type of the referenced object. Properties | Improve this Doc Value The value, of type T to which the pointer refers. Declaration public T Value { get; } Property Value Type Description T Remarks The property is a reference return . Exceptions Type Condition InvalidOperationException Thrown if the pointer does not reference a valid instance of a data type. Methods | Improve this Doc GetUnsafePtr() Provides an unsafe pointer to the referenced data. Declaration public void *GetUnsafePtr() Returns Type Description Void * An unsafe pointer. Remarks You can only use unsafe pointers in contexts. See Also BlobBuilder"
  },
  "api/Unity.Entities.BlobAssetSerializeExtensions.html": {
    "href": "api/Unity.Entities.BlobAssetSerializeExtensions.html",
    "title": "Class BlobAssetSerializeExtensions | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class BlobAssetSerializeExtensions Extensions for supporting serialization and deserialization of blob assets. Inheritance Object BlobAssetSerializeExtensions Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class BlobAssetSerializeExtensions Methods | Improve this Doc Read<T>(BinaryReader) Reads bytes from a BinaryReader instance and deserializes them into a new blob asset. Declaration public static BlobAssetReference<T> Read<T>(this BinaryReader binaryReader) where T : struct Parameters Type Name Description BinaryReader binaryReader An implementation of the BinaryReader interface. Returns Type Description BlobAssetReference <T> A reference to the deserialized blob asset. Type Parameters Name Description T The blob asset's root data type. See Also StreamBinaryReader MemoryBinaryReader | Improve this Doc Write<T>(BinaryWriter, BlobAssetReference<T>) Serializes the blob asset data and writes the bytes to a BinaryWriter instance. Declaration public static void Write<T>(this BinaryWriter binaryWriter, BlobAssetReference<T> blob) where T : struct Parameters Type Name Description BinaryWriter binaryWriter An implementation of the BinaryWriter interface. BlobAssetReference <T> blob A reference to the blob asset to serialize. Type Parameters Name Description T The blob asset's root data type. See Also StreamBinaryWriter MemoryBinaryWriter"
  },
  "api/Unity.Entities.BlobAssetChange.html": {
    "href": "api/Unity.Entities.BlobAssetChange.html",
    "title": "Struct BlobAssetChange | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct BlobAssetChange Header for a changed blob asset. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct BlobAssetChange Fields | Improve this Doc Hash The content hash for this blob asset. Declaration public ulong Hash Field Value Type Description UInt64 | Improve this Doc Length Byte length of this blob asset in the BlobAssetData array. Declaration public int Length Field Value Type Description Int32"
  },
  "api/Unity.Profiling.html": {
    "href": "api/Unity.Profiling.html",
    "title": "Namespace Unity.Profiling | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Namespace Unity.Profiling Structs ProfilerMarker ProfilerMarker.AutoScope"
  },
  "api/Unity.Profiling.ProfilerMarker.html": {
    "href": "api/Unity.Profiling.ProfilerMarker.html",
    "title": "Struct ProfilerMarker | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct ProfilerMarker Namespace : Unity.Profiling <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct ProfilerMarker Constructors | Improve this Doc ProfilerMarker(String) Declaration public ProfilerMarker(string name) Parameters Type Name Description String name Methods | Improve this Doc Auto() Declaration public ProfilerMarker.AutoScope Auto() Returns Type Description ProfilerMarker.AutoScope | Improve this Doc Begin() Declaration [Conditional(\"ENABLE_PROFILER\")] public void Begin() | Improve this Doc Begin(UnityEngine.Object) Declaration [Conditional(\"ENABLE_PROFILER\")] public void Begin(UnityEngine.Object contextUnityObject) Parameters Type Name Description UnityEngine.Object contextUnityObject | Improve this Doc End() Declaration [Conditional(\"ENABLE_PROFILER\")] public void End()"
  },
  "api/Unity.Profiling.ProfilerMarker.AutoScope.html": {
    "href": "api/Unity.Profiling.ProfilerMarker.AutoScope.html",
    "title": "Struct ProfilerMarker.AutoScope | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct ProfilerMarker.AutoScope Namespace : Unity.Profiling <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct AutoScope : IDisposable Methods | Improve this Doc Dispose() Declaration public void Dispose()"
  },
  "api/Unity.Mathematics.html": {
    "href": "api/Unity.Mathematics.html",
    "title": "Namespace Unity.Mathematics | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Namespace Unity.Mathematics Classes AABBExtensions Structs AABB GeneratePoints MinMaxAABB"
  },
  "api/Unity.Mathematics.MinMaxAABB.html": {
    "href": "api/Unity.Mathematics.MinMaxAABB.html",
    "title": "Struct MinMaxAABB | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct MinMaxAABB Namespace : Unity.Mathematics <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] public struct MinMaxAABB : IEquatable<MinMaxAABB> Fields | Improve this Doc Max Declaration public float3 Max Field Value Type Description float3 | Improve this Doc Min Declaration public float3 Min Field Value Type Description float3 Properties | Improve this Doc Empty Declaration public static MinMaxAABB Empty { get; } Property Value Type Description MinMaxAABB | Improve this Doc IsEmpty Declaration public bool IsEmpty { get; } Property Value Type Description Boolean Methods | Improve this Doc Encapsulate(float3) Declaration public void Encapsulate(float3 point) Parameters Type Name Description float3 point | Improve this Doc Encapsulate(MinMaxAABB) Declaration public void Encapsulate(MinMaxAABB aabb) Parameters Type Name Description MinMaxAABB aabb | Improve this Doc Equals(MinMaxAABB) Declaration public bool Equals(MinMaxAABB other) Parameters Type Name Description MinMaxAABB other Returns Type Description Boolean Operators | Improve this Doc Implicit(AABB to MinMaxAABB) Declaration public static implicit operator MinMaxAABB(AABB aabb) Parameters Type Name Description AABB aabb Returns Type Description MinMaxAABB | Improve this Doc Implicit(MinMaxAABB to AABB) Declaration public static implicit operator AABB(MinMaxAABB aabb) Parameters Type Name Description MinMaxAABB aabb Returns Type Description AABB"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVVV-6.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVVV-6.html",
    "title": "Delegate VVVVVV<T0, T1, T2, T3, T4, T5> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VVVVVV<T0, T1, T2, T3, T4, T5> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVVV<T0, T1, T2, T3, T4, T5>(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 Type Parameters Name Description T0 T1 T2 T3 T4 T5"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVVRRR-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVVRRR-8.html",
    "title": "Delegate VVVVVRRR<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VVVVVRRR<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVVRRR<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, ref T5 t5, ref T6 t6, ref T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVVRRI-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVVRRI-8.html",
    "title": "Delegate VVVVVRRI<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VVVVVRRI<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVVRRI<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, ref T5 t5, ref T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVVRR-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVVRR-7.html",
    "title": "Delegate VVVVVRR<T0, T1, T2, T3, T4, T5, T6> | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Delegate VVVVVRR<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVVRR<T0, T1, T2, T3, T4, T5, T6>(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, ref T5 t5, ref T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.SceneLoadFlags.html": {
    "href": "api/Unity.Entities.SceneLoadFlags.html",
    "title": "Enum SceneLoadFlags | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Enum SceneLoadFlags Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Flags] public enum SceneLoadFlags Fields Name Description BlockOnImport Wait for the SubScene to be fully converted (only relevant for Editor and LiveLink) BlockOnStreamIn Disable asynchronous streaming, SubScene section will be fully loaded during the next update of the streaming system DisableAutoLoad Prevents adding a RequestSceneLoaded to the SubScene section entities when it gets created. If loading a GameObject scene, setting this flag is equivalent to setting activateOnlLoad to false. LoadAdditive Set whether to load additive or not. This only applies to GameObject based scenes, not subscenes. LoadAsGOScene Temporary flag to indicate that the scene is a GameObject based scene. Once addressables are in place, this information will be stored there."
  },
  "api/Unity.Entities.SceneBoundingVolume.html": {
    "href": "api/Unity.Entities.SceneBoundingVolume.html",
    "title": "Struct SceneBoundingVolume | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct SceneBoundingVolume Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct SceneBoundingVolume : IComponentData Fields | Improve this Doc Value Declaration public MinMaxAABB Value Field Value Type Description MinMaxAABB"
  },
  "api/Unity.Entities.EntityManager.html": {
    "href": "api/Unity.Entities.EntityManager.html",
    "title": "Class EntityManager | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class EntityManager The EntityManager manages entities and components in a World. Inheritance Object EntityManager Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public sealed class EntityManager Remarks The EntityManager provides an API to create, read, update, and destroy entities. A World has one EntityManager, which manages all the entities for that World. Many EntityManager operations result in structural changes that change the layout of entities in memory. Before it can perform such operations, the EntityManager must wait for all running Jobs to complete, an event called a sync point . A sync point both blocks the main thread and prevents the application from taking advantage of all available cores as the running Jobs wind down. Although you cannot prevent sync points entirely, you should avoid them as much as possible. To this end, the ECS framework provides the EntityCommandBuffer , which allows you to queue structural changes so that they all occur at one time in the frame. Properties | Improve this Doc Debug An object providing debugging information and operations. Declaration public EntityManager.EntityManagerDebug Debug { get; } Property Value Type Description EntityManager.EntityManagerDebug | Improve this Doc EntityCapacity The capacity of the internal entities array. Declaration public int EntityCapacity { get; } Property Value Type Description Int32 The number of entities the array can hold before it must be resized. Remarks The entities array automatically resizes itself when the entity count approaches the capacity. You should rarely need to set this value directly. Important: when you set this value (or when the array automatically resizes), the EntityManager first ensures that all Jobs finish. This can prevent the Job scheduler from utilizing available CPU cores and threads, resulting in a temporary performance drop. | Improve this Doc ExclusiveEntityTransactionDependency The Job dependencies of the exclusive entity transaction. Declaration public JobHandle ExclusiveEntityTransactionDependency { get; set; } Property Value Type Description JobHandle | Improve this Doc GlobalSystemVersion A counter that increments after every system update. Declaration public uint GlobalSystemVersion { get; } Property Value Type Description UInt32 Remarks The ECS framework uses the GlobalSystemVersion to track changes in a conservative, efficient fashion. Changes are recorded per component per chunk. See Also DidChange<T>(ArchetypeChunkComponentType<T>, UInt32) ChangedFilterAttribute | Improve this Doc IsCreated Reports whether the EntityManager has been initialized yet. Declaration public bool IsCreated { get; } Property Value Type Description Boolean True, if the EntityManager's OnCreateManager() function has finished. | Improve this Doc UniversalQuery A EntityQuery instance that matches all components. Declaration public EntityQuery UniversalQuery { get; } Property Value Type Description EntityQuery | Improve this Doc Version The latest entity generational version. Declaration public int Version { get; } Property Value Type Description Int32 This is the version number that is assigned to a new entity. See Version . | Improve this Doc World The World of this EntityManager. Declaration public World World { get; } Property Value Type Description World A World has one EntityManager and an EntityManager manages the entities of one World. Methods | Improve this Doc AddBuffer<T>(Entity) Adds a dynamic buffer component to an entity. Declaration public DynamicBuffer<T> AddBuffer<T>(Entity entity) where T : struct, IBufferElementData Parameters Type Name Description Entity entity The entity. Returns Type Description DynamicBuffer <T> The buffer. Type Parameters Name Description T The type of buffer element. Must implement IBufferElementData. Remarks A buffer component stores the number of elements inside the chunk defined by the [InternalBufferCapacity] attribute applied to the buffer element type declaration. Any additional elements are stored in a separate memory block that is managed by the EntityManager. Adding a component changes an entity's archetype and results in the entity being moved to a different chunk. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before adding the buffer and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. See Also InternalBufferCapacityAttribute | Improve this Doc AddChunkComponentData<T>(Entity) Adds a chunk component to the specified entity. Returns true if the chunk component was added, false if the entity already had the chunk component. (The chunk component's data is set either way.) Declaration public bool AddChunkComponentData<T>(Entity entity) where T : struct, IComponentData Parameters Type Name Description Entity entity The entity. Returns Type Description Boolean Type Parameters Name Description T The type of component, which must implement IComponentData. Remarks Adding a chunk component to an entity changes that entity's archetype and results in the entity being moved to a different chunk, either one that already has an archetype containing the chunk component or a new chunk. A chunk component is common to all entities in a chunk. You can access a chunk IComponentData instance through either the chunk itself or through an entity stored in that chunk. In either case, getting or setting the component reads or writes the same data. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before adding the component and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. | Improve this Doc AddChunkComponentData<T>(EntityQuery, T) Adds a component to each of the chunks identified by a EntityQuery and set the component values. Declaration public void AddChunkComponentData<T>(EntityQuery entityQuery, T componentData) where T : struct, IComponentData Parameters Type Name Description EntityQuery entityQuery The EntityQuery identifying the chunks to modify. T componentData The data to set. Type Parameters Name Description T The type of component, which must implement IComponentData. Remarks This function finds all chunks whose archetype satisfies the EntityQuery and adds the specified component to them. A chunk component is common to all entities in a chunk. You can access a chunk IComponentData instance through either the chunk itself or through an entity stored in that chunk. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before adding the component and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. | Improve this Doc AddComponent(NativeArray<Entity>, ComponentType) Adds a component to a set of entities. Declaration public void AddComponent(NativeArray<Entity> entities, ComponentType componentType) Parameters Type Name Description NativeArray < Entity > entities An array of Entity objects. ComponentType componentType The type of component to add. Remarks Adding a component changes an entity's archetype and results in the entity being moved to a different chunk. The added components have the default values for the type. If an Entity object in the entities array refers to an entity that has been destroyed, this function throws an ArgumentError exception. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before creating these chunks and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. | Improve this Doc AddComponent(Entity, ComponentType) Adds a component to an entity. Declaration public bool AddComponent(Entity entity, ComponentType componentType) Parameters Type Name Description Entity entity The Entity object. ComponentType componentType The type of component to add. Returns Type Description Boolean Remarks Adding a component changes the entity's archetype and results in the entity being moved to a different chunk. The added component has the default values for the type. If the Entity object refers to an entity that has been destroyed, this function throws an ArgumentError exception. If the Entity object refers to an entity that already has the specified ComponentType , the function returns false without performing any modifications. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before adding the component and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. | Improve this Doc AddComponent(EntityQuery, ComponentType) Adds a component to a set of entities defined by a EntityQuery. Declaration public void AddComponent(EntityQuery entityQuery, ComponentType componentType) Parameters Type Name Description EntityQuery entityQuery The EntityQuery defining the entities to modify. ComponentType componentType The type of component to add. Remarks Adding a component changes an entity's archetype and results in the entity being moved to a different chunk. The added components have the default values for the type. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before adding the component and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. | Improve this Doc AddComponent<T>(NativeArray<Entity>) Adds a component to a set of entities. Declaration public void AddComponent<T>(NativeArray<Entity> entities) Parameters Type Name Description NativeArray < Entity > entities An array of Entity objects. Type Parameters Name Description T The type of component to add. Remarks Adding a component changes an entity's archetype and results in the entity being moved to a different chunk. The added components have the default values for the type. If an Entity object in the entities array refers to an entity that has been destroyed, this function throws an ArgumentError exception. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before creating these chunks and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. | Improve this Doc AddComponent<T>(Entity) Adds a component to an entity. Declaration public bool AddComponent<T>(Entity entity) Parameters Type Name Description Entity entity The Entity object. Returns Type Description Boolean Type Parameters Name Description T The type of component to add. Remarks Adding a component changes the entity's archetype and results in the entity being moved to a different chunk. The added component has the default values for the type. If the Entity object refers to an entity that has been destroyed, this function throws an ArgumentError exception. If the Entity object refers to an entity that already has the specified ComponentType of type T, the function returns false without performing any modifications. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before adding the component and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. | Improve this Doc AddComponent<T>(EntityQuery) Adds a component to a set of entities defined by a EntityQuery. Declaration public void AddComponent<T>(EntityQuery entityQuery) Parameters Type Name Description EntityQuery entityQuery The EntityQuery defining the entities to modify. Type Parameters Name Description T The type of component to add. Remarks Adding a component changes an entity's archetype and results in the entity being moved to a different chunk. The added components have the default values for the type. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before adding the component and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. | Improve this Doc AddComponentData<T>(Entity, T) Adds a component to an entity and set the value of that component. Returns true if the component was added, false if the entity already had the component. (The component's data is set either way.) Declaration public bool AddComponentData<T>(Entity entity, T componentData) where T : struct, IComponentData Parameters Type Name Description Entity entity The entity. T componentData The data to set. Returns Type Description Boolean Type Parameters Name Description T The type of component. Remarks Adding a component changes an entity's archetype and results in the entity being moved to a different chunk. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before adding the component and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. | Improve this Doc AddComponentData<T>(EntityQuery, NativeArray<T>) Adds a component to a set of entities defines by the EntityQuery and sets the component of each entity in the query to the value in the component array. componentArray.Length must match entityQuery.ToEntityArray().Length. Declaration public void AddComponentData<T>(EntityQuery entityQuery, NativeArray<T> componentArray) where T : struct, IComponentData Parameters Type Name Description EntityQuery entityQuery THe EntityQuery defining the entities to add component to NativeArray <T> componentArray Type Parameters Name Description T | Improve this Doc AddComponentObject(Entity, Object) Adds a managed UnityEngine.Component object to an entity. Declaration public void AddComponentObject(Entity entity, object componentData) Parameters Type Name Description Entity entity The entity to modify. Object componentData An object inheriting UnityEngine.Component. Remarks Accessing data in a managed object forfeits many opportunities for increased performance. Adding managed objects to an entity should be avoided or used sparingly. Adding a component changes an entity's archetype and results in the entity being moved to a different chunk. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before adding the object and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. Exceptions Type Condition ArgumentNullException If the componentData object is not an instance of UnityEngine.Component. | Improve this Doc AddComponents(Entity, ComponentTypes) Adds a set of component to an entity. Declaration public void AddComponents(Entity entity, ComponentTypes types) Parameters Type Name Description Entity entity The entity to modify. ComponentTypes types The types of components to add. Remarks Adding components changes the entity's archetype and results in the entity being moved to a different chunk. The added components have the default values for the type. If the Entity object refers to an entity that has been destroyed, this function throws an ArgumentError exception. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before adding these components and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. | Improve this Doc AddSharedComponentData<T>(Entity, T) Adds a shared component to an entity. Returns true if the shared component was added, false if the entity already had the shared component. (The shared component's data is set either way.) Declaration public bool AddSharedComponentData<T>(Entity entity, T componentData) where T : struct, ISharedComponentData Parameters Type Name Description Entity entity The entity. T componentData An instance of the shared component having the values to set. Returns Type Description Boolean Type Parameters Name Description T The shared component type. Remarks The fields of the componentData parameter are assigned to the added shared component. Adding a component to an entity changes its archetype and results in the entity being moved to a different chunk. The entity moves to a chunk with other entities that have the same shared component values. A new chunk is created if no chunk with the same archetype and shared component values currently exists. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before adding the component and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. | Improve this Doc AddSharedComponentData<T>(EntityQuery, T) Adds a shared component to a set of entities defined by a EntityQuery. Declaration public void AddSharedComponentData<T>(EntityQuery entityQuery, T componentData) where T : struct, ISharedComponentData Parameters Type Name Description EntityQuery entityQuery The EntityQuery defining a set of entities to modify. T componentData The data to set. Type Parameters Name Description T The data type of the shared component. Remarks The fields of the componentData parameter are assigned to all of the added shared components. Adding a component to an entity changes its archetype and results in the entity being moved to a different chunk. The entity moves to a chunk with other entities that have the same shared component values. A new chunk is created if no chunk with the same archetype and shared component values currently exists. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before adding the component and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. | Improve this Doc BeginExclusiveEntityTransaction() Declaration public ExclusiveEntityTransaction BeginExclusiveEntityTransaction() Returns Type Description ExclusiveEntityTransaction | Improve this Doc CompleteAllJobs() Waits for all Jobs to complete. Declaration public void CompleteAllJobs() Remarks Calling CompleteAllJobs() blocks the main thread until all currently running Jobs finish. | Improve this Doc CopyAndReplaceEntitiesFrom(EntityManager) Declaration public void CopyAndReplaceEntitiesFrom(EntityManager srcEntityManager) Parameters Type Name Description EntityManager srcEntityManager | Improve this Doc CreateArchetype(ComponentType[]) Creates an archetype from a set of component types. Declaration public EntityArchetype CreateArchetype(params ComponentType[] types) Parameters Type Name Description ComponentType [] types The component types to include as part of the archetype. Returns Type Description EntityArchetype The EntityArchetype object for the archetype. Remarks Creates a new archetype in the ECS framework's internal type registry, unless the archetype already exists. | Improve this Doc CreateChunk(EntityArchetype, NativeArray<ArchetypeChunk>, Int32) Creates a set of chunks containing the specified number of entities having the specified archetype. Declaration public void CreateChunk(EntityArchetype archetype, NativeArray<ArchetypeChunk> chunks, int entityCount) Parameters Type Name Description EntityArchetype archetype The archetype for the chunk and entities. NativeArray < ArchetypeChunk > chunks An empty array to receive the created chunks. Int32 entityCount The number of entities to create. Remarks The EntityManager creates enough chunks to hold the required number of entities. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before creating these chunks and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. | Improve this Doc CreateEntity() Declaration public Entity CreateEntity() Returns Type Description Entity | Improve this Doc CreateEntity(ComponentType[]) Creates an entity having components of the specified types. Declaration public Entity CreateEntity(params ComponentType[] types) Parameters Type Name Description ComponentType [] types The types of components to add to the new entity. Returns Type Description Entity The Entity object that you can use to access the entity. Remarks The EntityManager creates the entity in the first available chunk with the matching archetype that has enough space. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before creating the entity and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. | Improve this Doc CreateEntity(EntityArchetype) Creates an entity having the specified archetype. Declaration public Entity CreateEntity(EntityArchetype archetype) Parameters Type Name Description EntityArchetype archetype The archetype for the new entity. Returns Type Description Entity The Entity object that you can use to access the entity. Remarks The EntityManager creates the entity in the first available chunk with the matching archetype that has enough space. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before creating the entity and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. | Improve this Doc CreateEntity(EntityArchetype, NativeArray<Entity>) Creates a set of entities of the specified archetype. Declaration public void CreateEntity(EntityArchetype archetype, NativeArray<Entity> entities) Parameters Type Name Description EntityArchetype archetype The archetype defining the structure for the new entities. NativeArray < Entity > entities An array to hold the Entity objects needed to access the new entities. The length of the array determines how many entities are created. Remarks Fills the NativeArray object assigned to the entities parameter with the Entity objects of the created entities. Each entity has the components specified by the EntityArchetype object assigned to the archetype parameter. The EntityManager adds these entities to the World entity list. Use the Entity objects in the array for further processing, such as setting the component values. | Improve this Doc CreateEntity(EntityArchetype, Int32, Allocator) Creates a set of entities of the specified archetype. Declaration public NativeArray<Entity> CreateEntity(EntityArchetype archetype, int entityCount, Allocator allocator) Parameters Type Name Description EntityArchetype archetype The archetype defining the structure for the new entities. Int32 entityCount The number of entities to create with the specified archetype. Allocator allocator How the created native array should be allocated. Returns Type Description NativeArray < Entity > A NativeArray of entities with the given archetype. Remarks Creates a NativeArray of entities, each of which has the components specified by the EntityArchetype object assigned to the archetype parameter. The EntityManager adds these entities to the World entity list. | Improve this Doc CreateEntityQuery(ComponentType[]) Creates a EntityQuery from an array of component types. Declaration public EntityQuery CreateEntityQuery(params ComponentType[] requiredComponents) Parameters Type Name Description ComponentType [] requiredComponents An array containing the component types. Returns Type Description EntityQuery The EntityQuery derived from the specified array of component types. See Also EntityQueryDesc | Improve this Doc CreateEntityQuery(EntityQueryDesc[]) Creates a EntityQuery from an EntityQueryDesc. Declaration public EntityQuery CreateEntityQuery(params EntityQueryDesc[] queriesDesc) Parameters Type Name Description EntityQueryDesc [] queriesDesc A queryDesc identifying a set of component types. Returns Type Description EntityQuery The EntityQuery corresponding to the queryDesc. | Improve this Doc CreateEntityRemapArray(Allocator) Creates a remapping array with one element for each entity in the World . Declaration public NativeArray<EntityRemapUtility.EntityRemapInfo> CreateEntityRemapArray(Allocator allocator) Parameters Type Name Description Allocator allocator The type of memory allocation to use when creating the array. Returns Type Description NativeArray < EntityRemapUtility.EntityRemapInfo > An array containing a no-op identity transformation for each entity. | Improve this Doc DestroyEntity(NativeArray<Entity>) Destroys all entities in an array. Declaration public void DestroyEntity(NativeArray<Entity> entities) Parameters Type Name Description NativeArray < Entity > entities An array containing the Entity objects of the entities to destroy. Remarks Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before destroying the entity and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. | Improve this Doc DestroyEntity(NativeSlice<Entity>) Destroys all entities in a slice of an array. Declaration public void DestroyEntity(NativeSlice<Entity> entities) Parameters Type Name Description NativeSlice < Entity > entities The slice of an array containing the Entity objects of the entities to destroy. Remarks Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before destroying the entity and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. | Improve this Doc DestroyEntity(Entity) Destroys an entity. Declaration public void DestroyEntity(Entity entity) Parameters Type Name Description Entity entity The Entity object of the entity to destroy. Remarks Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before destroying the entity and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. | Improve this Doc DestroyEntity(EntityQuery) Destroy all entities having a common set of component types. Declaration public void DestroyEntity(EntityQuery entityQuery) Parameters Type Name Description EntityQuery entityQuery Remarks Since entities in the same chunk share the same component structure, this function effectively destroys the chunks holding any entities identified by the entityQueryFilter parameter. | Improve this Doc EndExclusiveEntityTransaction() Ends an exclusive entity transaction. Declaration public void EndExclusiveEntityTransaction() See Also ExclusiveEntityTransaction BeginExclusiveEntityTransaction() | Improve this Doc Exists(Entity) Reports whether an Entity object is still valid. Declaration public bool Exists(Entity entity) Parameters Type Name Description Entity entity The Entity object to check. Returns Type Description Boolean True, if Version matches the version of the current entity at Index in the entities array. Remarks An Entity object does not contain a reference to its entity. Instead, the Entity struct contains an index and a generational version number. When an entity is destroyed, the EntityManager increments the version of the entity within the internal array of entities. The index of a destroyed entity is recycled when a new entity is created. After an entity is destroyed, any existing Entity objects will still contain the older version number. This function compares the version numbers of the specified Entity object and the current version of the entity recorded in the entities array. If the versions are different, the Entity object no longer refers to an existing entity and cannot be used. | Improve this Doc GetAllArchetypes(NativeList<EntityArchetype>) Gets all the archetypes. Declaration public void GetAllArchetypes(NativeList<EntityArchetype> allArchetypes) Parameters Type Name Description NativeList < EntityArchetype > allArchetypes A native list to receive the EntityArchetype objects. Remarks The function adds the archetype objects to the existing contents of the list. The list is not cleared. | Improve this Doc GetAllChunks(Allocator) Gets all the chunks managed by this EntityManager. Declaration public NativeArray<ArchetypeChunk> GetAllChunks(Allocator allocator = null) Parameters Type Name Description Allocator allocator The type of allocation for creating the NativeArray to hold the ArchetypeChunk objects. Returns Type Description NativeArray < ArchetypeChunk > An array of ArchetypeChunk objects referring to all the chunks in the World . Remarks Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before getting these chunks and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. | Improve this Doc GetAllEntities(Allocator) Gets all the entities managed by this EntityManager. Declaration public NativeArray<Entity> GetAllEntities(Allocator allocator = null) Parameters Type Name Description Allocator allocator The type of allocation for creating the NativeArray to hold the Entity objects. Returns Type Description NativeArray < Entity > An array of Entity objects referring to all the entities in the World. Remarks Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before getting the entities and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. | Improve this Doc GetAllUniqueSharedComponentData<T>(List<T>) Declaration public void GetAllUniqueSharedComponentData<T>(List<T> sharedComponentValues) where T : struct, ISharedComponentData Parameters Type Name Description List <T> sharedComponentValues Type Parameters Name Description T | Improve this Doc GetAllUniqueSharedComponentData<T>(List<T>, List<Int32>) Gets a list of all unique shared components of the same type and a corresponding list of indices into the internal shared component list. Declaration public void GetAllUniqueSharedComponentData<T>(List<T> sharedComponentValues, List<int> sharedComponentIndices) where T : struct, ISharedComponentData Parameters Type Name Description List <T> sharedComponentValues List < Int32 > sharedComponentIndices Type Parameters Name Description T Remarks All entities with the same archetype and the same values for a shared component are stored in the same set of chunks. This function finds the unique shared components existing across chunks and archetype and fills a list with copies of those components and fills in a separate list with the indices of those components in the internal shared component list. You can use the indices to ask the same shared components directly by calling GetSharedComponentData<T>(Int32) , passing in the index. An index remains valid until the shared component order version changes. Check this version using GetSharedComponentOrderVersion<T>(T) . | Improve this Doc GetArchetypeChunkBufferType<T>(Boolean) Gets the dynamic type object required to access a chunk buffer containing elements of type T. Declaration public ArchetypeChunkBufferType<T> GetArchetypeChunkBufferType<T>(bool isReadOnly) where T : struct, IBufferElementData Parameters Type Name Description Boolean isReadOnly Specify whether the access to the component through this object is read only or read and write. Returns Type Description ArchetypeChunkBufferType <T> The run-time type information of the buffer component. Type Parameters Name Description T The compile-time type of the buffer elements. Remarks To access a component stored in a chunk, you must have the type registry information for the component. This function provides that information for buffer components. Use the returned ArchetypeChunkComponentType<T> object with the functions of an ArchetypeChunk object to get information about the components in that chunk and to access the component values. | Improve this Doc GetArchetypeChunkComponentType<T>(Boolean) Gets the dynamic type object required to access a chunk component of type T. Declaration public ArchetypeChunkComponentType<T> GetArchetypeChunkComponentType<T>(bool isReadOnly) Parameters Type Name Description Boolean isReadOnly Specify whether the access to the component through this object is read only or read and write. For managed components isReadonly will always be treated as false. Returns Type Description ArchetypeChunkComponentType <T> The run-time type information of the component. Type Parameters Name Description T The compile-time type of the component. Remarks To access a component stored in a chunk, you must have the type registry information for the component. This function provides that information. Use the returned ArchetypeChunkComponentType<T> object with the functions of an ArchetypeChunk object to get information about the components in that chunk and to access the component values. | Improve this Doc GetArchetypeChunkComponentTypeDynamic(ComponentType) Gets the dynamic type object required to access a chunk component of dynamic type acquired from reflection. Declaration public ArchetypeChunkComponentTypeDynamic GetArchetypeChunkComponentTypeDynamic(ComponentType componentType) Parameters Type Name Description ComponentType componentType Type of the component Returns Type Description ArchetypeChunkComponentTypeDynamic The run-time type information of the component. Remarks To access a component stored in a chunk, you must have the type registry information for the component. This function provides that information. Use the returned ArchetypeChunkComponentTypeDynamic object with the functions of an ArchetypeChunk object to get information about the components in that chunk and to access the component values. | Improve this Doc GetArchetypeChunkEntityType() Gets the dynamic type object required to access the Entity component of a chunk. Declaration public ArchetypeChunkEntityType GetArchetypeChunkEntityType() Returns Type Description ArchetypeChunkEntityType The run-time type information of the Entity component. Remarks All chunks have an implicit Entity component referring to the entities in that chunk. To access any component stored in a chunk, you must have the type registry information for the component. This function provides that information for the implicit Entity component. Use the returned ArchetypeChunkComponentType<T> object with the functions of an ArchetypeChunk object to access the component values. | Improve this Doc GetArchetypeChunkSharedComponentType<T>() Gets the dynamic type object required to access a shared component of type T. Declaration public ArchetypeChunkSharedComponentType<T> GetArchetypeChunkSharedComponentType<T>() where T : struct, ISharedComponentData Returns Type Description ArchetypeChunkSharedComponentType <T> The run-time type information of the shared component. Type Parameters Name Description T The compile-time type of the shared component. Remarks To access a component stored in a chunk, you must have the type registry information for the component. This function provides that information for shared components. Use the returned ArchetypeChunkComponentType<T> object with the functions of an ArchetypeChunk object to get information about the components in that chunk and to access the component values. | Improve this Doc GetAssignableComponentTypes(Type) Gets a list of the types of components that can be assigned to the specified component. Declaration public List<Type> GetAssignableComponentTypes(Type interfaceType) Parameters Type Name Description Type interfaceType The type to check. Returns Type Description List < Type > A new List object containing the System.Types that can be assigned to interfaceType . Remarks Assignable components include those with the same compile-time type and those that inherit from the same compile-time type. | Improve this Doc GetBuffer<T>(Entity) Gets the dynamic buffer of an entity. Declaration public DynamicBuffer<T> GetBuffer<T>(Entity entity) where T : struct, IBufferElementData Parameters Type Name Description Entity entity The entity. Returns Type Description DynamicBuffer <T> The DynamicBuffer object for accessing the buffer contents. Type Parameters Name Description T The type of the buffer's elements. Exceptions Type Condition ArgumentException Thrown if T is an unsupported type. | Improve this Doc GetChunk(Entity) Gets the chunk in which the specified entity is stored. Declaration public ArchetypeChunk GetChunk(Entity entity) Parameters Type Name Description Entity entity The entity. Returns Type Description ArchetypeChunk The chunk containing the entity. | Improve this Doc GetChunkComponentData<T>(ArchetypeChunk) Gets the value of a chunk component. Declaration public T GetChunkComponentData<T>(ArchetypeChunk chunk) where T : struct, IComponentData Parameters Type Name Description ArchetypeChunk chunk The chunk. Returns Type Description T A struct of type T containing the component value. Type Parameters Name Description T The component type. Remarks A chunk component is common to all entities in a chunk. You can access a chunk IComponentData instance through either the chunk itself or through an entity stored in that chunk. Exceptions Type Condition ArgumentException Thrown if the ArchetypeChunk object is invalid. | Improve this Doc GetChunkComponentData<T>(Entity) Gets the value of chunk component for the chunk containing the specified entity. Declaration public T GetChunkComponentData<T>(Entity entity) where T : struct, IComponentData Parameters Type Name Description Entity entity The entity. Returns Type Description T A struct of type T containing the component value. Type Parameters Name Description T The component type. Remarks A chunk component is common to all entities in a chunk. You can access a chunk IComponentData instance through either the chunk itself or through an entity stored in that chunk. | Improve this Doc GetComponentCount(Entity) Gets the number of component types associated with an entity. Declaration public int GetComponentCount(Entity entity) Parameters Type Name Description Entity entity The entity. Returns Type Description Int32 The number of components. | Improve this Doc GetComponentData<T>(Entity) Gets the value of a component for an entity. Declaration public T GetComponentData<T>(Entity entity) where T : struct, IComponentData Parameters Type Name Description Entity entity The entity. Returns Type Description T A struct of type T containing the component value. Type Parameters Name Description T The type of component to retrieve. Exceptions Type Condition ArgumentException Thrown if the component type has no fields. | Improve this Doc GetComponentObject<T>(Entity) Gets the managed UnityEngine.Component object from an entity. Declaration public T GetComponentObject<T>(Entity entity) Parameters Type Name Description Entity entity The entity. Returns Type Description T The managed object, cast to type T. Type Parameters Name Description T The type of the managed object. | Improve this Doc GetComponentObject<T>(Entity, ComponentType) Declaration public T GetComponentObject<T>(Entity entity, ComponentType componentType) Parameters Type Name Description Entity entity ComponentType componentType Returns Type Description T Type Parameters Name Description T | Improve this Doc GetComponentOrderVersion<T>() Gets the version number of the specified component type. Declaration public int GetComponentOrderVersion<T>() Returns Type Description Int32 The current version number. Type Parameters Name Description T The component type. Remarks This version number is incremented each time there is a structural change involving the specified type of component. Such changes include creating or destroying entities that have this component and adding or removing the component type from an entity. Shared components are not covered by this version; see GetSharedComponentOrderVersion<T>(T) . Version numbers can overflow. To compare if one version is more recent than another use a calculation such as: bool VersionBisNewer = (VersionB - VersionA) > 0; | Improve this Doc GetComponentTypes(Entity, Allocator) Gets an entity's component types. Declaration public NativeArray<ComponentType> GetComponentTypes(Entity entity, Allocator allocator = null) Parameters Type Name Description Entity entity The entity. Allocator allocator The type of allocation for creating the NativeArray to hold the ComponentType objects. Returns Type Description NativeArray < ComponentType > An array of ComponentType containing all the types of components associated with the entity. | Improve this Doc GetEnabled(Entity) Declaration public bool GetEnabled(Entity entity) Parameters Type Name Description Entity entity Returns Type Description Boolean | Improve this Doc GetEntityQueryMask(EntityQuery) Gets an EntityQueryMask that can be used to quickly match if an entity belongs to an EntityQuery. There is a maximum limit of 1024 EntityQueryMasks that can be created. EntityQueryMasks cannot be created from EntityQueries with filters. Declaration public EntityQueryMask GetEntityQueryMask(EntityQuery query) Parameters Type Name Description EntityQuery query The EntityQuery that describes the EntityQueryMask. Returns Type Description EntityQueryMask The EntityQueryMask corresponding to the EntityQuery. | Improve this Doc GetSharedComponentCount() Gets the number of shared components managed by this EntityManager. Declaration public int GetSharedComponentCount() Returns Type Description Int32 The shared component count | Improve this Doc GetSharedComponentData<T>(Int32) Gets a shared component by index. Declaration public T GetSharedComponentData<T>(int sharedComponentIndex) where T : struct, ISharedComponentData Parameters Type Name Description Int32 sharedComponentIndex The index of the shared component in the internal shared component list. Returns Type Description T A copy of the shared component. Type Parameters Name Description T The data type of the shared component. Remarks The ECS framework maintains an internal list of unique shared components. You can get the components in this list, along with their indices using GetAllUniqueSharedComponentData<T>(List<T>, List<Int32>) . An index in the list is valid and points to the same shared component index as long as the shared component order version from GetSharedComponentOrderVersion<T>(T) remains the same. | Improve this Doc GetSharedComponentData<T>(Entity) Gets a shared component from an entity. Declaration public T GetSharedComponentData<T>(Entity entity) where T : struct, ISharedComponentData Parameters Type Name Description Entity entity The entity. Returns Type Description T A copy of the shared component. Type Parameters Name Description T The type of shared component. | Improve this Doc GetSharedComponentDataIndex<T>(Entity) Declaration public int GetSharedComponentDataIndex<T>(Entity entity) where T : struct, ISharedComponentData Parameters Type Name Description Entity entity Returns Type Description Int32 Type Parameters Name Description T | Improve this Doc GetSharedComponentOrderVersion<T>(T) Gets the version number of the specified shared component. Declaration public int GetSharedComponentOrderVersion<T>(T sharedComponent) where T : struct, ISharedComponentData Parameters Type Name Description T sharedComponent The shared component instance. Returns Type Description Int32 The current version number. Type Parameters Name Description T The shared component type. Remarks This version number is incremented each time there is a structural change involving entities in the chunk of the specified shared component. Such changes include creating or destroying entities or anything that changes the archetype of an entity. Version numbers can overflow. To compare if one version is more recent than another use a calculation such as: bool VersionBisNewer = (VersionB - VersionA) > 0; | Improve this Doc HasChunkComponent<T>(Entity) Checks whether the chunk containing an entity has a specific type of component. Declaration public bool HasChunkComponent<T>(Entity entity) Parameters Type Name Description Entity entity The Entity object. Returns Type Description Boolean True, if the chunk containing the specified entity has the component. Type Parameters Name Description T The data type of the chunk component. Remarks Always returns false for an entity that has been destroyed. | Improve this Doc HasComponent(Entity, ComponentType) Checks whether an entity has a specific type of component. Declaration public bool HasComponent(Entity entity, ComponentType type) Parameters Type Name Description Entity entity The Entity object. ComponentType type The data type of the component. Returns Type Description Boolean True, if the specified entity has the component. Remarks Always returns false for an entity that has been destroyed. | Improve this Doc HasComponent<T>(Entity) Checks whether an entity has a specific type of component. Declaration public bool HasComponent<T>(Entity entity) Parameters Type Name Description Entity entity The Entity object. Returns Type Description Boolean True, if the specified entity has the component. Type Parameters Name Description T The data type of the component. Remarks Always returns false for an entity that has been destroyed. | Improve this Doc Instantiate(Entity) Clones an entity. Declaration public Entity Instantiate(Entity srcEntity) Parameters Type Name Description Entity srcEntity The entity to clone Returns Type Description Entity The Entity object for the new entity. Remarks The new entity has the same archetype and component values as the original. If the source entity was converted from a prefab and thus has a LinkedEntityGroup component, the entire group is cloned as a new set of entities. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before creating the entity and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. | Improve this Doc Instantiate(Entity, NativeArray<Entity>) Makes multiple clones of an entity. Declaration public void Instantiate(Entity srcEntity, NativeArray<Entity> outputEntities) Parameters Type Name Description Entity srcEntity The entity to clone. NativeArray < Entity > outputEntities An array to receive the Entity objects of the root entity in each clone. The length of this array determines the number of clones. Remarks The new entities have the same archetype and component values as the original. If the source entity has a LinkedEntityGroup component, the entire group is cloned as a new set of entities. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before creating these entities and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. | Improve this Doc Instantiate(Entity, Int32, Allocator) Makes multiple clones of an entity. Declaration public NativeArray<Entity> Instantiate(Entity srcEntity, int instanceCount, Allocator allocator) Parameters Type Name Description Entity srcEntity The entity to clone. Int32 instanceCount The number of entities to instantiate with the same components as the source entity. Allocator allocator How the created native array should be allocated. Returns Type Description NativeArray < Entity > A NativeArray of entities. Remarks The new entities have the same archetype and component values as the original. If the source entity has a LinkedEntityGroup component, the entire group is cloned as a new set of entities. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before creating these entities and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. | Improve this Doc LockChunk(NativeArray<ArchetypeChunk>) Locks a set of chunks. Declaration public void LockChunk(NativeArray<ArchetypeChunk> chunks) Parameters Type Name Description NativeArray < ArchetypeChunk > chunks An array of chunks to lock. See Also LockChunk(ArchetypeChunk) | Improve this Doc LockChunk(ArchetypeChunk) Protects a chunk, and the entities within it, from structural changes. Declaration public void LockChunk(ArchetypeChunk chunk) Parameters Type Name Description ArchetypeChunk chunk The chunk to lock. Remarks When locked, entities cannot be added to or removed from the chunk; components cannot be added to or removed from the entities in the chunk; the values of shared components cannot be changed; and entities in the chunk cannot be destroyed. You can change the values of components, other than shared components. Call UnlockChunk(ArchetypeChunk) to unlock the chunk. You can lock a chunk temporarily and then unlock it, or you can lock it for the lifespan of your application. For example, if you have a gameboard with a fixed number of tiles, you may want the entities representing those tiles in a specific order. Locking the chunk prevents the ECS framework from rearranging them once you have set the desired order. Use SwapComponents(ArchetypeChunk, Int32, ArchetypeChunk, Int32) to re-order entities in a chunk. | Improve this Doc MoveEntitiesFrom(out NativeArray<Entity>, EntityManager) Moves all entities managed by the specified EntityManager to the World of this EntityManager and fills an array with their Entity objects. Declaration public void MoveEntitiesFrom(out NativeArray<Entity> output, EntityManager srcEntities) Parameters Type Name Description NativeArray < Entity > output An array to receive the Entity objects of the transferred entities. EntityManager srcEntities The EntityManager whose entities are appropriated. Remarks After the move, the entities are managed by this EntityManager. Use the output array to make post-move changes to the transferred entities. Each world has one EntityManager, which manages all the entities in that world. This function allows you to transfer entities from one World to another. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before moving the entities and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. | Improve this Doc MoveEntitiesFrom(out NativeArray<Entity>, EntityManager, NativeArray<EntityRemapUtility.EntityRemapInfo>) Moves all entities managed by the specified EntityManager to the World of this EntityManager and fills an array with their Entity objects. Declaration public void MoveEntitiesFrom(out NativeArray<Entity> output, EntityManager srcEntities, NativeArray<EntityRemapUtility.EntityRemapInfo> entityRemapping) Parameters Type Name Description NativeArray < Entity > output An array to receive the Entity objects of the transferred entities. EntityManager srcEntities The EntityManager whose entities are appropriated. NativeArray < EntityRemapUtility.EntityRemapInfo > entityRemapping A set of entity transformations to make during the transfer. Remarks After the move, the entities are managed by this EntityManager. Use the output array to make post-move changes to the transferred entities. Each world has one EntityManager, which manages all the entities in that world. This function allows you to transfer entities from one World to another. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before moving the entities and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. Exceptions Type Condition ArgumentException | Improve this Doc MoveEntitiesFrom(out NativeArray<Entity>, EntityManager, EntityQuery) Moves a selection of the entities managed by the specified EntityManager to the World of this EntityManager and fills an array with their Entity objects. Declaration public void MoveEntitiesFrom(out NativeArray<Entity> output, EntityManager srcEntities, EntityQuery filter) Parameters Type Name Description NativeArray < Entity > output An array to receive the Entity objects of the transferred entities. EntityManager srcEntities The EntityManager whose entities are appropriated. EntityQuery filter A EntityQuery that defines the entities to move. Must be part of the source World. Remarks After the move, the entities are managed by this EntityManager. Use the output array to make post-move changes to the transferred entities. Each world has one EntityManager, which manages all the entities in that world. This function allows you to transfer entities from one World to another. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before moving the entities and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. Exceptions Type Condition ArgumentException | Improve this Doc MoveEntitiesFrom(out NativeArray<Entity>, EntityManager, EntityQuery, NativeArray<EntityRemapUtility.EntityRemapInfo>) Moves a selection of the entities managed by the specified EntityManager to the World of this EntityManager and fills an array with their Entity objects. Declaration public void MoveEntitiesFrom(out NativeArray<Entity> output, EntityManager srcEntities, EntityQuery filter, NativeArray<EntityRemapUtility.EntityRemapInfo> entityRemapping) Parameters Type Name Description NativeArray < Entity > output An array to receive the Entity objects of the transferred entities. EntityManager srcEntities The EntityManager whose entities are appropriated. EntityQuery filter A EntityQuery that defines the entities to move. Must be part of the source World. NativeArray < EntityRemapUtility.EntityRemapInfo > entityRemapping A set of entity transformations to make during the transfer. Remarks After the move, the entities are managed by this EntityManager. Use the output array to make post-move changes to the transferred entities. Each world has one EntityManager, which manages all the entities in that world. This function allows you to transfer entities from one World to another. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before moving the entities and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. Exceptions Type Condition ArgumentException | Improve this Doc MoveEntitiesFrom(EntityManager) Moves all entities managed by the specified EntityManager to the world of this EntityManager. Declaration public void MoveEntitiesFrom(EntityManager srcEntities) Parameters Type Name Description EntityManager srcEntities The EntityManager whose entities are appropriated. Remarks The entities moved are owned by this EntityManager. Each World has one EntityManager, which manages all the entities in that world. This function allows you to transfer entities from one World to another. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before moving the entities and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. | Improve this Doc MoveEntitiesFrom(EntityManager, NativeArray<EntityRemapUtility.EntityRemapInfo>) Moves all entities managed by the specified EntityManager to the World of this EntityManager. Declaration public void MoveEntitiesFrom(EntityManager srcEntities, NativeArray<EntityRemapUtility.EntityRemapInfo> entityRemapping) Parameters Type Name Description EntityManager srcEntities The EntityManager whose entities are appropriated. NativeArray < EntityRemapUtility.EntityRemapInfo > entityRemapping A set of entity transformations to make during the transfer. Remarks After the move, the entities are managed by this EntityManager. Each World has one EntityManager, which manages all the entities in that world. This function allows you to transfer entities from one world to another. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before moving the entities and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. Exceptions Type Condition ArgumentException Thrown if you attempt to transfer entities to the EntityManager that already owns them. | Improve this Doc MoveEntitiesFrom(EntityManager, EntityQuery) Moves a selection of the entities managed by the specified EntityManager to the World of this EntityManager and fills an array with their Entity objects. Declaration public void MoveEntitiesFrom(EntityManager srcEntities, EntityQuery filter) Parameters Type Name Description EntityManager srcEntities The EntityManager whose entities are appropriated. EntityQuery filter A EntityQuery that defines the entities to move. Must be part of the source World. Remarks After the move, the entities are managed by this EntityManager. Use the output array to make post-move changes to the transferred entities. Each world has one EntityManager, which manages all the entities in that world. This function allows you to transfer entities from one World to another. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before moving the entities and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. Exceptions Type Condition ArgumentException | Improve this Doc MoveEntitiesFrom(EntityManager, EntityQuery, NativeArray<EntityRemapUtility.EntityRemapInfo>) Moves a selection of the entities managed by the specified EntityManager to the World of this EntityManager. Declaration public void MoveEntitiesFrom(EntityManager srcEntities, EntityQuery filter, NativeArray<EntityRemapUtility.EntityRemapInfo> entityRemapping) Parameters Type Name Description EntityManager srcEntities The EntityManager whose entities are appropriated. EntityQuery filter A EntityQuery that defines the entities to move. Must be part of the source World. NativeArray < EntityRemapUtility.EntityRemapInfo > entityRemapping A set of entity transformations to make during the transfer. Remarks After the move, the entities are managed by this EntityManager. Each world has one EntityManager, which manages all the entities in that world. This function allows you to transfer entities from one World to another. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before moving the entities and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. Exceptions Type Condition ArgumentException Thrown if the EntityQuery object used as the filter comes from a different world than the srcEntities EntityManager. | Improve this Doc MoveEntitiesFromInternalAll(EntityManager, NativeArray<EntityRemapUtility.EntityRemapInfo>) Declaration public void MoveEntitiesFromInternalAll(EntityManager srcEntities, NativeArray<EntityRemapUtility.EntityRemapInfo> entityRemapping) Parameters Type Name Description EntityManager srcEntities NativeArray < EntityRemapUtility.EntityRemapInfo > entityRemapping | Improve this Doc PrepareForDeserialize() Prepares an empty World to load serialized entities. Declaration public void PrepareForDeserialize() | Improve this Doc RemoveChunkComponent<T>(Entity) Removes a chunk component from the specified entity. Returns false if the entity did not have the component. Declaration public bool RemoveChunkComponent<T>(Entity entity) Parameters Type Name Description Entity entity The entity. Returns Type Description Boolean Type Parameters Name Description T The type of component to remove. Remarks A chunk component is common to all entities in a chunk. Removing the chunk component from an entity changes that entity's archetype and results in the entity being moved to a different chunk (that does not have the removed component). Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before removing the component and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. | Improve this Doc RemoveChunkComponentData<T>(EntityQuery) Removes a component from the chunks identified by a EntityQuery. Declaration public void RemoveChunkComponentData<T>(EntityQuery entityQuery) Parameters Type Name Description EntityQuery entityQuery The EntityQuery identifying the chunks to modify. Type Parameters Name Description T The type of component to remove. Remarks A chunk component is common to all entities in a chunk. You can access a chunk IComponentData instance through either the chunk itself or through an entity stored in that chunk. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before removing the component and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. | Improve this Doc RemoveComponent(NativeArray<Entity>, ComponentType) Remove a component from a set of entities. Declaration public void RemoveComponent(NativeArray<Entity> entities, ComponentType componentType) Parameters Type Name Description NativeArray < Entity > entities An array of Entity objects. ComponentType componentType The type of component to remove. Remarks Removing a component changes an entity's archetype and results in the entity being moved to a different chunk. If an Entity object in the entities array refers to an entity that has been destroyed, this function throws an ArgumentError exception. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before creating these chunks and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. | Improve this Doc RemoveComponent(Entity, ComponentType) Removes a component from an entity. Returns false if the entity did not have the component. Declaration public bool RemoveComponent(Entity entity, ComponentType componentType) Parameters Type Name Description Entity entity The entity to modify. ComponentType componentType The type of component to remove. Returns Type Description Boolean Remarks Removing a component changes an entity's archetype and results in the entity being moved to a different chunk. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before removing the component and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. | Improve this Doc RemoveComponent(EntityQuery, ComponentType) Removes a component from a set of entities defined by a EntityQuery. Declaration public void RemoveComponent(EntityQuery entityQuery, ComponentType componentType) Parameters Type Name Description EntityQuery entityQuery The EntityQuery defining the entities to modify. ComponentType componentType The type of component to remove. Remarks Removing a component changes an entity's archetype and results in the entity being moved to a different chunk. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before removing the component and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. | Improve this Doc RemoveComponent(EntityQuery, ComponentTypes) Removes a set of components from a set of entities defined by a EntityQuery. Declaration public void RemoveComponent(EntityQuery entityQuery, ComponentTypes types) Parameters Type Name Description EntityQuery entityQuery The EntityQuery defining the entities to modify. ComponentTypes types The types of components to add. Remarks Removing a component changes an entity's archetype and results in the entity being moved to a different chunk. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before removing the component and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. | Improve this Doc RemoveComponent<T>(NativeArray<Entity>) Removes a component from a set of entities. Declaration public void RemoveComponent<T>(NativeArray<Entity> entities) Parameters Type Name Description NativeArray < Entity > entities An array identifying the entities to modify. Type Parameters Name Description T The type of component to remove. Remarks Removing a component changes an entity's archetype and results in the entity being moved to a different chunk. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before removing the component and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. | Improve this Doc RemoveComponent<T>(Entity) Removes a component from an entity. Returns false if the entity did not have the component. Declaration public bool RemoveComponent<T>(Entity entity) Parameters Type Name Description Entity entity The entity. Returns Type Description Boolean Type Parameters Name Description T The type of component to remove. Remarks Removing a component changes an entity's archetype and results in the entity being moved to a different chunk. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before removing the component and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. | Improve this Doc RemoveComponent<T>(EntityQuery) Removes a component from a set of entities defined by a EntityQuery. Declaration public void RemoveComponent<T>(EntityQuery entityQuery) Parameters Type Name Description EntityQuery entityQuery The EntityQuery defining the entities to modify. Type Parameters Name Description T The type of component to remove. Remarks Removing a component changes an entity's archetype and results in the entity being moved to a different chunk. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before removing the component and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. | Improve this Doc SetArchetype(Entity, EntityArchetype) Declaration public void SetArchetype(Entity entity, EntityArchetype archetype) Parameters Type Name Description Entity entity EntityArchetype archetype | Improve this Doc SetChunkComponentData<T>(ArchetypeChunk, T) Sets the value of a chunk component. Declaration public void SetChunkComponentData<T>(ArchetypeChunk chunk, T componentValue) where T : struct, IComponentData Parameters Type Name Description ArchetypeChunk chunk The chunk to modify. T componentValue The component data to set. Type Parameters Name Description T The component type. Remarks A chunk component is common to all entities in a chunk. You can access a chunk IComponentData instance through either the chunk itself or through an entity stored in that chunk. Exceptions Type Condition ArgumentException Thrown if the ArchetypeChunk object is invalid. | Improve this Doc SetComponentData<T>(Entity, T) Sets the value of a component of an entity. Declaration public void SetComponentData<T>(Entity entity, T componentData) where T : struct, IComponentData Parameters Type Name Description Entity entity The entity. T componentData The data to set. Type Parameters Name Description T The component type. Exceptions Type Condition ArgumentException Thrown if the component type has no fields. | Improve this Doc SetEnabled(Entity, Boolean) Enabled entities are processed by systems, disabled entities are not. Adds or removes the Disabled component. By default EntityQuery does not include entities containing the Disabled component. If the entity was converted from a prefab and thus has a LinkedEntityGroup component, the entire group will enabled or disabled. Declaration public void SetEnabled(Entity entity, bool enabled) Parameters Type Name Description Entity entity The entity to enable or disable Boolean enabled True if the entity should be enabled | Improve this Doc SetSharedComponentData<T>(Entity, T) Sets the shared component of an entity. Declaration public void SetSharedComponentData<T>(Entity entity, T componentData) where T : struct, ISharedComponentData Parameters Type Name Description Entity entity The entity T componentData A shared component object containing the values to set. Type Parameters Name Description T The shared component type. Remarks Changing a shared component value of an entity results in the entity being moved to a different chunk. The entity moves to a chunk with other entities that have the same shared component values. A new chunk is created if no chunk with the same archetype and shared component values currently exists. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before setting the component and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. | Improve this Doc SetSharedComponentData<T>(EntityQuery, T) Sets the shared component of all entities in the query. Declaration public void SetSharedComponentData<T>(EntityQuery query, T componentData) where T : struct, ISharedComponentData Parameters Type Name Description EntityQuery query T componentData A shared component object containing the values to set. Type Parameters Name Description T The shared component type. Remarks The component data stays in the same chunk, the internal shared component data indices will be adjusted. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before setting the component and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. | Improve this Doc SwapComponents(ArchetypeChunk, Int32, ArchetypeChunk, Int32) Swaps the components of two entities. Declaration public void SwapComponents(ArchetypeChunk leftChunk, int leftIndex, ArchetypeChunk rightChunk, int rightIndex) Parameters Type Name Description ArchetypeChunk leftChunk A chunk containing one of the entities to swap. Int32 leftIndex The index within the leftChunk of the entity and components to swap. ArchetypeChunk rightChunk The chunk containing the other entity to swap. This chunk can be the same as the leftChunk . It also does not need to be in the same World as leftChunk . Int32 rightIndex The index within the rightChunk of the entity and components to swap. Remarks The entities must have the same components. However, this function can swap the components of entities in different worlds, so they do not need to have identical archetype instances. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before swapping the components and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. | Improve this Doc UnlockChunk(NativeArray<ArchetypeChunk>) Unlocks a set of chunks. Declaration public void UnlockChunk(NativeArray<ArchetypeChunk> chunks) Parameters Type Name Description NativeArray < ArchetypeChunk > chunks An array of chunks to unlock. | Improve this Doc UnlockChunk(ArchetypeChunk) Unlocks a chunk Declaration public void UnlockChunk(ArchetypeChunk chunk) Parameters Type Name Description ArchetypeChunk chunk The chunk to unlock. Extension Methods EntityManagerManagedComponentExtensions.GetComponentData<T>(EntityManager, Entity) EntityManagerManagedComponentExtensions.SetComponentData<T>(EntityManager, Entity, T) EntityManagerManagedComponentExtensions.GetChunkComponentData<T>(EntityManager, ArchetypeChunk) EntityManagerManagedComponentExtensions.GetChunkComponentData<T>(EntityManager, Entity) EntityManagerManagedComponentExtensions.SetChunkComponentData<T>(EntityManager, ArchetypeChunk, T) EntityManagerManagedComponentExtensions.AddComponentData<T>(EntityManager, Entity, T) EntityManagerManagedComponentExtensions.AddChunkComponentData<T>(EntityManager, Entity) EntityManagerManagedComponentExtensions.AddChunkComponentData<T>(EntityManager, EntityQuery, T) EntityManagerExtensions.Instantiate(EntityManager, GameObject) EntityManagerExtensions.Instantiate(EntityManager, GameObject, NativeArray<Entity>) EntityManagerExtensions.GetComponentObject<T>(EntityManager, Entity)"
  },
  "api/Unity.Entities.EntityManager.EntityManagerDebug.html": {
    "href": "api/Unity.Entities.EntityManager.EntityManagerDebug.html",
    "title": "Class EntityManager.EntityManagerDebug | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class EntityManager.EntityManagerDebug Provides information and utility functions for debugging. Inheritance Object EntityManager.EntityManagerDebug Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class EntityManagerDebug Constructors | Improve this Doc EntityManagerDebug(EntityManager) Declaration public EntityManagerDebug(EntityManager entityManager) Parameters Type Name Description EntityManager entityManager Properties | Improve this Doc EntityCount Declaration public int EntityCount { get; } Property Value Type Description Int32 | Improve this Doc MemoryInitPattern Declaration public byte MemoryInitPattern { get; set; } Property Value Type Description Byte | Improve this Doc UseMemoryInitPattern Declaration public bool UseMemoryInitPattern { get; set; } Property Value Type Description Boolean Methods | Improve this Doc CheckInternalConsistency() Declaration [Conditional(\"ENABLE_UNITY_COLLECTIONS_CHECKS\")] public void CheckInternalConsistency() | Improve this Doc GetComponentBoxed(Entity, Type) Declaration public object GetComponentBoxed(Entity entity, Type type) Parameters Type Name Description Entity entity Type type Returns Type Description Object | Improve this Doc GetComponentBoxed(Entity, ComponentType) Declaration public object GetComponentBoxed(Entity entity, ComponentType type) Parameters Type Name Description Entity entity ComponentType type Returns Type Description Object | Improve this Doc GetEntityInfo(Entity) Declaration public string GetEntityInfo(Entity entity) Parameters Type Name Description Entity entity Returns Type Description String | Improve this Doc IsSharedComponentManagerEmpty() Declaration public bool IsSharedComponentManagerEmpty() Returns Type Description Boolean | Improve this Doc LogEntityInfo(Entity) Declaration public void LogEntityInfo(Entity entity) Parameters Type Name Description Entity entity | Improve this Doc PoisonUnusedDataInAllChunks(EntityArchetype, Byte) Declaration public void PoisonUnusedDataInAllChunks(EntityArchetype archetype, byte value) Parameters Type Name Description EntityArchetype archetype Byte value | Improve this Doc SetGlobalSystemVersion(UInt32) Declaration public void SetGlobalSystemVersion(uint version) Parameters Type Name Description UInt32 version"
  },
  "api/Unity.Entities.EntityInChunk.html": {
    "href": "api/Unity.Entities.EntityInChunk.html",
    "title": "Struct EntityInChunk | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct EntityInChunk Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct EntityInChunk : IComparable<EntityInChunk>, IEquatable<EntityInChunk> Methods | Improve this Doc CompareTo(EntityInChunk) Declaration public int CompareTo(EntityInChunk other) Parameters Type Name Description EntityInChunk other Returns Type Description Int32 | Improve this Doc Equals(EntityInChunk) Declaration public bool Equals(EntityInChunk other) Parameters Type Name Description EntityInChunk other Returns Type Description Boolean"
  },
  "api/Unity.Entities.EntityCommandBuffer.Concurrent.html": {
    "href": "api/Unity.Entities.EntityCommandBuffer.Concurrent.html",
    "title": "Struct EntityCommandBuffer.Concurrent | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct EntityCommandBuffer.Concurrent Allows concurrent (deterministic) command buffer recording. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct Concurrent Methods | Improve this Doc AddBuffer<T>(Int32, Entity) Declaration public DynamicBuffer<T> AddBuffer<T>(int jobIndex, Entity e) where T : struct, IBufferElementData Parameters Type Name Description Int32 jobIndex Entity e Returns Type Description DynamicBuffer <T> Type Parameters Name Description T | Improve this Doc AddComponent(Int32, Entity, ComponentType) Declaration public void AddComponent(int jobIndex, Entity e, ComponentType componentType) Parameters Type Name Description Int32 jobIndex Entity e ComponentType componentType | Improve this Doc AddComponent<T>(Int32, Entity) Declaration public void AddComponent<T>(int jobIndex, Entity e) where T : struct, IComponentData Parameters Type Name Description Int32 jobIndex Entity e Type Parameters Name Description T | Improve this Doc AddComponent<T>(Int32, Entity, T) Declaration public void AddComponent<T>(int jobIndex, Entity e, T component) where T : struct, IComponentData Parameters Type Name Description Int32 jobIndex Entity e T component Type Parameters Name Description T | Improve this Doc AddSharedComponent<T>(Int32, Entity, T) Declaration public void AddSharedComponent<T>(int jobIndex, Entity e, T component) where T : struct, ISharedComponentData Parameters Type Name Description Int32 jobIndex Entity e T component Type Parameters Name Description T | Improve this Doc CreateEntity(Int32, EntityArchetype) Declaration public Entity CreateEntity(int jobIndex, EntityArchetype archetype = default(EntityArchetype)) Parameters Type Name Description Int32 jobIndex EntityArchetype archetype Returns Type Description Entity | Improve this Doc DestroyEntity(Int32, Entity) Declaration public void DestroyEntity(int jobIndex, Entity e) Parameters Type Name Description Int32 jobIndex Entity e | Improve this Doc Instantiate(Int32, Entity) Declaration public Entity Instantiate(int jobIndex, Entity e) Parameters Type Name Description Int32 jobIndex Entity e Returns Type Description Entity | Improve this Doc RemoveComponent(Int32, Entity, ComponentType) Declaration public void RemoveComponent(int jobIndex, Entity e, ComponentType componentType) Parameters Type Name Description Int32 jobIndex Entity e ComponentType componentType | Improve this Doc RemoveComponent<T>(Int32, Entity) Declaration public void RemoveComponent<T>(int jobIndex, Entity e) Parameters Type Name Description Int32 jobIndex Entity e Type Parameters Name Description T | Improve this Doc SetBuffer<T>(Int32, Entity) Declaration public DynamicBuffer<T> SetBuffer<T>(int jobIndex, Entity e) where T : struct, IBufferElementData Parameters Type Name Description Int32 jobIndex Entity e Returns Type Description DynamicBuffer <T> Type Parameters Name Description T | Improve this Doc SetComponent<T>(Int32, Entity, T) Declaration public void SetComponent<T>(int jobIndex, Entity e, T component) where T : struct, IComponentData Parameters Type Name Description Int32 jobIndex Entity e T component Type Parameters Name Description T | Improve this Doc SetSharedComponent<T>(Int32, Entity, T) Declaration public void SetSharedComponent<T>(int jobIndex, Entity e, T component) where T : struct, ISharedComponentData Parameters Type Name Description Int32 jobIndex Entity e T component Type Parameters Name Description T"
  },
  "api/Unity.Entities.EntityChanges.html": {
    "href": "api/Unity.Entities.EntityChanges.html",
    "title": "Struct EntityChanges | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Struct EntityChanges Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct EntityChanges : IDisposable Constructors | Improve this Doc EntityChanges(EntityChangeSet, EntityChangeSet) Declaration public EntityChanges(EntityChangeSet forwardChangeSet, EntityChangeSet reverseChangeSet) Parameters Type Name Description EntityChangeSet forwardChangeSet EntityChangeSet reverseChangeSet Properties | Improve this Doc AnyChanges Declaration public bool AnyChanges { get; } Property Value Type Description Boolean | Improve this Doc ForwardChangeSet Declaration public EntityChangeSet ForwardChangeSet { get; } Property Value Type Description EntityChangeSet | Improve this Doc HasForwardChangeSet Declaration public bool HasForwardChangeSet { get; } Property Value Type Description Boolean | Improve this Doc HasReverseChangeSet Declaration public bool HasReverseChangeSet { get; } Property Value Type Description Boolean | Improve this Doc ReverseChangeSet Declaration public EntityChangeSet ReverseChangeSet { get; } Property Value Type Description EntityChangeSet Methods | Improve this Doc Dispose() Declaration public void Dispose()"
  },
  "api/Unity.Entities.Editor.html": {
    "href": "api/Unity.Entities.Editor.html",
    "title": "Namespace Unity.Entities.Editor | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Namespace Unity.Entities.Editor Classes ComponentDataProxyBaseEditor DynamicBufferProxyBaseEditor EntitySelectionProxy ExtraTypesProvider GameObjectEntityEditor StartLiveLinkWindow Delegates EntitySelectionProxy.EntityControlSelectButtonHandler"
  },
  "api/Unity.Entities.ComponentSystemGroup.html": {
    "href": "api/Unity.Entities.ComponentSystemGroup.html",
    "title": "Class ComponentSystemGroup | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class ComponentSystemGroup Inheritance Object ComponentSystemBase ComponentSystem ComponentSystemGroup InitializationSystemGroup LateSimulationSystemGroup PresentationSystemGroup SimulationSystemGroup SceneSystemGroup TransformSystemGroup Inherited Members ComponentSystem.PostUpdateCommands ComponentSystem.InitEntityQueryCache(Int32) ComponentSystem.Entities ComponentSystem.Update() ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnCreate() ComponentSystemBase.OnDestroyManager() ComponentSystemBase.OnCreateManager() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetArchetypeChunkComponentType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkComponentTypeDynamic(ComponentType) ComponentSystemBase.GetArchetypeChunkBufferType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkSharedComponentType<T>() ComponentSystemBase.GetArchetypeChunkEntityType() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public abstract class ComponentSystemGroup : ComponentSystem Fields | Improve this Doc m_systemsToRemove Declaration protected List<ComponentSystemBase> m_systemsToRemove Field Value Type Description List < ComponentSystemBase > | Improve this Doc m_systemsToUpdate Declaration protected List<ComponentSystemBase> m_systemsToUpdate Field Value Type Description List < ComponentSystemBase > | Improve this Doc UpdateCallback An optional callback. If set, this group's systems will be updated in a loop while this callback returns true. This can be used to implement custom processing before/after update (first call should return true, second should return false), or to run a group's systems multiple times (return true more than once). The group is passed as the first parameter. Declaration public Func<ComponentSystemGroup, bool> UpdateCallback Field Value Type Description Func < ComponentSystemGroup , Boolean > Properties | Improve this Doc Systems Declaration public virtual IEnumerable<ComponentSystemBase> Systems { get; } Property Value Type Description IEnumerable < ComponentSystemBase > Methods | Improve this Doc AddSystemToUpdateList(ComponentSystemBase) Declaration public void AddSystemToUpdateList(ComponentSystemBase sys) Parameters Type Name Description ComponentSystemBase sys | Improve this Doc OnStopRunning() Declaration protected override void OnStopRunning() Overrides ComponentSystemBase.OnStopRunning() | Improve this Doc OnUpdate() Declaration protected override void OnUpdate() Overrides ComponentSystem.OnUpdate() | Improve this Doc RemoveSystemFromUpdateList(ComponentSystemBase) Declaration public void RemoveSystemFromUpdateList(ComponentSystemBase sys) Parameters Type Name Description ComponentSystemBase sys | Improve this Doc SortSystemUpdateList() Declaration public virtual void SortSystemUpdateList() Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Entities.LambdaJobQueryConstructionMethods.html": {
    "href": "api/Unity.Entities.LambdaJobQueryConstructionMethods.html",
    "title": "Class LambdaJobQueryConstructionMethods | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class LambdaJobQueryConstructionMethods Inheritance Object LambdaJobQueryConstructionMethods Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class LambdaJobQueryConstructionMethods Methods | Improve this Doc WithAll<T>(ForEachLambdaJobDescription) Declaration public static ForEachLambdaJobDescription WithAll<T>(this ForEachLambdaJobDescription description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription Type Parameters Name Description T | Improve this Doc WithAll<T>(ForEachLambdaJobDescriptionJCS) Declaration public static ForEachLambdaJobDescriptionJCS WithAll<T>(this ForEachLambdaJobDescriptionJCS description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescriptionJCS description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescriptionJCS Type Parameters Name Description T | Improve this Doc WithAll<T>(LambdaJobChunkDescription) Declaration public static LambdaJobChunkDescription WithAll<T>(this LambdaJobChunkDescription description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription Type Parameters Name Description T | Improve this Doc WithAll<T1, T2>(ForEachLambdaJobDescription) Declaration public static ForEachLambdaJobDescription WithAll<T1, T2>(this ForEachLambdaJobDescription description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription Type Parameters Name Description T1 T2 | Improve this Doc WithAll<T1, T2>(ForEachLambdaJobDescriptionJCS) Declaration public static ForEachLambdaJobDescriptionJCS WithAll<T1, T2>(this ForEachLambdaJobDescriptionJCS description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescriptionJCS description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescriptionJCS Type Parameters Name Description T1 T2 | Improve this Doc WithAll<T1, T2>(LambdaJobChunkDescription) Declaration public static LambdaJobChunkDescription WithAll<T1, T2>(this LambdaJobChunkDescription description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription Type Parameters Name Description T1 T2 | Improve this Doc WithAll<T1, T2, T3>(ForEachLambdaJobDescription) Declaration public static ForEachLambdaJobDescription WithAll<T1, T2, T3>(this ForEachLambdaJobDescription description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription Type Parameters Name Description T1 T2 T3 | Improve this Doc WithAll<T1, T2, T3>(ForEachLambdaJobDescriptionJCS) Declaration public static ForEachLambdaJobDescriptionJCS WithAll<T1, T2, T3>(this ForEachLambdaJobDescriptionJCS description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescriptionJCS description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescriptionJCS Type Parameters Name Description T1 T2 T3 | Improve this Doc WithAll<T1, T2, T3>(LambdaJobChunkDescription) Declaration public static LambdaJobChunkDescription WithAll<T1, T2, T3>(this LambdaJobChunkDescription description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription Type Parameters Name Description T1 T2 T3 | Improve this Doc WithAny<T>(ForEachLambdaJobDescription) Declaration public static ForEachLambdaJobDescription WithAny<T>(this ForEachLambdaJobDescription description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription Type Parameters Name Description T | Improve this Doc WithAny<T>(ForEachLambdaJobDescriptionJCS) Declaration public static ForEachLambdaJobDescriptionJCS WithAny<T>(this ForEachLambdaJobDescriptionJCS description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescriptionJCS description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescriptionJCS Type Parameters Name Description T | Improve this Doc WithAny<T>(LambdaJobChunkDescription) Declaration public static LambdaJobChunkDescription WithAny<T>(this LambdaJobChunkDescription description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription Type Parameters Name Description T | Improve this Doc WithAny<T1, T2>(ForEachLambdaJobDescription) Declaration public static ForEachLambdaJobDescription WithAny<T1, T2>(this ForEachLambdaJobDescription description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription Type Parameters Name Description T1 T2 | Improve this Doc WithAny<T1, T2>(ForEachLambdaJobDescriptionJCS) Declaration public static ForEachLambdaJobDescriptionJCS WithAny<T1, T2>(this ForEachLambdaJobDescriptionJCS description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescriptionJCS description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescriptionJCS Type Parameters Name Description T1 T2 | Improve this Doc WithAny<T1, T2>(LambdaJobChunkDescription) Declaration public static LambdaJobChunkDescription WithAny<T1, T2>(this LambdaJobChunkDescription description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription Type Parameters Name Description T1 T2 | Improve this Doc WithAny<T1, T2, T3>(ForEachLambdaJobDescription) Declaration public static ForEachLambdaJobDescription WithAny<T1, T2, T3>(this ForEachLambdaJobDescription description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription Type Parameters Name Description T1 T2 T3 | Improve this Doc WithAny<T1, T2, T3>(ForEachLambdaJobDescriptionJCS) Declaration public static ForEachLambdaJobDescriptionJCS WithAny<T1, T2, T3>(this ForEachLambdaJobDescriptionJCS description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescriptionJCS description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescriptionJCS Type Parameters Name Description T1 T2 T3 | Improve this Doc WithAny<T1, T2, T3>(LambdaJobChunkDescription) Declaration public static LambdaJobChunkDescription WithAny<T1, T2, T3>(this LambdaJobChunkDescription description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription Type Parameters Name Description T1 T2 T3 | Improve this Doc WithChangeFilter<T>(ForEachLambdaJobDescription) Declaration public static ForEachLambdaJobDescription WithChangeFilter<T>(this ForEachLambdaJobDescription description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription Type Parameters Name Description T | Improve this Doc WithChangeFilter<T>(ForEachLambdaJobDescriptionJCS) Declaration public static ForEachLambdaJobDescriptionJCS WithChangeFilter<T>(this ForEachLambdaJobDescriptionJCS description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescriptionJCS description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescriptionJCS Type Parameters Name Description T | Improve this Doc WithChangeFilter<T>(LambdaJobChunkDescription) Declaration public static LambdaJobChunkDescription WithChangeFilter<T>(this LambdaJobChunkDescription description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription Type Parameters Name Description T | Improve this Doc WithChangeFilter<T1, T2>(ForEachLambdaJobDescription) Declaration public static ForEachLambdaJobDescription WithChangeFilter<T1, T2>(this ForEachLambdaJobDescription description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription Type Parameters Name Description T1 T2 | Improve this Doc WithChangeFilter<T1, T2>(ForEachLambdaJobDescriptionJCS) Declaration public static ForEachLambdaJobDescriptionJCS WithChangeFilter<T1, T2>(this ForEachLambdaJobDescriptionJCS description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescriptionJCS description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescriptionJCS Type Parameters Name Description T1 T2 | Improve this Doc WithChangeFilter<T1, T2>(LambdaJobChunkDescription) Declaration public static LambdaJobChunkDescription WithChangeFilter<T1, T2>(this LambdaJobChunkDescription description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription Type Parameters Name Description T1 T2 | Improve this Doc WithEntityQueryOptions(ForEachLambdaJobDescription, EntityQueryOptions) Declaration public static ForEachLambdaJobDescription WithEntityQueryOptions(this ForEachLambdaJobDescription description, EntityQueryOptions options) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription description EntityQueryOptions options Returns Type Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription | Improve this Doc WithEntityQueryOptions(ForEachLambdaJobDescriptionJCS, EntityQueryOptions) Declaration public static ForEachLambdaJobDescriptionJCS WithEntityQueryOptions(this ForEachLambdaJobDescriptionJCS description, EntityQueryOptions options) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescriptionJCS description EntityQueryOptions options Returns Type Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescriptionJCS | Improve this Doc WithEntityQueryOptions(LambdaJobChunkDescription, EntityQueryOptions) Declaration public static LambdaJobChunkDescription WithEntityQueryOptions(this LambdaJobChunkDescription description, EntityQueryOptions options) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription description EntityQueryOptions options Returns Type Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription | Improve this Doc WithNone<T>(ForEachLambdaJobDescription) Declaration public static ForEachLambdaJobDescription WithNone<T>(this ForEachLambdaJobDescription description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription Type Parameters Name Description T | Improve this Doc WithNone<T>(ForEachLambdaJobDescriptionJCS) Declaration public static ForEachLambdaJobDescriptionJCS WithNone<T>(this ForEachLambdaJobDescriptionJCS description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescriptionJCS description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescriptionJCS Type Parameters Name Description T | Improve this Doc WithNone<T>(LambdaJobChunkDescription) Declaration public static LambdaJobChunkDescription WithNone<T>(this LambdaJobChunkDescription description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription Type Parameters Name Description T | Improve this Doc WithNone<T1, T2>(ForEachLambdaJobDescription) Declaration public static ForEachLambdaJobDescription WithNone<T1, T2>(this ForEachLambdaJobDescription description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription Type Parameters Name Description T1 T2 | Improve this Doc WithNone<T1, T2>(ForEachLambdaJobDescriptionJCS) Declaration public static ForEachLambdaJobDescriptionJCS WithNone<T1, T2>(this ForEachLambdaJobDescriptionJCS description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescriptionJCS description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescriptionJCS Type Parameters Name Description T1 T2 | Improve this Doc WithNone<T1, T2>(LambdaJobChunkDescription) Declaration public static LambdaJobChunkDescription WithNone<T1, T2>(this LambdaJobChunkDescription description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription Type Parameters Name Description T1 T2 | Improve this Doc WithNone<T1, T2, T3>(ForEachLambdaJobDescription) Declaration public static ForEachLambdaJobDescription WithNone<T1, T2, T3>(this ForEachLambdaJobDescription description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription Type Parameters Name Description T1 T2 T3 | Improve this Doc WithNone<T1, T2, T3>(ForEachLambdaJobDescriptionJCS) Declaration public static ForEachLambdaJobDescriptionJCS WithNone<T1, T2, T3>(this ForEachLambdaJobDescriptionJCS description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescriptionJCS description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescriptionJCS Type Parameters Name Description T1 T2 T3 | Improve this Doc WithNone<T1, T2, T3>(LambdaJobChunkDescription) Declaration public static LambdaJobChunkDescription WithNone<T1, T2, T3>(this LambdaJobChunkDescription description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription Type Parameters Name Description T1 T2 T3 | Improve this Doc WithSharedComponentFilter<T>(ForEachLambdaJobDescription, T) Declaration public static ForEachLambdaJobDescription WithSharedComponentFilter<T>(this ForEachLambdaJobDescription description, T sharedComponent) where T : struct, ISharedComponentData Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription description T sharedComponent Returns Type Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription Type Parameters Name Description T | Improve this Doc WithSharedComponentFilter<T>(ForEachLambdaJobDescriptionJCS, T) Declaration public static ForEachLambdaJobDescriptionJCS WithSharedComponentFilter<T>(this ForEachLambdaJobDescriptionJCS description, T sharedComponent) where T : struct, ISharedComponentData Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescriptionJCS description T sharedComponent Returns Type Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescriptionJCS Type Parameters Name Description T | Improve this Doc WithSharedComponentFilter<T>(LambdaJobChunkDescription, T) Declaration public static LambdaJobChunkDescription WithSharedComponentFilter<T>(this LambdaJobChunkDescription description, T sharedComponent) where T : struct, ISharedComponentData Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription description T sharedComponent Returns Type Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription Type Parameters Name Description T | Improve this Doc WithStoreEntityQueryInField(ForEachLambdaJobDescription, ref EntityQuery) Declaration public static ForEachLambdaJobDescription WithStoreEntityQueryInField(this ForEachLambdaJobDescription description, ref EntityQuery query) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription description EntityQuery query Returns Type Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription | Improve this Doc WithStoreEntityQueryInField(ForEachLambdaJobDescriptionJCS, ref EntityQuery) Declaration public static ForEachLambdaJobDescriptionJCS WithStoreEntityQueryInField(this ForEachLambdaJobDescriptionJCS description, ref EntityQuery query) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescriptionJCS description EntityQuery query Returns Type Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescriptionJCS | Improve this Doc WithStoreEntityQueryInField(LambdaJobChunkDescription, ref EntityQuery) Declaration public static LambdaJobChunkDescription WithStoreEntityQueryInField(this LambdaJobChunkDescription description, ref EntityQuery query) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription description EntityQuery query Returns Type Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription"
  },
  "api/Unity.Entities.LambdaJobDescriptionExecutionMethodsJCS.html": {
    "href": "api/Unity.Entities.LambdaJobDescriptionExecutionMethodsJCS.html",
    "title": "Class LambdaJobDescriptionExecutionMethodsJCS | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Class LambdaJobDescriptionExecutionMethodsJCS Inheritance Object LambdaJobDescriptionExecutionMethodsJCS Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class LambdaJobDescriptionExecutionMethodsJCS Methods | Improve this Doc Run<TDescription>(TDescription) Declaration public static void Run<TDescription>(this TDescription description) where TDescription : ILambdaJobExecutionDescriptionJCS Parameters Type Name Description TDescription description Type Parameters Name Description TDescription | Improve this Doc Schedule<TDescription>(TDescription, JobHandle) Declaration public static JobHandle Schedule<TDescription>(this TDescription description, JobHandle dependency) where TDescription : ILambdaJobExecutionDescriptionJCS Parameters Type Name Description TDescription description JobHandle dependency Returns Type Description JobHandle Type Parameters Name Description TDescription"
  },
  "api/Unity.Entities.ISystemStateBufferElementData.html": {
    "href": "api/Unity.Entities.ISystemStateBufferElementData.html",
    "title": "Interface ISystemStateBufferElementData | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Interface ISystemStateBufferElementData An interface for a component type that stores system-specific data in a buffer. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface ISystemStateBufferElementData : IBufferElementData See Also ISystemStateComponentData IBufferElementData"
  },
  "api/Unity.Entities.ISharedComponentData.html": {
    "href": "api/Unity.Entities.ISharedComponentData.html",
    "title": "Interface ISharedComponentData | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Interface ISharedComponentData An interface for a component type whose value is shared by all entities in the same chunk. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface ISharedComponentData Remarks ISharedComponentData implementations are subject to the same constraints as IComponentData . ISharedComponent implementations must implement IEquatable<T> and GetHashCode() . Note: Currently, the ISharedComponentData interface allows fields having reference types. However, we plan to restrict ISharedComponentData to unmanaged, blittable types only in a future version of the Entities package. When you add a shared component to an EntityArchetype , ECS stores entities assigned the same values of that shared component in the same chunks. Thus, shared components further categorize entities within the same archetype. Use shared components when many entities share the same data values and it is more efficient to process all the entities of a given value together. For example, the RenderMesh shared component (in the Hybrid.Rendering package) defines a set of fields whose values can be shared by many 3D objects. Since all the entities with the same values for the RenderMesh fields are stored in the same chunks, the renderer can efficiently batch the draw calls for those entities based on the shared values. You must set the value of a shared component on the main thread using either the EntityManager or an EntityCommandBuffer . When you change a shared component value, the affected entity is moved to a different chunk. If a chunk already exists with the same values, and has enough room, the entity is moved to that chunk. Otherwise, a new chunk is allocated. Changing a shared component value is a structural change that potentially creates a sync-point in your application. You can find entities with a particular type of shared component using either EntityQuery or EntityQueryBuilder in the same way you select entities with specific types of IComponentData . You can also filter an entity query to select only entities with a specific shared component value using SetSharedComponentFilter<SharedComponent1>(SharedComponent1) . You can filter based on two different shared components. (EntityQueryBuilder does not support filtering queries by shared component value.) Avoid too many shared components and values on the same archetype. Since each combination of values, whether in the same component type or in different shared components, is stored in different chunks, too many combinations can lead to poor chunk utilization. Use the Entity Debugger window in the Unity Editor (menu: Window > Analysis > Entity Debugger ) to monitor chunk utilization. See Shared Component Data for additional information."
  },
  "api/Unity.Entities.IRefCounted.html": {
    "href": "api/Unity.Entities.IRefCounted.html",
    "title": "Interface IRefCounted | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Interface IRefCounted Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface IRefCounted Methods | Improve this Doc Release() Declaration void Release() | Improve this Doc Retain() Declaration void Retain()"
  },
  "api/Unity.Entities.IL2CPPProcessing.html": {
    "href": "api/Unity.Entities.IL2CPPProcessing.html",
    "title": "Namespace Unity.Entities.IL2CPPProcessing | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Namespace Unity.Entities.IL2CPPProcessing Classes ComponentSystemProcessing"
  },
  "api/Unity.Entities.Hybrid.ResourceMetaData.Type.html": {
    "href": "api/Unity.Entities.Hybrid.ResourceMetaData.Type.html",
    "title": "Enum ResourceMetaData.Type | Unity Entities Documentation | 0.7.0-preview.13",
    "keywords": "Enum ResourceMetaData.Type Currently Scene types are supported, assetbundles will need to be supported when dependencies are implemented Namespace : Unity.Entities.Hybrid <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public enum Type Fields Name Description Scene Unknown"
  }
}