{
  "api/Unity.Transforms.RotationPivot.html": {
    "href": "api/Unity.Transforms.RotationPivot.html",
    "title": "Struct RotationPivot | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct RotationPivot Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] [WriteGroup(typeof(CompositeRotation))] public struct RotationPivot : IComponentData Fields Value Declaration public float3 Value Field Value Type Description float3"
  },
  "api/Unity.Transforms.RotationEulerZYX.html": {
    "href": "api/Unity.Transforms.RotationEulerZYX.html",
    "title": "Struct RotationEulerZYX | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct RotationEulerZYX Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] [WriteGroup(typeof(Rotation))] public struct RotationEulerZYX : IComponentData Fields Value Declaration public float3 Value Field Value Type Description float3"
  },
  "api/Unity.Transforms.RotationEulerZXY.html": {
    "href": "api/Unity.Transforms.RotationEulerZXY.html",
    "title": "Struct RotationEulerZXY | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct RotationEulerZXY Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] [WriteGroup(typeof(Rotation))] public struct RotationEulerZXY : IComponentData Fields Value Declaration public float3 Value Field Value Type Description float3"
  },
  "api/Unity.Transforms.RotationEulerYZX.html": {
    "href": "api/Unity.Transforms.RotationEulerYZX.html",
    "title": "Struct RotationEulerYZX | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct RotationEulerYZX Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] [WriteGroup(typeof(Rotation))] public struct RotationEulerYZX : IComponentData Fields Value Declaration public float3 Value Field Value Type Description float3"
  },
  "api/Unity.Transforms.RotationEulerYXZ.html": {
    "href": "api/Unity.Transforms.RotationEulerYXZ.html",
    "title": "Struct RotationEulerYXZ | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct RotationEulerYXZ Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] [WriteGroup(typeof(Rotation))] public struct RotationEulerYXZ : IComponentData Fields Value Declaration public float3 Value Field Value Type Description float3"
  },
  "api/Unity.Transforms.RotationEulerXZY.html": {
    "href": "api/Unity.Transforms.RotationEulerXZY.html",
    "title": "Struct RotationEulerXZY | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct RotationEulerXZY Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] [WriteGroup(typeof(Rotation))] public struct RotationEulerXZY : IComponentData Fields Value Declaration public float3 Value Field Value Type Description float3"
  },
  "api/Unity.Transforms.RotationEulerXYZ.html": {
    "href": "api/Unity.Transforms.RotationEulerXYZ.html",
    "title": "Struct RotationEulerXYZ | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct RotationEulerXYZ Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] [WriteGroup(typeof(Rotation))] public struct RotationEulerXYZ : IComponentData Fields Value Declaration public float3 Value Field Value Type Description float3"
  },
  "api/Unity.Build.ComponentContainer-2.html": {
    "href": "api/Unity.Build.ComponentContainer-2.html",
    "title": "Class ComponentContainer<TObject, TComponent> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class ComponentContainer<TObject, TComponent> Base class that stores a set of unique component. Other ComponentContainer<TObject, TComponent> can be added as dependencies to get inherited or overridden items. Inheritance Object ScriptableObjectPropertyContainer <TObject> ComponentContainer<TObject, TComponent> BuildSettings Inherited Members ScriptableObjectPropertyContainer<TObject>.JsonVisitorRegistration ScriptableObjectPropertyContainer<TObject>.AssetChanged ScriptableObjectPropertyContainer<TObject>.CreateInstance(Action<TObject>) ScriptableObjectPropertyContainer<TObject>.CreateAsset(String, Action<TObject>) ScriptableObjectPropertyContainer<TObject>.LoadAsset(String) ScriptableObjectPropertyContainer<TObject>.LoadAsset(GUID) ScriptableObjectPropertyContainer<TObject>.SaveAsset(String) ScriptableObjectPropertyContainer<TObject>.RestoreAsset() ScriptableObjectPropertyContainer<TObject>.SerializeToJson() ScriptableObjectPropertyContainer<TObject>.DeserializeFromJson(ScriptableObjectPropertyContainer<TObject>, String) ScriptableObjectPropertyContainer<TObject>.SerializeToPath(String) ScriptableObjectPropertyContainer<TObject>.DeserializeFromPath(ScriptableObjectPropertyContainer<TObject>, String) ScriptableObjectPropertyContainer<TObject>.SerializeToStream(Stream) ScriptableObjectPropertyContainer<TObject>.DeserializeFromStream(ScriptableObjectPropertyContainer<TObject>, Stream) ScriptableObjectPropertyContainer<TObject>.OnBeforeSerialize() ScriptableObjectPropertyContainer<TObject>.OnAfterDeserialize() ScriptableObjectPropertyContainer<TObject>.OnEnable() Namespace : Unity.Build <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class ComponentContainer<TObject, TComponent> : ScriptableObjectPropertyContainer<TObject>, ISerializationCallbackReceiver where TObject : ScriptableObject Type Parameters Name Description TObject TComponent Components base type. Methods AddDependencies(ComponentContainer<TObject, TComponent>[]) Add multiple ComponentContainer<TObject, TComponent> dependencies. Declaration public void AddDependencies(params ComponentContainer<TObject, TComponent>[] dependencies) Parameters Type Name Description ComponentContainer <TObject, TComponent>[] dependencies The dependencies to add to this ComponentContainer<TObject, TComponent> . AddDependency(ComponentContainer<TObject, TComponent>) Add a ComponentContainer<TObject, TComponent> dependency. Declaration public void AddDependency(ComponentContainer<TObject, TComponent> dependency) Parameters Type Name Description ComponentContainer <TObject, TComponent> dependency The dependency to add to this ComponentContainer<TObject, TComponent> . ClearComponents() Remove all components from this ComponentContainer<TObject, TComponent> . Declaration public void ClearComponents() ClearDependencies() Remove all dependencies from this ComponentContainer<TObject, TComponent> . Declaration public void ClearDependencies() GetComponent(Type) Get the value of a Type component. Declaration public TComponent GetComponent(Type type) Parameters Type Name Description Type type Type of the component. Returns Type Description TComponent GetComponent<T>() Get the value of a T component. Declaration public T GetComponent<T>() where T : TComponent Returns Type Description T Type Parameters Name Description T Type of the component. GetComponents() Get a flatten list of all components from this ComponentContainer<TObject, TComponent> and its dependencies. Declaration public List<TComponent> GetComponents() Returns Type Description List <TComponent> GetDependencies() Get a list of all the dependencies for this ComponentContainer<TObject, TComponent> . Declaration public IReadOnlyList<ComponentContainer<TObject, TComponent>> GetDependencies() Returns Type Description IReadOnlyList < ComponentContainer <TObject, TComponent>> HasComponent(Type) Determine if a Type component is stored in this ComponentContainer<TObject, TComponent> or its dependencies. Declaration public bool HasComponent(Type type) Parameters Type Name Description Type type Type of the component. Returns Type Description Boolean HasComponent<T>() Determine if a T component is stored in this ComponentContainer<TObject, TComponent> or its dependencies. Declaration public bool HasComponent<T>() where T : TComponent Returns Type Description Boolean Type Parameters Name Description T Type of the component. IsComponentInherited(Type) Determine if a Type component is inherited from a dependency. Declaration public bool IsComponentInherited(Type type) Parameters Type Name Description Type type Type of the component. Returns Type Description Boolean IsComponentInherited<T>() Determine if a T component is inherited from a dependency. Declaration public bool IsComponentInherited<T>() where T : TComponent Returns Type Description Boolean Type Parameters Name Description T Type of the component. IsComponentOverridden(Type) Determine if a Type component overrides a dependency. Declaration public bool IsComponentOverridden(Type type) Parameters Type Name Description Type type Type of the component. Returns Type Description Boolean IsComponentOverridden<T>() Determine if a T component overrides a dependency. Declaration public bool IsComponentOverridden<T>() where T : TComponent Returns Type Description Boolean Type Parameters Name Description T Type of the component. RemoveComponent(Type) Remove a Type component from this ComponentContainer<TObject, TComponent> . Declaration public bool RemoveComponent(Type type) Parameters Type Name Description Type type Type of the component. Returns Type Description Boolean RemoveComponent<T>() Remove a T component from this ComponentContainer<TObject, TComponent> . Declaration public bool RemoveComponent<T>() where T : TComponent Returns Type Description Boolean Type Parameters Name Description T Type of the component. RemoveDependencies(ComponentContainer<TObject, TComponent>[]) Remove multiple ComponentContainer<TObject, TComponent> dependencies. Declaration public void RemoveDependencies(params ComponentContainer<TObject, TComponent>[] dependencies) Parameters Type Name Description ComponentContainer <TObject, TComponent>[] dependencies The dependencies to remove from this ComponentContainer<TObject, TComponent> . RemoveDependency(ComponentContainer<TObject, TComponent>) Remove a ComponentContainer<TObject, TComponent> dependency. Declaration public bool RemoveDependency(ComponentContainer<TObject, TComponent> dependency) Parameters Type Name Description ComponentContainer <TObject, TComponent> dependency The dependency to remove from this ComponentContainer<TObject, TComponent> . Returns Type Description Boolean Reset() Declaration protected override void Reset() Overrides Unity.Build.ScriptableObjectPropertyContainer<TObject>.Reset() Sanitize() Declaration protected override void Sanitize() Overrides Unity.Build.ScriptableObjectPropertyContainer<TObject>.Sanitize() SetComponent(Type, TComponent) Set the value of a Type component. Declaration public void SetComponent(Type type, TComponent value) Parameters Type Name Description Type type Type of the component. TComponent value Value of the component to set. SetComponent<T>(T) Set the value of a T component. Declaration public void SetComponent<T>(T value) where T : TComponent Parameters Type Name Description T value Value of the component to set. Type Parameters Name Description T Type of the component. TryGetComponent(Type, out TComponent) Try to get the value of a Type component. Declaration public bool TryGetComponent(Type type, out TComponent value) Parameters Type Name Description Type type Type of the component. TComponent value Out value of the component. Returns Type Description Boolean TryGetComponent<T>(out T) Try to get the value of a T component. Declaration public bool TryGetComponent<T>(out T value) where T : TComponent Parameters Type Name Description T value Out value of the component. Returns Type Description Boolean Type Parameters Name Description T Type of the component. VisitComponents(IPropertyVisitor) Visit a flatten list of all components from this ComponentContainer<TObject, TComponent> and its dependencies. Declaration public void VisitComponents(IPropertyVisitor visitor) Parameters Type Name Description IPropertyVisitor visitor The visitor to use for visiting each component."
  },
  "api/Unity.Build.Common.RunStepDesktop.html": {
    "href": "api/Unity.Build.Common.RunStepDesktop.html",
    "title": "Class RunStepDesktop | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class RunStepDesktop Inheritance Object RunStep RunStepDesktop Inherited Members RunStep.Success(BuildSettings, IRunInstance) RunStep.Failure(BuildSettings, String) Namespace : Unity.Build.Common <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public sealed class RunStepDesktop : RunStep, IRunStep Methods CanRun(BuildSettings, out String) Declaration public override bool CanRun(BuildSettings settings, out string reason) Parameters Type Name Description BuildSettings settings String reason Returns Type Description Boolean Overrides RunStep.CanRun(BuildSettings, out String) Start(BuildSettings) Declaration public override RunStepResult Start(BuildSettings settings) Parameters Type Name Description BuildSettings settings Returns Type Description RunStepResult Overrides RunStep.Start(BuildSettings)"
  },
  "api/Unity.Build.Common.GeneralSettings.html": {
    "href": "api/Unity.Build.Common.GeneralSettings.html",
    "title": "Class GeneralSettings | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class GeneralSettings Inheritance Object GeneralSettings Namespace : Unity.Build.Common <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public sealed class GeneralSettings : IBuildSettingsComponent Fields CompanyName Declaration public string CompanyName Field Value Type Description String ProductName Declaration public string ProductName Field Value Type Description String"
  },
  "api/Unity.Build.Common.BuildStepBuildClassicLiveLink.html": {
    "href": "api/Unity.Build.Common.BuildStepBuildClassicLiveLink.html",
    "title": "Class BuildStepBuildClassicLiveLink | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class BuildStepBuildClassicLiveLink Inheritance Object BuildStep BuildStepBuildClassicLiveLink Inherited Members BuildStep.IsEnabled(BuildContext) BuildStep.HasRequiredComponent(BuildContext, Type) BuildStep.HasRequiredComponent<T>(BuildContext) BuildStep.GetRequiredComponent(BuildContext, Type) BuildStep.GetRequiredComponent<T>(BuildContext) BuildStep.HasOptionalComponent(BuildContext, Type) BuildStep.HasOptionalComponent<T>(BuildContext) BuildStep.GetOptionalComponent(BuildContext, Type) BuildStep.GetOptionalComponent<T>(BuildContext) BuildStep.GetAvailableTypes(Func<Type, Boolean>) BuildStep.Success() BuildStep.Failure(String) Namespace : Unity.Build.Common <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public sealed class BuildStepBuildClassicLiveLink : BuildStep, IBuildStep Properties Description Declaration public override string Description { get; } Property Value Type Description String Overrides BuildStep.Description OptionalComponents Declaration public override Type[] OptionalComponents { get; } Property Value Type Description Type [] Overrides BuildStep.OptionalComponents RequiredComponents Declaration public override Type[] RequiredComponents { get; } Property Value Type Description Type [] Overrides BuildStep.RequiredComponents Methods CleanupBuildStep(BuildContext) Declaration public override BuildStepResult CleanupBuildStep(BuildContext context) Parameters Type Name Description BuildContext context Returns Type Description BuildStepResult Overrides BuildStep.CleanupBuildStep(BuildContext) RunBuildStep(BuildContext) Declaration public override BuildStepResult RunBuildStep(BuildContext context) Parameters Type Name Description BuildContext context Returns Type Description BuildStepResult Overrides BuildStep.RunBuildStep(BuildContext) Extension Methods BuildStepExtensions.GetOutputBuildDirectory(BuildStep, BuildContext)"
  },
  "api/Unity.Build.BuildStepResult.html": {
    "href": "api/Unity.Build.BuildStepResult.html",
    "title": "Class BuildStepResult | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class BuildStepResult Holds the result of the execution of a IBuildStep . Inheritance Object BuildStepResult Namespace : Unity.Build <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class BuildStepResult Constructors BuildStepResult(IBuildStep, UnityEditor.Build.Reporting.BuildReport) Create a new instance of BuildStepResult from a . Declaration public BuildStepResult(IBuildStep step, UnityEditor.Build.Reporting.BuildReport report) Parameters Type Name Description IBuildStep step The IBuildStep that was executed. UnityEditor.Build.Reporting.BuildReport report The report that was generated. Properties BuildStep The IBuildStep that was executed. Declaration public IBuildStep BuildStep { get; } Property Value Type Description IBuildStep Description Description of the IBuildStep . Declaration public string Description { get; } Property Value Type Description String Duration Duration of the execution of this IBuildStep . Declaration public TimeSpan Duration { get; } Property Value Type Description TimeSpan Failed Determine if the execution of the IBuildStep failed. Declaration public bool Failed { get; } Property Value Type Description Boolean Message The message resulting from the execution of this IBuildStep . Declaration public string Message { get; } Property Value Type Description String Succeeded Determine if the execution of the IBuildStep succeeded. Declaration public bool Succeeded { get; } Property Value Type Description Boolean Methods Failure(IBuildStep, String) Create a new instance of BuildStepResult that represent a failed execution. Declaration public static BuildStepResult Failure(IBuildStep step, string message) Parameters Type Name Description IBuildStep step The IBuildStep that was executed. String message The failure message. Returns Type Description BuildStepResult A new BuildStepResult instance. Success(IBuildStep) Create a new instance of BuildStepResult that represent a successful execution. Declaration public static BuildStepResult Success(IBuildStep step) Parameters Type Name Description IBuildStep step The IBuildStep that was executed. Returns Type Description BuildStepResult A new BuildStepResult instance. Operators Implicit(BuildStepResult to Boolean) Implicit conversion to Boolean . Declaration public static implicit operator bool (BuildStepResult result) Parameters Type Name Description BuildStepResult result Instance of BuildStepResult . Returns Type Description Boolean"
  },
  "api/Unity.Transforms.CopyTransformFromGameObjectProxy.html": {
    "href": "api/Unity.Transforms.CopyTransformFromGameObjectProxy.html",
    "title": "Class CopyTransformFromGameObjectProxy | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class CopyTransformFromGameObjectProxy Inheritance Object ComponentDataProxyBase ComponentDataProxy < CopyTransformFromGameObject > CopyTransformFromGameObjectProxy Inherited Members ComponentDataProxy<CopyTransformFromGameObject>.ValidateSerializedData(CopyTransformFromGameObject) ComponentDataProxy<CopyTransformFromGameObject>.Value ComponentDataProxyBase.OnEnable() ComponentDataProxyBase.OnDisable() Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class CopyTransformFromGameObjectProxy : ComponentDataProxy<CopyTransformFromGameObject>, ISerializationCallbackReceiver"
  },
  "api/Unity.Transforms.CopyTransformFromGameObject.html": {
    "href": "api/Unity.Transforms.CopyTransformFromGameObject.html",
    "title": "Struct CopyTransformFromGameObject | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct CopyTransformFromGameObject Copy Transform from GameObject associated with Entity to TransformMatrix. Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [WriteGroup(typeof(LocalToWorld))] public struct CopyTransformFromGameObject : IComponentData"
  },
  "api/Unity.Transforms.CopyInitialTransformFromGameObjectSystem.html": {
    "href": "api/Unity.Transforms.CopyInitialTransformFromGameObjectSystem.html",
    "title": "Class CopyInitialTransformFromGameObjectSystem | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class CopyInitialTransformFromGameObjectSystem Inheritance Object ComponentSystemBase JobComponentSystem CopyInitialTransformFromGameObjectSystem Inherited Members JobComponentSystem.Entities JobComponentSystem.Job JobComponentSystem.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnDestroyManager() ComponentSystemBase.OnCreateManager() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.Update() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetArchetypeChunkComponentType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkComponentTypeDynamic(ComponentType) ComponentSystemBase.GetArchetypeChunkBufferType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkSharedComponentType<T>() ComponentSystemBase.GetArchetypeChunkEntityType() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [UpdateInGroup(typeof(InitializationSystemGroup))] public class CopyInitialTransformFromGameObjectSystem : JobComponentSystem Methods OnCreate() Declaration protected override void OnCreate() Overrides ComponentSystemBase.OnCreate() OnUpdate(JobHandle) Declaration protected override JobHandle OnUpdate(JobHandle inputDeps) Parameters Type Name Description JobHandle inputDeps Returns Type Description JobHandle Overrides JobComponentSystem.OnUpdate(JobHandle) Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "manual/gp_text_handling.html": {
    "href": "manual/gp_text_handling.html",
    "title": "Handling text | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Handling text Synopsis: Handling text in a performant way Note, this is a placeholder for work that has not been completed yet."
  },
  "manual/gp_scenes.html": {
    "href": "manual/gp_scenes.html",
    "title": "Scenes | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Scenes Synopsis: How to organize an ECS-based project. Creating, loading, unloading scenes, etc Note, this is a placeholder for work that has not been completed yet."
  },
  "manual/gp_rendering.html": {
    "href": "manual/gp_rendering.html",
    "title": "Rendering | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Rendering The Hybrid.Rendering package provides a ECS system to render 3D objects. See DOTS Hybrid Renderer for information about the current DOTS-compatible rendering API."
  },
  "manual/gp_prefabs.html": {
    "href": "manual/gp_prefabs.html",
    "title": "Prefabs | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Prefabs Synopsis: Using prefabs in ECS-based programs Note, this is a placeholder for work that has not been completed yet."
  },
  "manual/entity_iteration_job.html": {
    "href": "manual/entity_iteration_job.html",
    "title": "Using IJobForEach | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Using IJobForEach You can define an IJobForEach Job in a JobComponentSystem to read and write component data. When the Job runs, the ECS framework finds all of the entities that have the required components and calls the Job’s Execute() function for each of them. The data is processed in the order it is laid out in memory and the Job runs in parallel, so a IJobForEach combines simplicity and efficiency. The following example illustrates a simple system that uses IJobForEach . The Job reads a RotationSpeed component and writes to a RotationQuaternion component. public class RotationSpeedSystem : JobComponentSystem { // Use the [BurstCompile] attribute to compile a job with Burst. [BurstCompile] struct RotationSpeedJob : IJobForEach<RotationQuaternion, RotationSpeed> { public float DeltaTime; // The [ReadOnly] attribute tells the job scheduler that this job will not write to rotSpeed public void Execute(ref RotationQuaternion rotationQuaternion, [ReadOnly] ref RotationSpeed rotSpeed) { // Rotate something about its up vector at the speed given by RotationSpeed. rotationQuaternion.Value = math.mul(math.normalize(rotationQuaternion.Value), quaternion.AxisAngle( math.up(), rotSpeed.RadiansPerSecond * DeltaTime ) ); } } // OnUpdate runs on the main thread. Any previously scheduled jobs // reading/writing from Rotation or writing to RotationSpeed // will automatically be included in the inputDependencies. protected override JobHandle OnUpdate(JobHandle inputDependencies) { var job = new RotationSpeedJob() { DeltaTime = Time.deltaTime }; return job.Schedule(this, inputDependencies); } } Note: the above system is based on the HelloCube IJobForEach sample in the ECS Samples repository . IJobForEach processes all entities stored in the same chunk as a batch. When the set of entities spans more than one chunk, the job process each batch of entities in parallel. Iterating over a set of entities by chunk is generally the most efficient method since it prevents multiple threads from attempting to access the same block of memory. However, if you have a very expensive process to run on a small number of entities, IJobForEach may not provide optimal performance because it cannot run the process on each entity in parallel. In such cases, you can use IJobParallelFor , which gives you control over batch size and work stealing. See Manual Iteration for an example. Defining the IJobForEach signature The IJobForEach struct signature identifies which components your system operates on: struct RotationSpeedJob : IJobForEach<RotationQuaternion, RotationSpeed> You can also use the following attributes to modify which entities the Job selects: [ExcludeComponent(typeof(T)] — excludes entities whose Archetype contains the component of type T. [RequireComponentTag(typeof(T)] — only include entities whose Archetype contains a component of type T. Use this attribute when a system does not read or write to a component that still must be associated with an entity. For example, the following Job definition selects entities that have archetypes containing Gravity, RotationQuaternion, and RotationSpeed components, but not a Frozen component: [ExcludeComponent(typeof(Frozen))] [RequireComponentTag(typeof(Gravity))] [BurstCompile] struct RotationSpeedJob : IJobForEach<RotationQuaternion, RotationSpeed> If you need a more complex query to select the entities to operate upon, you can use an IJobChunk Job instead of IJobForEach. Writing the Execute() method The JobComponentSystem calls your Execute() method for each eligible entity, passing in the components identified by the IJobForEach signature. Thus, the parameters of your Execute() function must match the generic arguments you defined for the struct. For example, the following Execute() method reads a RotationSpeed component and reads and writes a RotationQuaternion component. (Read/write is the default, so no attribute is needed.) public void Execute(ref RotationQuaternion rotationQuaternion, [ReadOnly] ref RotationSpeed rotSpeed){} You can add attributes to the function parameters to help ECS optimize your system: [ReadOnly] — use for components that the function reads, but does not write. [WriteOnly] — use for components that the function writes, but does not read. [ChangedFilter] — use when you only want to run the function on entities for which that component value may have changed since the last time your system ran. Identifying read-only and write-only components allows the Job scheduler to schedule your Jobs efficiently. For example, the scheduler won’t schedule a Job that writes to a component at the same time as a Job that reads that component, but it can run two Jobs in parallel if they only read the same components. Note that for efficiency, the change filter works on whole chunks of entities; it does not track individual entities. If a chunk has been accessed by another Job which had the ability to write to that type of component, then the ECS framework considers that chunk to have changed and includes all of the entities in the Job. Otherwise, the ECS framework excludes the entities in that chunk entirely. Using IJobForEachWithEntity The Jobs implementing the IJobForEachWithEntity interface behave much the same as those implementing IJobForEach. The difference is that the Execute() function signature in IJobForEachWithEntity provides you with the Entity object for the current entity and the index into the extended, parallel arrays of components. Using the Entity parameter You can use the Entity object to add commands to an EntityCommandBuffer. For example, you can add commands to add or remove components on that entity or to destroy the entity — all operations that cannot be done directly inside a Job to avoid race conditions. Command buffers allow you to perform any, potentially costly, calculations on a worker thread, while queuing up the actual insertions and deletions to be performed later on the main thread. The following system, based on the HelloCube SpawnFromEntity sample, uses a command buffer to instantiate entities after calculating their positions in a Job: public class SpawnerSystem : JobComponentSystem { // EndFrameBarrier provides the CommandBuffer EndFrameBarrier m_EndFrameBarrier; protected override void OnCreate() { // Cache the EndFrameBarrier in a field, so we don't have to get it every frame m_EndFrameBarrier = World.GetOrCreateSystem<EndFrameBarrier>(); } struct SpawnJob : IJobForEachWithEntity<Spawner, LocalToWorld> { public EntityCommandBuffer CommandBuffer; public void Execute(Entity entity, int index, [ReadOnly] ref Spawner spawner, [ReadOnly] ref LocalToWorld location) { for (int x = 0; x < spawner.CountX; x++) { for (int y = 0; y < spawner.CountY; y++) { var __instance __= CommandBuffer.Instantiate(spawner.Prefab); // Place the instantiated in a grid with some noise var position = math.transform(location.Value, new float3(x * 1.3F, noise.cnoise(new float2(x, y) * 0.21F) * 2, y * 1.3F)); CommandBuffer.SetComponent(instance, new Translation {Value = position}); } } CommandBuffer.DestroyEntity(entity); } } protected override JobHandle OnUpdate(JobHandle inputDeps) { // Schedule the job that will add Instantiate commands to the EntityCommandBuffer. var job = new SpawnJob { CommandBuffer = m_EndFrameBarrier.CreateCommandBuffer() }.ScheduleSingle(this, inputDeps); // We need to tell the barrier system which job it needs to complete before it can play back the commands. m_EndFrameBarrier.AddJobHandleForProducer(job); return job; } } Note: this example uses IJobForEach.ScheduleSingle(), which performs the Job on a single thread. If you used the Schedule() method instead, the system uses parallel jobs to process the entities. In the parallel case, you must use a concurrent entity command buffer (EntityCommandBuffer.Concurrent). See the ECS samples repository for the full example source code. Using the index parameter You can use the index when adding a command to a concurrent command buffer. You use concurrent command buffers when running Jobs that process entities in parallel. In an IJobForEachWithEntity Job, the Job System process entities in parallel when you use the Schedule() method rather than the ScheduleSingle() method used in the example above. Concurrent command buffers should always be used for parallel Jobs to guarantee thread safety and deterministic execution of the buffer commands. You can also use the index to reference the same entities across Jobs within the same system. For example, if you need to process a set of entities in multiple passes and collect temporary data along the way, you can use the index to insert the temporary data into a NativeArray in one Job and then use the index to access that data in a subsequent Job. (Naturally, you have to pass the same NativeArray to both Jobs.)"
  },
  "manual/entity_iteration_foreach.html": {
    "href": "manual/entity_iteration_foreach.html",
    "title": "Using ComponentSystem | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Using ComponentSystem You can use a ComponentSystem to process your data. ComponentSystem methods run on the main thread and thus don’t take advantage of multiple CPU cores. Use ComponentSystems in the following circumstances: Debugging or exploratory development — sometimes it is easier to observe what is going on when the code is running on the main thread. You can, for example, log debug text and draw debug graphics. When the system needs to access or interface with other APIs that can only run on the main thread — this can help you gradually convert your game systems to ECS rather than having to rewrite everything from the start. The amount of work the system performs is less than the small overhead of creating and scheduling a Job. When it is desirable to make structural changes (add/remove components, destroy entities, etc.) to entities directly while iterating through them. Unlike a JobComponentSystem, ComponentSystems can modify entities inside of a ForEach lambda function. Important: Making structural changes forces the completion of all Jobs. This event is called a sync point and can lead to a drop in performance because the system cannot take advantage of all the available CPU cores while it waits for the sync point. In a ComponentSystem, you should use a post-update command buffer. The sync point still occurs, but all the structural changes happen in a batch, so it has a slightly lower impact. For maximum efficiency, use a JobComponentSystem and an entity command buffer. When creating a large number of entities, you can also use a separate World to create the entities and then transfer those entities to the main game world. Iterating with ForEach delegates The ComponentSystem provides an Entities.ForEach function that simplifies the task of iterating over a set of entities. Call ForEach in the system’s OnUpdate() function passing in a lambda function that takes the relevant components as parameters and whose function body performs the necessary work. The following example, from the HelloCube ForEach sample, animates the rotation for any entities that have both a RotationQuaternion and a RotationSpeed component: public class RotationSpeedSystem : ComponentSystem { protected override void OnUpdate() { Entities.ForEach( (ref RotationSpeed rotationSpeed, ref RotationQuaternion rotation) => { var deltaTime = Time.deltaTime; rotation.Value = math.mul(math.normalize(rotation.Value), quaternion.AxisAngle(math.up(), rotationSpeed.RadiansPerSecond * deltaTime)); }); } You can use ForEach lambda functions with up to six types of components. Unlike inside of JobComponentSystems, you can make structural changes to existing entities inside of a ComponentSystem's ForEach. For example, if you wanted to remove the RotationSpeed component form any entities whose rotation speed is currently zero, you could alter your ForEach function as follows: Entities.ForEach( (Entity entity, ref RotationSpeed rotationSpeed, ref RotationQuaternion rotation) => { var __deltaTime __= Time.deltaTime; rotation.Value = math.mul(math.normalize(rotation.Value), quaternion.AxisAngle(math.up(), rotationSpeed.RadiansPerSecond * __deltaTime__)); if(math.abs(rotationSpeed.RadiansPerSecond) <= float.Epsilon) //Speed effectively zero EntityManager.RemoveComponent(entity, typeof(RotationSpeed)); }); The system can execute these commands safely as the ComponentSystem is running on the main thread. Entity Queries You can use a fluent-style query to constrain a ForEach lambda such that it executes on a specific set of entities satisfying some constraints. These queries can specify whether the work should be done on entities that have any, all or none of a set of components. Constraints can be chained together and should look very familiar to users of C#'s LINQ system. Note that any components passed as parameters to the ForEach lambda function are automatically included in the WithAll set and must not be included explicitly in the WithAll, WithAny, or WithNone portions of the query. A WithAll constraint allows you to specify that an entity have all of a set of components. For example, with the following query, the ComponentSystem executes a lambda function for all entities that have the Rotation and Scale component: Entities.WithAll<Rotation, Scale>().ForEach( (Entity e) => { // do stuff }); Use WithAll for components that must exist on an entity, but which you do not need to read or write (add components that you want to access, as parameters of the ForEach lambda function). For example: Entities.WithAll<SpinningTag>().ForEach( (Entity e, ref Rotation r) => { // do stuff }); A WithAny constraint allows you to specify that an entity must have at least one of a set of components. The ComponentSystem executes the following lambda function for all entities that have both Rotation and Scale, AND either RenderDataA or RenderDataB (or both): Entities.WithAll<Rotation, Scale>().WithAny<RenderDataA, RenderDataB>().ForEach( (Entity e) => { // do stuff }); Note that there is no way to know which components in the WithAny set exist for a specific entity. If you need to treat entities differently depending on which of these components exist, you must either create a specific query for each situation, or use a JobComponentSystem with IJobChunk . A WithNone constraint allows you to exclude entities that have at least one of a set of components. The ComponentSystem executes the following lambda function for all entities that do not have a Rotation component: Entities.WithNone<Rotation>().ForEach( (Entity e) => { // do stuff }); Additionally, you can specify WithAnyReadOnly and WithAllReadOnly to filter for entities with any, or all (respectively) of a set of components; but also ensure that they are queried as read only components. This will ensure that they are not marked as written and their chunk IDs changed. Options You can also specify a number of options for a query using With : Option Description Default No options specified. IncludePrefab The query does not implicitly exclude entities with the special Prefab component. IncludeDisabled The query does not implicitly exclude entities with the special Disabled component. FilterWriteGroup The query should filter selected entities based on the WriteGroupAttribute settings of the components specified in the query. The ComponentSystem executes the following lambda function for all entities that do not have a Rotation component, including those that do have the special Disabled component: Entities.WithNone<Rotation>().With(EntityQueryOptions.IncludeDisabled).ForEach( (Entity e) => { // do stuff });"
  },
  "manual/entity_command_buffer.html": {
    "href": "manual/entity_command_buffer.html",
    "title": "Entity Command Buffer | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Entity Command Buffer The EntityCommandBuffer class solves two important problems: When you're in a job, you can't access the EntityManager . When you access the EntityManager (to say, create an entity) you invalidate all injected arrays and EntityQuery objects. The EntityCommandBuffer abstraction allows you to queue up changes (from either a job or from the main thread) so that they can take effect later on the main thread. There are two ways to use a EntityCommandBuffer : The API is very similar to the EntityManager API. In this mode, it is helpful to think of the automatic EntityCommandBuffer as a convenience that allows you to prevent array invalidation inside your system while still making changes to the world. For jobs, you must request EntityCommandBuffer from a entity command buffer system on the main thread, and pass them to jobs. When the EntityCommandBufferSystem updates, the command buffers will play back on the main thread in the order they were created. This extra step is required so that memory management can be centralized and determinism of the generated entities and components can be guaranteed. Entity Command Buffer Systems The default World initialization provides three system groups, for initialization, simulation, and presentation, that are updated in order each frame. Within a group, there is an entity command buffer system that runs before any other system in the group and another that runs after all other systems in the group. Preferably, you should use one of the existing command buffer systems rather than creating your own in order to minimize synchronization points. See Default System Groups for a list of the default groups and command buffer systems. Using EntityCommandBuffers from ParallelFor jobs When using an EntityCommandBuffer to issue EntityManager commands from ParallelFor jobs , the EntityCommandBuffer.Concurrent interface is used to guarantee thread safety and deterministic playback. The public methods in this interface take an extra jobIndex parameter, which is used to playback the recorded commands in a deterministic order. The jobIndex must be a unique ID for each job. For performance reasons, jobIndex should be the (increasing) index values passed to IJobParallelFor.Execute() . Unless you really know what you're doing, using the index as jobIndex is the safest choice. Using other jobIndex values will produce the correct output, but can have severe performance implications in some cases."
  },
  "manual/entities_job_foreach.html": {
    "href": "manual/entities_job_foreach.html",
    "title": "JobComponentSystem lambda functions | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "JobComponentSystem lambda functions JobComponentSystem lambda functions provide a concise way to define and execute your algorithms over entities, their components, or over native containers. The JobComponentSystem supports two types of lambda functions: JobComponentSystem.Entities.ForEach(lambda) executes the lambda function over all the entities selected by an entity query (which is defined by the Entities.ForEach options and lambda parameters). JobComponentSystem.Job.WithCode(lambda) executes the lambda function once as an IJob. To execute a job lambda function, you define the lambda using either ForEach() or WithCode() , and then you either schedule the job using Schedule() or execute it immediately (on the main thread) with Run() . Whether you use Entities.ForEach or Job.WthCode, you can use additional methods defined on these objects to set various job options and parameters. Entities.ForEach example: The following example illustrates a simple JobComponentSystem that uses Entities.ForEach to read one component (Velocity in this case) and write to another (Translation): class ApplyVelocitySystem : JobComponentSystem { protected override JobHandle OnUpdate(JobHandle inputDependencies) { var jobHandle = Entities .ForEach((ref Translation translation, in Velocity velocity) => { translation.Value += velocity.Value; }) .Schedule(inputDependencies); return jobHandle; } } Note the use of the keywords ref and in on the parameters of the ForEach lambda function. Use ref for components that you write to, and in for components that you only read. Marking components as read-only helps the job scheduler execute your jobs more efficiently. Job.WithCode example The following example illustrates a simple example that uses one Job.WithCode() lambda function to fill a native array with random numbers and another to add those numbers together: public class RandomSumJob : JobComponentSystem { private uint seed = 1; protected override JobHandle OnUpdate(JobHandle inputDeps) { Random randomGen = new Random(seed++); NativeArray<float> randomNumbers = new NativeArray<float>(500, Allocator.TempJob); JobHandle generateNumbers = Job.WithCode(() => { for (int i = 0; i < randomNumbers.Length; i++) { randomNumbers[i] = randomGen.NextFloat(); } }).Schedule(inputDeps); NativeArray<float> result = new NativeArray<float>(1, Allocator.TempJob); JobHandle sumNumbers = Job.WithCode(() => { for (int i = 0; i < randomNumbers.Length; i++) { result[0] += randomNumbers[i]; } }).Schedule(generateNumbers); sumNumbers.Complete(); UnityEngine.Debug.Log(\"The sum of \" + randomNumbers.Length + \" numbers is \" + result[0]); randomNumbers.Dispose(); result.Dispose(); return sumNumbers; } } In a real application, the first job might calculate intermediate results from a set of entity components in a parallel job, while the second job combines those results to calculate the solution. Entities.ForEach entity query The entities and chunks processed by an Entities.ForEach lambda are selected by an entity query , which is implicitly created when the JobComponentSystem is created. (Use WithStoreEntityQueryInField(ref EntityQuery) to get access to this implicit EntityQuery object.) The query is constructed by combining the parameters you declare for the lambda function with the component types you add to the query explicitly using WithAll , WithAny , and WithNone functions. You can also set specific query options using additional Entities functions. The query-related Entities functions include: WithAll<T> — An entity must have all of these component types (in addition to having all the component types found in the lambda parameter list) WithAny<T,U> — An entity must have one or more of these component types. Note that specifying a single component type using WithAny is allowed; however, because an entity must have one or more of these “optional” component types to be selected by the query, using WithAny with a single type is equivalent to putting that type in the WithAll statement. WithNone<T> — An entity must not have any of these component types. WithChangeFilter<T> — Only selects entities in chunks in which the specified component might have changed since the last time this JobComponentSystem updated. WithSharedComponentFilter — Only select chunks that have a specified value for a shared component. WithStoreEntityQueryInField — stores the EntityQuery object generated by the Entities.ForEach in an EntityQuery field on your JobComponentSystem. You can use this EntityQuery object for such purposes as getting the number of entities that will be selected by the query. Note that this function assigns the EntityQuery instance to your field when the JobComponentSystem is created. This means that you can use the query before the first execution of the lambda function. Important: Do not add components in the parameter list to the query using WithAny<T,U> or WithNone . All of the components you add to the lambda function parameter list are added to the WithAll list of the entity query automatically; adding a component to both the WithAll list and the WithAny or WithNone lists creates an illogical query. Entity query example: The following example selects entities that have the components, Destination, Source, and LocalToWorld; and have at least one of the components, Rotation, Translation, or Scale; but which do not have a LocalToParent component. return Entities.WithAll<LocalToWorld>() .WithAny<Rotation, Translation, Scale>() .WithNone<LocalToParent>() .ForEach((ref Destination outputData, in Source inputData) => { /* do some work */ }) .Schedule(inputDeps); In this example, only the Destination and Source components can be accessed inside the lambda function since they are the only components in the parameter list. Access to EntityQuery object example: The following example illustrates how to access the EntityQuery object implicitly created for an Entities.ForEach construction. In this case, the example uses the EntityQuery object to invoke the CalculateEntityCount() method. The example use this count to create a native array with enough space to store one value per entity selected by the query: private EntityQuery query; protected override JobHandle OnUpdate(JobHandle inputDeps) { int dataCount = query.CalculateEntityCount(); NativeArray<float> dataSquared = new NativeArray<float>(dataCount, Allocator.Temp); JobHandle GetSquaredValues = Entities .WithStoreEntityQueryInField(ref query) .ForEach((int entityInQueryIndex, in Data data) => { dataSquared[entityInQueryIndex] = data.Value * data.Value; }) .Schedule(inputDeps); return Job .WithCode(() => { //Use dataSquared array... var v = dataSquared[dataSquared.Length -1]; }) .WithDeallocateOnJobCompletion(dataSquared) .Schedule(GetSquaredValues); } Optional components You cannot create a query specifying optional components (using WithAny<T,U>) and also access those components in the lambda function. If you need to read or write to a component that is optional, you can split the Entities.ForEach construction into multiple jobs, one for each combination of the optional components. For example, if you had two optional components, you would need three ForEach constructions: one including the first optional component, one including the second, and one including both components. Another alternative is to iterate by chunk using IJobChunk. Change filtering In cases where you only want to process an entity component when another entity of that component has changed since the last time the current JobComponentSystem has run, you can enable change filtering using WithChangeFilter . The component type used in the change filter must either be in the lambda function parameter list or part of a WithAll statement. return Entities .WithChangeFilter<Source>() .ForEach((ref Destination outputData, in Source inputData) => { /* Do work */ }) .Schedule(inputDeps); An entity query supports change filtering on up to two component types. Note that change filtering is applied at the chunk level. If any code accesses a component in a chunk with write access, then that component type in that chunk is marked as changed -- even if the code didn’t actually change any data. Shared component filtering Entities with shared components are grouped into chunks with other entities having the same value for their shared components. You can select groups of entities that have specific shared component values using the WithSharedComponentFilter() function. The following example selects entities grouped by a Cohort ISharedComponentData. The lambda function in this example sets a DisplayColor IComponentData component based on the entity’s cohort: public class ColorCycleJob : JobComponentSystem { protected override JobHandle OnUpdate(JobHandle inputDeps) { List<Cohort> cohorts = new List<Cohort>(); EntityManager.GetAllUniqueSharedComponentData<Cohort>(cohorts); NativeList<JobHandle> dependencies = new NativeList<JobHandle>(); foreach (Cohort cohort in cohorts) { DisplayColor newColor = ColorTable.GetNextColor(cohort.Value); JobHandle thisJobHandle = Entities.WithSharedComponentFilter(cohort) .ForEach((ref DisplayColor color) => { color = newColor; }) .Schedule(inputDeps); dependencies.Add(thisJobHandle); } return JobHandle.CombineDependencies(dependencies); } } The example uses the EntityManager to get all the unique cohort values. It then schedules a lambda job for each cohort, passing the new color to the lambda function as a captured variable. Since all the jobs run on distinct chunks, they can run in parallel (they are all scheduled with the inputDeps object passed to the OnUpDate() function of the system). And, since the system schedules multiple, independent jobs, it also combine the independent job handles into one handle, which it uses as the return value for OnUpdate(). Lambda parameters When you define the lambda function to use with Entities.ForEach, you can declare parameters that the JobComponentSystem uses to pass information about the current entity (or chunk) when it executes the function. (A Job.WithCode lambda function does not take any parameters.) You can pass up to eight parameters to an Entities.ForEach lambda function. The parameters must be grouped in the following order: 1. Parameters passed-by-value first (no parameter modifiers) 2. Writable parameters second (`ref` parameter modifier) 3. Read-only parameters last (`in` parameter modifier) All components should use either the ref or the in parameter modifier keywords. If your function does not obey these rules, the compiler provides an error similar to: error CS1593: Delegate 'Invalid_ForEach_Signature_See_ForEach_Documentation_For_Rules_And_Restrictions' does not take N arguments (Note that the error message cites the number of arguments as the issue even when the problem is the parameter order.) Component parameters To access a component associated with an entity, you must pass a parameter of that component type to the Entities.ForEach lambda function (unless you are iterating over chunks instead of entities). The compiler automatically adds all components passed to the function to the entity query as required components. To update a component value, you must pass it to the lambda function by reference using the ref keyword in the parameter list. (Without the ref keyword, any modifications would be made to a temporary copy of the component since it would be passed by value.) Note that using ref means that the components in the current chunk are marked as changed, even if the lambda function does not actually modify them. For efficiency, always designate components that your lambda function does not modify as read only. To designate a component passed to the lambda function as read-only, use the in keyword in the parameter list. The following example passes a Source component parameter to the job as read-only, and a Destination component parameter as writable: return Entities.ForEach( (ref Destination outputData, in Source inputData) => { outputData.Value = inputData.Value; }) .Schedule(inputDeps); Note: Currently, you cannot pass chunk components to the Entities.ForEach lambda function. For dynamic buffers, use DynamicBuffer rather than the Component type stored in the buffer: public class BufferSum : JobComponentSystem { private EntityQuery query; //Schedules the two jobs with a dependency between them protected override JobHandle OnUpdate(JobHandle inputDeps) { //The query variable can be accessed here because we are //using WithStoreEntityQueryInField(query) in the entities.ForEach below int entitiesInQuery = query.CalculateEntityCount(); //Create a native array to hold the intermediate sums //(one element per entity) NativeArray<int> intermediateSums = new NativeArray<int>(entitiesInQuery, Allocator.TempJob); //Schedule the first job to add all the buffer elements JobHandle bufferSumJob = Entities .ForEach((int entityInQueryIndex, in DynamicBuffer<IntBufferData> buffer) => { for (int i = 0; i < buffer.Length; i++) { intermediateSums[entityInQueryIndex] += buffer[i].Value; } }) .WithStoreEntityQueryInField(ref query) .WithName(\"IntermediateSums\") .Schedule(inputDeps); //Schedule the second job, which depends on the first JobHandle finalSumJob = Job .WithCode(() => { int result = 0; for (int i = 0; i < intermediateSums.Length; i++) { result += intermediateSums[i]; } //Not burst compatible: Debug.Log(\"Final sum is \" + result); }) .WithDeallocateOnJobCompletion(intermediateSums) .WithoutBurst() .WithName(\"FinalSum\") .Schedule(bufferSumJob); return finalSumJob; } } Special, named parameters In addition to components, you can pass the following special, named parameters to the Entities.ForEach lambda function, which are assigned values based on the entity the job is currently processing: Entity entity — the Entity instance of the current entity. (The parameter can be named anything as long as the type is Entity.) int entityInQueryIndex — the index of the entity in the list of all entities selected by the query. Use the entity index value when you have a native array that you need to fill with a unique value for each entity. You can use the entityInQueryIndex as the index in that array. The entityInQueryIndex should also be used as the jobIndex for adding commands to a concurrent EntityCommandBuffer . int nativeThreadIndex — a unique index for the thread executing the current iteration of the lambda function. When you execute the lambda function using Run(), nativeThreadIndex is always zero. Capturing variables You can capture local variables for Entities.ForEach and Job.WithCode lambda functions. When you execute the function using a job (by calling Schedule() instead of Run()) there are some restrictions on the captured variables and how you use them: Only native containers and blittable types can be captured. A job can only write to captured variables that are native containers. (To “return” a single value, create a native array with one element.) You can use the following functions to apply modifiers and attributes to the captured variables: WithReadOnly(myvar) — restricts access to the variable as read-only. WithDeallocateOnJobCompletion(myvar) — deallocates the native container after the job is complete. See DeallocateOnJobCompletionAttribute . WithNativeDisableParallelForRestriction(myvar) — permits multiple threads to access the same writable native container. Parallel access is only safe when each thread only accesses its own, unique range of elements in the container. If more than one thread accesses the same element a race condition is created in which the timing of the access changes the result. See NativeDisableParallelForRestriction . WithNativeDisableContainerSafetyRestriction(myvar) — disables normal safety restrictions that prevent dangerous access to the native container. Disabling safety restrictions unwisely can lead to race conditions, subtle bugs, and crashes in your application. See NativeDisableContainerSafetyRestrictionAttribute . WithNativeDisableUnsafePtrRestrictionAttribute(myvar) — Allows you to use unsafe pointers provided by the native container. Incorrect pointer use can lead to subtle bugs, instability, and crashes in your application. See NativeDisableUnsafePtrRestrictionAttribute . Job options You can use the following methods with both Entities.ForEach and Job.WithCode lambda functions: JobHandle Schedule(JobHandle) — schedules the lambda function to execute as a job: Entities.ForEach — the job executes the lambda function on parallel background, job threads. Each job iterates over the entities in the chunks selected by the ForEach query. (A job instance processes the entities in a single chunk at minimum.) Job.WithCode — the job executes a single instance of the lambda function on a background, job thread. void Run() — executes the lambda function synchronously on the main thread: Entities.ForEach — the lambda function is executed once for each entity in the chunks selected by the ForEach query. Note that Run() does not take a JobHandle parameter and does not return a JobHandle since your lambda function does not run as a job. Job.WithCode — the lambda function is executed once. WithBurst(FloatMode, FloatPrecision, bool) — sets options for the Burst compiler: floatMode — sets the floating point math optimization mode. Fast mode executes faster, but produces larger floating point error than Strict mode. Defaults to Strict. See Burst FloatMode . floatPrecision — sets the floating point math precision. See Burst FloatPrecision . synchronousCompilation — compiles the function immediately instead of scheduling the function for compilation later. WithoutBurst() — disables Burst compilation. Use this function when your lambda function contains code not supported by Burst. WithStructuralChanges() — executes the lambda function on the main thread and disables Burst so that you can make structural changes to your entity data within the function. For better performance, use a concurrent EntityCommandBuffer instead. WithName(string) — assigns the specified string as the name of the generated job class. Assigning a name is optional, but can help identify the function when debugging and profiling. Job dependencies The JobHandle object passed to the JobComponentSystem.OnUpdate method encapsulates all the component-related, read-write job dependencies declared by the JobComponentSystem instances that have already updated so far in the frame. When you pass the input dependencies from previous systems to your Schedule method, ECS ensures the prior completion of any jobs writing to the same component data accessed by the current lambda function. When you call Run(), the lambda function executes on the main thread, so any jobs scheduled by earlier systems are completed immediately. Likewise, your OnUpdate() function must pass its dependencies to subsequent systems by returning a JobHandle. If your update function constructs a single job, you can return the JobHandle provided by Schedule(). If your update function constructs multiple jobs, you can either chain the individual dependencies by passing the JobHandle returned by one to the Schedule() method of the next, or, if the jobs do not depend on each other, you can combine their dependencies using JobHandle.CombineDependencies() . Note, the JobHandle only includes dependences for component data, not native containers. If you have a system or job that reads data in a native container populated by another system or job, you must manage the dependency manually. One way to do this is to provide a method or property that allows the producing system to add a JobHandle as a dependency for the consuming system. (See the AddProducerForJob() method of the EntityCommandBufferSystem for an example of this technique.) Using Entities.ForEach with an EntityCommandBuffer You cannot perform structural changes to entities in a job, including creating entities, adding or removing components, or destroying entities. Instead, you must defer structural changes to a later point in the frame using an entity command buffer. The default ECS system group setup provides entity command buffer systems at the beginning and end of the standard system groups. In general, you should pick the last entity command buffer system that runs before any of your other systems that rely on your structural changes. For example, if you create entities in the simulation system group and want to render those entities in the same frame, you could use entity command buffers created by the EndSimulationEntityCommandBufferSystem when creating the entities. To create entity command buffers, you store a reference to the entity command buffer system you want to use. Them in your OnUpdate function, you use that reference to create an EntityCommandBuffer instance to use for the current frame. (You must create a new entity command buffer for every update.) The following example illustrates how to create an entity command buffer, in this case, obtaining it from the EndSimulationEntityCommandBufferSystem: public class MyJobSystem : JobComponentSystem { private EndSimulationEntityCommandBufferSystem commandBufferSystem; protected override void OnCreate() { commandBufferSystem = World .DefaultGameObjectInjectionWorld .GetOrCreateSystem<EndSimulationEntityCommandBufferSystem>(); } protected override JobHandle OnUpdate(JobHandle inputDeps) { EntityCommandBuffer.Concurrent commandBuffer = commandBufferSystem.CreateCommandBuffer().ToConcurrent(); //.. The rest of the job system code return inputDeps; } } Since Entities.ForEach.Schedule() creates a parallel job, you must use the concurrent interface of the entity command buffer. Entites.ForEach lambda with entity command buffer example The following example illustrates using entity command buffers in a JobComponentSystem that implements a simple particle system: // ParticleSpawner.cs using Unity.Entities; using Unity.Jobs; using Unity.Mathematics; using Unity.Transforms; public struct Velocity : IComponentData { public float3 Value; } public struct TimeToLive : IComponentData { public float LifeLeft; } public class ParticleSpawner : JobComponentSystem { private EndSimulationEntityCommandBufferSystem commandBufferSystem; protected override void OnCreate() { commandBufferSystem = World .DefaultGameObjectInjectionWorld .GetOrCreateSystem<EndSimulationEntityCommandBufferSystem>(); } protected override JobHandle OnUpdate(JobHandle inputDeps) { EntityCommandBuffer.Concurrent commandBufferCreate = commandBufferSystem.CreateCommandBuffer().ToConcurrent(); EntityCommandBuffer.Concurrent commandBufferCull = commandBufferSystem.CreateCommandBuffer().ToConcurrent(); float dt = Time.DeltaTime; Random rnd = new Random(); rnd.InitState((uint) (dt * 100000)); JobHandle spawnJobHandle = Entities .ForEach((int entityInQueryIndex, in SpawnParticles spawn, in LocalToWorld center) => { int spawnCount = spawn.Rate; for (int i = 0; i < spawnCount; i++) { Entity spawnedEntity = commandBufferCreate .Instantiate(entityInQueryIndex, spawn.ParticlePrefab); LocalToWorld spawnedCenter = center; Translation spawnedOffset = new Translation() { Value = center.Position + rnd.NextFloat3(-spawn.Offset, spawn.Offset) }; Velocity spawnedVelocity = new Velocity() { Value = rnd.NextFloat3(-spawn.MaxVelocity, spawn.MaxVelocity) }; TimeToLive spawnedLife = new TimeToLive() { LifeLeft = spawn.Lifetime }; commandBufferCreate.SetComponent(entityInQueryIndex, spawnedEntity, spawnedCenter); commandBufferCreate.SetComponent(entityInQueryIndex, spawnedEntity, spawnedOffset); commandBufferCreate.AddComponent(entityInQueryIndex, spawnedEntity, spawnedVelocity); commandBufferCreate.AddComponent(entityInQueryIndex, spawnedEntity, spawnedLife); } }) .WithName(\"ParticleSpawning\") .Schedule(inputDeps); JobHandle MoveJobHandle = Entities .ForEach((ref Translation translation, in Velocity velocity) => { translation = new Translation() { Value = translation.Value + velocity.Value * dt }; }) .WithName(\"MoveParticles\") .Schedule(spawnJobHandle); JobHandle cullJobHandle = Entities .ForEach((Entity entity, int entityInQueryIndex, ref TimeToLive life) => { life.LifeLeft -= dt; if (life.LifeLeft < 0) commandBufferCull.DestroyEntity(entityInQueryIndex, entity); }) .WithName(\"CullOldEntities\") .Schedule(inputDeps); JobHandle finalDependencies = JobHandle.CombineDependencies(MoveJobHandle, cullJobHandle); commandBufferSystem.AddJobHandleForProducer(spawnJobHandle); commandBufferSystem.AddJobHandleForProducer(cullJobHandle); return finalDependencies; } } // SpawnParticles.cs using Unity.Entities; using Unity.Mathematics; [GenerateAuthoringComponent] public struct SpawnParticles : IComponentData { public Entity ParticlePrefab; public int Rate; public float3 Offset; public float3 MaxVelocity; public float Lifetime; } Implementation notes Entities.ForEach and Job.WithCode use a compiler extension to convert the code that you write into efficient, job-based C# code. Essentially, when writing an Entities.ForEach or Job.WithCode construction, you are describing what you want the job to do and the compiler extension generates the required code to make that happen. In general, this conversion should be transparent to you; however, take note of the following: Performance drawbacks of lambda functions such as extra managed memory allocations when capturing variables do not apply. Code completion in an IDE may not list the correct parameters for the Entities and Job object methods. You may see the generated class names in places like warnings, error messages, and IL code disassembly. When you use WithStoreEntityQueryInField(ref query) , the compiler extension assigns a value to the query field before the system's OnCreate() method. This means that you can access the EntityQuery object referenced by the field before the the Entities.ForEach lambda function runs for the first time."
  },
  "manual/entities.html": {
    "href": "manual/entities.html",
    "title": "Entity | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Entity Entity is an ID. You can think of it as a super lightweight GameObject that does not even have a name by default. You can add and remove components from entities at runtime. entity ID's are stable. They are the only stable way to store a reference to another component or entity. You can add and remove components from entities at runtime in much the same way as a GameObject . Entities can be created from Prefabs by using ComponentDataProxy . The EntityManager will parse the Prefab for ComponentData and add it when it creates the entity. Iterating entities Iterating over all entities that have a matching set of components, is at the center of the ECS architecture."
  },
  "manual/ecs_write_groups.html": {
    "href": "manual/ecs_write_groups.html",
    "title": "WriteGroups | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "WriteGroups A common ECS pattern is for a system to read one set of input components and write to another, output component. However, you may want to override that system and update the output component based on your own set of inputs. WriteGroups allow you to override whether a system writes to a component without having to change the overridden system. A WriteGroup identifies a set of components used as the source for writing to a particular component. The system defining that WriteGroup must also enable WriteGroup filtering on the EntityQuery objects it uses to select the entities to update. Define a WriteGroup using the WriteGroup attribute. This attribute takes the type of the target, output component as a parameter. Place the attribute on every component used as a source when updating the target component. For example, the following declaration specifies that component A is part of the WriteGroup targeting component W: [WriteGroup(typeof(W))] public struct A : IComponentData{ public int Value; } Note that the target component of the WriteGroup must be included in the query and accessed as writable. Otherwise, the WriteGroup is ignored for that query. When you turn on WriteGroup filtering in a query, the query adds all components in a WriteGroup to the None list of the query unless you explicitly add them to the All or Any lists. As a result, the query only selects an entity if every component on that entity from a particular WriteGroup is explicitly required by the query. If an entity has one or more additional components from that WriteGroup, the query rejects it. So far, WriteGroups don’t do anything that you couldn’t achieve by just rewriting the query. However, the benefit comes when you are working with a system that you cannot rewrite. You can add your own component to any WriteGroup defined by that system and, when you put that component on an entity along with the preexisting components, the system no longer selects and updates that entity. Your own system can then update the entity without contention from the other system. WriteGroup Example: Given: Components A and B in a WriteGroup targeting component W Query: All: A, W WriteGroup filtering enabled Entities: Entity X Entity Y A A W B W The query selects Entity X, but not Y. Entity Y is not selected because it has component B, which is part of the same WriteGroup, but is not required by the query. Enabling WriteGroup filtering changes the query to be: All: A, W None: B Without WriteGroup filtering, the query would select both Entity X and Y. Note: for more examples you can look at the Unity.Transforms code, which uses WriteGroups for every component it updates, including LocalToWorld. Creating WriteGroups You can create WriteGroups by adding the WriteGroup attribute to the declarations of each component in the WriteGroup. The WriteGroup attribute takes one parameter, which is the type of component that the components in the group are used to update. A single component can be a member of more than one WriteGroup. For example, if component W = A + B, then you would define a WriteGroup for W as follows: public struct W : IComponentData { public int Value; } [WriteGroup(typeof(W))] public struct A : IComponentData { public int Value; } [WriteGroup(typeof(W))] public struct B : IComponentData { public int Value; } Note that you do not add the target of the WriteGroup (struct W in the example above) to its own WriteGroup. Enabling WriteGroup filtering To enable WriteGroup filtering, set the FilterWriteGroups flag on the query description object you use to create the query: public class AddingSystem : JobComponentSystem { private EntityQuery m_Query; protected override void OnCreate() { var queryDescription = new EntityQueryDesc { All = new ComponentType[] {typeof(A), typeof(B)}, Options = EntityQueryOptions.FilterWriteGroup }; m_Query = GetEntityQuery(queryDescription); } // Define Job and schedule... } Overriding another system that uses WriteGroups If a system defines WriteGroups for the components it writes to, you can override that system and write to those components using your own system. To override the system, add your own components to the WriteGroups defined by that system. Since WriteGroup filtering excludes any components in the WriteGroup that aren’t explicitly required by a query, any entities that have your components will then be ignored by the other system. For example, if you wanted to set the orientation of your entities by specifying the angle and axis of rotation, you could create a component and a system to convert the angle and axis values into a quaternion and write that to the Unity.Transforms.Rotation component. To prevent the Unity.Transforms systems from updating Rotation, no matter what other components besides yours are present, you can put your component in the Rotation WriteGroup: using System; using Unity.Collections; using Unity.Entities; using Unity.Transforms; using Unity.Mathematics; [Serializable] [WriteGroup(typeof(Rotation))] public struct RotationAngleAxis : IComponentData { public float Angle; public float3 Axis; } You can then update any entities containing RotationAngleAxis without contention: using Unity.Burst; using Unity.Entities; using Unity.Jobs; using Unity.Collections; using Unity.Mathematics; using Unity.Transforms; public class RotationAngleAxisSystem : JobComponentSystem { [BurstCompile] struct RotationAngleAxisSystemJob : IJobForEach<RotationAngleAxis, Rotation> { public void Execute([ReadOnly] ref RotationAngleAxis source, ref Rotation destination) { destination.Value = quaternion.AxisAngle(math.normalize(source.Axis), source.Angle); } } protected override JobHandle OnUpdate(JobHandle inputDependencies) { var job = new RotationAngleAxisSystemJob(); return job.Schedule(this, inputDependencies); } } Extending another system that uses WriteGroups If you want to extend the other system rather than just override it, and further, you want to allow future systems to override or extend your system, then you can enable WriteGroup filtering on your own system. When you do this, however, no combinations of components will be handled by either system by default. You must explicitly query for and process each combination. As an example, let’s return to the AddingSystem example described earlier, which defined a WriteGroup containing components A and B that targeted component W. If you simply add a new component, call it “C”, to the WriteGroup, then the new system that knows about C can query for entities containing C and it does not matter if those entities also have components A or B. However, if the new system also enables WriteGroup filtering, that is no longer true. If you only require component C, then WriteGroup filtering excludes any entities with either A or B. Instead, you must explicitly query for each combination of components that make sense. (You can use the “Any” clause of the query when appropriate.) var query = new EntityQueryDesc { All = new ComponentType[] {ComponentType.ReadOnly<C>(), ComponentType.ReadWrite<W>()}, Any = new ComponentType[] {ComponentType.ReadOnly<A>(), ComponentType.ReadOnly<B>()}, Options = EntityQueryOptions.FilterWriteGroup }; Any entities containing combinations of components in the WriteGroup that are not explicitly handled will not be handled by any system that writes to the target of the WriterGroup (and filters on WriteGroups). But then, it is most likely a logical error in the program to create such entities in the first place."
  },
  "manual/ecs_debugging.html": {
    "href": "manual/ecs_debugging.html",
    "title": "Debugging ECS | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Debugging ECS Synopsis: All about debugging ECS Outline: Entity Debugger Inspecting an Entity Live-link Entity Debugger The Entity Debugger allows you to visualize your entities, systems, and components Open the entity Debugger window using the menu: Window > Analysis > Entity Debugger. Systems list The Systems list shows the systems in your project and how much time a system takes to run each frame. You can turn systems on and off from the list using the checkbox provided for each system. Use the System Display control drop down at the top of the list to control what to display in the System list. The System Display control contains: Worlds — Choose the World containing the entities and ComponentSystems to display. By default, an Editor World exists when not in play mode and a Default World exists in play mode. Show Full Player Loop option — Choose to display the systems of all Worlds and show all of the Unity execution phases (not just those containing systems). Show Inactive Systems option — Choose to show systems that are not currently running in addition to the running systems. Select a system to view its details. Note: If you select the EntityManager entry in the System list, then you have different options on the System details section. System details The System details section shows the groups of components that a System operates on and the list of entities associated with those component groups. Each component group shows the components in the group along with the number of entities associated with it. Select a component group to view information about the Chunks containing the data for the components in the group. When you select the EntityManager entry in the system list, the details section shows all of the entities in the displayed World. When you display a World (rather than the full player loop), you can also filter the list of entities by component To filter the Entity list: Select a World in the System Display control. Select the EntityManager for that World. At the top of the System details section, click Edit . In the Choose Component window, check the components whose entities you want to view. Chunk information The Chunk information section shows the Chunks containing data for the components and entities selected in the details section. Inspecting an Entity Select an entity in the Entity Debugger to view its data in the Unity Inspector window."
  },
  "manual/ecs_data_structures.html": {
    "href": "manual/ecs_data_structures.html",
    "title": "Data structures | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Data structures Synopsis: About the Native data structures in the core module and in the extension module in detail (that isn't already covered in the script reference). How to create your own native data structures."
  },
  "manual/ecs_chunk_component.html": {
    "href": "manual/ecs_chunk_component.html",
    "title": "Chunk component data | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Chunk component data Use chunk components to associate data with a specific chunk . Chunk components contain data that applies to all entities in a specific chunk. For example, if you had chunks of entities representing 3D objects that are organized by proximity, you could store a collective bounding box for the entities in a chunk using a chunk component. Chunk components use the interface type IComponentData . Add and set the values of a chunk component using Although chunk components can have values unique to an individual chunk, they are still part of the archetype of the entities in the chunk. Thus if you remove a chunk component from an entity, that entity is moved to a different chunk (possibly a new one). Likewise, if you add a chunk component to an entity, that entity moves to a different chunk since its archetype changes; the addition of the chunk component does not affect the remaining entities in the original chunk. If you change the value of a chunk component using an entity in that chunk, it changes the value of the chunk component common to all the entities in that chunk. If you change the archetype of an entity such that it moves into a new chunk that happens to have the same type of chunk component, then the existing value in the destination chunk is unaffected. (If the entity is moved to a newly created chunk, then a new chunk component for that chunk is also created and assigned its default value.) The main differences between working with chunk components and general-purpose components is that you use different functions to add, set, and remove them. Chunk components also have their own ComponentType functions for use in defining entity archetypes and queries. Relevant APIs Purpose Function Declaration IComponentData ArchetypeChunk methods Read GetChunkComponentData (ArchetypeChunkComponentType ) Check HasChunkComponent (ArchetypeChunkComponentType ) Write SetChunkComponentData (ArchetypeChunkComponentType , T) EntityManager methods Create AddChunkComponentData (Entity) Create AddChunkComponentData (EntityQuery, T) Create AddComponents(Entity,ComponentTypes) Get type info GetArchetypeChunkComponentType (Boolean) Read GetChunkComponentData (ArchetypeChunk) Read GetChunkComponentData (Entity) Check HasChunkComponent (Entity) Delete RemoveChunkComponent (Entity) Delete RemoveChunkComponentData (EntityQuery) Write EntityManager.SetChunkComponentData (ArchetypeChunk, T) Declaring a chunk component Chunk components use the interface type IComponentData . public struct ChunkComponentA : IComponentData { public float Value; } Creating a chunk component You can add a chunk component directly, using an entity in the target chunk or using an entity query that selects a group of target chunks. Chunk components cannot be added inside a Job, nor can they be added with an EntityCommandBuffer. You can also include chunk components as part of the EntityArchetype or list of ComponentType objects used to create entities and the chunk components are created for each chunk storing entities with that archetype. Use ComponentType.ChunkComponent<T> or ComponentType.ChunkComponentReadOnly<T> with these methods. Otherwise, the component is treated as a general-purpose component instead of a chunk component. With an entity in a chunk Given an entity in the target chunk, you can add a chunk component to the chunk using the EntityManager.AddChunkComponentData<T>() function: EntityManager.AddChunkComponentData<ChunkComponentA>(entity); Using this method, you cannot immediately set a value for the chunk component. With an EntityQuery Given an entity query that selects all the chunks to which you want to add a chunk component, you can add and set the component using the EntityManager.AddChunkComponentData<T>() function: EntityQueryDesc ChunksWithoutComponentADesc = new EntityQueryDesc() { None = new ComponentType[] {ComponentType.ChunkComponent<ChunkComponentA>()} }; ChunksWithoutChunkComponentA = GetEntityQuery(ChunksWithoutComponentADesc); EntityManager.AddChunkComponentData<ChunkComponentA>(ChunksWithoutChunkComponentA, new ChunkComponentA() {Value = 4}); Using this method, you can set the same initial value for all the new chunk components. With an EntityArchetype When creating entities with an archetype or list of component types, include the chunk component types in the archetype: ArchetypeWithChunkComponent = EntityManager.CreateArchetype( ComponentType.ChunkComponent(typeof(ChunkComponentA)), ComponentType.ReadWrite<GeneralPurposeComponentA>()); var entity = EntityManager.CreateEntity(ArchetypeWithChunkComponent); or list of component types: ComponentType[] compTypes = {ComponentType.ChunkComponent<ChunkComponentA>(), ComponentType.ReadOnly<GeneralPurposeComponentA>()}; var entity = EntityManager.CreateEntity(compTypes); Using these methods, the chunk components for new chunks created as part of entity construction receive the default struct value. Chunk components in existing chunks are not changed. See Updating a chunk component for how to set the chunk component value given a reference to an entity. Reading a chunk component You can read a chunk component using the ArchetypeChunk object representing the chunk or using an entity in the target chunk. With the ArchetypeChunk instance Given a chunk, you can read its chunk component using the EntityManager.GetChunkComponentData<T> function. The following code iterates over all the chunks matching a query and accesses a chunk component of type ChunkComponentA: var chunks = ChunksWithChunkComponentA.CreateArchetypeChunkArray(Allocator.TempJob); foreach (var chunk in chunks) { var compValue = EntityManager.GetChunkComponentData<ChunkComponentA>(chunk); //.. } chunks.Dispose(); With an entity in a chunk Given an entity, you can access a chunk component in the chunk containing that entity with EntityManager.GetChunkComponentData<T> : if(EntityManager.HasChunkComponent<ChunkComponentA>(entity)) chunkComponentValue = EntityManager.GetChunkComponentData<ChunkComponentA>(entity); You can also set up a fluent query to select only entities that have a chunk component: Entities.WithAll(ComponentType.ChunkComponent<ChunkComponentA>()).ForEach( (Entity entity) => { var compValue = EntityManager.GetChunkComponentData<ChunkComponentA>(entity); //... }); Note that you cannot pass a chunk component to the for-each portion of the query. Instead, you must pass the Entity object and use the EntityManager to access the chunk component. Updating a chunk component You can update a chunk component given a reference to the chunk it belongs to. In an IJobChunk Job, you can call ArchetypeChunk.SetChunkComponentData . On the main thread, you can use the EntityManager version, EntityManager.SetChunkComponentData . Note that you cannot access chunk components in an IJobForEach Job because you do not have access to the ArchetypeChunk object or the EntityManager. With the ArchetypeChunk instance To update a chunk component in a Job, see Reading and writing in a JobComponentSystem . To update a chunk component on the main thread, use the EntityManager: EntityManager.SetChunkComponentData<ChunkComponentA>(chunk, new ChunkComponentA(){Value = 7}); With an Entity instance If you have an entity in the chunk rather than the chunk reference itself, you can also use the EntityManger to get the chunk containing the entity: var entityChunk = EntityManager.GetChunk(entity); EntityManager.SetChunkComponentData<ChunkComponentA>(entityChunk, new ChunkComponentA(){Value = 8}); Detecting changes in data Use component change versions to detect when a chunk component needs to be updated for a given chunk. ECS updates the component versions for a chunk whenever the data in a component is accessed as writable or when an entity is added or removed from the chunk. For example, if the chunk component contains the center point of the entities in a chunk, calculated from the LocalToWorld component of those entities, you can check the version of the LocalToWorld components to determine whether the chunk component should be updated. If your chunk component is derived from more than one component, you should check the versions of all of the components to see if any of them changed. See Skipping chunks with unchanged entities for additional information. Reading and writing in a JobComponentSystem In an IJobChunk inside a JobComponentSystem, you can access chunk components using the chunk parameter passed to the IJobChunk Execute function. As with any component data in an IJobChunk Job, you must pass a ArchetypeChunkComponentType<T> object to the Job using a field struct in order to access the component. The following system defines a query that selects all entities and chunks with a chunk component of type, ChunkComponentA . It then runs an IJobChunk Job using the query to iterate over the selected chunks and access the individual chunk components. The Job uses the ArchetypeChunk GetChunkComponentData and SetChunkComponentData functions to read and write the chunk component data. using Unity.Burst; using Unity.Entities; using Unity.Jobs; public class ChunkComponentChecker : JobComponentSystem { private EntityQuery ChunksWithChunkComponentA; protected override void OnCreate() { EntityQueryDesc ChunksWithComponentADesc = new EntityQueryDesc() { All = new ComponentType[]{ComponentType.ChunkComponent<ChunkComponentA>()} }; ChunksWithChunkComponentA = GetEntityQuery(ChunksWithComponentADesc); } [BurstCompile] struct ChunkComponentCheckerJob : IJobChunk { public ArchetypeChunkComponentType<ChunkComponentA> ChunkComponentATypeInfo; public void Execute(ArchetypeChunk chunk, int chunkIndex, int firstEntityIndex) { var compValue = chunk.GetChunkComponentData(ChunkComponentATypeInfo); //... var squared = compValue.Value * compValue.Value; chunk.SetChunkComponentData(ChunkComponentATypeInfo, new ChunkComponentA(){Value= squared}); } } protected override JobHandle OnUpdate(JobHandle inputDependencies) { var job = new ChunkComponentCheckerJob() { ChunkComponentATypeInfo = GetArchetypeChunkComponentType<ChunkComponentA>() }; return job.Schedule(ChunksWithChunkComponentA, inputDependencies); } } Note that if you are only reading a chunk component and not writing, you should use ComponentType.ChunkComponentReadOnly when defining your entity query to avoid creating unnecessary Job scheduling constraints. Deleting a chunk component Use the EntityManager.RemoveChunkComponent functions to delete a chunk component. You can remove a chunk component given an entity in the target chunk or you can remove all the chunk components of a given type from all chunks selected by an entity query. If you remove a chunk component from an individual entity, that entity moves to a different chunk because the archetype of the entity changes; the chunk itself retains the unchanged chunk component as long as there are other entities remaining in the chunk. Using a chunk component in a query To use a chunk component in an entity query, you must specify the type using either the ComponentType.ChunkComponent<T> or ComponentType.ChunkComponentReadOnly<T> functions. Otherwise, the component is treated as a general-purpose component instead of a chunk component. In an EntityQueryDesc The following query description can be used to create an entity query that selects all chunks -- and entities in those chunks -- that have a chunk component of type, ChunkComponentA : EntityQueryDesc ChunksWithChunkComponentADesc = new EntityQueryDesc() { All = new ComponentType[]{ComponentType.ChunkComponent<ChunkComponentA>()} }; In an EntityQueryBuilder lambda function The following fluent query iterates over all entities in chunks that have a chunk component of type, ChunkComponentA : Entities.WithAll(ComponentType.ChunkComponentReadOnly<ChunkCompA>()) .ForEach((Entity ent) => { var chunkComponentA = EntityManager.GetChunkComponentData<ChunkCompA>(ent); }); Note: you cannot pass a chunk component to the lambda function itself. To read or write the value of a chunk component in a fluent query, use the ComponentSystem.EntityManager property. Modifying a chunk component effectively modifies the value for all entities in the same chunk; it does not move the current entity to a different chunk."
  },
  "manual/ecs_burst.html": {
    "href": "manual/ecs_burst.html",
    "title": "Using Burst | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Using Burst Synopsis: Cover how, when, and why to use the Burst compiler with ECS. Everything burst -elated within ECS should go here."
  },
  "manual/ecs_building_projects.html": {
    "href": "manual/ecs_building_projects.html",
    "title": "Building your project | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Building your project Synopsis: Cover any unique aspects for building ECS projects, including any cross-platform details."
  },
  "manual/dynamic_buffers.html": {
    "href": "manual/dynamic_buffers.html",
    "title": "Dynamic Buffers | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Dynamic Buffers Use dynamic buffers to associate array-like data with an entity. Dynamic buffers are ECS components that can hold a variable number of elements, automatically resizing as necessary. To create a dynamic buffer, first declare a struct that implements IBufferElementData and which defines the elements stored in the buffer. For example, you could use the following struct for a buffer component that stores integers: public struct IntBufferElement : IBufferElementData { public int Value; } To associate a dynamic buffer with an entity, add an IBufferElementData component directly to the entity rather than adding the dynamic buffer container itself. ECS manages the container; for most purposes, you can treat a dynamic buffer the same as any other ECS component by using your declared IBufferElementData type. For example, you can use the IBufferElementData type in entity queries as well as when adding or removing the buffer component. However, you use different functions to access a buffer component and those functions provide the DynamicBuffer instance, which provides an array-like interface to the buffer data. You can specify an “internal capacity\" for a dynamic buffer component using the InternalBufferCapacity attribute . The internal capacity defines the number of elements the dynamic buffer stores in the ArchetypeChunk along with the other components of an entity. If you increase the size of a buffer beyond the internal capacity, the buffer allocates a heap memory block outside the current chunk (and moves all existing elements). ECS manages this external buffer memory automatically, freeing the memory when the buffer component is removed. Note that if the data in a buffer is not dynamic, you can use a blob asset instead of a dynamic buffer. Blob assets can store structured data, including arrays and can be shared by multiple entities. Declaring Buffer Element Types To declare a buffer, declare a struct defining the type of element that you are putting into the buffer. The struct must implement IBufferElementData : // InternalBufferCapacity specifies how many elements a buffer can have before // the buffer storage is moved outside the chunk. [InternalBufferCapacity(8)] public struct MyBufferElement : IBufferElementData { // Actual value each buffer element will store. public int Value; // The following implicit conversions are optional, but can be convenient. public static implicit operator int(MyBufferElement e) { return e.Value; } public static implicit operator MyBufferElement(int e) { return new MyBufferElement {Value = e}; } } Adding Buffer Types To Entities To add a buffer to an entity, add the IBufferElementData struct that defines the data type of the buffer element, and add that type directly to an entity or to an archetype : Using EntityManager.AddBuffer() EntityManager.AddBuffer<MyBufferElement>(entity); Using an archetype Entity e = EntityManager.CreateEntity(typeof(MyBufferElement)); Using an EntityCommandBuffer You can add or set a buffer component when adding commands to an entity command buffer. Use AddBuffer to create a new buffer for the entity, changing the entity's archetype. Use SetBuffer to wipe out the existing buffer (which must exist) and create a new, empty buffer in its place. Both functions return a DynamicBuffer instance that you can use to populate the new buffer. You can add elements to the buffer immediately, but they are not otherwise accessible until the buffer is actually added to the entity when the command buffer is executed. The following job creates a new entity using a command buffer and then adds a dynamic buffer component using EntityCommandBuffer.AddBuffer . The job also adds a number of elements to the dynamic buffer. struct DataSpawnJob : IJobForEachWithEntity<DataToSpawn> { // A command buffer marshals structural changes to the data public EntityCommandBuffer.Concurrent CommandBuffer; //The DataToSpawn component tells us how many entities with buffers to create public void Execute(Entity spawnEntity, int index, [ReadOnly] ref DataToSpawn data) { for (int e = 0; e < data.EntityCount; e++) { //Create a new entity for the command buffer Entity newEntity = CommandBuffer.CreateEntity(index); //Create the dynamic buffer and add it to the new entity DynamicBuffer<MyBufferElement> buffer = CommandBuffer.AddBuffer<MyBufferElement>(index, newEntity); //Reinterpret to plain int buffer DynamicBuffer<int> intBuffer = buffer.Reinterpret<int>(); //Optionally, populate the dynamic buffer for (int j = 0; j < data.ElementCount; j++) { intBuffer.Add(j); } } //Destroy the DataToSpawn entity since it has done its job CommandBuffer.DestroyEntity(index, spawnEntity); } } Note: You are not required to add data to the dynamic buffer immediately. However, you won't have access to the buffer again until after the entity command buffer you are using is executed. Accessing Buffers You can access the DynamicBuffer instance using EntityManager , systems , and jobs, in much the same way as you access other component types of your entities. EntityManager You can use an instance of the EntityManager to access a dynamic buffer: DynamicBuffer<MyBufferElement> dynamicBuffer = EntityManager.GetBuffer<MyBufferElement>(entity); Component System Entities.ForEach You can also access dynamic buffers in a component system : public class DynamicBufferSystem : ComponentSystem { protected override void OnUpdate() { var sum = 0; Entities.ForEach((DynamicBuffer<MyBufferElement> buffer) => { foreach (var integer in buffer.Reinterpret<int>()) { sum += integer; } }); Debug.Log(\"Sum of all buffers: \" + sum); } } Looking up buffers of another entity When you need to look up the buffer data belonging to another entity in a job, you can pass a BufferFromEntity You can also look up buffers on a per-entity basis from a JobComponentSystem: BufferFromEntity<MyBufferElement> lookup = GetBufferFromEntity<MyBufferElement>(); var buffer = lookup[entity]; buffer.Add(17); buffer.RemoveAt(0); IJobForEach You can access dynamic buffers associated with the entities you process with an IJobForEach job. In the IJobforEach or IJobForEachWithEntity declaration, use the IBufferElementData type contained in the buffer as one of the generic parameters. For example: public struct BuffersByEntity : IJobForEachWithEntity_EB<MyBufferElement> However, in the Execute() method of the job struct, use the DynamicBuffer<T> as the parameter type. For example: public void Execute(Entity entity, int index, DynamicBuffer<MyBufferElement> buffer) The following example adds up the contents of all dynamic buffers containing elements of type, MyBufferElement . Because IJobForEach jobs process entities in parallel, the example first stores the intermediate sum for each buffer in a native array and uses a second job to calculate the final sum. public class DynamicBufferForEachSystem : JobComponentSystem { private EntityQuery query; protected override void OnCreate() { EntityQueryDesc queryDescription = new EntityQueryDesc(); queryDescription.All = new[] {ComponentType.ReadOnly<MyBufferElement>()}; query = GetEntityQuery(queryDescription); } //Sums the elements of individual buffers of each entity public struct BuffersByEntity : IJobForEachWithEntity_EB<MyBufferElement> { public NativeArray<int> sums; public void Execute(Entity entity, int index, DynamicBuffer<MyBufferElement> buffer) { foreach (int integer in buffer.Reinterpret<int>()) { sums[index] += integer; } } } //Sums the intermediate results into the final total public struct SumResult : IJob { [DeallocateOnJobCompletion] public NativeArray<int> sums; public void Execute() { int sum = 0; foreach (int integer in sums) { sum += integer; } //Note: Debug.Log is not burst-compatible Debug.Log(\"Sum of all buffers: \" + sum); } } //Schedules the two jobs with a dependency between them protected override JobHandle OnUpdate(JobHandle inputDeps) { //Create a native array to hold the intermediate sums int entitiesInQuery = query.CalculateEntityCount(); NativeArray<int> intermediateSums = new NativeArray<int>(entitiesInQuery, Allocator.TempJob); //Schedule the first job to add all the buffer elements BuffersByEntity bufferJob = new BuffersByEntity(); bufferJob.sums = intermediateSums; JobHandle intermediateJob = bufferJob.Schedule(this, inputDeps); //Schedule the second job, which depends on the first SumResult finalSumJob = new SumResult(); finalSumJob.sums = intermediateSums; return finalSumJob.Schedule(intermediateJob); } } IJobChunk To access an individual buffer in an IJobChunk job, pass the buffer data type to the job and use that to get a BufferAccessor . A buffer accessor is an array-like structure that provides access to all of the dynamic buffers in the current chunk. Like the previous, IJobForEach example, the following example adds up the contents of all dynamic buffers containing elements of type, MyBufferElement . IJobChunk jobs can also run in parallel on each chunk so the example first stores the intermediate sum for each buffer in a native array and uses a second job to calculate the final sum. In this case, the intermediate array holds one result for each chunk, rather than one result for each entity. public class DynamicBufferJobSystem : JobComponentSystem { private EntityQuery query; protected override void OnCreate() { //Create a query to find all entities with a dynamic buffer // containing MyBufferElement EntityQueryDesc queryDescription = new EntityQueryDesc(); queryDescription.All = new[] {ComponentType.ReadOnly<MyBufferElement>()}; query = GetEntityQuery(queryDescription); } public struct BuffersInChunks : IJobChunk { //The data type and safety object public ArchetypeChunkBufferType<MyBufferElement> BufferType; //An array to hold the output, intermediate sums public NativeArray<int> sums; public void Execute(ArchetypeChunk chunk, int chunkIndex, int firstEntityIndex) { //A buffer accessor is a list of all the buffers in the chunk BufferAccessor<MyBufferElement> buffers = chunk.GetBufferAccessor(BufferType); for (int c = 0; c < chunk.Count; c++) { //An individual dynamic buffer for a specific entity DynamicBuffer<MyBufferElement> buffer = buffers[c]; foreach (MyBufferElement element in buffer) { sums[chunkIndex] += element.Value; } } } } //Sums the intermediate results into the final total public struct SumResult : IJob { [DeallocateOnJobCompletion] public NativeArray<int> sums; public void Execute() { int sum = 0; foreach (int integer in sums) { sum += integer; } //Note: Debug.Log is not burst-compatible Debug.Log(\"Sum of all buffers: \" + sum); } } protected override JobHandle OnUpdate(JobHandle inputDeps) { //Create a native array to hold the intermediate sums int chunksInQuery = query.CalculateChunkCount(); NativeArray<int> intermediateSums = new NativeArray<int>(chunksInQuery, Allocator.TempJob); //Schedule the first job to add all the buffer elements BuffersInChunks bufferJob = new BuffersInChunks(); bufferJob.BufferType = GetArchetypeChunkBufferType<MyBufferElement>(); bufferJob.sums = intermediateSums; JobHandle intermediateJob = bufferJob.Schedule(query, inputDeps); //Schedule the second job, which depends on the first SumResult finalSumJob = new SumResult(); finalSumJob.sums = intermediateSums; return finalSumJob.Schedule(intermediateJob); } } Reinterpreting Buffers Buffers can be reinterpreted as a type of the same size. The intention is to allow controlled type-punning and to get rid of the wrapper element types when they get in the way. To reinterpret, call Reinterpret<T> : DynamicBuffer<int> intBuffer = EntityManager.GetBuffer<MyBufferElement>(entity).Reinterpret<int>(); The reinterpreted buffer instance retains the safety handle of the original buffer, and is safe to use. Reinterpreted buffers reference to original data, so modifications to one reinterpreted buffer are immediately reflected in others. Note that the reinterpret function only enforces that the types involved have the same length; you could alias a uint and float buffer without raising an error since both types are 32-bits long. It is your responsibility to make sure that the reinterpretation makes sense logically."
  },
  "manual/TableOfContents.html": {
    "href": "manual/TableOfContents.html",
    "title": "| Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Overview Core ECS Entities Worlds Components General Purpose Components Shared Components System State Components Dynamic Buffer Components Chunk Components Systems Component Systems Job Component Systems Entity Command Buffers System Update Order Accessing Entity Data Using JobComponentSystem and ForEach Using IJobForEach Using ComponentSystem and ForEach Using IJobChunk Manual iteration Entity Queries Component WriteGroups Versions and Generations Jobs in ECS ECS Job System extensions Creating Gameplay Transforms Rendering"
  },
  "manual/world.html": {
    "href": "manual/world.html",
    "title": "World | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "World A World owns both an EntityManager and a set of ComponentSystems . You can create as many World objects as you like. Commonly you would create a simulation World and rendering or presentation World . By default we create a single World when entering Play Mode and populate it with all available ComponentSystem objects in the project, but you can disable the default World creation and replace it with your own code via global defines. #UNITY_DISABLE_AUTOMATIC_SYSTEM_BOOTSTRAP_RUNTIME_WORLD disables generation of the default runtime world. #UNITY_DISABLE_AUTOMATIC_SYSTEM_BOOTSTRAP_EDITOR_WORLD disables generation of the default editor world. #UNITY_DISABLE_AUTOMATIC_SYSTEM_BOOTSTRAP disables generation of both default worlds. Default World creation code (see file: Packages/com.unity.entities/Unity.Entities.Hybrid/Injection/DefaultWorldInitialization.cs ) Automatic bootstrap entry point (see file: Packages/com.unity.entities/Unity.Entities.Hybrid/Injection/AutomaticWorldBootstrap.cs )"
  },
  "manual/version_numbers.html": {
    "href": "manual/version_numbers.html",
    "title": "Version Numbers | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Version Numbers Scope The purpose of version numbers (aka. generations) is the detection of potential changes. Amongst other things, they can be used to implement cheap and efficient optimization strategies, e.g. some processing might be skipped when the data it operates on is guaranteed not to have changed since last frame. It often happens that by performing a very quick conservative version check for a bunch of entities at once, significant performance gains can be easily obtained. This page lists and documents all the different version numbers used by ECS, in particular conditions that will cause them to change. Preliminary Remarks All version numbers are 32 bits signed integers, they always increase unless they wrap around, signed integer overflow is defined behavior in C#. This means that comparing version numbers should be done using the (in)equality operator, not relational operators. The right way to check if VersionB is more recent than VersionA is: bool VersionBIsMoreRecent = (VersionB - VersionA) > 0; There is usually no guarantee by how much a version number will increase. EntityId.Version An EntityId is made of an index and a version number. Since indices are recycled, the version number is increased in EntityManager every time the entity is destroyed. If there is a mismatch in the version numbers when an EntityId is looked up in EntityManager , it means the entity referred to doesn’t exist anymore. Before fetching the position of the enemy some unit is tracking via an EntityId, you can call ComponentDataFromEntity.Exists that uses the version number to check if the entity still exists. World.Version The version number of a world is increased every time a manager (i.e. system) is created or destroyed. EntityDataManager.GlobalVersion Is increased before every single (job) component system update. The purpose of this version number is to be used in conjunction with System.LastSystemVersion . System.LastSystemVersion Takes the value of EntityDataManager.GlobalVersion after every single (job) component system update. The purpose of this version number is to be used in conjunction with Chunk.ChangeVersion[] . Chunk.ChangeVersion For each component type in the archetype, this array contains the value of EntityDataManager.GlobalVersion at the time the component array was last accessed as writeable within this chunk. This in no way guarantees that anything has effectively changed, only that it could have potentially changed. Shared components can never be accessed as writeable, even if there is technically a version number stored for those too, it serves no purpose. When using the [ChangedFilter] attribute in an IJobForEach , the Chunk.ChangeVersion for that specific component is compared to System.LastSystemVersion , so only chunks whose component arrays have been accessed as writeable since after the system last started running will be processed. If the amount of health points of a group of units is guaranteed not to have changed since the previous frame, checking if those units should update their damage model can be skipped altogether. EntityManager.m_ComponentTypeOrderVersion[] For each non-shared component type, the version number is increased every time an iterator involving that type should become invalid. In other words, anything that might modify arrays of that type (not instances). If we have static objects identified by a particular component, and a per-chunk bounding box, we know we only need to update those bounding boxes if the type order version changes for that component. SharedComponentDataManager.m_SharedComponentVersion[] These version numbers increase when any structural change happens to the entities stored in a chunk referencing that shared component. Imagine we keep a count of entities per shared component, we can rely on that version number to only redo each count if the corresponding version number changes."
  },
  "manual/transform_system.html": {
    "href": "manual/transform_system.html",
    "title": "TransformSystem | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "TransformSystem Section 1: Non-hierarchical Transforms (Basic) LocalToWorld (float4x4) represents the transform from local space to world space. It is the canonical representation and is the only component and can be relied upon to communicate local space among systems. Some DOTS features may rely on the existence of LocalToWorld in order to function. For example, the RenderMesh component relies on the LocalToWorld component to exist for rendering an instance. If only the LocalToWorld transform component exists, no transform system will write or affect the LocalToWorld data. User code may write directly to LocalToWorld to define the transform for an instance, if no other transform components are associated with the same entity. The purpose of all transform systems and all other transform components is to provide interfaces to write to LocalToWorld. LocalToWorld = Translation * Rotation * Scale If any combination of Translation (float3), Rotation (quaternion), or Scale (float) components are present along with a LocalToWorld component, a transform system will combine those components and write to LocalToWorld. Concretely, each of these component combinations will write to LocalToWorld as: [TRSToLocalToWorldSystem] LocalToWorld <= Translation [TRSToLocalToWorldSystem] LocalToWorld <= Translation * Rotation [TRSToLocalToWorldSystem] LocalToWorld <= Translation * Rotation * Scale [TRSToLocalToWorldSystem] LocalToWorld <= Rotation [TRSToLocalToWorldSystem] LocalToWorld <= Rotation * Scale [TRSToLocalToWorldSystem] LocalToWorld <= Scale e.g. If the following components are present... (Entity) LocalToWorld Translation Rotation ...then the transform system will: [TRSToLocalToWorldSystem] Write LocalToWorld <= Translation * Rotation Or, if the following components are present... (Entity) LocalToWorld Translation Rotation Scale ...then the transform system will: [TRSToLocalToWorldSystem] Write LocalToWorld <= Translation * Rotation * Scale Section 2: Hierarchical Transforms (Basic) LocalToParent and Parent components are required for the transform system to write a LocalToWorld based on a hierarchical transform. LocalToParent (float4x4) represents the transform from local space to parent local space. Parent (Entity) references the parent's LocalToWorld. User code may write directly to LocalToParent, if no other transform system is defined as writing to it. e.g. If the following components are present... Parent (Entity) Child (Entity) LocalToWorld LocalToWorld Translation LocalToParent Rotation Parent Scale ...then the transform system will: [TRSToLocalToWorldSystem] Parent: Write LocalToWorld as defined above in \"Non-hierarchical Transforms (Basic)\" [LocalToParentSystem] Child: Write LocalToWorld <= LocalToWorld[Parent] * LocalToParent LocalToWorld components associated with Parent Entity IDs are guaranteed to be computed before multiplies with LocalToParent associated with Child Entity ID. Note: Cyclical graph relationships are invalid. Results are undefined. When the hierarchy (topology) is changed (i.e. Any Parent component is added, removed or changed) internal state is added as SystemStateComponentData as: Child component (ISystemStateBufferElementData of Entity) associated with the Parent Entity ID PreviousParent component (ISystemStateComponentData of Entity) associated with the Child Entity ID Parent (Entity) Child (Entity) LocalToWorld LocalToWorld Translation LocalToParent Rotation Parent Scale PreviousParent* Child* Adding, removing, and updating of these components is handled by the [ParentSystem]. It is not expected that systems external to transform systems will read or write to these components. LocalToParent = Translation * Rotation * Scale If any combination of Translation (float3), Rotation (quaternion), or Scale (float) components are present along with a LocalToParent component, a transform system will combine those components and write to LocalToParent. Concretely, each of these component combinations will write to LocalToParent as: [TRSToLocalToParentSystem] LocalToParent <= Translation [TRSToLocalToParentSystem] LocalToParent <= Translation * Rotation [TRSToLocalToParentSystem] LocalToParent <= Translation * Rotation * Scale [TRSToLocalToParentSystem] LocalToParent <= Rotation [TRSToLocalToParentSystem] LocalToParent <= Rotation * Scale [TRSToLocalToParentSystem] LocalToParent <= Scale e.g. If the following components are present... Parent (Entity) Child (Entity) LocalToWorld LocalToWorld Translation LocalToParent Rotation Parent Scale PreviousParent* Child* Translation Rotation Scale ...then the transform system will: [TRSToLocalToWorldSystem] Parent: Write LocalToWorld as defined above in \"Non-hierarchical Transforms (Basic)\" [TRSToLocalToParentSystem] Child: Write LocalToParent <= Translation * Rotation * Scale [LocalToParentSystem] Child: Write LocalToWorld <= LocalToWorld[Parent] * LocalToParent Parents may of course themselves be children of other LocalToWorld components. e.g. If the following components are present... Parent (Entity) Child (Entity) LocalToWorld LocalToWorld LocalToParent LocalToParent Parent Parent PreviousParent* PreviousParent* Child* Translation Translation Rotation Rotation Scale Scale ...then the transform system will: [TRSToLocalToParentSystem] Parent: Write LocalToParent <= Translation * Rotation * Scale [TRSToLocalToParentSystem] Child: Write LocalToParent <= Translation * Rotation * Scale [LocalToParentSystem] Parent: Write LocalToWorld <= LocalToWorld[Parent] * LocalToParent [LocalToParentSystem] Child: Write LocalToWorld <= LocalToWorld[Parent] * LocalToParent Section 3: Default Conversion (Basic) Hybrid Conversion: UnityEngine.Transform MonoBehaviours which are part of GameObjects and are included in Sub Scenes or are on GameObjects with \"Convert To Entity\" Monobehaviours attached, have a default conversion to Transform system components. That conversion can be found in TransformConversion system in the Unity.Transforms.Hybrid assembly. Entities associated with the GameObject being transformed which have a Static component, only have LocalToWorld added to the resulting entity. So in the case of static instances, no transform system update will happen at runtime. For non-Static entities, a. Translation component will be added with the Transform.position value. b. Rotation component will be added with the Transform.rotation value. c. Transform.parent == null For non-unit Transform.localScale, NonUniformScale component will be added with the Transform.localScale value. d. If Transform.parent != null, but at the start of the (partial) hierarchy being converted: For non-unit Transform.lossyScale, NonUniformScale component will be added with the Transform.lossyScale value. e. For other cases where Transform.parent != null, Parent component will be added with the Entity referring to the converted Transform.parent GameObject. LocalToParent component will be added. Section 4: Non-hierarchical Transforms (Advanced) NonUniformScale (float3) as an alternative to Scale to specify scale per-axis. Note that not all DOTS features fully support non-uniform scale. Be sure to check those features’ documentation to understand their limitations. [TRSToLocalToWorldSystem] LocalToWorld <= Translation [TRSToLocalToWorldSystem] LocalToWorld <= Translation * Rotation [TRSToLocalToWorldSystem] LocalToWorld <= Translation * Rotation * NonUniformScale [TRSToLocalToWorldSystem] LocalToWorld <= Rotation [TRSToLocalToWorldSystem] LocalToWorld <= Rotation * NonUniformScale [TRSToLocalToWorldSystem] LocalToWorld <= NonUniformScale The presence of both Scale and NonUniform scale is not a valid case, but the result is defined. Scale will be used, NonUniformScale will be ignored. e.g. If the following components are present... (Entity) LocalToWorld Translation Rotation NonUniformScale ...then the transform system will: [TRSToLocalToWorldSystem] Write LocalToWorld <= Translation * Rotation * NonUniformScale The Rotation component may be written to directly as a quaternion by user code. However, if an Euler interface is preferred, components are available for each rotation order which will cause a write to the Rotation component if present. [RotationEulerSystem] Rotation <= RotationEulerXYZ [RotationEulerSystem] Rotation <= RotationEulerXZY [RotationEulerSystem] Rotation <= RotationEulerYXZ [RotationEulerSystem] Rotation <= RotationEulerYZX [RotationEulerSystem] Rotation <= RotationEulerZXY [RotationEulerSystem] Rotation <= RotationEulerZYX e.g. If the following components are present... (Entity) LocalToWorld Translation Rotation RotationEulerXYZ ...then the transform system will: [RotationEulerSystem] Write Rotation <= RotationEulerXYZ [TRSToLocalToWorldSystem] Write LocalToWorld <= Translation * Rotation * Scale It is a setup error to have more than one RotationEuler*** component is associated with the same Entity, however the result is defined. The first to be found in the order of precedence will be applied. That order is: RotationEulerXYZ RotationEulerXZY RotationEulerYXZ RotationEulerYZX RotationEulerZXY RotationEulerZYX For more complex Rotation requirements, a CompositeRotation (float4x4) component may be used as an alternative to Rotation. All of the combinations which are valid for Rotation are also valid for CompositeRotation. i.e. [TRSToLocalToWorldSystem] LocalToWorld <= Translation * CompositeRotation [TRSToLocalToWorldSystem] LocalToWorld <= Translation * CompositeRotation * Scale [TRSToLocalToWorldSystem] LocalToWorld <= CompositeRotation [TRSToLocalToWorldSystem] LocalToWorld <= CompositeRotation * Scale [TRSToLocalToWorldSystem] LocalToWorld <= Translation * CompositeRotation [TRSToLocalToWorldSystem] LocalToWorld <= Translation * CompositeRotation * NonUniformScale [TRSToLocalToWorldSystem] LocalToWorld <= CompositeRotation [TRSToLocalToWorldSystem] LocalToWorld <= CompositeRotation * NonUniformScale The CompositeRotation component may be written to directly as a float4x4 by user code. However, if a Maya/FBX-style interface is preferred, components are available which will write to the CompositeRotation component if present. CompositeRotation = RotationPivotTranslation * RotationPivot * Rotation * PostRotation * RotationPivot^-1 If any combination of RotationPivotTranslation (float3), RotationPivot (float3), Rotation (quaternion), or PostRotation (quaternion) components are present along with a CompositeRotation component, a transform system will combine those components and write to CompositeRotation. Concretely, each of these component combinations will write to CompositeRotation as: [CompositeRotationSystem] CompositeRotation <= RotationPivotTranslation [CompositeRotationSystem] CompositeRotation <= RotationPivotTranslation * RotationPivot * Rotation * RotationPivot^-1 [CompositeRotationSystem] CompositeRotation <= RotationPivotTranslation * RotationPivot * Rotation * PostRotation * RotationPivot^-1 [CompositeRotationSystem] CompositeRotation <= RotationPivotTranslation * RotationPivot * PostRotation * RotationPivot^-1 [CompositeRotationSystem] CompositeRotation <= RotationPivotTranslation * Rotation [CompositeRotationSystem] CompositeRotation <= RotationPivotTranslation * Rotation * PostRotation [CompositeRotationSystem] CompositeRotation <= RotationPivotTranslation * PostRotation [CompositeRotationSystem] CompositeRotation <= RotationPivot * Rotation * RotationPivot^-1 [CompositeRotationSystem] CompositeRotation <= RotationPivot * Rotation * PostRotation * RotationPivot^-1 [CompositeRotationSystem] CompositeRotation <= PostRotation [CompositeRotationSystem] CompositeRotation <= Rotation [CompositeRotationSystem] CompositeRotation <= Rotation * PostRotation Cases where RotationPivot is specified without either of Rotation, PostRotation have no additional affect on CompositeRotation. Note that since Rotation is re-used as a source for CompositeRotation, the alternative data interfaces to Rotation are still available. e.g. If the following components are present... (Entity) LocalToWorld Translation CompositeRotation Rotation RotationPivotTranslation RotationPivot PostRotation RotationEulerXYZ Scale ...then the transform system will: [CompositeRotationSystem] Write CompositeRotation <= RotationPivotTranslation * RotationPivot * Rotation * PostRotation * RotationPivot^-1 [TRSToLocalToWorldSystem] Write LocalToWorld <= Translation * CompositeRotation * Scale The PostRotation component may be written to directly as a quaternion by user code. However, if an Euler interface is preferred, components are available for each rotation order which will cause a write to the PostRotation component if present. [PostRotationEulerSystem] PostRotation <= PostRotationEulerXYZ [PostRotationEulerSystem] PostRotation <= PostRotationEulerXZY [PostRotationEulerSystem] PostRotation <= PostRotationEulerYXZ [PostRotationEulerSystem] PostRotation <= PostRotationEulerYZX [PostRotationEulerSystem] PostRotation <= PostRotationEulerZXY [PostRotationEulerSystem] PostRotation <= PostRotationEulerZYX e.g. If the following components are present... (Entity) LocalToWorld Translation CompositeRotation Rotation RotationPivotTranslation RotationPivot RotationEulerXYZ PostRotation PostRotationEulerXYZ Scale ...then the transform system will: [RotationEulerSystem] Write Rotation <= RotationEulerXYZ [PostRotationEulerSystem] Write PostRotation <= PostRotationEulerXYZ [CompositeRotationSystem] Write CompositeRotation <= RotationPivotTranslation * RotationPivot * Rotation * PostRotation * RotationPivot^-1 [TRSToLocalToWorldSystem] Write LocalToWorld <= Translation * CompositeRotation * Scale For more complex Scale requirements, a CompositeScale (float4x4) component may be used as an alternative to Scale (or NonUniformScale). All of the combinations which are valid for Scale or NonUniformScale are also valid for CompositeScale. i.e. [TRSToLocalToWorldSystem] LocalToWorld <= Translation * Rotation * CompositeScale [TRSToLocalToWorldSystem] LocalToWorld <= Rotation * CompositeScale [TRSToLocalToWorldSystem] LocalToWorld <= CompositeScale [TRSToLocalToWorldSystem] LocalToWorld <= Translation * CompositeRotation * CompositeScale [TRSToLocalToWorldSystem] LocalToWorld <= CompositeRotation * CompositeScale The CompositeScale component may be written to directly as a float4x4 by user code. However, if a Maya/FBX-style interface is preferred, components are available which will write to the CompositeScale component if present. CompositeScale = ScalePivotTranslation * ScalePivot * Scale * ScalePivot^-1 CompositeScale = ScalePivotTranslation * ScalePivot * NonUniformScale * ScalePivot^-1 If any combination of ScalePivotTranslation (float3), ScalePivot (float3), Scale (float) components are present along with a CompositeScale component, a transform system will combine those components and write to CompositeScale. Alternatively, if any combination of ScalePivotTranslation (float3), ScalePivot (float3), NonUniformScale (float3) components are present along with a CompositeScale component, a transform system will combine those components and write to CompositeScale. Concretely, each of these component combinations will write to CompositeRotation as: [CompositeScaleSystem] CompositeScale <= ScalePivotTranslation [CompositeScaleSystem] CompositeScale <= ScalePivotTranslation * ScalePivot * Scale * ScalePivot^-1 [CompositeScaleSystem] CompositeScale <= ScalePivotTranslation * Scale [CompositeScaleSystem] CompositeScale <= ScalePivot * Scale * ScalePivot^-1 [CompositeScaleSystem] CompositeScale <= Scale [CompositeScaleSystem] CompositeScale <= ScalePivotTranslation * ScalePivot * NonUniformScale * ScalePivot^-1 [CompositeScaleSystem] CompositeScale <= ScalePivotTranslation * Scale [CompositeScaleSystem] CompositeScale <= ScalePivot * NonUniformScale * ScalePivot^-1 [CompositeScaleSystem] CompositeScale <= NonUniformScale Cases where ScalePivot is specified without either of Scale, NonUniformScale have no additional effect have no additional affect on CompositeScale. e.g. If the following components are present... (Entity) LocalToWorld Translation CompositeRotation Rotation RotationPivotTranslation RotationPivot RotationEulerXYZ PostRotation PostRotationEulerXYZ CompositeScale Scale ScalePivotTranslation ScalePivot ...then the transform system will: [RotationEulerSystem] Write Rotation <= RotationEulerXYZ [PostRotationEulerSystem] Write PostRotation <= PostRotationEulerXYZ [CompositeScaleSystem] Write CompositeScale <= ScalePivotTranslation * ScalePivot * Scale * ScalePivot^-1 [CompositeRotationSystem] Write CompositeRotation <= RotationPivotTranslation * RotationPivot * Rotation * PostRotation * RotationPivot^-1 [TRSToLocalToWorldSystem] Write LocalToWorld <= Translation * CompositeRotation * CompositeScale Section 5: Hierarchical Transforms (Advanced) Note: Advanced Hierarchical transform component rules largely mirror the use of the non-hierarchical components, except that they are writing to LocalToParent (instead of LocalToWorld.) The main additional component unique to hierarchical transforms is ParentScaleInverse. NonUniformScale (float3) as an alternative to Scale to specify scale per-axis. Note that not all DOTS features fully support non-uniform scale. Be sure to check those features’ documentation to understand their limitations. [TRSToLocalToParentSystem] LocalToParent <= Translation [TRSToLocalToParentSystem] LocalToParent <= Translation * Rotation [TRSToLocalToParentSystem] LocalToParent <= Translation * Rotation * NonUniformScale [TRSToLocalToParentSystem] LocalToParent <= Rotation [TRSToLocalToParentSystem] LocalToParent <= Rotation * NonUniformScale [TRSToLocalToParentSystem] LocalToParent <= NonUniformScale The presence of both Scale and NonUniform scale is not a valid case, but the result is defined. Scale will be used, NonUniformScale will be ignored. e.g. If the following components are present... Parent (Entity) Child (Entity) LocalToWorld LocalToWorld Translation LocalToParent Rotation Parent Scale PreviousParent* Child* Translation Rotation NonUniformScale ...then the transform system will: [TRSToLocalToWorldSystem] Parent: Write LocalToWorld as defined above in \"Non-hierarchical Transforms (Basic)\" [TRSToLocalToParentSystem] Child: Write LocalToParent <= Translation * Rotation * NonUniformScale [LocalToParentSystem] Child: Write LocalToWorld <= LocalToWorld[Parent] * LocalToParent Parent LocalToWorld is multiplied with the Child LocalToWorld, which includes any scaling. However, if removing Parent scale is preferred (AKA Scale Compensate), ParentScaleInverse is available for that purpose. [TRSToLocalToParentSystem] LocalToParent <= ParentScaleInverse [TRSToLocalToParentSystem] LocalToParent <= Translation * ParentScaleInverse [TRSToLocalToParentSystem] LocalToParent <= Translation * ParentScaleInverse * Rotation [TRSToLocalToParentSystem] LocalToParent <= Translation * ParentScaleInverse * Rotation * NonUniformScale [TRSToLocalToParentSystem] LocalToParent <= Translation * ParentScaleInverse * CompositeRotation [TRSToLocalToParentSystem] LocalToParent <= Translation * ParentScaleInverse * CompositeRotation * NonUniformScale [TRSToLocalToParentSystem] LocalToParent <= Translation * ParentScaleInverse * Rotation * Scale [TRSToLocalToParentSystem] LocalToParent <= Translation * ParentScaleInverse * CompositeRotation * Scale [TRSToLocalToParentSystem] LocalToParent <= Translation * ParentScaleInverse * Rotation * CompositeScale [TRSToLocalToParentSystem] LocalToParent <= Translation * ParentScaleInverse * CompositeRotation * CompositeScale [TRSToLocalToParentSystem] LocalToParent <= ParentScaleInverse * Rotation [TRSToLocalToParentSystem] LocalToParent <= ParentScaleInverse * Rotation * NonUniformScale [TRSToLocalToParentSystem] LocalToParent <= ParentScaleInverse * CompositeRotation * NonUniformScale [TRSToLocalToParentSystem] LocalToParent <= ParentScaleInverse * Rotation * Scale [TRSToLocalToParentSystem] LocalToParent <= ParentScaleInverse * CompositeRotation [TRSToLocalToParentSystem] LocalToParent <= ParentScaleInverse * CompositeRotation * Scale [TRSToLocalToParentSystem] LocalToParent <= ParentScaleInverse * Rotation * CompositeScale [TRSToLocalToParentSystem] LocalToParent <= ParentScaleInverse * CompositeRotation * CompositeScale Inverse of any explicitly assigned parent scale values if present are written to ParentScaleInverse, as: [ParentScaleInverseSystem] ParentScaleInverse <= CompositeScale[Parent]^-1 [ParentScaleInverseSystem] ParentScaleInverse <= Scale[Parent]^-1 [ParentScaleInverseSystem] ParentScaleInverse <= NonUniformScale[Parent]^-1 If LocalToWorld[Parent] is written directly by the user, or scaling is otherwise applied in a way that is not explicitly using the scale components, then nothing is written to the ParentScaleInverse. It is the responsibility of the system applying that scaling to write inverse to ParentScaleInverse. The results of a system not updating ParentScaleInverse in this case are undefined. e.g. If the following components are present... Parent (Entity) Child (Entity) LocalToWorld LocalToWorld Translation LocalToParent Rotation Parent Scale PreviousParent* Child* Translation Rotation ParentScaleInverse ...then the transform system will: [TRSToLocalToWorldSystem] Parent: Write LocalToWorld as defined above in \"Non-hierarchical Transforms (Basic)\" [ParentScaleInverseSystem] Child: ParentScaleInverse <= Scale[Parent]^-1 [TRSToLocalToParentSystem] Child: Write LocalToParent <= Translation * ParentScaleInverse * Rotation [LocalToParentSystem] Child: Write LocalToWorld <= LocalToWorld[Parent] * LocalToParent The Rotation component may be written to directly as a quaternion by user code. However, if an Euler interface is preferred, components are available for each rotation order which will cause a write to the Rotation component if present. [RotationEulerSystem] Rotation <= RotationEulerXYZ [RotationEulerSystem] Rotation <= RotationEulerXZY [RotationEulerSystem] Rotation <= RotationEulerYXZ [RotationEulerSystem] Rotation <= RotationEulerYZX [RotationEulerSystem] Rotation <= RotationEulerZXY [RotationEulerSystem] Rotation <= RotationEulerZYX e.g. If the following components are present... Parent (Entity) Child (Entity) LocalToWorld LocalToWorld Translation LocalToParent Rotation Parent Scale PreviousParent* Child* Translation Rotation RotationEulerXYZ ...then the transform system will: [TRSToLocalToWorldSystem] Parent: Write LocalToWorld as defined above in \"Non-hierarchical Transforms (Basic)\" [RotationEulerSystem] Child: Write Rotation <= RotationEulerXYZ [TRSToLocalToParentSystem] Child: Write LocalToParent <= Translation * Rotation [LocalToParentSystem] Child: Write LocalToWorld <= LocalToWorld[Parent] * LocalToParent For more complex Rotation requirements, a CompositeRotation (float4x4) component may be used as an alternative to Rotation. All of the combinations which are valid for Rotation are also valid for CompositeRotation. i.e. [TRSToLocalToParentSystem] LocalToParent <= Translation * CompositeRotation [TRSToLocalToParentSystem] LocalToParent <= Translation * CompositeRotation * Scale [TRSToLocalToParentSystem] LocalToParent <= Translation * CompositeRotation * NonUniformScale [TRSToLocalToParentSystem] LocalToParent <= Translation * CompositeRotation * CompositeScale [TRSToLocalToParentSystem] LocalToParent <= Translation * ParentScaleInverse * CompositeRotation [TRSToLocalToParentSystem] LocalToParent <= Translation * ParentScaleInverse * CompositeRotation * Scale [TRSToLocalToParentSystem] LocalToParent <= Translation * ParentScaleInverse * CompositeRotation * NonUniformScale [TRSToLocalToParentSystem] LocalToParent <= Translation * ParentScaleInverse * CompositeRotation * CompositeScale [TRSToLocalToParentSystem] LocalToParent <= ParentScaleInverse * CompositeRotation [TRSToLocalToParentSystem] LocalToParent <= ParentScaleInverse * CompositeRotation * Scale [TRSToLocalToParentSystem] LocalToParent <= ParentScaleInverse * CompositeRotation * NonUniformScale [TRSToLocalToParentSystem] LocalToParent <= ParentScaleInverse * CompositeRotation * CompositeScale [TRSToLocalToParentSystem] LocalToParent <= CompositeRotation [TRSToLocalToParentSystem] LocalToParent <= CompositeRotation * Scale [TRSToLocalToParentSystem] LocalToParent <= CompositeRotation * NonUniformScale [TRSToLocalToParentSystem] LocalToParent <= CompositeRotation * CompositeScale The CompositeRotation component may be written to directly as a float4x4 by user code. However, if a Maya/FBX-style interface is preferred, components are available which will write to the CompositeRotation component if present. CompositeRotation = RotationPivotTranslation * RotationPivot * Rotation * PostRotation * RotationPivot^-1 If any combination of RotationPivotTranslation (float3), RotationPivot (float3), Rotation (quaternion), or PostRotation (quaternion) components are present along with a CompositeRotation component, a transform system will combine those components and write to CompositeRotation. Concretely, each of these component combinations will write to CompositeRotation as: [CompositeRotationSystem] CompositeRotation <= RotationPivotTranslation [CompositeRotationSystem] CompositeRotation <= RotationPivotTranslation * RotationPivot * Rotation * RotationPivot^-1 [CompositeRotationSystem] CompositeRotation <= RotationPivotTranslation * RotationPivot * Rotation * PostRotation * RotationPivot^-1 [CompositeRotationSystem] CompositeRotation <= RotationPivotTranslation * RotationPivot * PostRotation * RotationPivot^-1 [CompositeRotationSystem] CompositeRotation <= RotationPivotTranslation * Rotation [CompositeRotationSystem] CompositeRotation <= RotationPivotTranslation * Rotation * PostRotation [CompositeRotationSystem] CompositeRotation <= RotationPivotTranslation * PostRotation [CompositeRotationSystem] CompositeRotation <= RotationPivot * Rotation * RotationPivot^-1 [CompositeRotationSystem] CompositeRotation <= RotationPivot * Rotation * PostRotation * RotationPivot^-1 [CompositeRotationSystem] CompositeRotation <= PostRotation [CompositeRotationSystem] CompositeRotation <= Rotation [CompositeRotationSystem] CompositeRotation <= Rotation * PostRotation Cases where RotationPivot is specified without either of Rotation, PostRotation have no additional affect on CompositeRotation. Note that since Rotation is re-used as a source for CompositeRotation, the alternative data interfaces to Rotation are still available. e.g. If the following components are present... Parent (Entity) Child (Entity) LocalToWorld LocalToWorld Translation LocalToParent Rotation Parent Scale PreviousParent* Child* Translation CompositeRotation Rotation RotationPivotTranslation RotationPivot PostRotation RotationEulerXYZ Scale ...then the transform system will: [TRSToLocalToWorldSystem] Parent: Write LocalToWorld as defined above in \"Non-hierarchical Transforms (Basic)\" [RotationEulerSystem] Child: Write Rotation <= RotationEulerXYZ [CompositeRotationSystem] Child: Wirte CompositeRotation <= RotationPivotTranslation * RotationPivot * Rotation * PostRotation * RotationPivot^-1 [TRSToLocalToParentSystem] Child: Write LocalToParent <= Translation * CompositeRotation * Scale [LocalToParentSystem] Child: Write LocalToWorld <= LocalToWorld[Parent] * LocalToParent The PostRotation component may be written to directly as a quaternion by user code. However, if an Euler interface is preferred, components are available for each rotation order which will cause a write to the PostRotation component if present. [PostRotationEulerSystem] PostRotation <= PostRotationEulerXYZ [PostRotationEulerSystem] PostRotation <= PostRotationEulerXZY [PostRotationEulerSystem] PostRotation <= PostRotationEulerYXZ [PostRotationEulerSystem] PostRotation <= PostRotationEulerYZX [PostRotationEulerSystem] PostRotation <= PostRotationEulerZXY [PostRotationEulerSystem] PostRotation <= PostRotationEulerZYX e.g. If the following components are present... Parent (Entity) Child (Entity) LocalToWorld LocalToWorld Translation LocalToParent Rotation Parent Scale PreviousParent* Child* Translation CompositeRotation Rotation RotationPivotTranslation RotationPivot PostRotation RotationEulerXYZ Scale PostRotationEulerXYZ ...then the transform system will: [TRSToLocalToWorldSystem] Parent: Write LocalToWorld as defined above in \"Non-hierarchical Transforms (Basic)\" [PostRotationEulerSystem] Child: Write PostRotation <= PostRotationEulerXYZ [RotationEulerSystem] Child: Write Rotation <= RotationEulerXYZ [CompositeRotationSystem] Child: Wirte CompositeRotation <= RotationPivotTranslation * RotationPivot * Rotation * PostRotation * RotationPivot^-1 [TRSToLocalToParentSystem] Child: Write LocalToParent <= Translation * CompositeRotation * Scale [LocalToParentSystem] Child: Write LocalToWorld <= LocalToWorld[Parent] * LocalToParent It is a setup error to have more than one PostRotationEuler*** component is associated with the same Entity, however the result is defined. The first to be found in the order of precedence will be applied. That order is: PostRotationEulerXYZ PostRotationEulerXZY PostRotationEulerYXZ PostRotationEulerYZX PostRotationEulerZXY PostRotationEulerZYX For more complex Scale requirements, a CompositeScale (float4x4) component may be used as an alternative to Scale (or NonUniformScale). All of the combinations which are valid for Scale or NonUniformScale are also valid for CompositeScale. i.e. [TRSToLocalToParentSystem] LocalToParent <= Translation * Rotation * CompositeScale [TRSToLocalToParentSystem] LocalToParent <= Rotation * CompositeScale [TRSToLocalToParentSystem] LocalToParent <= CompositeScale [TRSToLocalToParentSystem] LocalToParent <= Translation * CompositeRotation * CompositeScale [TRSToLocalToParentSystem] LocalToParent <= CompositeRotation * CompositeScale [TRSToLocalToParentSystem] LocalToParent <= Translation * ParentScaleInverse * Rotation * CompositeScale [TRSToLocalToParentSystem] LocalToParent <= Translation * ParentScaleInverse * CompositeRotation * CompositeScale [TRSToLocalToParentSystem] LocalToParent <= ParentScaleInverse * Rotation * CompositeScale [TRSToLocalToParentSystem] LocalToParent <= ParentScaleInverse * CompositeRotation * CompositeScale [TRSToLocalToParentSystem] LocalToParent <= ParentScaleInverse * CompositeScale The CompositeScale component may be written to directly as a float4x4 by user code. However, if a Maya/FBX-style interface is preferred, components are available which will write to the CompositeScale component if present. CompositeScale = ScalePivotTranslation * ScalePivot * Scale * ScalePivot^-1 CompositeScale = ScalePivotTranslation * ScalePivot * NonUniformScale * ScalePivot^-1 If any combination of ScalePivotTranslation (float3), ScalePivot (float3), Scale (float) components are present along with a CompositeScale component, a transform system will combine those components and write to CompositeScale. Alternatively, if any combination of ScalePivotTranslation (float3), ScalePivot (float3), NonUniformScale (float3) components are present along with a CompositeScale component, a transform system will combine those components and write to CompositeScale. Concretely, each of these component combinations will write to CompositeRotation as: [CompositeScaleSystem] CompositeScale <= ScalePivotTranslation [CompositeScaleSystem] CompositeScale <= ScalePivotTranslation * ScalePivot * Scale * ScalePivot^-1 [CompositeScaleSystem] CompositeScale <= ScalePivotTranslation * Scale [CompositeScaleSystem] CompositeScale <= ScalePivot * Scale * ScalePivot^-1 [CompositeScaleSystem] CompositeScale <= Scale [CompositeScaleSystem] CompositeScale <= ScalePivotTranslation * ScalePivot * NonUniformScale * ScalePivot^-1 [CompositeScaleSystem] CompositeScale <= ScalePivotTranslation * Scale [CompositeScaleSystem] CompositeScale <= ScalePivot * NonUniformScale * ScalePivot^-1 [CompositeScaleSystem] CompositeScale <= NonUniformScale Cases where ScalePivot is specified without either of Scale, NonUniformScale have no additional effect have no additional affect on CompositeScale. e.g. If the following components are present... Parent (Entity) Child (Entity) LocalToWorld LocalToWorld Translation LocalToParent Rotation Parent Scale PreviousParent* Child* Translation CompositeRotation Rotation RotationPivotTranslation RotationPivot PostRotation RotationEulerXYZ Scale PostRotationEulerXYZ CompositeScale ScalePivotTranslation ScalePivot ...then the transform system will: [TRSToLocalToWorldSystem] Parent: Write LocalToWorld as defined above in \"Non-hierarchical Transforms (Basic)\" [PostRotationEulerSystem] Child: Write PostRotation <= PostRotationEulerXYZ [RotationEulerSystem] Child: Write Rotation <= RotationEulerXYZ [CompositeRotationSystem] Child: Wirte CompositeRotation <= RotationPivotTranslation * RotationPivot * Rotation * PostRotation * RotationPivot^-1 [TRSToLocalToParentSystem] Child: Write LocalToParent <= Translation * CompositeRotation * Scale [LocalToParentSystem] Child: Write LocalToWorld <= LocalToWorld[Parent] * LocalToParent ...then the transform system will: [TRSToLocalToWorldSystem] Parent: Write LocalToWorld as defined above in \"Non-hierarchical Transforms (Basic)\" [PostRotationEulerSystem] Child: Write PostRotation <= PostRotationEulerXYZ [RotationEulerSystem] Child: Write Rotation <= RotationEulerXYZ [CompositeScaleSystem] Child: Write CompositeScale <= ScalePivotTranslation * ScalePivot * Scale * ScalePivot^-1 [CompositeRotationSystem] Child: Wirte CompositeRotation <= RotationPivotTranslation * RotationPivot * Rotation * PostRotation * RotationPivot^-1 [TRSToLocalToParentSystem] Child: Write LocalToParent <= Translation * CompositeRotation * Scale [LocalToParentSystem] Child: Write LocalToWorld <= LocalToWorld[Parent] * LocalToParent Section 6: Custom Transforms (Advanced) There are two methods for writing user-defined transforms that are fully compatible with the transform system. Overriding transform components Extending transform components Overriding transform components A user component (UserComponent) is defined and added to the LocalToWorld WriteGroup, as in: [Serializable] [WriteGroup(typeof(LocalToWorld))] struct UserComponent : IComponentData { } Overriding transform components means that no additional extensions are possible. The user defined transform is the only transform that can occur with the specified user component. In the UserTransformSystem, use the default query method to request write access to LocalToWorld. e.g. public class UserTransformSystem : JobComponentSystem { [BurstCompile] struct UserTransform : IJobForEach<LocalToWorld, UserComponent> { public void Execute(ref LocalToWorld localToWorld, [ReadOnly] ref UserComponent userComponent) { localToWorld.Value = ... // Assign localToWorld as needed for UserTransform } } protected override JobHandle OnUpdate(JobHandle inputDependencies) { var job = new UserTransform() { }; return job.Schedule(this, inputDependencies); } } All other transform components which write to LocalToWorld will be ignored by the transform system where UserComponent is included. e.g. If the following components are present... (Entity) LocalToWorld Translation Rotation Scale UserComponent ...then: [TRSToLocalToWorldSystem] Will not run on this Entity [UserTransformSystem] Will run on this Entity However, unexpected behavior may result if two different systems both override LocalToWorld and both components are present. e.g. e.g. If there is an additional: [Serializable] [WriteGroup(typeof(LocalToWorld))] struct UserComponent2 : IComponentData { } And the equivalent system: public class UserTransformSystem2 : JobComponentSystem { [BurstCompile] struct UserTransform2 : IJobForEach<LocalToWorld, UserComponent2> { public void Execute(ref LocalToWorld localToWorld, [ReadOnly] ref UserComponent2 userComponent2) { localToWorld.Value = ... // Assign localToWorld as needed for UserTransform } } protected override JobHandle OnUpdate(JobHandle inputDependencies) { var job = new UserTransform() { }; return job.Schedule(this, inputDependencies); } } Then if the following components are present... (Entity) LocalToWorld Translation Rotation Scale UserComponent UserComponent2 Both systems will attempt to write to LocalToWorld, likely resulting in unexpected behavior. This may not be an issue in context. Extending transform components In order to ensure that multiple overridden transform components can interact in a way which is well-defined, a WriteGroup query can be used to only explicitly match the requested components. e.g. If there is a: [Serializable] [WriteGroup(typeof(LocalToWorld))] struct UserComponent : IComponentData { } And a system which filters based on the WriteGroup of LocalToWorld: public class UserTransformSystem : JobComponentSystem { private EntityQuery m_Query; protected override void OnCreate() { m_Query = GetEntityQuery(new EntityQueryDesc() { All = new ComponentType[] { ComponentType.ReadWrite<LocalToWorld>(), ComponentType.ReadOnly<UserComponent>(), }, Options = EntityQueryDescOptions.FilterWriteGroup }); } [BurstCompile] struct UserTransform : IJobForEach<LocalToWorld, UserComponent> { public void Execute(ref LocalToWorld localToWorld, [ReadOnly] ref UserComponent userComponent) { localToWorld.Value = ... // Assign localToWorld as needed for UserTransform } } protected override JobHandle OnUpdate(JobHandle inputDependencies) { var job = new UserTransform() { }; return job.ScheduleGroup(m_Query, inputDependencies); } } m_Query in UserTransformSystem will only match the explicitly mentioned components. For instance, the following with match and be included in the EntityQuery: (Entity) LocalToWorld UserComponent But this will not: (Entity) LocalToWorld Translation Rotation Scale UserComponent The implicit expectation is that UserComponent is a completely orthogonal set of requirements to write to LocalToWorld, so no other (unstated) components which are in the same WriteGroup should be present. However, they may be explicitly supported by UserComponent systems by adding to the queries, as: public class UserTransformExtensionSystem : JobComponentSystem { private EntityQuery m_Query; protected override void OnCreate() { m_Query = GetEntityQuery(new EntityQueryDesc() { All = new ComponentType[] { ComponentType.ReadWrite<LocalToWorld>(), ComponentType.ReadOnly<UserComponent>(), ComponentType.ReadOnly<Translation>(), ComponentType.ReadOnly<Rotation>(), ComponentType.ReadOnly<Scale>(), }, Options = EntityQueryDescOptions.FilterWriteGroup }); } [BurstCompile] struct UserTransform : IJobForEach<LocalToWorld, UserComponent> { public void Execute(ref LocalToWorld localToWorld, [ReadOnly] ref UserComponent userComponent, [ReadOnly] ref Translation translation, [ReadOnly] ref Rotation rotation, [ReadOnly] ref Scale scale) { localToWorld.Value = ... // Assign localToWorld as needed for UserTransform } } protected override JobHandle OnUpdate(JobHandle inputDependencies) { var job = new UserTransform() { }; return job.ScheduleGroup(m_Query, inputDependencies); } } In the same way, if there is an additional: [Serializable] [WriteGroup(typeof(LocalToWorld))] struct UserComponent2 : IComponentData { } And there is: (Entity) LocalToWorld UserComponent UserComponent2 The UserTransformSystem defined above would not match, since UserComponent2 is not explicitly mentioned and it is in the LocalToWorld WriteGroup. However, an explicit query can be created which can resolve the case and ensure the behavior is well defined. As in: public class UserTransformComboSystem : JobComponentSystem { private EntityQuery m_Query; protected override void OnCreate() { m_Query = GetEntityQuery(new EntityQueryDesc() { All = new ComponentType[] { ComponentType.ReadWrite<LocalToWorld>(), ComponentType.ReadOnly<UserComponent>(), ComponentType.ReadOnly<UserComponent2>(), }, Options = EntityQueryDescOptions.FilterWriteGroup }); } [BurstCompile] struct UserTransform : IJobForEach<LocalToWorld, UserComponent> { public void Execute(ref LocalToWorld localToWorld, [ReadOnly] ref UserComponent userComponent, [ReadOnly] ref UserComponent2 userComponent2 { localToWorld.Value = ... // Assign localToWorld as needed for UserTransform } } protected override JobHandle OnUpdate(JobHandle inputDependencies) { var job = new UserTransform() { }; return job.ScheduleGroup(m_Query, inputDependencies); } } Then the following systems (or equivalents): UserTransformSystem (LocalToWorld FilterWriteGroup:UserComponent) UserTransformSystem2 (LocalToWorld FilterWriteGroup:UserComponent2) UserTransformComboSystem (LocalToWorld FilterWriteGroup:UserComponent, UserComponent2) Will all run side-by-side, query and run on their respective component archetypes, and have well-defined behavior. Section 7: Relationship to Maya transform nodes For reference on Maya transform nodes, see: https://download.autodesk.com/us/maya/2010help/Nodes/transform.html Maya Transformation Matrix is defined as: matrix = SP^-1 * S * SH * SP * ST * RP^-1 * RA * R * RP * RT * T These can be mapped to transform components as follows: Maya Unity T Translation (RT * RP * R * RA * RP^-1) CompositeRotation RT RotationPivotTranslation RP RotationPivot R Rotation RA PostRotation (ST * SP * S * SP^-1) CompositeScale ST ScalePivotTranslation SP ScalePivot SH --- Unused --- S NonUniformScale"
  },
  "manual/system_update_order.html": {
    "href": "manual/system_update_order.html",
    "title": "System Update Order | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "System Update Order Use Component System Groups to specify the update order of your systems. You can place a systems in a group using the [UpdateInGroup] attribute on the system’s class declaration. You can then use [UpdateBefore] and [UpdateAfter] attributes to specify the update order within the group. The ECS framework creates a set of default system groups that you can use to update your systems in the correct phase of a frame. You can nest one group inside another so that all systems in your group update in the correct phase and, then, also update according to the order within their group. Component System Groups The ComponentSystemGroup class represents a list of related component systems that should be updated together in a specific order. ComponentSystemGroup is derived from ComponentSystemBase, so it acts like a component system in all the important ways -- it can be ordered relative to other systems, has an OnUpdate() method, etc. Most relevantly, this means component system groups can be nested in other component system groups, forming a hierarchy. By default, when a ComponentSystemGroup’s Update() method is called, it calls Update() on each system in its sorted list of member systems. If any member systems are themselves system groups, they will recursively update their own members. The resulting system ordering follows a depth-first traversal of a tree. System Ordering Attributes The existing system ordering attributes are maintained, with slightly different semantics and restrictions. [UpdateInGroup] — specifies a ComponentSystemGroup that this system should be a member of. If this attribute is omitted, the system is automatically added to the default World’s SimulationSystemGroup (see below). [UpdateBefore] and [UpdateAfter] — order systems relative to other systems. The system type specified for these attributes must be a member of the same group. Ordering across group boundaries is handled at the appropriate deepest group containing both systems: Example: if SystemA is in GroupA and SystemB is in GroupB, and GroupA and GroupB are both members of GroupC, then the ordering of GroupA and GroupB implicitly determines the relative ordering of SystemA and SystemB; no explicit ordering of the systems is necessary. [DisableAutoCreation] — prevents the system from being created during default world initialization. You must explicitly create and update the system. However, you can add a system with this tag to a ComponentSystemGroup’s update list, and it will then be automatically updated just like the other systems in that list. Default System Groups The default World contains a hierarchy of ComponentSystemGroup instances. Only three root-level system groups are added to the Unity player loop (the following list also shows the pre-defined member systems in each group): InitializationSystemGroup (updated at the end of the Initialization phase of the player loop) BeginInitializationEntityCommandBufferSystem CopyInitialTransformFromGameObjectSystem SubSceneLiveLinkSystem SubSceneStreamingSystem EndInitializationEntityCommandBufferSystem SimulationSystemGroup (updated at the end of the Update phase of the player loop) BeginSimulationEntityCommandBufferSystem TransformSystemGroup EndFrameParentSystem CopyTransformFromGameObjectSystem EndFrameTRSToLocalToWorldSystem EndFrameTRSToLocalToParentSystem EndFrameLocalToParentSystem CopyTransformToGameObjectSystem LateSimulationSystemGroup EndSimulationEntityCommandBufferSystem PresentationSystemGroup (updated at the end of the PreLateUpdate phase of the player loop) BeginPresentationEntityCommandBufferSystem CreateMissingRenderBoundsFromMeshRenderer RenderingSystemBootstrap RenderBoundsUpdateSystem RenderMeshSystem LODGroupSystemV1 LodRequirementsUpdateSystem EndPresentationEntityCommandBufferSystem Note that the specific contents of this list is subject to change. Multiple Worlds You can create multiple Worlds, in addition to (or instead of) the default World described above. The same component system class can be instantiated in more than one World, and each instance can be updated at different rates from different points in the update order. There is currently no way to manually update every system in a given World; instead, you can control which systems are created in which World, and which of the existing system groups they should be added to. Thus, a custom WorldB could instantiate SystemX and SystemY, adding SystemX to the default World’s SimulationSystemGroup, and adding SystemY to the default World’s PresentationSystemGroup. These systems can order themselves relative to their group siblings as usual, and will be updated along with the corresponding group. To support this use case, a new ICustomBootstrap interface is now available: public interface ICustomBootstrap { // Returns the systems which should be handled by the default bootstrap process. // If null is returned the default world will not be created at all. // Empty list creates default world and entrypoints List<Type> Initialize(List<Type> systems); } When you implement this interface, the full list of component system types will be passed to the classes Initialize() method, prior to default world initialization. A custom bootstrapper can iterate through this list and create systems in whatever World it wants. You can return a list of systems from the Initialize() method and they will be created as part of the normal, default world initialization. For example, here’s the typical procedure of a custom MyCustomBootstrap.Initialize() implementation: Create any additional Worlds and their top-level ComponentSystemGroups. For each Type in the system Type list: Traverse upward through the ComponentSystemGroup hierarchy to find this system Type’s top-level group. If it’s one of the groups created in step 1, create the system in that World and add it to the hierarchy with group.AddSystemToUpdateList() . If not, append this Type to the List to return to DefaultWorldInitialization. Call group.SortSystemUpdateList() on new top-level groups. Optionally add them to one of the default world groups Return list of unhandled systems to DefaultWorldInitialization. Note: the ECS framework finds your ICustomBootstrap implementation by reflection. Tips and Best Practices Use [UpdateInGroup] to specify the system group for each system you write. If not specified, the implicit default group is SimulationSystemGroup. Use manually-ticked ComponentSystemGroups to update systems elsewhere in the Unity player loop. Adding the [DisableAutoCreation] attribute to a component system (or system group) prevents it from being created or added to the default system groups. You can still manually create the system with World.GetOrCreateSystem () and update it by calling manually calling MySystem.Update() from the main thread. This is an easy way to insert systems elsewhere in the Unity player loop (for example, if you have a system that should run later or earlier in the frame). Use the existing EntityCommandBufferSystem s instead of adding new ones, if possible. An EntityCommandBufferSystem represents a sync point where the main thread waits for worker threads to complete before processing any outstanding EntityCommandBuffer s. Reusing one of the predefined Begin/End systems in each root-level system group is less likely to introduce a new \"bubble\" into the frame pipeline than creating a new one. Avoid putting custom logic in ComponentSystemGroup.OnUpdate() . Since ComponentSystemGroup is functionally a component system itself, it may be tempting to add custom processing to its OnUpdate() method, to perform some work, spawn some jobs, etc. We advise against this in general, as it’s not immediately clear from the outside whether the custom logic is executed before or after the group’s members are updated. It’s preferable to keep system groups limited to a grouping mechanism, and to implement the desired logic in a separate component system, explicitly ordered relative to the group."
  },
  "manual/system_state_components.html": {
    "href": "manual/system_state_components.html",
    "title": "System State Components | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "System State Components The purpose of SystemStateComponentData is to allow you to track resources internal to a system and have the opportunity to appropriately create and destroy those resources as needed without relying on individual callbacks. SystemStateComponentData and SystemStateSharedComponentData are exactly like ComponentData and SharedComponentData , respectively, except in one important respect: SystemStateComponentData is not deleted when an entity is destroyed. DestroyEntity is shorthand for Find all components which reference this particular entity ID. Delete those components. Recycle the entity id for reuse. However, if SystemStateComponentData is present, it is not removed. This gives a system the opportunity to cleanup any resources or state associated with an entity ID. The entity ID will only be reused once all SystemStateComponentData has been removed. Motivation Systems may need to keep an internal state based on ComponentData . For instance, resources may be allocated. Systems need to be able to manage that state as values and state changes are made by other systems. For example, when values in components change, or when relevant components are added or deleted. \"No callbacks\" is an important element of the ECS design rules. Concept The general use of SystemStateComponentData is expected to mirror a user component, providing the internal state. For instance, given: FooComponent ( ComponentData , user assigned) FooStateComponent ( SystemComponentData , system assigned) Detecting Component Add When user adds FooComponent, FooStateComponent does not exist. The FooSystem update queries for FooComponent without FooStateComponent and can infer that they have been added. At that point, the FooSystem will add the FooStateComponent and any needed internal state. Detecting Component Remove When user removes FooComponent, FooStateComponent still exists. The FooSystem update queries for FooStateComponent without FooComponent and can infer that they have been removed. At that point, the FooSystem will remove the FooStateComponent and fix up any needed internal state. Detecting Destroy Entity DestroyEntity is actually a shorthand utility for: Find components which reference given entity ID. Delete components found. Recycle entity ID. However, SystemStateComponentData are not removed on DestroyEntity and the entity ID is not recycled until the last component is deleted. This gives the system the opportunity to clean up the internal state in the exact same way as with component removal. SystemStateComponent A SystemStateComponentData is analogous to a ComponentData and used similarly. struct FooStateComponent : ISystemStateComponentData { } Visibility of a SystemStateComponentData is also controlled in the same way as a component (using private , public , internal ) However, it's expected, as a general rule, that a SystemStateComponentData will be ReadOnly outside the system that creates it. SystemStateSharedComponent A SystemStateSharedComponentData is analogous to a SharedComponentData and used similarly. struct FooStateSharedComponent : ISystemStateSharedComponentData { public int Value; } Example system using state components The following example shows a simplified system that illustrates how to manage entities with system state components. The example defines a general-purpose IComponentData instance and a system state, ISystemStateComponentData instance. It also defines three queries based on those entities: m_newEntities selects entities that have the general-purpose, but not the system state component. This query finds new entities that the system has not seen before. The system runs a job using the new entities query that adds the system state component. m_activeEntities selects entities that have both the general-purpose and the system state component. In a real application, other systems could be the ones that process or destroy the entities. m_destroyedEntities selects entities that have the system state, but not the general-purpose component. Since the system state component is never added to an entity by itself, the entities selected by this query must have been deleted, either by this system or another system. The system runs a job using the destroyed entities query to remove the system state component from the entities, which allows the ECS code to recycle the Entity identifier. Note that this simplified example does not maintain any state within the system. One purpose for system state components is to track when persistent resources need to be allocated or cleaned up. <!-- DocCodeSamples.Tests.StatefulSystem.cs--> using Unity.Collections; using Unity.Entities; using Unity.Jobs; using UnityEngine; public struct GeneralPurposeComponentA : IComponentData { public bool IsAlive; } public struct StateComponentB : ISystemStateComponentData { public int State; } public class StatefulSystem : JobComponentSystem { private EntityQuery m_newEntities; private EntityQuery m_activeEntities; private EntityQuery m_destroyedEntities; private EntityCommandBufferSystem m_ECBSource; protected override void OnCreate() { // Entities with GeneralPurposeComponentA but not StateComponentB m_newEntities = GetEntityQuery(new EntityQueryDesc() { All = new ComponentType[] {ComponentType.ReadOnly<GeneralPurposeComponentA>()}, None = new ComponentType[] {ComponentType.ReadWrite<StateComponentB>()} }); // Entities with both GeneralPurposeComponentA and StateComponentB m_activeEntities = GetEntityQuery(new EntityQueryDesc() { All = new ComponentType[] { ComponentType.ReadWrite<GeneralPurposeComponentA>(), ComponentType.ReadOnly<StateComponentB>() } }); // Entities with StateComponentB but not GeneralPurposeComponentA m_destroyedEntities = GetEntityQuery(new EntityQueryDesc() { All = new ComponentType[] {ComponentType.ReadWrite<StateComponentB>()}, None = new ComponentType[] {ComponentType.ReadOnly<GeneralPurposeComponentA>()} }); m_ECBSource = World.GetOrCreateSystem<EndSimulationEntityCommandBufferSystem>(); } struct NewEntityJob : IJobForEachWithEntity<GeneralPurposeComponentA> { public EntityCommandBuffer.Concurrent ConcurrentECB; public void Execute(Entity entity, int index, [ReadOnly] ref GeneralPurposeComponentA gpA) { // Add an ISystemStateComponentData instance ConcurrentECB.AddComponent<StateComponentB>(index, entity, new StateComponentB() {State = 1}); } } struct ProcessEntityJob : IJobForEachWithEntity<GeneralPurposeComponentA> { public EntityCommandBuffer.Concurrent ConcurrentECB; public void Execute(Entity entity, int index, ref GeneralPurposeComponentA gpA) { // Process entity, possibly setting IsAlive false -- // In which case, destroy the entity if (!gpA.IsAlive) { ConcurrentECB.DestroyEntity(index, entity); } } } struct CleanupEntityJob : IJobForEachWithEntity<StateComponentB> { public EntityCommandBuffer.Concurrent ConcurrentECB; public void Execute(Entity entity, int index, [ReadOnly] ref StateComponentB state) { // This system is responsible for removing any ISystemStateComponentData instances it adds // Otherwise, the entity is never truly destroyed. ConcurrentECB.RemoveComponent<StateComponentB>(index, entity); } } protected override JobHandle OnUpdate(JobHandle inputDependencies) { var newEntityJob = new NewEntityJob() { ConcurrentECB = m_ECBSource.CreateCommandBuffer().ToConcurrent() }; var newJobHandle = newEntityJob.ScheduleSingle(m_newEntities, inputDependencies); m_ECBSource.AddJobHandleForProducer(newJobHandle); var processEntityJob = new ProcessEntityJob() {ConcurrentECB = m_ECBSource.CreateCommandBuffer().ToConcurrent()}; var processJobHandle = processEntityJob.Schedule(m_activeEntities, newJobHandle); m_ECBSource.AddJobHandleForProducer(processJobHandle); var cleanupEntityJob = new CleanupEntityJob() { ConcurrentECB = m_ECBSource.CreateCommandBuffer().ToConcurrent() }; var cleanupJobHandle = cleanupEntityJob.ScheduleSingle(m_destroyedEntities, processJobHandle); m_ECBSource.AddJobHandleForProducer(cleanupJobHandle); return cleanupJobHandle; } protected override void OnDestroy() { // Implement OnDestroy to cleanup any resources allocated by this system. // (This simplified example does not allocate any resources.) } }"
  },
  "manual/shared_component_data.html": {
    "href": "manual/shared_component_data.html",
    "title": "Shared Component Data | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Shared Component Data Shared components are a special kind of data component that you can use to subdivide entities based on the specific values in the shared component (in addition to their archetype). When you add a shared component to an entity, the EntityManager places all entities with the same shared data values into the same Chunk. Shared components allow your systems to process like entities together. For example, the shared component Rendering.RenderMesh , which is part of the Hybrid.rendering package, defines several fields, including mesh , material , receiveShadows , etc. When rendering, it is most efficient to process all the 3D objects that all have the same value for those fields together. Because these properties are specified in a shared component the EntityManager places the matching entities together in memory so the rendering system can efficiently iterate over them. Note: Over using shared components can lead to poor Chunk utilization since it involves a combinatorial expansion of the number of memory Chunks required based on archetype and every unique value of each shared component field. Avoid adding unnecessary fields to a shared component Use the Entity Debugger to view the current Chunk utilization. If you add or remove a component from an entity, or change the value of a SharedComponent, The EntityManager moves the entity to a different Chunk, creating a new Chunk if necessary. IComponentData is generally appropriate for data that varies between entities, such as storing a world position, agent hit points, particle time-to-live, etc. In contrast, ISharedComponentData is appropriate when many entities share something in common. For example in the Boid demo we instantiate many entities from the same Prefab and thus the RenderMesh between many Boid entities is exactly the same. [System.Serializable] public struct RenderMesh : ISharedComponentData { public Mesh mesh; public Material material; public ShadowCastingMode castShadows; public bool receiveShadows; } The great thing about ISharedComponentData is that there is literally zero memory cost on a per entity basis. We use ISharedComponentData to group all entities using the same InstanceRenderer data together and then efficiently extract all matrices for rendering. The resulting code is simple & efficient because the data is laid out exactly as it is accessed. RenderMeshSystemV2 (see file: Packages/com.unity.entities/Unity.Rendering.Hybrid/RenderMeshSystemV2.cs ) Some important notes about SharedComponentData: Entities with the same SharedComponentData are grouped together in the same Chunks . The index to the SharedComponentData is stored once per Chunk , not per entity. As a result SharedComponentData have zero memory overhead on a per entity basis. Using EntityQuery we can iterate over all entities with the same type. Additionally we can use EntityQuery.SetFilter() to iterate specifically over entities that have a specific SharedComponentData value. Due to the data layout this iteration has low overhead. Using EntityManager.GetAllUniqueSharedComponents we can retrieve all unique SharedComponentData that is added to any alive entities. SharedComponentData are automatically reference counted . SharedComponentData should change rarely. Changing a SharedComponentData involves using memcpy to copy all ComponentData for that entity into a different Chunk ."
  },
  "manual/manual_iteration.html": {
    "href": "manual/manual_iteration.html",
    "title": "Manual iteration | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Manual iteration You can also request all the chunks explicitly in a NativeArray and process them with a Job such as IJobParallelFor . This method is recommended if you need to manage chunks in some way that is not appropriate for the simplified model of simply iterating over all the Chunks in a EntityQuery. As in: public class RotationSpeedSystem : JobComponentSystem { [BurstCompile] struct RotationSpeedJob : IJobParallelFor { [DeallocateOnJobCompletion] public NativeArray<ArchetypeChunk> Chunks; public ArchetypeChunkComponentType<RotationQuaternion> RotationType; [ReadOnly] public ArchetypeChunkComponentType<RotationSpeed> RotationSpeedType; public float DeltaTime; public void Execute(int chunkIndex) { var chunk = Chunks[chunkIndex]; var chunkRotation = chunk.GetNativeArray(RotationType); var chunkSpeed = chunk.GetNativeArray(RotationSpeedType); var instanceCount = chunk.Count; for (int i = 0; i < instanceCount; i++) { var rotation = chunkRotation[i]; var speed = chunkSpeed[i]; rotation.Value = math.mul(math.normalize(rotation.Value), quaternion.AxisAngle(math.up(), speed.RadiansPerSecond * DeltaTime)); chunkRotation[i] = rotation; } } } EntityQuery m_Query; protected override void OnCreate() { var queryDesc = new EntityQueryDesc { All = new ComponentType[]{ typeof(RotationQuaternion), ComponentType.ReadOnly<RotationSpeed>() } }; m_Query = GetEntityQuery(queryDesc); } protected override JobHandle OnUpdate(JobHandle inputDeps) { var rotationType = GetArchetypeChunkComponentType<RotationQuaternion>(); var rotationSpeedType = GetArchetypeChunkComponentType<RotationSpeed>(true); var chunks = m_Query.CreateArchetypeChunkArray(Allocator.TempJob); var rotationsSpeedJob = new RotationSpeedJob { Chunks = chunks, RotationType = rotationType, RotationSpeedType = rotationSpeedType, DeltaTime = Time.deltaTime }; return rotationsSpeedJob.Schedule(chunks.Length,32,inputDeps); } } Iterating manually in a ComponentSystem Although not a generally recommended practice, you can use the EntityManager class to manually iterate through the entities or chunks. These iteration methods should only be used in test or debugging code (or when you are just experimenting) or in an isolated World in which you have a perfectly controlled set of entities. For example, the following snippet iterates through all of the entities in the active World: var entityManager = World.Active.EntityManager; var allEntities = entityManager.GetAllEntities(); foreach (var entity in allEntities) { //... } allEntities.Dispose(); While this snippet iterates through all of the chunks in the active World: var entityManager = World.Active.EntityManager; var allChunks = entityManager.GetAllChunks(); foreach (var chunk in allChunks) { //... } allChunks.Dispose();"
  },
  "manual/job_component_system.html": {
    "href": "manual/job_component_system.html",
    "title": "JobComponentSystem | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "JobComponentSystem Automatic job dependency management Managing dependencies is hard. This is why in JobComponentSystem we are doing it automatically for you. The rules are simple: jobs from different systems can read from IComponentData of the same type in parallel. If one of the jobs is writing to the data then they can't run in parallel and will be scheduled with a dependency between the jobs. public class RotationSpeedSystem : JobComponentSystem { [BurstCompile] struct RotationSpeedRotation : IJobForEach<Rotation, RotationSpeed> { public float dt; public void Execute(ref Rotation rotation, [ReadOnly]ref RotationSpeed speed) { rotation.value = math.mul(math.normalize(rotation.value), quaternion.axisAngle(math.up(), speed.speed * dt)); } } // Any previously scheduled jobs reading/writing from Rotation or writing to RotationSpeed // will automatically be included in the inputDeps dependency. protected override JobHandle OnUpdate(JobHandle inputDeps) { var job = new RotationSpeedRotation() { dt = Time.deltaTime }; return job.Schedule(this, inputDeps); } } How does this work? All jobs and thus systems declare what ComponentTypes they read or write to. As a result when a JobComponentSystem returns a JobHandle it is automatically registered with the EntityManager and all the types including the information about if it is reading or writing. Thus if a system writes to component A , and another system later on reads from component A , then the JobComponentSystem looks through the list of types it is reading from and thus passes you a dependency against the job from the first system. JobComponentSystem simply chains jobs as dependencies where needed and thus causes no stalls on the main thread. But what happens if a non-job ComponentSystem accesses the same data? Because all access is declared, the ComponentSystem automatically completes all jobs running against component types that the system uses before invoking OnUpdate . Dependency management is conservative & deterministic Dependency management is conservative. ComponentSystem simply tracks all EntityQuery objects ever used and stores which types are being written or read based on that. <!-- TODO non-injection example (So if you inject an `ComponentDataArray` or use `IJobForEach` once but skip using it sometimes, then we will create dependencies against all `EntityQuery` objects that have ever been used by that `ComponentSystem`.) --> Also when scheduling multiple jobs in a single system, dependencies must be passed to all jobs even though different jobs may need less dependencies. If that proves to be a performance issue the best solution is to split a system into two. The dependency management approach is conservative. It allows for deterministic and correct behaviour while providing a very simple API. Sync points All structural changes have hard sync points. CreateEntity , Instantiate , Destroy , AddComponent , RemoveComponent , SetSharedComponentData all have a hard sync point. Meaning all jobs scheduled through JobComponentSystem will be completed before creating the entity, for example. This happens automatically. So for instance: calling EntityManager.CreateEntity in the middle of the frame might result in a large stall waiting for all previously scheduled jobs in the World to complete. See EntityCommandBuffer for more on avoiding sync points when creating entities during game play. Multiple Worlds Every World has its own EntityManager and thus a separate set of JobHandle dependency management. A hard sync point in one world will not affect the other World . As a result, for streaming and procedural generation scenarios, it is useful to create entities in one World and then move them to another World in one transaction at the beginning of the frame. See ExclusiveEntityTransaction for more on avoiding sync points for procedural generation & streaming scenarios and System update order ."
  },
  "manual/gp_multiplayer.html": {
    "href": "manual/gp_multiplayer.html",
    "title": "Networking and Multiplayer | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Networking and Multiplayer Synopsis: How to use Unity's networking and multiplayer features with ECS. How to optimize networking and multiplayer with ECS. Note, this is a placeholder for work that has not been completed yet."
  },
  "manual/gp_input.html": {
    "href": "manual/gp_input.html",
    "title": "Player input | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Player input Synopsis: How to use Unity's input features with ECS. How to optimize input with ECS. Note, this is a placeholder for work that has not been completed yet."
  },
  "manual/gp_ecs_interop.html": {
    "href": "manual/gp_ecs_interop.html",
    "title": "Sharing data between ECS and MonoBehaviours | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Sharing data between ECS and MonoBehaviours Synopsis: interoperation between ECS components and systems and MonoBehaviours or other managed code. Note, this is a placeholder for work that has not been completed yet."
  },
  "manual/gp_audio.html": {
    "href": "manual/gp_audio.html",
    "title": "Audio | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Audio Synopsis: How to use Unity's audio features with ECS. How to optimize audio with ECS. Note, this is a placeholder for work that has not been completed yet."
  },
  "manual/gp_ai.html": {
    "href": "manual/gp_ai.html",
    "title": "Pathfinding and AI | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Pathfinding and AI Synopsis: Describe how to do pathfinding and other AI tasks. At the very least, this topic must cover using existing Unity constructs such as the Nav Mesh. Ideally, the topic also covers data-oriented approaches to AI systems or provides resources for developers tackling the problem. Note, this is a placeholder for work that has not been completed yet. Also, see the AI Planner package."
  },
  "manual/execution_order.html": {
    "href": "manual/execution_order.html",
    "title": "Execution order | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Execution order Synopsis: The ECS equivalent to Unity Execution order of events functions ( https://docs.unity3d.com/Manual/ExecutionOrder.html ). Must discuss Job dependencies and barriers"
  },
  "manual/exclusive_entity_transaction.html": {
    "href": "manual/exclusive_entity_transaction.html",
    "title": "ExclusiveEntityTransaction | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "ExclusiveEntityTransaction ExclusiveEntityTransaction is an API to create & destroy entities from a job. The purpose is to enable procedural generation scenarios where instantiation on big scale must happen on jobs. As the name implies it is exclusive to any other access to the EntityManager . ExclusiveEntityTransaction should be used on a manually created World that acts as a staging area to construct & setup entities. After the job has completed you can end the ExclusiveEntityTransaction and use EntityManager.MoveEntitiesFrom(EntityManager srcEntities); to move the entities to an active World ."
  },
  "manual/entity_manager.html": {
    "href": "manual/entity_manager.html",
    "title": "EntityManager | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "EntityManager The EntityManager owns EntityData , EntityArchetypes , SharedComponentData and EntityQuery . EntityManager is where you find APIs to create entities, check if an entity is still alive, instantiate entities and add or remove components. // Create an entity with no components on it var entity = EntityManager.CreateEntity(); // Adding a component at runtime EntityManager.AddComponent(entity, new MyComponentData()); // Get the ComponentData MyComponentData myData = EntityManager.GetComponentData<MyComponentData>(entity); // Set the ComponentData EntityManager.SetComponentData(entity, myData); // Removing a component at runtime EntityManager.RemoveComponent<MyComponentData>(entity); // Does the entity exist and does it have the component? bool has = EntityManager.HasComponent<MyComponentData>(entity); // Is the entity still alive? bool has = EntityManager.Exists(entity); // Instantiate the entity var instance = EntityManager.Instantiate(entity); // Destroy the created instance EntityManager.DestroyEntity(instance); // EntityManager also provides batch APIs // to create and destroy many entities in one call. // They are significantly faster // and should be used where ever possible // for performance reasons. // Instantiate 500 entities and write the resulting entity IDs to the instances array var instances = new NativeArray<Entity>(500, Allocator.Temp); EntityManager.Instantiate(entity, instances); // Destroy all 500 entities EntityManager.DestroyEntity(instances);"
  },
  "manual/ecs_project_status.html": {
    "href": "manual/ecs_project_status.html",
    "title": "ECS project status | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "ECS project status Current best practices As the ECS APIs change, so too will these best practices. For the time being, these are our best recommendations when using the ECS APIs. Do's Use IJobForEach for processing many entities' components in a job. Use chunk iteration if you need finer-grained control. Don'ts Do not use injection. It is deprecated. Do not use ComponentDataArray. It is deprecated."
  },
  "manual/ecs_profiling.html": {
    "href": "manual/ecs_profiling.html",
    "title": "Profiling | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Profiling Synopsis: All about profiling ECS programs"
  },
  "manual/ecs_job_overview.html": {
    "href": "manual/ecs_job_overview.html",
    "title": "Jobs in ECS | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Jobs in ECS ECS uses the Job system to implement behavior -- the System part of ECS. An ECS System is concretely a Job created to transform the data stored in entity components For example, the following system updates positions: using Unity.Burst; using Unity.Collections; using Unity.Entities; using Unity.Jobs; using Unity.Transforms; using UnityEngine; public class MovementSpeedSystem : JobComponentSystem { [BurstCompile] struct MovementSpeedJob : IJobForEach<Position, MovementSpeed> { public float dT; public void Execute(ref Position Position, [ReadOnly] ref MovementSpeed movementSpeed) { float3 moveSpeed = movementSpeed.Value * dT; Position.Value = Position.Value + moveSpeed; } } // OnUpdate runs on the main thread. protected override JobHandle OnUpdate(JobHandle inputDependencies) { var job = new MovementSpeedJob() { dT = Time.deltaTime }; return job.Schedule(this, inputDependencies); } } For more information about systems, see ECS Systems ."
  },
  "manual/ecs_job_extensions.html": {
    "href": "manual/ecs_job_extensions.html",
    "title": "Job extensions | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Job extensions The Unity C# Job System lets you run code on multiple threads. The system provides scheduling, parallel processing, and multi-threaded safety. The Job System is a core Unity module that provides the general purpose interfaces and classes for creating and running jobs (whether or not you are using ECS). These interfaces include: IJob — create a Job that runs on any thread or core, as determined by the Job System scheduler. IJobParallelFor — create a Job that can run on multiple threads in parallel to process the elements of a NativeContainer . IJobExtensions — provides extension methods for running IJobs. IJobParalllelForExtensions — provides extension methods for running IJobParallelFor jobs. JobHandle — a handle for accessing a scheduled job. JobHandle instances also allow you to specify dependencies between Jobs. For an overview of the Jobs System see C# Job System in the Unity Manual. The Jobs package extends the Job System to support ECS. It contains: IJobParallelForDeferExtensions IJobParallelForFilter JobParallelIndexListExtensions Job​Struct​Produce<T>"
  },
  "manual/ecs_entity_query.html": {
    "href": "manual/ecs_entity_query.html",
    "title": "Querying for data using a EntityQuery | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Querying for data using a EntityQuery The first step to reading or writing data is finding that data. Data in the ECS framework is stored in components, which are grouped together in memory according to the archetype of the entity to which they belong. To define a view into your ECS data that contains only the specific data you need for a given algorithm or process, you can construct a EntityQuery. After creating a EntityQuery, you can Run a Job to process the entities and components selected for the view Get a NativeArray containing all the selected entities Get NativeArrays of the selected components (by component type) The entity and component arrays returned by a EntityQuery are guaranteed to be \"parallel\", that is, the same index value always applies to the same entity in any array. Note: that the ComponentSystem.Entites.ForEach delegates and IJobForEach create internal EntityQueries based on the component types and attributes you specify for these APIs. <!-- TODO: (In an IJobForEach Job, you can override the EntityQuery to use a more complex query than the default setup supports.) --> Defining a query A EntityQuery query defines the set of component types that an archetype must contain in order for its chunks and entities to be included in the view. You can also exclude archetypes that contain specific types of components. For simple queries, you can create a EntityQuery based on an array of component types. The following example defines a EntityQuery that finds all entities with both RotationQuaternion and RotationSpeed components. EntityQuery m_Query = GetEntityQuery(typeof(RotationQuaternion), ComponentType.ReadOnly<RotationSpeed>()); The query uses ComponentType.ReadOnly&lt;T&gt; instead of the simpler typeof expression to designate that the system does not write to RotationSpeed. Always specify read only when possible, since there are fewer constraints on read access to data, which can help the Job scheduler execute your Jobs more efficiently. EntityQueryDesc For more complex queries, you can use an EntityQueryDesc to create the EntityQuery. An EntityQueryDesc provides a flexible query mechanism to specify which archetypes to select based on the following sets of components: All = All component types in this array must exist in the archetype Any = At least one of the component types in this array must exist in the archetype None = None of the component types in this array can exist in the archetype For example, the following query includes archetypes containing the RotationQuaternion and RotationSpeed components, but excludes any archetypes containing the Frozen component: var query = new EntityQueryDesc { None = new ComponentType[]{ typeof(Frozen) }, All = new ComponentType[]{ typeof(RotationQuaternion), ComponentType.ReadOnly<RotationSpeed>() } } EntityQuery m_Query = GetEntityQuery(query); Note: Do not include completely optional components in the EntityQueryDesc. To handle optional components, use the ArchetypeChunk.Has&lt;T&gt;() method to determine whether a chunk contains the optional component or not. Since all entities within the same chunk have the same components, you only need to check whether an optional component exists once per chunk -- not once per entity. Query options When you create an EntityQueryDesc, you can set its Options variable. The options allow for specialized queries (normally you do not need to set them): Default — no options set; the query behaves normally. IncludePrefab — includes archetypes containing the special Prefab tag component. IncludeDisabled — includes archetypes containing the special Disabled tag component. FilterWriteGroup — considers the WriteGroup of any components in the query. When you set the FilterWriteGroup option, only entities with those components in a Write Group that are explicitly included in the query will be included in the view. Entities that have any additional components from the same WriteGroup are excluded. For example, suppose C2 and C3 are components in the same Write Group based on C1, and you created a query using the FilterWriteGroup option that requires C1 and C3: public struct C1: IComponentData{} [WriteGroup(C1)] public struct C2: IComponentData{} [WriteGroup(C1)] public struct C3: IComponentData{} // ... In a system: var query = new EntityQueryDesc{ All = new ComponentType{typeof(C1), ComponentType.ReadOnly<C3>()}, Options = EntityQueryDescOptions.FilterWriteGroup }; var m_Query = GetEntityQuery(query); This query excludes any entities with both C2 and C3 because C2 is not explicitly included in the query. While you could design this into the query using None , doing it through a Write Group provides an important benefit: you don't need to alter the queries used by other systems (as long as these systems also use Write Groups). Write Groups are a mechanism that allow you to extend existing systems. For example, if C1 and C2 are defined in another system (perhaps part of a library that you don't control), you could put C3 into the same Write Group as C2 in order to change how C1 is updated. For any entities to which you add your C3 component, your system will update C1 and the original system will not. For other entities without C3, the original system will update C1 as before. See Write Groups for more information. Combining queries You can combine multiple queries by passing an array of EntityQueryDesc objects rather than a single instance. Each query is combined using a logical OR operation. The following example selects an archetypes that contain a RotationQuaternion component or a RotationSpeed component (or both): var query0 = new EntityQueryDesc { All = new ComponentType[] {typeof(RotationQuaternion)} }; var query1 = new EntityQueryDesc { All = new ComponentType[] {typeof(RotationSpeed)} }; EntityQuery m_Query = GetEntityQuery(new EntityQueryDesc[] {query0, query1}); Creating a EntityQuery Outside a system class, you can create a EntityQuery with the EntityManager.CreateEntityQuery() function: EntityQuery m_Query = CreateEntityQuery(typeof(RotationQuaternion), ComponentType.ReadOnly<RotationSpeed>()); However, in a system class, you must use the GetEntityQuery() function: public class RotationSpeedSystem : JobComponentSystem { private EntityQuery m_Query; protected override void OnCreate() { m_Query = GetEntityQuery(typeof(RotationQuaternion), ComponentType.ReadOnly<RotationSpeed>()); } //… } When you plan to reuse the same view, you should cache the EntityQuery instance, if possible, instead of creating a new one for each use. For example, in a system, you can create the EntityQuery in the system’s OnCreate() function and store the result in an instance variable. The m_Query variable in the above example is used for this purpose. Defining filters In addition to defining which components must be included or excluded from the query, you can also filter the view. You can specify the following types of filters: Shared component values —filter the set of entities based on specific values of a shared component. Change filter — Filter the set of entities based on whether the value of a specific component type has potentially changed Shared component filters To use a shared component filter, first include the shared component in the EntityQuery (along with other needed components), and then call the SetFilter() function, passing in a struct of the same ISharedComponent type that contains the values to select. All values must match. You can add up to two different shared components to the filter. You can change the filter at any time, but changing the filter does not change any existing arrays of entities or components that you received from the group ToComponentDataArray() or ToEntityArray() functions. You must recreate these arrays. The following example defines a shared component named SharedGrouping and a system that only processes entities that have the Group field set to 1. struct SharedGrouping : ISharedComponentData { public int Group; } class ImpulseSystem : ComponentSystem { EntityQuery m_Query; protected override void OnCreate(int capacity) { m_Query = GetEntityQuery(typeof(Position), typeof(Displacement), typeof(SharedGrouping)); } protected override void OnUpdate() { // Only iterate over entities that have the SharedGrouping data set to 1 m_Query.SetFilter(new SharedGrouping { Group = 1 }); var positions = m_Query.ToComponentDataArray<Position>(Allocator.Temp); var displacememnts = m_Query.ToComponentDataArray<Displacement>(Allocator.Temp); for (int i = 0; i != positions.Length; i++) positions[i].Value = positions[i].Value + displacememnts[i].Value; } } Change filters If you only need to update entities when a component value has changed, you can add that component to the EntityQuery filter using the SetFilterChanged() function. For example, the following EntityQuery only includes entities from chunks in which another system has already written to the Translation component: protected override void OnCreate(int capacity) { m_Query = GetEntityQuery(typeof(LocalToWorld), ComponentType.ReadOnly<Translation>()); m_Query.SetFilterChanged(typeof(Translation)); } Note that for efficiency, the change filter applies to whole chunks not individual entities. The change filter also only checks whether a system has run that declared write access to the component, not whether it actually changed any data. In other words, if a chunk has been accessed by another Job which had the ability to write to that type of component, then the change filter includes all entities in that chunk. (This is another reason to always declare read only access to components that you do not need to modify.) Executing the query A EntityQuery executes its query when you use the EntityQuery in a Job or you call one of the EntityQuery methods that returns arrays of entities, components, or chunks in the view: ToEntityArray() returns an array of the selected entities. ToComponentDataArray&lt;T&gt; returns an array of the components of type T for the selected entities. CreateArchetypeChunkArray() returns all the chunks containing the selected entities. (Since a query operates on archetypes, shared component values, and change filters, which are all identical for all the entities in a chunk, the set of entities stored within the returned set of chunks is exactly the same as the set of entities returned by ToEntityArray() .) <!-- TODO: Discuss using the Job versions of these functions. --> In Jobs In a JobComponentSystem, pass the EntityQuery object to the system's Schedule() method. In the following example, from the HelloCube IJobChunk sample, the m_Query argument is the EntityQuery object // OnUpdate runs on the main thread. protected override JobHandle OnUpdate(JobHandle inputDependencies) { var rotationType = GetArchetypeChunkComponentType<Rotation>(false); var rotationSpeedType = GetArchetypeChunkComponentType<RotationSpeed>(true); var job = new RotationSpeedJob() { RotationType = rotationType, RotationSpeedType = rotationSpeedType, DeltaTime = Time.deltaTime }; return job.Schedule(m_Query, inputDependencies); } A EntityQuery uses Jobs internally to create the required arrays. When you pass the group to the Schedule() method, the EntityQuery Jobs are scheduled along with the system's own Jobs and can take advantage of parallel processing."
  },
  "manual/ecs_entities.html": {
    "href": "manual/ecs_entities.html",
    "title": "Entities | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Entities <!-- > Topics to add > * Spawning Entities in Jobs -- Entity Command Buffers > * Transferring Entities between worlds: EM.MoveEntity --> Entities are one of the three principle elements of an Entity Component System architecture. They represent the individual \"things\" in you game or program. An entity has neither behavior nor data; instead, it identifies which pieces of data belong together. Systems provide the behavior. Components store the data. An entity is essentially an ID. You can think of it as a super lightweight GameObject that does not even have a name by default. Entity ID's are stable; you can use them to store a reference to another component or entity. For example, a child entity in a hierarchy may need to reference its parent entity. An EntityManager manages all of the entities in a World . An EntityManager maintains the list of entities and organizes the data associated with an entity for optimal performance. Although an entity does not have a type, groups of entities can be categorized by the types of the data components associated with them. As you create entities and add components to them, the EntityManager keeps track of the unique combinations of components on the existing entities. Such a unique combination is called an Archetype . The EntityManager creates an EntityArchetype struct as you add components to an entity. You can use existing EntityArchetypes to create new entities conforming to that archetype. You can also create an EntityArchetype in advance and use that to create entities. Creating Entities The easiest way to create an entity is in the Unity Editor. You can set up both GameObjects placed in a scene and Prefabs to be converted into entities at runtime. For more dynamic parts of your game or program, you can create spawning systems that create multiple entities in a job. Finally, you can create entities one at a time using one of the EntityManager.CreateEntity functions. Creating Entities with an EntityManager Use one of the EntityManager.CreateEntity functions to create an entity. The entity is created in the same World as the EntityManager. You can create entities one-by-one in the following ways: Create an entity with components using an array of ComponentType objects. Create an entity with components using an EntityArchetype . Copy an existing entity, including its current data, with Instantiate Create an entity with no components and then add components to it. (You can add components immediately or as additional components are needed.) You can create multiple entities at a time also: Fill a NativeArray with new entities with the same archetype using CreateEntity . Fill a NativeArray with copies of an existing entity, including its current data, using Instantiate . Explicitly create Chunks populated with a specified number of entities with a given archetype with CreateChunk . Adding and Removing Components After an entity has been created, you can add or remove components When you do this, the archetype of the affected entities change and the EntityManager must move altered data to a new Chunk of memory, as well as condense the component arrays in the original Chunks. Changes to an entity that cause structural changes — that is, adding or removing components changing the values of SharedComponentData, and destroying the entity — cannot be done inside a Job since these could invalidate the data that the Job is working on. Instead, you add the commands to make these types of changes to an EntityCommandBuffer and execute this command buffer after the Job is complete. The EntityManager provides functions for removing a component from a single entity as well as all of the entities in a NativeArray. See Components for more information. Iterating entities Iterating over all entities that have a matching set of components, is at the center of the ECS architecture. See Accessing entity Data ."
  },
  "manual/ecs_core.html": {
    "href": "manual/ecs_core.html",
    "title": "ECS concepts | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "ECS concepts An Entity Component System (ECS) architecture separates identity (entities), data (components), and behaviour (systems). The architecture focuses on the data. Systems transform the data from an input state to an output state by reading streams of component data, which are indexed by entities. The following diagram illustrates how these three basic parts work together: In this diagram, a system reads Translation and Rotation components, multiplies them and then updates the corresponding LocalToWorld components. The fact that entities A and B have a Renderer component and entity C does not, doesn't affect the system, because the system does not care about Renderer components. (You could set up a system so that it required a Renderer component, in which case, the system would ignore the components of entity C; or, alternately, you could set up a system to exclude entities with Renderer components, in which case, it would ignore the components of entities A and B.) Archetypes A unique combination of component types is called an Archetype . For example, a 3D object might have a component for its world transform, one for its linear movement, one for rotation, and one for its visual representation. Each instance of one of these 3D objects corresponds to a single entity, but because they share the same set of components, they can be classified as a single archetype: In this diagram, entities A and B share archetype M, while entity C has archetype N. You can fluidly change the archetype of an entity by adding or removing components at runtime. For example, if you remove the Renderer component from entity B, then B moves to archetype N. Memory Chunks The archetype of an entity determines where the components of that entity are stored. ECS allocates memory in \"chunks,\" each represented by an ArchetypeChunk object. A chunk always contains entities of a single archetype. When a chunk of memory becomes full, a new chunk of memory is allocated for any new entities created with the same archetype. If you change an entity archetype by adding or removing components, the components for that entity are moved to a different chunk. This organizational scheme provides a one-to-many relationship between archetypes and chunks. It also means that finding all the entities with a given set of components only requires searching through the existing archetypes, which are typically small in number, rather than all of the entities, which are typically much larger in number. The entities in a chunk are not stored in a specific order. When an entity is created or changed to a new archetype, it goes into the first chunk storing that archetype that has room. Chunks do remain tightly packed, however; when an entity is removed from an archetype, the components of the last entity in the chunk are moved into the newly vacated slots in the component arrays. Note that the values of shared components in an archetype also determine which entities are stored in which chunk. All the entities in a given chunk have the exact same values for any shared components. If you change the value of any field in a shared component, the modified entity moves to a different chunk, just as it would if you changed that entity's archetype. A new chunk is allocated, if necessary. Use shared components to group entities within an archetype when it is more efficient to process them together. For example, the Hybrid Renderer defines its RenderMesh component Entity queries To identify which entities a system should process, you use an EntityQuery . An entity query searches the existing archetypes for those having the components that match your requirements. You can specify the following component requirements with a query: All — the archetype must contain all of the component types in the All category. Any — the archetype must contain at least one of the component types in the Any category. None — the archetype must not contain any of the component types in the None category. An entity query provides a list of the chunks containing the types of components required by the query. You can then iterate over the components in those chunks directly with IJobChunk , one of the specialized ECS Jobs, or implicitly with IJobForEach or a non-Job for-each loop . Note: IJobForEach implicitly creates an entity query based on the Job parameters and attributes. You can override the implicit query when scheduling the Job. Jobs To take advantage of multiple threads, you can use the Unity C# Job system. ECS provides the JobComponentSystem , along with the specialized Job types, IJobForEach and IJobChunk , to transform data outside the main thread. IJobForEach (and IJobForEachWithEntity) is typically the simplest to use. IJobChunk can be used for more complex situations that IJobForEach does not handle. These ECS Jobs use an EntityQuery object that not only defines which components a Job accesses, but also specifies whether that access is read-only or read-write. This access-type information allows the Job scheduler to determine which Jobs it can run in parallel and which must run in sequence. Jobs that read the same data can run at the same time, but when one Job writes to data that another Job accesses, those Jobs must run in sequence. The order in which such sequential Jobs are run is determined by how you set up the Job dependencies. When the core ECS code calls one of your JobComponentSystem OnUpdate() functions, it passes in a JobHandle parameter that encapsulates the existing Job dependencies. When you a schedule a Job, the Job Schedule() function returns a new JobHandle, which includes the new Job dependencies. System organization ECS organizes systems by World and then by group . By default, ECS creates a default World with a predefined set of groups. It finds all available systems, instantiates them, and adds them to the predefined simulation group in the default World. You can specify the update order of systems within the same group. A group is, itslef, a kind of system, so you can add a group to a group and specify its order just like any other system. All systems within a group update before the next system or group. If you do not specify an order, systems are inserted into the update order in a deterministic manner that does not depend on creation order. In other words, the same set of systems always update in the same order within their group even when you don't explicitly specify an order. Entity component buffer systems System updates occur on the main thread. However, systems can use Jobs to offload work to other threads. JobComponentSystems provide a straightforward way to create and schedule Jobs. See System Update Order for more information about system creation, update order, and the attributes you can use to organize your systems. ECS Authoring When creating your game or application in the Unity Editor, you can use GameObjects and MonoBehaviours and create a conversion system to map those UnityEngine objects and components to entities. See Creating Gameplay ."
  },
  "manual/ecs_components.html": {
    "href": "manual/ecs_components.html",
    "title": "Components | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Components Components are one of the three principle elements of an Entity Component System architecture. They represent the data of your game or program. Entities are essentially identifiers that index your collections of components. Systems provide the behavior. Concretely, a component in ECS is a struct with one of the following \"marker interfaces\": IComponentData — use for general purpose and chunk components . IBufferElementData — use for associating dynamic buffers with an entity. ISharedComponentData — use to categorize or group entities by value within an archetype. See Shared Component Data . ISystemStateComponentData — use for associating system-specific state with an entity and for detecting when individual entities are created or destroyed. See System State Components . ISharedSystemStateComponentData — a combination of shared and system state data. See System State Components . Blob assets – while not technically a \"component,\" you can use blob assets to store data. Blob assets can be referenced by one or more components using a BlobAssetReference and are immutable. Blob assets allow you to share data between assets and access that data in C# Jobs. The EntityManager organizes unique combinations of components appearing on your entities into Archetypes . It stores the components of all entities with the same archetype together in blocks of memory called Chunks . The entities in a given Chunk all have the same component archetype. This diagram illustrates how component data is stored in chunks by archetype. Shared components and chunk components are exceptions because they are stored outside the chunk; a single instance of these component types apply to all the entities in the applicable chunks. In addition, you can optionally store dynamic buffers outside the chunk. Even though these types of components are not stored inside the chunk, you generally treat them the same as other component types when querying for entities."
  },
  "manual/ecs_blob_asset_data.html": {
    "href": "manual/ecs_blob_asset_data.html",
    "title": "Blob Assets | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Blob Assets"
  },
  "manual/ecs_anatomy.html": {
    "href": "manual/ecs_anatomy.html",
    "title": "Anatomy of an ECS scene | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Anatomy of an ECS scene Synopsis: Essential elements of an ECS scene in the Unity Editor. Also cover how to load and unload ECS scenes (assuming there are differences from normal -- which is certainly true with Tiny)."
  },
  "manual/doo_design.html": {
    "href": "manual/doo_design.html",
    "title": "Data-oriented design in Unity | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Data-oriented design in Unity Synopsis: Discuss how to design optimal data structures and algorithms to transform them. Provide case studies for different types of data commonly found in games: transform data, hierarchical skinned meshes, audio, strings, etc..."
  },
  "manual/component_system.html": {
    "href": "manual/component_system.html",
    "title": "Component Systems | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Component Systems A ComponentSystem in Unity (also known as a system in standard ECS terms) performs operations on entities . A ComponentSystem cannot contain instance data. To put this in terms of the old Unity system, this is somewhat similar to an old Component class, but one that only contains methods . One ComponentSystem is responsible for updating all entities with a matching set of components (that is defined within a struct called a EntityQuery ). Unity ECS provides an abstract class called ComponentSystem that you can extend in your code. See file: /Packages/com.unity.entities/Unity.Entities/ComponentSystem.cs . See also: System update order ."
  },
  "index.html": {
    "href": "index.html",
    "title": "Home Page. | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Home Page. This is the home page for this package."
  },
  "manual/index.html": {
    "href": "manual/index.html",
    "title": "Entity Component System | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": ".infographic { background-color: #020202; } .slide-indicator { position:absolute; opacity: 0.0; transition: opacity .5s ease; } .slide-indicator:hover { opacity: 1.0; } Entity Component System The Entity Component System (ECS) is the core of the Unity Data-Oriented Tech Stack. As the name indicates, ECS has three principal parts: Entities — the entities, or things, that populate your game or program. Components — the data associated with your entities, but organized by the data itself rather than by entity. (This difference in organization is one of the key differences between an object-oriented and a data-oriented design.) Systems — the logic that transforms the component data from its current state to its next state— for example, a system might update the positions of all moving entities by their velocity times the time interval since the previous frame."
  },
  "manual/gp_ui.html": {
    "href": "manual/gp_ui.html",
    "title": "User Interfaces | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "User Interfaces Synopsis: How to use Unity's UI features with ECS. How to optimize your UI with ECS. Note, this is a placeholder for work that has not been completed yet."
  },
  "manual/gp_physics.html": {
    "href": "manual/gp_physics.html",
    "title": "Physics | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Physics Synopsis: How to use Unity's physics features with ECS. How to optimize physics with ECS. Note, this is a placeholder for work that has not been completed yet. See the Unity Physics and Havok Physics packages for information about the DOTS-compatible physics APIs."
  },
  "manual/gp_overview.html": {
    "href": "manual/gp_overview.html",
    "title": "Creating Gameplay | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Creating Gameplay This section discusses authoring DOTS-based games and other applications in the Unity Editor and the systems and components provided by ECS to help you implement game features. The systems include: Unity.Transforms — provides components for defining world-space transforms, 3D object hierarchies, and systems to manage them. Unity.Hybrid.Renderer — provides components and systems for rendering ECS entities in the Unity runtime. Authoring Overview You can use the Unity Editor (with the required DOTS packages) to create DOTS-based games. In the Editor, you author a scene using GameObjects as normal and the ECS code converts the scene GameObjects to entities. The biggest difference when using DOTS is that instead of writing your own MonoBehaviours to store instance data and implement custom game logic, you would typically define ECS components to store the data at runtime and write systems for the custom logic. GameObject conversion During GameObject conversion, various conversion systems handle the MonoBehaviour components that they recognize and convert them into ECS-based components. For example, one of the the Unity.Transforms conversion systems examines the UnityEngine.Transform component and adds ECS components, such as LocalToWorld , to replace it. You can implement an IConvertGameObjectToEntity MonoBehaviour component to specify custom conversion steps. There often will not be a one-to-one relationship between the number of GameObjects converted and the number of entities created; nor between the number of MonoBehaviours on a GameObject and the number of ECS components added to an entity. The ECS conversion code converts a GameObject if it either has a ConvertToEntity MonoBehaviour component or it is part of a SubScene. In either case, the conversion systems provided for various DOTS features, such as Unity.Transforms and Unity.Hybrid.Render, process the GameObject or the Scene Asset and any of their child GameObjects. One difference between converting GameObjects with ConvertToEntity and converting with a SubScene is that ECS serializes and saves to disk the entity data generated from converting a SubScene. This serialized data can be loaded or streamed very quickly at run time. In contrast, GameObjects with ConvertToEntity MonoBehaviours are always converted at runtime. Unity recommends using standard MonoBehaviours for authoring and using IConvertGameObjectToEntity to apply the values of those authoring components to IComponentData structs for run-time use. Often, the most convenient data layout for authoring is not the most efficient data layout at run time. You can use IConvertGameObjectToEntity to customize the conversion of any GameObject in a SubScene, or that has a ConvertToEntity MonoBehaviour, or that is a child of a GameObject that has a ConvertToEntity MonoBehaviour. Note: at this time, the authoring workflow for DOTS-based applications is an area of active development. The general outlines are in place, but you should anticipate many changes in this area in the near future. Generated Authoring Components Unity can automatically generate authoring components for simple IComponentData components. Generating an autjoring component allows you to add an IComponentData directly to a GameObject in a scene within the Unity Editor. You can then set the initial values for the component using the Inspector window. To do this, add the [GenerateAuthoringComponent] attribute to your component definition. Unity automatically generates a MonoBehaviour for you that contains the public fields of your component and provides a Conversion method that converts those fields over into runtime component data. [GenerateAuthoringComponent] public struct RotationSpeed_ForEach : IComponentData { public float RadiansPerSecond; } Note that the following restrictions: Only one component in a single C# file can have a generated authoring component, and the C# file must not have another MonoBehaviour in it. Only public fields are reflected and they will have the same name as that specified in the component. Fields of an Entity type in the IComponentData are reflected as fields of GameObject types in the generated MonoBehaviour. GameObjects or Prefabs you assign to these fields are converted as referenced prefabs."
  },
  "manual/ecs_in_detail.html": {
    "href": "manual/ecs_in_detail.html",
    "title": "ECS features in detail | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "ECS features in detail Note : The main content of this page has migrated to the Unity Data-Oriented reference. ECS related features are listed below in alphabetical order, with a short description and links to further information about it. This page is not an exhaustive list and can be added to over time as ECS, and its related documentation expands. If you spot something that is out-of-date or broken links, then make sure to let us know in the forums or as an issue in the repository. EntityCommandBufferSystem When using jobs, you must request command buffers from an entity command buffer system on the main thread, and pass them to the jobs. When the EntityCommandBufferSystem updates, the command buffers playback on the main thread in the order they were created. This extra step is required so that memory management can be centralized and determinism of the generated entities and components can be guaranteed. For more information, see the EntityCommandBuffer reference page. Chunk A Chunk contains the ComponentData for each entity. All entities in one Chunk follow the same memory layout. When iterating over components, memory access of components within a Chunk is always completely linear, with no waste loaded into cache lines. This is a hard guarantee. For more information, see the Chunk reference page. ComponentDataFromEntity If you need to access ComponentData on another entity, the only stable way of referencing that component data is via the entity ID. EntityManager provides a simple get & set ComponentData API for it. However, you can't use the EntityManager in a C# job. ComponentDataFromEntity gives you a simple API that you can also safely use in a job. For more information, see the ComponentDataFromEntity reference page. EntityQuery The EntityQuery is the foundation class on top of which all iteration methods are built foreach , IJobForEach , etc.). Essentially a EntityQuery is constructed with a set of required components and or subtractive components. EntityQuery lets you extract individual arrays of entities based on their components. For more information, see the EntityQuery reference page. Entity An entity is an ID. You can think of it as a super lightweight GameObject that does not even have a name by default. You can add and remove components from entities at runtime. entity ID's are stable. They are the only stable way to store a reference to another component or entity. For more information, see the Entity reference page. EntityArchetype An EntityArchetype is a unique array of ComponentType structs. The EntityManager uses EntityArchetype structs to group all entities using the same ComponentType structs into Chunks . For more information, see the EntityArchetype reference page. EntityCommandBuffer The EntityCommandBuffer abstraction allows you to queue up changes (from either a job or from the main thread) so that they can take effect later on the main thread. For more information, see the EntityCommandBuffer reference page. EntityManager EntityManager is where you find APIs to create entities, check if an entity is still alive, instantiate entities and add or remove components. For more information, see the EntityManager reference page. ExclusiveEntityTransaction ExclusiveEntityTransaction is an API to create & destroy entities from a job. The purpose is to enable procedural generation scenarios where instantiation on a big scale must happen in jobs. As the name implies, it is exclusive to any other access to the EntityManager . For more information, see the ExclusiveEntityTransaction reference page. IComponentData IComponentData is a pure ECS-style component, meaning that it defines no behavior, only data. IComponentData is a struct rather than a class, meaning that it is copied by value instead of by reference by default. For more information, see the ComponentData reference page - see \"IComponentData.\" JobComponentSystem (Automatic job dependency management) Managing dependencies is hard, which is why the JobComponentSystem does it automatically for you. The rules are simple: jobs from different systems can read from IComponentData of the same type in parallel. If one of the jobs is writing to the data, then they can't run in parallel and will be scheduled with a dependency between the jobs. For more information, see the JobComponentSystem reference page. Shared ComponentData ISharedComponentData is useful when many entities have something in common, for example in the Boid demo we instantiate many entities from the same Prefab , and thus the RenderMesh between many Boid entities is the same. For more information, see the SharedComponentData reference page. SystemStateComponentData The purpose of SystemStateComponentData is to allow you to track resources internal to a system and have the opportunity to appropriately create and destroy those resources as needed without relying on individual callbacks. For more information, see the SystemStateComponent reference page. System update order In ECS all systems are updated on the main thread. Systems update based on a set of constraints and an optimization pass, which tries to order the systems in a way so that the time between scheduling a job and waiting for it is as long as possible. For more information, see the System update order reference page. World A World owns both an EntityManager and a set of ComponentSystems . You can create as many World objects as you like. Commonly you would create a simulation World and rendering or presentation World . For more information, see the World reference page."
  },
  "manual/ecs_gameplay.html": {
    "href": "manual/ecs_gameplay.html",
    "title": "Creating Gameplay with ECS | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Creating Gameplay with ECS <!-- Synopsis: Introductory topic about using ECS make things happen. Should probably put any discussions of hybrid versus all-ecs solutions here (unless such discussions become too involved and need thier own page)"
  },
  "manual/custom_job_types.html": {
    "href": "manual/custom_job_types.html",
    "title": "Custom job types | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Custom job types On the lowest level of the job system, jobs are scheduled by calling one of the Schedule functions in JobsUtility . The currently existing job types all use these functions, but it is also possible to create specialized job types using the same APIs. These APIs use unsafe code and have to be crafted carefully, since they can easily introduce unwanted race conditions. If you add your own job types, we strongly recommend to aim for full test coverage. As an example we have a custom job type IJobParallelForBatch (see file: /Packages/com.unity.jobs/Unity.Jobs/IJobParallelForBatch.cs ). It works like IJobParallelFor , but instead of calling a single execute function per index it calls one execute function per batch being executed. This is useful if you need to do something on more than one item at a time, but still want to do it in parallel. A common scenario for this job type is if you need to create a temporary array and you want to avoid creating each item in the array one at a time. By using IJobParallelFor you can instead create one temporary array per batch. In the IJobParallelForBatch example, the entry point where the job is actually scheduled looks like this: unsafe static public JobHandle ScheduleBatch&lt;T&gt;(this T jobData, int arrayLength, int minIndicesPerJobCount, JobHandle dependsOn = new JobHandle()) where T : struct, IJobParallelForBatch { var scheduleParams = new JobsUtility.JobScheduleParameters(UnsafeUtility.AddressOf(ref jobData), ParallelForBatchJobStruct&lt;T&gt;.Initialize(), dependsOn, ScheduleMode.Batched); return JobsUtility.ScheduleParallelFor(ref scheduleParams, arrayLength, minIndicesPerJobCount); } The first line creates a struct containing the scheduling parameters. When creating it you need to set a pointer to the data which will be copied to the jobs. The reason this is a pointer is that the native code which uses it does not know about the type. You also need to pass it a pointer to the JobReflectionData created by calling: JobsUtility.CreateJobReflectionData(typeof(T), JobType.ParallelFor, (ExecuteJobFunction)Execute); JobReflection stores information about the struct with the data for the job, such as which NativeContainers it has and how they need to be patched when scheduling a job. It lives on the native side of the engine and the managed code only has access to it though pointers without any information about what the type is. When creating JobReflectionData you need to specify the type of the struct implementing the job, the JobType and the method which will be called to execute the job. The JobReflectionData does not depend on the data in the struct you schedule, only its type, so it should only be created once for all jobs implementing the same interface. There are currently only two job types, Single and ParallelFor . Single means the job will only get a single call, ParallelFor means there will be multiple calls to process it; where each call is restricted to a subset of the range of indices to process. Which job type you choose affects which schedule function you are allowed to call. The third parameter of JobsUtility.JobScheduleParameters is the JobHandle that the scheduled job should depend on. The final parameter is the schedule mode. There are two scheduling modes to choose from, Run and Batched . Batched means one or more jobs will be scheduled to do the processing, while Run means the processing will be done on the main thread before Schedule returns. Once the schedule parameters are created we actually schedule the job. There are three ways to schedule jobs depending on their type: JobHandle Schedule(ref JobScheduleParameters parameters); JobHandle ScheduleParallelFor(ref JobScheduleParameters parameters, int arrayLength, int innerLoopBatchCount); JobHandle ScheduleParallelForTransform(ref JobScheduleParameters parameters, IntPtr transfromAccessArray); Schedule can only be used if the ScheduleParameters are created with JobType.Single , the other two schedule functions require JobType.ParallelFor . The arrayLength and innerLoopBatchCount parameter passed to ScheduleParallelFor are used to determine how many indices the jobs should process and how many indices it should handle in the inner loop (see the section on Execution and JobRanges for more information on the inner loop count). ScheduleParallelForTransform is similar to ScheduleParallelFor, but it also has access to a TransformAccessArray that allows you to modify Transform components on GameObjects . The number of indices and batch size is inferred from the TransformAccessArray. Execution and JobRanges After scheduling the job, Unity will call the entry point you specified directly from the native side. It works in a similar way to how Update is called on MonoBehaviours, but from inside a job instead. You only get one call per job and there is either one job, or one job per worker thread; in the case of ParallelFor. The signature used for Execute is public delegate void ExecuteJobFunction(ref T data, IntPtr additionalPtr, IntPtr bufferRangePatchData, ref JobRanges ranges, int jobIndex); For Single jobs, only the data is needed and you can just do your processing right away, but for ParallelFor jobs it requires some more work before you can start processing indices. We need to split up the indices into a number of sequential sub-sets that each job will process in parallel. This way we do not process the same thing twice and we are sure that everything gets covered. The memory layout will determine the order of indices. The JobRanges contain the batches and indices a ParallelFor job is supposed to process. The indices are split into batches based on the batch size, the batches are evenly distributed between the jobs doing the execution in such a way that each job can iterate over a continuous section of memory. The ParallelFor job should call: JobsUtility.GetWorkStealingRange(ref ranges, jobIndex, out begin, out end) This continues until it returns false , and after calling it process all items with index between begin and end . The reason you get batches of items, rather than the full set of items the job should process, is that Unity will apply work stealing if one job completes before the others. Work stealing in this context means that when one job is done it will look at the other jobs running and see if any of them still have a lot of work left. If it finds a job which is not complete it will steal some of the batches that it has not yet started; to dynamically redistribute the work. Before a ParallelFor job starts processing items it also needs to limit the write access to NativeContainers on the range of items which the job is processing. If it does not do this several jobs can potentially write to the same index which leads to race conditions. The NativeContainers that need to be limited is passed to the job and there is a function to patch them; so they cannot access items outside the correct range. The code to do it looks like this: #if ENABLE_UNITY_COLLECTIONS_CHECKS JobsUtility.PatchBufferMinMaxRanges(bufferRangePatchData, UnsafeUtility.AddressOf(ref jobData), begin, end - begin); #endif Custom NativeContainers When writing jobs, the data communication between jobs is one of the hardest parts to get right. Just using NativeArray is very limiting. Using NativeQueue , NativeHashMap and NativeMultiHashMap and their Concurrent versions solves most scenarios. For the remaining scenarios it is possible to write your own custom NativeContainers. When writing custom containers for thread synchronization it is very important to write correct code. We strongly recommend full test coverage for any new containers you add. As a very simple example of this we will create a NativeCounter that can be incremented in a ParallelFor job through NativeCounter.Concurrent and read in a later job or on the main thread. Let's start with the basic container type: // Mark this struct as a NativeContainer, usually this would be a generic struct for containers, but a counter does not need to be generic // TODO - why does a counter not need to be generic? - explain the argument for this reasoning please. [StructLayout(LayoutKind.Sequential)] [NativeContainer] unsafe public struct NativeCounter { // The actual pointer to the allocated count needs to have restrictions relaxed so jobs can be schedled with this container [NativeDisableUnsafePtrRestriction] int* m_Counter; #if ENABLE_UNITY_COLLECTIONS_CHECKS AtomicSafetyHandle m_Safety; // The dispose sentinel tracks memory leaks. It is a managed type so it is cleared to null when scheduling a job // The job cannot dispose the container, and no one else can dispose it until the job has run, so it is ok to not pass it along // This attribute is required, without it this NativeContainer cannot be passed to a job; since that would give the job access to a managed object [NativeSetClassTypeToNullOnSchedule] DisposeSentinel m_DisposeSentinel; #endif // Keep track of where the memory for this was allocated Allocator m_AllocatorLabel; public NativeCounter(Allocator label) { // This check is redundant since we always use an int that is blittable. // It is here as an example of how to check for type correctness for generic types. #if ENABLE_UNITY_COLLECTIONS_CHECKS if (!UnsafeUtility.IsBlittable<int>()) throw new ArgumentException(string.Format(\"{0} used in NativeQueue<{0}> must be blittable\", typeof(int))); #endif m_AllocatorLabel = label; // Allocate native memory for a single integer m_Counter = (int*)UnsafeUtility.Malloc(UnsafeUtility.SizeOf<int>(), 4, label); // Create a dispose sentinel to track memory leaks. This also creates the AtomicSafetyHandle #if ENABLE_UNITY_COLLECTIONS_CHECKS DisposeSentinel.Create(out m_Safety, out m_DisposeSentinel, 0); #endif // Initialize the count to 0 to avoid uninitialized data Count = 0; } public void Increment() { // Verify that the caller has write permission on this data. // This is the race condition protection, without these checks the AtomicSafetyHandle is useless #if ENABLE_UNITY_COLLECTIONS_CHECKS AtomicSafetyHandle.CheckWriteAndThrow(m_Safety); #endif (*m_Counter)++; } public int Count { get { // Verify that the caller has read permission on this data. // This is the race condition protection, without these checks the AtomicSafetyHandle is useless #if ENABLE_UNITY_COLLECTIONS_CHECKS AtomicSafetyHandle.CheckReadAndThrow(m_Safety); #endif return *m_Counter; } set { // Verify that the caller has write permission on this data. This is the race condition protection, without these checks the AtomicSafetyHandle is useless #if ENABLE_UNITY_COLLECTIONS_CHECKS AtomicSafetyHandle.CheckWriteAndThrow(m_Safety); #endif *m_Counter = value; } } public bool IsCreated { get { return m_Counter != null; } } public void Dispose() { // Let the dispose sentinel know that the data has been freed so it does not report any memory leaks #if ENABLE_UNITY_COLLECTIONS_CHECKS DisposeSentinel.Dispose(m_Safety, ref m_DisposeSentinel); #endif UnsafeUtility.Free(m_Counter, m_AllocatorLabel); m_Counter = null; } } With this we have a simple NativeContainer where we can get, set, and increment the count. This container can be passed to a job, but it has the same restrictions as NativeArray, which means it cannot be passed to a ParallelFor job with write access. The next step is to make it usable in ParallelFor. In order to avoid race conditions we want to make sure no-one else is reading it while the ParallelFor is writing to it. To achieve this we create a separate inner struct called Concurrent that can handle multiple writers, but no readers. We make sure NativeCounter.Concurrent can be assigned to from within a normal NativeCounter, since it is not possible for it to live separately outside a NativeCounter. TODO - why is that? [NativeContainer] // This attribute is what makes it possible to use NativeCounter.Concurrent in a ParallelFor job [NativeContainerIsAtomicWriteOnly] unsafe public struct Concurrent { // Copy of the pointer from the full NativeCounter [NativeDisableUnsafePtrRestriction] int* m_Counter; // Copy of the AtomicSafetyHandle from the full NativeCounter. The dispose sentinel is not copied since this inner struct does not own the memory and is not responsible for freeing it. #if ENABLE_UNITY_COLLECTIONS_CHECKS AtomicSafetyHandle m_Safety; #endif // This is what makes it possible to assign to NativeCounter.Concurrent from NativeCounter public static implicit operator NativeCounter.Concurrent (NativeCounter cnt) { NativeCounter.Concurrent concurrent; #if ENABLE_UNITY_COLLECTIONS_CHECKS AtomicSafetyHandle.CheckWriteAndThrow(cnt.m_Safety); concurrent.m_Safety = cnt.m_Safety; AtomicSafetyHandle.UseSecondaryVersion(ref concurrent.m_Safety); #endif concurrent.m_Counter = cnt.m_Counter; return concurrent; } public void Increment() { // Increment still needs to check for write permissions #if ENABLE_UNITY_COLLECTIONS_CHECKS AtomicSafetyHandle.CheckWriteAndThrow(m_Safety); #endif // The actual increment is implemented with an atomic, since it can be incremented by multiple threads at the same time Interlocked.Increment(ref *m_Counter); } } With this setup we can schedule ParallelFor with write access to a NativeCounter through the inner Concurrent struct, like this: struct CountZeros : IJobParallelFor { [ReadOnly] public NativeArray<int> input; public NativeCounter.Concurrent counter; public void Execute(int i) { if (input[i] == 0) { counter.Increment(); } } } var counter = new NativeCounter(Allocator.Temp); var jobData = new CountZeros(); jobData.input = input; jobData.counter = counter; counter.Count = 0; var handle = jobData.Schedule(input.Length, 8); handle.Complete(); Debug.Log(\"The array countains \" + counter.Count + \" zeros\"); counter.Dispose(); Better cache usage The NativeCounter from the previous section is a working implementation of a counter, but all jobs in the ParallelFor will access the same atomic to increment the value. This is not optimal as it means the same cache line is used by all threads. The way this is generally solved in NativeContainers is to have a local cache per worker thread, which is stored on its own cache line. The [NativeSetThreadIndex] attribute can inject a worker thread index, the index is guaranteed to be unique while accessing the NativeContainer from the ParallelFor jobs. In order to make such an optimization here we need to change a few things. The first thing we need to change is the data layout. For performance reasons we need one full cache line per worker thread, rather than a single int to avoid false sharing . We start by adding a constant for the number of ints on a cache line. public const int IntsPerCacheLine = JobsUtility.CacheLineSize / sizeof(int); Next we change the amount of memory allocated. // One full cache line (integers per cacheline * size of integer) for each potential worker index, JobsUtility.MaxJobThreadCount m_Counter = (int*)UnsafeUtility.Malloc(UnsafeUtility.SizeOf<int>()*IntsPerCacheLine*JobsUtility.MaxJobThreadCount, 4, label); TODO: I'm not sure which example you are referring to when you say: main, non-concurrent, version below (is this an example you used on this page or what you would do if you were not using jobified code/ECS etc. It has potential for confusion.) When accessing the counter from the main, non-concurrent, version there can only be one writer so the increment function is fine with the new memory layout. For get and set of the count we need to loop over all potential worker indices. public int Count { get { // Verify that the caller has read permission on this data. // This is the race condition protection, without these checks the AtomicSafetyHandle is useless #if ENABLE_UNITY_COLLECTIONS_CHECKS AtomicSafetyHandle.CheckReadAndThrow(m_Safety); #endif int count = 0; for (int i = 0; i < JobsUtility.MaxJobThreadCount; ++i) count += m_Counter[IntsPerCacheLine * i]; return count; } set { // Verify that the caller has write permission on this data. // This is the race condition protection, without these checks the AtomicSafetyHandle is useless #if ENABLE_UNITY_COLLECTIONS_CHECKS AtomicSafetyHandle.CheckWriteAndThrow(m_Safety); #endif // Clear all locally cached counts, // set the first one to the required value for (int i = 1; i < JobsUtility.MaxJobThreadCount; ++i) m_Counter[IntsPerCacheLine * i] = 0; *m_Counter = value; } } The final change is the inner Concurrent struct that needs to get the worker index injected into it. Since each worker only runs one job at a time, there is no longer any need to use atomics when only accessing the local count. [NativeContainer] [NativeContainerIsAtomicWriteOnly] // Let the job system know that it should inject the current worker index into this container unsafe public struct Concurrent { [NativeDisableUnsafePtrRestriction] int* m_Counter; #if ENABLE_UNITY_COLLECTIONS_CHECKS AtomicSafetyHandle m_Safety; #endif // The current worker thread index; it must use this exact name since it is injected [NativeSetThreadIndex] int m_ThreadIndex; public static implicit operator NativeCacheCounter.Concurrent (NativeCacheCounter cnt) { NativeCacheCounter.Concurrent concurrent; #if ENABLE_UNITY_COLLECTIONS_CHECKS AtomicSafetyHandle.CheckWriteAndThrow(cnt.m_Safety); concurrent.m_Safety = cnt.m_Safety; AtomicSafetyHandle.UseSecondaryVersion(ref concurrent.m_Safety); #endif concurrent.m_Counter = cnt.m_Counter; concurrent.m_ThreadIndex = 0; return concurrent; } public void Increment() { #if ENABLE_UNITY_COLLECTIONS_CHECKS AtomicSafetyHandle.CheckWriteAndThrow(m_Safety); #endif // No need for atomics any more since we are just incrementing the local count ++m_Counter[IntsPerCacheLine*m_ThreadIndex]; } } Writing the NativeCounter this way significantly reduces the overhead of having multiple threads writing to it. It does, however, come at a price. The cost of getting the count on the main thread has increased significantly since it now needs to check all local caches and sum them up. If you are aware of this and make sure to cache the return values it is usually worth it, but you need to know the limitations of your data structures. So we strongly recommend documenting the performance characteristics. Tests The NativeCounter is not complete, the only thing left is to add tests for it to make sure it is correct and that it does not break in the future. When writing tests you should try to cover as many unusual scenarios as possible. It is also a good idea to add some kind of stress test using jobs to detect race conditions, even if it is unlikely to find all of them. The NativeCounter API is very small so the number of tests required is not huge. Both versions of the counter examples above are available at: /Assets/NativeCounterDemo . The tests for them can be found at: /Assets/NativeCounterDemo/Editor/NativeCounterTests.cs . Available attributes The NativeCounter uses many attributes, but there are a few more available for other types of containers. Here is a list of the available attributes you can use on the NativeContainer struct. NativeContainer - marks a struct as a NativeContainer.Required for all native containers. NativeContainerSupportsMinMaxWriteRestriction - signals that the NativeContainer can restrict its writable ranges to be between a min and max index. This is used when passing the container to an IJobParallelFor to make sure that the job does not write to indices it is not supposed to process. In order to use this the NativeContainer must have the members int m_Length , int m_MinIndex and int m_MaxIndex in that order with no other members between them. The container must also throw an exception for writes outside the min/max range. NativeContainerIsAtomicWriteOnly - signals that the NativeContainer uses atomic writes and no reads. By adding this is is possible to pass the NativeContainer to an IJobParallelFor as writable without restrictions on which indices can be written to. NativeContainerSupportsDeallocateOnJobCompletion - makes the NativeContainer usable with DeallocateOnJobCompletion . In order to use this the NativeContainer must have a single allocation in m_Buffer , an allocator label in m_AllocatorLabel and a dispose sentinel in m_DisposeSentinel . NativeSetThreadIndex - Patches an int with the thread index of the job. In addition to these attributes on the native container struct itself there are a few attributes which can be used on members of the native container. NativeDisableUnsafePtrRestriction - allows the NativeContainer to be passed to a job even though it contains a pointer, which is usually not allowed. NativeSetClassTypeToNullOnSchedule - allows the NativeContainer to be passed to a job even though it contains a managed object. The managed object will be set to null on the copy passed to the job."
  },
  "license/LICENSE.html": {
    "href": "license/LICENSE.html",
    "title": "| Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Unity Companion License (“License”) Software Copyright © 2017-19 Unity Technologies ApS Unity Technologies ApS (“Unity”) grants to you a worldwide, non-exclusive, no-charge, and royalty-free copyright license to reproduce, prepare derivative works of, publicly display, publicly perform, sublicense, and distribute the software that is made available under this License (“Software”), subject to the following terms and conditions: Unity Companion Use Only. Exercise of the license granted herein is limited to exercise for the creation, use, and/or distribution of applications, software, or other content pursuant to a valid Unity content authoring and rendering engine software license (“Engine License”). That means while use of the Software is not limited to use in the software licensed under the Engine License, the Software may not be used for any purpose other than the creation, use, and/or distribution of Engine License-dependent applications, software, or other content. No other exercise of the license granted herein is permitted, and in no event may the Software be used for competitive analysis or to develop a competing product or service. No Modification of Engine License. Neither this License nor any exercise of the license granted herein modifies the Engine License in any way. Ownership & Grant Back to You. 3.1 You own your content. In this License, “derivative works” means derivatives of the Software itself--works derived only from the Software by you under this License (for example, modifying the code of the Software itself to improve its efficacy); “derivative works” of the Software do not include, for example, games, apps, or content that you create using the Software. You keep all right, title, and interest to your own content. 3.2 Unity owns its content. While you keep all right, title, and interest to your own content per the above, as between Unity and you, Unity will own all right, title, and interest to all intellectual property rights (including patent, trademark, and copyright) in the Software and derivative works of the Software, and you hereby assign and agree to assign all such rights in those derivative works to Unity. 3.3 You have a license to those derivative works. Subject to this License, Unity grants to you the same worldwide, non-exclusive, no-charge, and royalty-free copyright license to derivative works of the Software you create as is granted to you for the Software under this License. Trademarks. You are not granted any right or license under this License to use any trademarks, service marks, trade names, products names, or branding of Unity or its affiliates (“Trademarks”). Descriptive uses of Trademarks are permitted; see, for example, Unity’s Branding Usage Guidelines at https://unity3d.com/public-relations/brand . Notices & Third-Party Rights. This License, including the copyright notice associated with the Software, must be provided in all substantial portions of the Software and derivative works thereof (or, if that is impracticable, in any other location where such notices are customarily placed). Further, if the Software is accompanied by a Unity “third-party notices” or similar file, you acknowledge and agree that software identified in that file is governed by those separate license terms. DISCLAIMER, LIMITATION OF LIABILITY. THE SOFTWARE AND ANY DERIVATIVE WORKS THEREOF IS PROVIDED ON AN \"AS IS\" BASIS, AND IS PROVIDED WITHOUT WARRANTY OF ANY KIND, WHETHER EXPRESS OR IMPLIED, INCLUDING ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, AND/OR NONINFRINGEMENT. IN NO EVENT SHALL ANY COPYRIGHT HOLDER OR AUTHOR BE LIABLE FOR ANY CLAIM, DAMAGES (WHETHER DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL, INCLUDING PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, LOSS OF USE, DATA, OR PROFITS, AND BUSINESS INTERRUPTION), OR OTHER LIABILITY WHATSOEVER, WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM OR OUT OF, OR IN CONNECTION WITH, THE SOFTWARE OR ANY DERIVATIVE WORKS THEREOF OR THE USE OF OR OTHER DEALINGS IN SAME, EVEN WHERE ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. USE IS ACCEPTANCE and License Versions. Your receipt and use of the Software constitutes your acceptance of this License and its terms and conditions. Software released by Unity under this License may be modified or updated and the License with it; upon any such modification or update, you will comply with the terms of the updated License for any use of any of the Software under the updated License. Use in Compliance with Law and Termination. Your exercise of the license granted herein will at all times be in compliance with applicable law and will not infringe any proprietary rights (including intellectual property rights); this License will terminate immediately on any breach by you of this License. Severability. If any provision of this License is held to be unenforceable or invalid, that provision will be enforced to the maximum extent possible and the other provisions will remain in full force and effect. Governing Law and Venue. This License is governed by and construed in accordance with the laws of Denmark, except for its conflict of laws rules; the United Nations Convention on Contracts for the International Sale of Goods will not apply. If you reside (or your principal place of business is) within the United States, you and Unity agree to submit to the personal and exclusive jurisdiction of and venue in the state and federal courts located in San Francisco County, California concerning any dispute arising out of this License (“Dispute”). If you reside (or your principal place of business is) outside the United States, you and Unity agree to submit to the personal and exclusive jurisdiction of and venue in the courts located in Copenhagen, Denmark concerning any Dispute."
  },
  "changelog/CHANGELOG.html": {
    "href": "changelog/CHANGELOG.html",
    "title": "Change log | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Change log [0.2.0] - 2019-12-31 This version requires Unity 2019.3 0b6+ New Features Live link UI improvements: It is now possible to select a Live Link compatible build setting, build, and run a Live Link player directly from the UI next to the playbar. Live Link connections currently attached to the editor are now viewable in a dropdown next to the playbar. Entities.ForEach syntax for supplying jobified code in a JobComponentSystem 's OnUpdate method directly by using a lambda (instead of supplying an additional IJobForEach ). Automatically generate authoring components for IComponentData with IL post-processing. Any component data marked with a GenerateAuthoringComponent attribute will generate the corresponding authoring MonoBehaviour with a Convert method. EntityQueryMask has been added, which allows for quick confirmation of if an Entity would be returned by an EntityQuery without filters via EntityQueryMask.Matches(Entity entity) . An EntityQueryMask can be obtained by calling EntityManager.GetEntityQueryMask(EntityQuery query). Unity Entities now supports the Fast Enter playmode which can be enabled in the project settings. It is recommended to be turned on for all dots projects. The UnityEngine component StopConvertToEntity can be used to interrupt ConvertToEntity recursion, and should be preferred over a ConvertToEntity set to \"convert and inject\" for that purpose. EntityDebugger now shows IDs in a separate column, so you can still see them when entities have custom names Entity references in the Entity Inspector have a \"Show\" button which will select the referenced Entity in the Debugger. An ArchetypeChunkIterator can be created by calling GetArchetypeChunkIterator on an EntityQuery . You may run an IJobChunk while bypassing the Jobs API by passing an ArchetypeChunkIterator into IJobChunk.RunWithoutJobs() . The [AlwaysSynchronizeSystem] attribute has been added, which can be applied to a JobComponentSystem to force it to synchronize on all of its dependencies before every update. BoneIndexOffset has been added, which allows the Animation system to communicate a bone index offset to the Hybrid Renderer. Initial support for using Hybrid Components during conversion, see the HybridComponent sample in the StressTests folder. New GameObjectConversionSystem.ForkSettings() that provides a very specialized method for creating a fork of the current conversion settings with a different \"EntityGuid namespace\", which can be used for nested conversions. This is useful for example in net code where multiple root-level variants of the same authoring object need to be created in the destination world. EntityManager LockChunkOrder and UnlockChunkOrder are deprecated. Entity Scenes can be loaded synchronously (during the next streaming system update) by using SceneLoadFlags.BlockOnStreamIn in SceneSystem.LoadParameters . EntityCommandBuffer can now be played back on an EntityEntityTransaction as well as an EntityManager . This allows ECB playback to be invoked from a job (though exclusive access to the EntityManager data is still required for the duration of playback). Fixes Setting ComponentSystemGroup.Enabled to false now calls OnStopRunning() recursively on the group's member systems, not just on the group itself. Updated Properties pacakge to 0.10.3-preview to fix an exception when showing Physics ComponentData in the inspector as well as fix IL2CPP Ahead of Time linker errors for generic virtual function calls. The LocalToParentSystem will no longer write to the LocalToWorld component of entities that have a component with the WriteGroup(typeof(LocalToWorld)) . Entity Debugger styling work better with Pro theme Entity Inspector no longer has runaway indentation Fixed issue where AddSharedComponentData , SetSharedComponentData did not always update SharedComponentOrderVersion . Fixes serialization issue when reading in managed IComponentData containing array types and UnityEngine.Object references. No exception is thrown when re-adding a tag component with EntityQuery . AddComponent<T>(NativeArray<Entity>) now reliably throws an ArgumentException if any of the target entities are invalid. Fixed an issue where the Entity Debugger would not repaint in edit mode Marking a system as [UpdateInGroup(typeof(LateSimulationSystemGroup))] no longer emits a warning about [DisableAutoCreation] . Fixed rendering of chunk info to be compatible with HDRP Changes Moved NativeString code from Unity.Entities to Unity.Collections. Updated dependencies for this package. Significantly improved Entity instantiation performance when running in-Editor. Added support for managed IComponentData types such as class MyComponent : IComponentData {} which allows managed types such as GameObjects or List<>s to be stored in components. Users should use managed components sparingly in production code when possible as these components cannot be used by the Job System or archetype chunk storage and thus will be significantly slower to work with. Refer to the documentation for component data for more details on managed component use, implications and prevention. 'SubSceneStreamingSystem' has been renamed to SceneSectionStreamingSystem and is now internal Deprecated _SceneEntities in SubScene.cs . Please use SceneSystem.LoadAsync / Unload with the respective SceneGUID instead. This API will be removed after 2019-11-22. Updated com.unity.serialization to 0.6.3-preview . The deprecated GetComponentGroup() APIs are now protected and can only be called from inside a System like their GetEntityQuery() successors. All GameObjects with a ConvertToEntity set to \"Convert and Destroy\" will all be processed within the same conversion pass, this allows cross-referencing. Duplicate component adds are always ignored When adding component to single entity via EntityQuery, entity is moved to matching chunk instead of chunk achetype changing. \"Used by Systems\" list skips queries with filters Managed IComponentData no longer require all fields to be non-null after default construction. ISharedComponentData is serialized inline with entity and managed IComponentData . If a shared component references a UnityEngine.Object type, that type is serialized separately in an \"objrefs\" resource asset. EntityManager calls EntityComponentStore via burst delegates for Add / Remove components. EntityComponentStore cannot throw exceptions (since called as burst delegate from main thread.) bool ICustomBootstrap.Initialize(string defaultWorldName) has changed API with no deprecated fallback. It now simply gives you a chance to completely replace the default world initialization by returning true. ICustomBootstrap & DefaultWorldInitialization is now composable like this: class MyCustomBootStrap : ICustomBootstrap { public bool Initialize(string defaultWorldName) { Debug.Log(\"Executing bootstrap\"); var world = new World(\"Custom world\"); World.DefaultGameObjectInjectionWorld = world; var systems = DefaultWorldInitialization.GetAllSystems(WorldSystemFilterFlags.Default); DefaultWorldInitialization.AddSystemsToRootLevelSystemGroups(world, systems); ScriptBehaviourUpdateOrder.UpdatePlayerLoop(world); return true; } } ICustomBootstrap can now be inherited and only the most deepest subclass bootstrap will be executed. DefaultWorldInitialization.GetAllSystems is not affected by bootstrap, it simply returns a list of systems based on the present dlls & attributes. Time is now available per-World, and is a property in a ComponentSystem . It is updated from the UnityEngine.Time during the InitializationSystemGroup of each world. If you need access to time in a sytem that runs in the InitializationSystemGroup , make sure you schedule your system after UpdateWorldTimeSystem . Time is also a limited TimeData struct; if you need access to any of the extended fields available in UnityEngine.Time , access UnityEngine.Time explicitly` Systems are no longer removed from a ComponentSystemGroup if they throw an exception from their OnUpdate . This behavior was more confusing than helpful. Managed IComponentData no longer require implementing the IEquatable<> interface and overriding GetHashCode() . If either function is provided it will be preferred, otherwise the component will be inspected generically for equality. EntityGuid is now constructed from an originating ID, a namespace ID, and a serial, which can be safely extracted from their packed form using new getters. Use a and b fields when wanting to treat this as an opaque struct (the packing may change again in the future, as there are still unused bits remaining). The a/b constructor has been removed, to avoid any ambiguity. Updated com.unity.platforms to 0.1.6-preview . The default Api Compatibility Level should now be .NET Standard 2.0 and a warning is generated when the project uses .NET 4.x . Known Issues Entities requires AssetDatabase V2 for certain new features, we do not provide support for AssetDatabase V1. [0.1.1] - 2019-08-06 New Features EntityManager.SetSharedComponentData(EntityQuery query, T componentData) has been added which lets you efficiently swap a shared component data for a whole query. (Without moving any component data) Upgrade guide The deprecated OnCreateManager and OnDestroyManager are now compilation errors in the NET_DOTS profile as overrides can not be detected reliably (without reflection). To avoid the confusion of \"why is that not being called\", especially when there is no warning issued, this will now be a compilation error. Use OnCreate and OnDestroy instead. Changes Updated default version of burst to 1.1.2 Fixes Fixed potential memory corruption when calling RemoveComponent on a batch of entities that didn't have the component. Fixed an issue where an assert about chunk layout compatibility could be triggered when adding a shared component via EntityManager.AddSharedComponentData (EntityQuery entityQuery, T componentData). Fixed an issue where Entities without any Components would cause UI errors in the Chunk Info view Fixed EntityManager.AddComponent(NativeArray entities, ComponentType componentType) so that it handles duplicate entities in the input NativeArray. Duplicate entities are discarded and the component is added only once. Prior to this fix, an assert would be triggered when checking for chunk layout compatibility. Fixed invalid update path for ComponentType.Create . Auto-update is available in Unity 2019.3 and was removed for previous versions where it would fail (the fallback implementation will work as before). [0.1.0] - 2019-07-30 New Features Added the #UNITY_DISABLE_AUTOMATIC_SYSTEM_BOOTSTRAP_RUNTIME_WORLD and #UNITY_DISABLE_AUTOMATIC_SYSTEM_BOOTSTRAP_EDITOR_WORLD defines which respectively can be used to disable runtime and editor default world generation. Defining #UNITY_DISABLE_AUTOMATIC_SYSTEM_BOOTSTRAP will still disable all default world generation. Allow structural changes to entities (add/remove components, add/destroy entities, etc.) while inside of ForEach lambda functions. This negates the need for using PostUpdateCommands inside of ForEach. EntityCommandBuffer has some additional methods for adding components based on ComponentType , or for adding empty components of a certain type ( <T> ) EntityManagerDiffer & EntityManagerPatcher provides highly optimized diffing & patching functionality. It is used in the editor for providing scene conversion live link. Added support for EntityManager.MoveEntitiesFrom with managed arrays (Object Components). EntityManager.SetArchetype lets you change an entity to a specific archetype. Removing & adding the necessary components with default values. System state components are not allowed to be removed with this method, it throws an exception to avoid accidental system state removal. (Used in incremental live link conversion it made conversion from 100ms -> 40ms for 1000 changed game objects) Entity Debugger's system list now has a string filter field. This makes it easier to find a system by name when you have a lot of systems. Added IComponentData type Asset that will be used by Tiny to convert Editor assets to runtime assets Filled in some <T> holes in the overloads we provide in EntityManager New Entities.WithIncludeAll() that will include in matching all components that are normally ignored by default (currently Prefab and Disabled ) EntityManager.CopyAndReplaceEntitiesFrom has been added it can be used to store & restore a backup of the world for the purposes of general purpose simulation rollback. Upgrade guide WorldDiff has been removed. It has been replaced by EntityManagerDiff & EntityManagerPatch. Renamed EntityGroupManager to EntityQueryManager . Changes EntityArchetype.GetComponentTypes no longer includes Entity in the list of components (it is implied). Behaviour now matches the EntityMangager.GetComponentTypes method. This matches the behavior of the corresponding EntityManager function. EntityCommandBuffer.AddComponent(Entity, ComponentType) no longer fails if the target entity already has the specified component. DestroyEntity(EntityQuery entityQuery) now uses burst internally. Fixes Entity Inspector now shows DynamicBuffer elements in pages of five at a time Resources folder renamed to Styles so as not to add editor assets to built player EntityQueryBuilder.ShallowEquals (used from Entities.ForEach ) no longer boxes and allocs GC Improved error message for unnecessary/invalid UpdateBefore and UpdateAfter Fixed leak in BlobBuilder.CreateBlobAssetReference ComponentSystems are now properly preserved when running the UnityLinker. Note this requires 19.3a10 to work correctly. If your project is not yet using 19.3 you can workaround the issue using the link.xml file. https://docs.unity3d.com/Manual//IL2CPP-BytecodeStripping.html Types that trigger an exception in the TypeManager won't prevent other types from initializing properly. [0.0.12-preview.33] - 2019-05-24 New Features [DisableAutoCreation] can now apply to entire assemblies, which will cause all systems contained within to be excluded from automatic system creation. Useful for test assemblies. Added ComponentSystemGroup.RemoveSystemFromUpdateList() EntityCommandBuffer has commands for adding/removing components, deleting entities and adding shared components based on an EntityQuery and its filter. Not available in the Concurrent version Changes Generic component data types must now be registered in advance. Use [RegisterGenericComponentType] attribute to register each concrete use. e.g. [assembly: RegisterGenericComponentType(typeof(TypeManagerTests.GenericComponent<int>))] Attempting to call Playback() more than once on the same EntityCommandBuffer will now throw an error. Improved error checking for [UpdateInGroup] , [UpdateBefore] , and [UpdateAfter] attributes TypeManager no longer imposes alignment requirements on components containing pointers. Instead, it now throws an exception if you try to serialize a blittable component containing an unmanaged pointer, which suggests different alternatives. Fixes Fixed regression where accessing and destroying a blob asset in a burst job caused an exception Fixed bug where entities with manually specified CompositeScale were not updated by TRSLocalToWorldSystem . Error message when passing in invalid parameters to CreateSystem() is improved. Fixed bug where an exception due to aggressive pointer restrictions could leave the TypeManager in an invalid state SceneBoundingVolume is now generated seperately for each subsection SceneBoundingVolume no longer throws exceptions in conversion flow Fixed regression where calling AddComponent(NativeArray entities, ComponentType componentType) could cause a crash. Fixed bug causing error message to appear in Inspector header when ConvertToEntity component was added to a disabled GameObject. [0.0.12-preview.32] - 2019-05-16 New Features Added BlobBuilder which is a new API to build Blob Assets that does not require preallocating one contiguous block of memory. The BlobAllocator is now marked obsolete. Added versions of IJobForEach that support DynamicBuffer s Due to C# language constraints, these overloads needed different names. The format for these overloads follows the following structure: All job names begin with either IJobForEach or IJobForEachEntity All jobs names are then followed by an underscore _ and a combination of letter corresponding to the parameter types of the job B - IBufferElementData C - IComponentData E - Entity ( IJobForEachWithEntity only) All suffixes for WithEntity jobs begin with E All data types in a suffix are in alphabetical order Here is the complete list of overloads: IJobForEach_C , IJobForEach_CC , IJobForEach_CCC , IJobForEach_CCCC , IJobForEach_CCCCC , IJobForEach_CCCCCC IJobForEach_B , IJobForEach_BB , IJobForEach_BBB , IJobForEach_BBBB , IJobForEach_BBBBB , IJobForEach_BBBBBB IJobForEach_BC , IJobForEach_BCC , IJobForEach_BCCC , IJobForEach_BCCCC , IJobForEach_BCCCCC , IJobForEach_BBC , IJobForEach_BBCC , IJobForEach_BBCCC , IJobForEach_BBCCCC , IJobForEach_BBBC , IJobForEach_BBBCC , IJobForEach_BBBCCC , IJobForEach_BBBCCC , IJobForEach_BBBBC , IJobForEach_BBBBCC , IJobForEach_BBBBBC IJobForEachWithEntity_EB , IJobForEachWithEntity_EBB , IJobForEachWithEntity_EBBB , IJobForEachWithEntity_EBBBB , IJobForEachWithEntity_EBBBBB , IJobForEachWithEntity_EBBBBBB IJobForEachWithEntity_EC , IJobForEachWithEntity_ECC , IJobForEachWithEntity_ECCC , IJobForEachWithEntity_ECCCC , IJobForEachWithEntity_ECCCCC , IJobForEachWithEntity_ECCCCCC IJobForEachWithEntity_BC , IJobForEachWithEntity_BCC , IJobForEachWithEntity_BCCC , IJobForEachWithEntity_BCCCC , IJobForEachWithEntity_BCCCCC , IJobForEachWithEntity_BBC , IJobForEachWithEntity_BBCC , IJobForEachWithEntity_BBCCC , IJobForEachWithEntity_BBCCCC , IJobForEachWithEntity_BBBC , IJobForEachWithEntity_BBBCC , IJobForEachWithEntity_BBBCCC , IJobForEachWithEntity_BBBCCC , IJobForEachWithEntity_BBBBC , IJobForEachWithEntity_BBBBCC , IJobForEachWithEntity_BBBBBC Note that you can still use IJobForEach and IJobForEachWithEntity as before if you're using only IComponentData . EntityManager.SetEnabled API automatically enables & disables an entity or set of entities. If LinkedEntityGroup is present the whole group is enabled / disabled. Inactive game objects automatically get a LinkedEntityGroup added so that EntityManager.SetEnabled works as expected out of the box. Add WithAnyReadOnly and WithAllReadyOnly methods to EntityQueryBuilder to specify queries that filter on components with access type ReadOnly. No longer throw when the same type is in a WithAll and ForEach delegate param for ForEach queries. DynamicBuffer CopyFrom method now supports another DynamicBuffer as a parameter. Fixed cases that would not be handled correctly by the api updater. Upgrade guide Usages of BlobAllocator will need to be changed to use BlobBuilder instead. The API is similar but Allocate now returns the data that can be populated: ref var root = ref builder.ConstructRoot<MyData>(); var floatArray = builder.Allocate(3, ref root.floatArray); floatArray[0] = 0; // root.floatArray[0] can not be used and will throw on access ISharedComponentData with managed fields must implement IEquatable and GetHashCode IComponentData and ISharedComponentData implementing IEquatable must also override GetHashCode Fixes Comparisons of managed objects (e.g. in shared components) now work as expected Prefabs referencing other prefabs are now supported in game object entity conversion process Fixed a regression where ComponentDataProxy was not working correctly on Prefabs due to a ordering issue. Exposed GameObjectConversionDeclarePrefabsGroup for declaring prefab references. (Must happen before any conversion systems run) Inactive game objects are automatically converted to be Disabled entities Disabled components are ignored during conversion process. Behaviour.Enabled has no direct mapping in ECS. It is recommended to Disable whole entities instead Warnings are now issues when asking for a GetPrimaryEntity that is not a game object that is part of the converted group. HasPrimaryEntity can be used to check if the game object is part of the converted group in case that is necessary. Fixed a race condition in EntityCommandBuffer.AddBuffer() and EntityCommandBuffer.SetBuffer() [0.0.12-preview.31] - 2019-05-01 New Features Upgrade guide Serialized entities file format version has changed, Sub Scenes entity caches will require rebuilding. Changes Adding components to entities that already have them is now properly ignored in the cases where no data would be overwritten. That means the inspectable state does not change and thus determinism can still be guaranteed. Restored backwards compatibility for ForEach API directly on ComponentSystem to ease people upgrading to the latest Unity.Entities package on top of Megacity. Rebuilding the entity cache files for sub scenes will now properly request checkout from source control if required. Fixes IJobForEach will only create new entity queries when scheduled, and won't rely on injection anymore. This avoids the creation of useless queries when explicit ones are used to schedule those jobs. Those useless queries could cause systems to keep updating even though the actual queries were empty. APIs changed in the previous version now have better obsolete stubs and upgrade paths. All obsolete APIs requiring manual code changes will now soft warn and continue to work, instead of erroring at compile time. These respective APIs will be removed in a future release after that date. LODGroup conversion now handles renderers being present in a LOD Group in multipe LOD levels correctly Fixed potential memory leak when disposing an EntityCommandBuffer after certain types of playback errors Fixed an issue where chunk utilization histograms weren't properly clipped in EntityDebugger Fixed an issue where tag components were incorrectly shown as subtractive in EntityDebugger ComponentSystem.ShouldRunSystem() exception message now more accurately reports the most likely reason for the error when the system does not exist. Known Issues It might happen that shared component data with managed references is not compared for equality correctly with certain profiles. [0.0.12-preview.30] - 2019-04-05 New Features Script templates have been added to help you create new component types and systems, similar to Unity's built-in template for new MonoBehaviours. Use them via the Assets/Create/ECS menu. Upgrade guide Some APIs have been deprecated in this release: API Deprecation FAQ ** Removed obsolete ComponentSystem.ForEach ** Removed obsolete [Inject] ** Removed obsolete ComponentDataArray ** Removed obsolete SharedComponentDataArray ** Removed obsolete BufferArray ** Removed obsolete EntityArray ** Removed obsolete ComponentGroupArray ScriptBehaviourManager removal The ScriptBehaviourManager class has been removed. ComponentSystem and JobComponentSystem remain as system base classes (with a common ComponentSystemBase class) ComponentSystems have overridable methods OnCreateManager and OnDestroyManager. These have been renamed to OnCreate and OnDestroy. This is NOT handled by the obsolete API updater and will need to be done manually. The old OnCreateManager/OnDestroyManager will continue to work temporarily, but will print a warning if a system contains them. World APIs have been updated as follows: CreateManager, GetOrCreateManager, GetExistingManager, DestroyManager, BehaviourManagers have been renamed to CreateSystem, GetOrCreateSystem, GetExistingSystem, DestroySystem, Systems. These should be handled by the obsolete API updater. EntityManager is no longer accessed via GetExistingManager. There is now a property directly on World: World.EntityManager. This is NOT handled by the obsolete API updater and will need to be done manually. Searching and replacing Manager should locate the right spots. For example, world.GetExistingManager () should become just world.EntityManager. IJobProcessComponentData renamed to IJobForeach This rename unfortunately cannot be handled by the obsolete API updater. A global search and replace of IJobProcessComponentData to IJobForEach should be sufficient. ComponentGroup renamed to EntityQuery ComponentGroup has been renamed to EntityQuery to better represent what it does. All APIs that refer to ComponentGroup have been changed to refer to EntityQuery in their name, e.g. CreateEntityQuery, GetEntityQuery, etc. EntityArchetypeQuery renamed to EntityQueryDesc EntityArchetypeQuery has been renamed to EntityQueryDesc Changes Minimum required Unity version is now 2019.1.0b9 Adding components to entities that already have them is now properly ignored in the cases where no data would be overwritten. UNITY_CSHARP_TINY is now NET_DOTS to match our other NET_* defines Fixes Fixed exception in inspector when Script is missing The presence of chunk components could lead to corruption of the entity remapping during deserialization of SubScene sections. Fix for an issue causing filtering with IJobForEachWithEntity to try to access entities outside of the range of the group it was scheduled with. <!-- Template for version sections ## [0.0.0-preview.0] ### New Features ### Upgrade guide ### Changes ### Fixes ### Known Issues -->"
  },
  "manual/gp_assets.html": {
    "href": "manual/gp_assets.html",
    "title": "Assets and resources | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Assets and resources Synopsis: Considerations for using Unity assets and loading resources in an ECS-based project. Note, this is a placeholder for work that has not been completed yet."
  },
  "manual/gp_animation.html": {
    "href": "manual/gp_animation.html",
    "title": "Animation | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Animation Synopsis: How to use Unity's animation features with ECS. How to optimize animation with ECS. Note, this is a placeholder for work that has not been completed yet."
  },
  "manual/ecs_testing.html": {
    "href": "manual/ecs_testing.html",
    "title": "Testing ECS code | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Testing ECS code Synopsis: Using the Unity test framework with ECS. Tips for testing ECS code effectively."
  },
  "manual/ecs_systems.html": {
    "href": "manual/ecs_systems.html",
    "title": "Systems | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Systems A System , the S in ECS, provides the logic that transforms the component data from its current state to its next state — for example, a system might update the positions of all moving entities by their velocity times the time interval since the previous update. Unity ECS provides a number of different kinds of systems. The main systems that you can implement to transform your entity data are the ComponentSystem and the JobComponentSystem . Both these system types facilitate selecting and iterating over a set of entities based on their associated components. Systems provide event-style callback functions, such as OnCreate() and OnUpdate() that you can implement to run code at the correct time in a system's life cycle. These functions are invoked on the main thread. In a Job Component System, you typically schedule Jobs in the OnUpdate() function. The Jobs themselves run on worker threads. In general, Job Component Systems provide the best performance since they take advantage of multiple CPU cores. Performance can be improved even more when your Jobs are compiled by the Burst compiler. Unity ECS automatically discovers system classes in your project and instantiates them at runtime. Systems are organized within a World by group. You can control which group a system is added to and the order of that system within the group using system attributes . By default, all systems are added to the Simulation System Group of the default world in a deterministic, but unspecified, order. You can disable automatic creation using a system attribute. A system's update loop is driven by its parent Component System Group . A Component System Group is, itself, a specialized kind of system that is responsible for updating its child systems. You can view the runtime system configuration using the Entity Debugger window (menu: Window > Analysis > Entity Debugger ). System event functions You can implement a set of system lifecycle event functions when you implement a system. Unity ECS invokes these functions in the following order: OnCreate() -- called when the system is created. OnStartRunning() -- before the first OnUpdate and whenever the system resumes running. OnUpdate() -- every frame as long as the system has work to do (see ShouldRunSystem()) and the system is Enabled. Note that the OnUpdate function is defined in the subclasses of ComponentSystemBase; each type of system class can define its own update behavior. OnStopRunning() -- whenever the system stops updating because it finds no entities matching its queries. Also called before OnDestroy. OnDestroy() -- when the system is destroyed. All of these functions are executed on the main thread. Note that you can schedule Jobs from the OnUpdate(JobHandle) function of a JobComponentSystem to perform work on background threads. System types Unity ECS provides several types of systems. In general, the systems you write to implement your game behaviour and data transformation will extend either ComponentSystem or JobComponentSystem . The other system classes have specialized purposes; you typically use existing instances of the Entity Command Buffer System and Component System Group classes. Component Systems -- Implement a ComponentSystem subclass for systems that perform their work on the main thread or that use Jobs not specifically optimized for ECS. Job Component Systems -- Implement a JobComponentSystem subclass for systems that perform their work using IJobForEach or IJobChunk . Entity Command Buffer Systems -- provides EntityCommandBuffer instances for other systems. Each of the default system groups maintains an Entity Command Buffer System at the beginning and end of its list of child systems. Component System Groups -- provides nested organization and update order for other systems. Unity ECS creates several Component System Groups by default."
  },
  "manual/component_data.html": {
    "href": "manual/component_data.html",
    "title": "General purpose components | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "General purpose components ComponentData in Unity (also known as a component in standard ECS terms) is a struct that contains only the instance data for an entity . ComponentData should not contain methods beyond utility functions for accessing the data in the struct. All game logic and behaviour should be implemented in systems. To put this in terms of the old Unity system, this is somewhat similar to an old Component class, but one that only contains variables . The Unity ECS API provides an interface called IComponentData that you can implement in your code to declare a general-purpose component type. IComponentData Traditional Unity components (including MonoBehaviour ) are object-oriented classes which contain data and methods for behavior. IComponentData is a pure ECS-style component, meaning that it defines no behavior, only data. IComponentData should be implemented as struct rather than a class, meaning that it is copied by value instead of by reference by default. You will usually need to use the following pattern to modify data: var transform = group.transform[index]; // Read transform.heading = playerInput.move; // Modify transform.position += deltaTime * playerInput.move * settings.playerMoveSpeed; group.transform[index] = transform; // Write IComponentData structs may not contain references to managed objects. Since ComponentData lives in simple non-garbage-collected tracked chunk memory allowing for many performance advantages. Managed IComponentData To help porting existing code over to ECS in a piecemeal fashion, interoperating with managed data not suitable in ISharedComponentData or when first prototyping what your data layout will look like, it may be helpful to use a managed IComponentData (that is, IComponentData declared using a class rather than struct ). These components are used the same way as value type IComponentData however internally are handled in a much different (and slower) way. Users who do not need managed component support should define UNITY_DISABLE_MANAGED_COMPONENTS in their Project Settings -> Player -> Scripting Define Symbols to prevent accidental usage. By nature of being a managed type, managed IComponentData have the following performance drawbacks compared to valuetype IComponentData : Cannot be used with the Burst Compiler Cannot be used in Job structs Cannot use chunk memory Require garbage collection Users should try to limit the number of managed components, preferring blittable types as much as possible. Managed IComponentData must implement the IEquatable<T> interface and override for Object.GetHashCode() . As well, for serialization purposes, managed components must be default constructible. Since managed components are by their nature not blittable, these components are stored in a managed C# array known indirectly by each ArchetypeChunk and are indexed to by Entity . You must set the value of the component on the main thread using either the EntityManager or EntityCommandBuffer . Being a reference type, you may change value of the component without moving entities across chunks unlike ISharedComponentData and thus does not create a sync-point. However while logically stored separate from value-type components, managed components still contribute to an entity's EntityArchetype definition. As such, adding a new managed component to an entity will still cause a new archetype to be created (if a matching archetype doesn't exist already) and the entity to be moved to a new chunk. See file: /Packages/com.unity.entities/Unity.Entities/IComponentData.cs ."
  },
  "manual/chunk_iteration_job.html": {
    "href": "manual/chunk_iteration_job.html",
    "title": "Using IJobChunk | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Using IJobChunk You can implement IJobChunk inside a JobComponentSystem to iterate through your data by chunk. The JobComponentSystem calls your Execute() function once for each chunk that contains the entities that you want the system to process. You can then process the data inside each chunk, entity by entity. Iterating with IJobChunk requires more code setup than does IJobForEach, but is also more explicit and represents the most direct access to the data, as it is actually stored. Another benefit of using iterating by chunks is that you can check whether an optional component is present in each chunk (with Archetype.Has<T>() ) and process all the entities in the chunk accordingly. The steps involved in implementing an IJobChunk Job include: Identify the entities that you want to process by creating a EntityQuery. Defining the Job struct, including fields for ArchetypeChunkComponentType objects to identifying the types of components the Job directly accesses, specifying whether the Job reads or writes to those components. Instantiating the Job struct and scheduling the Job in the system OnUpdate() function. In the Execute() function, getting the NativeArray instances for the components the Job reads or writes and, finally, iterating over the current chunk to perform the desired work. The ECS samples repository contains a simple HelloCube example that demonstrates how to use IJobChunk. Query for data with a EntityQuery An EntityQuery defines the set of component types that an archetype must contain for the system to process its associated chunks and entities. An archetype can have additional components as well, but it must have at least those defined by the EntityQuery. You can also exclude archetypes that contain specific types of components. For simple queries, you can use the JobComponentSystem.GetEntityQuery() function, passing in the component types: public class RotationSpeedSystem : JobComponentSystem { private EntityQuery m_Query; protected override void OnCreate() { m_Query = GetEntityQuery(ComponentType.ReadOnly<Rotation>(), ComponentType.ReadOnly<RotationSpeed>()); //... } For more complex situations, you can use an EntityQueryDesc. An EntityQueryDesc provides a flexible query mechanism to specify the component types: All = All component types in this array must exist in the archetype Any = At least one of the component types in this array must exist in the archetype None = None of the component types in this array can exist in the archetype For example, the following query includes archetypes containing the RotationQuaternion and RotationSpeed components, but excludes any archetypes containing the Frozen component: protected override void OnCreate() { var queryDescription = new EntityQueryDesc() { None = new ComponentType[] { typeof(Static) }, All = new ComponentType[] { ComponentType.ReadWrite<Rotation>(), ComponentType.ReadOnly<RotationSpeed>() } }; m_Query = GetEntityQuery(queryDescription); } The query uses ComponentType.ReadOnly<T> instead of the simpler typeof expression to designate that the system does not write to RotationSpeed. You can also combine multiple queries by passing an array of EntityQueryDesc objects rather than a single instance. Each query is combined using a logical OR operation. The following example selects an archetypes that contain a RotationQuaternion component or a RotationSpeed component (or both): protected override void OnCreate() { var queryDescription0 = new EntityQueryDesc { All = new ComponentType[] {typeof(Rotation)} }; var queryDescription1 = new EntityQueryDesc { All = new ComponentType[] {typeof(RotationSpeed)} }; m_Query = GetEntityQuery(new EntityQueryDesc[] {queryDescription0, queryDescription1}); } Note: Do not include completely optional components in the EntityQueryDesc. To handle optional components, use the chunk.Has<T>() method inside IJobChunk.Execute() to determine whether the current ArchetypeChunk has the optional component or not. Since all entities within the same chunk have the same components, you only need to check whether an optional component exists once per chunk -- not once per entity. For efficiency and to avoid needless creation of garbage-collected reference types, you should create the EntityQueries for a system in the system’s OnCreate() function and store the result in an instance variable. (In the above examples, the m_Query variable is used for this purpose.) Define the IJobChunk struct The IJobChunk struct defines fields for the data the Job needs when it runs, as well as the Job’s Execute() method. In order to access the component arrays inside the chunks that the system passes to your Execute() method, you must create an ArchetypeChunkComponentType<T> object for each type of component that the Job reads or writes. These objects allow you to get instances of the NativeArrays providing access to the components of an entity. Include all the components referenced in the Job’s EntityQuery that the Execute() method reads or writes. You can also provide ArchetypeChunkComponentType variables for optional component types that you do not include in the EntityQuery. (You must check to make sure that the current chunk has an optional component before trying to access it.) For example, the HelloCube IJobChunk example declares a Job struct that defines ArchetypeChunkComponentType<T> variables for two components, RotationQuaternion and RotationSpeed: [BurstCompile] struct RotationSpeedJob : IJobChunk { public float DeltaTime; public ArchetypeChunkComponentType<Rotation> RotationType; [ReadOnly] public ArchetypeChunkComponentType<RotationSpeed> RotationSpeedType; public void Execute(ArchetypeChunk chunk, int chunkIndex, int firstEntityIndex) { // ... } } The system assigns values to these variables in the OnUpdate() function. The variables are used inside the Execute() method when the ECS framework runs the Job. The Job also uses the Unity delta time to animate the rotation of a 3D object. The example also passes this value to the Execute() method using a struct field. Writing the Execute method The signature of the IJobChunk Execute() method is: public void Execute(ArchetypeChunk chunk, int chunkIndex, int firstEntityIndex) The chunk parameter is a handle to the block of memory containing the entities and components to be processed in this iteration of the Job. Since a chunk can only contain a single archetype, all the entities in a chunk have the same set of components. Use the chunk parameter to get the NativeArray instances for your components: var chunkRotations = chunk.GetNativeArray(RotationType); var chunkRotationSpeeds = chunk.GetNativeArray(RotationSpeedType); These arrays are aligned such that an entity has the same index in all of them. You can then iterate through the component arrays with a normal for loop. Use chunk.Count to get the number of entities stored in the current chunk: var chunkRotations = chunk.GetNativeArray(RotationType); var chunkRotationSpeeds = chunk.GetNativeArray(RotationSpeedType); for (var i = 0; i < chunk.Count; i++) { var rotation = chunkRotations[i]; var rotationSpeed = chunkRotationSpeeds[i]; // Rotate something about its up vector at the speed given by RotationSpeed. chunkRotations[i] = new Rotation { Value = math.mul(math.normalize(rotation.Value), quaternion.AxisAngle(math.up(), rotationSpeed.RadiansPerSecond * DeltaTime)) }; } If you the Any filter in your EntityQueryDesc or have completely optional components that don’t appear in the query at all, you can use the ArchetypeChunk.Has<T>() function to test whether the current chunk contains the one of those components before using it: if (chunk.Has<OptionalComp>(OptionalCompType)) {//...} Note: If you use a concurrent entity command buffer, pass the chunkIndex argument as the jobIndex parameter to the command buffer functions. Skipping chunks with unchanged entities If you only need to update entities when a component value has changed, you can add that component type to the change filter of the EntityQuery used to select the entities and chunks for the job. For example, if you have a system that reads two components and only needs to update a third when one of the first two has changed, you could use a EntityQuery as follows: private EntityQuery m_Query; protected override void OnCreate() { m_Query = GetEntityQuery( ComponentType.ReadWrite<Output>(), ComponentType.ReadOnly<InputA>(), ComponentType.ReadOnly<InputB>()); m_Query.SetChangedVersionFilter( new ComponentType[] { ComponentType.ReadWrite<InputA>(), ComponentType.ReadWrite<InputB>() }); } The EntityQuery change filter supports up to two components. If you want to check more or aren't using a EntityQuery, you can make the check manually. To make this check, compare the chunk’s change version for the component to the system’s LastSystemVersion using the ArchetypeChunk.DidChange() function. If this function returns false, you can skip the current chunk altogether since none of the components of that type have changed since the last time the system ran. The LastSystemVersion from the system must be passed into the Job using a struct field: [BurstCompile] struct UpdateJob : IJobChunk { public ArchetypeChunkComponentType<InputA> InputAType; public ArchetypeChunkComponentType<InputB> InputBType; [ReadOnly] public ArchetypeChunkComponentType<Output> OutputType; public uint LastSystemVersion; public void Execute(ArchetypeChunk chunk, int chunkIndex, int firstEntityIndex) { var inputAChanged = chunk.DidChange(InputAType, LastSystemVersion); var inputBChanged = chunk.DidChange(InputBType, LastSystemVersion); // If neither component changed, skip the current chunk if (!(inputAChanged || inputBChanged)) return; var inputAs = chunk.GetNativeArray(InputAType); var inputBs = chunk.GetNativeArray(InputBType); var outputs = chunk.GetNativeArray(OutputType); for (var i = 0; i < outputs.Length; i++) { outputs[i] = new Output{ Value = inputAs[i].Value + inputBs[i].Value }; } } } As with all the Job struct fields, you must assign its value before scheduling the Job: protected override JobHandle OnUpdate(JobHandle inputDependencies) { var job = new UpdateJob(); job.LastSystemVersion = this.LastSystemVersion; job.InputAType = GetArchetypeChunkComponentType<InputA>(true); job.InputBType = GetArchetypeChunkComponentType<InputB>(true); job.OutputType = GetArchetypeChunkComponentType<Output>(false); return job.Schedule(m_Query, inputDependencies); } Note that for efficiency, the change version applies to whole chunks not individual entities. If a chunk has been accessed by another Job which had the ability to write to that type of component, then the change version for that component is incremented and the DidChange() function returns true. The change version is incremented even if the Job that has declared write access to a component does not actually change the component value. Instantiate and schedule the Job To run an IJobChunk Job, you must create an instance of your Job struct, setting the struct fields, and then schedule the Job. When you do this in the OnUpdate() function of a JobComponentSystem, the system schedules the Job to run every frame. protected override JobHandle OnUpdate(JobHandle inputDependencies) { var job = new RotationSpeedJob() { RotationType = GetArchetypeChunkComponentType<Rotation>(false), RotationSpeedType = GetArchetypeChunkComponentType<RotationSpeed>(true), DeltaTime = Time.DeltaTime }; return job.Schedule(m_Query, inputDependencies); } When you call the GetArchetypeChunkComponentType<T> function to set your component type variables, make sure that you set the isReadOnly to true for components that the Job reads, but doesn’t write. Setting these parameters correctly can have a significant impact on how efficiently the ECS framework can schedule your Jobs. These access mode settings must match their equivalents in both the struct definition, and the EntityQuery. Do not cache the return value of GetArchetypeChunkComponentType<T>() in a system class variable. The function must be called every time the system runs and the updated value passed to the Job."
  },
  "manual/chunk_iteration.html": {
    "href": "manual/chunk_iteration.html",
    "title": "Accessing entity data | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Accessing entity data Iterating over your data is one of the most common tasks you will perform when implementing an ECS system. ECS systems typically process a set of entities, reading data from one or more components, performing a calculation, and then writing the result to another component. In general, the most efficient way to iterate over your entities and components is in a parallelizable Job that processes the components in order. This takes advantage of processing power from all available cores and data locality to avoid CPU cache misses. The ECS API provides a number of ways to accomplish iteration, each with its own performance implications and restrictions. You can iterate over ECS data in the following ways: JobComponentSystem Entities.ForEach — the simplest efficient way to process component data entity by entity. IJobForEach — use a job struct to efficiently iterate over entities. (IJobForEach is equivalent to using Entities.ForEach in a JobComponentSystem, but requires more manually written setup code.) IJobForEachWithEntity — slightly more complex than IJobForEach, giving you access to the entity handle and array index of the entity you are processing. IJobChunk — iterates over the eligible blocks of memory (called a Chunk ) containing matching entities. Your Job Execute() function can iterate over the Elements inside each chunk using a for loop. You can use IJobChunk for more complex situations than supported by IJobForEach, while maintaining maximum efficiency. ComponentSystem — the ComponentSystem offers the Entities.ForEach delegate functions to help iterate over your entities. However, ForEach runs on the main thread, so typically, you should only use ComponentSystem implementations for tasks that must be carried out on the main thread anyway. Manual iteration — if the previous methods are insufficient, you can manually iterate over entities or chunks. For example, you can get a NativeArray containing entities or the chunks of the entities that you want to process and iterate over them using a Job, such as IJobParallelFor. The EntityQuery class provides a way to construct a view of your data that contains only the specific data you need for a given algorithm or process. Many of the iteration methods in the list above use a EntityQuery, either explicitly or internally."
  },
  "license/index.html": {
    "href": "license/index.html",
    "title": "| Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "window.location.replace('LICENSE.html')"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "| Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "This is the documentation for the Scripting APIs of this package."
  },
  "api/Unity.Entities.UniversalDelegates.VVRRRR-6.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVRRRR-6.html",
    "title": "Delegate VVRRRR<T0, T1, T2, T3, T4, T5> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VVRRRR<T0, T1, T2, T3, T4, T5> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVRRRR<T0, T1, T2, T3, T4, T5>(T0 t0, T1 t1, ref T2 t2, ref T3 t3, ref T4 t4, ref T5 t5); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 Type Parameters Name Description T0 T1 T2 T3 T4 T5"
  },
  "api/Unity.Entities.UniversalDelegates.VVRRRIII-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVRRRIII-8.html",
    "title": "Delegate VVRRRIII<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VVRRRIII<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVRRRIII<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, T1 t1, ref T2 t2, ref T3 t3, ref T4 t4, in T5 t5, in T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VVRRRII-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVRRRII-7.html",
    "title": "Delegate VVRRRII<T0, T1, T2, T3, T4, T5, T6> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VVRRRII<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVRRRII<T0, T1, T2, T3, T4, T5, T6>(T0 t0, T1 t1, ref T2 t2, ref T3 t3, ref T4 t4, in T5 t5, in T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.VVRRRI-6.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVRRRI-6.html",
    "title": "Delegate VVRRRI<T0, T1, T2, T3, T4, T5> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VVRRRI<T0, T1, T2, T3, T4, T5> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVRRRI<T0, T1, T2, T3, T4, T5>(T0 t0, T1 t1, ref T2 t2, ref T3 t3, ref T4 t4, in T5 t5); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 Type Parameters Name Description T0 T1 T2 T3 T4 T5"
  },
  "api/Unity.Entities.UniversalDelegates.VVRRR-5.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVRRR-5.html",
    "title": "Delegate VVRRR<T0, T1, T2, T3, T4> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VVRRR<T0, T1, T2, T3, T4> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVRRR<T0, T1, T2, T3, T4>(T0 t0, T1 t1, ref T2 t2, ref T3 t3, ref T4 t4); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 Type Parameters Name Description T0 T1 T2 T3 T4"
  },
  "api/Unity.Entities.UniversalDelegates.VVRRIIII-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVRRIIII-8.html",
    "title": "Delegate VVRRIIII<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VVRRIIII<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVRRIIII<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, T1 t1, ref T2 t2, ref T3 t3, in T4 t4, in T5 t5, in T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VVRRIII-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVRRIII-7.html",
    "title": "Delegate VVRRIII<T0, T1, T2, T3, T4, T5, T6> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VVRRIII<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVRRIII<T0, T1, T2, T3, T4, T5, T6>(T0 t0, T1 t1, ref T2 t2, ref T3 t3, in T4 t4, in T5 t5, in T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.VVRRII-6.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVRRII-6.html",
    "title": "Delegate VVRRII<T0, T1, T2, T3, T4, T5> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VVRRII<T0, T1, T2, T3, T4, T5> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVRRII<T0, T1, T2, T3, T4, T5>(T0 t0, T1 t1, ref T2 t2, ref T3 t3, in T4 t4, in T5 t5); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 Type Parameters Name Description T0 T1 T2 T3 T4 T5"
  },
  "api/Unity.Entities.UniversalDelegates.VRRIII-6.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VRRIII-6.html",
    "title": "Delegate VRRIII<T0, T1, T2, T3, T4, T5> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VRRIII<T0, T1, T2, T3, T4, T5> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VRRIII<T0, T1, T2, T3, T4, T5>(T0 t0, ref T1 t1, ref T2 t2, in T3 t3, in T4 t4, in T5 t5); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 Type Parameters Name Description T0 T1 T2 T3 T4 T5"
  },
  "api/Unity.Entities.UniversalDelegates.VRRII-5.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VRRII-5.html",
    "title": "Delegate VRRII<T0, T1, T2, T3, T4> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VRRII<T0, T1, T2, T3, T4> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VRRII<T0, T1, T2, T3, T4>(T0 t0, ref T1 t1, ref T2 t2, in T3 t3, in T4 t4); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 Type Parameters Name Description T0 T1 T2 T3 T4"
  },
  "api/Unity.Entities.UniversalDelegates.VRRI-4.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VRRI-4.html",
    "title": "Delegate VRRI<T0, T1, T2, T3> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VRRI<T0, T1, T2, T3> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VRRI<T0, T1, T2, T3>(T0 t0, ref T1 t1, ref T2 t2, in T3 t3); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 Type Parameters Name Description T0 T1 T2 T3"
  },
  "api/Unity.Entities.UniversalDelegates.VRR-3.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VRR-3.html",
    "title": "Delegate VRR<T0, T1, T2> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VRR<T0, T1, T2> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VRR<T0, T1, T2>(T0 t0, ref T1 t1, ref T2 t2); Parameters Type Name Description T0 t0 T1 t1 T2 t2 Type Parameters Name Description T0 T1 T2"
  },
  "api/Unity.Entities.UniversalDelegates.VRIIIIII-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VRIIIIII-8.html",
    "title": "Delegate VRIIIIII<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VRIIIIII<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VRIIIIII<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, ref T1 t1, in T2 t2, in T3 t3, in T4 t4, in T5 t5, in T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VRIIIII-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VRIIIII-7.html",
    "title": "Delegate VRIIIII<T0, T1, T2, T3, T4, T5, T6> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VRIIIII<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VRIIIII<T0, T1, T2, T3, T4, T5, T6>(T0 t0, ref T1 t1, in T2 t2, in T3 t3, in T4 t4, in T5 t5, in T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.VRIIII-6.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VRIIII-6.html",
    "title": "Delegate VRIIII<T0, T1, T2, T3, T4, T5> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VRIIII<T0, T1, T2, T3, T4, T5> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VRIIII<T0, T1, T2, T3, T4, T5>(T0 t0, ref T1 t1, in T2 t2, in T3 t3, in T4 t4, in T5 t5); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 Type Parameters Name Description T0 T1 T2 T3 T4 T5"
  },
  "api/Unity.Entities.UniversalDelegates.VRIII-5.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VRIII-5.html",
    "title": "Delegate VRIII<T0, T1, T2, T3, T4> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VRIII<T0, T1, T2, T3, T4> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VRIII<T0, T1, T2, T3, T4>(T0 t0, ref T1 t1, in T2 t2, in T3 t3, in T4 t4); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 Type Parameters Name Description T0 T1 T2 T3 T4"
  },
  "api/Unity.Entities.UniversalDelegates.RRRRRR-6.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RRRRRR-6.html",
    "title": "Delegate RRRRRR<T0, T1, T2, T3, T4, T5> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate RRRRRR<T0, T1, T2, T3, T4, T5> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RRRRRR<T0, T1, T2, T3, T4, T5>(ref T0 t0, ref T1 t1, ref T2 t2, ref T3 t3, ref T4 t4, ref T5 t5); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 Type Parameters Name Description T0 T1 T2 T3 T4 T5"
  },
  "api/Unity.Entities.UniversalDelegates.RRRRRIII-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RRRRRIII-8.html",
    "title": "Delegate RRRRRIII<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate RRRRRIII<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RRRRRIII<T0, T1, T2, T3, T4, T5, T6, T7>(ref T0 t0, ref T1 t1, ref T2 t2, ref T3 t3, ref T4 t4, in T5 t5, in T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.RRRRRII-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RRRRRII-7.html",
    "title": "Delegate RRRRRII<T0, T1, T2, T3, T4, T5, T6> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate RRRRRII<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RRRRRII<T0, T1, T2, T3, T4, T5, T6>(ref T0 t0, ref T1 t1, ref T2 t2, ref T3 t3, ref T4 t4, in T5 t5, in T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.RRRRRI-6.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RRRRRI-6.html",
    "title": "Delegate RRRRRI<T0, T1, T2, T3, T4, T5> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate RRRRRI<T0, T1, T2, T3, T4, T5> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RRRRRI<T0, T1, T2, T3, T4, T5>(ref T0 t0, ref T1 t1, ref T2 t2, ref T3 t3, ref T4 t4, in T5 t5); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 Type Parameters Name Description T0 T1 T2 T3 T4 T5"
  },
  "api/Unity.Entities.UniversalDelegates.RRRRR-5.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RRRRR-5.html",
    "title": "Delegate RRRRR<T0, T1, T2, T3, T4> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate RRRRR<T0, T1, T2, T3, T4> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RRRRR<T0, T1, T2, T3, T4>(ref T0 t0, ref T1 t1, ref T2 t2, ref T3 t3, ref T4 t4); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 Type Parameters Name Description T0 T1 T2 T3 T4"
  },
  "api/Unity.Entities.UniversalDelegates.RRRRIIII-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RRRRIIII-8.html",
    "title": "Delegate RRRRIIII<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate RRRRIIII<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RRRRIIII<T0, T1, T2, T3, T4, T5, T6, T7>(ref T0 t0, ref T1 t1, ref T2 t2, ref T3 t3, in T4 t4, in T5 t5, in T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.RRRRIII-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RRRRIII-7.html",
    "title": "Delegate RRRRIII<T0, T1, T2, T3, T4, T5, T6> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate RRRRIII<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RRRRIII<T0, T1, T2, T3, T4, T5, T6>(ref T0 t0, ref T1 t1, ref T2 t2, ref T3 t3, in T4 t4, in T5 t5, in T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.RRRRII-6.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RRRRII-6.html",
    "title": "Delegate RRRRII<T0, T1, T2, T3, T4, T5> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate RRRRII<T0, T1, T2, T3, T4, T5> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RRRRII<T0, T1, T2, T3, T4, T5>(ref T0 t0, ref T1 t1, ref T2 t2, ref T3 t3, in T4 t4, in T5 t5); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 Type Parameters Name Description T0 T1 T2 T3 T4 T5"
  },
  "api/Unity.Transforms.Static.html": {
    "href": "api/Unity.Transforms.Static.html",
    "title": "Struct Static | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct Static When added, TransformSystem will process transform compomnnts once to update LocalToWorld. Once that is resolved, the Frozen component will be added and LocalToWorld will no longer be updated. Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct Static : IComponentData"
  },
  "api/Unity.Transforms.ScalePivotTranslation.html": {
    "href": "api/Unity.Transforms.ScalePivotTranslation.html",
    "title": "Struct ScalePivotTranslation | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct ScalePivotTranslation Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] [WriteGroup(typeof(CompositeScale))] public struct ScalePivotTranslation : IComponentData Fields Value Declaration public float3 Value Field Value Type Description float3"
  },
  "api/Unity.Transforms.ScalePivot.html": {
    "href": "api/Unity.Transforms.ScalePivot.html",
    "title": "Struct ScalePivot | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct ScalePivot Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] [WriteGroup(typeof(CompositeScale))] public struct ScalePivot : IComponentData Fields Value Declaration public float3 Value Field Value Type Description float3"
  },
  "api/Unity.Transforms.Scale.html": {
    "href": "api/Unity.Transforms.Scale.html",
    "title": "Struct Scale | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct Scale Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] [WriteGroup(typeof(LocalToWorld))] [WriteGroup(typeof(LocalToParent))] [WriteGroup(typeof(CompositeScale))] [WriteGroup(typeof(ParentScaleInverse))] public struct Scale : IComponentData Fields Value Declaration public float Value Field Value Type Description Single"
  },
  "api/Unity.Entities.Serialization.BinaryWriterExtensions.html": {
    "href": "api/Unity.Entities.Serialization.BinaryWriterExtensions.html",
    "title": "Class BinaryWriterExtensions | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class BinaryWriterExtensions Inheritance Object BinaryWriterExtensions Namespace : Unity.Entities.Serialization <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class BinaryWriterExtensions Methods Write(BinaryWriter, Byte) Declaration public static void Write(this BinaryWriter writer, byte value) Parameters Type Name Description BinaryWriter writer Byte value Write(BinaryWriter, Byte[]) Declaration public static void Write(this BinaryWriter writer, byte[] bytes) Parameters Type Name Description BinaryWriter writer Byte [] bytes Write(BinaryWriter, Int32) Declaration public static void Write(this BinaryWriter writer, int value) Parameters Type Name Description BinaryWriter writer Int32 value Write(BinaryWriter, UInt64) Declaration public static void Write(this BinaryWriter writer, ulong value) Parameters Type Name Description BinaryWriter writer UInt64 value WriteArray<T>(BinaryWriter, NativeArray<T>) Declaration public static void WriteArray<T>(this BinaryWriter writer, NativeArray<T> data) where T : struct Parameters Type Name Description BinaryWriter writer NativeArray <T> data Type Parameters Name Description T WriteList<T>(BinaryWriter, NativeList<T>) Declaration public static void WriteList<T>(this BinaryWriter writer, NativeList<T> data) where T : struct Parameters Type Name Description BinaryWriter writer NativeList <T> data Type Parameters Name Description T"
  },
  "api/Unity.Entities.Serialization.BinaryWriter.html": {
    "href": "api/Unity.Entities.Serialization.BinaryWriter.html",
    "title": "Interface BinaryWriter | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Interface BinaryWriter Namespace : Unity.Entities.Serialization <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface BinaryWriter : IDisposable Methods WriteBytes(Void*, Int32) Declaration void WriteBytes(void *data, int bytes) Parameters Type Name Description Void * data Int32 bytes Extension Methods BlobAssetSerializeExtensions.Write<T>(BinaryWriter, BlobAssetReference<T>) BinaryWriterExtensions.Write(BinaryWriter, Byte) BinaryWriterExtensions.Write(BinaryWriter, Int32) BinaryWriterExtensions.Write(BinaryWriter, UInt64) BinaryWriterExtensions.Write(BinaryWriter, Byte[]) BinaryWriterExtensions.WriteArray<T>(BinaryWriter, NativeArray<T>) BinaryWriterExtensions.WriteList<T>(BinaryWriter, NativeList<T>)"
  },
  "api/Unity.Entities.Serialization.BinaryReaderExtensions.html": {
    "href": "api/Unity.Entities.Serialization.BinaryReaderExtensions.html",
    "title": "Class BinaryReaderExtensions | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class BinaryReaderExtensions Inheritance Object BinaryReaderExtensions Namespace : Unity.Entities.Serialization <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class BinaryReaderExtensions Methods ReadArray<T>(BinaryReader, NativeArray<T>, Int32) Declaration public static void ReadArray<T>(this BinaryReader reader, NativeArray<T> elements, int count) where T : struct Parameters Type Name Description BinaryReader reader NativeArray <T> elements Int32 count Type Parameters Name Description T ReadByte(BinaryReader) Declaration public static byte ReadByte(this BinaryReader reader) Parameters Type Name Description BinaryReader reader Returns Type Description Byte ReadBytes(BinaryReader, NativeArray<Byte>, Int32, Int32) Declaration public static void ReadBytes(this BinaryReader writer, NativeArray<byte> elements, int count, int offset = 0) Parameters Type Name Description BinaryReader writer NativeArray < Byte > elements Int32 count Int32 offset ReadInt(BinaryReader) Declaration public static int ReadInt(this BinaryReader reader) Parameters Type Name Description BinaryReader reader Returns Type Description Int32 ReadULong(BinaryReader) Declaration public static ulong ReadULong(this BinaryReader reader) Parameters Type Name Description BinaryReader reader Returns Type Description UInt64"
  },
  "api/Unity.Build.Common.html": {
    "href": "api/Unity.Build.Common.html",
    "title": "Namespace Unity.Build.Common | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Namespace Unity.Build.Common Classes BuildArtifactDesktop BuildSettingsExtensions BuildStepApplyPlayerSettings BuildStepBuildClassicLiveLink BuildStepExtensions ClassicBuildProfile ClassicScriptingSettings GeneralSettings GraphicsSettings OutputBuildDirectory Overrides the default output directory of Builds/NameOfBuildSettingsAsset to an arbitrary location. RunInstanceDesktop RunStepDesktop SceneList TemporaryFileTracker"
  },
  "api/Unity.Build.Common.RunInstanceDesktop.html": {
    "href": "api/Unity.Build.Common.RunInstanceDesktop.html",
    "title": "Class RunInstanceDesktop | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class RunInstanceDesktop Inheritance Object RunInstanceDesktop Namespace : Unity.Build.Common <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public sealed class RunInstanceDesktop : IRunInstance, IDisposable Constructors RunInstanceDesktop(Process) Declaration public RunInstanceDesktop(Process process) Parameters Type Name Description Process process Properties IsRunning Declaration public bool IsRunning { get; } Property Value Type Description Boolean Implements IRunInstance.IsRunning Methods Dispose() Declaration public void Dispose()"
  },
  "api/Unity.Build.Common.ClassicScriptingSettings.html": {
    "href": "api/Unity.Build.Common.ClassicScriptingSettings.html",
    "title": "Class ClassicScriptingSettings | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class ClassicScriptingSettings Inheritance Object ClassicScriptingSettings Namespace : Unity.Build.Common <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public sealed class ClassicScriptingSettings : IBuildSettingsComponent Properties Il2CppCompilerConfiguration Declaration public Il2CppCompilerConfiguration Il2CppCompilerConfiguration { get; set; } Property Value Type Description Il2CppCompilerConfiguration ScriptingBackend Declaration public ScriptingImplementation ScriptingBackend { get; set; } Property Value Type Description ScriptingImplementation UseIncrementalGC Declaration public bool UseIncrementalGC { get; set; } Property Value Type Description Boolean"
  },
  "api/Unity.Build.Common.BuildStepApplyPlayerSettings.html": {
    "href": "api/Unity.Build.Common.BuildStepApplyPlayerSettings.html",
    "title": "Class BuildStepApplyPlayerSettings | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class BuildStepApplyPlayerSettings Inheritance Object BuildStep BuildStepApplyPlayerSettings Inherited Members BuildStep.OptionalComponents BuildStep.IsEnabled(BuildContext) BuildStep.HasRequiredComponent(BuildContext, Type) BuildStep.HasRequiredComponent<T>(BuildContext) BuildStep.GetRequiredComponent(BuildContext, Type) BuildStep.GetRequiredComponent<T>(BuildContext) BuildStep.HasOptionalComponent(BuildContext, Type) BuildStep.HasOptionalComponent<T>(BuildContext) BuildStep.GetOptionalComponent(BuildContext, Type) BuildStep.GetOptionalComponent<T>(BuildContext) BuildStep.GetAvailableTypes(Func<Type, Boolean>) BuildStep.Success() BuildStep.Failure(String) Namespace : Unity.Build.Common <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public sealed class BuildStepApplyPlayerSettings : BuildStep, IBuildStep Properties Description Declaration public override string Description { get; } Property Value Type Description String Overrides BuildStep.Description RequiredComponents Declaration public override Type[] RequiredComponents { get; } Property Value Type Description Type [] Overrides BuildStep.RequiredComponents Methods CleanupBuildStep(BuildContext) Declaration public override BuildStepResult CleanupBuildStep(BuildContext context) Parameters Type Name Description BuildContext context Returns Type Description BuildStepResult Overrides BuildStep.CleanupBuildStep(BuildContext) RunBuildStep(BuildContext) Declaration public override BuildStepResult RunBuildStep(BuildContext context) Parameters Type Name Description BuildContext context Returns Type Description BuildStepResult Overrides BuildStep.RunBuildStep(BuildContext) Extension Methods BuildStepExtensions.GetOutputBuildDirectory(BuildStep, BuildContext)"
  },
  "api/Unity.Build.BuildTypeCache.html": {
    "href": "api/Unity.Build.BuildTypeCache.html",
    "title": "Class BuildTypeCache | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class BuildTypeCache Inheritance Object BuildTypeCache Namespace : Unity.Build <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class BuildTypeCache Properties Assemblies The list of assemblies that are being referenced from this BuildTypeCache Declaration public List<Assembly> Assemblies { get; } Property Value Type Description List < Assembly > BaseAssemblies A list of assembly definition assets to use as the root assemblies for this TypeCache. If null, the project's global assemblies will be used. Declaration public AssemblyDefinitionAsset[] BaseAssemblies { get; set; } Property Value Type Description AssemblyDefinitionAsset [] ExcludedAssemblies Declaration public List<string> ExcludedAssemblies { get; set; } Property Value Type Description List < String > PlatformName Declaration public string PlatformName { get; set; } Property Value Type Description String Methods HasAssembly(Assembly) Declaration public bool HasAssembly(Assembly assembly) Parameters Type Name Description Assembly assembly Returns Type Description Boolean HasAssembly(String) Declaration public bool HasAssembly(string assemblyName) Parameters Type Name Description String assemblyName Returns Type Description Boolean HasType(Type) Declaration public bool HasType(Type type) Parameters Type Name Description Type type Returns Type Description Boolean HasType<T>() Declaration public bool HasType<T>() Returns Type Description Boolean Type Parameters Name Description T SetDirty() Declaration public void SetDirty()"
  },
  "api/Unity.Build.BuildStepAttribute.html": {
    "href": "api/Unity.Build.BuildStepAttribute.html",
    "title": "Class BuildStepAttribute | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class BuildStepAttribute Attribute for hiding build steps from the GUI and specifying a display name with only a Type. Inheritance Object Attribute BuildStepAttribute Namespace : Unity.Build <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [AttributeUsage(AttributeTargets.Class)] public class BuildStepAttribute : Attribute, _Attribute Fields category Optional category used to put build step in its own sub menu when selectiong from the dropdown. Declaration public string category Field Value Type Description String description Description name for type. If set, this will be used instead of the class name when selecting new steps in the GUI. Declaration public string description Field Value Type Description String flags Flags for the build step. Declaration public BuildStepAttribute.Flags flags Field Value Type Description BuildStepAttribute.Flags"
  },
  "api/Unity.Build.BuildPipeline.html": {
    "href": "api/Unity.Build.BuildPipeline.html",
    "title": "Class BuildPipeline | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class BuildPipeline Defines a list of IBuildStep to run in order. Inheritance Object ScriptableObjectPropertyContainer < BuildPipeline > BuildPipeline Inherited Members ScriptableObjectPropertyContainer<BuildPipeline>.JsonVisitorRegistration ScriptableObjectPropertyContainer<BuildPipeline>.AssetChanged ScriptableObjectPropertyContainer<BuildPipeline>.CreateInstance(Action<BuildPipeline>) ScriptableObjectPropertyContainer<BuildPipeline>.CreateAsset(String, Action<BuildPipeline>) ScriptableObjectPropertyContainer<BuildPipeline>.LoadAsset(String) ScriptableObjectPropertyContainer<BuildPipeline>.LoadAsset(GUID) ScriptableObjectPropertyContainer<BuildPipeline>.SaveAsset(String) ScriptableObjectPropertyContainer<BuildPipeline>.RestoreAsset() ScriptableObjectPropertyContainer<BuildPipeline>.SerializeToJson() ScriptableObjectPropertyContainer<BuildPipeline>.DeserializeFromJson(ScriptableObjectPropertyContainer<BuildPipeline>, String) ScriptableObjectPropertyContainer<BuildPipeline>.SerializeToPath(String) ScriptableObjectPropertyContainer<BuildPipeline>.DeserializeFromPath(ScriptableObjectPropertyContainer<BuildPipeline>, String) ScriptableObjectPropertyContainer<BuildPipeline>.SerializeToStream(Stream) ScriptableObjectPropertyContainer<BuildPipeline>.DeserializeFromStream(ScriptableObjectPropertyContainer<BuildPipeline>, Stream) ScriptableObjectPropertyContainer<BuildPipeline>.OnBeforeSerialize() ScriptableObjectPropertyContainer<BuildPipeline>.OnAfterDeserialize() ScriptableObjectPropertyContainer<BuildPipeline>.OnEnable() Namespace : Unity.Build <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public sealed class BuildPipeline : ScriptableObjectPropertyContainer<BuildPipeline>, ISerializationCallbackReceiver, IBuildStep Fields AssetExtension File extension for BuildPipeline assets. Declaration public const string AssetExtension = \".buildpipeline\" Field Value Type Description String BuildSteps Declaration public List<IBuildStep> BuildSteps Field Value Type Description List < IBuildStep > RunStep Declaration public IRunStep RunStep Field Value Type Description IRunStep Properties Description Description of this BuildPipeline displayed in build progress reporting. Declaration public string Description { get; } Property Value Type Description String Implements IBuildStep.Description OptionalComponents List of IBuildSettingsComponent derived types that are optional for this BuildPipeline . Declaration public Type[] OptionalComponents { get; } Property Value Type Description Type [] Implements IBuildStep.OptionalComponents RequiredComponents List of IBuildSettingsComponent derived types that are required for this BuildPipeline . Declaration public Type[] RequiredComponents { get; } Property Value Type Description Type [] Implements IBuildStep.RequiredComponents Methods Build(BuildSettings, BuildProgress, Action<BuildContext>) Build this BuildPipeline . Declaration public BuildPipelineResult Build(BuildSettings settings, BuildProgress progress = null, Action<BuildContext> mutator = null) Parameters Type Name Description BuildSettings settings The BuildSettings used for the build. BuildProgress progress Optional build progress that will be displayed when executing the build. Action < BuildContext > mutator Optional mutator that can be used to modify the BuildContext before building. Returns Type Description BuildPipelineResult The result of building this BuildPipeline . CanBuild(BuildSettings, out String) Determine if this BuildPipeline can build. Declaration public bool CanBuild(BuildSettings settings, out string reason) Parameters Type Name Description BuildSettings settings The BuildSettings used for the build. String reason If CanBuild(BuildSettings, out String) returns false , the reason why it fails. Returns Type Description Boolean true if this BuildPipeline can build, otherwise false . CanRun(BuildSettings, out String) Determine if this BuildPipeline can run. Declaration public bool CanRun(BuildSettings settings, out string reason) Parameters Type Name Description BuildSettings settings The BuildSettings used for the build. String reason If CanRun(BuildSettings, out String) returns false , the reason why it fails. Returns Type Description Boolean The result of running this BuildPipeline . CleanupBuildStep(BuildContext) Cleanup the IBuildStep list of this BuildPipeline . Cleanup will only be called for IBuildStep that ran. Declaration public BuildStepResult CleanupBuildStep(BuildContext context) Parameters Type Name Description BuildContext context The BuildContext used by the execution of this BuildPipeline . Returns Type Description BuildStepResult Implements IBuildStep.CleanupBuildStep(BuildContext) IsEnabled(BuildContext) Determine if this BuildPipeline will be executed or not. Declaration public bool IsEnabled(BuildContext context) Parameters Type Name Description BuildContext context The BuildContext used by the execution of this BuildPipeline . Returns Type Description Boolean true if enabled, false otherwise. Implements IBuildStep.IsEnabled(BuildContext) Reset() Declaration protected override void Reset() Overrides Unity.Build.ScriptableObjectPropertyContainer<Unity.Build.BuildPipeline>.Reset() Run(BuildSettings) Run this BuildPipeline . This will attempt to run the build target produced from building this BuildPipeline . Declaration public RunStepResult Run(BuildSettings settings) Parameters Type Name Description BuildSettings settings Returns Type Description RunStepResult The result of running this BuildPipeline . RunBuildStep(BuildContext) Run the IBuildStep list of this BuildPipeline . If a IBuildStep fails, subsequent IBuildStep are not run. Declaration public BuildStepResult RunBuildStep(BuildContext context) Parameters Type Name Description BuildContext context The BuildContext used by the execution of this BuildPipeline . Returns Type Description BuildStepResult The result of the execution of this BuildPipeline . Implements IBuildStep.RunBuildStep(BuildContext) Sanitize() Declaration protected override void Sanitize() Overrides Unity.Build.ScriptableObjectPropertyContainer<Unity.Build.BuildPipeline>.Sanitize()"
  },
  "api/Unity.Build.BuildArtifacts.html": {
    "href": "api/Unity.Build.BuildArtifacts.html",
    "title": "Class BuildArtifacts | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class BuildArtifacts API for managing build artifacts. Inheritance Object BuildArtifacts Namespace : Unity.Build <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class BuildArtifacts Methods GetBuildArtifact(BuildSettings, Type) Get the value of the first IBuildArtifact that is assignable to type Type . Declaration public static IBuildArtifact GetBuildArtifact(BuildSettings settings, Type type) Parameters Type Name Description BuildSettings settings The BuildSettings that was used to store the IBuildArtifact . Type type The type of the IBuildArtifact . Returns Type Description IBuildArtifact The IBuildArtifact if found, null otherwise. GetBuildArtifact<T>(BuildSettings) Get the value of the first IBuildArtifact that is assignable to type T . Declaration public static T GetBuildArtifact<T>(BuildSettings settings) where T : class, IBuildArtifact Parameters Type Name Description BuildSettings settings The BuildSettings that was used to store the IBuildArtifact . Returns Type Description T The IBuildArtifact if found, null otherwise. Type Parameters Name Description T The type of the IBuildArtifact . GetBuildResult(BuildSettings) Get the last BuildPipelineResult from building the BuildSettings specified. Declaration public static BuildPipelineResult GetBuildResult(BuildSettings settings) Parameters Type Name Description BuildSettings settings The BuildSettings that was used to store the IBuildArtifact . Returns Type Description BuildPipelineResult The BuildPipelineResult if found, null otherwise."
  },
  "api/Unity.Transforms.html": {
    "href": "api/Unity.Transforms.html",
    "title": "Namespace Unity.Transforms | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Namespace Unity.Transforms Classes CompositeRotationSystem CompositeScaleSystem CopyInitialTransformFromGameObjectProxy CopyInitialTransformFromGameObjectSystem CopyTransformFromGameObjectProxy CopyTransformFromGameObjectSystem CopyTransformToGameObjectProxy CopyTransformToGameObjectSystem EndFrameCompositeRotationSystem EndFrameCompositeScaleSystem EndFrameLocalToParentSystem EndFrameParentScaleInverseSystem EndFrameParentSystem EndFramePostRotationEulerSystem EndFrameRotationEulerSystem EndFrameTRSToLocalToParentSystem EndFrameTRSToLocalToWorldSystem EndFrameWorldToLocalSystem LocalToParentSystem LocalToWorldProxy NonUniformScaleProxy ParentScaleInverseSystem ParentSystem PostRotationEulerSystem RotationEulerSystem RotationProxy TransformSystemGroup TranslationProxy TRSToLocalToParentSystem TRSToLocalToWorldSystem WorldToLocalSystem Structs BoneIndexOffset Holds the index offset at which the skin matrices of this entity are stored in the buffer containing all skin matrices. Child CompositeRotation CompositeScale CopyInitialTransformFromGameObject Copy Transform from GameObject associated with Entity to TransformMatrix. Once only. Component is removed after copy. CopyTransformFromGameObject Copy Transform from GameObject associated with Entity to TransformMatrix. CopyTransformToGameObject Copy Transform to GameObject associated with Entity from TransformMatrix. Frozen Frozen is added by system when Static is resolved. Signals that LocalToWorld will no longer be updated. Read-only from other systems. User responsible for removing. LocalToParent LocalToWorld NonUniformScale Parent ParentScaleInverse PostRotation PostRotationEulerXYZ PostRotationEulerXZY PostRotationEulerYXZ PostRotationEulerYZX PostRotationEulerZXY PostRotationEulerZYX PreviousParent Rotation RotationEulerXYZ RotationEulerXZY RotationEulerYXZ RotationEulerYZX RotationEulerZXY RotationEulerZYX RotationPivot RotationPivotTranslation Scale ScalePivot ScalePivotTranslation Static When added, TransformSystem will process transform compomnnts once to update LocalToWorld. Once that is resolved, the Frozen component will be added and LocalToWorld will no longer be updated. Translation WorldToLocal"
  },
  "api/Unity.Transforms.WorldToLocalSystem.html": {
    "href": "api/Unity.Transforms.WorldToLocalSystem.html",
    "title": "Class WorldToLocalSystem | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class WorldToLocalSystem Inheritance Object ComponentSystemBase JobComponentSystem WorldToLocalSystem EndFrameWorldToLocalSystem Inherited Members JobComponentSystem.Entities JobComponentSystem.Job JobComponentSystem.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnDestroyManager() ComponentSystemBase.OnCreateManager() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.Update() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetArchetypeChunkComponentType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkComponentTypeDynamic(ComponentType) ComponentSystemBase.GetArchetypeChunkBufferType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkSharedComponentType<T>() ComponentSystemBase.GetArchetypeChunkEntityType() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public abstract class WorldToLocalSystem : JobComponentSystem Methods OnCreate() Declaration protected override void OnCreate() Overrides ComponentSystemBase.OnCreate() OnUpdate(JobHandle) Declaration protected override JobHandle OnUpdate(JobHandle inputDeps) Parameters Type Name Description JobHandle inputDeps Returns Type Description JobHandle Overrides JobComponentSystem.OnUpdate(JobHandle) Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Transforms.WorldToLocal.html": {
    "href": "api/Unity.Transforms.WorldToLocal.html",
    "title": "Struct WorldToLocal | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct WorldToLocal Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] public struct WorldToLocal : IComponentData Fields Value Declaration public float4x4 Value Field Value Type Description float4x4 Properties Forward Declaration public float3 Forward { get; } Property Value Type Description float3 Position Declaration public float3 Position { get; } Property Value Type Description float3 Right Declaration public float3 Right { get; } Property Value Type Description float3 Up Declaration public float3 Up { get; } Property Value Type Description float3"
  },
  "api/Unity.Transforms.TranslationProxy.html": {
    "href": "api/Unity.Transforms.TranslationProxy.html",
    "title": "Class TranslationProxy | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class TranslationProxy Inheritance Object ComponentDataProxyBase ComponentDataProxy < Translation > TranslationProxy Inherited Members ComponentDataProxy<Translation>.ValidateSerializedData(Translation) ComponentDataProxy<Translation>.Value ComponentDataProxyBase.OnEnable() ComponentDataProxyBase.OnDisable() Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class TranslationProxy : ComponentDataProxy<Translation>, ISerializationCallbackReceiver"
  },
  "api/Unity.Transforms.Translation.html": {
    "href": "api/Unity.Transforms.Translation.html",
    "title": "Struct Translation | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct Translation Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] [WriteGroup(typeof(LocalToWorld))] [WriteGroup(typeof(LocalToParent))] public struct Translation : IComponentData Fields Value Declaration public float3 Value Field Value Type Description float3"
  },
  "api/Unity.Transforms.TransformSystemGroup.html": {
    "href": "api/Unity.Transforms.TransformSystemGroup.html",
    "title": "Class TransformSystemGroup | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class TransformSystemGroup Inheritance Object ComponentSystemBase ComponentSystem ComponentSystemGroup TransformSystemGroup Inherited Members ComponentSystemGroup.m_systemsToUpdate ComponentSystemGroup.m_systemsToRemove ComponentSystemGroup.Systems ComponentSystemGroup.AddSystemToUpdateList(ComponentSystemBase) ComponentSystemGroup.RemoveSystemFromUpdateList(ComponentSystemBase) ComponentSystemGroup.SortSystemUpdateList() ComponentSystemGroup.OnStopRunning() ComponentSystemGroup.OnUpdate() ComponentSystem.PostUpdateCommands ComponentSystem.InitEntityQueryCache(Int32) ComponentSystem.Entities ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnCreate() ComponentSystemBase.OnDestroyManager() ComponentSystemBase.OnCreateManager() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.Update() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetArchetypeChunkComponentType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkComponentTypeDynamic(ComponentType) ComponentSystemBase.GetArchetypeChunkBufferType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkSharedComponentType<T>() ComponentSystemBase.GetArchetypeChunkEntityType() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class TransformSystemGroup : ComponentSystemGroup Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Transforms.TRSToLocalToWorldSystem.html": {
    "href": "api/Unity.Transforms.TRSToLocalToWorldSystem.html",
    "title": "Class TRSToLocalToWorldSystem | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class TRSToLocalToWorldSystem Inheritance Object ComponentSystemBase JobComponentSystem TRSToLocalToWorldSystem EndFrameTRSToLocalToWorldSystem Inherited Members JobComponentSystem.Entities JobComponentSystem.Job JobComponentSystem.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnDestroyManager() ComponentSystemBase.OnCreateManager() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.Update() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetArchetypeChunkComponentType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkComponentTypeDynamic(ComponentType) ComponentSystemBase.GetArchetypeChunkBufferType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkSharedComponentType<T>() ComponentSystemBase.GetArchetypeChunkEntityType() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public abstract class TRSToLocalToWorldSystem : JobComponentSystem Methods OnCreate() Declaration protected override void OnCreate() Overrides ComponentSystemBase.OnCreate() OnUpdate(JobHandle) Declaration protected override JobHandle OnUpdate(JobHandle inputDeps) Parameters Type Name Description JobHandle inputDeps Returns Type Description JobHandle Overrides JobComponentSystem.OnUpdate(JobHandle) Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Build.BuildSettings.html": {
    "href": "api/Unity.Build.BuildSettings.html",
    "title": "Class BuildSettings | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class BuildSettings Can stores a set of unique components, which can be inherited or overridden using dependencies. Inheritance Object ScriptableObjectPropertyContainer < BuildSettings > ComponentContainer < BuildSettings , IBuildSettingsComponent > BuildSettings Inherited Members ComponentContainer<BuildSettings, IBuildSettingsComponent>.HasComponent(Type) ComponentContainer<BuildSettings, IBuildSettingsComponent>.HasComponent<T>() ComponentContainer<BuildSettings, IBuildSettingsComponent>.IsComponentInherited(Type) ComponentContainer<BuildSettings, IBuildSettingsComponent>.IsComponentInherited<T>() ComponentContainer<BuildSettings, IBuildSettingsComponent>.IsComponentOverridden(Type) ComponentContainer<BuildSettings, IBuildSettingsComponent>.IsComponentOverridden<T>() ComponentContainer<BuildSettings, IBuildSettingsComponent>.GetComponent(Type) ComponentContainer<BuildSettings, IBuildSettingsComponent>.GetComponent<T>() ComponentContainer<BuildSettings, IBuildSettingsComponent>.TryGetComponent(Type, IBuildSettingsComponent) ComponentContainer<BuildSettings, IBuildSettingsComponent>.TryGetComponent<T>(T) ComponentContainer<BuildSettings, IBuildSettingsComponent>.GetComponents() ComponentContainer<BuildSettings, IBuildSettingsComponent>.SetComponent(Type, IBuildSettingsComponent) ComponentContainer<BuildSettings, IBuildSettingsComponent>.SetComponent<T>(T) ComponentContainer<BuildSettings, IBuildSettingsComponent>.RemoveComponent(Type) ComponentContainer<BuildSettings, IBuildSettingsComponent>.RemoveComponent<T>() ComponentContainer<BuildSettings, IBuildSettingsComponent>.ClearComponents() ComponentContainer<BuildSettings, IBuildSettingsComponent>.VisitComponents(IPropertyVisitor) ComponentContainer<BuildSettings, IBuildSettingsComponent>.AddDependency(ComponentContainer<BuildSettings, IBuildSettingsComponent>) ComponentContainer<BuildSettings, IBuildSettingsComponent>.AddDependencies(ComponentContainer<BuildSettings, IBuildSettingsComponent>[]) ComponentContainer<BuildSettings, IBuildSettingsComponent>.GetDependencies() ComponentContainer<BuildSettings, IBuildSettingsComponent>.RemoveDependency(ComponentContainer<BuildSettings, IBuildSettingsComponent>) ComponentContainer<BuildSettings, IBuildSettingsComponent>.RemoveDependencies(ComponentContainer<BuildSettings, IBuildSettingsComponent>[]) ComponentContainer<BuildSettings, IBuildSettingsComponent>.ClearDependencies() ComponentContainer<BuildSettings, IBuildSettingsComponent>.Reset() ComponentContainer<BuildSettings, IBuildSettingsComponent>.Sanitize() ScriptableObjectPropertyContainer<BuildSettings>.JsonVisitorRegistration ScriptableObjectPropertyContainer<BuildSettings>.AssetChanged ScriptableObjectPropertyContainer<BuildSettings>.Reset() ScriptableObjectPropertyContainer<BuildSettings>.Sanitize() ScriptableObjectPropertyContainer<BuildSettings>.CreateInstance(Action<BuildSettings>) ScriptableObjectPropertyContainer<BuildSettings>.CreateAsset(String, Action<BuildSettings>) ScriptableObjectPropertyContainer<BuildSettings>.LoadAsset(String) ScriptableObjectPropertyContainer<BuildSettings>.LoadAsset(GUID) ScriptableObjectPropertyContainer<BuildSettings>.SaveAsset(String) ScriptableObjectPropertyContainer<BuildSettings>.RestoreAsset() ScriptableObjectPropertyContainer<BuildSettings>.SerializeToJson() ScriptableObjectPropertyContainer<BuildSettings>.DeserializeFromJson(ScriptableObjectPropertyContainer<BuildSettings>, String) ScriptableObjectPropertyContainer<BuildSettings>.SerializeToPath(String) ScriptableObjectPropertyContainer<BuildSettings>.DeserializeFromPath(ScriptableObjectPropertyContainer<BuildSettings>, String) ScriptableObjectPropertyContainer<BuildSettings>.SerializeToStream(Stream) ScriptableObjectPropertyContainer<BuildSettings>.DeserializeFromStream(ScriptableObjectPropertyContainer<BuildSettings>, Stream) ScriptableObjectPropertyContainer<BuildSettings>.OnBeforeSerialize() ScriptableObjectPropertyContainer<BuildSettings>.OnAfterDeserialize() ScriptableObjectPropertyContainer<BuildSettings>.OnEnable() Namespace : Unity.Build <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public sealed class BuildSettings : ComponentContainer<BuildSettings, IBuildSettingsComponent>, ISerializationCallbackReceiver Fields AssetExtension File extension for BuildSettings assets. Declaration public const string AssetExtension = \".buildsettings\" Field Value Type Description String Methods Build() Run the BuildPipeline of this BuildSettings to build the target. Declaration public BuildPipelineResult Build() Returns Type Description BuildPipelineResult The result of the BuildPipeline build. CanBuild(out String) Determine if the BuildPipeline of this BuildSettings can build. Declaration public bool CanBuild(out string reason) Parameters Type Name Description String reason If CanBuild(out String) returns false , the reason why it fails. Returns Type Description Boolean Whether or not the BuildPipeline can build. CanRun(out String) Determine if the BuildPipeline of this BuildSettings can run. Declaration public bool CanRun(out string reason) Parameters Type Name Description String reason If CanRun(out String) returns false , the reason why it fails. Returns Type Description Boolean Whether or not the BuildPipeline can run. GetBuildPipeline() Retrieve the BuildPipeline of this BuildSettings . Declaration public BuildPipeline GetBuildPipeline() Returns Type Description BuildPipeline The BuildPipeline if found, otherwise null . Run() Run the resulting target from building the BuildPipeline of this BuildSettings . Declaration public RunStepResult Run() Returns Type Description RunStepResult Extension Methods BuildSettingsExtensions.GetOutputBuildDirectory(BuildSettings)"
  },
  "api/Unity.Build.BuildPipelineResult.html": {
    "href": "api/Unity.Build.BuildPipelineResult.html",
    "title": "Class BuildPipelineResult | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class BuildPipelineResult Holds the results of the execution of a BuildPipeline . Inheritance Object BuildPipelineResult Namespace : Unity.Build <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class BuildPipelineResult Properties BuildPipeline The BuildPipeline that was run. Declaration public BuildPipeline BuildPipeline { get; } Property Value Type Description BuildPipeline BuildSettings The BuildSettings used throughout the execution of the BuildPipeline . Declaration public BuildSettings BuildSettings { get; } Property Value Type Description BuildSettings BuildStepsResults A list of BuildStepResult collected during the BuildPipeline execution for each IBuildStep . Declaration public List<BuildStepResult> BuildStepsResults { get; } Property Value Type Description List < BuildStepResult > Duration The total duration of the BuildPipeline execution. Declaration public TimeSpan Duration { get; } Property Value Type Description TimeSpan Failed Determine if the execution of the BuildPipeline failed. Declaration public bool Failed { get; } Property Value Type Description Boolean Message The message resulting from the execution of this BuildPipeline . Declaration public string Message { get; } Property Value Type Description String Succeeded Determine if the execution of the BuildPipeline succeeded. Declaration public bool Succeeded { get; } Property Value Type Description Boolean Methods Failure(BuildPipeline, BuildSettings, String) Create a new instance of BuildPipelineResult that represent a failed execution. Declaration public static BuildPipelineResult Failure(BuildPipeline pipeline, BuildSettings settings, string message) Parameters Type Name Description BuildPipeline pipeline BuildSettings settings The BuildSettings used throughout this BuildPipeline execution. String message The failure message. Returns Type Description BuildPipelineResult A new BuildPipelineResult instance. LogResult() Output the log result to developer debug console. Declaration public void LogResult() Success(BuildPipeline, BuildSettings) Create a new instance of BuildPipelineResult that represent a successful execution. Declaration public static BuildPipelineResult Success(BuildPipeline pipeline, BuildSettings settings) Parameters Type Name Description BuildPipeline pipeline BuildSettings settings The BuildSettings used throughout this BuildPipeline execution. Returns Type Description BuildPipelineResult A new BuildPipelineResult instance. ToString() Get the BuildPipelineResult as a string that can be used for logging. Declaration public override string ToString() Returns Type Description String The BuildPipelineResult as a string. Overrides Object.ToString() TryGetBuildStepResult(IBuildStep, out BuildStepResult) Get the BuildStepResult for the specified IBuildStep . Declaration public bool TryGetBuildStepResult(IBuildStep buildStep, out BuildStepResult value) Parameters Type Name Description IBuildStep buildStep The build step to search for the result. BuildStepResult value The BuildStepResult if found, otherwise default( BuildStepResult ) Returns Type Description Boolean true if the IBuildStep was found, otherwise false . Operators Implicit(BuildPipelineResult to Boolean) Implicit conversion to Boolean . Declaration public static implicit operator bool (BuildPipelineResult result) Parameters Type Name Description BuildPipelineResult result Instance of BuildPipelineResult . Returns Type Description Boolean Implicit(BuildPipelineResult to BuildStepResult) Implicit conversion to BuildStepResult . Declaration public static implicit operator BuildStepResult(BuildPipelineResult result) Parameters Type Name Description BuildPipelineResult result Instance of BuildPipelineResult . Returns Type Description BuildStepResult"
  },
  "api/Unity.Build.AssetGuidAttribute.html": {
    "href": "api/Unity.Build.AssetGuidAttribute.html",
    "title": "Class AssetGuidAttribute | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class AssetGuidAttribute Attribute used to make a or be displayed as an asset. Inheritance Object AssetGuidAttribute Namespace : Unity.Build <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field)] public sealed class AssetGuidAttribute : UnityEngine.PropertyAttribute Constructors AssetGuidAttribute(Type) Constructs a new AssetGuidAttribute with the provided derived asset type. Declaration public AssetGuidAttribute(Type type) Parameters Type Name Description Type type A derived asset type. Fields Type The derived asset type. Declaration public readonly Type Type Field Value Type Description Type"
  },
  "api/Unity.Scenes.html": {
    "href": "api/Unity.Scenes.html",
    "title": "Namespace Unity.Scenes | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Namespace Unity.Scenes Classes SceneSystem SubScene Structs SceneSectionBundle SceneSystem.LoadParameters Enums LiveLinkMode SceneSystem.UnloadParameters"
  },
  "api/Unity.Scenes.SubScene.html": {
    "href": "api/Unity.Scenes.SubScene.html",
    "title": "Class SubScene | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class SubScene Inheritance Object SubScene Namespace : Unity.Scenes <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class SubScene : MonoBehaviour Fields AutoLoadScene Declaration public bool AutoLoadScene Field Value Type Description Boolean Properties SceneGUID Declaration public Hash128 SceneGUID { get; } Property Value Type Description Hash128"
  },
  "api/Unity.Entities.Serialization.MemoryBinaryWriter.html": {
    "href": "api/Unity.Entities.Serialization.MemoryBinaryWriter.html",
    "title": "Class MemoryBinaryWriter | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class MemoryBinaryWriter Inheritance Object MemoryBinaryWriter Namespace : Unity.Entities.Serialization <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class MemoryBinaryWriter : BinaryWriter, IDisposable Properties Data Declaration public byte *Data { get; } Property Value Type Description Byte * Length Declaration public int Length { get; } Property Value Type Description Int32 Methods Dispose() Declaration public void Dispose() WriteBytes(Void*, Int32) Declaration public void WriteBytes(void *data, int bytes) Parameters Type Name Description Void * data Int32 bytes Implements BinaryWriter.WriteBytes(Void*, Int32) Extension Methods BlobAssetSerializeExtensions.Write<T>(BinaryWriter, BlobAssetReference<T>) BinaryWriterExtensions.Write(BinaryWriter, Byte) BinaryWriterExtensions.Write(BinaryWriter, Int32) BinaryWriterExtensions.Write(BinaryWriter, UInt64) BinaryWriterExtensions.Write(BinaryWriter, Byte[]) BinaryWriterExtensions.WriteArray<T>(BinaryWriter, NativeArray<T>) BinaryWriterExtensions.WriteList<T>(BinaryWriter, NativeList<T>)"
  },
  "api/Unity.Entities.Serialization.MemoryBinaryReader.html": {
    "href": "api/Unity.Entities.Serialization.MemoryBinaryReader.html",
    "title": "Class MemoryBinaryReader | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class MemoryBinaryReader Inheritance Object MemoryBinaryReader Namespace : Unity.Entities.Serialization <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class MemoryBinaryReader : BinaryReader, IDisposable Constructors MemoryBinaryReader(Byte*) Declaration public MemoryBinaryReader(byte *content) Parameters Type Name Description Byte * content Methods Dispose() Declaration public void Dispose() ReadBytes(Void*, Int32) Declaration public void ReadBytes(void *data, int bytes) Parameters Type Name Description Void * data Int32 bytes Implements BinaryReader.ReadBytes(Void*, Int32) Extension Methods BlobAssetSerializeExtensions.Read<T>(BinaryReader) BinaryReaderExtensions.ReadByte(BinaryReader) BinaryReaderExtensions.ReadInt(BinaryReader) BinaryReaderExtensions.ReadULong(BinaryReader) BinaryReaderExtensions.ReadBytes(BinaryReader, NativeArray<Byte>, Int32, Int32) BinaryReaderExtensions.ReadArray<T>(BinaryReader, NativeArray<T>, Int32)"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVVVVI-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVVVVI-8.html",
    "title": "Delegate VVVVVVVI<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VVVVVVVI<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVVVVI<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVVVV-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVVVV-7.html",
    "title": "Delegate VVVVVVV<T0, T1, T2, T3, T4, T5, T6> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VVVVVVV<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVVVV<T0, T1, T2, T3, T4, T5, T6>(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVVVRR-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVVVRR-8.html",
    "title": "Delegate VVVVVVRR<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VVVVVVRR<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVVVRR<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, ref T6 t6, ref T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVR-5.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVR-5.html",
    "title": "Delegate VVVVR<T0, T1, T2, T3, T4> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VVVVR<T0, T1, T2, T3, T4> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVR<T0, T1, T2, T3, T4>(T0 t0, T1 t1, T2 t2, T3 t3, ref T4 t4); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 Type Parameters Name Description T0 T1 T2 T3 T4"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVIIII-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVIIII-8.html",
    "title": "Delegate VVVVIIII<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VVVVIIII<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVIIII<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, T1 t1, T2 t2, T3 t3, in T4 t4, in T5 t5, in T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVIII-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVIII-7.html",
    "title": "Delegate VVVVIII<T0, T1, T2, T3, T4, T5, T6> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VVVVIII<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVIII<T0, T1, T2, T3, T4, T5, T6>(T0 t0, T1 t1, T2 t2, T3 t3, in T4 t4, in T5 t5, in T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVII-6.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVII-6.html",
    "title": "Delegate VVVVII<T0, T1, T2, T3, T4, T5> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VVVVII<T0, T1, T2, T3, T4, T5> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVII<T0, T1, T2, T3, T4, T5>(T0 t0, T1 t1, T2 t2, T3 t3, in T4 t4, in T5 t5); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 Type Parameters Name Description T0 T1 T2 T3 T4 T5"
  },
  "api/Unity.Entities.EntityQuery.html": {
    "href": "api/Unity.Entities.EntityQuery.html",
    "title": "Class EntityQuery | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class EntityQuery A EntityQuery provides a queryDesc-based view of your component data. Inheritance Object EntityQuery Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class EntityQuery : IDisposable Remarks A EntityQuery defines a view of your data based on a queryDesc for the set of component types that an archetype must contain in order for its chunks and entities to be included in the view. You can also exclude archetypes that contain specific types of components. For simple queriesDesc, you can create a EntityQuery based on an array of component types. The following example defines a EntityQuery that finds all entities with both RotationQuaternion and RotationSpeed components. EntityQuery m_Group = GetEntityQuery(typeof(RotationQuaternion), ComponentType.ReadOnly{RotationSpeed}()); The queryDesc uses ComponentType.ReadOnly instead of the simpler typeof expression to designate that the system does not write to RotationSpeed. Always specify read only when possible, since there are fewer constraints on read access to data, which can help the Job scheduler execute your Jobs more efficiently. For more complex queriesDesc, you can use an EntityQueryDesc instead of a simple list of component types. Use the CreateEntityQuery(ComponentType[]) or GetEntityQuery(ComponentType[]) functions to get a EntityQuery instance. Properties IsEmptyIgnoreFilter Ignore this EntityQuery if it has no entities in any of its archetypes. Declaration public bool IsEmptyIgnoreFilter { get; } Property Value Type Description Boolean True if this EntityQuery has no entities. False if it has 1 or more entities. Methods AddChangedVersionFilter(ComponentType) Declaration public void AddChangedVersionFilter(ComponentType componentType) Parameters Type Name Description ComponentType componentType AddDependency(JobHandle) Adds another job handle to this EntityQuery's dependencies. Declaration public JobHandle AddDependency(JobHandle job) Parameters Type Name Description JobHandle job Returns Type Description JobHandle AddSharedComponentFilter<SharedComponent>(SharedComponent) Declaration public void AddSharedComponentFilter<SharedComponent>(SharedComponent sharedComponent) where SharedComponent : struct, ISharedComponentData Parameters Type Name Description SharedComponent sharedComponent Type Parameters Name Description SharedComponent CalculateChunkCount() Calculates the number of chunks that match this EntityQuery. Declaration public int CalculateChunkCount() Returns Type Description Int32 The number of entities based on the current EntityQuery properties. Remarks The EntityQuery must run the queryDesc and apply any filters to calculate the chunk count. CalculateChunkCountWithoutFiltering() Calculates the number of chunks that match this EntityQuery, ignoring any set filters. Declaration public int CalculateChunkCountWithoutFiltering() Returns Type Description Int32 The number of entities based on the current EntityQuery properties. Remarks The EntityQuery must run the queryDesc to calculate the chunk count. CalculateEntityCount() Calculates the number of entities selected by this EntityQuery. Declaration public int CalculateEntityCount() Returns Type Description Int32 The number of entities based on the current EntityQuery properties. Remarks The EntityQuery must run the queryDesc and apply any filters to calculate the entity count. CalculateEntityCountWithoutFiltering() Calculates the number of entities selected by this EntityQuery, ignoring any set filters. Declaration public int CalculateEntityCountWithoutFiltering() Returns Type Description Int32 The number of entities based on the current EntityQuery properties. Remarks The EntityQuery must run the queryDesc to calculate the entity count. CompareComponents(NativeArray<ComponentType>) Declaration public bool CompareComponents(NativeArray<ComponentType> componentTypes) Parameters Type Name Description NativeArray < ComponentType > componentTypes Returns Type Description Boolean CompareComponents(ComponentType[]) Declaration public bool CompareComponents(ComponentType[] componentTypes) Parameters Type Name Description ComponentType [] componentTypes Returns Type Description Boolean CompareQuery(EntityQueryDesc[]) Declaration public bool CompareQuery(EntityQueryDesc[] queryDesc) Parameters Type Name Description EntityQueryDesc [] queryDesc Returns Type Description Boolean CompleteDependency() Ensures all jobs running on this EntityQuery complete. Declaration public void CompleteDependency() CopyFromComponentDataArray<T>(NativeArray<T>) Declaration public void CopyFromComponentDataArray<T>(NativeArray<T> componentDataArray) where T : struct, IComponentData Parameters Type Name Description NativeArray <T> componentDataArray Type Parameters Name Description T CopyFromComponentDataArray<T>(NativeArray<T>, out JobHandle) Declaration public void CopyFromComponentDataArray<T>(NativeArray<T> componentDataArray, out JobHandle jobhandle) where T : struct, IComponentData Parameters Type Name Description NativeArray <T> componentDataArray JobHandle jobhandle Type Parameters Name Description T CreateArchetypeChunkArray(Allocator) Creates an array with all the chunks in this EntityQuery. Waits for the GatherChunks job to complete here. Declaration public NativeArray<ArchetypeChunk> CreateArchetypeChunkArray(Allocator allocator) Parameters Type Name Description Allocator allocator Allocator to use for the array. Returns Type Description NativeArray < ArchetypeChunk > NativeArray of all the chunks in this ComponentChunkIterator. CreateArchetypeChunkArray(Allocator, out JobHandle) Creates an array with all the chunks in this EntityQuery. Gives the caller a job handle so it can wait for GatherChunks to finish. Declaration public NativeArray<ArchetypeChunk> CreateArchetypeChunkArray(Allocator allocator, out JobHandle jobhandle) Parameters Type Name Description Allocator allocator Allocator to use for the array. JobHandle jobhandle Handle to the GatherChunks job used to fill the output array. Returns Type Description NativeArray < ArchetypeChunk > NativeArray of all the chunks in this ComponentChunkIterator. Dispose() Declaration public void Dispose() GetArchetypeChunkIterator() Gets an ArchetypeChunkIterator which can be used to iterate over every chunk returned by this EntityQuery. Declaration public ArchetypeChunkIterator GetArchetypeChunkIterator() Returns Type Description ArchetypeChunkIterator ArchetypeChunkIterator for this EntityQuery GetCombinedComponentOrderVersion() Declaration public int GetCombinedComponentOrderVersion() Returns Type Description Int32 GetDependency() Combines all dependencies in this EntityQuery into a single JobHandle. Declaration public JobHandle GetDependency() Returns Type Description JobHandle JobHandle that represents the combined dependencies of this EntityQuery GetSingleton<T>() Gets the value of a singleton component. Declaration public T GetSingleton<T>() where T : struct, IComponentData Returns Type Description T A copy of the singleton component. Type Parameters Name Description T The component type. Remarks A singleton component is a component of which only one instance exists in the world and which has been set with SetSingleton<T>(T) . Exceptions Type Condition InvalidOperationException GetSingletonEntity() Declaration public Entity GetSingletonEntity() Returns Type Description Entity HasFilter() Returns if the entity query has a filter applied to it. Declaration public bool HasFilter() Returns Type Description Boolean Returns true if the query has a filter, returns false if the query does not have a filter. ResetFilter() Resets this EntityQuery's filter. Declaration public void ResetFilter() Remarks Removes references to shared component data, if applicable, then resets the filter type to None. SetChangedVersionFilter(ComponentType) Filters out entities in chunks for which the specified component has not changed. Declaration public void SetChangedVersionFilter(ComponentType componentType) Parameters Type Name Description ComponentType componentType ComponentType to mark as changed on this EntityQuery's filter. Remarks Saves a given ComponentType's index in RequiredComponents in this group's Changed filter. SetChangedVersionFilter(ComponentType[]) Declaration public void SetChangedVersionFilter(ComponentType[] componentType) Parameters Type Name Description ComponentType [] componentType SetSharedComponentFilter<SharedComponent1>(SharedComponent1) Filters this EntityQuery so that it only selects entities with shared component values matching the values specified by the sharedComponent1 parameter. Declaration public void SetSharedComponentFilter<SharedComponent1>(SharedComponent1 sharedComponent1) where SharedComponent1 : struct, ISharedComponentData Parameters Type Name Description SharedComponent1 sharedComponent1 The shared component values on which to filter. Type Parameters Name Description SharedComponent1 The type of shared component. (The type must also be one of the types used to create the EntityQuery. SetSharedComponentFilter<SharedComponent1, SharedComponent2>(SharedComponent1, SharedComponent2) Filters this EntityQuery based on the values of two separate shared components. Declaration public void SetSharedComponentFilter<SharedComponent1, SharedComponent2>(SharedComponent1 sharedComponent1, SharedComponent2 sharedComponent2) where SharedComponent1 : struct, ISharedComponentData where SharedComponent2 : struct, ISharedComponentData Parameters Type Name Description SharedComponent1 sharedComponent1 Shared component values on which to filter. SharedComponent2 sharedComponent2 Shared component values on which to filter. Type Parameters Name Description SharedComponent1 The type of shared component. (The type must also be one of the types used to create the EntityQuery. SharedComponent2 The type of shared component. (The type must also be one of the types used to create the EntityQuery. Remarks The filter only selects entities for which both shared component values specified by the sharedComponent1 and sharedComponent2 parameters match. SetSingleton<T>(T) Sets the value of a singleton component. Declaration public void SetSingleton<T>(T value) where T : struct, IComponentData Parameters Type Name Description T value An instance of type T containing the values to set. Type Parameters Name Description T The component type. Remarks For a component to be a singleton, there can be only one instance of that component in a World . The component must be the only component in its archetype and you cannot use the same type of component as a normal component. To create a singleton, create an entity with the singleton component as its only component, and then use SetSingleton() to assign a value. For example, if you had a component defined as: public struct Singlet: IComponentData{ public int Value; } You could create a singleton as follows: var singletonEntity = entityManager.CreateEntity(typeof(Singlet)); var singletonGroup = entityManager.CreateEntityQuery(typeof(Singlet)); singletonGroup.SetSingleton<Singlet>(new Singlet {Value = 1}); You can set and get the singleton value from a EntityQuery or a ComponentSystem. Exceptions Type Condition InvalidOperationException Thrown if more than one instance of this component type exists in the world or the component type appears in more than one archetype. ToComponentDataArray<T>() Declaration public T[] ToComponentDataArray<T>() where T : class, IComponentData Returns Type Description T[] Type Parameters Name Description T ToComponentDataArray<T>(Allocator) Creates a NativeArray containing the components of type T for the selected entities. Declaration public NativeArray<T> ToComponentDataArray<T>(Allocator allocator) where T : struct, IComponentData Parameters Type Name Description Allocator allocator The type of memory to allocate. Returns Type Description NativeArray <T> An array containing the specified component for all the entities selected by the EntityQuery. Type Parameters Name Description T The component type. Exceptions Type Condition InvalidOperationException Thrown if you ask for a component that is not part of the group. ToComponentDataArray<T>(Allocator, out JobHandle) Creates a NativeArray containing the components of type T for the selected entities. Declaration public NativeArray<T> ToComponentDataArray<T>(Allocator allocator, out JobHandle jobhandle) where T : struct, IComponentData Parameters Type Name Description Allocator allocator The type of memory to allocate. JobHandle jobhandle A handle that you can use as a dependency for a Job that uses the NativeArray. Returns Type Description NativeArray <T> An array containing the specified component for all the entities selected by the EntityQuery. Type Parameters Name Description T The component type. ToEntityArray(Allocator) Creates a NativeArray containing the selected entities. Declaration public NativeArray<Entity> ToEntityArray(Allocator allocator) Parameters Type Name Description Allocator allocator The type of memory to allocate. Returns Type Description NativeArray < Entity > An array containing all the entities selected by the EntityQuery. Remarks This version of the function blocks until the Job used to fill the array is complete. ToEntityArray(Allocator, out JobHandle) Creates a NativeArray containing the selected entities. Declaration public NativeArray<Entity> ToEntityArray(Allocator allocator, out JobHandle jobhandle) Parameters Type Name Description Allocator allocator The type of memory to allocate. JobHandle jobhandle A handle that you can use as a dependency for a Job that uses the NativeArray. Returns Type Description NativeArray < Entity > An array containing all the entities selected by the EntityQuery. Extension Methods EntityQueryExtensionsForComponentArray.ToComponentArray<T>(EntityQuery) EntityQueryExtensionsForTransformAccessArray.GetTransformAccessArray(EntityQuery)"
  },
  "api/Unity.Entities.EntityPatcher.html": {
    "href": "api/Unity.Entities.EntityPatcher.html",
    "title": "Class EntityPatcher | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class EntityPatcher Inheritance Object EntityPatcher Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class EntityPatcher Methods ApplyChangeSet(EntityManager, EntityChangeSet) Applies the given change set to the given entity manager. Declaration public static void ApplyChangeSet(EntityManager entityManager, EntityChangeSet changeSet) Parameters Type Name Description EntityManager entityManager The EntityManager to apply the change set to. EntityChangeSet changeSet The EntityChangeSet to apply."
  },
  "api/Unity.Entities.EntityManagerManagedComponentExtensions.html": {
    "href": "api/Unity.Entities.EntityManagerManagedComponentExtensions.html",
    "title": "Class EntityManagerManagedComponentExtensions | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class EntityManagerManagedComponentExtensions Inheritance Object EntityManagerManagedComponentExtensions Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class EntityManagerManagedComponentExtensions Methods AddChunkComponentData<T>(EntityManager, Entity) Adds a chunk component to the specified entity. Declaration public static void AddChunkComponentData<T>(this EntityManager manager, Entity entity) where T : class, IComponentData Parameters Type Name Description EntityManager manager Entity entity The entity. Type Parameters Name Description T The type of component, which must implement IComponentData. Remarks Adding a chunk component to an entity changes that entity's archetype and results in the entity being moved to a different chunk, either one that already has an archetype containing the chunk component or a new chunk. A chunk component is common to all entities in a chunk. You can access a chunk IComponentData instance through either the chunk itself or through an entity stored in that chunk. In either case, getting or setting the component reads or writes the same data. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before adding the component and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. AddChunkComponentData<T>(EntityManager, EntityQuery, T) Adds a component to each of the chunks identified by a EntityQuery and set the component values. Declaration public static void AddChunkComponentData<T>(this EntityManager manager, EntityQuery entityQuery, T componentData) where T : class, IComponentData Parameters Type Name Description EntityManager manager EntityQuery entityQuery The EntityQuery identifying the chunks to modify. T componentData The data to set. Type Parameters Name Description T The type of component, which must implement IComponentData. Remarks This function finds all chunks whose archetype satisfies the EntityQuery and adds the specified component to them. A chunk component is common to all entities in a chunk. You can access a chunk IComponentData instance through either the chunk itself or through an entity stored in that chunk. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before adding the component and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. AddComponentData<T>(EntityManager, Entity, T) Adds a component to an entity and set the value of that component. Declaration public static void AddComponentData<T>(this EntityManager manager, Entity entity, T componentData) where T : class, IComponentData Parameters Type Name Description EntityManager manager Entity entity The entity. T componentData The data to set. Type Parameters Name Description T The type of component. Remarks Adding a component changes an entity's archetype and results in the entity being moved to a different chunk. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before adding the component and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. GetChunkComponentData<T>(EntityManager, ArchetypeChunk) Gets the value of a chunk component. Declaration public static T GetChunkComponentData<T>(this EntityManager manager, ArchetypeChunk chunk) where T : class, IComponentData Parameters Type Name Description EntityManager manager ArchetypeChunk chunk The chunk. Returns Type Description T A struct of type T containing the component value. Type Parameters Name Description T The component type. Remarks A chunk component is common to all entities in a chunk. You can access a chunk IComponentData instance through either the chunk itself or through an entity stored in that chunk. Exceptions Type Condition ArgumentException Thrown if the ArchetypeChunk object is invalid. GetChunkComponentData<T>(EntityManager, Entity) Gets the value of chunk component for the chunk containing the specified entity. Declaration public static T GetChunkComponentData<T>(this EntityManager manager, Entity entity) where T : class, IComponentData Parameters Type Name Description EntityManager manager Entity entity The entity. Returns Type Description T A struct of type T containing the component value. Type Parameters Name Description T The component type. Remarks A chunk component is common to all entities in a chunk. You can access a chunk IComponentData instance through either the chunk itself or through an entity stored in that chunk. GetComponentData<T>(EntityManager, Entity) Gets the value of a component for an entity. Declaration public static T GetComponentData<T>(this EntityManager manager, Entity entity) where T : class, IComponentData Parameters Type Name Description EntityManager manager Entity entity The entity. Returns Type Description T A struct of type T containing the component value. Type Parameters Name Description T The type of component to retrieve. Exceptions Type Condition ArgumentException Thrown if the component type has no fields. SetChunkComponentData<T>(EntityManager, ArchetypeChunk, T) Sets the value of a chunk component. Declaration public static void SetChunkComponentData<T>(this EntityManager manager, ArchetypeChunk chunk, T componentValue) where T : class, IComponentData Parameters Type Name Description EntityManager manager ArchetypeChunk chunk The chunk to modify. T componentValue The component data to set. Type Parameters Name Description T The component type. Remarks A chunk component is common to all entities in a chunk. You can access a chunk IComponentData instance through either the chunk itself or through an entity stored in that chunk. Exceptions Type Condition ArgumentException Thrown if the ArchetypeChunk object is invalid. SetComponentData<T>(EntityManager, Entity, T) Sets the value of a component of an entity. Declaration public static void SetComponentData<T>(this EntityManager manager, Entity entity, T componentData) where T : class, IComponentData Parameters Type Name Description EntityManager manager Entity entity The entity. T componentData The data to set. Type Parameters Name Description T The component type. Exceptions Type Condition ArgumentException Thrown if the component type has no fields."
  },
  "api/Unity.Entities.EntityManagerExtensions.html": {
    "href": "api/Unity.Entities.EntityManagerExtensions.html",
    "title": "Class EntityManagerExtensions | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class EntityManagerExtensions Inheritance Object EntityManagerExtensions Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class EntityManagerExtensions Methods GetComponentObject<T>(EntityManager, Entity) Declaration public static T GetComponentObject<T>(this EntityManager entityManager, Entity entity) where T : Component Parameters Type Name Description EntityManager entityManager Entity entity Returns Type Description T Type Parameters Name Description T Instantiate(EntityManager, GameObject) Declaration public static Entity Instantiate(this EntityManager entityManager, GameObject srcGameObject) Parameters Type Name Description EntityManager entityManager GameObject srcGameObject Returns Type Description Entity Instantiate(EntityManager, GameObject, NativeArray<Entity>) Declaration public static void Instantiate(this EntityManager entityManager, GameObject srcGameObject, NativeArray<Entity> outputEntities) Parameters Type Name Description EntityManager entityManager GameObject srcGameObject NativeArray < Entity > outputEntities"
  },
  "api/Unity.Entities.EntityChanges.html": {
    "href": "api/Unity.Entities.EntityChanges.html",
    "title": "Struct EntityChanges | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct EntityChanges Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct EntityChanges : IDisposable Constructors EntityChanges(EntityChangeSet, EntityChangeSet) Declaration public EntityChanges(EntityChangeSet forwardChangeSet, EntityChangeSet reverseChangeSet) Parameters Type Name Description EntityChangeSet forwardChangeSet EntityChangeSet reverseChangeSet Properties AnyChanges Declaration public bool AnyChanges { get; } Property Value Type Description Boolean ForwardChangeSet Declaration public EntityChangeSet ForwardChangeSet { get; } Property Value Type Description EntityChangeSet HasForwardChangeSet Declaration public bool HasForwardChangeSet { get; } Property Value Type Description Boolean HasReverseChangeSet Declaration public bool HasReverseChangeSet { get; } Property Value Type Description Boolean ReverseChangeSet Declaration public EntityChangeSet ReverseChangeSet { get; } Property Value Type Description EntityChangeSet Methods Dispose() Declaration public void Dispose()"
  },
  "api/Unity.Entities.EntityChangeSet.html": {
    "href": "api/Unity.Entities.EntityChangeSet.html",
    "title": "Struct EntityChangeSet | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct EntityChangeSet An atomic package of changes to entity and component data. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct EntityChangeSet : IDisposable Constructors EntityChangeSet(Int32, Int32, NativeArray<EntityGuid>, NativeArray<ComponentTypeHash>, NativeArray<NativeString64>, NativeArray<PackedComponent>, NativeArray<PackedComponent>, NativeArray<PackedComponentDataChange>, NativeArray<Byte>, NativeArray<EntityReferenceChange>, NativeArray<BlobAssetReferenceChange>, PackedManagedComponentDataChange[], PackedSharedComponentDataChange[], NativeArray<LinkedEntityGroupChange>, NativeArray<LinkedEntityGroupChange>, NativeArray<BlobAssetChange>, NativeArray<UInt64>, NativeArray<Byte>) Declaration public EntityChangeSet(int createdEntityCount, int destroyedEntityCount, NativeArray<EntityGuid> entities, NativeArray<ComponentTypeHash> typeHashes, NativeArray<NativeString64> names, NativeArray<PackedComponent> addComponents, NativeArray<PackedComponent> removeComponents, NativeArray<PackedComponentDataChange> setComponents, NativeArray<byte> componentData, NativeArray<EntityReferenceChange> entityReferenceChanges, NativeArray<BlobAssetReferenceChange> blobAssetReferenceChanges, PackedManagedComponentDataChange[] setManagedComponents, PackedSharedComponentDataChange[] setSharedComponents, NativeArray<LinkedEntityGroupChange> linkedEntityGroupAdditions, NativeArray<LinkedEntityGroupChange> linkedEntityGroupRemovals, NativeArray<BlobAssetChange> createdBlobAssets, NativeArray<ulong> destroyedBlobAssets, NativeArray<byte> blobAssetData) Parameters Type Name Description Int32 createdEntityCount Int32 destroyedEntityCount NativeArray < EntityGuid > entities NativeArray < ComponentTypeHash > typeHashes NativeArray < NativeString64 > names NativeArray < PackedComponent > addComponents NativeArray < PackedComponent > removeComponents NativeArray < PackedComponentDataChange > setComponents NativeArray < Byte > componentData NativeArray < EntityReferenceChange > entityReferenceChanges NativeArray < BlobAssetReferenceChange > blobAssetReferenceChanges PackedManagedComponentDataChange [] setManagedComponents PackedSharedComponentDataChange [] setSharedComponents NativeArray < LinkedEntityGroupChange > linkedEntityGroupAdditions NativeArray < LinkedEntityGroupChange > linkedEntityGroupRemovals NativeArray < BlobAssetChange > createdBlobAssets NativeArray < UInt64 > destroyedBlobAssets NativeArray < Byte > blobAssetData Fields AddComponents A set of all component additions in this change-set. Declaration public readonly NativeArray<PackedComponent> AddComponents Field Value Type Description NativeArray < PackedComponent > BlobAssetData The payload for all blob assets in this change set. Declaration public readonly NativeArray<byte> BlobAssetData Field Value Type Description NativeArray < Byte > BlobAssetReferenceChanges A packed set of all blob asset references to patch. Declaration public readonly NativeArray<BlobAssetReferenceChange> BlobAssetReferenceChanges Field Value Type Description NativeArray < BlobAssetReferenceChange > ComponentData Data payload for all component changes specified in SetComponents Declaration public readonly NativeArray<byte> ComponentData Field Value Type Description NativeArray < Byte > Remarks Data changes are tightly packed. Use the Size to read back. CreatedBlobAssets A set of all blob asset creations in this change set. Declaration public readonly NativeArray<BlobAssetChange> CreatedBlobAssets Field Value Type Description NativeArray < BlobAssetChange > Remarks The BlobAssetChange is used to describe the payload within the BlobAssetData array. CreatedEntityCount Number of entities from the start of Entities that should be considered as created. Declaration public readonly int CreatedEntityCount Field Value Type Description Int32 DestroyedBlobAssets A set of all blob assets destroyed in this change set. Identified by the content hash. Declaration public readonly NativeArray<ulong> DestroyedBlobAssets Field Value Type Description NativeArray < UInt64 > DestroyedEntityCount Number of entities from the end of Entities that should be considered as destroyed. Declaration public readonly int DestroyedEntityCount Field Value Type Description Int32 Entities A packed array of all entities in this change-set. Declaration public readonly NativeArray<EntityGuid> Entities Field Value Type Description NativeArray < EntityGuid > EntityReferenceChanges A packed set of all entity references to patch. Declaration public readonly NativeArray<EntityReferenceChange> EntityReferenceChanges Field Value Type Description NativeArray < EntityReferenceChange > LinkedEntityGroupAdditions A set of all linked entity group additions. Declaration public readonly NativeArray<LinkedEntityGroupChange> LinkedEntityGroupAdditions Field Value Type Description NativeArray < LinkedEntityGroupChange > LinkedEntityGroupRemovals A set of all linked entity group removals. Declaration public readonly NativeArray<LinkedEntityGroupChange> LinkedEntityGroupRemovals Field Value Type Description NativeArray < LinkedEntityGroupChange > Names Names for each entity in this change-set. Declaration public readonly NativeArray<NativeString64> Names Field Value Type Description NativeArray < NativeString64 > RemoveComponents A set of all component removals in this change-set. Declaration public readonly NativeArray<PackedComponent> RemoveComponents Field Value Type Description NativeArray < PackedComponent > SetComponents A set of all component data modifications in this change-set. Declaration public readonly NativeArray<PackedComponentDataChange> SetComponents Field Value Type Description NativeArray < PackedComponentDataChange > SetManagedComponents A set of all managed component data changes. Declaration public readonly PackedManagedComponentDataChange[] SetManagedComponents Field Value Type Description PackedManagedComponentDataChange [] SetSharedComponents A set of all shared component data changes. Declaration public readonly PackedSharedComponentDataChange[] SetSharedComponents Field Value Type Description PackedSharedComponentDataChange [] TypeHashes A packed array of all types in this change-set. Declaration public readonly NativeArray<ComponentTypeHash> TypeHashes Field Value Type Description NativeArray < ComponentTypeHash > Properties HasChanges Declaration public bool HasChanges { get; } Property Value Type Description Boolean IsCreated Returns true if this object is allocated. Declaration public bool IsCreated { get; } Property Value Type Description Boolean Methods Dispose() Declaration public void Dispose()"
  },
  "api/Unity.Entities.UniversalDelegates.VRRIIII-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VRRIIII-7.html",
    "title": "Delegate VRRIIII<T0, T1, T2, T3, T4, T5, T6> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VRRIIII<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VRRIIII<T0, T1, T2, T3, T4, T5, T6>(T0 t0, ref T1 t1, ref T2 t2, in T3 t3, in T4 t4, in T5 t5, in T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.VRII-4.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VRII-4.html",
    "title": "Delegate VRII<T0, T1, T2, T3> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VRII<T0, T1, T2, T3> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VRII<T0, T1, T2, T3>(T0 t0, ref T1 t1, in T2 t2, in T3 t3); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 Type Parameters Name Description T0 T1 T2 T3"
  },
  "api/Unity.Entities.UniversalDelegates.VRI-3.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VRI-3.html",
    "title": "Delegate VRI<T0, T1, T2> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VRI<T0, T1, T2> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VRI<T0, T1, T2>(T0 t0, ref T1 t1, in T2 t2); Parameters Type Name Description T0 t0 T1 t1 T2 t2 Type Parameters Name Description T0 T1 T2"
  },
  "api/Unity.Entities.UniversalDelegates.VR-2.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VR-2.html",
    "title": "Delegate VR<T0, T1> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VR<T0, T1> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VR<T0, T1>(T0 t0, ref T1 t1); Parameters Type Name Description T0 t0 T1 t1 Type Parameters Name Description T0 T1"
  },
  "api/Unity.Entities.UniversalDelegates.VIIIIIII-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VIIIIIII-8.html",
    "title": "Delegate VIIIIIII<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VIIIIIII<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VIIIIIII<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, in T1 t1, in T2 t2, in T3 t3, in T4 t4, in T5 t5, in T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VIIIIII-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VIIIIII-7.html",
    "title": "Delegate VIIIIII<T0, T1, T2, T3, T4, T5, T6> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VIIIIII<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VIIIIII<T0, T1, T2, T3, T4, T5, T6>(T0 t0, in T1 t1, in T2 t2, in T3 t3, in T4 t4, in T5 t5, in T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.VIIIII-6.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VIIIII-6.html",
    "title": "Delegate VIIIII<T0, T1, T2, T3, T4, T5> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VIIIII<T0, T1, T2, T3, T4, T5> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VIIIII<T0, T1, T2, T3, T4, T5>(T0 t0, in T1 t1, in T2 t2, in T3 t3, in T4 t4, in T5 t5); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 Type Parameters Name Description T0 T1 T2 T3 T4 T5"
  },
  "api/Unity.Entities.UniversalDelegates.VIIII-5.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VIIII-5.html",
    "title": "Delegate VIIII<T0, T1, T2, T3, T4> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VIIII<T0, T1, T2, T3, T4> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VIIII<T0, T1, T2, T3, T4>(T0 t0, in T1 t1, in T2 t2, in T3 t3, in T4 t4); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 Type Parameters Name Description T0 T1 T2 T3 T4"
  },
  "api/Unity.Entities.UniversalDelegates.VIII-4.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VIII-4.html",
    "title": "Delegate VIII<T0, T1, T2, T3> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VIII<T0, T1, T2, T3> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VIII<T0, T1, T2, T3>(T0 t0, in T1 t1, in T2 t2, in T3 t3); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 Type Parameters Name Description T0 T1 T2 T3"
  },
  "api/Unity.Entities.UniversalDelegates.RRIIIIII-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RRIIIIII-8.html",
    "title": "Delegate RRIIIIII<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate RRIIIIII<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RRIIIIII<T0, T1, T2, T3, T4, T5, T6, T7>(ref T0 t0, ref T1 t1, in T2 t2, in T3 t3, in T4 t4, in T5 t5, in T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.RRIIIII-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RRIIIII-7.html",
    "title": "Delegate RRIIIII<T0, T1, T2, T3, T4, T5, T6> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate RRIIIII<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RRIIIII<T0, T1, T2, T3, T4, T5, T6>(ref T0 t0, ref T1 t1, in T2 t2, in T3 t3, in T4 t4, in T5 t5, in T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.RRIIII-6.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RRIIII-6.html",
    "title": "Delegate RRIIII<T0, T1, T2, T3, T4, T5> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate RRIIII<T0, T1, T2, T3, T4, T5> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RRIIII<T0, T1, T2, T3, T4, T5>(ref T0 t0, ref T1 t1, in T2 t2, in T3 t3, in T4 t4, in T5 t5); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 Type Parameters Name Description T0 T1 T2 T3 T4 T5"
  },
  "api/Unity.Entities.UniversalDelegates.RRIII-5.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RRIII-5.html",
    "title": "Delegate RRIII<T0, T1, T2, T3, T4> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate RRIII<T0, T1, T2, T3, T4> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RRIII<T0, T1, T2, T3, T4>(ref T0 t0, ref T1 t1, in T2 t2, in T3 t3, in T4 t4); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 Type Parameters Name Description T0 T1 T2 T3 T4"
  },
  "api/Unity.Entities.UniversalDelegates.RRII-4.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RRII-4.html",
    "title": "Delegate RRII<T0, T1, T2, T3> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate RRII<T0, T1, T2, T3> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RRII<T0, T1, T2, T3>(ref T0 t0, ref T1 t1, in T2 t2, in T3 t3); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 Type Parameters Name Description T0 T1 T2 T3"
  },
  "api/Unity.Entities.UniversalDelegates.RRI-3.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RRI-3.html",
    "title": "Delegate RRI<T0, T1, T2> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate RRI<T0, T1, T2> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RRI<T0, T1, T2>(ref T0 t0, ref T1 t1, in T2 t2); Parameters Type Name Description T0 t0 T1 t1 T2 t2 Type Parameters Name Description T0 T1 T2"
  },
  "api/Unity.Entities.UniversalDelegates.RR-2.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RR-2.html",
    "title": "Delegate RR<T0, T1> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate RR<T0, T1> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RR<T0, T1>(ref T0 t0, ref T1 t1); Parameters Type Name Description T0 t0 T1 t1 Type Parameters Name Description T0 T1"
  },
  "api/Unity.Build.BuildStep.html": {
    "href": "api/Unity.Build.BuildStep.html",
    "title": "Class BuildStep | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class BuildStep Base class for build steps that are executed througout a BuildPipeline . Inheritance Object BuildStep BuildStepApplyPlayerSettings BuildStepBuildClassicLiveLink Namespace : Unity.Build <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public abstract class BuildStep : IBuildStep Properties Description Description of this BuildStep displayed in build progress reporting. Declaration public abstract string Description { get; } Property Value Type Description String Implements IBuildStep.Description OptionalComponents List of IBuildSettingsComponent derived types that are optional for this BuildStep . Declaration public virtual Type[] OptionalComponents { get; } Property Value Type Description Type [] Implements IBuildStep.OptionalComponents RequiredComponents List of IBuildSettingsComponent derived types that are required for this BuildStep . Declaration public virtual Type[] RequiredComponents { get; } Property Value Type Description Type [] Implements IBuildStep.RequiredComponents Methods CleanupBuildStep(BuildContext) Cleanup this BuildStep . Cleanup will only be called if this BuildStep ran. Declaration public virtual BuildStepResult CleanupBuildStep(BuildContext context) Parameters Type Name Description BuildContext context The BuildContext used by the execution of this BuildStep . Returns Type Description BuildStepResult Implements IBuildStep.CleanupBuildStep(BuildContext) Failure(String) Construct BuildStepResult from this IBuildStep that represent a failed execution. Declaration public BuildStepResult Failure(string message) Parameters Type Name Description String message Message that explain why the IBuildStep execution failed. Returns Type Description BuildStepResult A new BuildStepResult instance. GetAvailableTypes(Func<Type, Boolean>) Retrieves a list of valid types for build steps. Declaration public static IReadOnlyCollection<Type> GetAvailableTypes(Func<Type, bool> filter = null) Parameters Type Name Description Func < Type , Boolean > filter Optional filter function for types. Returns Type Description IReadOnlyCollection < Type > List of available build step types. GetOptionalComponent(BuildContext, Type) Get the value of an optional Type component from BuildSettings . The component Type must exist in the OptionalComponents list. If the component is not found in BuildSettings , a new instance of type Type is returned. Declaration public IBuildSettingsComponent GetOptionalComponent(BuildContext context, Type type) Parameters Type Name Description BuildContext context The BuildContext used by the execution of this BuildStep . Type type Type of the optional component. Returns Type Description IBuildSettingsComponent The value of the optional component. GetOptionalComponent<T>(BuildContext) Get the value of an optional T component from BuildSettings . The component Type must exist in the OptionalComponents list. If the component is not found in BuildSettings , a new instance of type T is returned. Declaration public T GetOptionalComponent<T>(BuildContext context) where T : IBuildSettingsComponent Parameters Type Name Description BuildContext context The BuildContext used by the execution of this BuildStep . Returns Type Description T The value of the optional component. Type Parameters Name Description T Type of the optional component. GetRequiredComponent(BuildContext, Type) Get the value of a required Type component from BuildSettings . The component Type must exist in the RequiredComponents list. Declaration public IBuildSettingsComponent GetRequiredComponent(BuildContext context, Type type) Parameters Type Name Description BuildContext context The BuildContext used by the execution of this BuildStep . Type type Type of the required component. Returns Type Description IBuildSettingsComponent The value of the required component. GetRequiredComponent<T>(BuildContext) Get the value of a required T component from BuildSettings . The component Type must exist in the RequiredComponents list. Declaration public T GetRequiredComponent<T>(BuildContext context) where T : IBuildSettingsComponent Parameters Type Name Description BuildContext context The BuildContext used by the execution of this BuildStep . Returns Type Description T The value of the required component. Type Parameters Name Description T Type of the required component. HasOptionalComponent(BuildContext, Type) Determine if an optional Type component is stored in BuildSettings . The component Type must exist in the OptionalComponents list. Declaration public bool HasOptionalComponent(BuildContext context, Type type) Parameters Type Name Description BuildContext context The BuildContext used by the execution of this BuildStep . Type type Type of the optional component. Returns Type Description Boolean true if the optional component type is found, false otherwise. HasOptionalComponent<T>(BuildContext) Determine if an optional T component is stored in BuildSettings . The component Type must exist in the OptionalComponents list. Declaration public bool HasOptionalComponent<T>(BuildContext context) where T : IBuildSettingsComponent Parameters Type Name Description BuildContext context The BuildContext used by the execution of this BuildStep . Returns Type Description Boolean true if the optional component type is found, false otherwise. Type Parameters Name Description T Type of the optional component. HasRequiredComponent(BuildContext, Type) Determine if a required Type component is stored in BuildSettings . The component Type must exist in the RequiredComponents list. Declaration public bool HasRequiredComponent(BuildContext context, Type type) Parameters Type Name Description BuildContext context The BuildContext used by the execution of this BuildStep . Type type Type of the required component. Returns Type Description Boolean true if the required component type is found, false otherwise. HasRequiredComponent<T>(BuildContext) Determine if a required T component is stored in BuildSettings . The component Type must exist in the RequiredComponents list. Declaration public bool HasRequiredComponent<T>(BuildContext context) where T : IBuildSettingsComponent Parameters Type Name Description BuildContext context The BuildContext used by the execution of this BuildStep . Returns Type Description Boolean true if the required component type is found, false otherwise. Type Parameters Name Description T Type of the required component. IsEnabled(BuildContext) Determine if this BuildStep will be executed or not. Declaration public virtual bool IsEnabled(BuildContext context) Parameters Type Name Description BuildContext context The BuildContext used by the execution of this BuildStep . Returns Type Description Boolean true if enabled, false otherwise. Implements IBuildStep.IsEnabled(BuildContext) RunBuildStep(BuildContext) Run this BuildStep . If a previous BuildStep fails, this BuildStep will not run. Declaration public abstract BuildStepResult RunBuildStep(BuildContext context) Parameters Type Name Description BuildContext context The BuildContext used by the execution of this BuildStep . Returns Type Description BuildStepResult The result of running this BuildStep . Implements IBuildStep.RunBuildStep(BuildContext) Success() Construct BuildStepResult from this IBuildStep that represent a successful execution. Declaration public BuildStepResult Success() Returns Type Description BuildStepResult A new BuildStepResult instance. Extension Methods BuildStepExtensions.GetOutputBuildDirectory(BuildStep, BuildContext)"
  },
  "api/Unity.Build.BuildProgress.html": {
    "href": "api/Unity.Build.BuildProgress.html",
    "title": "Class BuildProgress | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class BuildProgress Scoped progress indicator that will clear itself on dispose. Inheritance Object BuildProgress Namespace : Unity.Build <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public sealed class BuildProgress : IDisposable Constructors BuildProgress(String, String, Single) Initialize a new instance of the BuildProgress class, which acts as a scoped progress indicator. Declaration public BuildProgress(string title, string info, float percent = 0F) Parameters Type Name Description String title Title of the progress indicator. String info Information of the progress indicator. Single percent Completion percent of the progress indicator. Properties Info Update or get the information of the progress indicator. Declaration public string Info { get; set; } Property Value Type Description String Percent Update or get the completion percent of the progress indicator. Declaration public float Percent { get; set; } Property Value Type Description Single Title Update or get the title of the progress indicator. Declaration public string Title { get; set; } Property Value Type Description String Methods Dispose() Declaration public void Dispose() Update(String, Single) Update the progress indicator. Declaration public bool Update(string info, float percent) Parameters Type Name Description String info Information of the progress indicator. Single percent Completion percent of the progress indicator. Returns Type Description Boolean Update(String, String, Single) Update the progress indicator. Declaration public bool Update(string title, string info, float percent) Parameters Type Name Description String title Title of the progress indicator. String info Information of the progress indicator. Single percent Completion percent of the progress indicator. Returns Type Description Boolean Whether or not the user had pressed the cancel button."
  },
  "api/Unity.Build.BuildContext.html": {
    "href": "api/Unity.Build.BuildContext.html",
    "title": "Class BuildContext | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class BuildContext Holds contextual information while a BuildPipeline is executing. Inheritance Object BuildContext Namespace : Unity.Build <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public sealed class BuildContext : IDisposable Properties BuildManifest Quick access to BuildManifest value. Declaration public BuildManifest BuildManifest { get; } Property Value Type Description BuildManifest BuildPipelineStatus Current BuildPipeline execution status. Declaration public BuildPipelineResult BuildPipelineStatus { get; } Property Value Type Description BuildPipelineResult BuildProgress The BuildProgress object used througout the build. Declaration public BuildProgress BuildProgress { get; } Property Value Type Description BuildProgress Values List of all values stored. Declaration public object[] Values { get; } Property Value Type Description Object [] Methods Dispose() Declaration public void Dispose() GetOrCreateValue<T>() Get value of type T if found, otherwise a new instance of type T constructed with . Declaration public T GetOrCreateValue<T>() where T : class Returns Type Description T The value or new instance of type T . Type Parameters Name Description T The value type. GetValue<T>() Get value of type T if found, otherwise null . Declaration public T GetValue<T>() where T : class Returns Type Description T The value of type T if found, otherwise null . Type Parameters Name Description T The value type. HasValue<T>() Determine if the value of type T exists. Declaration public bool HasValue<T>() where T : class Returns Type Description Boolean true if value is found, false otherwise. Type Parameters Name Description T The value type. RemoveValue<T>() Remove value of type T from this BuildContext . Declaration public bool RemoveValue<T>() where T : class Returns Type Description Boolean true if the value was removed, otherwise false . Type Parameters Name Description T The value type. SetValue<T>(T) Set value of type T to this BuildContext . Declaration public void SetValue<T>(T value) where T : class Parameters Type Name Description T value The value to set. Type Parameters Name Description T The value type."
  },
  "api/Unity.Transforms.RotationProxy.html": {
    "href": "api/Unity.Transforms.RotationProxy.html",
    "title": "Class RotationProxy | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class RotationProxy Inheritance Object ComponentDataProxyBase ComponentDataProxy < Rotation > RotationProxy Inherited Members ComponentDataProxy<Rotation>.Value ComponentDataProxyBase.OnEnable() ComponentDataProxyBase.OnDisable() Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class RotationProxy : ComponentDataProxy<Rotation>, ISerializationCallbackReceiver Methods ValidateSerializedData(ref Rotation) Declaration protected override void ValidateSerializedData(ref Rotation serializedData) Parameters Type Name Description Rotation serializedData Overrides Unity.Entities.ComponentDataProxy<Unity.Transforms.Rotation>.ValidateSerializedData(Unity.Transforms.Rotation)"
  },
  "api/Unity.Transforms.RotationPivotTranslation.html": {
    "href": "api/Unity.Transforms.RotationPivotTranslation.html",
    "title": "Struct RotationPivotTranslation | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct RotationPivotTranslation Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] [WriteGroup(typeof(CompositeRotation))] public struct RotationPivotTranslation : IComponentData Fields Value Declaration public float3 Value Field Value Type Description float3"
  },
  "api/Unity.Entities.UniversalDelegates.IIIIIII-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.IIIIIII-7.html",
    "title": "Delegate IIIIIII<T0, T1, T2, T3, T4, T5, T6> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate IIIIIII<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void IIIIIII<T0, T1, T2, T3, T4, T5, T6>(in T0 t0, in T1 t1, in T2 t2, in T3 t3, in T4 t4, in T5 t5, in T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.IIIIII-6.html": {
    "href": "api/Unity.Entities.UniversalDelegates.IIIIII-6.html",
    "title": "Delegate IIIIII<T0, T1, T2, T3, T4, T5> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate IIIIII<T0, T1, T2, T3, T4, T5> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void IIIIII<T0, T1, T2, T3, T4, T5>(in T0 t0, in T1 t1, in T2 t2, in T3 t3, in T4 t4, in T5 t5); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 Type Parameters Name Description T0 T1 T2 T3 T4 T5"
  },
  "api/Unity.Entities.UniversalDelegates.IIIII-5.html": {
    "href": "api/Unity.Entities.UniversalDelegates.IIIII-5.html",
    "title": "Delegate IIIII<T0, T1, T2, T3, T4> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate IIIII<T0, T1, T2, T3, T4> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void IIIII<T0, T1, T2, T3, T4>(in T0 t0, in T1 t1, in T2 t2, in T3 t3, in T4 t4); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 Type Parameters Name Description T0 T1 T2 T3 T4"
  },
  "api/Unity.Entities.UniversalDelegates.IIII-4.html": {
    "href": "api/Unity.Entities.UniversalDelegates.IIII-4.html",
    "title": "Delegate IIII<T0, T1, T2, T3> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate IIII<T0, T1, T2, T3> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void IIII<T0, T1, T2, T3>(in T0 t0, in T1 t1, in T2 t2, in T3 t3); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 Type Parameters Name Description T0 T1 T2 T3"
  },
  "api/Unity.Entities.UniversalDelegates.III-3.html": {
    "href": "api/Unity.Entities.UniversalDelegates.III-3.html",
    "title": "Delegate III<T0, T1, T2> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate III<T0, T1, T2> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void III<T0, T1, T2>(in T0 t0, in T1 t1, in T2 t2); Parameters Type Name Description T0 t0 T1 t1 T2 t2 Type Parameters Name Description T0 T1 T2"
  },
  "api/Unity.Entities.UniversalDelegates.II-2.html": {
    "href": "api/Unity.Entities.UniversalDelegates.II-2.html",
    "title": "Delegate II<T0, T1> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate II<T0, T1> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void II<T0, T1>(in T0 t0, in T1 t1); Parameters Type Name Description T0 t0 T1 t1 Type Parameters Name Description T0 T1"
  },
  "api/Unity.Entities.UniversalDelegates.I-1.html": {
    "href": "api/Unity.Entities.UniversalDelegates.I-1.html",
    "title": "Delegate I<T0> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate I<T0> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void I<T0>(in T0 t0); Parameters Type Name Description T0 t0 Type Parameters Name Description T0"
  },
  "api/Unity.Entities.TypeManager.html": {
    "href": "api/Unity.Entities.TypeManager.html",
    "title": "Class TypeManager | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class TypeManager Inheritance Object TypeManager Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class TypeManager Fields BufferComponentTypeFlag Declaration public const int BufferComponentTypeFlag = 67108864 Field Value Type Description Int32 ChunkComponentTypeFlag Declaration public const int ChunkComponentTypeFlag = 268435456 Field Value Type Description Int32 ClearFlagsMask Declaration public const int ClearFlagsMask = 16777215 Field Value Type Description Int32 HasNoEntityReferencesFlag Declaration public const int HasNoEntityReferencesFlag = 16777216 Field Value Type Description Int32 ManagedComponentTypeFlag Declaration public const int ManagedComponentTypeFlag = 1073741824 Field Value Type Description Int32 MaximumChunkCapacity Declaration public const int MaximumChunkCapacity = 2147483647 Field Value Type Description Int32 MaximumSupportedAlignment Declaration public const int MaximumSupportedAlignment = 16 Field Value Type Description Int32 MaximumTypesCount Declaration public const int MaximumTypesCount = 10240 Field Value Type Description Int32 ObjectOffset Declaration public static int ObjectOffset Field Value Type Description Int32 SharedComponentTypeFlag Declaration public const int SharedComponentTypeFlag = 134217728 Field Value Type Description Int32 SystemStateSharedComponentTypeFlag Declaration public const int SystemStateSharedComponentTypeFlag = 167772160 Field Value Type Description Int32 SystemStateTypeFlag Declaration public const int SystemStateTypeFlag = 33554432 Field Value Type Description Int32 ZeroSizeInChunkTypeFlag Declaration public const int ZeroSizeInChunkTypeFlag = 536870912 Field Value Type Description Int32 Properties AllTypes Declaration public static IEnumerable<TypeManager.TypeInfo> AllTypes { get; } Property Value Type Description IEnumerable < TypeManager.TypeInfo > SystemNames Declaration public static string[] SystemNames { get; } Property Value Type Description String [] Methods CheckIsAllowedAsComponentData(Type, String) Declaration [Conditional(\"ENABLE_UNITY_COLLECTIONS_CHECKS\")] public static void CheckIsAllowedAsComponentData(Type type, string baseTypeDesc) Parameters Type Name Description Type type String baseTypeDesc CheckIsAllowedAsManagedComponentData(Type, String) Declaration [Conditional(\"ENABLE_UNITY_COLLECTIONS_CHECKS\")] public static void CheckIsAllowedAsManagedComponentData(Type type, string baseTypeDesc) Parameters Type Name Description Type type String baseTypeDesc ChunkComponentToNormalTypeIndex(Int32) Declaration public static int ChunkComponentToNormalTypeIndex(int typeIndex) Parameters Type Name Description Int32 typeIndex Returns Type Description Int32 ConstructComponentFromBuffer(Int32, Void*) Declaration public static object ConstructComponentFromBuffer(int typeIndex, void *data) Parameters Type Name Description Int32 typeIndex Void * data Returns Type Description Object ConstructSystem(Type) Construct a System from a Type. Uses the same list in GetSystems() Declaration public static ComponentSystemBase ConstructSystem(Type systemType) Parameters Type Name Description Type systemType Returns Type Description ComponentSystemBase ConstructSystem<T>() Declaration public static T ConstructSystem<T>() where T : ComponentSystemBase Returns Type Description T Type Parameters Name Description T ConstructSystem<T>(Type) Declaration public static T ConstructSystem<T>(Type systemType) where T : ComponentSystemBase Parameters Type Name Description Type systemType Returns Type Description T Type Parameters Name Description T CreateTypeIndexForBufferElement<T>() Declaration public static int CreateTypeIndexForBufferElement<T>() where T : struct, IBufferElementData Returns Type Description Int32 Type Parameters Name Description T CreateTypeIndexForComponent<T>() Declaration public static int CreateTypeIndexForComponent<T>() where T : IComponentData Returns Type Description Int32 Type Parameters Name Description T CreateTypeIndexForSharedComponent<T>() Declaration public static int CreateTypeIndexForSharedComponent<T>() where T : struct, ISharedComponentData Returns Type Description Int32 Type Parameters Name Description T Equals(Object, Object, Int32) Declaration public static bool Equals(object left, object right, int typeIndex) Parameters Type Name Description Object left Object right Int32 typeIndex Returns Type Description Boolean Equals(Object, Void*, Int32) Declaration public static bool Equals(object left, void *right, int typeIndex) Parameters Type Name Description Object left Void * right Int32 typeIndex Returns Type Description Boolean Equals(Void*, Void*, Int32) Declaration public static bool Equals(void *left, void *right, int typeIndex) Parameters Type Name Description Void * left Void * right Int32 typeIndex Returns Type Description Boolean Equals<T>(ref T, ref T) Declaration public static bool Equals<T>(ref T left, ref T right) where T : struct Parameters Type Name Description T left T right Returns Type Description Boolean Type Parameters Name Description T GetAllTypes() Declaration public static TypeManager.TypeInfo[] GetAllTypes() Returns Type Description TypeManager.TypeInfo [] GetEntityOffsets(Int32) Declaration public static TypeManager.EntityOffsetInfo*GetEntityOffsets(int typeIndex) Parameters Type Name Description Int32 typeIndex Returns Type Description TypeManager.EntityOffsetInfo * GetFastEqualityTypeInfo(TypeManager.TypeInfo) Declaration public static FastEquality.TypeInfo GetFastEqualityTypeInfo(TypeManager.TypeInfo typeInfo) Parameters Type Name Description TypeManager.TypeInfo typeInfo Returns Type Description FastEquality.TypeInfo GetField(String) Declaration public static TypeManager.FieldInfo GetField(string name) Parameters Type Name Description String name Returns Type Description TypeManager.FieldInfo GetFieldArgs(Int32, Int32, Int32) Declaration public static TypeManager.FieldInfo GetFieldArgs(int arg0, int arg1, int arg2) Parameters Type Name Description Int32 arg0 Int32 arg1 Int32 arg2 Returns Type Description TypeManager.FieldInfo GetHashCode(Object, Int32) Declaration public static int GetHashCode(object val, int typeIndex) Parameters Type Name Description Object val Int32 typeIndex Returns Type Description Int32 GetHashCode(Void*, Int32) Declaration public static int GetHashCode(void *val, int typeIndex) Parameters Type Name Description Void * val Int32 typeIndex Returns Type Description Int32 GetHashCode<T>(ref T) Declaration public static int GetHashCode<T>(ref T val) where T : struct Parameters Type Name Description T val Returns Type Description Int32 Type Parameters Name Description T GetSystemAttributes(Type) Get all the attribute objects for a System. Declaration public static Attribute[] GetSystemAttributes(Type systemType) Parameters Type Name Description Type systemType Returns Type Description Attribute [] GetSystemAttributes(Type, Type) Get all the attribute objects of Type attributeType for a System. Declaration public static Attribute[] GetSystemAttributes(Type systemType, Type attributeType) Parameters Type Name Description Type systemType Type attributeType Returns Type Description Attribute [] GetSystems() Return an array of all the Systems in use. (They are found at compile time, and inserted by code generation.) Declaration public static Type[] GetSystems() Returns Type Description Type [] GetSystemTypeIndex(Type) Declaration public static int GetSystemTypeIndex(Type t) Parameters Type Name Description Type t Returns Type Description Int32 GetType(Int32) Declaration public static Type GetType(int typeIndex) Parameters Type Name Description Int32 typeIndex Returns Type Description Type GetTypeCount() Declaration public static int GetTypeCount() Returns Type Description Int32 GetTypeIndex(Type) Declaration public static int GetTypeIndex(Type type) Parameters Type Name Description Type type Returns Type Description Int32 GetTypeIndex<T>() Declaration public static int GetTypeIndex<T>() Returns Type Description Int32 Type Parameters Name Description T GetTypeIndexFromStableTypeHash(UInt64) Declaration public static int GetTypeIndexFromStableTypeHash(ulong stableTypeHash) Parameters Type Name Description UInt64 stableTypeHash Returns Type Description Int32 GetTypeInfo(Int32) Declaration public static TypeManager.TypeInfo GetTypeInfo(int typeIndex) Parameters Type Name Description Int32 typeIndex Returns Type Description TypeManager.TypeInfo GetTypeInfo<T>() Declaration public static TypeManager.TypeInfo GetTypeInfo<T>() Returns Type Description TypeManager.TypeInfo Type Parameters Name Description T GetWriteGroupTypes(Int32) Declaration public static NativeArray<int> GetWriteGroupTypes(int typeIndex) Parameters Type Name Description Int32 typeIndex Returns Type Description NativeArray < Int32 > HasEntityReferences(Int32) Declaration public static bool HasEntityReferences(int typeIndex) Parameters Type Name Description Int32 typeIndex Returns Type Description Boolean Initialize() Initializes the TypeManager with all ECS type information. May be called multiple times; only the first call will do any work. Always must be called from the main thread. Declaration public static void Initialize() IsAssemblyReferencingEntities(Assembly) Declaration public static bool IsAssemblyReferencingEntities(Assembly assembly) Parameters Type Name Description Assembly assembly Returns Type Description Boolean IsAssemblyReferencingUnityEngine(Assembly) Declaration public static bool IsAssemblyReferencingUnityEngine(Assembly assembly) Parameters Type Name Description Assembly assembly Returns Type Description Boolean IsBuffer(Int32) Declaration public static bool IsBuffer(int typeIndex) Parameters Type Name Description Int32 typeIndex Returns Type Description Boolean IsChunkComponent(Int32) Declaration public static bool IsChunkComponent(int typeIndex) Parameters Type Name Description Int32 typeIndex Returns Type Description Boolean IsManagedComponent(Int32) Declaration public static bool IsManagedComponent(int typeIndex) Parameters Type Name Description Int32 typeIndex Returns Type Description Boolean IsSharedComponent(Int32) Declaration public static bool IsSharedComponent(int typeIndex) Parameters Type Name Description Int32 typeIndex Returns Type Description Boolean IsSystemAGroup(Type) Declaration public static bool IsSystemAGroup(Type t) Parameters Type Name Description Type t Returns Type Description Boolean IsSystemStateComponent(Int32) Declaration public static bool IsSystemStateComponent(int typeIndex) Parameters Type Name Description Int32 typeIndex Returns Type Description Boolean IsSystemStateSharedComponent(Int32) Declaration public static bool IsSystemStateSharedComponent(int typeIndex) Parameters Type Name Description Int32 typeIndex Returns Type Description Boolean IsZeroSized(Int32) Declaration public static bool IsZeroSized(int typeIndex) Parameters Type Name Description Int32 typeIndex Returns Type Description Boolean MakeChunkComponentTypeIndex(Int32) Declaration public static int MakeChunkComponentTypeIndex(int typeIndex) Parameters Type Name Description Int32 typeIndex Returns Type Description Int32 RegisterUnityEngineObjectType(Type) Declaration public static void RegisterUnityEngineObjectType(Type type) Parameters Type Name Description Type type Shutdown() Removes all ECS type information and any allocated memory. May only be called once globally, and must be called from the main thread. Declaration public static void Shutdown() SystemName(Type) Declaration public static string SystemName(Type t) Parameters Type Name Description Type t Returns Type Description String ThrowOnDisallowedComponentData(Type, Type, String) Declaration [Conditional(\"ENABLE_UNITY_COLLECTIONS_CHECKS\")] public static void ThrowOnDisallowedComponentData(Type type, Type baseType, string baseTypeDesc) Parameters Type Name Description Type type Type baseType String baseTypeDesc ThrowOnDisallowedManagedComponentData(Type, Type, String) Declaration [Conditional(\"ENABLE_UNITY_COLLECTIONS_CHECKS\")] public static void ThrowOnDisallowedManagedComponentData(Type type, Type baseType, string baseTypeDesc) Parameters Type Name Description Type type Type baseType String baseTypeDesc"
  },
  "api/Unity.Entities.Serialization.StreamBinaryReader.html": {
    "href": "api/Unity.Entities.Serialization.StreamBinaryReader.html",
    "title": "Class StreamBinaryReader | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class StreamBinaryReader Inheritance Object StreamBinaryReader Namespace : Unity.Entities.Serialization <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class StreamBinaryReader : BinaryReader, IDisposable Constructors StreamBinaryReader(String, Int32) Declaration public StreamBinaryReader(string fileName, int bufferSize = 65536) Parameters Type Name Description String fileName Int32 bufferSize Methods Dispose() Declaration public void Dispose() ReadBytes(Void*, Int32) Declaration public void ReadBytes(void *data, int bytes) Parameters Type Name Description Void * data Int32 bytes Implements BinaryReader.ReadBytes(Void*, Int32) Extension Methods BlobAssetSerializeExtensions.Read<T>(BinaryReader) BinaryReaderExtensions.ReadByte(BinaryReader) BinaryReaderExtensions.ReadInt(BinaryReader) BinaryReaderExtensions.ReadULong(BinaryReader) BinaryReaderExtensions.ReadBytes(BinaryReader, NativeArray<Byte>, Int32, Int32) BinaryReaderExtensions.ReadArray<T>(BinaryReader, NativeArray<T>, Int32)"
  },
  "api/Unity.Entities.Serialization.SerializeUtilityHybrid.html": {
    "href": "api/Unity.Entities.Serialization.SerializeUtilityHybrid.html",
    "title": "Class SerializeUtilityHybrid | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class SerializeUtilityHybrid Inheritance Object SerializeUtilityHybrid Namespace : Unity.Entities.Serialization <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class SerializeUtilityHybrid Methods Deserialize(EntityManager, BinaryReader, ReferencedUnityObjects) Declaration public static void Deserialize(EntityManager manager, BinaryReader reader, ReferencedUnityObjects objRefs) Parameters Type Name Description EntityManager manager BinaryReader reader ReferencedUnityObjects objRefs DeserializeObjectReferences(EntityManager, ReferencedUnityObjects, String, out UnityEngine.Object[]) Declaration public static void DeserializeObjectReferences(EntityManager manager, ReferencedUnityObjects objRefs, string debugSceneName, out UnityEngine.Object[] objectReferences) Parameters Type Name Description EntityManager manager ReferencedUnityObjects objRefs String debugSceneName UnityEngine.Object [] objectReferences Serialize(EntityManager, BinaryWriter, out ReferencedUnityObjects) Declaration public static void Serialize(EntityManager manager, BinaryWriter writer, out ReferencedUnityObjects objRefs) Parameters Type Name Description EntityManager manager BinaryWriter writer ReferencedUnityObjects objRefs Serialize(EntityManager, BinaryWriter, out ReferencedUnityObjects, NativeArray<EntityRemapUtility.EntityRemapInfo>) Declaration public static void Serialize(EntityManager manager, BinaryWriter writer, out ReferencedUnityObjects objRefs, NativeArray<EntityRemapUtility.EntityRemapInfo> entityRemapInfos) Parameters Type Name Description EntityManager manager BinaryWriter writer ReferencedUnityObjects objRefs NativeArray < EntityRemapUtility.EntityRemapInfo > entityRemapInfos SerializeObjectReferences(EntityManager, BinaryWriter, UnityEngine.Object[], out ReferencedUnityObjects) Declaration public static void SerializeObjectReferences(EntityManager manager, BinaryWriter writer, UnityEngine.Object[] referencedObjects, out ReferencedUnityObjects objRefs) Parameters Type Name Description EntityManager manager BinaryWriter writer UnityEngine.Object [] referencedObjects ReferencedUnityObjects objRefs"
  },
  "api/Unity.Entities.Serialization.SerializeUtility.html": {
    "href": "api/Unity.Entities.Serialization.SerializeUtility.html",
    "title": "Class SerializeUtility | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class SerializeUtility Inheritance Object SerializeUtility Namespace : Unity.Entities.Serialization <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class SerializeUtility Fields CurrentFileFormatVersion Declaration public static int CurrentFileFormatVersion Field Value Type Description Int32 Methods DeserializeWorld(ExclusiveEntityTransaction, BinaryReader, Object[]) Declaration public static void DeserializeWorld(ExclusiveEntityTransaction manager, BinaryReader reader, object[] unityObjects = null) Parameters Type Name Description ExclusiveEntityTransaction manager BinaryReader reader Object [] unityObjects SerializeWorld(EntityManager, BinaryWriter) Declaration public static void SerializeWorld(EntityManager entityManager, BinaryWriter writer) Parameters Type Name Description EntityManager entityManager BinaryWriter writer SerializeWorld(EntityManager, BinaryWriter, NativeArray<EntityRemapUtility.EntityRemapInfo>) Declaration public static void SerializeWorld(EntityManager entityManager, BinaryWriter writer, NativeArray<EntityRemapUtility.EntityRemapInfo> entityRemapInfos) Parameters Type Name Description EntityManager entityManager BinaryWriter writer NativeArray < EntityRemapUtility.EntityRemapInfo > entityRemapInfos SerializeWorld(EntityManager, BinaryWriter, out Object[]) Declaration public static void SerializeWorld(EntityManager entityManager, BinaryWriter writer, out object[] referencedObjects) Parameters Type Name Description EntityManager entityManager BinaryWriter writer Object [] referencedObjects SerializeWorld(EntityManager, BinaryWriter, out Object[], NativeArray<EntityRemapUtility.EntityRemapInfo>) Declaration public static void SerializeWorld(EntityManager entityManager, BinaryWriter writer, out object[] referencedObjects, NativeArray<EntityRemapUtility.EntityRemapInfo> entityRemapInfos) Parameters Type Name Description EntityManager entityManager BinaryWriter writer Object [] referencedObjects NativeArray < EntityRemapUtility.EntityRemapInfo > entityRemapInfos"
  },
  "api/Unity.Entities.EntityArchetype.html": {
    "href": "api/Unity.Entities.EntityArchetype.html",
    "title": "Struct EntityArchetype | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct EntityArchetype An EntityArchetype is a unique combination of component types. The EntityManager uses the archetype to group all entities that have the same sets of components. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct EntityArchetype : IEquatable<EntityArchetype> Remarks An entity can change archetype fluidly over its lifespan. For example, when you add or remove components, the archetype of the affected entity changes. An archetype object is not a container; rather it is an identifier to each unique combination of component types that an application has created at run time, either directly or implicitly. You can create archetypes directly using CreateArchetype(ComponentType[]) . You also implicitly create archetypes whenever you add or remove a component from an entity. An EntityArchetype object is an immutable singleton; creating an archetype with the same set of components, either directly or implicitly, results in the same archetype for a given EntityManager. The ECS framework uses archetypes to group entities that have the same structure together. The ECS framework stores component data in blocks of memory called chunks . A given chunk stores only entities having the same archetype. You can get the EntityArchetype object for a chunk from its Archetype property. Properties ChunkCapacity The number of entities having this archetype that can fit into a single chunk of memory. Declaration public int ChunkCapacity { get; } Property Value Type Description Int32 Capacity is determined by the fixed, 16KB size of the memory blocks allocated by the ECS framework and the total storage size of all the component types in the archetype. ChunkCount The current number of chunks storing entities having this archetype. Declaration public int ChunkCount { get; } Property Value Type Description Int32 The number of chunks. Remarks This value can change whenever structural changes occur. Structural changes include creating or destroying entities, adding components to or removing them from an entity, and changing the value of shared components, all of which alter where entities are stored. Valid Reports whether this EntityArchetype instance references a non-null archetype. Declaration public bool Valid { get; } Property Value Type Description Boolean True, if the archetype is valid. Methods Equals(Object) Reports whether this EntityArchetype references the same archetype as another object. Declaration public override bool Equals(object compare) Parameters Type Name Description Object compare The object to compare. Returns Type Description Boolean True, if the compare parameter is a EntityArchetype instance that points to the same archetype. Overrides ValueType.Equals(Object) Equals(EntityArchetype) Compares archetypes for equality. Declaration public bool Equals(EntityArchetype entityArchetype) Parameters Type Name Description EntityArchetype entityArchetype The EntityArchetype to compare. Returns Type Description Boolean Returns true, if both EntityArchetype instances reference the same archetype. GetComponentTypes(Allocator) Gets the types of the components making up this archetype. Declaration public NativeArray<ComponentType> GetComponentTypes(Allocator allocator = null) Parameters Type Name Description Allocator allocator The allocation type to use for the returned NativeArray. Returns Type Description NativeArray < ComponentType > A native array containing the ComponentType objects of this archetype. Remarks The set of component types in an archetype cannot change; adding components to an entity or removing components from an entity changes the archetype of that entity (possibly resulting in the creation of a new archetype). The original archetype remains unchanged. GetHashCode() Returns the hash of the archetype. Declaration public override int GetHashCode() Returns Type Description Int32 An integer hash code. Overrides ValueType.GetHashCode() Remarks Two EntityArchetype instances referencing the same archetype return the same hash. Operators Equality(EntityArchetype, EntityArchetype) Compares the archetypes for equality. Declaration public static bool operator ==(EntityArchetype lhs, EntityArchetype rhs) Parameters Type Name Description EntityArchetype lhs A EntityArchetype object. EntityArchetype rhs Another EntityArchetype object. Returns Type Description Boolean True, if these EntityArchetype instances reference the same archetype. Inequality(EntityArchetype, EntityArchetype) Compares the archetypes for inequality. Declaration public static bool operator !=(EntityArchetype lhs, EntityArchetype rhs) Parameters Type Name Description EntityArchetype lhs A EntityArchetype object. EntityArchetype rhs Another EntityArchetype object. Returns Type Description Boolean True, if these EntityArchetype instances reference different archetypes."
  },
  "api/Unity.Entities.Entity.html": {
    "href": "api/Unity.Entities.Entity.html",
    "title": "Struct Entity | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct Entity Identifies an entity. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct Entity : IEquatable<Entity>, IComparable<Entity> Remarks The entity is a fundamental part of the Entity Component System. Everything in your game that has data or an identity of its own is an entity. However, an entity does not contain either data or behavior itself. Instead, the data is stored in the components and the behavior is provided by the systems that process those components. The entity acts as an identifier or key to the data stored in components. Entities are managed by the EntityManager class and exist within a World . An Entity struct refers to an entity, but is not a reference. Rather the Entity struct contains an Index used to access entity data and a Version used to check whether the Index is still valid. Note that you generally do not use the Index or Version values directly, but instead pass the Entity struct to the relevant API methods. Pass an Entity struct to methods of the EntityManager , the EntityCommandBuffer , or the ComponentSystem in order to add or remove components, to access components, or to destroy the entity. Fields Index The ID of an entity. Declaration public int Index Field Value Type Description Int32 The index into the internal list of entities. Remarks Entity indexes are recycled when an entity is destroyed. When an entity is destroyed, the EntityManager increments the version identifier. To represent the same entity, both the Index and the Version fields of the Entity object must match. If the Index is the same, but the Version is different, then the entity has been recycled. Version The generational version of the entity. Declaration public int Version Field Value Type Description Int32 Used to determine whether this Entity object still identifies an existing entity. Remarks The Version number can, theoretically, overflow and wrap around within the lifetime of an application. For this reason, you cannot assume that an Entity instance with a larger Version is a more recent incarnation of the entity than one with a smaller Version (and the same Index). Properties Null A \"blank\" Entity object that does not refer to an actual entity. Declaration public static Entity Null { get; } Property Value Type Description Entity Methods CompareTo(Entity) Compare this entity against a given one Declaration public int CompareTo(Entity other) Parameters Type Name Description Entity other The other entity to compare to Returns Type Description Int32 Difference based on the Entity Index value Equals(Object) Entity instances are equal if they refer to the same entity. Declaration public override bool Equals(object compare) Parameters Type Name Description Object compare The object to compare to this Entity. Returns Type Description Boolean True, if the compare parameter contains an Entity object having the same Index and Version as this Entity. Overrides ValueType.Equals(Object) Equals(Entity) Entity instances are equal if they represent the same entity. Declaration public bool Equals(Entity entity) Parameters Type Name Description Entity entity The other Entity. Returns Type Description Boolean True, if the Entity instances have the same Index and Version. GetHashCode() A hash used for comparisons. Declaration public override int GetHashCode() Returns Type Description Int32 A unique hash code. Overrides ValueType.GetHashCode() ToString() Provides a debugging string. Declaration public override string ToString() Returns Type Description String A string containing the entity index and generational version. Overrides ValueType.ToString() Operators Equality(Entity, Entity) Entity instances are equal if they refer to the same entity. Declaration public static bool operator ==(Entity lhs, Entity rhs) Parameters Type Name Description Entity lhs An Entity object. Entity rhs Another Entity object. Returns Type Description Boolean True, if both Index and Version are identical. Inequality(Entity, Entity) Entity instances are equal if they refer to the same entity. Declaration public static bool operator !=(Entity lhs, Entity rhs) Parameters Type Name Description Entity lhs An Entity object. Entity rhs Another Entity object. Returns Type Description Boolean True, if either Index or Version are different."
  },
  "api/Unity.Entities.WorldSystemFilterAttribute.html": {
    "href": "api/Unity.Entities.WorldSystemFilterAttribute.html",
    "title": "Class WorldSystemFilterAttribute | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class WorldSystemFilterAttribute For internal use only. Inheritance Object Attribute WorldSystemFilterAttribute Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [AttributeUsage(AttributeTargets.Class)] public sealed class WorldSystemFilterAttribute : Attribute, _Attribute Remarks Defines where internal Unity systems should be created. The existence of these Worlds is subject to change. Constructors WorldSystemFilterAttribute(WorldSystemFilterFlags) For internal use only. Declaration public WorldSystemFilterAttribute(WorldSystemFilterFlags flags) Parameters Type Name Description WorldSystemFilterFlags flags Defines where internal Unity systems should be created. Fields FilterFlags The World the system belongs in. Declaration public WorldSystemFilterFlags FilterFlags Field Value Type Description WorldSystemFilterFlags"
  },
  "api/Unity.Entities.World.html": {
    "href": "api/Unity.Entities.World.html",
    "title": "Class World | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class World Inheritance Object World Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class World : IDisposable Constructors World(String) Declaration public World(string name) Parameters Type Name Description String name Fields m_CurrentTime Declaration protected TimeData m_CurrentTime Field Value Type Description TimeData m_TimeSingletonQuery Declaration protected EntityQuery m_TimeSingletonQuery Field Value Type Description EntityQuery Properties AllWorlds Declaration public static ReadOnlyCollection<World> AllWorlds { get; } Property Value Type Description ReadOnlyCollection < World > DefaultGameObjectInjectionWorld Declaration public static World DefaultGameObjectInjectionWorld { get; set; } Property Value Type Description World EntityManager Declaration public EntityManager EntityManager { get; } Property Value Type Description EntityManager IsCreated Declaration public bool IsCreated { get; } Property Value Type Description Boolean Name Declaration public string Name { get; } Property Value Type Description String QuitUpdate Declaration public bool QuitUpdate { get; set; } Property Value Type Description Boolean SequenceNumber Declaration public ulong SequenceNumber { get; } Property Value Type Description UInt64 Systems Declaration public IEnumerable<ComponentSystemBase> Systems { get; } Property Value Type Description IEnumerable < ComponentSystemBase > Time Declaration public TimeData Time { get; } Property Value Type Description TimeData TimeSingleton Declaration protected Entity TimeSingleton { get; } Property Value Type Description Entity Version Declaration public int Version { get; } Property Value Type Description Int32 Methods AddSystem<T>(T) Declaration public T AddSystem<T>(T system) where T : ComponentSystemBase Parameters Type Name Description T system Returns Type Description T Type Parameters Name Description T CreateSystem(Type, Object[]) Declaration public ComponentSystemBase CreateSystem(Type type, params object[] constructorArguments) Parameters Type Name Description Type type Object [] constructorArguments Returns Type Description ComponentSystemBase CreateSystem<T>(Object[]) Declaration public T CreateSystem<T>(params object[] constructorArguments) where T : ComponentSystemBase Parameters Type Name Description Object [] constructorArguments Returns Type Description T Type Parameters Name Description T DestroySystem(ComponentSystemBase) Declaration public void DestroySystem(ComponentSystemBase system) Parameters Type Name Description ComponentSystemBase system Dispose() Declaration public void Dispose() DisposeAllWorlds() Declaration public static void DisposeAllWorlds() GetExistingSystem(Type) Declaration public ComponentSystemBase GetExistingSystem(Type type) Parameters Type Name Description Type type Returns Type Description ComponentSystemBase GetExistingSystem<T>() Declaration public T GetExistingSystem<T>() where T : ComponentSystemBase Returns Type Description T Type Parameters Name Description T GetOrCreateSystem(Type) Declaration public ComponentSystemBase GetOrCreateSystem(Type type) Parameters Type Name Description Type type Returns Type Description ComponentSystemBase GetOrCreateSystem<T>() Declaration public T GetOrCreateSystem<T>() where T : ComponentSystemBase Returns Type Description T Type Parameters Name Description T PopTime() Declaration public void PopTime() PushTime(TimeData) Declaration public void PushTime(TimeData newTimeData) Parameters Type Name Description TimeData newTimeData SetTime(TimeData) Declaration public void SetTime(TimeData newTimeData) Parameters Type Name Description TimeData newTimeData ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString() Update() Declaration public void Update()"
  },
  "api/Unity.Entities.UpdateWorldTimeSystem.html": {
    "href": "api/Unity.Entities.UpdateWorldTimeSystem.html",
    "title": "Class UpdateWorldTimeSystem | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class UpdateWorldTimeSystem Inheritance Object ComponentSystemBase ComponentSystem UpdateWorldTimeSystem Inherited Members ComponentSystem.PostUpdateCommands ComponentSystem.InitEntityQueryCache(Int32) ComponentSystem.Entities ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnCreate() ComponentSystemBase.OnDestroyManager() ComponentSystemBase.OnCreateManager() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.Update() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetArchetypeChunkComponentType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkComponentTypeDynamic(ComponentType) ComponentSystemBase.GetArchetypeChunkBufferType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkSharedComponentType<T>() ComponentSystemBase.GetArchetypeChunkEntityType() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [UpdateInGroup(typeof(InitializationSystemGroup))] public class UpdateWorldTimeSystem : ComponentSystem Methods OnUpdate() Declaration protected override void OnUpdate() Overrides ComponentSystem.OnUpdate() Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Entities.UniversalDelegates.RI-2.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RI-2.html",
    "title": "Delegate RI<T0, T1> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate RI<T0, T1> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RI<T0, T1>(ref T0 t0, in T1 t1); Parameters Type Name Description T0 t0 T1 t1 Type Parameters Name Description T0 T1"
  },
  "api/Unity.Entities.UniversalDelegates.R-1.html": {
    "href": "api/Unity.Entities.UniversalDelegates.R-1.html",
    "title": "Delegate R<T0> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate R<T0> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void R<T0>(ref T0 t0); Parameters Type Name Description T0 t0 Type Parameters Name Description T0"
  },
  "api/Unity.Entities.UniversalDelegates.IIIIIIII-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.IIIIIIII-8.html",
    "title": "Delegate IIIIIIII<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate IIIIIIII<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void IIIIIIII<T0, T1, T2, T3, T4, T5, T6, T7>(in T0 t0, in T1 t1, in T2 t2, in T3 t3, in T4 t4, in T5 t5, in T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.SceneViewWorldPositionAttribute.html": {
    "href": "api/Unity.Entities.SceneViewWorldPositionAttribute.html",
    "title": "Class SceneViewWorldPositionAttribute | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class SceneViewWorldPositionAttribute Inheritance Object Attribute SceneViewWorldPositionAttribute Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class SceneViewWorldPositionAttribute : Attribute, _Attribute"
  },
  "api/Unity.Entities.SceneTag.html": {
    "href": "api/Unity.Entities.SceneTag.html",
    "title": "Struct SceneTag | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct SceneTag A Unity-defined shared component assigned to all entities in the same subscene. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] public struct SceneTag : ISharedComponentData, IEquatable<SceneTag> Fields SceneEntity The root entity of the subscene. Declaration public Entity SceneEntity Field Value Type Description Entity Methods Equals(SceneTag) Two SceneTags are equal if they have the same root subscene entity. Declaration public bool Equals(SceneTag other) Parameters Type Name Description SceneTag other The other SceneTag. Returns Type Description Boolean True if both SceneTags refer to the same Subscene. False, otherwise. GetHashCode() A unique hash code for comparison. Declaration public override int GetHashCode() Returns Type Description Int32 The scene entity has code. Overrides ValueType.GetHashCode() ToString() A string for logging. Declaration public override string ToString() Returns Type Description String A string identifying the root subscene entity. Overrides ValueType.ToString()"
  },
  "api/Unity.Entities.SceneSectionData.html": {
    "href": "api/Unity.Entities.SceneSectionData.html",
    "title": "Struct SceneSectionData | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct SceneSectionData Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] public struct SceneSectionData : IComponentData Fields BoundingVolume Declaration public MinMaxAABB BoundingVolume Field Value Type Description MinMaxAABB FileSize Declaration public int FileSize Field Value Type Description Int32 ObjectReferenceCount Declaration public int ObjectReferenceCount Field Value Type Description Int32 SceneGUID Declaration public Hash128 SceneGUID Field Value Type Description Hash128 SubSectionIndex Declaration public int SubSectionIndex Field Value Type Description Int32"
  },
  "api/Unity.Entities.SceneSection.html": {
    "href": "api/Unity.Entities.SceneSection.html",
    "title": "Struct SceneSection | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct SceneSection Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] public struct SceneSection : ISharedComponentData, IEquatable<SceneSection> Fields SceneGUID Declaration public Hash128 SceneGUID Field Value Type Description Hash128 Section Declaration public int Section Field Value Type Description Int32 Methods Equals(SceneSection) Declaration public bool Equals(SceneSection other) Parameters Type Name Description SceneSection other Returns Type Description Boolean GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode()"
  },
  "api/Unity.Entities.JobComponentSystem.html": {
    "href": "api/Unity.Entities.JobComponentSystem.html",
    "title": "Class JobComponentSystem | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class JobComponentSystem An abstract class to implement in order to create a system that uses ECS-specific Jobs. Inheritance Object ComponentSystemBase JobComponentSystem CompositeRotationSystem CompositeScaleSystem CopyInitialTransformFromGameObjectSystem CopyTransformFromGameObjectSystem CopyTransformToGameObjectSystem LocalToParentSystem ParentScaleInverseSystem ParentSystem PostRotationEulerSystem RotationEulerSystem TRSToLocalToParentSystem TRSToLocalToWorldSystem WorldToLocalSystem Inherited Members ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnCreate() ComponentSystemBase.OnDestroyManager() ComponentSystemBase.OnCreateManager() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.Update() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetArchetypeChunkComponentType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkComponentTypeDynamic(ComponentType) ComponentSystemBase.GetArchetypeChunkBufferType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkSharedComponentType<T>() ComponentSystemBase.GetArchetypeChunkEntityType() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public abstract class JobComponentSystem : ComponentSystemBase Remarks Implement a JobComponentSystem subclass for systems that perform their work using IJobForEach<T0> or IJobChunk . Properties Entities Use Entities.ForEach((ref Translation translation, in Velocity velocity) => { translation.Value += velocity.Value * dt; }).Schedule(inputDependencies); Declaration protected ForEachLambdaJobDescription Entities { get; } Property Value Type Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription Job Use Job.WithCode(() => { YourCodeGoesHere(); }).Schedule(inputDependencies); Declaration protected LambdaSingleJobDescription Job { get; } Property Value Type Description Unity.Entities.CodeGeneratedJobForEach.LambdaSingleJobDescription Methods GetBufferFromEntity<T>(Boolean) Gets a BufferFromEntity<T> object that can access a DynamicBuffer<T> . Declaration public BufferFromEntity<T> GetBufferFromEntity<T>(bool isReadOnly = false) where T : struct, IBufferElementData Parameters Type Name Description Boolean isReadOnly Whether the buffer data is only read or is also written. Access data in a read-only fashion whenever possible. Returns Type Description BufferFromEntity <T> An array-like object that provides access to buffers, indexed by Entity . Type Parameters Name Description T The type of IBufferElementData stored in the buffer. Remarks Assign the returned object to a field of your Job struct so that you can access the contents of the buffer in a Job. See Also ComponentDataFromEntity <T> OnUpdate(JobHandle) Implement OnUpdate to perform the major work of this system. Declaration protected abstract JobHandle OnUpdate(JobHandle inputDeps) Parameters Type Name Description JobHandle inputDeps Existing dependencies for this system. Returns Type Description JobHandle A Job handle that contains the dependencies of the Jobs in this system. Remarks The system invokes OnUpdate once per frame on the main thread when any of this system's EntityQueries match existing entities, or if the system has the AlwaysUpdate attribute. To run a Job, create an instance of the Job struct, assign appropriate values to the struct fields and call one of the Job schedule functions. The system passes any current dependencies between Jobs -- which can include Jobs internal to this system, such as gathering entities or chunks, as well as Jobs external to this system, such as Jobs that write to the components read by this system -- in the inputDeps parameter. Your function must combine the input dependencies with any dependencies of the Jobs created in OnUpdate and return the combined object. Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type) See Also ComponentSystem"
  },
  "api/Unity.Entities.JobChunkExtensions.html": {
    "href": "api/Unity.Entities.JobChunkExtensions.html",
    "title": "Class JobChunkExtensions | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class JobChunkExtensions Extensions for scheduling and running IJobChunk Jobs. Inheritance Object JobChunkExtensions Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class JobChunkExtensions Methods Run<T>(T, EntityQuery) Runs the Job immediately on the current thread. Declaration public static void Run<T>(this T jobData, EntityQuery query) where T : struct, IJobChunk Parameters Type Name Description T jobData An IJobChunk instance. EntityQuery query The query selecting chunks with the necessary components. Type Parameters Name Description T The specific IJobChunk implementation type. RunWithoutJobs<T>(ref T, ref ArchetypeChunkIterator) Runs the job using an ArchetypeChunkIterator instead of the jobs API. Declaration public static void RunWithoutJobs<T>(this ref T jobData, ref ArchetypeChunkIterator chunkIterator) where T : struct, IJobChunk Parameters Type Name Description T jobData The job to execute. ArchetypeChunkIterator chunkIterator The ArchetypeChunkIterator of the EntityQuery to run over. Type Parameters Name Description T The specific IJobChunk implementation type. Schedule<T>(T, EntityQuery, JobHandle) Adds an IJobChunk instance to the Job scheduler queue. Declaration public static JobHandle Schedule<T>(this T jobData, EntityQuery query, JobHandle dependsOn = null) where T : struct, IJobChunk Parameters Type Name Description T jobData An IJobChunk instance. EntityQuery query The query selecting chunks with the necessary components. JobHandle dependsOn The handle identifying already scheduled Jobs that could constrain this Job. A Job that writes to a component must run before other Jobs that read or write that component. Jobs that only read the same components can run in parallel. Returns Type Description JobHandle A handle that combines the current Job with previous dependencies identified by the dependsOn parameter. Type Parameters Name Description T The specific IJobChunk implementation type."
  },
  "api/Unity.Entities.IJobForEachWithEntity-1.html": {
    "href": "api/Unity.Entities.IJobForEachWithEntity-1.html",
    "title": "Interface IJobForEachWithEntity<T0> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Interface IJobForEachWithEntity<T0> Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface IJobForEachWithEntity<T0> : IJobForEachWithEntity_EC<T0>, JobForEachExtensions.IBaseJobForEach_EC, JobForEachExtensions.IBaseJobForEach where T0 : struct, IComponentData Type Parameters Name Description T0"
  },
  "api/Unity.Entities.IJobForEach-1.html": {
    "href": "api/Unity.Entities.IJobForEach-1.html",
    "title": "Interface IJobForEach<T0> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Interface IJobForEach<T0> Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface IJobForEach<T0> : IJobForEach_C<T0>, JobForEachExtensions.IBaseJobForEach_C, JobForEachExtensions.IBaseJobForEach where T0 : struct, IComponentData Type Parameters Name Description T0"
  },
  "api/Unity.Entities.IJobChunk.html": {
    "href": "api/Unity.Entities.IJobChunk.html",
    "title": "Interface IJobChunk | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Interface IJobChunk IJobChunk is a type of Job that iterates over a set of ArchetypeChunk instances. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface IJobChunk Remarks Create and schedule an IJobChunk Job inside a JobComponentSystem . The Job component system calls the Execute function once for each EntityArchetype found by the EntityQuery used to schedule the Job. To pass data to the Execute function beyond the parameters of the Execute() function, add public fields to the IJobChunk struct declaration and set those fields immediately before scheduling the Job. You must pass the component type information for any components that the Job reads or writes using a field of type, ArchetypeChunkComponentType<T> . Get this type information by calling the appropriate GetArchetypeChunkComponentType<T>(Boolean) function for the type of component. For more information see Using IJobChunk . Methods Execute(ArchetypeChunk, Int32, Int32) Implement the Execute() function to perform a unit of work on an ArchetypeChunk . Declaration void Execute(ArchetypeChunk chunk, int chunkIndex, int firstEntityIndex) Parameters Type Name Description ArchetypeChunk chunk The current chunk. Int32 chunkIndex The index of the current chunk within the list of all chunks found by the Job's EntityQuery . Note that chunks are not processed in index order, except by chance. Int32 firstEntityIndex The index of the first entity in the current chunk within the list of all entities in all the chunks found by the Job's EntityQuery . Remarks The Job component system calls the Execute function once for each EntityArchetype found by the EntityQuery used to schedule the Job."
  },
  "api/Unity.Entities.IDynamicBufferContainer.html": {
    "href": "api/Unity.Entities.IDynamicBufferContainer.html",
    "title": "Interface IDynamicBufferContainer | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Interface IDynamicBufferContainer Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface IDynamicBufferContainer Properties ElementType Declaration Type ElementType { get; } Property Value Type Description Type"
  },
  "api/Unity.Entities.Prefab.html": {
    "href": "api/Unity.Entities.Prefab.html",
    "title": "Struct Prefab | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct Prefab Marks the entity as a prefab, which implicitly disables the entity. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct Prefab : IComponentData Remarks By default, an EntityQuery ignores all entities that have a Prefab component. You can override this default behavior by setting the IncludePrefab flag of the EntityQueryDesc object used to create the query. When using the EntityQueryBuilder class in a ComponentSystem, set this flag by calling the With(EntityQueryOptions) function."
  },
  "api/Unity.Entities.PackedSharedComponentDataChange.html": {
    "href": "api/Unity.Entities.PackedSharedComponentDataChange.html",
    "title": "Struct PackedSharedComponentDataChange | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct PackedSharedComponentDataChange Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct PackedSharedComponentDataChange Fields BoxedSharedValue Declaration public object BoxedSharedValue Field Value Type Description Object Component Declaration public PackedComponent Component Field Value Type Description PackedComponent"
  },
  "api/Unity.Entities.PackedManagedComponentDataChange.html": {
    "href": "api/Unity.Entities.PackedManagedComponentDataChange.html",
    "title": "Struct PackedManagedComponentDataChange | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct PackedManagedComponentDataChange Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct PackedManagedComponentDataChange Fields BoxedValue Declaration public object BoxedValue Field Value Type Description Object Component Declaration public PackedComponent Component Field Value Type Description PackedComponent"
  },
  "api/Unity.Entities.PackedComponentDataChange.html": {
    "href": "api/Unity.Entities.PackedComponentDataChange.html",
    "title": "Struct PackedComponentDataChange | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct PackedComponentDataChange Represents a packed component data change within a EntityChangeSet Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct PackedComponentDataChange Fields Component The entity and component this change is targeted. Declaration public PackedComponent Component Field Value Type Description PackedComponent Offset The start offset for this data change. Declaration public int Offset Field Value Type Description Int32 Remarks This is the field offset and NOT the payload offset. Size The size of this data change. This is be the size in ComponentData for this entry. Declaration public int Size Field Value Type Description Int32"
  },
  "api/Unity.Entities.LambdaJobDescriptionConstructionMethods.html": {
    "href": "api/Unity.Entities.LambdaJobDescriptionConstructionMethods.html",
    "title": "Class LambdaJobDescriptionConstructionMethods | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class LambdaJobDescriptionConstructionMethods Inheritance Object LambdaJobDescriptionConstructionMethods Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class LambdaJobDescriptionConstructionMethods Methods Run<TDescription>(TDescription) Declaration public static void Run<TDescription>(this TDescription description) where TDescription : ILambdaJobDescription Parameters Type Name Description TDescription description Type Parameters Name Description TDescription Schedule<TDescription>(TDescription, JobHandle) Declaration public static JobHandle Schedule<TDescription>(this TDescription description, JobHandle dependency) where TDescription : ILambdaJobDescription Parameters Type Name Description TDescription description JobHandle dependency Returns Type Description JobHandle Type Parameters Name Description TDescription WithBurst<TDescription>(TDescription, FloatMode, FloatPrecision, Boolean) Declaration public static TDescription WithBurst<TDescription>(this TDescription description, FloatMode floatMode = null, FloatPrecision floatPrecision = null, bool synchronousCompilation = false) where TDescription : ILambdaJobDescription Parameters Type Name Description TDescription description FloatMode floatMode FloatPrecision floatPrecision Boolean synchronousCompilation Returns Type Description TDescription Type Parameters Name Description TDescription WithDeallocateOnJobCompletion<TDescription, TCapturedVariableType>(TDescription, TCapturedVariableType) Declaration public static TDescription WithDeallocateOnJobCompletion<TDescription, TCapturedVariableType>(this TDescription description, TCapturedVariableType capturedVariable) where TDescription : ILambdaJobDescription Parameters Type Name Description TDescription description TCapturedVariableType capturedVariable Returns Type Description TDescription Type Parameters Name Description TDescription TCapturedVariableType WithName<TDescription>(TDescription, String) Declaration public static TDescription WithName<TDescription>(this TDescription description, string name) where TDescription : ILambdaJobDescription Parameters Type Name Description TDescription description String name Returns Type Description TDescription Type Parameters Name Description TDescription WithNativeDisableContainerSafetyRestriction<TDescription, TCapturedVariableType>(TDescription, TCapturedVariableType) Declaration public static TDescription WithNativeDisableContainerSafetyRestriction<TDescription, TCapturedVariableType>(this TDescription description, TCapturedVariableType capturedVariable) where TDescription : ILambdaJobDescription Parameters Type Name Description TDescription description TCapturedVariableType capturedVariable Returns Type Description TDescription Type Parameters Name Description TDescription TCapturedVariableType WithNativeDisableParallelForRestriction<TDescription, TCapturedVariableType>(TDescription, TCapturedVariableType) Declaration public static TDescription WithNativeDisableParallelForRestriction<TDescription, TCapturedVariableType>(this TDescription description, TCapturedVariableType capturedVariable) where TDescription : ILambdaJobDescription Parameters Type Name Description TDescription description TCapturedVariableType capturedVariable Returns Type Description TDescription Type Parameters Name Description TDescription TCapturedVariableType WithNativeDisableUnsafePtrRestriction<TDescription, TCapturedVariableType>(TDescription, TCapturedVariableType*) Declaration public static TDescription WithNativeDisableUnsafePtrRestriction<TDescription, TCapturedVariableType>(this TDescription description, TCapturedVariableType*capturedVariable) where TDescription : ILambdaJobDescription where TCapturedVariableType : struct Parameters Type Name Description TDescription description TCapturedVariableType* capturedVariable Returns Type Description TDescription Type Parameters Name Description TDescription TCapturedVariableType WithoutBurst<TDescription>(TDescription) Declaration public static TDescription WithoutBurst<TDescription>(this TDescription description) where TDescription : ILambdaJobDescription Parameters Type Name Description TDescription description Returns Type Description TDescription Type Parameters Name Description TDescription WithReadOnly<TDescription, TCapturedVariableType>(TDescription, TCapturedVariableType) Declaration public static TDescription WithReadOnly<TDescription, TCapturedVariableType>(this TDescription description, TCapturedVariableType capturedVariable) where TDescription : ILambdaJobDescription Parameters Type Name Description TDescription description TCapturedVariableType capturedVariable Returns Type Description TDescription Type Parameters Name Description TDescription TCapturedVariableType WithStructuralChanges<TDescription>(TDescription) Declaration public static TDescription WithStructuralChanges<TDescription>(this TDescription description) where TDescription : ILambdaJobDescription Parameters Type Name Description TDescription description Returns Type Description TDescription Type Parameters Name Description TDescription"
  },
  "api/Unity.Entities.LambdaJobChunkDescription_SetSharedComponent.html": {
    "href": "api/Unity.Entities.LambdaJobChunkDescription_SetSharedComponent.html",
    "title": "Class LambdaJobChunkDescription_SetSharedComponent | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class LambdaJobChunkDescription_SetSharedComponent Inheritance Object LambdaJobChunkDescription_SetSharedComponent Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class LambdaJobChunkDescription_SetSharedComponent Methods SetSharedComponentFilterOnQuery<T>(LambdaJobChunkDescription, T, EntityQuery) Declaration public static LambdaJobChunkDescription SetSharedComponentFilterOnQuery<T>(LambdaJobChunkDescription description, T sharedComponent, EntityQuery query) where T : struct, ISharedComponentData Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription description T sharedComponent EntityQuery query Returns Type Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription Type Parameters Name Description T"
  },
  "api/Unity.Entities.LambdaJobChunkDescriptionConstructionMethods.html": {
    "href": "api/Unity.Entities.LambdaJobChunkDescriptionConstructionMethods.html",
    "title": "Class LambdaJobChunkDescriptionConstructionMethods | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class LambdaJobChunkDescriptionConstructionMethods Inheritance Object LambdaJobChunkDescriptionConstructionMethods Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class LambdaJobChunkDescriptionConstructionMethods Methods ForEach(LambdaJobChunkDescription, LambdaJobChunkDescriptionConstructionMethods.JobChunkDelegate) Declaration public static LambdaJobChunkDescription ForEach(this LambdaJobChunkDescription description, LambdaJobChunkDescriptionConstructionMethods.JobChunkDelegate code) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription description LambdaJobChunkDescriptionConstructionMethods.JobChunkDelegate code Returns Type Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription"
  },
  "api/Unity.Entities.LayoutUtility.html": {
    "href": "api/Unity.Entities.LayoutUtility.html",
    "title": "Struct LayoutUtility | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct LayoutUtility Low-level utility functions for AOS->SOA (scatter) and SOA->AOS (gather) conversions. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct LayoutUtility Methods GatherChunkedSOA8(NativeArray<SOAFieldInfo>, Int32, Byte*, Void*, Int32) Declaration public static void GatherChunkedSOA8(NativeArray<SOAFieldInfo> fields, int fieldSizeSum, byte *sourceBaseAddress, void *target, int sourceIndex) Parameters Type Name Description NativeArray < SOAFieldInfo > fields Int32 fieldSizeSum Byte * sourceBaseAddress Void * target Int32 sourceIndex GatherFullSOA(NativeArray<SOAFieldInfo>, Byte*, Void*, Int32, Int32) Gather AOS data from fully parallel arrays of fields. Declaration public static void GatherFullSOA(NativeArray<SOAFieldInfo> fields, byte *sourceBaseAddress, void *target, int sourceIndex, int sourceArraySize) Parameters Type Name Description NativeArray < SOAFieldInfo > fields Struct type descriptor Byte * sourceBaseAddress Pointer to first byte of source SOA array Void * target Pointer to target AOS struct instance to be gathered into Int32 sourceIndex The index of the SOA element to be gathered Int32 sourceArraySize The number of elements in the SOA data ScatterChunkedSOA8(NativeArray<SOAFieldInfo>, Int32, Byte*, Void*, Int32) Declaration public static void ScatterChunkedSOA8(NativeArray<SOAFieldInfo> fields, int fieldSizeSum, byte *targetBaseAddress, void *source, int targetIndex) Parameters Type Name Description NativeArray < SOAFieldInfo > fields Int32 fieldSizeSum Byte * targetBaseAddress Void * source Int32 targetIndex ScatterFullSOA(NativeArray<SOAFieldInfo>, Byte*, Void*, Int32, Int32) Declaration public static void ScatterFullSOA(NativeArray<SOAFieldInfo> fields, byte *targetBaseAddress, void *source, int targetIndex, int targetArraySize) Parameters Type Name Description NativeArray < SOAFieldInfo > fields Byte * targetBaseAddress Void * source Int32 targetIndex Int32 targetArraySize"
  },
  "api/Unity.Entities.ArchetypeChunk.html": {
    "href": "api/Unity.Entities.ArchetypeChunk.html",
    "title": "Struct ArchetypeChunk | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct ArchetypeChunk A block of unmanaged memory containing the components of entities sharing the same Unity.Entities.Archetype . Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct ArchetypeChunk : IEquatable<ArchetypeChunk> Properties Archetype The archetype of the entities stored in this chunk. Declaration public EntityArchetype Archetype { get; } Property Value Type Description EntityArchetype Remarks All entities in a chunk must have the same Unity.Entities.Archetype . Capacity The number of entities that can fit in this chunk. Declaration public int Capacity { get; } Property Value Type Description Int32 Remarks The capacity of a chunk depends on the size of the components making up the Unity.Entities.Archetype of the entities stored in the chunk. Count The number of entities currently stored in the chunk. Declaration public int Count { get; } Property Value Type Description Int32 Full Whether this chunk is exactly full. Declaration public bool Full { get; } Property Value Type Description Boolean Null A special \"null\" ArchetypeChunk that you can use to test whether ArchetypeChunk instances are valid. Declaration public static ArchetypeChunk Null { get; } Property Value Type Description ArchetypeChunk Remarks An ArchetypeChunk struct that refers to a chunk of memory that has been freed will be equal to this \"null\" ArchetypeChunk instance. Methods DidChange<T>(ArchetypeChunkBufferType<T>, UInt32) Reports whether a dynamic buffer component in the chunk, of the type identified by chunkBufferType , could have changed. Declaration public bool DidChange<T>(ArchetypeChunkBufferType<T> chunkBufferType, uint version) where T : struct, IBufferElementData Parameters Type Name Description ArchetypeChunkBufferType <T> chunkBufferType Type and safety information for the component type to check. Create this object by calling immediately before scheduling a job. Pass the object to a job using a public field you define as part of the job struct. UInt32 version The version to compare. In a system, this parameter should be set to the current LastSystemVersion at the time the job is run or scheduled. Returns Type Description Boolean True, if the version number stored in the chunk for this component is more recent than the version passed to the version parameter. Type Parameters Name Description T The data type of the elements in the dynamic buffer. Remarks Note that for efficiency, the change version applies to whole chunks not individual entities. The change version is incremented even when another job or system that has declared write access to a component does not actually change the component value. DidChange<T>(ArchetypeChunkComponentType<T>, UInt32) Reports whether any of IComponentData components in the chunk, of the type identified by chunkComponentType , could have changed. Declaration public bool DidChange<T>(ArchetypeChunkComponentType<T> chunkComponentType, uint version) where T : IComponentData Parameters Type Name Description ArchetypeChunkComponentType <T> chunkComponentType An object containing type and job safety information. Create this object by calling immediately before scheduling a job. Pass the object to a job using a public field you define as part of the job struct. UInt32 version The version to compare. In a system, this parameter should be set to the current LastSystemVersion at the time the job is run or scheduled. Returns Type Description Boolean True, if the version number stored in the chunk for this component is more recent than the version passed to the version parameter. Type Parameters Name Description T The component type. Remarks Note that for efficiency, the change version applies to whole chunks not individual entities. The change version is incremented even when another job or system that has declared write access to a component does not actually change the component value. DidChange<T>(ArchetypeChunkSharedComponentType<T>, UInt32) Reports whether a shared components in the chunk, of the type identified by chunkSharedComponentData , could have changed. Declaration public bool DidChange<T>(ArchetypeChunkSharedComponentType<T> chunkSharedComponentData, uint version) where T : struct, ISharedComponentData Parameters Type Name Description ArchetypeChunkSharedComponentType <T> chunkSharedComponentData Type and safety information for the component type to check. Create this object by calling immediately before scheduling a job. Pass the object to a job using a public field you define as part of the job struct. UInt32 version The version to compare. In a system, this parameter should be set to the current LastSystemVersion at the time the job is run or scheduled. Returns Type Description Boolean True, if the version number stored in the chunk for this component is more recent than the version passed to the version parameter. Type Parameters Name Description T The shared component type. Remarks Note that for efficiency, the change version applies to whole chunks not individual entities. The change version is incremented even when another job or system that has declared write access to a component does not actually change the component value. Equals(Object) Two ArchetypeChunk instances are equal if they reference the same block of chunk memory. Declaration public override bool Equals(object compare) Parameters Type Name Description Object compare An object Returns Type Description Boolean True if compare is an ArchetypeChunk instance that references the same memory, or both contain null memory references; otherwise false. Overrides ValueType.Equals(Object) Equals(ArchetypeChunk) Two ArchetypeChunk instances are equal if they reference the same block of chunk memory. Declaration public bool Equals(ArchetypeChunk archetypeChunk) Parameters Type Name Description ArchetypeChunk archetypeChunk Another ArchetypeChunk instance Returns Type Description Boolean True, if both ArchetypeChunk instances reference the same memory or both contain null memory references. GetBufferAccessor<T>(ArchetypeChunkBufferType<T>) Gets a struct that provides an array-like interface to a dynamic buffer in this chunk. Declaration public BufferAccessor<T> GetBufferAccessor<T>(ArchetypeChunkBufferType<T> bufferComponentType) where T : struct, IBufferElementData Parameters Type Name Description ArchetypeChunkBufferType <T> bufferComponentType Returns Type Description BufferAccessor <T> The buffer accessor. Type Parameters Name Description T The data type of the elements in the dynamic buffer. GetChunkComponentData<T>(ArchetypeChunkComponentType<T>) Gets the value of the chunk component of type T. Declaration public T GetChunkComponentData<T>(ArchetypeChunkComponentType<T> chunkComponentType) where T : struct Parameters Type Name Description ArchetypeChunkComponentType <T> chunkComponentType Type and safety information for the component type to check. Create this object by calling immediately before scheduling a job. Pass the object to a job using a public field you define as part of the job struct. Returns Type Description T The chunk component value. Type Parameters Name Description T The type of component. Remarks Chunk components are components associated with a chunk rather than an individual entity. You can use chunk components to hold information that applies to all the entities in a chunk, such as a bounding box for entities representing 3D objects. GetComponentObjects<T>(ArchetypeChunkComponentType<T>, EntityManager) Gets an array of managed (class) components. Declaration public ArchetypeChunkComponentObjects<T> GetComponentObjects<T>(ArchetypeChunkComponentType<T> componentType, EntityManager manager) where T : class Parameters Type Name Description ArchetypeChunkComponentType <T> componentType An object containing type and job safety information. Create this object by calling immediately before scheduling a job. EntityManager manager The entity manager for the World of which this chunk is a member. Returns Type Description ArchetypeChunkComponentObjects <T> An array containing references to the components of the specified type. Type Parameters Name Description T The class of the components to retrieve. Remarks This function can only be called when an EntityManager is accessible, namely on the main thread. GetComponentVersion<T>(ArchetypeChunkBufferType<T>) Gets the current change version of a dynamic buffer component type in this chunk. Declaration public uint GetComponentVersion<T>(ArchetypeChunkBufferType<T> chunkBufferType) where T : struct, IBufferElementData Parameters Type Name Description ArchetypeChunkBufferType <T> chunkBufferType Type and safety information for the component type to check. Create this object by calling immediately before scheduling a job. Pass the object to a job using a public field you define as part of the job struct. Returns Type Description UInt32 The current version number. Type Parameters Name Description T The type of the buffer elements. Remarks The ECS system updates the change version number of a chunk every time data in the chunk is accessed with write permission (even when the job or system that has declared write access to a component does not actually change any component values). GetComponentVersion<T>(ArchetypeChunkComponentType<T>) Gets the current change version of a component type in this chunk. Declaration public uint GetComponentVersion<T>(ArchetypeChunkComponentType<T> chunkComponentType) where T : IComponentData Parameters Type Name Description ArchetypeChunkComponentType <T> chunkComponentType Type and safety information for the component type to check. Create this object by calling immediately before scheduling a job. Pass the object to a job using a public field you define as part of the job struct. Returns Type Description UInt32 The current version number. Type Parameters Name Description T The component type. Remarks The ECS system updates the change version number of a chunk every time data in the chunk is accessed with write permission (even when the job or system that has declared write access to a component does not actually change any component values). GetComponentVersion<T>(ArchetypeChunkSharedComponentType<T>) Gets the current change version of a shared component type in this chunk. Declaration public uint GetComponentVersion<T>(ArchetypeChunkSharedComponentType<T> chunkSharedComponentData) where T : struct, ISharedComponentData Parameters Type Name Description ArchetypeChunkSharedComponentType <T> chunkSharedComponentData Type and safety information for the component type to check. Create this object by calling immediately before scheduling a job. Pass the object to a job using a public field you define as part of the job struct. Returns Type Description UInt32 The current version number. Type Parameters Name Description T The shared component type. Remarks The ECS system updates the change version number of a chunk every time data in the chunk is accessed with write permission (even when the job or system that has declared write access to a component does not actually change any component values). GetDynamicComponentDataArrayReinterpret<T>(ArchetypeChunkComponentTypeDynamic, Int32) Declaration public NativeArray<T> GetDynamicComponentDataArrayReinterpret<T>(ArchetypeChunkComponentTypeDynamic chunkComponentType, int expectedTypeSize) where T : struct Parameters Type Name Description ArchetypeChunkComponentTypeDynamic chunkComponentType Int32 expectedTypeSize Returns Type Description NativeArray <T> Type Parameters Name Description T Exceptions Type Condition ArgumentException InvalidOperationException GetHashCode() Computes a hashcode to support hash-based collections. Declaration public override int GetHashCode() Returns Type Description Int32 The computed hash. Overrides ValueType.GetHashCode() GetNativeArray(ArchetypeChunkEntityType) Provides a native array interface to entity instances stored in this chunk. Declaration public NativeArray<Entity> GetNativeArray(ArchetypeChunkEntityType archetypeChunkEntityType) Parameters Type Name Description ArchetypeChunkEntityType archetypeChunkEntityType An object containing type and job safety information. Create this object by calling immediately before scheduling a job. Pass the object to a job using a public field you define as part of the job struct. Returns Type Description NativeArray < Entity > A native array containing the entities in the chunk. Remarks The native array returned by this method references existing data, not a copy. GetNativeArray<T>(ArchetypeChunkComponentType<T>) Provides a native array interface to components stored in this chunk. Declaration public NativeArray<T> GetNativeArray<T>(ArchetypeChunkComponentType<T> chunkComponentType) where T : struct, IComponentData Parameters Type Name Description ArchetypeChunkComponentType <T> chunkComponentType An object containing type and job safety information. Create this object by calling immediately before scheduling a job. Pass the object to a job using a public field you define as part of the job struct. Returns Type Description NativeArray <T> A native array containing the components in the chunk. Type Parameters Name Description T The data type of the component. Remarks The native array returned by this method references existing data, not a copy. Exceptions Type Condition ArgumentException If you call this function on a \"tag\" component type (which is an empty component with no fields). GetSharedComponentData<T>(ArchetypeChunkSharedComponentType<T>, EntityManager) Gets the value of the shared component of type T. Declaration public T GetSharedComponentData<T>(ArchetypeChunkSharedComponentType<T> chunkSharedComponentData, EntityManager entityManager) where T : struct, ISharedComponentData Parameters Type Name Description ArchetypeChunkSharedComponentType <T> chunkSharedComponentData Type and safety information for the shared component. Create this object by calling immediately before scheduling a job. Pass the object to a job using a public field you define as part of the job struct. EntityManager entityManager The entity manager for the World of which this chunk is a part. Returns Type Description T A copy of the shared component value assigned to this chunk. Type Parameters Name Description T The data type of the shared component. Remarks This function can only be used when an instance of the EntityManager is available, namely on the main thread. GetSharedComponentIndex<T>(ArchetypeChunkSharedComponentType<T>) Gets the value index of the specified shared component in this chunk. Declaration public int GetSharedComponentIndex<T>(ArchetypeChunkSharedComponentType<T> chunkSharedComponentData) where T : struct, ISharedComponentData Parameters Type Name Description ArchetypeChunkSharedComponentType <T> chunkSharedComponentData Type and safety information for the shared component type. Create this object by calling immediately before scheduling a job. Pass the object to a job using a public field you define as part of the job struct. Returns Type Description Int32 The index of shared component value assigned to this chunk in the list of unique shared component values. Type Parameters Name Description T The data type of the shared component. Remarks Because shared components can contain reference types, you cannot use them directly in a job. Instead, you can get the index to the value assigned to a specific chunk when you need to process entities differently depending on that value. Has(ArchetypeChunkComponentTypeDynamic) Reports whether this chunk contains the specified generic component type. Declaration public bool Has(ArchetypeChunkComponentTypeDynamic chunkComponentType) Parameters Type Name Description ArchetypeChunkComponentTypeDynamic chunkComponentType An object containing type and job safety information. Create this object by calling immediately before scheduling a job. Pass the object to a job using a public field you define as part of the job struct. Returns Type Description Boolean True, if an array of components with the matching type exist in this chunk. Remarks Use this version of the Has function with components defined with generic parameters. Has<T>(ArchetypeChunkBufferType<T>) Reports whether this chunk contains a dynamic buffer containing the specified component type. Declaration public bool Has<T>(ArchetypeChunkBufferType<T> chunkBufferType) where T : struct, IBufferElementData Parameters Type Name Description ArchetypeChunkBufferType <T> chunkBufferType An object containing type and job safety information. Create this object by calling immediately before scheduling a job. Pass the object to a job using a public field you define as part of the job struct. Returns Type Description Boolean True, if this chunk contains an array of the dynamic buffers containing the specified component type. Type Parameters Name Description T The data type of the component stored in the dynamic buffer. Remarks When an EntityQuery includes optional dynamic buffer types (with Any ), some chunks returned by the query may have these dynamic buffers components and some may not. Use this function to determine whether or not the current chunk contains one of these optional dynamic buffers. Has<T>(ArchetypeChunkComponentType<T>) Reports whether this chunk contains the specified component type. Declaration public bool Has<T>(ArchetypeChunkComponentType<T> chunkComponentType) where T : IComponentData Parameters Type Name Description ArchetypeChunkComponentType <T> chunkComponentType An object containing type and job safety information. Create this object by calling immediately before scheduling a job. Pass the object to a job using a public field you define as part of the job struct. Returns Type Description Boolean True, if this chunk contains an array of the specified component type. Type Parameters Name Description T The data type of the component. Remarks When an EntityQuery includes optional components (using Any ), some chunks returned by the query may contain such components and some may not. Use this function to determine whether or not the current chunk contains one of these optional component types. Has<T>(ArchetypeChunkSharedComponentType<T>) Reports whether this chunk contains a shared component of the specified component type. Declaration public bool Has<T>(ArchetypeChunkSharedComponentType<T> chunkComponentType) where T : struct, ISharedComponentData Parameters Type Name Description ArchetypeChunkSharedComponentType <T> chunkComponentType An object containing type and job safety information. Create this object by calling immediately before scheduling a job. Pass the object to a job using a public field you define as part of the job struct. Returns Type Description Boolean True, if this chunk contains a shared component of the specified type. Type Parameters Name Description T The data type of the shared component. Remarks When an EntityQuery includes optional components used as shared components (with Any ), some chunks returned by the query may have these shared components and some may not. Use this function to determine whether or not the current chunk contains one of these optional component types as a shared component. HasChunkComponent<T>(ArchetypeChunkComponentType<T>) Reports whether this chunk contains a chunk component of the specified component type. Declaration public bool HasChunkComponent<T>(ArchetypeChunkComponentType<T> chunkComponentType) where T : struct, IComponentData Parameters Type Name Description ArchetypeChunkComponentType <T> chunkComponentType An object containing type and job safety information. Create this object by calling immediately before scheduling a job. Pass the object to a job using a public field you define as part of the job struct. Returns Type Description Boolean True, if this chunk contains a chunk component of the specified type. Type Parameters Name Description T The data type of the chunk component. Remarks When an EntityQuery includes optional components used as chunk components (with Any ), some chunks returned by the query may have these chunk components and some may not. Use this function to determine whether or not the current chunk contains one of these optional component types as a chunk component. Invalid() Reports whether this ArchetypeChunk instance is invalid. Declaration public bool Invalid() Returns Type Description Boolean True, if no Unity.Entities.Archetype is associated with the this ArchetypeChunk instance. Locked() Reports whether this ArchetypeChunk is locked. Declaration public bool Locked() Returns Type Description Boolean True, if locked. See Also LockChunk(ArchetypeChunk) UnlockChunk(ArchetypeChunk) NumSharedComponents() The number of shared components in the archetype associated with this chunk. Declaration public int NumSharedComponents() Returns Type Description Int32 The shared component count. SetChunkComponentData<T>(ArchetypeChunkComponentType<T>, T) Sets the value of the chunk component of type T. Declaration public void SetChunkComponentData<T>(ArchetypeChunkComponentType<T> chunkComponentType, T value) where T : struct Parameters Type Name Description ArchetypeChunkComponentType <T> chunkComponentType Type and safety information for the component type to check. Create this object by calling immediately before scheduling a job. Pass the object to a job using a public field you define as part of the job struct. T value An instance of type T to assign to the chunk component. Type Parameters Name Description T The type of component. Remarks Chunk components are components associated with a chunk rather than an individual entity. You can use chunk components to hold information that applies to all the entities in a chunk, such as a bounding box for entities representing 3D objects. Operators Equality(ArchetypeChunk, ArchetypeChunk) Two ArchetypeChunk instances are equal if they reference the same block of chunk memory. Declaration public static bool operator ==(ArchetypeChunk lhs, ArchetypeChunk rhs) Parameters Type Name Description ArchetypeChunk lhs An ArchetypeChunk ArchetypeChunk rhs Another ArchetypeChunk Returns Type Description Boolean True, if both ArchetypeChunk instances reference the same memory, or both contain null memory references. Inequality(ArchetypeChunk, ArchetypeChunk) Two ArchetypeChunk instances are only equal if they reference the same block of chunk memory. Declaration public static bool operator !=(ArchetypeChunk lhs, ArchetypeChunk rhs) Parameters Type Name Description ArchetypeChunk lhs An ArchetypeChunk ArchetypeChunk rhs Another ArchetypeChunk Returns Type Description Boolean True, if the ArchetypeChunk instances reference different blocks of memory."
  },
  "api/Unity.Entities.AlwaysUpdateSystemAttribute.html": {
    "href": "api/Unity.Entities.AlwaysUpdateSystemAttribute.html",
    "title": "Class AlwaysUpdateSystemAttribute | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class AlwaysUpdateSystemAttribute Inheritance Object Attribute AlwaysUpdateSystemAttribute Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [AttributeUsage(AttributeTargets.Class)] public class AlwaysUpdateSystemAttribute : Attribute, _Attribute"
  },
  "api/Unity.Build.html": {
    "href": "api/Unity.Build.html",
    "title": "Namespace Unity.Build | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Namespace Unity.Build Classes AssetGuidAttribute Attribute used to make a or be displayed as an asset. BuildArtifacts API for managing build artifacts. BuildContext Holds contextual information while a BuildPipeline is executing. BuildManifest Holds information about exported assets throughout a BuildPipeline execution. All exported assets listed in the build manifest will also be installed in the build data directory. BuildPipeline Defines a list of IBuildStep to run in order. BuildPipelineResult Holds the results of the execution of a BuildPipeline . BuildProgress Scoped progress indicator that will clear itself on dispose. BuildSettings Can stores a set of unique components, which can be inherited or overridden using dependencies. BuildStep Base class for build steps that are executed througout a BuildPipeline . BuildStepAttribute Attribute for hiding build steps from the GUI and specifying a display name with only a Type. BuildStepResult Holds the result of the execution of a IBuildStep . BuildTypeCache ComponentContainer<TObject, TComponent> Base class that stores a set of unique component. Other ComponentContainer<TObject, TComponent> can be added as dependencies to get inherited or overridden items. RunStep RunStepResult Holds the result of the execution of a IRunStep . ScriptableObjectPropertyContainer<TObject> Provides the necessary implementation to use properties and serialization with a . Interfaces IBuildArtifact Interface for information about a build. IBuildPipelineComponent Base interface for BuildSettings components that provides the BuildPipeline . IBuildSettingsComponent Defines the settings used throughout a BuildPipeline . Base interface for all BuildSettings components. IBuildStep Base interface for BuildStep . Note: When writing a new build step, derive from BuildStep instead of this interface. IRunInstance IRunStep Enums BuildConfiguration List of possible build configurations. BuildStepAttribute.Flags Flags types for build steps."
  },
  "api/Unity.Build.ScriptableObjectPropertyContainer-1.html": {
    "href": "api/Unity.Build.ScriptableObjectPropertyContainer-1.html",
    "title": "Class ScriptableObjectPropertyContainer<TObject> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class ScriptableObjectPropertyContainer<TObject> Provides the necessary implementation to use properties and serialization with a . Inheritance Object ScriptableObjectPropertyContainer<TObject> BuildPipeline ComponentContainer<TObject, TComponent> Namespace : Unity.Build <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] public abstract class ScriptableObjectPropertyContainer<TObject> : ScriptableObject, ISerializationCallbackReceiver where TObject : ScriptableObject Type Parameters Name Description TObject The type of the . Methods CreateAsset(String, Action<TObject>) Create a new asset instance saved to disk. Declaration public static TObject CreateAsset(string assetPath, Action<TObject> mutator = null) Parameters Type Name Description String assetPath The location where to create the asset. Action <TObject> mutator Optional mutator that can be used to modify the asset. Returns Type Description TObject The new asset instance. CreateInstance(Action<TObject>) Create a new asset instance. Declaration public static TObject CreateInstance(Action<TObject> mutator = null) Parameters Type Name Description Action <TObject> mutator Optional mutator that can be used to modify the asset. Returns Type Description TObject The new asset instance. DeserializeFromJson(ScriptableObjectPropertyContainer<TObject>, String) Deserialize from a JSON String into the container. Declaration public static bool DeserializeFromJson(ScriptableObjectPropertyContainer<TObject> container, string json) Parameters Type Name Description ScriptableObjectPropertyContainer <TObject> container The container to deserialize into. String json The JSON string to deserialize from. Returns Type Description Boolean true if the operation is successful, false otherwise. DeserializeFromPath(ScriptableObjectPropertyContainer<TObject>, String) Deserialize from a file into the container. Declaration public static bool DeserializeFromPath(ScriptableObjectPropertyContainer<TObject> container, string path) Parameters Type Name Description ScriptableObjectPropertyContainer <TObject> container The container to deserialize into. String path The file path to deserialize from. Returns Type Description Boolean true if the operation is successful, false otherwise. DeserializeFromStream(ScriptableObjectPropertyContainer<TObject>, Stream) Deserialize from a stream into the container. Declaration public static bool DeserializeFromStream(ScriptableObjectPropertyContainer<TObject> container, Stream stream) Parameters Type Name Description ScriptableObjectPropertyContainer <TObject> container The container to deserialize into. Stream stream The stream to deserialize from. Returns Type Description Boolean true if the operation is successful, false otherwise. LoadAsset(GUID) Load an asset from the specified asset . Declaration public static TObject LoadAsset(GUID assetGuid) Parameters Type Name Description GUID assetGuid The asset to load from. Returns Type Description TObject The loaded asset if successful, null otherwise. LoadAsset(String) Load an asset from the specified asset path. Declaration public static TObject LoadAsset(string assetPath) Parameters Type Name Description String assetPath The asset path to load from. Returns Type Description TObject The loaded asset if successful, null otherwise. OnAfterDeserialize() Declaration public void OnAfterDeserialize() OnBeforeSerialize() Declaration public void OnBeforeSerialize() OnEnable() Declaration public void OnEnable() Reset() Reset this asset in preparation for deserialization. Declaration protected virtual void Reset() RestoreAsset() Restore this asset from disk. Declaration public bool RestoreAsset() Returns Type Description Boolean true if the operation is successful, false otherwise. Sanitize() Sanitize this asset after deserialization. Declaration protected virtual void Sanitize() SaveAsset(String) Save this asset to disk. If no asset path is provided, asset is saved at its original location. Declaration public bool SaveAsset(string assetPath = null) Parameters Type Name Description String assetPath Optional file path where to save the asset. Returns Type Description Boolean true if the operation is successful, false otherwise. SerializeToJson() Serialize this container to a JSON String . Declaration public string SerializeToJson() Returns Type Description String The container as a JSON String if the serialization is successful, null otherwise. SerializeToPath(String) Serialize this container to a file. Declaration public void SerializeToPath(string path) Parameters Type Name Description String path The file path to write into. SerializeToStream(Stream) Serialize this container to a stream. Declaration public void SerializeToStream(Stream stream) Parameters Type Name Description Stream stream The stream the serialize into. Events AssetChanged Event invoked when the asset changed on disk. Declaration public static event Action<TObject> AssetChanged Event Type Type Description Action <TObject> JsonVisitorRegistration Event invoked when the container registers used for serialization. It provides an opportunity to register additional property visitor adapters. Declaration public static event Action<JsonVisitor> JsonVisitorRegistration Event Type Type Description Action < JsonVisitor >"
  },
  "api/Unity.Build.IBuildArtifact.html": {
    "href": "api/Unity.Build.IBuildArtifact.html",
    "title": "Interface IBuildArtifact | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Interface IBuildArtifact Interface for information about a build. Namespace : Unity.Build <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface IBuildArtifact"
  },
  "api/Unity.Build.Common.SceneList.html": {
    "href": "api/Unity.Build.Common.SceneList.html",
    "title": "Class SceneList | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class SceneList Inheritance Object SceneList Namespace : Unity.Build.Common <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public sealed class SceneList : IBuildSettingsComponent Properties BuildCurrentScene Declaration public bool BuildCurrentScene { get; set; } Property Value Type Description Boolean Scenes Declaration public List<GlobalObjectId> Scenes { get; set; } Property Value Type Description List < GlobalObjectId > Methods GetScenePathsForBuild() Declaration public string[] GetScenePathsForBuild() Returns Type Description String []"
  },
  "api/Unity.Build.Common.GraphicsSettings.html": {
    "href": "api/Unity.Build.Common.GraphicsSettings.html",
    "title": "Class GraphicsSettings | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class GraphicsSettings Inheritance Object GraphicsSettings Namespace : Unity.Build.Common <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public sealed class GraphicsSettings : IBuildSettingsComponent Fields ColorSpace Declaration public ColorSpace ColorSpace Field Value Type Description ColorSpace"
  },
  "api/Unity.Build.Common.BuildStepExtensions.html": {
    "href": "api/Unity.Build.Common.BuildStepExtensions.html",
    "title": "Class BuildStepExtensions | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class BuildStepExtensions Inheritance Object BuildStepExtensions Namespace : Unity.Build.Common <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class BuildStepExtensions Methods GetOutputBuildDirectory(BuildStep, BuildContext) Get the output build directory for this BuildStep . The output build directory can be overridden using a OutputBuildDirectory component. Declaration public static string GetOutputBuildDirectory(this BuildStep step, BuildContext context) Parameters Type Name Description BuildStep step This build step. BuildContext context The build context used throughout this build. Returns Type Description String The output build directory."
  },
  "api/Unity.Transforms.PostRotationEulerZYX.html": {
    "href": "api/Unity.Transforms.PostRotationEulerZYX.html",
    "title": "Struct PostRotationEulerZYX | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct PostRotationEulerZYX Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] [WriteGroup(typeof(PostRotation))] public struct PostRotationEulerZYX : IComponentData Fields Value Declaration public float3 Value Field Value Type Description float3"
  },
  "api/Unity.Transforms.PostRotationEulerZXY.html": {
    "href": "api/Unity.Transforms.PostRotationEulerZXY.html",
    "title": "Struct PostRotationEulerZXY | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct PostRotationEulerZXY Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] [WriteGroup(typeof(PostRotation))] public struct PostRotationEulerZXY : IComponentData Fields Value Declaration public float3 Value Field Value Type Description float3"
  },
  "api/Unity.Transforms.PostRotationEulerYZX.html": {
    "href": "api/Unity.Transforms.PostRotationEulerYZX.html",
    "title": "Struct PostRotationEulerYZX | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct PostRotationEulerYZX Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] [WriteGroup(typeof(PostRotation))] public struct PostRotationEulerYZX : IComponentData Fields Value Declaration public float3 Value Field Value Type Description float3"
  },
  "api/Unity.Transforms.PostRotationEulerYXZ.html": {
    "href": "api/Unity.Transforms.PostRotationEulerYXZ.html",
    "title": "Struct PostRotationEulerYXZ | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct PostRotationEulerYXZ Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] [WriteGroup(typeof(PostRotation))] public struct PostRotationEulerYXZ : IComponentData Fields Value Declaration public float3 Value Field Value Type Description float3"
  },
  "api/Unity.Transforms.CopyInitialTransformFromGameObjectProxy.html": {
    "href": "api/Unity.Transforms.CopyInitialTransformFromGameObjectProxy.html",
    "title": "Class CopyInitialTransformFromGameObjectProxy | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class CopyInitialTransformFromGameObjectProxy Inheritance Object ComponentDataProxyBase ComponentDataProxy < CopyInitialTransformFromGameObject > CopyInitialTransformFromGameObjectProxy Inherited Members ComponentDataProxy<CopyInitialTransformFromGameObject>.ValidateSerializedData(CopyInitialTransformFromGameObject) ComponentDataProxy<CopyInitialTransformFromGameObject>.Value ComponentDataProxyBase.OnEnable() ComponentDataProxyBase.OnDisable() Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class CopyInitialTransformFromGameObjectProxy : ComponentDataProxy<CopyInitialTransformFromGameObject>, ISerializationCallbackReceiver"
  },
  "api/Unity.Transforms.CopyInitialTransformFromGameObject.html": {
    "href": "api/Unity.Transforms.CopyInitialTransformFromGameObject.html",
    "title": "Struct CopyInitialTransformFromGameObject | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct CopyInitialTransformFromGameObject Copy Transform from GameObject associated with Entity to TransformMatrix. Once only. Component is removed after copy. Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct CopyInitialTransformFromGameObject : IComponentData"
  },
  "api/Unity.Transforms.CompositeScaleSystem.html": {
    "href": "api/Unity.Transforms.CompositeScaleSystem.html",
    "title": "Class CompositeScaleSystem | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class CompositeScaleSystem Inheritance Object ComponentSystemBase JobComponentSystem CompositeScaleSystem EndFrameCompositeScaleSystem Inherited Members JobComponentSystem.Entities JobComponentSystem.Job JobComponentSystem.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnDestroyManager() ComponentSystemBase.OnCreateManager() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.Update() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetArchetypeChunkComponentType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkComponentTypeDynamic(ComponentType) ComponentSystemBase.GetArchetypeChunkBufferType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkSharedComponentType<T>() ComponentSystemBase.GetArchetypeChunkEntityType() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public abstract class CompositeScaleSystem : JobComponentSystem Methods OnCreate() Declaration protected override void OnCreate() Overrides ComponentSystemBase.OnCreate() OnUpdate(JobHandle) Declaration protected override JobHandle OnUpdate(JobHandle inputDeps) Parameters Type Name Description JobHandle inputDeps Returns Type Description JobHandle Overrides JobComponentSystem.OnUpdate(JobHandle) Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Transforms.CompositeScale.html": {
    "href": "api/Unity.Transforms.CompositeScale.html",
    "title": "Struct CompositeScale | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct CompositeScale Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] [WriteGroup(typeof(LocalToWorld))] [WriteGroup(typeof(LocalToParent))] [WriteGroup(typeof(ParentScaleInverse))] public struct CompositeScale : IComponentData Fields Value Declaration public float4x4 Value Field Value Type Description float4x4"
  },
  "api/Unity.Entities.UniversalDelegates.VVVR-4.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVR-4.html",
    "title": "Delegate VVVR<T0, T1, T2, T3> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VVVR<T0, T1, T2, T3> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVR<T0, T1, T2, T3>(T0 t0, T1 t1, T2 t2, ref T3 t3); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 Type Parameters Name Description T0 T1 T2 T3"
  },
  "api/Unity.Entities.UniversalDelegates.VVVIIIII-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVIIIII-8.html",
    "title": "Delegate VVVIIIII<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VVVIIIII<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVIIIII<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, T1 t1, T2 t2, in T3 t3, in T4 t4, in T5 t5, in T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VVVIIII-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVIIII-7.html",
    "title": "Delegate VVVIIII<T0, T1, T2, T3, T4, T5, T6> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VVVIIII<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVIIII<T0, T1, T2, T3, T4, T5, T6>(T0 t0, T1 t1, T2 t2, in T3 t3, in T4 t4, in T5 t5, in T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.VVVIII-6.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVIII-6.html",
    "title": "Delegate VVVIII<T0, T1, T2, T3, T4, T5> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VVVIII<T0, T1, T2, T3, T4, T5> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVIII<T0, T1, T2, T3, T4, T5>(T0 t0, T1 t1, T2 t2, in T3 t3, in T4 t4, in T5 t5); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 Type Parameters Name Description T0 T1 T2 T3 T4 T5"
  },
  "api/Unity.Entities.UniversalDelegates.VVIIIIII-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVIIIIII-8.html",
    "title": "Delegate VVIIIIII<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VVIIIIII<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVIIIIII<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, T1 t1, in T2 t2, in T3 t3, in T4 t4, in T5 t5, in T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VVIIIII-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVIIIII-7.html",
    "title": "Delegate VVIIIII<T0, T1, T2, T3, T4, T5, T6> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VVIIIII<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVIIIII<T0, T1, T2, T3, T4, T5, T6>(T0 t0, T1 t1, in T2 t2, in T3 t3, in T4 t4, in T5 t5, in T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.VVIIII-6.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVIIII-6.html",
    "title": "Delegate VVIIII<T0, T1, T2, T3, T4, T5> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VVIIII<T0, T1, T2, T3, T4, T5> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVIIII<T0, T1, T2, T3, T4, T5>(T0 t0, T1 t1, in T2 t2, in T3 t3, in T4 t4, in T5 t5); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 Type Parameters Name Description T0 T1 T2 T3 T4 T5"
  },
  "api/Unity.Entities.UniversalDelegates.VVIII-5.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVIII-5.html",
    "title": "Delegate VVIII<T0, T1, T2, T3, T4> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VVIII<T0, T1, T2, T3, T4> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVIII<T0, T1, T2, T3, T4>(T0 t0, T1 t1, in T2 t2, in T3 t3, in T4 t4); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 Type Parameters Name Description T0 T1 T2 T3 T4"
  },
  "api/Unity.Entities.UniversalDelegates.RRRRI-5.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RRRRI-5.html",
    "title": "Delegate RRRRI<T0, T1, T2, T3, T4> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate RRRRI<T0, T1, T2, T3, T4> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RRRRI<T0, T1, T2, T3, T4>(ref T0 t0, ref T1 t1, ref T2 t2, ref T3 t3, in T4 t4); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 Type Parameters Name Description T0 T1 T2 T3 T4"
  },
  "api/Unity.Entities.UniversalDelegates.RRRR-4.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RRRR-4.html",
    "title": "Delegate RRRR<T0, T1, T2, T3> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate RRRR<T0, T1, T2, T3> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RRRR<T0, T1, T2, T3>(ref T0 t0, ref T1 t1, ref T2 t2, ref T3 t3); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 Type Parameters Name Description T0 T1 T2 T3"
  },
  "api/Unity.Entities.UniversalDelegates.RRRIIIII-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RRRIIIII-8.html",
    "title": "Delegate RRRIIIII<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate RRRIIIII<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RRRIIIII<T0, T1, T2, T3, T4, T5, T6, T7>(ref T0 t0, ref T1 t1, ref T2 t2, in T3 t3, in T4 t4, in T5 t5, in T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.RRRIIII-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RRRIIII-7.html",
    "title": "Delegate RRRIIII<T0, T1, T2, T3, T4, T5, T6> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate RRRIIII<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RRRIIII<T0, T1, T2, T3, T4, T5, T6>(ref T0 t0, ref T1 t1, ref T2 t2, in T3 t3, in T4 t4, in T5 t5, in T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.EntityQueryDesc.html": {
    "href": "api/Unity.Entities.EntityQueryDesc.html",
    "title": "Class EntityQueryDesc | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class EntityQueryDesc Defines a queryDesc to find archetypes with specific components. Inheritance Object EntityQueryDesc Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class EntityQueryDesc Remarks A queryDesc combines components in the All, Any, and None sets according to the following rules: All - Includes archetypes that have every component in this set Any - Includes archetypes that have at least one component in this set None - Excludes archetypes that have any component in this set For example, given entities with the following components: Player has components: Position, Rotation, Player Enemy1 has components: Position, Rotation, Melee Enemy2 has components: Position, Rotation, Ranger The queryDesc below would give you all of the archetypes that: have any of [Melee or Ranger], AND have none of [Player], AND have all of [Position and Rotation] new EntityQueryDesc { Any = new ComponentType[] {typeof(Melee), typeof(Ranger)}, None = new ComponentType[] {typeof(Player)}, All = new ComponentType[] {typeof(Position), typeof(Rotation)} } In other words, the queryDesc selects the Enemy1 and Enemy2 entities, but not the Player entity. Fields All The queryDesc includes archetypes that contain all of the components in the All list. Declaration public ComponentType[] All Field Value Type Description ComponentType [] Any The queryDesc includes archetypes that contain at least one (but possibly more) of the components in the Any list. Declaration public ComponentType[] Any Field Value Type Description ComponentType [] None The queryDesc excludes archetypes that contain any of the components in the None list. Declaration public ComponentType[] None Field Value Type Description ComponentType [] Options Specialized queryDesc options. Declaration public EntityQueryOptions Options Field Value Type Description EntityQueryOptions Remarks You should not need to set these options for most queriesDesc. Options is a bit mask; use the bitwise OR operator to combine multiple options. Methods Validate() Declaration [Conditional(\"ENABLE_UNITY_COLLECTIONS_CHECKS\")] public void Validate()"
  },
  "api/Unity.Entities.EntityQueryBuilder.html": {
    "href": "api/Unity.Entities.EntityQueryBuilder.html",
    "title": "Struct EntityQueryBuilder | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct EntityQueryBuilder Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct EntityQueryBuilder Methods Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object) ForEach(EntityQueryBuilder.F_E) Declaration public void ForEach(EntityQueryBuilder.F_E action) Parameters Type Name Description Unity.Entities.EntityQueryBuilder.F_E action GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() ToEntityQuery() Declaration public EntityQuery ToEntityQuery() Returns Type Description EntityQuery ToEntityQueryDesc() Declaration public EntityQueryDesc ToEntityQueryDesc() Returns Type Description EntityQueryDesc With(EntityQuery) Declaration public EntityQueryBuilder With(EntityQuery entityQuery) Parameters Type Name Description EntityQuery entityQuery Returns Type Description EntityQueryBuilder With(EntityQueryOptions) Declaration public EntityQueryBuilder With(EntityQueryOptions options) Parameters Type Name Description EntityQueryOptions options Returns Type Description EntityQueryBuilder WithAll(ComponentType) Declaration public EntityQueryBuilder WithAll(ComponentType type0) Parameters Type Name Description ComponentType type0 Returns Type Description EntityQueryBuilder WithAll(ComponentType, ComponentType) Declaration public EntityQueryBuilder WithAll(ComponentType type0, ComponentType type1) Parameters Type Name Description ComponentType type0 ComponentType type1 Returns Type Description EntityQueryBuilder WithAll(ComponentType, ComponentType, ComponentType) Declaration public EntityQueryBuilder WithAll(ComponentType type0, ComponentType type1, ComponentType type2) Parameters Type Name Description ComponentType type0 ComponentType type1 ComponentType type2 Returns Type Description EntityQueryBuilder WithAll(ComponentType, ComponentType, ComponentType, ComponentType) Declaration public EntityQueryBuilder WithAll(ComponentType type0, ComponentType type1, ComponentType type2, ComponentType type3) Parameters Type Name Description ComponentType type0 ComponentType type1 ComponentType type2 ComponentType type3 Returns Type Description EntityQueryBuilder WithAll(ComponentType, ComponentType, ComponentType, ComponentType, ComponentType) Declaration public EntityQueryBuilder WithAll(ComponentType type0, ComponentType type1, ComponentType type2, ComponentType type3, ComponentType type4) Parameters Type Name Description ComponentType type0 ComponentType type1 ComponentType type2 ComponentType type3 ComponentType type4 Returns Type Description EntityQueryBuilder WithAll<T0>() Declaration public EntityQueryBuilder WithAll<T0>() Returns Type Description EntityQueryBuilder Type Parameters Name Description T0 WithAll<T0, T1>() Declaration public EntityQueryBuilder WithAll<T0, T1>() Returns Type Description EntityQueryBuilder Type Parameters Name Description T0 T1 WithAll<T0, T1, T2>() Declaration public EntityQueryBuilder WithAll<T0, T1, T2>() Returns Type Description EntityQueryBuilder Type Parameters Name Description T0 T1 T2 WithAll<T0, T1, T2, T3>() Declaration public EntityQueryBuilder WithAll<T0, T1, T2, T3>() Returns Type Description EntityQueryBuilder Type Parameters Name Description T0 T1 T2 T3 WithAll<T0, T1, T2, T3, T4>() Declaration public EntityQueryBuilder WithAll<T0, T1, T2, T3, T4>() Returns Type Description EntityQueryBuilder Type Parameters Name Description T0 T1 T2 T3 T4 WithAllReadOnly(ComponentType) Declaration public EntityQueryBuilder WithAllReadOnly(ComponentType type0) Parameters Type Name Description ComponentType type0 Returns Type Description EntityQueryBuilder WithAllReadOnly(ComponentType, ComponentType) Declaration public EntityQueryBuilder WithAllReadOnly(ComponentType type0, ComponentType type1) Parameters Type Name Description ComponentType type0 ComponentType type1 Returns Type Description EntityQueryBuilder WithAllReadOnly(ComponentType, ComponentType, ComponentType) Declaration public EntityQueryBuilder WithAllReadOnly(ComponentType type0, ComponentType type1, ComponentType type2) Parameters Type Name Description ComponentType type0 ComponentType type1 ComponentType type2 Returns Type Description EntityQueryBuilder WithAllReadOnly(ComponentType, ComponentType, ComponentType, ComponentType) Declaration public EntityQueryBuilder WithAllReadOnly(ComponentType type0, ComponentType type1, ComponentType type2, ComponentType type3) Parameters Type Name Description ComponentType type0 ComponentType type1 ComponentType type2 ComponentType type3 Returns Type Description EntityQueryBuilder WithAllReadOnly(ComponentType, ComponentType, ComponentType, ComponentType, ComponentType) Declaration public EntityQueryBuilder WithAllReadOnly(ComponentType type0, ComponentType type1, ComponentType type2, ComponentType type3, ComponentType type4) Parameters Type Name Description ComponentType type0 ComponentType type1 ComponentType type2 ComponentType type3 ComponentType type4 Returns Type Description EntityQueryBuilder WithAllReadOnly<T0>() Declaration public EntityQueryBuilder WithAllReadOnly<T0>() Returns Type Description EntityQueryBuilder Type Parameters Name Description T0 WithAllReadOnly<T0, T1>() Declaration public EntityQueryBuilder WithAllReadOnly<T0, T1>() Returns Type Description EntityQueryBuilder Type Parameters Name Description T0 T1 WithAllReadOnly<T0, T1, T2>() Declaration public EntityQueryBuilder WithAllReadOnly<T0, T1, T2>() Returns Type Description EntityQueryBuilder Type Parameters Name Description T0 T1 T2 WithAllReadOnly<T0, T1, T2, T3>() Declaration public EntityQueryBuilder WithAllReadOnly<T0, T1, T2, T3>() Returns Type Description EntityQueryBuilder Type Parameters Name Description T0 T1 T2 T3 WithAllReadOnly<T0, T1, T2, T3, T4>() Declaration public EntityQueryBuilder WithAllReadOnly<T0, T1, T2, T3, T4>() Returns Type Description EntityQueryBuilder Type Parameters Name Description T0 T1 T2 T3 T4 WithAny(ComponentType) Declaration public EntityQueryBuilder WithAny(ComponentType type0) Parameters Type Name Description ComponentType type0 Returns Type Description EntityQueryBuilder WithAny(ComponentType, ComponentType) Declaration public EntityQueryBuilder WithAny(ComponentType type0, ComponentType type1) Parameters Type Name Description ComponentType type0 ComponentType type1 Returns Type Description EntityQueryBuilder WithAny(ComponentType, ComponentType, ComponentType) Declaration public EntityQueryBuilder WithAny(ComponentType type0, ComponentType type1, ComponentType type2) Parameters Type Name Description ComponentType type0 ComponentType type1 ComponentType type2 Returns Type Description EntityQueryBuilder WithAny(ComponentType, ComponentType, ComponentType, ComponentType) Declaration public EntityQueryBuilder WithAny(ComponentType type0, ComponentType type1, ComponentType type2, ComponentType type3) Parameters Type Name Description ComponentType type0 ComponentType type1 ComponentType type2 ComponentType type3 Returns Type Description EntityQueryBuilder WithAny(ComponentType, ComponentType, ComponentType, ComponentType, ComponentType) Declaration public EntityQueryBuilder WithAny(ComponentType type0, ComponentType type1, ComponentType type2, ComponentType type3, ComponentType type4) Parameters Type Name Description ComponentType type0 ComponentType type1 ComponentType type2 ComponentType type3 ComponentType type4 Returns Type Description EntityQueryBuilder WithAny<T0>() Declaration public EntityQueryBuilder WithAny<T0>() Returns Type Description EntityQueryBuilder Type Parameters Name Description T0 WithAny<T0, T1>() Declaration public EntityQueryBuilder WithAny<T0, T1>() Returns Type Description EntityQueryBuilder Type Parameters Name Description T0 T1 WithAny<T0, T1, T2>() Declaration public EntityQueryBuilder WithAny<T0, T1, T2>() Returns Type Description EntityQueryBuilder Type Parameters Name Description T0 T1 T2 WithAny<T0, T1, T2, T3>() Declaration public EntityQueryBuilder WithAny<T0, T1, T2, T3>() Returns Type Description EntityQueryBuilder Type Parameters Name Description T0 T1 T2 T3 WithAny<T0, T1, T2, T3, T4>() Declaration public EntityQueryBuilder WithAny<T0, T1, T2, T3, T4>() Returns Type Description EntityQueryBuilder Type Parameters Name Description T0 T1 T2 T3 T4 WithAnyReadOnly(ComponentType) Declaration public EntityQueryBuilder WithAnyReadOnly(ComponentType type0) Parameters Type Name Description ComponentType type0 Returns Type Description EntityQueryBuilder WithAnyReadOnly(ComponentType, ComponentType) Declaration public EntityQueryBuilder WithAnyReadOnly(ComponentType type0, ComponentType type1) Parameters Type Name Description ComponentType type0 ComponentType type1 Returns Type Description EntityQueryBuilder WithAnyReadOnly(ComponentType, ComponentType, ComponentType) Declaration public EntityQueryBuilder WithAnyReadOnly(ComponentType type0, ComponentType type1, ComponentType type2) Parameters Type Name Description ComponentType type0 ComponentType type1 ComponentType type2 Returns Type Description EntityQueryBuilder WithAnyReadOnly(ComponentType, ComponentType, ComponentType, ComponentType) Declaration public EntityQueryBuilder WithAnyReadOnly(ComponentType type0, ComponentType type1, ComponentType type2, ComponentType type3) Parameters Type Name Description ComponentType type0 ComponentType type1 ComponentType type2 ComponentType type3 Returns Type Description EntityQueryBuilder WithAnyReadOnly(ComponentType, ComponentType, ComponentType, ComponentType, ComponentType) Declaration public EntityQueryBuilder WithAnyReadOnly(ComponentType type0, ComponentType type1, ComponentType type2, ComponentType type3, ComponentType type4) Parameters Type Name Description ComponentType type0 ComponentType type1 ComponentType type2 ComponentType type3 ComponentType type4 Returns Type Description EntityQueryBuilder WithAnyReadOnly<T0>() Declaration public EntityQueryBuilder WithAnyReadOnly<T0>() Returns Type Description EntityQueryBuilder Type Parameters Name Description T0 WithAnyReadOnly<T0, T1>() Declaration public EntityQueryBuilder WithAnyReadOnly<T0, T1>() Returns Type Description EntityQueryBuilder Type Parameters Name Description T0 T1 WithAnyReadOnly<T0, T1, T2>() Declaration public EntityQueryBuilder WithAnyReadOnly<T0, T1, T2>() Returns Type Description EntityQueryBuilder Type Parameters Name Description T0 T1 T2 WithAnyReadOnly<T0, T1, T2, T3>() Declaration public EntityQueryBuilder WithAnyReadOnly<T0, T1, T2, T3>() Returns Type Description EntityQueryBuilder Type Parameters Name Description T0 T1 T2 T3 WithAnyReadOnly<T0, T1, T2, T3, T4>() Declaration public EntityQueryBuilder WithAnyReadOnly<T0, T1, T2, T3, T4>() Returns Type Description EntityQueryBuilder Type Parameters Name Description T0 T1 T2 T3 T4 WithIncludeAll() This sets the options IncludeDisabled and EntityQueryOptions.IncludePrefab so that Entities with Disabled or Prefab components will not be hidden from the query. Declaration public EntityQueryBuilder WithIncludeAll() Returns Type Description EntityQueryBuilder WithNone(ComponentType) Declaration public EntityQueryBuilder WithNone(ComponentType type0) Parameters Type Name Description ComponentType type0 Returns Type Description EntityQueryBuilder WithNone(ComponentType, ComponentType) Declaration public EntityQueryBuilder WithNone(ComponentType type0, ComponentType type1) Parameters Type Name Description ComponentType type0 ComponentType type1 Returns Type Description EntityQueryBuilder WithNone(ComponentType, ComponentType, ComponentType) Declaration public EntityQueryBuilder WithNone(ComponentType type0, ComponentType type1, ComponentType type2) Parameters Type Name Description ComponentType type0 ComponentType type1 ComponentType type2 Returns Type Description EntityQueryBuilder WithNone(ComponentType, ComponentType, ComponentType, ComponentType) Declaration public EntityQueryBuilder WithNone(ComponentType type0, ComponentType type1, ComponentType type2, ComponentType type3) Parameters Type Name Description ComponentType type0 ComponentType type1 ComponentType type2 ComponentType type3 Returns Type Description EntityQueryBuilder WithNone(ComponentType, ComponentType, ComponentType, ComponentType, ComponentType) Declaration public EntityQueryBuilder WithNone(ComponentType type0, ComponentType type1, ComponentType type2, ComponentType type3, ComponentType type4) Parameters Type Name Description ComponentType type0 ComponentType type1 ComponentType type2 ComponentType type3 ComponentType type4 Returns Type Description EntityQueryBuilder WithNone<T0>() Declaration public EntityQueryBuilder WithNone<T0>() Returns Type Description EntityQueryBuilder Type Parameters Name Description T0 WithNone<T0, T1>() Declaration public EntityQueryBuilder WithNone<T0, T1>() Returns Type Description EntityQueryBuilder Type Parameters Name Description T0 T1 WithNone<T0, T1, T2>() Declaration public EntityQueryBuilder WithNone<T0, T1, T2>() Returns Type Description EntityQueryBuilder Type Parameters Name Description T0 T1 T2 WithNone<T0, T1, T2, T3>() Declaration public EntityQueryBuilder WithNone<T0, T1, T2, T3>() Returns Type Description EntityQueryBuilder Type Parameters Name Description T0 T1 T2 T3 WithNone<T0, T1, T2, T3, T4>() Declaration public EntityQueryBuilder WithNone<T0, T1, T2, T3, T4>() Returns Type Description EntityQueryBuilder Type Parameters Name Description T0 T1 T2 T3 T4"
  },
  "api/Unity.Entities.EntityCommandBufferSystem.html": {
    "href": "api/Unity.Entities.EntityCommandBufferSystem.html",
    "title": "Class EntityCommandBufferSystem | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class EntityCommandBufferSystem A system that provides EntityCommandBuffer objects for other systems. Inheritance Object ComponentSystemBase ComponentSystem EntityCommandBufferSystem BeginInitializationEntityCommandBufferSystem BeginPresentationEntityCommandBufferSystem BeginSimulationEntityCommandBufferSystem EndInitializationEntityCommandBufferSystem EndSimulationEntityCommandBufferSystem Inherited Members ComponentSystem.PostUpdateCommands ComponentSystem.InitEntityQueryCache(Int32) ComponentSystem.Entities ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnDestroyManager() ComponentSystemBase.OnCreateManager() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.Update() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetArchetypeChunkComponentType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkComponentTypeDynamic(ComponentType) ComponentSystemBase.GetArchetypeChunkBufferType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkSharedComponentType<T>() ComponentSystemBase.GetArchetypeChunkEntityType() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public abstract class EntityCommandBufferSystem : ComponentSystem Remarks Each system that uses the EntityCommandBuffer provided by a command buffer system must call CreateCommandBuffer() to create its own command buffer instance. This buffer system executes each of these separate command buffers in the order that you created them. The commands are executed during this system's OnUpdate() function. When you write to a command buffer from a Job, you must add the of that Job to the buffer system's dependency list with AddJobHandleForProducer(JobHandle) . If you write to a command buffer from a Job that runs in parallel (and this includes both IJobForEach<T0> and IJobChunk ), you must use the concurrent version of the command buffer ( ToConcurrent() ). Executing the commands in an EntityCommandBuffer invokes the corresponding functions of the EntityManager . Any structural change, such as adding or removing entities, adding or removing components from entities, or changing shared component values, creates a sync-point in your application. At a sync point, all Jobs accessing entity components must complete before new Jobs can start. Such sync points make it difficult for the Job scheduler to fully utilize available computing power. To avoid sync points, you should use as few entity command buffer systems as possible. The default ECS World code creates a ComponentSystemGroup setup with three main groups, InitializationSystemGroup , SimulationSystemGroup , and PresentationSystemGroup . Each of these main groups provides an existing EntityCommandBufferSystem executed at the start and the end of other, child systems. Note that unused command buffers systems do not create sync points because there are no commands to execute and thus no structural changes created. The EntityCommandBufferSystem class is abstract, so you must implement a subclass to create your own entity command buffer system. However, none of its methods are abstract, so you do not need to implement your own logic. Typically, you create an EntityCommandBufferSystem subclass to create a named buffer system for other systems to use and update it at an appropriate place in a custom ComponentSystemGroup setup. Methods AddJobHandleForProducer(JobHandle) Adds the specified JobHandle to this system's list of dependencies. Declaration public void AddJobHandleForProducer(JobHandle producerJob) Parameters Type Name Description JobHandle producerJob The JobHandle of a Job which this buffer system should wait for before playing back its pending command buffers. Remarks When you write to a command buffer from a Job, you must add the of that Job to this buffer system's dependency list by calling this function. Otherwise, the buffer system could execute the commands currently in the command buffer while the writing Job is still in progress. Examples The following example illustrates how to use one of the default EntityCommandBuffer systems. The code selects all entities that have one custom component, in this case, AsyncProcessInfo , and processes each entity in the Execute() function of an IJobForEachWithEntity<T0> Job (the actual process is not shown since that part of the example is hypothetical). After processing, the Job uses an EntityCommandBuffer to remove the ProcessInfo component and add an ProcessCompleteTag component. Another system could use the ProcessCompleteTag to find entities that represent the end results of the process. public struct ProcessInfo: IComponentData{ public float Value; } public struct ProcessCompleteTag : IComponentData{} public class AsyncProcessJobSystem : JobComponentSystem { [BurstCompile] public struct ProcessInBackgroundJob : IJobForEachWithEntity<ProcessInfo> { [ReadOnly] public EntityCommandBuffer.Concurrent ConcurrentCommands; public void Execute(Entity entity, int index, [ReadOnly] ref ProcessInfo info) { // Process based on the ProcessInfo component, // then remove ProcessInfo and add a ProcessCompleteTag... ConcurrentCommands.RemoveComponent<ProcessInfo>(index, entity); ConcurrentCommands.AddComponent(index, entity, new ProcessCompleteTag()); } } protected override JobHandle OnUpdate(JobHandle inputDeps) { var job = new ProcessInBackgroundJob(); var ecbSystem = World.GetOrCreateSystem<EndSimulationEntityCommandBufferSystem>(); job.ConcurrentCommands = ecbSystem.CreateCommandBuffer().ToConcurrent(); var handle = job.Schedule(this, inputDeps); ecbSystem.AddJobHandleForProducer(handle); return handle; } } CreateCommandBuffer() Creates an EntityCommandBuffer and adds it to this system's list of command buffers. Declaration public EntityCommandBuffer CreateCommandBuffer() Returns Type Description EntityCommandBuffer A command buffer that will be executed by this system. Remarks This buffer system executes its list of command buffers during its OnUpdate() function in the order you created the command buffers. If you write to a command buffer in a Job, you must add the Job as a dependency of this system by calling AddJobHandleForProducer(JobHandle) . The dependency ensures that the buffer system waits for the Job to complete before executing the command buffer. If you write to a command buffer from a parallel Job, such as IJobForEach<T0> or IJobChunk , you must use the concurrent version of the command buffer, provided by EntityCommandBuffer.Concurrent . OnCreate() Initializes this command buffer system. Declaration protected override void OnCreate() Overrides ComponentSystemBase.OnCreate() Remarks If you override this method, you should call base.OnCreate() to retain the default initialization logic. OnDestroy() Destroys this system, executing any pending command buffers first. Declaration protected override void OnDestroy() Overrides ComponentSystemBase.OnDestroy() Remarks If you override this method, you should call base.OnDestroy() to retain the default destruction logic. OnUpdate() Executes the command buffers in this system in the order they were created. Declaration protected override void OnUpdate() Overrides ComponentSystem.OnUpdate() Remarks If you override this method, you should call base.OnUpdate() to retain the default update logic. Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Entities.EntityCommandBufferManagedComponentExtensions.html": {
    "href": "api/Unity.Entities.EntityCommandBufferManagedComponentExtensions.html",
    "title": "Class EntityCommandBufferManagedComponentExtensions | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class EntityCommandBufferManagedComponentExtensions Inheritance Object EntityCommandBufferManagedComponentExtensions Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class EntityCommandBufferManagedComponentExtensions Methods AddComponent<T>(EntityCommandBuffer, Entity) Declaration public static void AddComponent<T>(this EntityCommandBuffer ecb, Entity e) where T : class, IComponentData Parameters Type Name Description EntityCommandBuffer ecb Entity e Type Parameters Name Description T AddComponent<T>(EntityCommandBuffer, Entity, T) Declaration public static void AddComponent<T>(this EntityCommandBuffer ecb, Entity e, T component) where T : class, IComponentData Parameters Type Name Description EntityCommandBuffer ecb Entity e T component Type Parameters Name Description T SetComponent<T>(EntityCommandBuffer, Entity, T) Declaration public static void SetComponent<T>(this EntityCommandBuffer ecb, Entity e, T component) where T : class, IComponentData Parameters Type Name Description EntityCommandBuffer ecb Entity e T component Type Parameters Name Description T"
  },
  "api/Unity.Entities.DynamicBufferProxy-1.html": {
    "href": "api/Unity.Entities.DynamicBufferProxy-1.html",
    "title": "Class DynamicBufferProxy<T> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class DynamicBufferProxy<T> Inheritance Object ComponentDataProxyBase DynamicBufferProxy<T> Inherited Members ComponentDataProxyBase.OnEnable() ComponentDataProxyBase.OnDisable() Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public abstract class DynamicBufferProxy<T> : ComponentDataProxyBase, ISerializationCallbackReceiver where T : struct, IBufferElementData Type Parameters Name Description T Properties Value Declaration public IEnumerable<T> Value { get; } Property Value Type Description IEnumerable <T> Methods SetValue(IReadOnlyList<T>) Declaration public void SetValue(IReadOnlyList<T> value) Parameters Type Name Description IReadOnlyList <T> value ValidateSerializedData(List<T>) Declaration protected virtual void ValidateSerializedData(List<T> serializedData) Parameters Type Name Description List <T> serializedData"
  },
  "api/Unity.Entities.DynamicBufferContainer-1.html": {
    "href": "api/Unity.Entities.DynamicBufferContainer-1.html",
    "title": "Struct DynamicBufferContainer<T> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct DynamicBufferContainer<T> Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct DynamicBufferContainer<T> : IDynamicBufferContainer Type Parameters Name Description T Constructors DynamicBufferContainer(Void*, Int32, Int32, Boolean) Declaration public DynamicBufferContainer(void *buffer, int length, int size, bool isReadOnly) Parameters Type Name Description Void * buffer Int32 length Int32 size Boolean isReadOnly Properties ElementType Declaration public Type ElementType { get; } Property Value Type Description Type Implements IDynamicBufferContainer.ElementType Length Declaration public int Length { get; } Property Value Type Description Int32 Methods GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode()"
  },
  "api/Unity.Entities.Conversion.MultiListEnumerator-1.html": {
    "href": "api/Unity.Entities.Conversion.MultiListEnumerator-1.html",
    "title": "Struct MultiListEnumerator<T> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct MultiListEnumerator<T> Namespace : Unity.Entities.Conversion <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct MultiListEnumerator<T> : IEnumerable<T>, IEnumerable, IEnumerator<T>, IDisposable, IEnumerator Type Parameters Name Description T Properties Any Declaration public bool Any { get; } Property Value Type Description Boolean Current Declaration public T Current { get; } Property Value Type Description T Empty Declaration public static MultiListEnumerator<T> Empty { get; } Property Value Type Description MultiListEnumerator <T> IsEmpty Declaration public bool IsEmpty { get; } Property Value Type Description Boolean IsValid Declaration public bool IsValid { get; } Property Value Type Description Boolean Methods Count() Declaration public int Count() Returns Type Description Int32 Dispose() Declaration public void Dispose() MoveNext() Declaration public bool MoveNext() Returns Type Description Boolean Reset() Declaration public void Reset()"
  },
  "api/Unity.Entities.ConfigInit.html": {
    "href": "api/Unity.Entities.ConfigInit.html",
    "title": "Delegate ConfigInit | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate ConfigInit Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void ConfigInit(World world); Parameters Type Name Description World world"
  },
  "api/Unity.Entities.ComponentDataProxy-1.html": {
    "href": "api/Unity.Entities.ComponentDataProxy-1.html",
    "title": "Class ComponentDataProxy<T> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class ComponentDataProxy<T> Inheritance Object ComponentDataProxyBase ComponentDataProxy<T> CopyInitialTransformFromGameObjectProxy CopyTransformFromGameObjectProxy CopyTransformToGameObjectProxy LocalToWorldProxy NonUniformScaleProxy RotationProxy TranslationProxy Inherited Members ComponentDataProxyBase.OnEnable() ComponentDataProxyBase.OnDisable() Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public abstract class ComponentDataProxy<T> : ComponentDataProxyBase, ISerializationCallbackReceiver where T : struct, IComponentData Type Parameters Name Description T Properties Value Declaration public T Value { get; set; } Property Value Type Description T Methods ValidateSerializedData(ref T) Declaration protected virtual void ValidateSerializedData(ref T serializedData) Parameters Type Name Description T serializedData"
  },
  "api/Unity.Entities.ComponentDataFromEntity-1.html": {
    "href": "api/Unity.Entities.ComponentDataFromEntity-1.html",
    "title": "Struct ComponentDataFromEntity<T> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct ComponentDataFromEntity<T> A NativeContainer that provides access to all instances of components of type T, indexed by Entity . Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct ComponentDataFromEntity<T> where T : struct, IComponentData Type Parameters Name Description T The type of IComponentData to access. Remarks ComponentDataFromEntity is a native container that provides array-like access to components of a specific type. You can use ComponentDataFromEntity to look up data associated with one entity while iterating over a different set of entities. For example, Unity.Transforms stores the Entity object of parent entities in a Parent component and looks up the parent's LocalToWorld matrix using ComponentDataFromEntity&lt;LocalToWorld> when calculating the world positions of child entities. To get a ComponentDataFromEntity, call GetComponentDataFromEntity<T>(Boolean) . Pass a ComponentDataFromEntity container to a Job by defining a public field of the appropriate type in your IJob implementation. You can safely read from ComponentDataFromEntity in any Job, but by default, you cannot write to components in the container in parallel Jobs (including IJobForEach<T0> and IJobChunk ). If you know that two instances of a parallel Job can never write to the same index in the container, you can disable the restriction on parallel writing by adding NativeDisableParallelForRestrictionAttribute to the ComponentDataFromEntity field definition in the Job struct. If you would like to access an entity's components outside of a job, consider using the EntityManager methods GetComponentData<T>(Entity) and SetComponentData<T>(Entity, T) instead, to avoid the overhead of creating a ComponentDataFromEntity object. Properties Item[Entity] Gets the IComponentData instance of type T for the specified entity. Declaration public T this[Entity entity] { get; set; } Parameters Type Name Description Entity entity The entity. Property Value Type Description T An IComponentData type. Remarks You cannot use ComponentDataFromEntity to get zero-sized IComponentData . Use Exists(Entity) to check whether an entity has the zero-sized component instead. Normally, you cannot write to components accessed using a ComponentDataFromEntity instance in a parallel Job. This restriction is in place because multiple threads could write to the same component, leading to a race condition and nondeterministic results. However, when you are certain that your algorithm cannot write to the same component from different threads, you can manually disable this safety check by putting the NativeDisableParallelForRestrictions attribute on the ComponentDataFromEntity field in the Job. Exceptions Type Condition ArgumentException Thrown if T is zero-size. Methods Exists(Entity) Reports whether the specified Entity instance still refers to a valid entity and that it has a component of type T. Declaration public bool Exists(Entity entity) Parameters Type Name Description Entity entity The entity. Returns Type Description Boolean True if the entity has a component of type T, and false if it does not. Also returns false if the Entity instance refers to an entity that has been destroyed. Remarks To report if the provided entity has a component of type T, this function confirms whether the EntityArchetype of the provided entity includes components of type T. HasComponent(Entity) Reports whether the specified Entity instance still refers to a valid entity and that it has a component of type T. Declaration public bool HasComponent(Entity entity) Parameters Type Name Description Entity entity The entity. Returns Type Description Boolean True if the entity has a component of type T, and false if it does not. Also returns false if the Entity instance refers to an entity that has been destroyed. Remarks To report if the provided entity has a component of type T, this function confirms whether the EntityArchetype of the provided entity includes components of type T."
  },
  "api/Unity.Entities.ChangeVersionUtility.html": {
    "href": "api/Unity.Entities.ChangeVersionUtility.html",
    "title": "Class ChangeVersionUtility | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class ChangeVersionUtility Inheritance Object ChangeVersionUtility Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class ChangeVersionUtility Fields InitialGlobalSystemVersion Declaration public const int InitialGlobalSystemVersion = 1 Field Value Type Description Int32 Methods DidChange(UInt32, UInt32) Declaration public static bool DidChange(uint changeVersion, uint requiredVersion) Parameters Type Name Description UInt32 changeVersion UInt32 requiredVersion Returns Type Description Boolean IncrementGlobalSystemVersion(ref UInt32) Declaration public static void IncrementGlobalSystemVersion(ref uint globalSystemVersion) Parameters Type Name Description UInt32 globalSystemVersion"
  },
  "api/Unity.Entities.BuildUtils.html": {
    "href": "api/Unity.Entities.BuildUtils.html",
    "title": "Namespace Unity.Entities.BuildUtils | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Namespace Unity.Entities.BuildUtils Classes MonoExtensions TypeHash TypeUtils Structs TypeUtils.AlignAndSize"
  },
  "api/Unity.Entities.BlobStringExtensions.html": {
    "href": "api/Unity.Entities.BlobStringExtensions.html",
    "title": "Class BlobStringExtensions | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class BlobStringExtensions Extensions that allow the creation of BlobString instances by a BlobBuilder . Inheritance Object BlobStringExtensions Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class BlobStringExtensions Methods AllocateString(ref BlobBuilder, ref BlobString, String) Allocates memory to store the string in a blob asset and copies the string data into it. Declaration public static void AllocateString(this ref BlobBuilder builder, ref BlobString blobStr, string value) Parameters Type Name Description BlobBuilder builder The BlobBuilder instance building the blob asset. BlobString blobStr A reference to the field in the blob asset that will store the string. This function allocates memory for that field and sets the string value. String value The string to copy into the blob asset."
  },
  "api/Unity.Entities.BlobString.html": {
    "href": "api/Unity.Entities.BlobString.html",
    "title": "Struct BlobString | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct BlobString An immutable, variable-length string stored in a blob asset. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct BlobString Properties Length The length of the string in characters. Declaration public int Length { get; } Property Value Type Description Int32 Methods ToString() Converts this BlobString to a standard C# String . Declaration public string ToString() Returns Type Description String The C# string. See Also BlobBuilder"
  },
  "api/Unity.Entities.ArchetypeChunkBufferType-1.html": {
    "href": "api/Unity.Entities.ArchetypeChunkBufferType-1.html",
    "title": "Struct ArchetypeChunkBufferType<T> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct ArchetypeChunkBufferType<T> Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct ArchetypeChunkBufferType<T> where T : struct, IBufferElementData Type Parameters Name Description T Properties GlobalSystemVersion Declaration public uint GlobalSystemVersion { get; } Property Value Type Description UInt32 IsReadOnly Declaration public bool IsReadOnly { get; } Property Value Type Description Boolean"
  },
  "api/Unity.Build.Common.ClassicBuildProfile.html": {
    "href": "api/Unity.Build.Common.ClassicBuildProfile.html",
    "title": "Class ClassicBuildProfile | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class ClassicBuildProfile Inheritance Object ClassicBuildProfile Namespace : Unity.Build.Common <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public sealed class ClassicBuildProfile : IBuildPipelineComponent, IBuildSettingsComponent Constructors ClassicBuildProfile() Declaration public ClassicBuildProfile() Properties Configuration Gets or sets which Configuration this profile is going to use for the build. Declaration public BuildConfiguration Configuration { get; set; } Property Value Type Description BuildConfiguration ExcludedAssemblies List of assemblies that should be explicitly excluded for the build. Declaration public List<string> ExcludedAssemblies { get; set; } Property Value Type Description List < String > Pipeline Declaration public BuildPipeline Pipeline { get; set; } Property Value Type Description BuildPipeline Implements IBuildPipelineComponent.Pipeline Target Gets or sets which this profile is going to use for the build. Used for building classic Unity standalone players. Declaration public BuildTarget Target { get; set; } Property Value Type Description BuildTarget TypeCache Retrieve BuildTypeCache for this build profile. Declaration public BuildTypeCache TypeCache { get; } Property Value Type Description BuildTypeCache"
  },
  "api/Unity.Build.BuildConfiguration.html": {
    "href": "api/Unity.Build.BuildConfiguration.html",
    "title": "Enum BuildConfiguration | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Enum BuildConfiguration List of possible build configurations. Namespace : Unity.Build <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public enum BuildConfiguration Fields Name Description Debug Enables debug information, asserts and development code. Develop Enables optimizations and development code. Release Enables optimizations."
  },
  "api/Unity.Entities.ComponentSystemSorter.CircularSystemDependencyException.html": {
    "href": "api/Unity.Entities.ComponentSystemSorter.CircularSystemDependencyException.html",
    "title": "Class ComponentSystemSorter.CircularSystemDependencyException | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class ComponentSystemSorter.CircularSystemDependencyException Inheritance Object Exception ComponentSystemSorter.CircularSystemDependencyException Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class CircularSystemDependencyException : Exception, ISerializable, _Exception Constructors CircularSystemDependencyException(IEnumerable<Type>) Declaration public CircularSystemDependencyException(IEnumerable<Type> chain) Parameters Type Name Description IEnumerable < Type > chain Properties Chain Declaration public IEnumerable<Type> Chain { get; } Property Value Type Description IEnumerable < Type > Message Declaration public override string Message { get; } Property Value Type Description String Overrides Exception.Message"
  },
  "api/Unity.Entities.TypeHash.html": {
    "href": "api/Unity.Entities.TypeHash.html",
    "title": "Class TypeHash | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class TypeHash Inheritance Object TypeHash Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class TypeHash Methods CalculateMemoryOrdering(Type) Declaration public static ulong CalculateMemoryOrdering(Type type) Parameters Type Name Description Type type Returns Type Description UInt64 CalculateStableTypeHash(Type) Declaration public static ulong CalculateStableTypeHash(Type type) Parameters Type Name Description Type type Returns Type Description UInt64 CombineFNV1A64(UInt64, UInt64[]) Declaration public static ulong CombineFNV1A64(ulong hash, params ulong[] values) Parameters Type Name Description UInt64 hash UInt64 [] values Returns Type Description UInt64 FNV1A64(Int32) Declaration public static ulong FNV1A64(int val) Parameters Type Name Description Int32 val Returns Type Description UInt64 FNV1A64(String) Declaration public static ulong FNV1A64(string text) Parameters Type Name Description String text Returns Type Description UInt64 HashType(Type, Int32) Declaration public static ulong HashType(Type type, int fieldIndex = 0) Parameters Type Name Description Type type Int32 fieldIndex Returns Type Description UInt64"
  },
  "api/Unity.Entities.Streaming.html": {
    "href": "api/Unity.Entities.Streaming.html",
    "title": "Namespace Unity.Entities.Streaming | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Namespace Unity.Entities.Streaming Classes EntitySceneOptimization"
  },
  "api/Unity.Entities.Streaming.EntitySceneOptimization.html": {
    "href": "api/Unity.Entities.Streaming.EntitySceneOptimization.html",
    "title": "Class EntitySceneOptimization | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class EntitySceneOptimization Inheritance Object EntitySceneOptimization Namespace : Unity.Entities.Streaming <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class EntitySceneOptimization Methods Optimize(World) Declaration public static void Optimize(World world) Parameters Type Name Description World world"
  },
  "api/Unity.Entities.StaticOptimizeEntity.html": {
    "href": "api/Unity.Entities.StaticOptimizeEntity.html",
    "title": "Class StaticOptimizeEntity | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class StaticOptimizeEntity Inheritance Object StaticOptimizeEntity Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class StaticOptimizeEntity : UnityEngine.MonoBehaviour"
  },
  "api/Unity.Entities.SimulationSystemGroup.html": {
    "href": "api/Unity.Entities.SimulationSystemGroup.html",
    "title": "Class SimulationSystemGroup | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class SimulationSystemGroup Inheritance Object ComponentSystemBase ComponentSystem ComponentSystemGroup SimulationSystemGroup Inherited Members ComponentSystemGroup.m_systemsToUpdate ComponentSystemGroup.m_systemsToRemove ComponentSystemGroup.Systems ComponentSystemGroup.AddSystemToUpdateList(ComponentSystemBase) ComponentSystemGroup.RemoveSystemFromUpdateList(ComponentSystemBase) ComponentSystemGroup.OnStopRunning() ComponentSystemGroup.OnUpdate() ComponentSystem.PostUpdateCommands ComponentSystem.InitEntityQueryCache(Int32) ComponentSystem.Entities ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnCreate() ComponentSystemBase.OnDestroyManager() ComponentSystemBase.OnCreateManager() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.Update() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetArchetypeChunkComponentType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkComponentTypeDynamic(ComponentType) ComponentSystemBase.GetArchetypeChunkBufferType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkSharedComponentType<T>() ComponentSystemBase.GetArchetypeChunkEntityType() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class SimulationSystemGroup : ComponentSystemGroup Constructors SimulationSystemGroup() Declaration public SimulationSystemGroup() Methods SortSystemUpdateList() Declaration public override void SortSystemUpdateList() Overrides ComponentSystemGroup.SortSystemUpdateList() Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Entities.SharedComponentDataProxy-1.html": {
    "href": "api/Unity.Entities.SharedComponentDataProxy-1.html",
    "title": "Class SharedComponentDataProxy<T> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class SharedComponentDataProxy<T> Inheritance Object ComponentDataProxyBase SharedComponentDataProxy<T> Inherited Members ComponentDataProxyBase.OnEnable() ComponentDataProxyBase.OnDisable() Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public abstract class SharedComponentDataProxy<T> : ComponentDataProxyBase, ISerializationCallbackReceiver where T : struct, ISharedComponentData Type Parameters Name Description T Properties Value Declaration public T Value { get; set; } Property Value Type Description T Methods ValidateSerializedData(ref T) Declaration protected virtual void ValidateSerializedData(ref T serializedData) Parameters Type Name Description T serializedData"
  },
  "api/Unity.Entities.ConvertToEntity.Mode.html": {
    "href": "api/Unity.Entities.ConvertToEntity.Mode.html",
    "title": "Enum ConvertToEntity.Mode | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Enum ConvertToEntity.Mode Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public enum Mode Fields Name Description ConvertAndDestroy ConvertAndInjectGameObject"
  },
  "api/Unity.Entities.Conversion.html": {
    "href": "api/Unity.Entities.Conversion.html",
    "title": "Namespace Unity.Entities.Conversion | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Namespace Unity.Entities.Conversion Structs MultiListEnumerator<T>"
  },
  "api/Unity.Entities.ComponentType.html": {
    "href": "api/Unity.Entities.ComponentType.html",
    "title": "Struct ComponentType | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct ComponentType Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct ComponentType : IEquatable<ComponentType> Constructors ComponentType(Type, ComponentType.AccessMode) Declaration public ComponentType(Type type, ComponentType.AccessMode accessModeType = ComponentType.AccessMode.ReadWrite) Parameters Type Name Description Type type ComponentType.AccessMode accessModeType Fields AccessModeType Declaration public ComponentType.AccessMode AccessModeType Field Value Type Description ComponentType.AccessMode TypeIndex Declaration public int TypeIndex Field Value Type Description Int32 Properties HasEntityReferences Declaration public bool HasEntityReferences { get; } Property Value Type Description Boolean IsBuffer Declaration public bool IsBuffer { get; } Property Value Type Description Boolean IsChunkComponent Declaration public bool IsChunkComponent { get; } Property Value Type Description Boolean IsManagedComponent Declaration public bool IsManagedComponent { get; } Property Value Type Description Boolean IsSharedComponent Declaration public bool IsSharedComponent { get; } Property Value Type Description Boolean IsSystemStateComponent Declaration public bool IsSystemStateComponent { get; } Property Value Type Description Boolean IsSystemStateSharedComponent Declaration public bool IsSystemStateSharedComponent { get; } Property Value Type Description Boolean IsZeroSized Declaration public bool IsZeroSized { get; } Property Value Type Description Boolean Methods ChunkComponent(Type) Declaration public static ComponentType ChunkComponent(Type type) Parameters Type Name Description Type type Returns Type Description ComponentType ChunkComponent<T>() Declaration public static ComponentType ChunkComponent<T>() Returns Type Description ComponentType Type Parameters Name Description T ChunkComponentReadOnly<T>() Declaration public static ComponentType ChunkComponentReadOnly<T>() Returns Type Description ComponentType Type Parameters Name Description T Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object) Equals(ComponentType) Declaration public bool Equals(ComponentType other) Parameters Type Name Description ComponentType other Returns Type Description Boolean Exclude(Type) Declaration public static ComponentType Exclude(Type type) Parameters Type Name Description Type type Returns Type Description ComponentType Exclude<T>() Declaration public static ComponentType Exclude<T>() Returns Type Description ComponentType Type Parameters Name Description T FromTypeIndex(Int32) Declaration public static ComponentType FromTypeIndex(int typeIndex) Parameters Type Name Description Int32 typeIndex Returns Type Description ComponentType GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() GetManagedType() Declaration public Type GetManagedType() Returns Type Description Type ReadOnly(Int32) Declaration public static ComponentType ReadOnly(int typeIndex) Parameters Type Name Description Int32 typeIndex Returns Type Description ComponentType ReadOnly(Type) Declaration public static ComponentType ReadOnly(Type type) Parameters Type Name Description Type type Returns Type Description ComponentType ReadOnly<T>() Declaration public static ComponentType ReadOnly<T>() Returns Type Description ComponentType Type Parameters Name Description T ReadWrite<T>() Declaration public static ComponentType ReadWrite<T>() Returns Type Description ComponentType Type Parameters Name Description T Operators Equality(ComponentType, ComponentType) Declaration public static bool operator ==(ComponentType lhs, ComponentType rhs) Parameters Type Name Description ComponentType lhs ComponentType rhs Returns Type Description Boolean GreaterThan(ComponentType, ComponentType) Declaration public static bool operator>(ComponentType lhs, ComponentType rhs) Parameters Type Name Description ComponentType lhs ComponentType rhs Returns Type Description Boolean Implicit(Type to ComponentType) Declaration public static implicit operator ComponentType(Type type) Parameters Type Name Description Type type Returns Type Description ComponentType Inequality(ComponentType, ComponentType) Declaration public static bool operator !=(ComponentType lhs, ComponentType rhs) Parameters Type Name Description ComponentType lhs ComponentType rhs Returns Type Description Boolean LessThan(ComponentType, ComponentType) Declaration public static bool operator <(ComponentType lhs, ComponentType rhs) Parameters Type Name Description ComponentType lhs ComponentType rhs Returns Type Description Boolean"
  },
  "api/Unity.Entities.ComponentType.AccessMode.html": {
    "href": "api/Unity.Entities.ComponentType.AccessMode.html",
    "title": "Enum ComponentType.AccessMode | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Enum ComponentType.AccessMode Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public enum AccessMode Fields Name Description Exclude ReadOnly ReadWrite"
  },
  "api/Unity.Entities.ComponentSystemBaseManagedComponentExtensions.html": {
    "href": "api/Unity.Entities.ComponentSystemBaseManagedComponentExtensions.html",
    "title": "Class ComponentSystemBaseManagedComponentExtensions | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class ComponentSystemBaseManagedComponentExtensions Inheritance Object ComponentSystemBaseManagedComponentExtensions Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class ComponentSystemBaseManagedComponentExtensions Methods GetSingleton<T>(ComponentSystemBase) Gets the value of a singleton component. Declaration public static T GetSingleton<T>(this ComponentSystemBase sys) where T : class, IComponentData Parameters Type Name Description ComponentSystemBase sys Returns Type Description T The component. Type Parameters Name Description T The IComponentData subtype of the singleton component. See Also GetSingleton<T>() HasSingleton<T>(ComponentSystemBase) Checks whether a singelton component of the specified type exists. Declaration public static bool HasSingleton<T>(this ComponentSystemBase sys) where T : class, IComponentData Parameters Type Name Description ComponentSystemBase sys Returns Type Description Boolean True, if a singleton of the specified type exists in the current World . Type Parameters Name Description T The IComponentData subtype of the singleton component. SetSingleton<T>(ComponentSystemBase, T) Sets the value of a singleton component. Declaration public static void SetSingleton<T>(this ComponentSystemBase sys, T value) where T : class, IComponentData Parameters Type Name Description ComponentSystemBase sys T value A component containing the value to assign to the singleton. Type Parameters Name Description T The IComponentData subtype of the singleton component. See Also SetSingleton<T>(T)"
  },
  "api/Unity.Entities.ComponentSystemBase.html": {
    "href": "api/Unity.Entities.ComponentSystemBase.html",
    "title": "Class ComponentSystemBase | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class ComponentSystemBase A system provides behavior in an ECS architecture. Inheritance Object ComponentSystemBase ComponentSystem JobComponentSystem Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public abstract class ComponentSystemBase Remarks A typical system operates on a set of entities that have specific components. The system identifies the components of interest using an EntityQuery (JobComponentSystem) or EntityQueryBuilder (ComponentSystem). The system then finds the entities matching the query and iterates over them, reading and writing data, and performing other entity operations as appropriate. A ComponentSystem is designed to perform its work on the main thread; a JobComponentSystem is designed to work with ECS-specific Jobs, such as IJobForEach<T0> and IJobChunk or with general-purpose C# Jobs . You can implement a set of system lifecycle event functions when you implement a system. The ECS invokes these functions in the following order: OnCreate() -- called when the system is created. OnStartRunning() -- before the first OnUpdate and whenever the system resumes running. OnUpdate -- every frame as long as the system has work to do (see ShouldRunSystem() ) and the system is Enabled . Note that the OnUpdate function is defined in the subclasses of ComponentSystemBase; each system class can define its own update behavior. OnStopRunning() -- whenever the system stops updating because it finds no entities matching its queries. Also called before OnDestroy. OnDestroy() -- when the system is destroyed. All of these functions are executed on the main thread. Note that you can schedule Jobs from the OnUpdate(JobHandle) function of a JobComponentSystem to perform work on background threads. The runtime executes systems in the order determined by their ComponentSystemGroup . Place a system in a group using UpdateInGroupAttribute . Use UpdateBeforeAttribute and UpdateAfterAttribute to specify the execution order within a group. If you do not explicitly place a system in a specific group, the runtime places it in the Default World SimulationSystemGroup . By default, all systems are discovered, instantiated, and added to the default World. You can use the DisableAutoCreationAttribute to prevent a system from being created automatically. Properties Enabled Controls whether this system executes when its OnUpdate function is called. Declaration public bool Enabled { get; set; } Property Value Type Description Boolean True, if the system is enabled. Remarks The Enabled property is intended for debugging so that you can easily turn on and off systems from the Entity Debugger window. A system with Enabled set to false will not update, even if its ShouldRunSystem() function returns true. EntityManager The EntityManager object of the World in which this system exists. Declaration public EntityManager EntityManager { get; } Property Value Type Description EntityManager The EntityManager for this system. EntityQueries The query objects cached by this system. Declaration public EntityQuery[] EntityQueries { get; } Property Value Type Description EntityQuery [] A read-only array of the cached EntityQuery objects. Remarks A system caches any queries it implicitly creates through the IJob interfaces or EntityQueryBuilder , that you create explicitly by calling GetEntityQuery(ComponentType[]) , or that you add to the system as a required query with RequireForUpdate(EntityQuery) . Implicit queries may be created lazily and not exist before a system has run for the first time. GlobalSystemVersion The current change version number in this World . Declaration public uint GlobalSystemVersion { get; } Property Value Type Description UInt32 Remarks The system updates the component version numbers inside any ArchetypeChunk instances that this system accesses with write permissions to this value. LastSystemVersion The current version of this system. Declaration public uint LastSystemVersion { get; } Property Value Type Description UInt32 The GlobalSystemVersion the last time this system ran. Remarks LastSystemVersion is updated to match the GlobalSystemVersion whenever a system runs. When you use Unity.Entities.EntityQuery.SetFilterChanged(Unity.Entities.ComponentType) or DidChange<T>(ArchetypeChunkComponentType<T>, UInt32) , LastSystemVersion provides the basis for determining whether a component could have changed since the last time the system ran. When a system accesses a component and has write permission, it updates the change version of that component type to the current value of LastSystemVersion. The system updates the component type's version whether or not it actually modifies data in any instances of the component type -- this is one reason why you should specify read-only access to components whenever possible. For efficiency, ECS tracks the change version of component types by chunks, not by individual entities. If a system updates the component of a given type for any entity in a chunk, then ECS assumes that the components of all entities in that chunk could have been changed. Change filtering allows you to save processing time by skipping all entities in an unchanged chunk, but does not support skipping individual entities in a chunk that does contain changes. Time The current Time data for this system's world. Declaration public TimeData Time { get; } Property Value Type Description TimeData World The World in which this system exists. Declaration public World World { get; } Property Value Type Description World The World of this system. Methods GetArchetypeChunkBufferType<T>(Boolean) Gets the run-time type information required to access an array of buffer components in a chunk. Declaration public ArchetypeChunkBufferType<T> GetArchetypeChunkBufferType<T>(bool isReadOnly = false) where T : struct, IBufferElementData Parameters Type Name Description Boolean isReadOnly Whether the data is only read, not written. Access data as read-only whenever possible. Returns Type Description ArchetypeChunkBufferType <T> An object representing the type information required to safely access buffer components stored in a chunk. Type Parameters Name Description T A struct that implements IBufferElementData . Remarks Pass a GetArchetypeChunkBufferType instance to a job that has access to chunk data, such as an IJobChunk job, to access that type of buffer component inside the job. GetArchetypeChunkComponentType<T>(Boolean) Gets the run-time type information required to access an array of component data in a chunk. Declaration public ArchetypeChunkComponentType<T> GetArchetypeChunkComponentType<T>(bool isReadOnly = false) where T : struct, IComponentData Parameters Type Name Description Boolean isReadOnly Whether the component data is only read, not written. Access components as read-only whenever possible. Returns Type Description ArchetypeChunkComponentType <T> An object representing the type information required to safely access component data stored in a chunk. Type Parameters Name Description T A struct that implements IComponentData . Remarks Pass an instance to a job that has access to chunk data, such as an IJobChunk job, to access that type of component inside the job. GetArchetypeChunkComponentTypeDynamic(ComponentType) Gets the run-time type information required to access an array of component data in a chunk. Declaration public ArchetypeChunkComponentTypeDynamic GetArchetypeChunkComponentTypeDynamic(ComponentType componentType) Parameters Type Name Description ComponentType componentType Type of the component Returns Type Description ArchetypeChunkComponentTypeDynamic An object representing the type information required to safely access component data stored in a chunk. Remarks Pass an ArchetypeChunkComponentTypeDynamic instance to a job that has access to chunk data, such as an IJobChunk job, to access that type of component inside the job. GetArchetypeChunkEntityType() Gets the run-time type information required to access the array of Entity objects in a chunk. Declaration public ArchetypeChunkEntityType GetArchetypeChunkEntityType() Returns Type Description ArchetypeChunkEntityType An object representing the type information required to safely access Entity instances stored in a chunk. GetArchetypeChunkSharedComponentType<T>() Gets the run-time type information required to access a shared component data in a chunk. Declaration public ArchetypeChunkSharedComponentType<T> GetArchetypeChunkSharedComponentType<T>() where T : struct, ISharedComponentData Returns Type Description ArchetypeChunkSharedComponentType <T> An object representing the type information required to safely access shared component data stored in a chunk. Type Parameters Name Description T A struct that implements ISharedComponentData . GetComponentDataFromEntity<T>(Boolean) Gets an array-like container containing all components of type T, indexed by Entity. Declaration public ComponentDataFromEntity<T> GetComponentDataFromEntity<T>(bool isReadOnly = false) where T : struct, IComponentData Parameters Type Name Description Boolean isReadOnly Whether the data is only read, not written. Access data as read-only whenever possible. Returns Type Description ComponentDataFromEntity <T> All component data of type T. Type Parameters Name Description T A struct that implements IComponentData . GetEntityQuery(NativeArray<ComponentType>) Gets the cached query for the specified component types, if one exists; otherwise, creates a new query instance and caches it. Declaration protected EntityQuery GetEntityQuery(NativeArray<ComponentType> componentTypes) Parameters Type Name Description NativeArray < ComponentType > componentTypes An array of component types. Returns Type Description EntityQuery The new or cached query. GetEntityQuery(ComponentType[]) Gets the cached query for the specified component types, if one exists; otherwise, creates a new query instance and caches it. Declaration protected EntityQuery GetEntityQuery(params ComponentType[] componentTypes) Parameters Type Name Description ComponentType [] componentTypes An array or comma-separated list of component types. Returns Type Description EntityQuery The new or cached query. GetEntityQuery(EntityQueryDesc[]) Combines an array of query description objects into a single query. Declaration protected EntityQuery GetEntityQuery(params EntityQueryDesc[] queryDesc) Parameters Type Name Description EntityQueryDesc [] queryDesc An array of query description objects to be combined to define the query. Returns Type Description EntityQuery The new or cached query. Remarks This function looks for a cached query matching the combined query descriptions, and returns it if one exists; otherwise, the function creates a new query instance and caches it. GetSingleton<T>() Gets the value of a singleton component. Declaration public T GetSingleton<T>() where T : struct, IComponentData Returns Type Description T The component. Type Parameters Name Description T The IComponentData subtype of the singleton component. See Also GetSingleton<T>() GetSingletonEntity<T>() Gets the Entity instance for a singleton. Declaration public Entity GetSingletonEntity<T>() Returns Type Description Entity The entity associated with the specified singleton component. Type Parameters Name Description T The Type of the singleton component. See Also GetSingletonEntity() HasSingleton<T>() Checks whether a singelton component of the specified type exists. Declaration public bool HasSingleton<T>() where T : struct, IComponentData Returns Type Description Boolean True, if a singleton of the specified type exists in the current World . Type Parameters Name Description T The IComponentData subtype of the singleton component. OnCreate() Called when this system is created. Declaration protected virtual void OnCreate() Remarks Implement an OnCreate() function to set up system resources when it is created. OnCreate is invoked before the the first time OnStartRunning() and OnUpdate are invoked. OnCreateForCompiler() Declaration protected virtual void OnCreateForCompiler() OnCreateManager() WARNING: OnCreateManager() is obsolete and should be renamed to OnCreate. OnCreateManager will not be called by Unity after 2019-10-22 Declaration protected virtual void OnCreateManager() OnDestroy() Called when this system is destroyed. Declaration protected virtual void OnDestroy() Remarks Systems are destroyed when the application shuts down, the World is destroyed, or you call DestroySystem(ComponentSystemBase) . In the Unity Editor, system destruction occurs when you exit Play Mode and when scripts are reloaded. OnDestroyManager() WARNING: OnDestroyManager() is obsolete and should be renamed to OnDestroy. OnDestroyManager will not be called by Unity after 2019-10-22 Declaration protected virtual void OnDestroyManager() OnStartRunning() Called before the first call to OnUpdate and when a system resumes updating after being stopped or disabled. Declaration protected virtual void OnStartRunning() Remarks If the EntityQuery objects defined for a system do not match any existing entities then the system skips updates until a successful match is found. Likewise, if you set Enabled to false, then the system stops running. In both cases, OnStopRunning() is called when a running system stops updating; OnStartRunning is called when it starts updating again. OnStopRunning() Called when this system stops running because no entities match the system's EntityQuery objects or because you change the system Enabled property to false. Declaration protected virtual void OnStopRunning() Remarks If the EntityQuery objects defined for a system do not match any existing entities then the system skips updating until a successful match is found. Likewise, if you set Enabled to false, then the system stops running. In both cases, OnStopRunning() is called when a running system stops updating; OnStartRunning is called when it starts updating again. RequireForUpdate(EntityQuery) Adds a query that must return entities for the system to run. You can add multiple required queries to a system; all of them must match at least one entity for the system to run. Declaration public void RequireForUpdate(EntityQuery query) Parameters Type Name Description EntityQuery query A query that must match entities this frame in order for this system to run. Remarks Any queries added through RequireforUpdate override all other queries cached by this system. In other words, if any required query does not find matching entities, the update is skipped even if another query created for the system (either explicitly or implicitly) does match entities and vice versa. RequireSingletonForUpdate<T>() Require that a specific singleton component exist for this system to run. Declaration public void RequireSingletonForUpdate<T>() Type Parameters Name Description T The IComponentData subtype of the singleton component. SetSingleton<T>(T) Sets the value of a singleton component. Declaration public void SetSingleton<T>(T value) where T : struct, IComponentData Parameters Type Name Description T value A component containing the value to assign to the singleton. Type Parameters Name Description T The IComponentData subtype of the singleton component. See Also SetSingleton<T>(T) ShouldRunSystem() Reports whether any of this system's entity queries currently match any chunks. This function is used internally to determine whether the system's OnUpdate function can be skipped. Declaration public bool ShouldRunSystem() Returns Type Description Boolean True, if the queries in this system match existing entities or the system has the AlwaysUpdateSystemAttribute . Remarks A system without any queries also returns true. Note that even if this function returns true, other factors may prevent a system from updating. For example, a system will not be updated if its Enabled property is false. Update() Executes the system immediately. Declaration public void Update() Remarks The exact behavior is determined by this system's specific subclass. See Also ComponentSystem JobComponentSystem ComponentSystemGroup EntityCommandBufferSystem Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Entities.BuildUtils.TypeUtils.html": {
    "href": "api/Unity.Entities.BuildUtils.TypeUtils.html",
    "title": "Class TypeUtils | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class TypeUtils Inheritance Object TypeUtils Namespace : Unity.Entities.BuildUtils <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class TypeUtils Methods AlignAndSizeOfField(FieldReference, Int32) Declaration public static TypeUtils.AlignAndSize AlignAndSizeOfField(FieldReference fieldRef, int bits) Parameters Type Name Description FieldReference fieldRef Int32 bits Returns Type Description TypeUtils.AlignAndSize AlignAndSizeOfType(MetadataType, Int32) Declaration public static TypeUtils.AlignAndSize AlignAndSizeOfType(MetadataType mtype, int bits) Parameters Type Name Description MetadataType mtype Int32 bits Returns Type Description TypeUtils.AlignAndSize AlignAndSizeOfType(TypeReference, Int32) Declaration public static TypeUtils.AlignAndSize AlignAndSizeOfType(TypeReference typeRef, int bits) Parameters Type Name Description TypeReference typeRef Int32 bits Returns Type Description TypeUtils.AlignAndSize AlignUp(Int32, Int32) Declaration public static int AlignUp(int sz, int align) Parameters Type Name Description Int32 sz Int32 align Returns Type Description Int32 GetEntityFieldOffsets(TypeReference, Int32) Declaration public static List<int> GetEntityFieldOffsets(TypeReference type, int archBits) Parameters Type Name Description TypeReference type Int32 archBits Returns Type Description List < Int32 > GetFieldOffsetsOf(Func<FieldReference, TypeReference, Boolean>, TypeReference, Int32) Declaration public static List<int> GetFieldOffsetsOf(Func<FieldReference, TypeReference, bool> match, TypeReference typeToLookIn, int archBits) Parameters Type Name Description Func < FieldReference , TypeReference , Boolean > match TypeReference typeToLookIn Int32 archBits Returns Type Description List < Int32 > GetFieldOffsetsOf(String, TypeReference, Int32) Declaration public static List<int> GetFieldOffsetsOf(string fieldTypeName, TypeReference typeToLookIn, int archBits) Parameters Type Name Description String fieldTypeName TypeReference typeToLookIn Int32 archBits Returns Type Description List < Int32 > GetFieldOffsetsOf(TypeReference, TypeReference, Int32) Declaration public static List<int> GetFieldOffsetsOf(TypeReference typeToFind, TypeReference typeToLookIn, int archBits) Parameters Type Name Description TypeReference typeToFind TypeReference typeToLookIn Int32 archBits Returns Type Description List < Int32 > GetFieldOffsetsOfByFieldName(String, TypeReference, Int32) Declaration public static List<int> GetFieldOffsetsOfByFieldName(string fieldName, TypeReference typeToLookIn, int archBits) Parameters Type Name Description String fieldName TypeReference typeToLookIn Int32 archBits Returns Type Description List < Int32 > HasNestedDynamicArrayType(TypeReference) Declaration public static bool HasNestedDynamicArrayType(TypeReference type) Parameters Type Name Description TypeReference type Returns Type Description Boolean IterateFieldsRecurse(Action<FieldReference, TypeReference>, TypeReference) Declaration public static void IterateFieldsRecurse(Action<FieldReference, TypeReference> processFunc, TypeReference type) Parameters Type Name Description Action < FieldReference , TypeReference > processFunc TypeReference type PreprocessTypeFields(TypeReference, Int32) Declaration public static void PreprocessTypeFields(TypeReference valuetype, int bits) Parameters Type Name Description TypeReference valuetype Int32 bits ValidateAllowedObjectType(TypeReference) Declaration public static void ValidateAllowedObjectType(TypeReference typeRef) Parameters Type Name Description TypeReference typeRef"
  },
  "api/Unity.Entities.BuildUtils.TypeUtils.AlignAndSize.html": {
    "href": "api/Unity.Entities.BuildUtils.TypeUtils.AlignAndSize.html",
    "title": "Struct TypeUtils.AlignAndSize | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct TypeUtils.AlignAndSize Namespace : Unity.Entities.BuildUtils <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct AlignAndSize Constructors AlignAndSize(Int32) Declaration public AlignAndSize(int single) Parameters Type Name Description Int32 single AlignAndSize(Int32, Int32) Declaration public AlignAndSize(int a, int s) Parameters Type Name Description Int32 a Int32 s AlignAndSize(Int32, Int32, Int32) Declaration public AlignAndSize(int a, int s, int o) Parameters Type Name Description Int32 a Int32 s Int32 o AlignAndSize(Int32, Int32, Int32, Boolean) Declaration public AlignAndSize(int a, int s, int o, bool e) Parameters Type Name Description Int32 a Int32 s Int32 o Boolean e Fields align Declaration public readonly int align Field Value Type Description Int32 Eight Declaration public static readonly TypeUtils.AlignAndSize Eight Field Value Type Description TypeUtils.AlignAndSize empty Declaration public readonly bool empty Field Value Type Description Boolean Four Declaration public static readonly TypeUtils.AlignAndSize Four Field Value Type Description TypeUtils.AlignAndSize offset Declaration public readonly int offset Field Value Type Description Int32 One Declaration public static readonly TypeUtils.AlignAndSize One Field Value Type Description TypeUtils.AlignAndSize Pointer2_32 Declaration public static readonly TypeUtils.AlignAndSize Pointer2_32 Field Value Type Description TypeUtils.AlignAndSize Pointer2_64 Declaration public static readonly TypeUtils.AlignAndSize Pointer2_64 Field Value Type Description TypeUtils.AlignAndSize Pointer3_32 Declaration public static readonly TypeUtils.AlignAndSize Pointer3_32 Field Value Type Description TypeUtils.AlignAndSize Pointer3_64 Declaration public static readonly TypeUtils.AlignAndSize Pointer3_64 Field Value Type Description TypeUtils.AlignAndSize Pointer4_32 Declaration public static readonly TypeUtils.AlignAndSize Pointer4_32 Field Value Type Description TypeUtils.AlignAndSize Pointer4_64 Declaration public static readonly TypeUtils.AlignAndSize Pointer4_64 Field Value Type Description TypeUtils.AlignAndSize Sentinel Declaration public static readonly TypeUtils.AlignAndSize Sentinel Field Value Type Description TypeUtils.AlignAndSize size Declaration public readonly int size Field Value Type Description Int32 Two Declaration public static readonly TypeUtils.AlignAndSize Two Field Value Type Description TypeUtils.AlignAndSize Zero Declaration public static readonly TypeUtils.AlignAndSize Zero Field Value Type Description TypeUtils.AlignAndSize Properties IsSentinel Declaration public bool IsSentinel { get; } Property Value Type Description Boolean Methods DynamicArray(Int32) Declaration public static TypeUtils.AlignAndSize DynamicArray(int bits) Parameters Type Name Description Int32 bits Returns Type Description TypeUtils.AlignAndSize NativeString(Int32) Declaration public static TypeUtils.AlignAndSize NativeString(int bits) Parameters Type Name Description Int32 bits Returns Type Description TypeUtils.AlignAndSize Pointer(Int32) Declaration public static TypeUtils.AlignAndSize Pointer(int bits) Parameters Type Name Description Int32 bits Returns Type Description TypeUtils.AlignAndSize ToString() Declaration public override string ToString() Returns Type Description String Overrides ValueType.ToString()"
  },
  "api/Unity.Entities.BlobPtr-1.html": {
    "href": "api/Unity.Entities.BlobPtr-1.html",
    "title": "Struct BlobPtr<T> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct BlobPtr<T> A pointer referencing a struct, array, or field inside a blob asset. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct BlobPtr<T> where T : struct Type Parameters Name Description T The data type of the referenced object. Properties Value The value, of type T to which the pointer refers. Declaration public T Value { get; } Property Value Type Description T Remarks The property is a reference return . Exceptions Type Condition InvalidOperationException Thrown if the pointer does not reference a valid instance of a data type. Methods GetUnsafePtr() Provides an unsafe pointer to the referenced data. Declaration public void *GetUnsafePtr() Returns Type Description Void * An unsafe pointer. Remarks You can only use unsafe pointers in contexts. See Also BlobBuilder"
  },
  "api/Unity.Entities.BlobBuilderArray-1.html": {
    "href": "api/Unity.Entities.BlobBuilderArray-1.html",
    "title": "Struct BlobBuilderArray<T> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct BlobBuilderArray<T> Used by the BlobBuilder methods to reference the arrays within a blob asset. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct BlobBuilderArray<T> where T : struct Type Parameters Name Description T The data type of the elements in the array. Remarks Use this reference to initialize the data of a newly created BlobArray<T> . Constructors BlobBuilderArray(Void*, Int32) For internal, BlobBuilder , use only. Declaration public BlobBuilderArray(void *data, int length) Parameters Type Name Description Void * data Int32 length Properties Item[Int32] Array index accessor for the elements in the array. Declaration public T this[int index] { get; } Parameters Type Name Description Int32 index The sequential index of an array item. Property Value Type Description T Exceptions Type Condition IndexOutOfRangeException Thrown when index is less than zero or greater than the length of the array (minus one). Length Reports the number of elements in the array. Declaration public int Length { get; } Property Value Type Description Int32 Methods GetUnsafePtr() Provides a pointer to the data stored in the array. Declaration public void *GetUnsafePtr() Returns Type Description Void * A pointer to the first element in the array. Remarks You can only call this function in an Unsafe context."
  },
  "api/Unity.Entities.BlobAssetChange.html": {
    "href": "api/Unity.Entities.BlobAssetChange.html",
    "title": "Struct BlobAssetChange | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct BlobAssetChange Header for a changed blob asset. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct BlobAssetChange Fields Hash The content hash for this blob asset. Declaration public ulong Hash Field Value Type Description UInt64 Length Byte length of this blob asset in the BlobAssetData array. Declaration public int Length Field Value Type Description Int32"
  },
  "api/Unity.Entities.BlobArray-1.html": {
    "href": "api/Unity.Entities.BlobArray-1.html",
    "title": "Struct BlobArray<T> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct BlobArray<T> An immutable array of value types stored in a blob asset. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct BlobArray<T> where T : struct Type Parameters Name Description T The data type of the elements in the array. Must be a struct or other value type. Remarks When creating a blob asset, use the BlobBuilderArray<T> provided by a BlobBuilder instance to set the array elements. Properties Item[Int32] The element of the array at the index position. Declaration public T this[int index] { get; } Parameters Type Name Description Int32 index The array index. Property Value Type Description T Remarks The array element is a reference return . Exceptions Type Condition IndexOutOfRangeException Thrown if index is out of bounds. Length The number of elements in the array. Declaration public int Length { get; } Property Value Type Description Int32 Methods GetUnsafePtr() Provides an unsafe pointer to the array data. Declaration public void *GetUnsafePtr() Returns Type Description Void * An unsafe pointer. Remarks You can only use unsafe pointers in contexts. ToArray() Declaration public T[] ToArray() Returns Type Description T[] See Also BlobBuilder"
  },
  "api/Unity.Entities.ArchetypeChunkComponentType-1.html": {
    "href": "api/Unity.Entities.ArchetypeChunkComponentType-1.html",
    "title": "Struct ArchetypeChunkComponentType<T> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct ArchetypeChunkComponentType<T> Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct ArchetypeChunkComponentType<T> Type Parameters Name Description T Properties GlobalSystemVersion Declaration public uint GlobalSystemVersion { get; } Property Value Type Description UInt32 IsReadOnly Declaration public bool IsReadOnly { get; } Property Value Type Description Boolean"
  },
  "api/Unity.Entities.ArchetypeChunkComponentObjects-1.html": {
    "href": "api/Unity.Entities.ArchetypeChunkComponentObjects-1.html",
    "title": "Struct ArchetypeChunkComponentObjects<T> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct ArchetypeChunkComponentObjects<T> Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct ArchetypeChunkComponentObjects<T> where T : class Type Parameters Name Description T Fields Length Declaration public readonly int Length Field Value Type Description Int32 Properties Item[Int32] Declaration public T this[int index] { get; set; } Parameters Type Name Description Int32 index Property Value Type Description T Exceptions Type Condition IndexOutOfRangeException"
  },
  "api/Unity.Core.XXHash.html": {
    "href": "api/Unity.Core.XXHash.html",
    "title": "Class XXHash | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class XXHash XXHash implementation. Inheritance Object XXHash Namespace : Unity.Core <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class XXHash Methods Hash32(Byte*, Int32, UInt32) Generate a 32-bit xxHash value. Declaration public static uint Hash32(byte *buffer, int bufferLength, uint seed = 0U) Parameters Type Name Description Byte * buffer Input buffer. Int32 bufferLength UInt32 seed Optional seed. Returns Type Description UInt32 32-bit hash value. Hash32(Stream, UInt32) Generate a 32-bit xxHash value from a stream. Declaration public static uint Hash32(Stream stream, uint seed = 0U) Parameters Type Name Description Stream stream Input stream. UInt32 seed Optional seed. Returns Type Description UInt32 32-bit hash value. Hash64(Byte*, Int32, UInt64) Generate a 64-bit xxHash value. Declaration public static ulong Hash64(byte *buffer, int bufferLength, ulong seed = 0UL) Parameters Type Name Description Byte * buffer Input buffer. Int32 bufferLength UInt64 seed Optional seed. Returns Type Description UInt64 Computed 64-bit hash value. Hash64(Stream, UInt64) Generate a 64-bit xxHash value from a stream. Declaration public static ulong Hash64(Stream stream, ulong seed = 0UL) Parameters Type Name Description Stream stream Input stream. UInt64 seed Optional seed. Returns Type Description UInt64 Computed 64-bit hash value."
  },
  "api/Unity.Core.TimeData.html": {
    "href": "api/Unity.Core.TimeData.html",
    "title": "Struct TimeData | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct TimeData Namespace : Unity.Core <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct TimeData Constructors TimeData(Double, Single) Create a new TimeData struct with the given values. Declaration public TimeData(double elapsedTime, float deltaTime) Parameters Type Name Description Double elapsedTime Time since the start of time collection. Single deltaTime Elapsed time since the last time-updating event occurred. Fields DeltaTime The time in seconds since the last time-updating event occurred. (For example, a frame.) Declaration public readonly float DeltaTime Field Value Type Description Single ElapsedTime The total cumulative elapsed time in seconds. Declaration public readonly double ElapsedTime Field Value Type Description Double Properties fixedDeltaTime Declaration public float fixedDeltaTime { get; } Property Value Type Description Single"
  },
  "api/Unity.Build.IRunStep.html": {
    "href": "api/Unity.Build.IRunStep.html",
    "title": "Interface IRunStep | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Interface IRunStep Namespace : Unity.Build <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface IRunStep Methods CanRun(BuildSettings, out String) Declaration bool CanRun(BuildSettings settings, out string reason) Parameters Type Name Description BuildSettings settings String reason Returns Type Description Boolean Start(BuildSettings) Declaration RunStepResult Start(BuildSettings settings) Parameters Type Name Description BuildSettings settings Returns Type Description RunStepResult"
  },
  "api/Unity.Build.IRunInstance.html": {
    "href": "api/Unity.Build.IRunInstance.html",
    "title": "Interface IRunInstance | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Interface IRunInstance Namespace : Unity.Build <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface IRunInstance : IDisposable Properties IsRunning Declaration bool IsRunning { get; } Property Value Type Description Boolean"
  },
  "api/Unity.Transforms.EndFrameCompositeRotationSystem.html": {
    "href": "api/Unity.Transforms.EndFrameCompositeRotationSystem.html",
    "title": "Class EndFrameCompositeRotationSystem | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class EndFrameCompositeRotationSystem Inheritance Object ComponentSystemBase JobComponentSystem CompositeRotationSystem EndFrameCompositeRotationSystem Inherited Members CompositeRotationSystem.OnCreate() CompositeRotationSystem.OnUpdate(JobHandle) JobComponentSystem.Entities JobComponentSystem.Job JobComponentSystem.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnDestroyManager() ComponentSystemBase.OnCreateManager() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.Update() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetArchetypeChunkComponentType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkComponentTypeDynamic(ComponentType) ComponentSystemBase.GetArchetypeChunkBufferType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkSharedComponentType<T>() ComponentSystemBase.GetArchetypeChunkEntityType() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [UpdateInGroup(typeof(TransformSystemGroup))] [UpdateAfter(typeof(EndFrameRotationEulerSystem))] public class EndFrameCompositeRotationSystem : CompositeRotationSystem Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Transforms.CopyTransformToGameObjectSystem.html": {
    "href": "api/Unity.Transforms.CopyTransformToGameObjectSystem.html",
    "title": "Class CopyTransformToGameObjectSystem | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class CopyTransformToGameObjectSystem Inheritance Object ComponentSystemBase JobComponentSystem CopyTransformToGameObjectSystem Inherited Members JobComponentSystem.Entities JobComponentSystem.Job JobComponentSystem.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnDestroyManager() ComponentSystemBase.OnCreateManager() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.Update() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetArchetypeChunkComponentType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkComponentTypeDynamic(ComponentType) ComponentSystemBase.GetArchetypeChunkBufferType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkSharedComponentType<T>() ComponentSystemBase.GetArchetypeChunkEntityType() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [UpdateInGroup(typeof(TransformSystemGroup))] [UpdateAfter(typeof(EndFrameLocalToParentSystem))] public class CopyTransformToGameObjectSystem : JobComponentSystem Methods OnCreate() Declaration protected override void OnCreate() Overrides ComponentSystemBase.OnCreate() OnUpdate(JobHandle) Declaration protected override JobHandle OnUpdate(JobHandle inputDeps) Parameters Type Name Description JobHandle inputDeps Returns Type Description JobHandle Overrides JobComponentSystem.OnUpdate(JobHandle) Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Entities.Serialization.BinaryPrimitiveWriterAdapter.html": {
    "href": "api/Unity.Entities.Serialization.BinaryPrimitiveWriterAdapter.html",
    "title": "Class BinaryPrimitiveWriterAdapter | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class BinaryPrimitiveWriterAdapter Inheritance Object BinaryPrimitiveWriterAdapter Namespace : Unity.Entities.Serialization <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class BinaryPrimitiveWriterAdapter : IPropertyVisitorAdapter, IVisitAdapterPrimitives, IVisitAdapter<string>, IVisitAdapter Constructors BinaryPrimitiveWriterAdapter(UnsafeAppendBuffer*) Declaration public BinaryPrimitiveWriterAdapter(UnsafeAppendBuffer*buffer) Parameters Type Name Description UnsafeAppendBuffer * buffer Properties Buffer Declaration public UnsafeAppendBuffer Buffer { get; } Property Value Type Description UnsafeAppendBuffer Methods Visit<TProperty, TContainer>(IPropertyVisitor, TProperty, ref TContainer, ref Boolean, ref ChangeTracker) Declaration public VisitStatus Visit<TProperty, TContainer>(IPropertyVisitor visitor, TProperty property, ref TContainer container, ref bool value, ref ChangeTracker changeTracker) where TProperty : IProperty<TContainer, bool> Parameters Type Name Description IPropertyVisitor visitor TProperty property TContainer container Boolean value ChangeTracker changeTracker Returns Type Description VisitStatus Type Parameters Name Description TProperty TContainer Visit<TProperty, TContainer>(IPropertyVisitor, TProperty, ref TContainer, ref Byte, ref ChangeTracker) Declaration public VisitStatus Visit<TProperty, TContainer>(IPropertyVisitor visitor, TProperty property, ref TContainer container, ref byte value, ref ChangeTracker changeTracker) where TProperty : IProperty<TContainer, byte> Parameters Type Name Description IPropertyVisitor visitor TProperty property TContainer container Byte value ChangeTracker changeTracker Returns Type Description VisitStatus Type Parameters Name Description TProperty TContainer Visit<TProperty, TContainer>(IPropertyVisitor, TProperty, ref TContainer, ref Char, ref ChangeTracker) Declaration public VisitStatus Visit<TProperty, TContainer>(IPropertyVisitor visitor, TProperty property, ref TContainer container, ref char value, ref ChangeTracker changeTracker) where TProperty : IProperty<TContainer, char> Parameters Type Name Description IPropertyVisitor visitor TProperty property TContainer container Char value ChangeTracker changeTracker Returns Type Description VisitStatus Type Parameters Name Description TProperty TContainer Visit<TProperty, TContainer>(IPropertyVisitor, TProperty, ref TContainer, ref Double, ref ChangeTracker) Declaration public VisitStatus Visit<TProperty, TContainer>(IPropertyVisitor visitor, TProperty property, ref TContainer container, ref double value, ref ChangeTracker changeTracker) where TProperty : IProperty<TContainer, double> Parameters Type Name Description IPropertyVisitor visitor TProperty property TContainer container Double value ChangeTracker changeTracker Returns Type Description VisitStatus Type Parameters Name Description TProperty TContainer Visit<TProperty, TContainer>(IPropertyVisitor, TProperty, ref TContainer, ref Int16, ref ChangeTracker) Declaration public VisitStatus Visit<TProperty, TContainer>(IPropertyVisitor visitor, TProperty property, ref TContainer container, ref short value, ref ChangeTracker changeTracker) where TProperty : IProperty<TContainer, short> Parameters Type Name Description IPropertyVisitor visitor TProperty property TContainer container Int16 value ChangeTracker changeTracker Returns Type Description VisitStatus Type Parameters Name Description TProperty TContainer Visit<TProperty, TContainer>(IPropertyVisitor, TProperty, ref TContainer, ref Int32, ref ChangeTracker) Declaration public VisitStatus Visit<TProperty, TContainer>(IPropertyVisitor visitor, TProperty property, ref TContainer container, ref int value, ref ChangeTracker changeTracker) where TProperty : IProperty<TContainer, int> Parameters Type Name Description IPropertyVisitor visitor TProperty property TContainer container Int32 value ChangeTracker changeTracker Returns Type Description VisitStatus Type Parameters Name Description TProperty TContainer Visit<TProperty, TContainer>(IPropertyVisitor, TProperty, ref TContainer, ref Int64, ref ChangeTracker) Declaration public VisitStatus Visit<TProperty, TContainer>(IPropertyVisitor visitor, TProperty property, ref TContainer container, ref long value, ref ChangeTracker changeTracker) where TProperty : IProperty<TContainer, long> Parameters Type Name Description IPropertyVisitor visitor TProperty property TContainer container Int64 value ChangeTracker changeTracker Returns Type Description VisitStatus Type Parameters Name Description TProperty TContainer Visit<TProperty, TContainer>(IPropertyVisitor, TProperty, ref TContainer, ref SByte, ref ChangeTracker) Declaration public VisitStatus Visit<TProperty, TContainer>(IPropertyVisitor visitor, TProperty property, ref TContainer container, ref sbyte value, ref ChangeTracker changeTracker) where TProperty : IProperty<TContainer, sbyte> Parameters Type Name Description IPropertyVisitor visitor TProperty property TContainer container SByte value ChangeTracker changeTracker Returns Type Description VisitStatus Type Parameters Name Description TProperty TContainer Visit<TProperty, TContainer>(IPropertyVisitor, TProperty, ref TContainer, ref Single, ref ChangeTracker) Declaration public VisitStatus Visit<TProperty, TContainer>(IPropertyVisitor visitor, TProperty property, ref TContainer container, ref float value, ref ChangeTracker changeTracker) where TProperty : IProperty<TContainer, float> Parameters Type Name Description IPropertyVisitor visitor TProperty property TContainer container Single value ChangeTracker changeTracker Returns Type Description VisitStatus Type Parameters Name Description TProperty TContainer Visit<TProperty, TContainer>(IPropertyVisitor, TProperty, ref TContainer, ref String, ref ChangeTracker) Declaration public VisitStatus Visit<TProperty, TContainer>(IPropertyVisitor visitor, TProperty property, ref TContainer container, ref string value, ref ChangeTracker changeTracker) where TProperty : IProperty<TContainer, string> Parameters Type Name Description IPropertyVisitor visitor TProperty property TContainer container String value ChangeTracker changeTracker Returns Type Description VisitStatus Type Parameters Name Description TProperty TContainer Visit<TProperty, TContainer>(IPropertyVisitor, TProperty, ref TContainer, ref UInt16, ref ChangeTracker) Declaration public VisitStatus Visit<TProperty, TContainer>(IPropertyVisitor visitor, TProperty property, ref TContainer container, ref ushort value, ref ChangeTracker changeTracker) where TProperty : IProperty<TContainer, ushort> Parameters Type Name Description IPropertyVisitor visitor TProperty property TContainer container UInt16 value ChangeTracker changeTracker Returns Type Description VisitStatus Type Parameters Name Description TProperty TContainer Visit<TProperty, TContainer>(IPropertyVisitor, TProperty, ref TContainer, ref UInt32, ref ChangeTracker) Declaration public VisitStatus Visit<TProperty, TContainer>(IPropertyVisitor visitor, TProperty property, ref TContainer container, ref uint value, ref ChangeTracker changeTracker) where TProperty : IProperty<TContainer, uint> Parameters Type Name Description IPropertyVisitor visitor TProperty property TContainer container UInt32 value ChangeTracker changeTracker Returns Type Description VisitStatus Type Parameters Name Description TProperty TContainer Visit<TProperty, TContainer>(IPropertyVisitor, TProperty, ref TContainer, ref UInt64, ref ChangeTracker) Declaration public VisitStatus Visit<TProperty, TContainer>(IPropertyVisitor visitor, TProperty property, ref TContainer container, ref ulong value, ref ChangeTracker changeTracker) where TProperty : IProperty<TContainer, ulong> Parameters Type Name Description IPropertyVisitor visitor TProperty property TContainer container UInt64 value ChangeTracker changeTracker Returns Type Description VisitStatus Type Parameters Name Description TProperty TContainer Visit<TProperty, TContainer, TValue>(IPropertyVisitor, TProperty, ref TContainer, ref TValue, ref ChangeTracker) Declaration public VisitStatus Visit<TProperty, TContainer, TValue>(IPropertyVisitor visitor, TProperty property, ref TContainer container, ref TValue value, ref ChangeTracker changeTracker) where TProperty : IProperty<TContainer, TValue> Parameters Type Name Description IPropertyVisitor visitor TProperty property TContainer container TValue value ChangeTracker changeTracker Returns Type Description VisitStatus Type Parameters Name Description TProperty TContainer TValue"
  },
  "api/Unity.Entities.Serialization.BinaryPrimitiveReaderAdapter.html": {
    "href": "api/Unity.Entities.Serialization.BinaryPrimitiveReaderAdapter.html",
    "title": "Class BinaryPrimitiveReaderAdapter | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class BinaryPrimitiveReaderAdapter Inheritance Object BinaryPrimitiveReaderAdapter Namespace : Unity.Entities.Serialization <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class BinaryPrimitiveReaderAdapter : IPropertyVisitorAdapter, IVisitAdapterPrimitives, IVisitAdapter<string>, IVisitAdapter Constructors BinaryPrimitiveReaderAdapter(UnsafeAppendBuffer.Reader*) Declaration public BinaryPrimitiveReaderAdapter(UnsafeAppendBuffer.Reader*buffer) Parameters Type Name Description UnsafeAppendBuffer.Reader * buffer Fields Buffer Declaration public UnsafeAppendBuffer.Reader*Buffer Field Value Type Description UnsafeAppendBuffer.Reader * Methods Visit<TProperty, TContainer>(IPropertyVisitor, TProperty, ref TContainer, ref Boolean, ref ChangeTracker) Declaration public VisitStatus Visit<TProperty, TContainer>(IPropertyVisitor visitor, TProperty property, ref TContainer container, ref bool value, ref ChangeTracker changeTracker) where TProperty : IProperty<TContainer, bool> Parameters Type Name Description IPropertyVisitor visitor TProperty property TContainer container Boolean value ChangeTracker changeTracker Returns Type Description VisitStatus Type Parameters Name Description TProperty TContainer Visit<TProperty, TContainer>(IPropertyVisitor, TProperty, ref TContainer, ref Byte, ref ChangeTracker) Declaration public VisitStatus Visit<TProperty, TContainer>(IPropertyVisitor visitor, TProperty property, ref TContainer container, ref byte value, ref ChangeTracker changeTracker) where TProperty : IProperty<TContainer, byte> Parameters Type Name Description IPropertyVisitor visitor TProperty property TContainer container Byte value ChangeTracker changeTracker Returns Type Description VisitStatus Type Parameters Name Description TProperty TContainer Visit<TProperty, TContainer>(IPropertyVisitor, TProperty, ref TContainer, ref Char, ref ChangeTracker) Declaration public VisitStatus Visit<TProperty, TContainer>(IPropertyVisitor visitor, TProperty property, ref TContainer container, ref char value, ref ChangeTracker changeTracker) where TProperty : IProperty<TContainer, char> Parameters Type Name Description IPropertyVisitor visitor TProperty property TContainer container Char value ChangeTracker changeTracker Returns Type Description VisitStatus Type Parameters Name Description TProperty TContainer Visit<TProperty, TContainer>(IPropertyVisitor, TProperty, ref TContainer, ref Double, ref ChangeTracker) Declaration public VisitStatus Visit<TProperty, TContainer>(IPropertyVisitor visitor, TProperty property, ref TContainer container, ref double value, ref ChangeTracker changeTracker) where TProperty : IProperty<TContainer, double> Parameters Type Name Description IPropertyVisitor visitor TProperty property TContainer container Double value ChangeTracker changeTracker Returns Type Description VisitStatus Type Parameters Name Description TProperty TContainer Visit<TProperty, TContainer>(IPropertyVisitor, TProperty, ref TContainer, ref Int16, ref ChangeTracker) Declaration public VisitStatus Visit<TProperty, TContainer>(IPropertyVisitor visitor, TProperty property, ref TContainer container, ref short value, ref ChangeTracker changeTracker) where TProperty : IProperty<TContainer, short> Parameters Type Name Description IPropertyVisitor visitor TProperty property TContainer container Int16 value ChangeTracker changeTracker Returns Type Description VisitStatus Type Parameters Name Description TProperty TContainer Visit<TProperty, TContainer>(IPropertyVisitor, TProperty, ref TContainer, ref Int32, ref ChangeTracker) Declaration public VisitStatus Visit<TProperty, TContainer>(IPropertyVisitor visitor, TProperty property, ref TContainer container, ref int value, ref ChangeTracker changeTracker) where TProperty : IProperty<TContainer, int> Parameters Type Name Description IPropertyVisitor visitor TProperty property TContainer container Int32 value ChangeTracker changeTracker Returns Type Description VisitStatus Type Parameters Name Description TProperty TContainer Visit<TProperty, TContainer>(IPropertyVisitor, TProperty, ref TContainer, ref Int64, ref ChangeTracker) Declaration public VisitStatus Visit<TProperty, TContainer>(IPropertyVisitor visitor, TProperty property, ref TContainer container, ref long value, ref ChangeTracker changeTracker) where TProperty : IProperty<TContainer, long> Parameters Type Name Description IPropertyVisitor visitor TProperty property TContainer container Int64 value ChangeTracker changeTracker Returns Type Description VisitStatus Type Parameters Name Description TProperty TContainer Visit<TProperty, TContainer>(IPropertyVisitor, TProperty, ref TContainer, ref SByte, ref ChangeTracker) Declaration public VisitStatus Visit<TProperty, TContainer>(IPropertyVisitor visitor, TProperty property, ref TContainer container, ref sbyte value, ref ChangeTracker changeTracker) where TProperty : IProperty<TContainer, sbyte> Parameters Type Name Description IPropertyVisitor visitor TProperty property TContainer container SByte value ChangeTracker changeTracker Returns Type Description VisitStatus Type Parameters Name Description TProperty TContainer Visit<TProperty, TContainer>(IPropertyVisitor, TProperty, ref TContainer, ref Single, ref ChangeTracker) Declaration public VisitStatus Visit<TProperty, TContainer>(IPropertyVisitor visitor, TProperty property, ref TContainer container, ref float value, ref ChangeTracker changeTracker) where TProperty : IProperty<TContainer, float> Parameters Type Name Description IPropertyVisitor visitor TProperty property TContainer container Single value ChangeTracker changeTracker Returns Type Description VisitStatus Type Parameters Name Description TProperty TContainer Visit<TProperty, TContainer>(IPropertyVisitor, TProperty, ref TContainer, ref String, ref ChangeTracker) Declaration public VisitStatus Visit<TProperty, TContainer>(IPropertyVisitor visitor, TProperty property, ref TContainer container, ref string value, ref ChangeTracker changeTracker) where TProperty : IProperty<TContainer, string> Parameters Type Name Description IPropertyVisitor visitor TProperty property TContainer container String value ChangeTracker changeTracker Returns Type Description VisitStatus Type Parameters Name Description TProperty TContainer Visit<TProperty, TContainer>(IPropertyVisitor, TProperty, ref TContainer, ref UInt16, ref ChangeTracker) Declaration public VisitStatus Visit<TProperty, TContainer>(IPropertyVisitor visitor, TProperty property, ref TContainer container, ref ushort value, ref ChangeTracker changeTracker) where TProperty : IProperty<TContainer, ushort> Parameters Type Name Description IPropertyVisitor visitor TProperty property TContainer container UInt16 value ChangeTracker changeTracker Returns Type Description VisitStatus Type Parameters Name Description TProperty TContainer Visit<TProperty, TContainer>(IPropertyVisitor, TProperty, ref TContainer, ref UInt32, ref ChangeTracker) Declaration public VisitStatus Visit<TProperty, TContainer>(IPropertyVisitor visitor, TProperty property, ref TContainer container, ref uint value, ref ChangeTracker changeTracker) where TProperty : IProperty<TContainer, uint> Parameters Type Name Description IPropertyVisitor visitor TProperty property TContainer container UInt32 value ChangeTracker changeTracker Returns Type Description VisitStatus Type Parameters Name Description TProperty TContainer Visit<TProperty, TContainer>(IPropertyVisitor, TProperty, ref TContainer, ref UInt64, ref ChangeTracker) Declaration public VisitStatus Visit<TProperty, TContainer>(IPropertyVisitor visitor, TProperty property, ref TContainer container, ref ulong value, ref ChangeTracker changeTracker) where TProperty : IProperty<TContainer, ulong> Parameters Type Name Description IPropertyVisitor visitor TProperty property TContainer container UInt64 value ChangeTracker changeTracker Returns Type Description VisitStatus Type Parameters Name Description TProperty TContainer Visit<TProperty, TContainer, TValue>(IPropertyVisitor, TProperty, ref TContainer, ref TValue, ref ChangeTracker) Declaration public VisitStatus Visit<TProperty, TContainer, TValue>(IPropertyVisitor visitor, TProperty property, ref TContainer container, ref TValue value, ref ChangeTracker changeTracker) where TProperty : IProperty<TContainer, TValue> Parameters Type Name Description IPropertyVisitor visitor TProperty property TContainer container TValue value ChangeTracker changeTracker Returns Type Description VisitStatus Type Parameters Name Description TProperty TContainer TValue"
  },
  "api/Unity.Entities.ScriptBehaviourUpdateOrder.html": {
    "href": "api/Unity.Entities.ScriptBehaviourUpdateOrder.html",
    "title": "Class ScriptBehaviourUpdateOrder | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class ScriptBehaviourUpdateOrder Inheritance Object ScriptBehaviourUpdateOrder Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class ScriptBehaviourUpdateOrder Properties CurrentPlayerLoop Declaration public static PlayerLoopSystem CurrentPlayerLoop { get; } Property Value Type Description PlayerLoopSystem Methods SetPlayerLoop(PlayerLoopSystem) Declaration public static void SetPlayerLoop(PlayerLoopSystem playerLoop) Parameters Type Name Description PlayerLoopSystem playerLoop UpdatePlayerLoop(World, Nullable<PlayerLoopSystem>) Update the player loop with a world's root-level systems Declaration public static void UpdatePlayerLoop(World world, PlayerLoopSystem? existingPlayerLoop = default(PlayerLoopSystem? )) Parameters Type Name Description World world World with root-level systems that need insertion into the player loop Nullable < PlayerLoopSystem > existingPlayerLoop Optional parameter to preserve existing player loops (e.g. ScriptBehaviourUpdateOrder.CurrentPlayerLoop)"
  },
  "api/Unity.Entities.JobForEachExtensions.html": {
    "href": "api/Unity.Entities.JobForEachExtensions.html",
    "title": "Class JobForEachExtensions | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class JobForEachExtensions Inheritance Object JobForEachExtensions Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class JobForEachExtensions Methods CalculateEntityCount<T>(T, ComponentSystemBase) Declaration public static int CalculateEntityCount<T>(this T jobData, ComponentSystemBase system) where T : struct, JobForEachExtensions.IBaseJobForEach Parameters Type Name Description T jobData ComponentSystemBase system Returns Type Description Int32 Type Parameters Name Description T GetEntityQueryForIJobForEach(ComponentSystemBase, Type) Declaration public static EntityQuery GetEntityQueryForIJobForEach(this ComponentSystemBase system, Type jobType) Parameters Type Name Description ComponentSystemBase system Type jobType Returns Type Description EntityQuery PrepareEntityQuery<T>(T, ComponentSystemBase) Declaration public static void PrepareEntityQuery<T>(this T jobData, ComponentSystemBase system) where T : struct, JobForEachExtensions.IBaseJobForEach Parameters Type Name Description T jobData ComponentSystemBase system Type Parameters Name Description T Run<T>(T, ComponentSystemBase, JobHandle) Declaration public static JobHandle Run<T>(this T jobData, ComponentSystemBase system, JobHandle dependsOn = null) where T : struct, JobForEachExtensions.IBaseJobForEach Parameters Type Name Description T jobData ComponentSystemBase system JobHandle dependsOn Returns Type Description JobHandle Type Parameters Name Description T Run<T>(T, EntityQuery, JobHandle) Declaration public static JobHandle Run<T>(this T jobData, EntityQuery query, JobHandle dependsOn = null) where T : struct, JobForEachExtensions.IBaseJobForEach Parameters Type Name Description T jobData EntityQuery query JobHandle dependsOn Returns Type Description JobHandle Type Parameters Name Description T Schedule<T>(T, ComponentSystemBase, JobHandle) Declaration public static JobHandle Schedule<T>(this T jobData, ComponentSystemBase system, JobHandle dependsOn = null) where T : struct, JobForEachExtensions.IBaseJobForEach Parameters Type Name Description T jobData ComponentSystemBase system JobHandle dependsOn Returns Type Description JobHandle Type Parameters Name Description T Schedule<T>(T, EntityQuery, JobHandle) Declaration public static JobHandle Schedule<T>(this T jobData, EntityQuery query, JobHandle dependsOn = null) where T : struct, JobForEachExtensions.IBaseJobForEach Parameters Type Name Description T jobData EntityQuery query JobHandle dependsOn Returns Type Description JobHandle Type Parameters Name Description T ScheduleSingle<T>(T, ComponentSystemBase, JobHandle) Declaration public static JobHandle ScheduleSingle<T>(this T jobData, ComponentSystemBase system, JobHandle dependsOn = null) where T : struct, JobForEachExtensions.IBaseJobForEach Parameters Type Name Description T jobData ComponentSystemBase system JobHandle dependsOn Returns Type Description JobHandle Type Parameters Name Description T ScheduleSingle<T>(T, EntityQuery, JobHandle) Declaration public static JobHandle ScheduleSingle<T>(this T jobData, EntityQuery query, JobHandle dependsOn = null) where T : struct, JobForEachExtensions.IBaseJobForEach Parameters Type Name Description T jobData EntityQuery query JobHandle dependsOn Returns Type Description JobHandle Type Parameters Name Description T"
  },
  "api/Unity.Entities.JobForEachExtensions.IBaseJobForEach.html": {
    "href": "api/Unity.Entities.JobForEachExtensions.IBaseJobForEach.html",
    "title": "Interface JobForEachExtensions.IBaseJobForEach | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Interface JobForEachExtensions.IBaseJobForEach Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface IBaseJobForEach"
  },
  "api/Unity.Entities.Serialization.StreamBinaryWriter.html": {
    "href": "api/Unity.Entities.Serialization.StreamBinaryWriter.html",
    "title": "Class StreamBinaryWriter | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class StreamBinaryWriter Inheritance Object StreamBinaryWriter Namespace : Unity.Entities.Serialization <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class StreamBinaryWriter : BinaryWriter, IDisposable Constructors StreamBinaryWriter(String, Int32) Declaration public StreamBinaryWriter(string fileName, int bufferSize = 65536) Parameters Type Name Description String fileName Int32 bufferSize Properties Length Declaration public long Length { get; } Property Value Type Description Int64 Methods Dispose() Declaration public void Dispose() WriteBytes(Void*, Int32) Declaration public void WriteBytes(void *data, int bytes) Parameters Type Name Description Void * data Int32 bytes Implements BinaryWriter.WriteBytes(Void*, Int32) Extension Methods BlobAssetSerializeExtensions.Write<T>(BinaryWriter, BlobAssetReference<T>) BinaryWriterExtensions.Write(BinaryWriter, Byte) BinaryWriterExtensions.Write(BinaryWriter, Int32) BinaryWriterExtensions.Write(BinaryWriter, UInt64) BinaryWriterExtensions.Write(BinaryWriter, Byte[]) BinaryWriterExtensions.WriteArray<T>(BinaryWriter, NativeArray<T>) BinaryWriterExtensions.WriteList<T>(BinaryWriter, NativeList<T>)"
  },
  "api/Unity.Entities.PackedComponent.html": {
    "href": "api/Unity.Entities.PackedComponent.html",
    "title": "Struct PackedComponent | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct PackedComponent Represents a packed component within an EntityChangeSet Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct PackedComponent Fields PackedEntityIndex Entity index in the packed entities array. Entities Declaration public int PackedEntityIndex Field Value Type Description Int32 PackedTypeIndex Type index in the packed stableTypeHash array. TypeHashes Declaration public int PackedTypeIndex Field Value Type Description Int32"
  },
  "api/Unity.Entities.NativeArraySharedValues-1.html": {
    "href": "api/Unity.Entities.NativeArraySharedValues-1.html",
    "title": "Struct NativeArraySharedValues<S> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct NativeArraySharedValues<S> Merge sort index list referencing NativeArray values. Provide list of shared values, indices to shared values, and lists of source i value indices with identical shared value. As an example: Given Source NativeArray: [A,A,A,B,B,C,C,A,B] Provides: Shared value indices: [0,0,0,1,1,2,2,0,1] Shared value counts: [4,3,2] (number of occurrences of a shared value) Shared values: [A,B,C] (not stored in this structure) Sorted indices: [0,1,2,7,3,4,8,5,6] (using these indices to look up values in the source array would give you [A,A,A,A,B,B,B,C,C]) Shared value start offsets (into sorted indices): [0,4,7] Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct NativeArraySharedValues<S> : IDisposable where S : struct, IComparable<S> Type Parameters Name Description S Constructors NativeArraySharedValues(NativeArray<S>, Allocator) Declaration public NativeArraySharedValues(NativeArray<S> sourceBuffer, Allocator allocator) Parameters Type Name Description NativeArray <S> sourceBuffer Allocator allocator Properties SharedValueCount Number of shared (unique) values in source NativeArray Declaration public int SharedValueCount { get; } Property Value Type Description Int32 SourceBuffer Original Source Values (passed into constructor) Declaration public NativeArray<S> SourceBuffer { get; } Property Value Type Description NativeArray <S> Methods Dispose() Declaration public void Dispose() GetSharedIndexArray() Indices into shared values. For example, given source array: [A,A,A,B,B,C,C,A,B] shared values are: [A,B,C] shared index array would contain: [0,0,0,1,1,2,2,0,1] Declaration public NativeArray<int> GetSharedIndexArray() Returns Type Description NativeArray < Int32 > Index NativeArray where each element refers to the index of a shared value in a list of shared (unique) values. GetSharedIndexBySourceIndex(Int32) Index of shared value associated with an element in the source buffer. For example, given source array: [A,A,A,B,B,C,C,A,B] shared values are: [A,B,C] Given the index 2 into the source array (A), the return value would be 0 (A in shared values). Declaration public int GetSharedIndexBySourceIndex(int indexIntoSourceBuffer) Parameters Type Name Description Int32 indexIntoSourceBuffer Index of source value Returns Type Description Int32 Index into the list of shared values GetSharedValueIndexCountArray() Array of number of occurrences of all shared values. For example, given source array: [A,A,A,B,B,C,C,A,B] shared values are: [A,B,C] Shared value counts: [4,3,2] (number of occurrences of a shared value) Declaration public NativeArray<int> GetSharedValueIndexCountArray() Returns Type Description NativeArray < Int32 > Count NativeArray where each element refers to the number of occurrences of each shared value. GetSharedValueIndexCountBySourceIndex(Int32) Number of occurrences of a shared (unique) value shared by a given a source index. For example, given source array: [A,A,A,B,B,C,C,A,B] shared values are: [A,B,C] Shared value counts: [4,3,2] (number of occurrences of a shared value) Given the index 2 into the source array (A), the return value would be 4 (for 4 occurrences of A in the source buffer). Declaration public int GetSharedValueIndexCountBySourceIndex(int indexIntoSourceBuffer) Parameters Type Name Description Int32 indexIntoSourceBuffer Index of source value. Returns Type Description Int32 Count of total occurrences of the shared value at a source buffer index in the source buffer. GetSharedValueIndicesBySharedIndex(Int32) Array of indices into source NativeArray which share the same shared value For example, given source array: [A,A,A,B,B,C,C,A,B] shared values are: [A,B,C] Shared value counts: [4,3,2] (number of occurrences of a shared value) Shared value start offsets (into sorted indices): [0,4,7] Given the index 0 into the shared value array (A), the returned array would contain [0,1,2,7] (indices into the source array which point to the shared value A). Declaration public NativeArray<int> GetSharedValueIndicesBySharedIndex(int sharedValueIndex) Parameters Type Name Description Int32 sharedValueIndex Index of shared value Returns Type Description NativeArray < Int32 > Index NativeArray where each element refers to an index into the source array. GetSharedValueIndicesBySourceIndex(Int32) Array of indices into shared value indices NativeArray which share the same source value For example, given Source NativeArray: [A,A,A,B,B,C,C,A,B] shared values are: [A,B,C] Shared value indices: [0,0,0,1,1,2,2,0,1] Given the index 2 into the source array (A), the returned array would contain: [0,1,2,7] (indices in SharedValueIndices that have a value of 0, i.e. where A is in the shared values) Declaration public NativeArray<int> GetSharedValueIndicesBySourceIndex(int indexIntoSourceBuffer) Parameters Type Name Description Int32 indexIntoSourceBuffer Index of source value Returns Type Description NativeArray < Int32 > Index NativeArray where each element refers to an index into the shared value indices array. GetSortedIndices() Indices into source NativeArray sorted by value Declaration public NativeArray<int> GetSortedIndices() Returns Type Description NativeArray < Int32 > Index NativeArray where each element refers to an element in the source NativeArray Schedule(JobHandle) Schedule jobs to collect and sort shared values. Declaration public JobHandle Schedule(JobHandle inputDeps) Parameters Type Name Description JobHandle inputDeps Dependent JobHandle Returns Type Description JobHandle JobHandle"
  },
  "api/Unity.Entities.MemsetNativeArray-1.html": {
    "href": "api/Unity.Entities.MemsetNativeArray-1.html",
    "title": "Struct MemsetNativeArray<T> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct MemsetNativeArray<T> Assign Value to each element of NativeArray Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct MemsetNativeArray<T> : IJobParallelFor where T : struct Type Parameters Name Description T Type of element in NativeArray Fields Source Declaration public NativeArray<T> Source Field Value Type Description NativeArray <T> Value Declaration public T Value Field Value Type Description T Methods Execute(Int32) Declaration public void Execute(int index) Parameters Type Name Description Int32 index"
  },
  "api/Unity.Entities.MaximumChunkCapacityAttribute.html": {
    "href": "api/Unity.Entities.MaximumChunkCapacityAttribute.html",
    "title": "Class MaximumChunkCapacityAttribute | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class MaximumChunkCapacityAttribute Specifies the maximum number of components of a type that can be stored in the same chunk. Inheritance Object Attribute MaximumChunkCapacityAttribute Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct)] public class MaximumChunkCapacityAttribute : Attribute, _Attribute Remarks Place this attribute on the declaration of a component, such as IComponentData , to limit the number of entities with that component which can be stored in a single chunk. Note that the actual limit on the number of entities in a chunk can be smaller, based on the actual size of all the components in the same EntityArchetype as the component defining this limit. If an archetype contains more than one component type specifying a chunk capacity limit, then the lowest limit is used. Constructors MaximumChunkCapacityAttribute(Int32) The maximum number of entities having this component type in an ArchetypeChunk . Declaration public MaximumChunkCapacityAttribute(int capacity) Parameters Type Name Description Int32 capacity Fields Capacity The maximum number of entities having this component type in an ArchetypeChunk . Declaration public readonly int Capacity Field Value Type Description Int32"
  },
  "api/Unity.Entities.LayerFieldAttribute.html": {
    "href": "api/Unity.Entities.LayerFieldAttribute.html",
    "title": "Class LayerFieldAttribute | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class LayerFieldAttribute Attribute used to make an int field display as a layer selector drop-down. Inheritance Object LayerFieldAttribute Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public sealed class LayerFieldAttribute : PropertyAttribute"
  },
  "api/Unity.Entities.LateSimulationSystemGroup.html": {
    "href": "api/Unity.Entities.LateSimulationSystemGroup.html",
    "title": "Class LateSimulationSystemGroup | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class LateSimulationSystemGroup Inheritance Object ComponentSystemBase ComponentSystem ComponentSystemGroup LateSimulationSystemGroup Inherited Members ComponentSystemGroup.m_systemsToUpdate ComponentSystemGroup.m_systemsToRemove ComponentSystemGroup.Systems ComponentSystemGroup.AddSystemToUpdateList(ComponentSystemBase) ComponentSystemGroup.RemoveSystemFromUpdateList(ComponentSystemBase) ComponentSystemGroup.SortSystemUpdateList() ComponentSystemGroup.OnStopRunning() ComponentSystemGroup.OnUpdate() ComponentSystem.PostUpdateCommands ComponentSystem.InitEntityQueryCache(Int32) ComponentSystem.Entities ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnCreate() ComponentSystemBase.OnDestroyManager() ComponentSystemBase.OnCreateManager() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.Update() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetArchetypeChunkComponentType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkComponentTypeDynamic(ComponentType) ComponentSystemBase.GetArchetypeChunkBufferType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkSharedComponentType<T>() ComponentSystemBase.GetArchetypeChunkEntityType() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [UpdateInGroup(typeof(SimulationSystemGroup))] public class LateSimulationSystemGroup : ComponentSystemGroup Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Entities.Serialization.html": {
    "href": "api/Unity.Entities.Serialization.html",
    "title": "Namespace Unity.Entities.Serialization | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Namespace Unity.Entities.Serialization Classes BinaryPrimitiveReaderAdapter BinaryPrimitiveWriterAdapter BinaryReaderExtensions BinaryWriterExtensions MemoryBinaryReader MemoryBinaryWriter SerializeUtility SerializeUtilityHybrid StreamBinaryReader StreamBinaryWriter Interfaces BinaryReader BinaryWriter"
  },
  "api/Unity.Entities.ChunkEntitiesDescription.html": {
    "href": "api/Unity.Entities.ChunkEntitiesDescription.html",
    "title": "Struct ChunkEntitiesDescription | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct ChunkEntitiesDescription Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct ChunkEntitiesDescription : ISupportForEachWithUniversalDelegate Extension Methods LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0>(TDescription, Unity.Entities.UniversalDelegates.R<T0>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0>(TDescription, Unity.Entities.UniversalDelegates.I<T0>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0>(TDescription, Unity.Entities.UniversalDelegates.V<T0>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1>(TDescription, Unity.Entities.UniversalDelegates.RI<T0, T1>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1>(TDescription, Unity.Entities.UniversalDelegates.RR<T0, T1>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1>(TDescription, Unity.Entities.UniversalDelegates.II<T0, T1>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1>(TDescription, Unity.Entities.UniversalDelegates.VI<T0, T1>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1>(TDescription, Unity.Entities.UniversalDelegates.VR<T0, T1>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1>(TDescription, Unity.Entities.UniversalDelegates.VV<T0, T1>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2>(TDescription, Unity.Entities.UniversalDelegates.RII<T0, T1, T2>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2>(TDescription, Unity.Entities.UniversalDelegates.RRI<T0, T1, T2>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2>(TDescription, Unity.Entities.UniversalDelegates.RRR<T0, T1, T2>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2>(TDescription, Unity.Entities.UniversalDelegates.III<T0, T1, T2>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2>(TDescription, Unity.Entities.UniversalDelegates.VII<T0, T1, T2>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2>(TDescription, Unity.Entities.UniversalDelegates.VRI<T0, T1, T2>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2>(TDescription, Unity.Entities.UniversalDelegates.VRR<T0, T1, T2>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2>(TDescription, Unity.Entities.UniversalDelegates.VVI<T0, T1, T2>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2>(TDescription, Unity.Entities.UniversalDelegates.VVR<T0, T1, T2>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2>(TDescription, Unity.Entities.UniversalDelegates.VVV<T0, T1, T2>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3>(TDescription, Unity.Entities.UniversalDelegates.RIII<T0, T1, T2, T3>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3>(TDescription, Unity.Entities.UniversalDelegates.RRII<T0, T1, T2, T3>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3>(TDescription, Unity.Entities.UniversalDelegates.RRRI<T0, T1, T2, T3>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3>(TDescription, Unity.Entities.UniversalDelegates.RRRR<T0, T1, T2, T3>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3>(TDescription, Unity.Entities.UniversalDelegates.IIII<T0, T1, T2, T3>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3>(TDescription, Unity.Entities.UniversalDelegates.VIII<T0, T1, T2, T3>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3>(TDescription, Unity.Entities.UniversalDelegates.VRII<T0, T1, T2, T3>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3>(TDescription, Unity.Entities.UniversalDelegates.VRRI<T0, T1, T2, T3>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3>(TDescription, Unity.Entities.UniversalDelegates.VRRR<T0, T1, T2, T3>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3>(TDescription, Unity.Entities.UniversalDelegates.VVII<T0, T1, T2, T3>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3>(TDescription, Unity.Entities.UniversalDelegates.VVRI<T0, T1, T2, T3>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3>(TDescription, Unity.Entities.UniversalDelegates.VVRR<T0, T1, T2, T3>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3>(TDescription, Unity.Entities.UniversalDelegates.VVVI<T0, T1, T2, T3>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3>(TDescription, Unity.Entities.UniversalDelegates.VVVR<T0, T1, T2, T3>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3>(TDescription, Unity.Entities.UniversalDelegates.VVVV<T0, T1, T2, T3>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, Unity.Entities.UniversalDelegates.RIIII<T0, T1, T2, T3, T4>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, Unity.Entities.UniversalDelegates.RRIII<T0, T1, T2, T3, T4>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, Unity.Entities.UniversalDelegates.RRRII<T0, T1, T2, T3, T4>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, Unity.Entities.UniversalDelegates.RRRRI<T0, T1, T2, T3, T4>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, Unity.Entities.UniversalDelegates.RRRRR<T0, T1, T2, T3, T4>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, Unity.Entities.UniversalDelegates.IIIII<T0, T1, T2, T3, T4>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, Unity.Entities.UniversalDelegates.VIIII<T0, T1, T2, T3, T4>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, Unity.Entities.UniversalDelegates.VRIII<T0, T1, T2, T3, T4>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, Unity.Entities.UniversalDelegates.VRRII<T0, T1, T2, T3, T4>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, Unity.Entities.UniversalDelegates.VRRRI<T0, T1, T2, T3, T4>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, Unity.Entities.UniversalDelegates.VRRRR<T0, T1, T2, T3, T4>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, Unity.Entities.UniversalDelegates.VVIII<T0, T1, T2, T3, T4>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, Unity.Entities.UniversalDelegates.VVRII<T0, T1, T2, T3, T4>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, Unity.Entities.UniversalDelegates.VVRRI<T0, T1, T2, T3, T4>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, Unity.Entities.UniversalDelegates.VVRRR<T0, T1, T2, T3, T4>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, Unity.Entities.UniversalDelegates.VVVII<T0, T1, T2, T3, T4>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, Unity.Entities.UniversalDelegates.VVVRI<T0, T1, T2, T3, T4>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, Unity.Entities.UniversalDelegates.VVVRR<T0, T1, T2, T3, T4>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, Unity.Entities.UniversalDelegates.VVVVI<T0, T1, T2, T3, T4>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, Unity.Entities.UniversalDelegates.VVVVR<T0, T1, T2, T3, T4>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4>(TDescription, Unity.Entities.UniversalDelegates.VVVVV<T0, T1, T2, T3, T4>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, Unity.Entities.UniversalDelegates.RIIIII<T0, T1, T2, T3, T4, T5>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, Unity.Entities.UniversalDelegates.RRIIII<T0, T1, T2, T3, T4, T5>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, Unity.Entities.UniversalDelegates.RRRIII<T0, T1, T2, T3, T4, T5>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, Unity.Entities.UniversalDelegates.RRRRII<T0, T1, T2, T3, T4, T5>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, Unity.Entities.UniversalDelegates.RRRRRI<T0, T1, T2, T3, T4, T5>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, Unity.Entities.UniversalDelegates.RRRRRR<T0, T1, T2, T3, T4, T5>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, Unity.Entities.UniversalDelegates.IIIIII<T0, T1, T2, T3, T4, T5>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, Unity.Entities.UniversalDelegates.VIIIII<T0, T1, T2, T3, T4, T5>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, Unity.Entities.UniversalDelegates.VRIIII<T0, T1, T2, T3, T4, T5>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, Unity.Entities.UniversalDelegates.VRRIII<T0, T1, T2, T3, T4, T5>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, Unity.Entities.UniversalDelegates.VRRRII<T0, T1, T2, T3, T4, T5>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, Unity.Entities.UniversalDelegates.VRRRRI<T0, T1, T2, T3, T4, T5>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, Unity.Entities.UniversalDelegates.VRRRRR<T0, T1, T2, T3, T4, T5>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, Unity.Entities.UniversalDelegates.VVIIII<T0, T1, T2, T3, T4, T5>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, Unity.Entities.UniversalDelegates.VVRIII<T0, T1, T2, T3, T4, T5>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, Unity.Entities.UniversalDelegates.VVRRII<T0, T1, T2, T3, T4, T5>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, Unity.Entities.UniversalDelegates.VVRRRI<T0, T1, T2, T3, T4, T5>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, Unity.Entities.UniversalDelegates.VVRRRR<T0, T1, T2, T3, T4, T5>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, Unity.Entities.UniversalDelegates.VVVIII<T0, T1, T2, T3, T4, T5>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, Unity.Entities.UniversalDelegates.VVVRII<T0, T1, T2, T3, T4, T5>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, Unity.Entities.UniversalDelegates.VVVRRI<T0, T1, T2, T3, T4, T5>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, Unity.Entities.UniversalDelegates.VVVRRR<T0, T1, T2, T3, T4, T5>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, Unity.Entities.UniversalDelegates.VVVVII<T0, T1, T2, T3, T4, T5>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, Unity.Entities.UniversalDelegates.VVVVRI<T0, T1, T2, T3, T4, T5>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, Unity.Entities.UniversalDelegates.VVVVRR<T0, T1, T2, T3, T4, T5>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, Unity.Entities.UniversalDelegates.VVVVVI<T0, T1, T2, T3, T4, T5>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, Unity.Entities.UniversalDelegates.VVVVVR<T0, T1, T2, T3, T4, T5>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5>(TDescription, Unity.Entities.UniversalDelegates.VVVVVV<T0, T1, T2, T3, T4, T5>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, Unity.Entities.UniversalDelegates.RIIIIII<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, Unity.Entities.UniversalDelegates.RRIIIII<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, Unity.Entities.UniversalDelegates.RRRIIII<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, Unity.Entities.UniversalDelegates.RRRRIII<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, Unity.Entities.UniversalDelegates.RRRRRII<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, Unity.Entities.UniversalDelegates.RRRRRRI<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, Unity.Entities.UniversalDelegates.RRRRRRR<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, Unity.Entities.UniversalDelegates.IIIIIII<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, Unity.Entities.UniversalDelegates.VIIIIII<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, Unity.Entities.UniversalDelegates.VRIIIII<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, Unity.Entities.UniversalDelegates.VRRIIII<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, Unity.Entities.UniversalDelegates.VRRRIII<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, Unity.Entities.UniversalDelegates.VRRRRII<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, Unity.Entities.UniversalDelegates.VRRRRRI<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, Unity.Entities.UniversalDelegates.VRRRRRR<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, Unity.Entities.UniversalDelegates.VVIIIII<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, Unity.Entities.UniversalDelegates.VVRIIII<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, Unity.Entities.UniversalDelegates.VVRRIII<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, Unity.Entities.UniversalDelegates.VVRRRII<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, Unity.Entities.UniversalDelegates.VVRRRRI<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, Unity.Entities.UniversalDelegates.VVRRRRR<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, Unity.Entities.UniversalDelegates.VVVIIII<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, Unity.Entities.UniversalDelegates.VVVRIII<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, Unity.Entities.UniversalDelegates.VVVRRII<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, Unity.Entities.UniversalDelegates.VVVRRRI<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, Unity.Entities.UniversalDelegates.VVVRRRR<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, Unity.Entities.UniversalDelegates.VVVVIII<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, Unity.Entities.UniversalDelegates.VVVVRII<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, Unity.Entities.UniversalDelegates.VVVVRRI<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, Unity.Entities.UniversalDelegates.VVVVRRR<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, Unity.Entities.UniversalDelegates.VVVVVII<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, Unity.Entities.UniversalDelegates.VVVVVRI<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, Unity.Entities.UniversalDelegates.VVVVVRR<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, Unity.Entities.UniversalDelegates.VVVVVVI<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, Unity.Entities.UniversalDelegates.VVVVVVR<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6>(TDescription, Unity.Entities.UniversalDelegates.VVVVVVV<T0, T1, T2, T3, T4, T5, T6>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.RIIIIIII<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.RRIIIIII<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.RRRIIIII<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.RRRRIIII<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.RRRRRIII<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.RRRRRRII<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.RRRRRRRI<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.RRRRRRRR<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.IIIIIIII<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.VIIIIIII<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.VRIIIIII<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.VRRIIIII<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.VRRRIIII<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.VRRRRIII<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.VRRRRRII<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.VRRRRRRI<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.VRRRRRRR<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.VVIIIIII<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.VVRIIIII<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.VVRRIIII<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.VVRRRIII<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.VVRRRRII<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.VVRRRRRI<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.VVRRRRRR<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.VVVIIIII<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.VVVRIIII<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.VVVRRIII<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.VVVRRRII<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.VVVRRRRI<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.VVVRRRRR<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.VVVVIIII<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.VVVVRIII<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.VVVVRRII<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.VVVVRRRI<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.VVVVRRRR<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.VVVVVIII<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.VVVVVRII<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.VVVVVRRI<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.VVVVVRRR<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.VVVVVVII<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.VVVVVVRI<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.VVVVVVRR<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.VVVVVVVI<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.VVVVVVVR<T0, T1, T2, T3, T4, T5, T6, T7>) LambdaForEachDescriptionConstructionMethods.ForEach<TDescription, T0, T1, T2, T3, T4, T5, T6, T7>(TDescription, Unity.Entities.UniversalDelegates.VVVVVVVV<T0, T1, T2, T3, T4, T5, T6, T7>)"
  },
  "api/Unity.Entities.ChangedFilterAttribute.html": {
    "href": "api/Unity.Entities.ChangedFilterAttribute.html",
    "title": "Class ChangedFilterAttribute | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class ChangedFilterAttribute Inheritance Object Attribute ChangedFilterAttribute Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [AttributeUsage(AttributeTargets.Parameter)] public class ChangedFilterAttribute : Attribute, _Attribute"
  },
  "api/Unity.Entities.BufferFromEntity-1.html": {
    "href": "api/Unity.Entities.BufferFromEntity-1.html",
    "title": "Struct BufferFromEntity<T> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct BufferFromEntity<T> Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct BufferFromEntity<T> where T : struct, IBufferElementData Type Parameters Name Description T Properties Item[Entity] Declaration public DynamicBuffer<T> this[Entity entity] { get; } Parameters Type Name Description Entity entity Property Value Type Description DynamicBuffer <T> Methods Exists(Entity) Declaration public bool Exists(Entity entity) Parameters Type Name Description Entity entity Returns Type Description Boolean"
  },
  "api/Unity.Entities.BufferAccessor-1.html": {
    "href": "api/Unity.Entities.BufferAccessor-1.html",
    "title": "Struct BufferAccessor<T> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct BufferAccessor<T> Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct BufferAccessor<T> where T : struct, IBufferElementData Type Parameters Name Description T Constructors BufferAccessor(Byte*, Int32, Int32, Int32) Declaration public BufferAccessor(byte *basePointer, int length, int stride, int internalCapacity) Parameters Type Name Description Byte * basePointer Int32 length Int32 stride Int32 internalCapacity Properties Item[Int32] Declaration public DynamicBuffer<T> this[int index] { get; } Parameters Type Name Description Int32 index Property Value Type Description DynamicBuffer <T> Exceptions Type Condition InvalidOperationException Length Declaration public int Length { get; } Property Value Type Description Int32"
  },
  "api/Unity.Entities.BlobAssetSerializeExtensions.html": {
    "href": "api/Unity.Entities.BlobAssetSerializeExtensions.html",
    "title": "Class BlobAssetSerializeExtensions | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class BlobAssetSerializeExtensions Extensions for supporting serialization and deserialization of blob assets. Inheritance Object BlobAssetSerializeExtensions Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class BlobAssetSerializeExtensions Methods Read<T>(BinaryReader) Reads bytes from a BinaryReader instance and deserializes them into a new blob asset. Declaration public static BlobAssetReference<T> Read<T>(this BinaryReader binaryReader) where T : struct Parameters Type Name Description BinaryReader binaryReader An implementation of the BinaryReader interface. Returns Type Description BlobAssetReference <T> A reference to the deserialized blob asset. Type Parameters Name Description T The blob asset's root data type. See Also StreamBinaryReader MemoryBinaryReader Write<T>(BinaryWriter, BlobAssetReference<T>) Serializes the blob asset data and writes the bytes to a BinaryWriter instance. Declaration public static void Write<T>(this BinaryWriter binaryWriter, BlobAssetReference<T> blob) where T : struct Parameters Type Name Description BinaryWriter binaryWriter An implementation of the BinaryWriter interface. BlobAssetReference <T> blob A reference to the blob asset to serialize. Type Parameters Name Description T The blob asset's root data type. See Also StreamBinaryWriter MemoryBinaryWriter"
  },
  "api/Unity.Entities.BlobAssetReferenceChange.html": {
    "href": "api/Unity.Entities.BlobAssetReferenceChange.html",
    "title": "Struct BlobAssetReferenceChange | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct BlobAssetReferenceChange Represents a blob asset reference that was changed within a EntityChangeSet Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct BlobAssetReferenceChange Fields Component The entity and component this patched is targeted at. Declaration public PackedComponent Component Field Value Type Description PackedComponent Offset The field offset for the data. Declaration public int Offset Field Value Type Description Int32 Value The blob asset this component should point to in the batch. Declaration public ulong Value Field Value Type Description UInt64"
  },
  "api/Unity.Entities.ArchetypeChunkSharedComponentType-1.html": {
    "href": "api/Unity.Entities.ArchetypeChunkSharedComponentType-1.html",
    "title": "Struct ArchetypeChunkSharedComponentType<T> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct ArchetypeChunkSharedComponentType<T> Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct ArchetypeChunkSharedComponentType<T> where T : struct, ISharedComponentData Type Parameters Name Description T"
  },
  "api/Unity.Entities.ArchetypeChunkIterator.html": {
    "href": "api/Unity.Entities.ArchetypeChunkIterator.html",
    "title": "Struct ArchetypeChunkIterator | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct ArchetypeChunkIterator Can be passed into IJobChunk.RunWithoutJobs to iterate over an entity query without running any jobs. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct ArchetypeChunkIterator"
  },
  "api/Unity.Entities.html": {
    "href": "api/Unity.Entities.html",
    "title": "Namespace Unity.Entities | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Namespace Unity.Entities Classes AlwaysSynchronizeSystemAttribute AlwaysSynchronizeSystem can be applied to a JobComponentSystem to force it to synchronize on all of its dependencies before every update. This attribute should only be applied when a synchronization point is necessary every frame. AlwaysUpdateSystemAttribute BeginInitializationEntityCommandBufferSystem BeginPresentationEntityCommandBufferSystem BeginSimulationEntityCommandBufferSystem BlobAssetSerializeExtensions Extensions for supporting serialization and deserialization of blob assets. BlobAssetStore Purpose of this class is to provide a consistent cache of BlobAsset object in order to avoid rebuilding them when it is not necessary BlobStringExtensions Extensions that allow the creation of BlobString instances by a BlobBuilder . ChangedFilterAttribute ChangeVersionUtility ChunkSerializableAttribute States that a component type is serializable. ComponentDataProxy<T> ComponentDataProxyBase ComponentSystem An abstract class to implement in order to create a system. ComponentSystemBase A system provides behavior in an ECS architecture. ComponentSystemBaseManagedComponentExtensions ComponentSystemGroup ComponentSystemSorter ComponentSystemSorter.CircularSystemDependencyException ConverterVersionAttribute By declaring a version number a ComponentSystem can ensure that any cached data by the asset pipeline was prepared using the active code. If the version number of any conversion system or optimization system changes or a new conversion system is added, then the scene will be re-converted. ConvertToEntity ConvertToEntitySystem DefaultTinyWorldInitialization DefaultWorldInitialization DisableAutoCreationAttribute Prevents a system from being automatically created and run. DisableAutoTypeRegistration DisallowRefReturnCrossingThisAttribute What is this : Attribute signaling that ref returned values, of a type that has this attribute, cannot intersect with calls to methods that also have this attribute. Motivation(s): ref returns of values that are backed by native memory (unsafe), like IComponentData in ecs chunks, can have the referenced memory invalidated by certain methods. A way is needed to detect these situations a compilation time to prevent accessing invalidated references. Notes: This attribute is used/feeds a Static Analyzer at compilation time. Attribute transfers with aggragations: struct A has this attribute, struct B has a field of type A; both A and B are concidered to have the attribute. DynamicBufferProxy<T> EndInitializationEntityCommandBufferSystem EndSimulationEntityCommandBufferSystem EntityCommandBufferManagedComponentExtensions EntityCommandBufferSystem A system that provides EntityCommandBuffer objects for other systems. EntityContainerPropertyBag EntityManager The EntityManager manages entities and components in a World. EntityManager.EntityManagerDebug Provides information and utility functions for debugging. EntityManagerExtensions EntityManagerManagedComponentExtensions EntityPatcher EntityQuery A EntityQuery provides a queryDesc-based view of your component data. EntityQueryDesc Defines a queryDesc to find archetypes with specific components. EntityQueryDescValidationException EntityQueryExtensionsForComponentArray EntityQueryExtensionsForTransformAccessArray EntityRemapUtility ExcludeComponentAttribute FastEquality ForEachLambdaJobDescription_SetSharedComponent GameObjectConversionSettings GameObjectConversionUtility GameObjectEntity GenerateAuthoringComponentAttribute InitializationSystemGroup InternalBufferCapacityAttribute Specifies the maximum number of elements to store inside a chunk. InternalCompilerInterface JobChunkExtensions Extensions for scheduling and running IJobChunk Jobs. JobComponentSystem An abstract class to implement in order to create a system that uses ECS-specific Jobs. JobForEachExtensions LambdaJobChunkDescription_SetSharedComponent LambdaJobChunkDescriptionConstructionMethods LambdaJobDescriptionConstructionMethods LambdaJobQueryConstructionMethods LambdaSimpleJobDescriptionConstructionMethods LateSimulationSystemGroup LayerFieldAttribute Attribute used to make an int field display as a layer selector drop-down. MaximumChunkCapacityAttribute Specifies the maximum number of components of a type that can be stored in the same chunk. PresentationSystemGroup ReferencedUnityObjects RegisterGenericComponentTypeAttribute RequireComponentTagAttribute RequiresEntityConversionAttribute RestrictAuthoringInputToAttribute SceneViewWorldPositionAttribute ScriptBehaviourUpdateOrder SharedComponentDataProxy<T> SimulationSystemGroup StaticOptimizeEntity TypeHash TypeManager TypeManager.ForcedMemoryOrderingAttribute TypeManager.TypeVersionAttribute UpdateAfterAttribute UpdateBeforeAttribute UpdateInGroupAttribute UpdateWorldTimeSystem World WorldSystemFilterAttribute For internal use only. WriteGroupAttribute [WriteGroup] Can exclude components which are unknown at the time of creating the query that have been declared to write to the same component. This allows for extending systems of components safely without editing the previously existing systems. The goal is to have a way for systems that expect to transform data from one set of components (inputs) to another (output[s]) be able to declare that explicit transform, and they exclusively know about one set of inputs. If there are other inputs that want to write to the same output, the query shouldn't match because it's a nonsensical/unhandled setup. It's both a way to guard against nonsensical components (having two systems write to the same output value), and a way to \"turn off\" existing systems/queries by putting a component with the same write lock on an entity, letting another system handle it. Structs ArchetypeChunk A block of unmanaged memory containing the components of entities sharing the same Unity.Entities.Archetype . ArchetypeChunkArray ArchetypeChunkBufferType<T> ArchetypeChunkComponentObjects<T> ArchetypeChunkComponentType<T> ArchetypeChunkComponentTypeDynamic ArchetypeChunkEntityType ArchetypeChunkIterator Can be passed into IJobChunk.RunWithoutJobs to iterate over an entity query without running any jobs. ArchetypeChunkSharedComponentType<T> Asset Marks the entity as an asset, which is used for the Export phase of GameObject conversion. BlobArray<T> An immutable array of value types stored in a blob asset. BlobAssetChange Header for a changed blob asset. BlobAssetComputationContext<TS, TB> The BlobAssetComputationContext must be used during Authoring to ECS conversion process to detect which BlobAsset should be computed and to declare their association with a GameObject BlobAssetReference<T> A reference to a blob asset stored in unmanaged memory. BlobAssetReferenceChange Represents a blob asset reference that was changed within a EntityChangeSet BlobBuilder Creates blob assets. BlobBuilderArray<T> Used by the BlobBuilder methods to reference the arrays within a blob asset. BlobPtr<T> A pointer referencing a struct, array, or field inside a blob asset. BlobString An immutable, variable-length string stored in a blob asset. BufferAccessor<T> BufferFromEntity<T> ChunkEntitiesDescription ChunkHeader ComponentDataFromEntity<T> A NativeContainer that provides access to all instances of components of type T, indexed by Entity . ComponentSystemSorter.TypeHeapElement ComponentType ComponentTypeHash ComponentTypes ComponentTypes.Masks Disabled Disables the entity. DynamicBuffer<T> An array-like data structure that can be used as a component. DynamicBufferContainer<T> EditorRenderData Entity Identifies an entity. EntityArchetype An EntityArchetype is a unique combination of component types. The EntityManager uses the archetype to group all entities that have the same sets of components. EntityChanges EntityChangeSet An atomic package of changes to entity and component data. EntityCommandBuffer A thread-safe command buffer that can buffer commands that affect entities and components for later playback. EntityCommandBuffer.Concurrent Allows concurrent (deterministic) command buffer recording. EntityContainer EntityGuid This component is attached to converted Entities and is guaranteed to be unique within a World. It can be used to map back to the authoring GameObject from which it was converted. Note that an EntityGuid does not have enough information to be persistent across sessions. EntityInChunk EntityManagerDiffer The EntityManagerDiffer is used to efficiently track changes to a given world over time. EntityQueryBuilder EntityQueryMask This mask can be used to quickly identify if an entity would be returned by an EntityQuery. There is a maximum limit of 1024 EntityQueryMasks that can be created. EntityQueryMasks cannot be created from EntityQueries with filters. EntityReferenceChange Represents an entity reference that was changed within a EntityChangeSet This structure references the entity by it's unique EntityGuid . EntityRemapUtility.BufferEntityPatchInfo EntityRemapUtility.EntityPatchInfo EntityRemapUtility.EntityRemapInfo EntityRemapUtility.ManagedEntityPatchInfo EntityRemapUtility.SparseEntityRemapInfo ExcludeComponent<T> ExclusiveEntityTransaction FastEquality.Layout FastEquality.TypeInfo Hash128 LayoutUtility Low-level utility functions for AOS->SOA (scatter) and SOA->AOS (gather) conversions. LayoutUtilityManaged LinkedEntityGroup The LinkedEntityGroup buffer makes the entity be the root of a set of connected entities. LinkedEntityGroupChange MemsetNativeArray<T> Assign Value to each element of NativeArray NativeArraySharedValues<S> Merge sort index list referencing NativeArray values. Provide list of shared values, indices to shared values, and lists of source i value indices with identical shared value. As an example: Given Source NativeArray: [A,A,A,B,B,C,C,A,B] Provides: Shared value indices: [0,0,0,1,1,2,2,0,1] Shared value counts: [4,3,2] (number of occurrences of a shared value) Shared values: [A,B,C] (not stored in this structure) Sorted indices: [0,1,2,7,3,4,8,5,6] (using these indices to look up values in the source array would give you [A,A,A,A,B,B,B,C,C]) Shared value start offsets (into sorted indices): [0,4,7] PackedComponent Represents a packed component within an EntityChangeSet PackedComponentDataChange Represents a packed component data change within a EntityChangeSet PackedManagedComponentDataChange PackedSharedComponentDataChange Prefab Marks the entity as a prefab, which implicitly disables the entity. RequestSceneLoaded SceneBoundingVolume SceneReference SceneSection SceneSectionData SceneTag A Unity-defined shared component assigned to all entities in the same subscene. SOAFieldInfo TypeManager.EntityOffsetInfo TypeManager.FieldInfo TypeManager.StaticTypeLookup<T> TypeManager.TypeInfo TypeManager.TypeInfoDebug Interfaces IBufferElementData An interface for creating structs that can be stored in a DynamicBuffer<T> . IComponentData An interface for implementing general-purpose components. IConvertGameObjectToEntity ICustomBootstrap When entering playmode or the game starts in the Player. A default world is created, sometimes you need multiple worlds to be setup when the game starts. This lets you override the bootstrap of game code world creation. IDeclareReferencedPrefabs IDynamicBufferContainer IJobChunk IJobChunk is a type of Job that iterates over a set of ArchetypeChunk instances. IJobForEach<T0> IJobForEachWithEntity<T0> IRefCounted ISharedComponentData An interface for a component type whose value is shared by all entities in the same chunk. ISystemStateBufferElementData An interface for a component type that stores system-specific data in a buffer. ISystemStateComponentData An interface for a component type that stores system-specific data. ISystemStateSharedComponentData An interface for a component type that stores shared system-specific data. JobForEachExtensions.IBaseJobForEach Enums ComponentType.AccessMode ComponentTypeFlags ConvertToEntity.Mode EntityManagerDifferOptions Parameters used to configure the the execution of the differ. EntityQueryOptions The bit flags to use for the Options field. GameObjectConversionUtility.ConversionFlags PrimitiveFieldTypes SceneLoadFlags TypeManager.TypeCategory WorldSystemFilterFlags For internal use only. Delegates ConfigInit FastEquality.TypeInfo.CompareEqualDelegate FastEquality.TypeInfo.GetHashCodeDelegate FastEquality.TypeInfo.ManagedCompareEqualDelegate FastEquality.TypeInfo.ManagedGetHashCodeDelegate InternalCompilerInterface.JobChunkRunWithoutJobSystemDelegate InternalCompilerInterface.JobRunWithoutJobSystemDelegate LambdaJobChunkDescriptionConstructionMethods.JobChunkDelegate"
  },
  "api/Unity.Entities.WriteGroupAttribute.html": {
    "href": "api/Unity.Entities.WriteGroupAttribute.html",
    "title": "Class WriteGroupAttribute | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class WriteGroupAttribute [WriteGroup] Can exclude components which are unknown at the time of creating the query that have been declared to write to the same component. This allows for extending systems of components safely without editing the previously existing systems. The goal is to have a way for systems that expect to transform data from one set of components (inputs) to another (output[s]) be able to declare that explicit transform, and they exclusively know about one set of inputs. If there are other inputs that want to write to the same output, the query shouldn't match because it's a nonsensical/unhandled setup. It's both a way to guard against nonsensical components (having two systems write to the same output value), and a way to \"turn off\" existing systems/queries by putting a component with the same write lock on an entity, letting another system handle it. Inheritance Object Attribute WriteGroupAttribute Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [AttributeUsage(AttributeTargets.Struct, AllowMultiple = true)] public class WriteGroupAttribute : Attribute, _Attribute Constructors WriteGroupAttribute(Type) Declaration public WriteGroupAttribute(Type targetType) Parameters Type Name Description Type targetType Fields TargetType Declaration public Type TargetType Field Value Type Description Type"
  },
  "api/Unity.Entities.ExclusiveEntityTransaction.html": {
    "href": "api/Unity.Entities.ExclusiveEntityTransaction.html",
    "title": "Struct ExclusiveEntityTransaction | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct ExclusiveEntityTransaction Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct ExclusiveEntityTransaction Methods AddBuffer<T>(Entity) Declaration public DynamicBuffer<T> AddBuffer<T>(Entity entity) where T : struct, IBufferElementData Parameters Type Name Description Entity entity Returns Type Description DynamicBuffer <T> Type Parameters Name Description T AddComponent(Entity, ComponentType) Declaration public void AddComponent(Entity entity, ComponentType componentType) Parameters Type Name Description Entity entity ComponentType componentType CheckAccess() Declaration [Conditional(\"ENABLE_UNITY_COLLECTIONS_CHECKS\")] public void CheckAccess() CreateArchetype(ComponentType[]) Declaration public EntityArchetype CreateArchetype(params ComponentType[] types) Parameters Type Name Description ComponentType [] types Returns Type Description EntityArchetype CreateEntity(ComponentType[]) Declaration public Entity CreateEntity(params ComponentType[] types) Parameters Type Name Description ComponentType [] types Returns Type Description Entity CreateEntity(EntityArchetype) Declaration public Entity CreateEntity(EntityArchetype archetype) Parameters Type Name Description EntityArchetype archetype Returns Type Description Entity CreateEntity(EntityArchetype, NativeArray<Entity>) Declaration public void CreateEntity(EntityArchetype archetype, NativeArray<Entity> entities) Parameters Type Name Description EntityArchetype archetype NativeArray < Entity > entities DestroyEntity(NativeArray<Entity>) Declaration public void DestroyEntity(NativeArray<Entity> entities) Parameters Type Name Description NativeArray < Entity > entities DestroyEntity(NativeSlice<Entity>) Declaration public void DestroyEntity(NativeSlice<Entity> entities) Parameters Type Name Description NativeSlice < Entity > entities DestroyEntity(Entity) Declaration public void DestroyEntity(Entity entity) Parameters Type Name Description Entity entity Exists(Entity) Declaration public bool Exists(Entity entity) Parameters Type Name Description Entity entity Returns Type Description Boolean GetBuffer<T>(Entity) Declaration public DynamicBuffer<T> GetBuffer<T>(Entity entity) where T : struct, IBufferElementData Parameters Type Name Description Entity entity Returns Type Description DynamicBuffer <T> Type Parameters Name Description T GetComponentData<T>(Entity) Declaration public T GetComponentData<T>(Entity entity) where T : struct, IComponentData Parameters Type Name Description Entity entity Returns Type Description T Type Parameters Name Description T GetSharedComponentData<T>(Entity) Declaration public T GetSharedComponentData<T>(Entity entity) where T : struct, ISharedComponentData Parameters Type Name Description Entity entity Returns Type Description T Type Parameters Name Description T HasComponent(Entity, ComponentType) Declaration public bool HasComponent(Entity entity, ComponentType type) Parameters Type Name Description Entity entity ComponentType type Returns Type Description Boolean Instantiate(Entity) Declaration public Entity Instantiate(Entity srcEntity) Parameters Type Name Description Entity srcEntity Returns Type Description Entity Instantiate(Entity, NativeArray<Entity>) Declaration public void Instantiate(Entity srcEntity, NativeArray<Entity> outputEntities) Parameters Type Name Description Entity srcEntity NativeArray < Entity > outputEntities RemoveComponent(Entity, ComponentType) Declaration public void RemoveComponent(Entity entity, ComponentType type) Parameters Type Name Description Entity entity ComponentType type SetComponentData<T>(Entity, T) Declaration public void SetComponentData<T>(Entity entity, T componentData) where T : struct, IComponentData Parameters Type Name Description Entity entity T componentData Type Parameters Name Description T SetSharedComponentData<T>(Entity, T) Declaration public void SetSharedComponentData<T>(Entity entity, T componentData) where T : struct, ISharedComponentData Parameters Type Name Description Entity entity T componentData Type Parameters Name Description T SwapComponents(ArchetypeChunk, Int32, ArchetypeChunk, Int32) Declaration public void SwapComponents(ArchetypeChunk leftChunk, int leftIndex, ArchetypeChunk rightChunk, int rightIndex) Parameters Type Name Description ArchetypeChunk leftChunk Int32 leftIndex ArchetypeChunk rightChunk Int32 rightIndex"
  },
  "api/Unity.Entities.EntityQueryExtensionsForComponentArray.html": {
    "href": "api/Unity.Entities.EntityQueryExtensionsForComponentArray.html",
    "title": "Class EntityQueryExtensionsForComponentArray | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class EntityQueryExtensionsForComponentArray Inheritance Object EntityQueryExtensionsForComponentArray Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class EntityQueryExtensionsForComponentArray Methods ToComponentArray<T>(EntityQuery) Declaration public static T[] ToComponentArray<T>(this EntityQuery group) where T : Component Parameters Type Name Description EntityQuery group Returns Type Description T[] Type Parameters Name Description T"
  },
  "api/Unity.Entities.EntityQueryDescValidationException.html": {
    "href": "api/Unity.Entities.EntityQueryDescValidationException.html",
    "title": "Class EntityQueryDescValidationException | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class EntityQueryDescValidationException Inheritance Object Exception EntityQueryDescValidationException Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class EntityQueryDescValidationException : Exception, ISerializable, _Exception Constructors EntityQueryDescValidationException(String) Declaration public EntityQueryDescValidationException(string message) Parameters Type Name Description String message"
  },
  "api/Unity.Entities.Editor.DynamicBufferProxyBaseEditor.html": {
    "href": "api/Unity.Entities.Editor.DynamicBufferProxyBaseEditor.html",
    "title": "Class DynamicBufferProxyBaseEditor | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class DynamicBufferProxyBaseEditor Inheritance Object ComponentDataProxyBaseEditor DynamicBufferProxyBaseEditor Inherited Members ComponentDataProxyBaseEditor.SerializedData ComponentDataProxyBaseEditor.ComponentDataType ComponentDataProxyBaseEditor.OnInspectorGUI() Namespace : Unity.Entities.Editor <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class DynamicBufferProxyBaseEditor : ComponentDataProxyBaseEditor Properties CapacityStatusString Declaration public string CapacityStatusString { get; } Property Value Type Description String Methods DisplaySerializedDataPropertyField() Declaration protected override void DisplaySerializedDataPropertyField() Overrides ComponentDataProxyBaseEditor.DisplaySerializedDataPropertyField() DisplayStatusMessages() Declaration protected override void DisplayStatusMessages() Overrides ComponentDataProxyBaseEditor.DisplayStatusMessages() OnEnable() Declaration protected override void OnEnable() Overrides ComponentDataProxyBaseEditor.OnEnable()"
  },
  "api/Unity.Entities.Editor.ComponentDataProxyBaseEditor.html": {
    "href": "api/Unity.Entities.Editor.ComponentDataProxyBaseEditor.html",
    "title": "Class ComponentDataProxyBaseEditor | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class ComponentDataProxyBaseEditor Inheritance Object ComponentDataProxyBaseEditor DynamicBufferProxyBaseEditor Namespace : Unity.Entities.Editor <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class ComponentDataProxyBaseEditor : UnityEditor.Editor Properties ComponentDataType Declaration protected Type ComponentDataType { get; } Property Value Type Description Type SerializedData Declaration protected SerializedProperty SerializedData { get; } Property Value Type Description SerializedProperty Methods DisplaySerializedDataPropertyField() Declaration protected virtual void DisplaySerializedDataPropertyField() DisplayStatusMessages() Declaration protected virtual void DisplayStatusMessages() OnEnable() Declaration protected virtual void OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Unity.Entities.ComponentTypes.html": {
    "href": "api/Unity.Entities.ComponentTypes.html",
    "title": "Struct ComponentTypes | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct ComponentTypes Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct ComponentTypes Constructors ComponentTypes(ComponentType) Declaration public ComponentTypes(ComponentType a) Parameters Type Name Description ComponentType a ComponentTypes(ComponentType, ComponentType) Declaration public ComponentTypes(ComponentType a, ComponentType b) Parameters Type Name Description ComponentType a ComponentType b ComponentTypes(ComponentType, ComponentType, ComponentType) Declaration public ComponentTypes(ComponentType a, ComponentType b, ComponentType c) Parameters Type Name Description ComponentType a ComponentType b ComponentType c ComponentTypes(ComponentType, ComponentType, ComponentType, ComponentType) Declaration public ComponentTypes(ComponentType a, ComponentType b, ComponentType c, ComponentType d) Parameters Type Name Description ComponentType a ComponentType b ComponentType c ComponentType d ComponentTypes(ComponentType, ComponentType, ComponentType, ComponentType, ComponentType) Declaration public ComponentTypes(ComponentType a, ComponentType b, ComponentType c, ComponentType d, ComponentType e) Parameters Type Name Description ComponentType a ComponentType b ComponentType c ComponentType d ComponentType e ComponentTypes(ComponentType[]) Declaration public ComponentTypes(ComponentType[] componentType) Parameters Type Name Description ComponentType [] componentType Fields m_masks Declaration public ComponentTypes.Masks m_masks Field Value Type Description ComponentTypes.Masks Properties Length Declaration public int Length { get; } Property Value Type Description Int32 Methods GetComponentType(Int32) Declaration public ComponentType GetComponentType(int index) Parameters Type Name Description Int32 index Returns Type Description ComponentType GetTypeIndex(Int32) Declaration public int GetTypeIndex(int index) Parameters Type Name Description Int32 index Returns Type Description Int32"
  },
  "api/Unity.Entities.ComponentTypes.Masks.html": {
    "href": "api/Unity.Entities.ComponentTypes.Masks.html",
    "title": "Struct ComponentTypes.Masks | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct ComponentTypes.Masks Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct Masks Fields m_BufferMask Declaration public ushort m_BufferMask Field Value Type Description UInt16 m_SharedComponentMask Declaration public ushort m_SharedComponentMask Field Value Type Description UInt16 m_SystemStateComponentMask Declaration public ushort m_SystemStateComponentMask Field Value Type Description UInt16 m_ZeroSizedMask Declaration public ushort m_ZeroSizedMask Field Value Type Description UInt16 Properties Buffers Declaration public int Buffers { get; } Property Value Type Description Int32 SharedComponents Declaration public int SharedComponents { get; } Property Value Type Description Int32 SystemStateComponents Declaration public int SystemStateComponents { get; } Property Value Type Description Int32 ZeroSizeds Declaration public int ZeroSizeds { get; } Property Value Type Description Int32 Methods IsSharedComponent(Int32) Declaration public bool IsSharedComponent(int index) Parameters Type Name Description Int32 index Returns Type Description Boolean IsZeroSized(Int32) Declaration public bool IsZeroSized(int index) Parameters Type Name Description Int32 index Returns Type Description Boolean"
  },
  "api/Unity.Entities.BeginInitializationEntityCommandBufferSystem.html": {
    "href": "api/Unity.Entities.BeginInitializationEntityCommandBufferSystem.html",
    "title": "Class BeginInitializationEntityCommandBufferSystem | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class BeginInitializationEntityCommandBufferSystem Inheritance Object ComponentSystemBase ComponentSystem EntityCommandBufferSystem BeginInitializationEntityCommandBufferSystem Inherited Members EntityCommandBufferSystem.CreateCommandBuffer() EntityCommandBufferSystem.AddJobHandleForProducer(JobHandle) EntityCommandBufferSystem.OnCreate() EntityCommandBufferSystem.OnDestroy() EntityCommandBufferSystem.OnUpdate() ComponentSystem.PostUpdateCommands ComponentSystem.InitEntityQueryCache(Int32) ComponentSystem.Entities ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnDestroyManager() ComponentSystemBase.OnCreateManager() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.Update() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetArchetypeChunkComponentType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkComponentTypeDynamic(ComponentType) ComponentSystemBase.GetArchetypeChunkBufferType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkSharedComponentType<T>() ComponentSystemBase.GetArchetypeChunkEntityType() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [UpdateInGroup(typeof(InitializationSystemGroup))] public class BeginInitializationEntityCommandBufferSystem : EntityCommandBufferSystem Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Entities.ArchetypeChunkArray.html": {
    "href": "api/Unity.Entities.ArchetypeChunkArray.html",
    "title": "Struct ArchetypeChunkArray | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct ArchetypeChunkArray Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct ArchetypeChunkArray Methods CalculateEntityCount(NativeArray<ArchetypeChunk>) Declaration public static int CalculateEntityCount(NativeArray<ArchetypeChunk> chunks) Parameters Type Name Description NativeArray < ArchetypeChunk > chunks Returns Type Description Int32"
  },
  "api/Unity.Build.BuildManifest.html": {
    "href": "api/Unity.Build.BuildManifest.html",
    "title": "Class BuildManifest | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class BuildManifest Holds information about exported assets throughout a BuildPipeline execution. All exported assets listed in the build manifest will also be installed in the build data directory. Inheritance Object BuildManifest Namespace : Unity.Build <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public sealed class BuildManifest Properties Assets A dictionary of all assets exported during the BuildPipeline execution. Declaration public IReadOnlyDictionary<Guid, string> Assets { get; } Property Value Type Description IReadOnlyDictionary < Guid , String > ExportedFiles The list of exported files during the BuildPipeline execution. Declaration public IEnumerable<FileInfo> ExportedFiles { get; } Property Value Type Description IEnumerable < FileInfo > Methods Add(Guid, String, IEnumerable<FileInfo>) Add an asset and its exported files to the BuildManifest . Declaration public void Add(Guid assetGuid, string assetPath, IEnumerable<FileInfo> exportedFiles) Parameters Type Name Description Guid assetGuid The asset Guid . String assetPath The asset path. IEnumerable < FileInfo > exportedFiles The files that were exported by the asset exporter for this asset."
  },
  "api/Unity.Entities.UniversalDelegates.VVRRI-5.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVRRI-5.html",
    "title": "Delegate VVRRI<T0, T1, T2, T3, T4> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VVRRI<T0, T1, T2, T3, T4> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVRRI<T0, T1, T2, T3, T4>(T0 t0, T1 t1, ref T2 t2, ref T3 t3, in T4 t4); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 Type Parameters Name Description T0 T1 T2 T3 T4"
  },
  "api/Unity.Entities.UniversalDelegates.VVRR-4.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVRR-4.html",
    "title": "Delegate VVRR<T0, T1, T2, T3> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VVRR<T0, T1, T2, T3> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVRR<T0, T1, T2, T3>(T0 t0, T1 t1, ref T2 t2, ref T3 t3); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 Type Parameters Name Description T0 T1 T2 T3"
  },
  "api/Unity.Entities.UniversalDelegates.VVRIIIII-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVRIIIII-8.html",
    "title": "Delegate VVRIIIII<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VVRIIIII<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVRIIIII<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, T1 t1, ref T2 t2, in T3 t3, in T4 t4, in T5 t5, in T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VVRIIII-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVRIIII-7.html",
    "title": "Delegate VVRIIII<T0, T1, T2, T3, T4, T5, T6> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VVRIIII<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVRIIII<T0, T1, T2, T3, T4, T5, T6>(T0 t0, T1 t1, ref T2 t2, in T3 t3, in T4 t4, in T5 t5, in T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.VVRIII-6.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVRIII-6.html",
    "title": "Delegate VVRIII<T0, T1, T2, T3, T4, T5> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VVRIII<T0, T1, T2, T3, T4, T5> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVRIII<T0, T1, T2, T3, T4, T5>(T0 t0, T1 t1, ref T2 t2, in T3 t3, in T4 t4, in T5 t5); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 Type Parameters Name Description T0 T1 T2 T3 T4 T5"
  },
  "api/Unity.Entities.UniversalDelegates.VVRII-5.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVRII-5.html",
    "title": "Delegate VVRII<T0, T1, T2, T3, T4> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VVRII<T0, T1, T2, T3, T4> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVRII<T0, T1, T2, T3, T4>(T0 t0, T1 t1, ref T2 t2, in T3 t3, in T4 t4); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 Type Parameters Name Description T0 T1 T2 T3 T4"
  },
  "api/Unity.Entities.UniversalDelegates.VVRI-4.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVRI-4.html",
    "title": "Delegate VVRI<T0, T1, T2, T3> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VVRI<T0, T1, T2, T3> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVRI<T0, T1, T2, T3>(T0 t0, T1 t1, ref T2 t2, in T3 t3); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 Type Parameters Name Description T0 T1 T2 T3"
  },
  "api/Unity.Entities.UniversalDelegates.VVR-3.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVR-3.html",
    "title": "Delegate VVR<T0, T1, T2> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VVR<T0, T1, T2> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVR<T0, T1, T2>(T0 t0, T1 t1, ref T2 t2); Parameters Type Name Description T0 t0 T1 t1 T2 t2 Type Parameters Name Description T0 T1 T2"
  },
  "api/Unity.Entities.UniversalDelegates.VRRRR-5.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VRRRR-5.html",
    "title": "Delegate VRRRR<T0, T1, T2, T3, T4> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VRRRR<T0, T1, T2, T3, T4> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VRRRR<T0, T1, T2, T3, T4>(T0 t0, ref T1 t1, ref T2 t2, ref T3 t3, ref T4 t4); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 Type Parameters Name Description T0 T1 T2 T3 T4"
  },
  "api/Unity.Entities.UniversalDelegates.VRRRIIII-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VRRRIIII-8.html",
    "title": "Delegate VRRRIIII<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VRRRIIII<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VRRRIIII<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, ref T1 t1, ref T2 t2, ref T3 t3, in T4 t4, in T5 t5, in T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VRRRIII-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VRRRIII-7.html",
    "title": "Delegate VRRRIII<T0, T1, T2, T3, T4, T5, T6> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VRRRIII<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VRRRIII<T0, T1, T2, T3, T4, T5, T6>(T0 t0, ref T1 t1, ref T2 t2, ref T3 t3, in T4 t4, in T5 t5, in T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.VRRRII-6.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VRRRII-6.html",
    "title": "Delegate VRRRII<T0, T1, T2, T3, T4, T5> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VRRRII<T0, T1, T2, T3, T4, T5> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VRRRII<T0, T1, T2, T3, T4, T5>(T0 t0, ref T1 t1, ref T2 t2, ref T3 t3, in T4 t4, in T5 t5); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 Type Parameters Name Description T0 T1 T2 T3 T4 T5"
  },
  "api/Unity.Entities.UniversalDelegates.VRRRI-5.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VRRRI-5.html",
    "title": "Delegate VRRRI<T0, T1, T2, T3, T4> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VRRRI<T0, T1, T2, T3, T4> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VRRRI<T0, T1, T2, T3, T4>(T0 t0, ref T1 t1, ref T2 t2, ref T3 t3, in T4 t4); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 Type Parameters Name Description T0 T1 T2 T3 T4"
  },
  "api/Unity.Entities.UniversalDelegates.VRRR-4.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VRRR-4.html",
    "title": "Delegate VRRR<T0, T1, T2, T3> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VRRR<T0, T1, T2, T3> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VRRR<T0, T1, T2, T3>(T0 t0, ref T1 t1, ref T2 t2, ref T3 t3); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 Type Parameters Name Description T0 T1 T2 T3"
  },
  "api/Unity.Entities.UniversalDelegates.VRRIIIII-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VRRIIIII-8.html",
    "title": "Delegate VRRIIIII<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VRRIIIII<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VRRIIIII<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, ref T1 t1, ref T2 t2, in T3 t3, in T4 t4, in T5 t5, in T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Scenes.SceneSystem.html": {
    "href": "api/Unity.Scenes.SceneSystem.html",
    "title": "Class SceneSystem | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class SceneSystem Inheritance Object ComponentSystemBase ComponentSystem SceneSystem Inherited Members ComponentSystem.PostUpdateCommands ComponentSystem.InitEntityQueryCache(Int32) ComponentSystem.Entities ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnDestroyManager() ComponentSystemBase.OnCreateManager() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.Update() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetArchetypeChunkComponentType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkComponentTypeDynamic(ComponentType) ComponentSystemBase.GetArchetypeChunkBufferType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkSharedComponentType<T>() ComponentSystemBase.GetArchetypeChunkEntityType() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Scenes <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [UpdateInGroup(typeof(InitializationSystemGroup))] public class SceneSystem : ComponentSystem Properties BuildSettingsGUID Declaration public Hash128 BuildSettingsGUID { get; set; } Property Value Type Description Hash128 Methods GetSceneEntity(Hash128) Declaration public Entity GetSceneEntity(Hash128 sceneGUID) Parameters Type Name Description Hash128 sceneGUID Returns Type Description Entity LoadSceneAsync(Hash128, SceneSystem.LoadParameters) Declaration public Entity LoadSceneAsync(Hash128 sceneGUID, SceneSystem.LoadParameters parameters = default(SceneSystem.LoadParameters)) Parameters Type Name Description Hash128 sceneGUID SceneSystem.LoadParameters parameters Returns Type Description Entity OnCreate() Declaration protected override void OnCreate() Overrides ComponentSystemBase.OnCreate() OnUpdate() Declaration protected override void OnUpdate() Overrides ComponentSystem.OnUpdate() UnloadScene(Entity, SceneSystem.UnloadParameters) Declaration public void UnloadScene(Entity sceneEntity, SceneSystem.UnloadParameters unloadParams = SceneSystem.UnloadParameters.Default) Parameters Type Name Description Entity sceneEntity SceneSystem.UnloadParameters unloadParams UnloadScene(Hash128, SceneSystem.UnloadParameters) Declaration public void UnloadScene(Hash128 sceneGUID, SceneSystem.UnloadParameters unloadParams = SceneSystem.UnloadParameters.Default) Parameters Type Name Description Hash128 sceneGUID SceneSystem.UnloadParameters unloadParams Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Scenes.SceneSystem.UnloadParameters.html": {
    "href": "api/Unity.Scenes.SceneSystem.UnloadParameters.html",
    "title": "Enum SceneSystem.UnloadParameters | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Enum SceneSystem.UnloadParameters Namespace : Unity.Scenes <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Flags] public enum UnloadParameters Fields Name Description Default DestroySceneProxyEntity DestroySectionProxyEntities DontRemoveRequestSceneLoaded"
  },
  "api/Unity.Scenes.SceneSystem.LoadParameters.html": {
    "href": "api/Unity.Scenes.SceneSystem.LoadParameters.html",
    "title": "Struct SceneSystem.LoadParameters | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct SceneSystem.LoadParameters Namespace : Unity.Scenes <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct LoadParameters Properties AutoLoad Declaration public bool AutoLoad { get; set; } Property Value Type Description Boolean Flags Declaration public SceneLoadFlags Flags { get; set; } Property Value Type Description SceneLoadFlags"
  },
  "api/Unity.Scenes.SceneSectionBundle.html": {
    "href": "api/Unity.Scenes.SceneSectionBundle.html",
    "title": "Struct SceneSectionBundle | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct SceneSectionBundle Namespace : Unity.Scenes <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] public struct SceneSectionBundle : ISharedComponentData, IEquatable<SceneSectionBundle>, IRefCounted Constructors SceneSectionBundle(UnityEngine.AssetBundle) Declaration public SceneSectionBundle(UnityEngine.AssetBundle bundle) Parameters Type Name Description UnityEngine.AssetBundle bundle Fields Bundle Declaration public UnityEngine.AssetBundle Bundle Field Value Type Description UnityEngine.AssetBundle Methods Equals(SceneSectionBundle) Declaration public bool Equals(SceneSectionBundle other) Parameters Type Name Description SceneSectionBundle other Returns Type Description Boolean GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() Release() Declaration public void Release() Implements IRefCounted.Release() Retain() Declaration public void Retain() Implements IRefCounted.Retain()"
  },
  "api/Unity.Entities.LambdaJobChunkDescriptionConstructionMethods.JobChunkDelegate.html": {
    "href": "api/Unity.Entities.LambdaJobChunkDescriptionConstructionMethods.JobChunkDelegate.html",
    "title": "Delegate LambdaJobChunkDescriptionConstructionMethods.JobChunkDelegate | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate LambdaJobChunkDescriptionConstructionMethods.JobChunkDelegate Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void JobChunkDelegate(ArchetypeChunk chunk, int chunkIndex, int queryIndexOfFirstEntityInChunk); Parameters Type Name Description ArchetypeChunk chunk Int32 chunkIndex Int32 queryIndexOfFirstEntityInChunk"
  },
  "api/Unity.Entities.ISharedComponentData.html": {
    "href": "api/Unity.Entities.ISharedComponentData.html",
    "title": "Interface ISharedComponentData | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Interface ISharedComponentData An interface for a component type whose value is shared by all entities in the same chunk. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface ISharedComponentData Remarks ISharedComponentData implementations are subject to the same constraints as IComponentData . ISharedComponent implementations must implement IEquatable<T> and GetHashCode() . Note: Currently, the ISharedComponentData interface allows fields having reference types. However, we plan to restrict ISharedComponentData to unmanaged, blittable types only in a future version of the Entities package. When you add a shared component to an EntityArchetype , ECS stores entities assigned the same values of that shared component in the same chunks. Thus, shared components further categorize entities within the same archetype. Use shared components when many entities share the same data values and it is more efficient to process all the entities of a given value together. For example, the RenderMesh shared component (in the Hybrid.Rendering package) defines a set of fields whose values can be shared by many 3D objects. Since all the entities with the same values for the RenderMesh fields are stored in the same chunks, the renderer can efficiently batch the draw calls for those entities based on the shared values. You must set the value of a shared component on the main thread using either the EntityManager or an EntityCommandBuffer . When you change a shared component value, the affected entity is moved to a different chunk. If a chunk already exists with the same values, and has enough room, the entity is moved to that chunk. Otherwise, a new chunk is allocated. Changing a shared component value is a structural change that potentially creates a sync-point in your application. You can find entities with a particular type of shared component using either EntityQuery or EntityQueryBuilder in the same way you select entities with specific types of IComponentData . You can also filter an entity query to select only entities with a specific shared component value using SetSharedComponentFilter<SharedComponent1>(SharedComponent1) . You can filter based on two different shared components. (EntityQueryBuilder does not support filtering queries by shared component value.) Avoid too many shared components and values on the same archetype. Since each combination of values, whether in the same component type or in different shared components, is stored in different chunks, too many combinations can lead to poor chunk utilization. Use the Entity Debugger window in the Unity Editor (menu: Window > Analysis > Entity Debugger ) to monitor chunk utilization. See Shared Component Data for additional information."
  },
  "api/Unity.Entities.IRefCounted.html": {
    "href": "api/Unity.Entities.IRefCounted.html",
    "title": "Interface IRefCounted | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Interface IRefCounted Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface IRefCounted Methods Release() Declaration void Release() Retain() Declaration void Retain()"
  },
  "api/Unity.Entities.IL2CPPProcessing.html": {
    "href": "api/Unity.Entities.IL2CPPProcessing.html",
    "title": "Namespace Unity.Entities.IL2CPPProcessing | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Namespace Unity.Entities.IL2CPPProcessing Classes ComponentSystemProcessing"
  },
  "api/Unity.Entities.IL2CPPProcessing.ComponentSystemProcessing.html": {
    "href": "api/Unity.Entities.IL2CPPProcessing.ComponentSystemProcessing.html",
    "title": "Class ComponentSystemProcessing | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class ComponentSystemProcessing Inheritance Object ComponentSystemProcessing Namespace : Unity.Entities.IL2CPPProcessing <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class ComponentSystemProcessing : IUnityLinkerProcessor Properties callbackOrder Declaration public int callbackOrder { get; } Property Value Type Description Int32 Methods GenerateAdditionalLinkXmlFile(BuildReport, UnityLinkerBuildPipelineData) Declaration public string GenerateAdditionalLinkXmlFile(BuildReport report, UnityLinkerBuildPipelineData data) Parameters Type Name Description BuildReport report UnityLinkerBuildPipelineData data Returns Type Description String OnAfterRun(BuildReport, UnityLinkerBuildPipelineData) Declaration public void OnAfterRun(BuildReport report, UnityLinkerBuildPipelineData data) Parameters Type Name Description BuildReport report UnityLinkerBuildPipelineData data OnBeforeRun(BuildReport, UnityLinkerBuildPipelineData) Declaration public void OnBeforeRun(BuildReport report, UnityLinkerBuildPipelineData data) Parameters Type Name Description BuildReport report UnityLinkerBuildPipelineData data"
  },
  "api/Unity.Entities.IBufferElementData.html": {
    "href": "api/Unity.Entities.IBufferElementData.html",
    "title": "Interface IBufferElementData | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Interface IBufferElementData An interface for creating structs that can be stored in a DynamicBuffer<T> . Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface IBufferElementData Remarks IBufferElementData implementations are subject to the same constraints as IComponentData . Create a DynamicBuffer<T> containing a given type T by adding that IBufferElementData type to an entity. The DynamicBuffer container is created automatically. You can specify the maximum number of elements a buffer stores inside a chunk by placing an InternalBufferCapacityAttribute on the IBufferElementData declaration. When the number of elements exceeds the internal capacity, the entire is moved outside the chunk into heap memory. (In either case, you access an element the same way through the dynamic buffer API.) To remove a buffer from an entity, remove that entity's IBufferElementData component. (To remove an individual element from a buffer, call RemoveAt(Int32) .) You can find entities with a particular type of buffer using either EntityQuery or EntityQueryBuilder in the same way you select entities with specific types of IComponentData . Use the IBufferElementData type in the query (not DynamicBuffer). To access the buffer of an entity in a ComponentSystem , use GetBuffer<T>(Entity) , where T is the IBufferElementData subtype. To access the buffer of an entity in a JobComponentSystem , define a field of type, GetBufferFromEntity<T>(Boolean) , as part of the Job struct. Set the field value when you schedule the Job with Unity.Entities.EntityManager.GetBufferFromEntity``1(System.Boolean) . The DynamicBuffer interface provides array-like access to buffer contents. You can treat a buffer like a NativeArray . You can also use Reinterpret<U>() to treat the buffer as a container of the underlying type, rather than a container of IBufferElementData. See Dynamic Buffers for additional information."
  },
  "api/Unity.Entities.Hash128.html": {
    "href": "api/Unity.Entities.Hash128.html",
    "title": "Struct Hash128 | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct Hash128 Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] public struct Hash128 : IEquatable<Hash128>, IComparable<Hash128> Constructors Hash128(String) Construct a hash from a 32 character hex string If the string has the incorrect length or non-hex characters the Value will be all 0 Declaration public Hash128(string value) Parameters Type Name Description String value Hash128(UInt32, UInt32, UInt32, UInt32) Declaration public Hash128(uint x, uint y, uint z, uint w) Parameters Type Name Description UInt32 x UInt32 y UInt32 z UInt32 w Hash128(uint4) Declaration public Hash128(uint4 value) Parameters Type Name Description uint4 value Fields Value Declaration public uint4 Value Field Value Type Description uint4 Properties IsValid Declaration public bool IsValid { get; } Property Value Type Description Boolean Methods CompareTo(Hash128) Declaration public int CompareTo(Hash128 other) Parameters Type Name Description Hash128 other Returns Type Description Int32 Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object) Equals(Hash128) Declaration public bool Equals(Hash128 obj) Parameters Type Name Description Hash128 obj Returns Type Description Boolean GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() ToString() Declaration public override string ToString() Returns Type Description String Overrides ValueType.ToString() Operators Equality(Hash128, Hash128) Declaration public static bool operator ==(Hash128 obj1, Hash128 obj2) Parameters Type Name Description Hash128 obj1 Hash128 obj2 Returns Type Description Boolean GreaterThan(Hash128, Hash128) Declaration public static bool operator>(Hash128 a, Hash128 b) Parameters Type Name Description Hash128 a Hash128 b Returns Type Description Boolean Inequality(Hash128, Hash128) Declaration public static bool operator !=(Hash128 obj1, Hash128 obj2) Parameters Type Name Description Hash128 obj1 Hash128 obj2 Returns Type Description Boolean LessThan(Hash128, Hash128) Declaration public static bool operator <(Hash128 a, Hash128 b) Parameters Type Name Description Hash128 a Hash128 b Returns Type Description Boolean"
  },
  "api/Unity.Entities.GenerateAuthoringComponentAttribute.html": {
    "href": "api/Unity.Entities.GenerateAuthoringComponentAttribute.html",
    "title": "Class GenerateAuthoringComponentAttribute | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class GenerateAuthoringComponentAttribute Inheritance Object Attribute GenerateAuthoringComponentAttribute Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct)] public class GenerateAuthoringComponentAttribute : Attribute, _Attribute"
  },
  "api/Unity.Entities.GameObjectEntity.html": {
    "href": "api/Unity.Entities.GameObjectEntity.html",
    "title": "Class GameObjectEntity | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class GameObjectEntity Inheritance Object GameObjectEntity Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class GameObjectEntity : UnityEngine.MonoBehaviour Properties Entity Declaration public Entity Entity { get; } Property Value Type Description Entity EntityManager Declaration public EntityManager EntityManager { get; } Property Value Type Description EntityManager Methods AddToEntity(EntityManager, UnityEngine.GameObject, Entity) Declaration public static void AddToEntity(EntityManager entityManager, UnityEngine.GameObject gameObject, Entity entity) Parameters Type Name Description EntityManager entityManager UnityEngine.GameObject gameObject Entity entity AddToEntityManager(EntityManager, UnityEngine.GameObject) Declaration public static Entity AddToEntityManager(EntityManager entityManager, UnityEngine.GameObject gameObject) Parameters Type Name Description EntityManager entityManager UnityEngine.GameObject gameObject Returns Type Description Entity CopyAllComponentsToEntity(UnityEngine.GameObject, EntityManager, Entity) Declaration public static void CopyAllComponentsToEntity(UnityEngine.GameObject gameObject, EntityManager entityManager, Entity entity) Parameters Type Name Description UnityEngine.GameObject gameObject EntityManager entityManager Entity entity OnDisable() Declaration protected virtual void OnDisable() OnEnable() Declaration protected virtual void OnEnable()"
  },
  "api/Unity.Entities.ExcludeComponentAttribute.html": {
    "href": "api/Unity.Entities.ExcludeComponentAttribute.html",
    "title": "Class ExcludeComponentAttribute | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class ExcludeComponentAttribute Inheritance Object Attribute ExcludeComponentAttribute Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [AttributeUsage(AttributeTargets.Struct)] public class ExcludeComponentAttribute : Attribute, _Attribute Constructors ExcludeComponentAttribute(Type[]) Declaration public ExcludeComponentAttribute(params Type[] excludeComponents) Parameters Type Name Description Type [] excludeComponents Fields ExcludeComponents Declaration public Type[] ExcludeComponents Field Value Type Description Type []"
  },
  "api/Unity.Entities.ExcludeComponent-1.html": {
    "href": "api/Unity.Entities.ExcludeComponent-1.html",
    "title": "Struct ExcludeComponent<T> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct ExcludeComponent<T> Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct ExcludeComponent<T> Type Parameters Name Description T"
  },
  "api/Unity.Entities.EntityRemapUtility.html": {
    "href": "api/Unity.Entities.EntityRemapUtility.html",
    "title": "Class EntityRemapUtility | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class EntityRemapUtility Inheritance Object EntityRemapUtility Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class EntityRemapUtility Methods AddEntityRemapping(ref NativeArray<EntityRemapUtility.EntityRemapInfo>, Entity, Entity) Declaration public static void AddEntityRemapping(ref NativeArray<EntityRemapUtility.EntityRemapInfo> remapping, Entity source, Entity target) Parameters Type Name Description NativeArray < EntityRemapUtility.EntityRemapInfo > remapping Entity source Entity target AppendBufferEntityPatches(EntityRemapUtility.BufferEntityPatchInfo*, TypeManager.EntityOffsetInfo*, Int32, Int32, Int32, Int32) Declaration public static EntityRemapUtility.BufferEntityPatchInfo*AppendBufferEntityPatches(EntityRemapUtility.BufferEntityPatchInfo*patches, TypeManager.EntityOffsetInfo*offsets, int offsetCount, int bufferBaseOffset, int bufferStride, int elementStride) Parameters Type Name Description EntityRemapUtility.BufferEntityPatchInfo * patches TypeManager.EntityOffsetInfo * offsets Int32 offsetCount Int32 bufferBaseOffset Int32 bufferStride Int32 elementStride Returns Type Description EntityRemapUtility.BufferEntityPatchInfo * AppendEntityPatches(EntityRemapUtility.EntityPatchInfo*, TypeManager.EntityOffsetInfo*, Int32, Int32, Int32) Declaration public static EntityRemapUtility.EntityPatchInfo*AppendEntityPatches(EntityRemapUtility.EntityPatchInfo*patches, TypeManager.EntityOffsetInfo*offsets, int offsetCount, int baseOffset, int stride) Parameters Type Name Description EntityRemapUtility.EntityPatchInfo * patches TypeManager.EntityOffsetInfo * offsets Int32 offsetCount Int32 baseOffset Int32 stride Returns Type Description EntityRemapUtility.EntityPatchInfo * AppendManagedEntityPatches(EntityRemapUtility.ManagedEntityPatchInfo*, ComponentType) Declaration public static EntityRemapUtility.ManagedEntityPatchInfo*AppendManagedEntityPatches(EntityRemapUtility.ManagedEntityPatchInfo*patches, ComponentType type) Parameters Type Name Description EntityRemapUtility.ManagedEntityPatchInfo * patches ComponentType type Returns Type Description EntityRemapUtility.ManagedEntityPatchInfo * CalculateEntityOffsets(Type) Declaration public static TypeManager.EntityOffsetInfo[] CalculateEntityOffsets(Type type) Parameters Type Name Description Type type Returns Type Description TypeManager.EntityOffsetInfo [] CalculateEntityOffsets<T>() Declaration public static TypeManager.EntityOffsetInfo[] CalculateEntityOffsets<T>() Returns Type Description TypeManager.EntityOffsetInfo [] Type Parameters Name Description T GetTargets(out NativeArray<Entity>, NativeArray<EntityRemapUtility.EntityRemapInfo>) Declaration public static void GetTargets(out NativeArray<Entity> output, NativeArray<EntityRemapUtility.EntityRemapInfo> remapping) Parameters Type Name Description NativeArray < Entity > output NativeArray < EntityRemapUtility.EntityRemapInfo > remapping HasEntityMembers(Type) Declaration public static bool HasEntityMembers(Type type) Parameters Type Name Description Type type Returns Type Description Boolean PatchEntities(EntityRemapUtility.EntityPatchInfo*, Int32, EntityRemapUtility.BufferEntityPatchInfo*, Int32, Byte*, Int32, ref NativeArray<EntityRemapUtility.EntityRemapInfo>) Declaration public static void PatchEntities(EntityRemapUtility.EntityPatchInfo*scalarPatches, int scalarPatchCount, EntityRemapUtility.BufferEntityPatchInfo*bufferPatches, int bufferPatchCount, byte *chunkBuffer, int entityCount, ref NativeArray<EntityRemapUtility.EntityRemapInfo> remapping) Parameters Type Name Description EntityRemapUtility.EntityPatchInfo * scalarPatches Int32 scalarPatchCount EntityRemapUtility.BufferEntityPatchInfo * bufferPatches Int32 bufferPatchCount Byte * chunkBuffer Int32 entityCount NativeArray < EntityRemapUtility.EntityRemapInfo > remapping PatchEntities(TypeManager.EntityOffsetInfo[], Byte*, ref NativeArray<EntityRemapUtility.EntityRemapInfo>) Declaration public static void PatchEntities(TypeManager.EntityOffsetInfo[] scalarPatches, byte *chunkBuffer, ref NativeArray<EntityRemapUtility.EntityRemapInfo> remapping) Parameters Type Name Description TypeManager.EntityOffsetInfo [] scalarPatches Byte * chunkBuffer NativeArray < EntityRemapUtility.EntityRemapInfo > remapping PatchEntitiesForPrefab(EntityRemapUtility.EntityPatchInfo*, Int32, EntityRemapUtility.BufferEntityPatchInfo*, Int32, Byte*, Int32, Int32, EntityRemapUtility.SparseEntityRemapInfo*, Int32) Declaration public static void PatchEntitiesForPrefab(EntityRemapUtility.EntityPatchInfo*scalarPatches, int scalarPatchCount, EntityRemapUtility.BufferEntityPatchInfo*bufferPatches, int bufferPatchCount, byte *chunkBuffer, int indexInChunk, int entityCount, EntityRemapUtility.SparseEntityRemapInfo*remapping, int remappingCount) Parameters Type Name Description EntityRemapUtility.EntityPatchInfo * scalarPatches Int32 scalarPatchCount EntityRemapUtility.BufferEntityPatchInfo * bufferPatches Int32 bufferPatchCount Byte * chunkBuffer Int32 indexInChunk Int32 entityCount EntityRemapUtility.SparseEntityRemapInfo * remapping Int32 remappingCount RemapEntity(ref NativeArray<EntityRemapUtility.EntityRemapInfo>, Entity) Declaration public static Entity RemapEntity(ref NativeArray<EntityRemapUtility.EntityRemapInfo> remapping, Entity source) Parameters Type Name Description NativeArray < EntityRemapUtility.EntityRemapInfo > remapping Entity source Returns Type Description Entity RemapEntity(EntityRemapUtility.EntityRemapInfo*, Entity) Declaration public static Entity RemapEntity(EntityRemapUtility.EntityRemapInfo*remapping, Entity source) Parameters Type Name Description EntityRemapUtility.EntityRemapInfo * remapping Entity source Returns Type Description Entity RemapEntityForPrefab(EntityRemapUtility.SparseEntityRemapInfo*, Int32, Entity) Declaration public static Entity RemapEntityForPrefab(EntityRemapUtility.SparseEntityRemapInfo*remapping, int remappingCount, Entity source) Parameters Type Name Description EntityRemapUtility.SparseEntityRemapInfo * remapping Int32 remappingCount Entity source Returns Type Description Entity"
  },
  "api/Unity.Entities.EntityRemapUtility.SparseEntityRemapInfo.html": {
    "href": "api/Unity.Entities.EntityRemapUtility.SparseEntityRemapInfo.html",
    "title": "Struct EntityRemapUtility.SparseEntityRemapInfo | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct EntityRemapUtility.SparseEntityRemapInfo Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct SparseEntityRemapInfo Fields Src Declaration public Entity Src Field Value Type Description Entity Target Declaration public Entity Target Field Value Type Description Entity"
  },
  "api/Unity.Entities.EntityManagerDifferOptions.html": {
    "href": "api/Unity.Entities.EntityManagerDifferOptions.html",
    "title": "Enum EntityManagerDifferOptions | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Enum EntityManagerDifferOptions Parameters used to configure the the execution of the differ. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Flags] public enum EntityManagerDifferOptions Fields Name Description ClearMissingReferences If set; all references to destroyed or missing entities will be set to Entity.Null before computing changes. When applying a change this is needed to patch references to restored entities (they were destroyed but are being brought back by the change set). Default The default set of options used by the Unity.Entities.EntityDiffer FastForwardShadowWorld If set; the shadow world will be updated with the latest changes. IncludeForwardChangeSet If set; the resulting EntityChanges will include the forward change set. IncludeReverseChangeSet If set; the resulting EntityChanges will include the reverse change set. This can be applied to the world to reverse the changes (i.e. undo). None ValidateUniqueEntityGuid If this flag is set; the entire world is checks for duplicate EntityGuid components."
  },
  "api/Unity.Entities.EntityManagerDiffer.html": {
    "href": "api/Unity.Entities.EntityManagerDiffer.html",
    "title": "Struct EntityManagerDiffer | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct EntityManagerDiffer The EntityManagerDiffer is used to efficiently track changes to a given world over time. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct EntityManagerDiffer : IDisposable Constructors EntityManagerDiffer(EntityManager, Allocator, EntityQueryDesc) Declaration public EntityManagerDiffer(EntityManager sourceEntityManager, Allocator allocator, EntityQueryDesc entityQueryDesc = null) Parameters Type Name Description EntityManager sourceEntityManager Allocator allocator EntityQueryDesc entityQueryDesc Methods Dispose() Declaration public void Dispose() GetChanges(EntityManagerDifferOptions, Allocator) Generates a detailed change set for the world. All entities to be considered for diffing must have the EntityGuid component with a unique value. Declaration public EntityChanges GetChanges(EntityManagerDifferOptions options, Allocator allocator) Parameters Type Name Description EntityManagerDifferOptions options A set of options which can be toggled. Allocator allocator The allocator to use for the results object. Returns Type Description EntityChanges A set of changes for the world since the last fast-forward. Remarks The resulting EntityChanges must be disposed when no longer needed."
  },
  "api/Unity.Entities.EntityManager.html": {
    "href": "api/Unity.Entities.EntityManager.html",
    "title": "Class EntityManager | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class EntityManager The EntityManager manages entities and components in a World. Inheritance Object EntityManager Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public sealed class EntityManager Remarks The EntityManager provides an API to create, read, update, and destroy entities. A World has one EntityManager, which manages all the entities for that World. Many EntityManager operations result in structural changes that change the layout of entities in memory. Before it can perform such operations, the EntityManager must wait for all running Jobs to complete, an event called a sync point . A sync point both blocks the main thread and prevents the application from taking advantage of all available cores as the running Jobs wind down. Although you cannot prevent sync points entirely, you should avoid them as much as possible. To this end, the ECS framework provides the EntityCommandBuffer , which allows you to queue structural changes so that they all occur at one time in the frame. Properties Debug An object providing debugging information and operations. Declaration public EntityManager.EntityManagerDebug Debug { get; } Property Value Type Description EntityManager.EntityManagerDebug EntityCapacity The capacity of the internal entities array. Declaration public int EntityCapacity { get; } Property Value Type Description Int32 The number of entities the array can hold before it must be resized. Remarks The entities array automatically resizes itself when the entity count approaches the capacity. You should rarely need to set this value directly. Important: when you set this value (or when the array automatically resizes), the EntityManager first ensures that all Jobs finish. This can prevent the Job scheduler from utilizing available CPU cores and threads, resulting in a temporary performance drop. ExclusiveEntityTransactionDependency The Job dependencies of the exclusive entity transaction. Declaration public JobHandle ExclusiveEntityTransactionDependency { get; set; } Property Value Type Description JobHandle GlobalSystemVersion A counter that increments after every system update. Declaration public uint GlobalSystemVersion { get; } Property Value Type Description UInt32 Remarks The ECS framework uses the GlobalSystemVersion to track changes in a conservative, efficient fashion. Changes are recorded per component per chunk. See Also DidChange<T>(ArchetypeChunkComponentType<T>, UInt32) ChangedFilterAttribute IsCreated Reports whether the EntityManager has been initialized yet. Declaration public bool IsCreated { get; } Property Value Type Description Boolean True, if the EntityManager's OnCreateManager() function has finished. UniversalQuery An EntityQuery instance that matches all components. Declaration public EntityQuery UniversalQuery { get; } Property Value Type Description EntityQuery Version The latest entity generational version. Declaration public int Version { get; } Property Value Type Description Int32 This is the version number that is assigned to a new entity. See Version . World The World of this EntityManager. Declaration public World World { get; } Property Value Type Description World A World has one EntityManager and an EntityManager manages the entities of one World. Methods AddBuffer<T>(Entity) Adds a dynamic buffer component to an entity. Declaration public DynamicBuffer<T> AddBuffer<T>(Entity entity) where T : struct, IBufferElementData Parameters Type Name Description Entity entity The entity. Returns Type Description DynamicBuffer <T> The buffer. Type Parameters Name Description T The type of buffer element. Must implement IBufferElementData. Remarks A buffer component stores the number of elements inside the chunk defined by the [InternalBufferCapacity] attribute applied to the buffer element type declaration. Any additional elements are stored in a separate memory block that is managed by the EntityManager. Adding a component changes an entity's archetype and results in the entity being moved to a different chunk. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before adding the buffer and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. See Also InternalBufferCapacityAttribute AddChunkComponentData<T>(Entity) Adds a chunk component to the specified entity. Returns true if the chunk component was added, false if the entity already had the chunk component. (The chunk component's data is set either way.) Declaration public bool AddChunkComponentData<T>(Entity entity) where T : struct, IComponentData Parameters Type Name Description Entity entity The entity. Returns Type Description Boolean Type Parameters Name Description T The type of component, which must implement IComponentData. Remarks Adding a chunk component to an entity changes that entity's archetype and results in the entity being moved to a different chunk, either one that already has an archetype containing the chunk component or a new chunk. A chunk component is common to all entities in a chunk. You can access a chunk IComponentData instance through either the chunk itself or through an entity stored in that chunk. In either case, getting or setting the component reads or writes the same data. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before adding the component and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. AddChunkComponentData<T>(EntityQuery, T) Adds a component to each of the chunks identified by a EntityQuery and set the component values. Declaration public void AddChunkComponentData<T>(EntityQuery entityQuery, T componentData) where T : struct, IComponentData Parameters Type Name Description EntityQuery entityQuery The EntityQuery identifying the chunks to modify. T componentData The data to set. Type Parameters Name Description T The type of component, which must implement IComponentData. Remarks This function finds all chunks whose archetype satisfies the EntityQuery and adds the specified component to them. A chunk component is common to all entities in a chunk. You can access a chunk IComponentData instance through either the chunk itself or through an entity stored in that chunk. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before adding the component and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. AddComponent(NativeArray<Entity>, ComponentType) Adds a component to a set of entities. Declaration public void AddComponent(NativeArray<Entity> entities, ComponentType componentType) Parameters Type Name Description NativeArray < Entity > entities An array of Entity objects. ComponentType componentType The type of component to add. Remarks Adding a component changes an entity's archetype and results in the entity being moved to a different chunk. The added components have the default values for the type. If an Entity object in the entities array refers to an entity that has been destroyed, this function throws an ArgumentError exception. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before creating these chunks and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. AddComponent(Entity, ComponentType) Adds a component to an entity. Declaration public bool AddComponent(Entity entity, ComponentType componentType) Parameters Type Name Description Entity entity The Entity object. ComponentType componentType The type of component to add. Returns Type Description Boolean Remarks Adding a component changes the entity's archetype and results in the entity being moved to a different chunk. The added component has the default values for the type. If the Entity object refers to an entity that has been destroyed, this function throws an ArgumentError exception. If the Entity object refers to an entity that already has the specified ComponentType , the function returns false without performing any modifications. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before adding the component and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. AddComponent(EntityQuery, ComponentType) Adds a component to a set of entities defined by a EntityQuery. Declaration public void AddComponent(EntityQuery entityQuery, ComponentType componentType) Parameters Type Name Description EntityQuery entityQuery The EntityQuery defining the entities to modify. ComponentType componentType The type of component to add. Remarks Adding a component changes an entity's archetype and results in the entity being moved to a different chunk. The added components have the default values for the type. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before adding the component and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. AddComponent<T>(NativeArray<Entity>) Adds a component to a set of entities. Declaration public void AddComponent<T>(NativeArray<Entity> entities) Parameters Type Name Description NativeArray < Entity > entities An array of Entity objects. Type Parameters Name Description T The type of component to add. Remarks Adding a component changes an entity's archetype and results in the entity being moved to a different chunk. The added components have the default values for the type. If an Entity object in the entities array refers to an entity that has been destroyed, this function throws an ArgumentError exception. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before creating these chunks and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. AddComponent<T>(Entity) Adds a component to an entity. Declaration public bool AddComponent<T>(Entity entity) Parameters Type Name Description Entity entity The Entity object. Returns Type Description Boolean Type Parameters Name Description T The type of component to add. Remarks Adding a component changes the entity's archetype and results in the entity being moved to a different chunk. The added component has the default values for the type. If the Entity object refers to an entity that has been destroyed, this function throws an ArgumentError exception. If the Entity object refers to an entity that already has the specified ComponentType of type T, the function returns false without performing any modifications. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before adding the component and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. AddComponent<T>(EntityQuery) Adds a component to a set of entities defined by a EntityQuery. Declaration public void AddComponent<T>(EntityQuery entityQuery) Parameters Type Name Description EntityQuery entityQuery The EntityQuery defining the entities to modify. Type Parameters Name Description T The type of component to add. Remarks Adding a component changes an entity's archetype and results in the entity being moved to a different chunk. The added components have the default values for the type. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before adding the component and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. AddComponentData<T>(Entity, T) Adds a component to an entity and set the value of that component. Returns true if the component was added, false if the entity already had the component. (The component's data is set either way.) Declaration public bool AddComponentData<T>(Entity entity, T componentData) where T : struct, IComponentData Parameters Type Name Description Entity entity The entity. T componentData The data to set. Returns Type Description Boolean Type Parameters Name Description T The type of component. Remarks Adding a component changes an entity's archetype and results in the entity being moved to a different chunk. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before adding the component and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. AddComponentData<T>(EntityQuery, NativeArray<T>) Adds a component to a set of entities defines by the EntityQuery and sets the component of each entity in the query to the value in the component array. componentArray.Length must match entityQuery.ToEntityArray().Length. Declaration public void AddComponentData<T>(EntityQuery entityQuery, NativeArray<T> componentArray) where T : struct, IComponentData Parameters Type Name Description EntityQuery entityQuery THe EntityQuery defining the entities to add component to NativeArray <T> componentArray Type Parameters Name Description T AddComponentObject(Entity, Object) Adds a managed UnityEngine.Component object to an entity. Declaration public void AddComponentObject(Entity entity, object componentData) Parameters Type Name Description Entity entity The entity to modify. Object componentData An object inheriting UnityEngine.Component. Remarks Accessing data in a managed object forfeits many opportunities for increased performance. Adding managed objects to an entity should be avoided or used sparingly. Adding a component changes an entity's archetype and results in the entity being moved to a different chunk. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before adding the object and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. Exceptions Type Condition ArgumentNullException If the componentData object is not an instance of UnityEngine.Component. AddComponents(Entity, ComponentTypes) Adds a set of component to an entity. Declaration public void AddComponents(Entity entity, ComponentTypes types) Parameters Type Name Description Entity entity The entity to modify. ComponentTypes types The types of components to add. Remarks Adding components changes the entity's archetype and results in the entity being moved to a different chunk. The added components have the default values for the type. If the Entity object refers to an entity that has been destroyed, this function throws an ArgumentError exception. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before adding these components and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. AddSharedComponentData<T>(Entity, T) Adds a shared component to an entity. Returns true if the shared component was added, false if the entity already had the shared component. (The shared component's data is set either way.) Declaration public bool AddSharedComponentData<T>(Entity entity, T componentData) where T : struct, ISharedComponentData Parameters Type Name Description Entity entity The entity. T componentData An instance of the shared component having the values to set. Returns Type Description Boolean Type Parameters Name Description T The shared component type. Remarks The fields of the componentData parameter are assigned to the added shared component. Adding a component to an entity changes its archetype and results in the entity being moved to a different chunk. The entity moves to a chunk with other entities that have the same shared component values. A new chunk is created if no chunk with the same archetype and shared component values currently exists. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before adding the component and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. AddSharedComponentData<T>(EntityQuery, T) Adds a shared component to a set of entities defined by a EntityQuery. Declaration public void AddSharedComponentData<T>(EntityQuery entityQuery, T componentData) where T : struct, ISharedComponentData Parameters Type Name Description EntityQuery entityQuery The EntityQuery defining a set of entities to modify. T componentData The data to set. Type Parameters Name Description T The data type of the shared component. Remarks The fields of the componentData parameter are assigned to all of the added shared components. Adding a component to an entity changes its archetype and results in the entity being moved to a different chunk. The entity moves to a chunk with other entities that have the same shared component values. A new chunk is created if no chunk with the same archetype and shared component values currently exists. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before adding the component and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. BeginExclusiveEntityTransaction() Declaration public ExclusiveEntityTransaction BeginExclusiveEntityTransaction() Returns Type Description ExclusiveEntityTransaction CompleteAllJobs() Waits for all Jobs to complete. Declaration public void CompleteAllJobs() Remarks Calling CompleteAllJobs() blocks the main thread until all currently running Jobs finish. CopyAndReplaceEntitiesFrom(EntityManager) Declaration public void CopyAndReplaceEntitiesFrom(EntityManager srcEntityManager) Parameters Type Name Description EntityManager srcEntityManager CreateArchetype(ComponentType[]) Creates an archetype from a set of component types. Declaration public EntityArchetype CreateArchetype(params ComponentType[] types) Parameters Type Name Description ComponentType [] types The component types to include as part of the archetype. Returns Type Description EntityArchetype The EntityArchetype object for the archetype. Remarks Creates a new archetype in the ECS framework's internal type registry, unless the archetype already exists. CreateChunk(EntityArchetype, NativeArray<ArchetypeChunk>, Int32) Creates a set of chunks containing the specified number of entities having the specified archetype. Declaration public void CreateChunk(EntityArchetype archetype, NativeArray<ArchetypeChunk> chunks, int entityCount) Parameters Type Name Description EntityArchetype archetype The archetype for the chunk and entities. NativeArray < ArchetypeChunk > chunks An empty array to receive the created chunks. Int32 entityCount The number of entities to create. Remarks The EntityManager creates enough chunks to hold the required number of entities. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before creating these chunks and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. CreateEntity() Declaration public Entity CreateEntity() Returns Type Description Entity CreateEntity(ComponentType[]) Creates an entity having components of the specified types. Declaration public Entity CreateEntity(params ComponentType[] types) Parameters Type Name Description ComponentType [] types The types of components to add to the new entity. Returns Type Description Entity The Entity object that you can use to access the entity. Remarks The EntityManager creates the entity in the first available chunk with the matching archetype that has enough space. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before creating the entity and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. CreateEntity(EntityArchetype) Creates an entity having the specified archetype. Declaration public Entity CreateEntity(EntityArchetype archetype) Parameters Type Name Description EntityArchetype archetype The archetype for the new entity. Returns Type Description Entity The Entity object that you can use to access the entity. Remarks The EntityManager creates the entity in the first available chunk with the matching archetype that has enough space. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before creating the entity and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. CreateEntity(EntityArchetype, NativeArray<Entity>) Creates a set of entities of the specified archetype. Declaration public void CreateEntity(EntityArchetype archetype, NativeArray<Entity> entities) Parameters Type Name Description EntityArchetype archetype The archetype defining the structure for the new entities. NativeArray < Entity > entities An array to hold the Entity objects needed to access the new entities. The length of the array determines how many entities are created. Remarks Fills the NativeArray object assigned to the entities parameter with the Entity objects of the created entities. Each entity has the components specified by the EntityArchetype object assigned to the archetype parameter. The EntityManager adds these entities to the World entity list. Use the Entity objects in the array for further processing, such as setting the component values. CreateEntityQuery(ComponentType[]) Creates a EntityQuery from an array of component types. Declaration public EntityQuery CreateEntityQuery(params ComponentType[] requiredComponents) Parameters Type Name Description ComponentType [] requiredComponents An array containing the component types. Returns Type Description EntityQuery The EntityQuery derived from the specified array of component types. See Also EntityQueryDesc CreateEntityQuery(EntityQueryDesc[]) Creates a EntityQuery from an EntityQueryDesc. Declaration public EntityQuery CreateEntityQuery(params EntityQueryDesc[] queriesDesc) Parameters Type Name Description EntityQueryDesc [] queriesDesc A queryDesc identifying a set of component types. Returns Type Description EntityQuery The EntityQuery corresponding to the queryDesc. CreateEntityRemapArray(Allocator) Creates a remapping array with one element for each entity in the World . Declaration public NativeArray<EntityRemapUtility.EntityRemapInfo> CreateEntityRemapArray(Allocator allocator) Parameters Type Name Description Allocator allocator The type of memory allocation to use when creating the array. Returns Type Description NativeArray < EntityRemapUtility.EntityRemapInfo > An array containing a no-op identity transformation for each entity. DestroyEntity(NativeArray<Entity>) Destroys all entities in an array. Declaration public void DestroyEntity(NativeArray<Entity> entities) Parameters Type Name Description NativeArray < Entity > entities An array containing the Entity objects of the entities to destroy. Remarks Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before destroying the entity and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. DestroyEntity(NativeSlice<Entity>) Destroys all entities in a slice of an array. Declaration public void DestroyEntity(NativeSlice<Entity> entities) Parameters Type Name Description NativeSlice < Entity > entities The slice of an array containing the Entity objects of the entities to destroy. Remarks Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before destroying the entity and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. DestroyEntity(Entity) Destroys an entity. Declaration public void DestroyEntity(Entity entity) Parameters Type Name Description Entity entity The Entity object of the entity to destroy. Remarks Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before destroying the entity and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. DestroyEntity(EntityQuery) Destroy all entities having a common set of component types. Declaration public void DestroyEntity(EntityQuery entityQuery) Parameters Type Name Description EntityQuery entityQuery Remarks Since entities in the same chunk share the same component structure, this function effectively destroys the chunks holding any entities identified by the entityQueryFilter parameter. EndExclusiveEntityTransaction() Ends an exclusive entity transaction. Declaration public void EndExclusiveEntityTransaction() See Also ExclusiveEntityTransaction BeginExclusiveEntityTransaction() Exists(Entity) Reports whether an Entity object is still valid. Declaration public bool Exists(Entity entity) Parameters Type Name Description Entity entity The Entity object to check. Returns Type Description Boolean True, if Version matches the version of the current entity at Index in the entities array. Remarks An Entity object does not contain a reference to its entity. Instead, the Entity struct contains an index and a generational version number. When an entity is destroyed, the EntityManager increments the version of the entity within the internal array of entities. The index of a destroyed entity is recycled when a new entity is created. After an entity is destroyed, any existing Entity objects will still contain the older version number. This function compares the version numbers of the specified Entity object and the current version of the entity recorded in the entities array. If the versions are different, the Entity object no longer refers to an existing entity and cannot be used. GetAllArchetypes(NativeList<EntityArchetype>) Gets all the archetypes. Declaration public void GetAllArchetypes(NativeList<EntityArchetype> allArchetypes) Parameters Type Name Description NativeList < EntityArchetype > allArchetypes A native list to receive the EntityArchetype objects. Remarks The function adds the archetype objects to the existing contents of the list. The list is not cleared. GetAllChunks(Allocator) Gets all the chunks managed by this EntityManager. Declaration public NativeArray<ArchetypeChunk> GetAllChunks(Allocator allocator = null) Parameters Type Name Description Allocator allocator The type of allocation for creating the NativeArray to hold the ArchetypeChunk objects. Returns Type Description NativeArray < ArchetypeChunk > An array of ArchetypeChunk objects referring to all the chunks in the World . Remarks Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before getting these chunks and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. GetAllEntities(Allocator) Gets all the entities managed by this EntityManager. Declaration public NativeArray<Entity> GetAllEntities(Allocator allocator = null) Parameters Type Name Description Allocator allocator The type of allocation for creating the NativeArray to hold the Entity objects. Returns Type Description NativeArray < Entity > An array of Entity objects referring to all the entities in the World. Remarks Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before getting the entities and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. GetAllUniqueSharedComponentData<T>(List<T>) Declaration public void GetAllUniqueSharedComponentData<T>(List<T> sharedComponentValues) where T : struct, ISharedComponentData Parameters Type Name Description List <T> sharedComponentValues Type Parameters Name Description T GetAllUniqueSharedComponentData<T>(List<T>, List<Int32>) Gets a list of all unique shared components of the same type and a corresponding list of indices into the internal shared component list. Declaration public void GetAllUniqueSharedComponentData<T>(List<T> sharedComponentValues, List<int> sharedComponentIndices) where T : struct, ISharedComponentData Parameters Type Name Description List <T> sharedComponentValues List < Int32 > sharedComponentIndices Type Parameters Name Description T Remarks All entities with the same archetype and the same values for a shared component are stored in the same set of chunks. This function finds the unique shared components existing across chunks and archetype and fills a list with copies of those components and fills in a separate list with the indices of those components in the internal shared component list. You can use the indices to ask the same shared components directly by calling GetSharedComponentData<T>(Int32) , passing in the index. An index remains valid until the shared component order version changes. Check this version using GetSharedComponentOrderVersion<T>(T) . GetArchetypeChunkBufferType<T>(Boolean) Gets the dynamic type object required to access a chunk buffer containing elements of type T. Declaration public ArchetypeChunkBufferType<T> GetArchetypeChunkBufferType<T>(bool isReadOnly) where T : struct, IBufferElementData Parameters Type Name Description Boolean isReadOnly Specify whether the access to the component through this object is read only or read and write. Returns Type Description ArchetypeChunkBufferType <T> The run-time type information of the buffer component. Type Parameters Name Description T The compile-time type of the buffer elements. Remarks To access a component stored in a chunk, you must have the type registry information for the component. This function provides that information for buffer components. Use the returned ArchetypeChunkComponentType<T> object with the functions of an ArchetypeChunk object to get information about the components in that chunk and to access the component values. GetArchetypeChunkComponentType<T>(Boolean) Gets the dynamic type object required to access a chunk component of type T. Declaration public ArchetypeChunkComponentType<T> GetArchetypeChunkComponentType<T>(bool isReadOnly) Parameters Type Name Description Boolean isReadOnly Specify whether the access to the component through this object is read only or read and write. For managed components isReadonly will always be treated as false. Returns Type Description ArchetypeChunkComponentType <T> The run-time type information of the component. Type Parameters Name Description T The compile-time type of the component. Remarks To access a component stored in a chunk, you must have the type registry information for the component. This function provides that information. Use the returned ArchetypeChunkComponentType<T> object with the functions of an ArchetypeChunk object to get information about the components in that chunk and to access the component values. GetArchetypeChunkComponentTypeDynamic(ComponentType) Gets the dynamic type object required to access a chunk component of dynamic type acquired from reflection. Declaration public ArchetypeChunkComponentTypeDynamic GetArchetypeChunkComponentTypeDynamic(ComponentType componentType) Parameters Type Name Description ComponentType componentType Type of the component Returns Type Description ArchetypeChunkComponentTypeDynamic The run-time type information of the component. Remarks To access a component stored in a chunk, you must have the type registry information for the component. This function provides that information. Use the returned ArchetypeChunkComponentTypeDynamic object with the functions of an ArchetypeChunk object to get information about the components in that chunk and to access the component values. GetArchetypeChunkEntityType() Gets the dynamic type object required to access the Entity component of a chunk. Declaration public ArchetypeChunkEntityType GetArchetypeChunkEntityType() Returns Type Description ArchetypeChunkEntityType The run-time type information of the Entity component. Remarks All chunks have an implicit Entity component referring to the entities in that chunk. To access any component stored in a chunk, you must have the type registry information for the component. This function provides that information for the implicit Entity component. Use the returned ArchetypeChunkComponentType<T> object with the functions of an ArchetypeChunk object to access the component values. GetArchetypeChunkSharedComponentType<T>() Gets the dynamic type object required to access a shared component of type T. Declaration public ArchetypeChunkSharedComponentType<T> GetArchetypeChunkSharedComponentType<T>() where T : struct, ISharedComponentData Returns Type Description ArchetypeChunkSharedComponentType <T> The run-time type information of the shared component. Type Parameters Name Description T The compile-time type of the shared component. Remarks To access a component stored in a chunk, you must have the type registry information for the component. This function provides that information for shared components. Use the returned ArchetypeChunkComponentType<T> object with the functions of an ArchetypeChunk object to get information about the components in that chunk and to access the component values. GetAssignableComponentTypes(Type) Gets a list of the types of components that can be assigned to the specified component. Declaration public List<Type> GetAssignableComponentTypes(Type interfaceType) Parameters Type Name Description Type interfaceType The type to check. Returns Type Description List < Type > A new List object containing the System.Types that can be assigned to interfaceType . Remarks Assignable components include those with the same compile-time type and those that inherit from the same compile-time type. GetBuffer<T>(Entity) Gets the dynamic buffer of an entity. Declaration public DynamicBuffer<T> GetBuffer<T>(Entity entity) where T : struct, IBufferElementData Parameters Type Name Description Entity entity The entity. Returns Type Description DynamicBuffer <T> The DynamicBuffer object for accessing the buffer contents. Type Parameters Name Description T The type of the buffer's elements. Exceptions Type Condition ArgumentException Thrown if T is an unsupported type. GetChunk(Entity) Gets the chunk in which the specified entity is stored. Declaration public ArchetypeChunk GetChunk(Entity entity) Parameters Type Name Description Entity entity The entity. Returns Type Description ArchetypeChunk The chunk containing the entity. GetChunkComponentData<T>(ArchetypeChunk) Gets the value of a chunk component. Declaration public T GetChunkComponentData<T>(ArchetypeChunk chunk) where T : struct, IComponentData Parameters Type Name Description ArchetypeChunk chunk The chunk. Returns Type Description T A struct of type T containing the component value. Type Parameters Name Description T The component type. Remarks A chunk component is common to all entities in a chunk. You can access a chunk IComponentData instance through either the chunk itself or through an entity stored in that chunk. Exceptions Type Condition ArgumentException Thrown if the ArchetypeChunk object is invalid. GetChunkComponentData<T>(Entity) Gets the value of chunk component for the chunk containing the specified entity. Declaration public T GetChunkComponentData<T>(Entity entity) where T : struct, IComponentData Parameters Type Name Description Entity entity The entity. Returns Type Description T A struct of type T containing the component value. Type Parameters Name Description T The component type. Remarks A chunk component is common to all entities in a chunk. You can access a chunk IComponentData instance through either the chunk itself or through an entity stored in that chunk. GetComponentCount(Entity) Gets the number of component types associated with an entity. Declaration public int GetComponentCount(Entity entity) Parameters Type Name Description Entity entity The entity. Returns Type Description Int32 The number of components. GetComponentData<T>(Entity) Gets the value of a component for an entity. Declaration public T GetComponentData<T>(Entity entity) where T : struct, IComponentData Parameters Type Name Description Entity entity The entity. Returns Type Description T A struct of type T containing the component value. Type Parameters Name Description T The type of component to retrieve. Exceptions Type Condition ArgumentException Thrown if the component type has no fields. GetComponentObject<T>(Entity) Gets the managed UnityEngine.Component object from an entity. Declaration public T GetComponentObject<T>(Entity entity) Parameters Type Name Description Entity entity The entity. Returns Type Description T The managed object, cast to type T. Type Parameters Name Description T The type of the managed object. GetComponentObject<T>(Entity, ComponentType) Declaration public T GetComponentObject<T>(Entity entity, ComponentType componentType) Parameters Type Name Description Entity entity ComponentType componentType Returns Type Description T Type Parameters Name Description T GetComponentOrderVersion<T>() Gets the version number of the specified component type. Declaration public int GetComponentOrderVersion<T>() Returns Type Description Int32 The current version number. Type Parameters Name Description T The component type. Remarks This version number is incremented each time there is a structural change involving the specified type of component. Such changes include creating or destroying entities that have this component and adding or removing the component type from an entity. Shared components are not covered by this version; see GetSharedComponentOrderVersion<T>(T) . Version numbers can overflow. To compare if one version is more recent than another use a calculation such as: bool VersionBisNewer = (VersionB - VersionA) > 0; GetComponentTypes(Entity, Allocator) Gets an entity's component types. Declaration public NativeArray<ComponentType> GetComponentTypes(Entity entity, Allocator allocator = null) Parameters Type Name Description Entity entity The entity. Allocator allocator The type of allocation for creating the NativeArray to hold the ComponentType objects. Returns Type Description NativeArray < ComponentType > An array of ComponentType containing all the types of components associated with the entity. GetEnabled(Entity) Declaration public bool GetEnabled(Entity entity) Parameters Type Name Description Entity entity Returns Type Description Boolean GetEntityQueryMask(EntityQuery) Gets an EntityQueryMask that can be used to quickly match if an entity belongs to an EntityQuery. There is a maximum limit of 1024 EntityQueryMasks that can be created. EntityQueryMasks cannot be created from EntityQueries with filters. Declaration public EntityQueryMask GetEntityQueryMask(EntityQuery query) Parameters Type Name Description EntityQuery query The EntityQuery that describes the EntityQueryMask. Returns Type Description EntityQueryMask The EntityQueryMask corresponding to the EntityQuery. GetSharedComponentCount() Gets the number of shared components managed by this EntityManager. Declaration public int GetSharedComponentCount() Returns Type Description Int32 The shared component count GetSharedComponentData<T>(Int32) Gets a shared component by index. Declaration public T GetSharedComponentData<T>(int sharedComponentIndex) where T : struct, ISharedComponentData Parameters Type Name Description Int32 sharedComponentIndex The index of the shared component in the internal shared component list. Returns Type Description T A copy of the shared component. Type Parameters Name Description T The data type of the shared component. Remarks The ECS framework maintains an internal list of unique shared components. You can get the components in this list, along with their indices using GetAllUniqueSharedComponentData<T>(List<T>, List<Int32>) . An index in the list is valid and points to the same shared component index as long as the shared component order version from GetSharedComponentOrderVersion<T>(T) remains the same. GetSharedComponentData<T>(Entity) Gets a shared component from an entity. Declaration public T GetSharedComponentData<T>(Entity entity) where T : struct, ISharedComponentData Parameters Type Name Description Entity entity The entity. Returns Type Description T A copy of the shared component. Type Parameters Name Description T The type of shared component. GetSharedComponentDataIndex<T>(Entity) Declaration public int GetSharedComponentDataIndex<T>(Entity entity) where T : struct, ISharedComponentData Parameters Type Name Description Entity entity Returns Type Description Int32 Type Parameters Name Description T GetSharedComponentOrderVersion<T>(T) Gets the version number of the specified shared component. Declaration public int GetSharedComponentOrderVersion<T>(T sharedComponent) where T : struct, ISharedComponentData Parameters Type Name Description T sharedComponent The shared component instance. Returns Type Description Int32 The current version number. Type Parameters Name Description T The shared component type. Remarks This version number is incremented each time there is a structural change involving entities in the chunk of the specified shared component. Such changes include creating or destroying entities or anything that changes the archetype of an entity. Version numbers can overflow. To compare if one version is more recent than another use a calculation such as: bool VersionBisNewer = (VersionB - VersionA) > 0; HasChunkComponent<T>(Entity) Checks whether the chunk containing an entity has a specific type of component. Declaration public bool HasChunkComponent<T>(Entity entity) Parameters Type Name Description Entity entity The Entity object. Returns Type Description Boolean True, if the chunk containing the specified entity has the component. Type Parameters Name Description T The data type of the chunk component. Remarks Always returns false for an entity that has been destroyed. HasComponent(Entity, ComponentType) Checks whether an entity has a specific type of component. Declaration public bool HasComponent(Entity entity, ComponentType type) Parameters Type Name Description Entity entity The Entity object. ComponentType type The data type of the component. Returns Type Description Boolean True, if the specified entity has the component. Remarks Always returns false for an entity that has been destroyed. HasComponent<T>(Entity) Checks whether an entity has a specific type of component. Declaration public bool HasComponent<T>(Entity entity) Parameters Type Name Description Entity entity The Entity object. Returns Type Description Boolean True, if the specified entity has the component. Type Parameters Name Description T The data type of the component. Remarks Always returns false for an entity that has been destroyed. Instantiate(Entity) Clones an entity. Declaration public Entity Instantiate(Entity srcEntity) Parameters Type Name Description Entity srcEntity The entity to clone Returns Type Description Entity The Entity object for the new entity. Remarks The new entity has the same archetype and component values as the original. If the source entity was converted from a prefab and thus has a LinkedEntityGroup component, the entire group is cloned as a new set of entities. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before creating the entity and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. Instantiate(Entity, NativeArray<Entity>) Makes multiple clones of an entity. Declaration public void Instantiate(Entity srcEntity, NativeArray<Entity> outputEntities) Parameters Type Name Description Entity srcEntity The entity to clone NativeArray < Entity > outputEntities An array to receive the Entity objects of the root entity in each clone. The length of this array determines the number of clones. Remarks The new entities have the same archetype and component values as the original. If the source entity has a LinkedEntityGroup component, the entire group is cloned as a new set of entities. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before creating these entities and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. LockChunk(NativeArray<ArchetypeChunk>) Locks a set of chunks. Declaration public void LockChunk(NativeArray<ArchetypeChunk> chunks) Parameters Type Name Description NativeArray < ArchetypeChunk > chunks An array of chunks to lock. See Also LockChunk(ArchetypeChunk) LockChunk(ArchetypeChunk) Protects a chunk, and the entities within it, from structural changes. Declaration public void LockChunk(ArchetypeChunk chunk) Parameters Type Name Description ArchetypeChunk chunk The chunk to lock. Remarks When locked, entities cannot be added to or removed from the chunk; components cannot be added to or removed from the entities in the chunk; the values of shared components cannot be changed; and entities in the chunk cannot be destroyed. You can change the values of components, other than shared components. Call UnlockChunk(ArchetypeChunk) to unlock the chunk. You can lock a chunk temporarily and then unlock it, or you can lock it for the lifespan of your application. For example, if you have a gameboard with a fixed number of tiles, you may want the entities representing those tiles in a specific order. Locking the chunk prevents the ECS framework from rearranging them once you have set the desired order. Use SwapComponents(ArchetypeChunk, Int32, ArchetypeChunk, Int32) to re-order entities in a chunk. MoveEntitiesFrom(out NativeArray<Entity>, EntityManager) Moves all entities managed by the specified EntityManager to the World of this EntityManager and fills an array with their Entity objects. Declaration public void MoveEntitiesFrom(out NativeArray<Entity> output, EntityManager srcEntities) Parameters Type Name Description NativeArray < Entity > output An array to receive the Entity objects of the transferred entities. EntityManager srcEntities The EntityManager whose entities are appropriated. Remarks After the move, the entities are managed by this EntityManager. Use the output array to make post-move changes to the transferred entities. Each world has one EntityManager, which manages all the entities in that world. This function allows you to transfer entities from one World to another. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before moving the entities and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. MoveEntitiesFrom(out NativeArray<Entity>, EntityManager, NativeArray<EntityRemapUtility.EntityRemapInfo>) Moves all entities managed by the specified EntityManager to the World of this EntityManager and fills an array with their Entity objects. Declaration public void MoveEntitiesFrom(out NativeArray<Entity> output, EntityManager srcEntities, NativeArray<EntityRemapUtility.EntityRemapInfo> entityRemapping) Parameters Type Name Description NativeArray < Entity > output An array to receive the Entity objects of the transferred entities. EntityManager srcEntities The EntityManager whose entities are appropriated. NativeArray < EntityRemapUtility.EntityRemapInfo > entityRemapping A set of entity transformations to make during the transfer. Remarks After the move, the entities are managed by this EntityManager. Use the output array to make post-move changes to the transferred entities. Each world has one EntityManager, which manages all the entities in that world. This function allows you to transfer entities from one World to another. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before moving the entities and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. Exceptions Type Condition ArgumentException MoveEntitiesFrom(out NativeArray<Entity>, EntityManager, EntityQuery, NativeArray<EntityRemapUtility.EntityRemapInfo>) Moves a selection of the entities managed by the specified EntityManager to the World of this EntityManager and fills an array with their Entity objects. Declaration public void MoveEntitiesFrom(out NativeArray<Entity> output, EntityManager srcEntities, EntityQuery filter, NativeArray<EntityRemapUtility.EntityRemapInfo> entityRemapping) Parameters Type Name Description NativeArray < Entity > output An array to receive the Entity objects of the transferred entities. EntityManager srcEntities The EntityManager whose entities are appropriated. EntityQuery filter A EntityQuery that defines the entities to move. Must be part of the source World. NativeArray < EntityRemapUtility.EntityRemapInfo > entityRemapping A set of entity transformations to make during the transfer. Remarks After the move, the entities are managed by this EntityManager. Use the output array to make post-move changes to the transferred entities. Each world has one EntityManager, which manages all the entities in that world. This function allows you to transfer entities from one World to another. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before moving the entities and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. Exceptions Type Condition ArgumentException MoveEntitiesFrom(EntityManager) Moves all entities managed by the specified EntityManager to the world of this EntityManager. Declaration public void MoveEntitiesFrom(EntityManager srcEntities) Parameters Type Name Description EntityManager srcEntities The EntityManager whose entities are appropriated. Remarks The entities moved are owned by this EntityManager. Each World has one EntityManager, which manages all the entities in that world. This function allows you to transfer entities from one World to another. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before moving the entities and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. MoveEntitiesFrom(EntityManager, NativeArray<EntityRemapUtility.EntityRemapInfo>) Moves all entities managed by the specified EntityManager to the World of this EntityManager. Declaration public void MoveEntitiesFrom(EntityManager srcEntities, NativeArray<EntityRemapUtility.EntityRemapInfo> entityRemapping) Parameters Type Name Description EntityManager srcEntities The EntityManager whose entities are appropriated. NativeArray < EntityRemapUtility.EntityRemapInfo > entityRemapping A set of entity transformations to make during the transfer. Remarks After the move, the entities are managed by this EntityManager. Each World has one EntityManager, which manages all the entities in that world. This function allows you to transfer entities from one world to another. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before moving the entities and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. Exceptions Type Condition ArgumentException Thrown if you attempt to transfer entities to the EntityManager that already owns them. MoveEntitiesFrom(EntityManager, EntityQuery, NativeArray<EntityRemapUtility.EntityRemapInfo>) Moves a selection of the entities managed by the specified EntityManager to the World of this EntityManager. Declaration public void MoveEntitiesFrom(EntityManager srcEntities, EntityQuery filter, NativeArray<EntityRemapUtility.EntityRemapInfo> entityRemapping) Parameters Type Name Description EntityManager srcEntities The EntityManager whose entities are appropriated. EntityQuery filter A EntityQuery that defines the entities to move. Must be part of the source World. NativeArray < EntityRemapUtility.EntityRemapInfo > entityRemapping A set of entity transformations to make during the transfer. Remarks After the move, the entities are managed by this EntityManager. Each world has one EntityManager, which manages all the entities in that world. This function allows you to transfer entities from one World to another. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before moving the entities and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. Exceptions Type Condition ArgumentException Thrown if the EntityQuery object used as the filter comes from a different world than the srcEntities EntityManager. PrepareForDeserialize() Prepares an empty World to load serialized entities. Declaration public void PrepareForDeserialize() RemoveChunkComponent<T>(Entity) Removes a chunk component from the specified entity. Returns false if the entity did not have the component. Declaration public bool RemoveChunkComponent<T>(Entity entity) Parameters Type Name Description Entity entity The entity. Returns Type Description Boolean Type Parameters Name Description T The type of component to remove. Remarks A chunk component is common to all entities in a chunk. Removing the chunk component from an entity changes that entity's archetype and results in the entity being moved to a different chunk (that does not have the removed component). Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before removing the component and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. RemoveChunkComponentData<T>(EntityQuery) Removes a component from the chunks identified by a EntityQuery. Declaration public void RemoveChunkComponentData<T>(EntityQuery entityQuery) Parameters Type Name Description EntityQuery entityQuery The EntityQuery identifying the chunks to modify. Type Parameters Name Description T The type of component to remove. Remarks A chunk component is common to all entities in a chunk. You can access a chunk IComponentData instance through either the chunk itself or through an entity stored in that chunk. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before removing the component and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. RemoveComponent(NativeArray<Entity>, ComponentType) Remove a component from a set of entities. Declaration public void RemoveComponent(NativeArray<Entity> entities, ComponentType componentType) Parameters Type Name Description NativeArray < Entity > entities An array of Entity objects. ComponentType componentType The type of component to remove. Remarks Removing a component changes an entity's archetype and results in the entity being moved to a different chunk. If an Entity object in the entities array refers to an entity that has been destroyed, this function throws an ArgumentError exception. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before creating these chunks and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. RemoveComponent(Entity, ComponentType) Removes a component from an entity. Returns false if the entity did not have the component. Declaration public bool RemoveComponent(Entity entity, ComponentType componentType) Parameters Type Name Description Entity entity The entity to modify. ComponentType componentType The type of component to remove. Returns Type Description Boolean Remarks Removing a component changes an entity's archetype and results in the entity being moved to a different chunk. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before removing the component and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. RemoveComponent(EntityQuery, ComponentType) Removes a component from a set of entities defined by a EntityQuery. Declaration public void RemoveComponent(EntityQuery entityQuery, ComponentType componentType) Parameters Type Name Description EntityQuery entityQuery The EntityQuery defining the entities to modify. ComponentType componentType The type of component to remove. Remarks Removing a component changes an entity's archetype and results in the entity being moved to a different chunk. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before removing the component and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. RemoveComponent(EntityQuery, ComponentTypes) Removes a set of components from a set of entities defined by a EntityQuery. Declaration public void RemoveComponent(EntityQuery entityQuery, ComponentTypes types) Parameters Type Name Description EntityQuery entityQuery The EntityQuery defining the entities to modify. ComponentTypes types The types of components to add. Remarks Removing a component changes an entity's archetype and results in the entity being moved to a different chunk. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before removing the component and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. RemoveComponent<T>(NativeArray<Entity>) Removes a component from a set of entities. Declaration public void RemoveComponent<T>(NativeArray<Entity> entities) Parameters Type Name Description NativeArray < Entity > entities An array identifying the entities to modify. Type Parameters Name Description T The type of component to remove. Remarks Removing a component changes an entity's archetype and results in the entity being moved to a different chunk. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before removing the component and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. RemoveComponent<T>(Entity) Removes a component from an entity. Returns false if the entity did not have the component. Declaration public bool RemoveComponent<T>(Entity entity) Parameters Type Name Description Entity entity The entity. Returns Type Description Boolean Type Parameters Name Description T The type of component to remove. Remarks Removing a component changes an entity's archetype and results in the entity being moved to a different chunk. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before removing the component and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. RemoveComponent<T>(EntityQuery) Removes a component from a set of entities defined by a EntityQuery. Declaration public void RemoveComponent<T>(EntityQuery entityQuery) Parameters Type Name Description EntityQuery entityQuery The EntityQuery defining the entities to modify. Type Parameters Name Description T The type of component to remove. Remarks Removing a component changes an entity's archetype and results in the entity being moved to a different chunk. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before removing the component and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. SetArchetype(Entity, EntityArchetype) Declaration public void SetArchetype(Entity entity, EntityArchetype archetype) Parameters Type Name Description Entity entity EntityArchetype archetype SetChunkComponentData<T>(ArchetypeChunk, T) Sets the value of a chunk component. Declaration public void SetChunkComponentData<T>(ArchetypeChunk chunk, T componentValue) where T : struct, IComponentData Parameters Type Name Description ArchetypeChunk chunk The chunk to modify. T componentValue The component data to set. Type Parameters Name Description T The component type. Remarks A chunk component is common to all entities in a chunk. You can access a chunk IComponentData instance through either the chunk itself or through an entity stored in that chunk. Exceptions Type Condition ArgumentException Thrown if the ArchetypeChunk object is invalid. SetComponentData<T>(Entity, T) Sets the value of a component of an entity. Declaration public void SetComponentData<T>(Entity entity, T componentData) where T : struct, IComponentData Parameters Type Name Description Entity entity The entity. T componentData The data to set. Type Parameters Name Description T The component type. Exceptions Type Condition ArgumentException Thrown if the component type has no fields. SetEnabled(Entity, Boolean) Enabled entities are processed by systems, disabled entities are not. Adds or removes the Disabled component. By default EntityQuery does not include entities containing the Disabled component. If the entity was converted from a prefab and thus has a LinkedEntityGroup component, the entire group will enabled or disabled. Declaration public void SetEnabled(Entity entity, bool enabled) Parameters Type Name Description Entity entity The entity to enable or disable Boolean enabled True if the entity should be enabled SetSharedComponentData<T>(Entity, T) Sets the shared component of an entity. Declaration public void SetSharedComponentData<T>(Entity entity, T componentData) where T : struct, ISharedComponentData Parameters Type Name Description Entity entity The entity T componentData A shared component object containing the values to set. Type Parameters Name Description T The shared component type. Remarks Changing a shared component value of an entity results in the entity being moved to a different chunk. The entity moves to a chunk with other entities that have the same shared component values. A new chunk is created if no chunk with the same archetype and shared component values currently exists. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before setting the component and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. SetSharedComponentData<T>(EntityQuery, T) Sets the shared component of all entities in the query. Declaration public void SetSharedComponentData<T>(EntityQuery query, T componentData) where T : struct, ISharedComponentData Parameters Type Name Description EntityQuery query T componentData A shared component object containing the values to set. Type Parameters Name Description T The shared component type. Remarks The component data stays in the same chunk, the internal shared component data indices will be adjusted. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before setting the component and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. SwapComponents(ArchetypeChunk, Int32, ArchetypeChunk, Int32) Swaps the components of two entities. Declaration public void SwapComponents(ArchetypeChunk leftChunk, int leftIndex, ArchetypeChunk rightChunk, int rightIndex) Parameters Type Name Description ArchetypeChunk leftChunk A chunk containing one of the entities to swap. Int32 leftIndex The index within the leftChunk of the entity and components to swap. ArchetypeChunk rightChunk The chunk containing the other entity to swap. This chunk can be the same as the leftChunk . It also does not need to be in the same World as leftChunk . Int32 rightIndex The index within the rightChunk of the entity and components to swap. Remarks The entities must have the same components. However, this function can swap the components of entities in different worlds, so they do not need to have identical archetype instances. Important: This function creates a sync point, which means that the EntityManager waits for all currently running Jobs to complete before swapping the components and no additional Jobs can start before the function is finished. A sync point can cause a drop in performance because the ECS framework may not be able to make use of the processing power of all available cores. UnlockChunk(NativeArray<ArchetypeChunk>) Unlocks a set of chunks. Declaration public void UnlockChunk(NativeArray<ArchetypeChunk> chunks) Parameters Type Name Description NativeArray < ArchetypeChunk > chunks An array of chunks to unlock. UnlockChunk(ArchetypeChunk) Unlocks a chunk Declaration public void UnlockChunk(ArchetypeChunk chunk) Parameters Type Name Description ArchetypeChunk chunk The chunk to unlock. Extension Methods EntityManagerManagedComponentExtensions.GetComponentData<T>(EntityManager, Entity) EntityManagerManagedComponentExtensions.SetComponentData<T>(EntityManager, Entity, T) EntityManagerManagedComponentExtensions.GetChunkComponentData<T>(EntityManager, ArchetypeChunk) EntityManagerManagedComponentExtensions.GetChunkComponentData<T>(EntityManager, Entity) EntityManagerManagedComponentExtensions.SetChunkComponentData<T>(EntityManager, ArchetypeChunk, T) EntityManagerManagedComponentExtensions.AddComponentData<T>(EntityManager, Entity, T) EntityManagerManagedComponentExtensions.AddChunkComponentData<T>(EntityManager, Entity) EntityManagerManagedComponentExtensions.AddChunkComponentData<T>(EntityManager, EntityQuery, T) EntityManagerExtensions.Instantiate(EntityManager, GameObject) EntityManagerExtensions.Instantiate(EntityManager, GameObject, NativeArray<Entity>) EntityManagerExtensions.GetComponentObject<T>(EntityManager, Entity)"
  },
  "api/Unity.Entities.EntityManager.EntityManagerDebug.html": {
    "href": "api/Unity.Entities.EntityManager.EntityManagerDebug.html",
    "title": "Class EntityManager.EntityManagerDebug | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class EntityManager.EntityManagerDebug Provides information and utility functions for debugging. Inheritance Object EntityManager.EntityManagerDebug Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class EntityManagerDebug Constructors EntityManagerDebug(EntityManager) Declaration public EntityManagerDebug(EntityManager entityManager) Parameters Type Name Description EntityManager entityManager Properties EntityCount Declaration public int EntityCount { get; } Property Value Type Description Int32 MemoryInitPattern Declaration public byte MemoryInitPattern { get; set; } Property Value Type Description Byte UseMemoryInitPattern Declaration public bool UseMemoryInitPattern { get; set; } Property Value Type Description Boolean Methods CheckInternalConsistency() Declaration [Conditional(\"ENABLE_UNITY_COLLECTIONS_CHECKS\")] public void CheckInternalConsistency() GetComponentBoxed(Entity, Type) Declaration public object GetComponentBoxed(Entity entity, Type type) Parameters Type Name Description Entity entity Type type Returns Type Description Object GetComponentBoxed(Entity, ComponentType) Declaration public object GetComponentBoxed(Entity entity, ComponentType type) Parameters Type Name Description Entity entity ComponentType type Returns Type Description Object GetEntityInfo(Entity) Declaration public string GetEntityInfo(Entity entity) Parameters Type Name Description Entity entity Returns Type Description String IsSharedComponentManagerEmpty() Declaration public bool IsSharedComponentManagerEmpty() Returns Type Description Boolean LogEntityInfo(Entity) Declaration public void LogEntityInfo(Entity entity) Parameters Type Name Description Entity entity PoisonUnusedDataInAllChunks(EntityArchetype, Byte) Declaration public void PoisonUnusedDataInAllChunks(EntityArchetype archetype, byte value) Parameters Type Name Description EntityArchetype archetype Byte value SetGlobalSystemVersion(UInt32) Declaration public void SetGlobalSystemVersion(uint version) Parameters Type Name Description UInt32 version"
  },
  "api/Unity.Entities.EndSimulationEntityCommandBufferSystem.html": {
    "href": "api/Unity.Entities.EndSimulationEntityCommandBufferSystem.html",
    "title": "Class EndSimulationEntityCommandBufferSystem | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class EndSimulationEntityCommandBufferSystem Inheritance Object ComponentSystemBase ComponentSystem EntityCommandBufferSystem EndSimulationEntityCommandBufferSystem Inherited Members EntityCommandBufferSystem.CreateCommandBuffer() EntityCommandBufferSystem.AddJobHandleForProducer(JobHandle) EntityCommandBufferSystem.OnCreate() EntityCommandBufferSystem.OnDestroy() EntityCommandBufferSystem.OnUpdate() ComponentSystem.PostUpdateCommands ComponentSystem.InitEntityQueryCache(Int32) ComponentSystem.Entities ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnDestroyManager() ComponentSystemBase.OnCreateManager() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.Update() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetArchetypeChunkComponentType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkComponentTypeDynamic(ComponentType) ComponentSystemBase.GetArchetypeChunkBufferType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkSharedComponentType<T>() ComponentSystemBase.GetArchetypeChunkEntityType() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [UpdateInGroup(typeof(SimulationSystemGroup))] public class EndSimulationEntityCommandBufferSystem : EntityCommandBufferSystem Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Entities.EndInitializationEntityCommandBufferSystem.html": {
    "href": "api/Unity.Entities.EndInitializationEntityCommandBufferSystem.html",
    "title": "Class EndInitializationEntityCommandBufferSystem | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class EndInitializationEntityCommandBufferSystem Inheritance Object ComponentSystemBase ComponentSystem EntityCommandBufferSystem EndInitializationEntityCommandBufferSystem Inherited Members EntityCommandBufferSystem.CreateCommandBuffer() EntityCommandBufferSystem.AddJobHandleForProducer(JobHandle) EntityCommandBufferSystem.OnCreate() EntityCommandBufferSystem.OnDestroy() EntityCommandBufferSystem.OnUpdate() ComponentSystem.PostUpdateCommands ComponentSystem.InitEntityQueryCache(Int32) ComponentSystem.Entities ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnDestroyManager() ComponentSystemBase.OnCreateManager() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.Update() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetArchetypeChunkComponentType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkComponentTypeDynamic(ComponentType) ComponentSystemBase.GetArchetypeChunkBufferType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkSharedComponentType<T>() ComponentSystemBase.GetArchetypeChunkEntityType() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [UpdateInGroup(typeof(InitializationSystemGroup))] public class EndInitializationEntityCommandBufferSystem : EntityCommandBufferSystem Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Entities.EditorRenderData.html": {
    "href": "api/Unity.Entities.EditorRenderData.html",
    "title": "Struct EditorRenderData | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct EditorRenderData Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct EditorRenderData : ISharedComponentData, IEquatable<EditorRenderData> Fields LiveLinkEditGameViewMask Declaration public const ulong LiveLinkEditGameViewMask = 576460752303423488UL Field Value Type Description UInt64 LiveLinkEditSceneViewMask Declaration public const ulong LiveLinkEditSceneViewMask = 1152921504606846976UL Field Value Type Description UInt64 PickableObject Declaration public GameObject PickableObject Field Value Type Description GameObject SceneCullingMask Declaration public ulong SceneCullingMask Field Value Type Description UInt64 Methods Equals(EditorRenderData) Declaration public bool Equals(EditorRenderData other) Parameters Type Name Description EditorRenderData other Returns Type Description Boolean GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode()"
  },
  "api/Unity.Entities.Editor.html": {
    "href": "api/Unity.Entities.Editor.html",
    "title": "Namespace Unity.Entities.Editor | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Namespace Unity.Entities.Editor Classes ComponentDataProxyBaseEditor DynamicBufferProxyBaseEditor EntitySelectionProxy ExtraTypesProvider GameObjectEntityEditor Delegates EntitySelectionProxy.EntityControlSelectButtonHandler"
  },
  "api/Unity.Entities.DynamicBuffer-1.html": {
    "href": "api/Unity.Entities.DynamicBuffer-1.html",
    "title": "Struct DynamicBuffer<T> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct DynamicBuffer<T> An array-like data structure that can be used as a component. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct DynamicBuffer<T> : IEnumerable<T>, IEnumerable where T : struct Type Parameters Name Description T The data type stored in the buffer. Must be a value type. Examples [InternalBufferCapacity(8)] public struct FloatBufferElement : IBufferElementData { // Actual value each buffer element will store. public float Value; // The following implicit conversions are optional, but can be convenient. public static implicit operator float(FloatBufferElement e) { return e.Value; } public static implicit operator FloatBufferElement(float e) { return new FloatBufferElement {Value = e}; } } public class DynamicBufferExample : ComponentSystem { protected override void OnUpdate() { float sum = 0; Entities.ForEach((DynamicBuffer<FloatBufferElement> buffer) => { foreach (var element in buffer.Reinterpret<float>()) { sum += element; } }); Debug.Log(\"Sum of all buffers: \" + sum); } } Properties Capacity The number of elements the buffer can hold. Declaration public int Capacity { get; } Property Value Type Description Int32 IsCreated Whether the memory for this dynamic buffer has been allocated. Declaration public bool IsCreated { get; } Property Value Type Description Boolean Item[Int32] Array-like indexing operator. Declaration public T this[int index] { get; set; } Parameters Type Name Description Int32 index The zero-based index. Property Value Type Description T Examples for (int i = 0; i < buffer.Length; i++) { buffer[i] = i * i; } Length The number of elements the buffer holds. Declaration public int Length { get; } Property Value Type Description Int32 Examples for (int i = 0; i < buffer.Length; i++) { buffer[i] = i * i; } Methods Add(T) Adds an element to the end of the buffer, resizing as necessary. Declaration public int Add(T elem) Parameters Type Name Description T elem The element to add to the buffer. Returns Type Description Int32 The new length of the buffer. Remarks The buffer is resized if it has no additional capacity. Examples buffer.Add(5); AddRange(NativeArray<T>) Adds all the elements from newElems to the end of the buffer, resizing as necessary. Declaration public void AddRange(NativeArray<T> newElems) Parameters Type Name Description NativeArray <T> newElems The native array of elements to insert. Remarks The buffer is resized if it has no additional capacity. Examples int[] source = {1, 2, 3, 4, 5}; NativeArray<int> newElements = new NativeArray<int>(source, Allocator.Persistent); buffer.AddRange(newElements); AsNativeArray() Return a native array that aliases the original buffer contents. Declaration public NativeArray<T> AsNativeArray() Returns Type Description NativeArray <T> Remarks You can only access the native array as long as the the buffer memory has not been reallocated. Several dynamic buffer operations, such as Add(T) and TrimExcess() can result in buffer reallocation. Examples int[] intArray = {1, 2, 3, 4, 5}; NativeArray<int>.Copy(intArray, buffer.AsNativeArray()); Clear() Sets the buffer length to zero. Declaration public void Clear() Remarks The capacity of the buffer remains unchanged. Buffer memory is not overwritten. Examples buffer.Clear(); CopyFrom(T[]) Copies all the elements from an array. Declaration public void CopyFrom(T[] v) Parameters Type Name Description T[] v A C# array containing the elements to copy. Examples int[] integerArray = {1, 2, 3, 4, 5}; buffer.CopyFrom(integerArray); Exceptions Type Condition ArgumentNullException CopyFrom(NativeArray<T>) Copies all the elements from the specified native array into this dynamic buffer. Declaration public void CopyFrom(NativeArray<T> v) Parameters Type Name Description NativeArray <T> v The native array containing the elements to copy. Examples int[] sourceArray = {1, 2, 3, 4, 5}; NativeArray<int> nativeArray = new NativeArray<int>(source, Allocator.Persistent); buffer.CopyFrom(nativeArray); CopyFrom(DynamicBuffer<T>) Copies all the elements from another dynamic buffer. Declaration public void CopyFrom(DynamicBuffer<T> v) Parameters Type Name Description DynamicBuffer <T> v The dynamic buffer containing the elements to copy. Examples buffer.CopyFrom(secondBuffer); GetEnumerator() Provides an enumerator for iterating over the buffer elements. Declaration public NativeArray<T>.Enumerator GetEnumerator() Returns Type Description NativeArray.Enumerator <> The enumerator. Examples foreach (var element in buffer) { //Use element... } GetUnsafePtr() Gets an langword_csharp_unsafe pointer to the contents of the buffer. Declaration public void *GetUnsafePtr() Returns Type Description Void * A typed, unsafe pointer to the first element in the buffer. Remarks This function can only be called in unsafe code contexts. Insert(Int32, T) Inserts an element at the specified index, resizing as necessary. Declaration public void Insert(int index, T elem) Parameters Type Name Description Int32 index The position at which to insert the new element. T elem The element to add to the buffer. Remarks The buffer is resized if it has no additional capacity. Examples if (insertionIndex < buffer.Length) buffer.Insert(insertionIndex, 6); Reinterpret<U>() Returns a dynamic buffer of a different type, pointing to the same buffer memory. Declaration public DynamicBuffer<U> Reinterpret<U>() where U : struct Returns Type Description DynamicBuffer <U> A dynamic buffer of the reinterpreted type. Type Parameters Name Description U The reinterpreted type. Remarks No memory modification occurs. The reinterpreted type must be the same size in memory as the original type. Examples Entities.ForEach((DynamicBuffer<FloatBufferElement> buffer) => { DynamicBuffer<float> floatBuffer = buffer.Reinterpret<float>(); for (int i = 0; i < floatBuffer.Length; i++) { floatBuffer[i] = i * 1.2f; } }); Exceptions Type Condition InvalidOperationException If the reinterpreted type is a different size than the original. RemoveAt(Int32) Removes the element at the specified index. Declaration public void RemoveAt(int index) Parameters Type Name Description Int32 index The index of the element to remove. Examples if (insertionIndex < buffer.Length) buffer.RemoveAt(insertionIndex); RemoveRange(Int32, Int32) Removes the specified number of elements, starting with the element at the specified index. Declaration public void RemoveRange(int index, int count) Parameters Type Name Description Int32 index The first element to remove. Int32 count How many elements tot remove. Remarks The buffer capacity remains unchanged. Examples buffer.RemoveRange(start, 5); Reserve(Int32) Increases the buffer capacity without increasing its length. Declaration public void Reserve(int length) Parameters Type Name Description Int32 length The new buffer capacity. Remarks If length is greater than the current Capacity of this buffer and greater than the capacity reserved with InternalBufferCapacityAttribute , this function allocates a new memory block and copies the current buffer to it. The number of elements in the buffer remains unchanged. Examples buffer.Reserve(buffer.Capacity + 10); ResizeUninitialized(Int32) Increases the buffer capacity and length. Declaration public void ResizeUninitialized(int length) Parameters Type Name Description Int32 length The new length of the buffer. Remarks If length is less than the current length of the buffer, the length of the buffer is reduced while the capacity remains unchanged. Examples buffer.ResizeUninitialized(buffer.Length + 10); ToNativeArray(Allocator) Copies the buffer into a new native array. Declaration public NativeArray<T> ToNativeArray(Allocator allocator) Parameters Type Name Description Allocator allocator The type of memory allocation to use when creating the native array. Returns Type Description NativeArray <T> A native array containing copies of the buffer elements. Examples NativeArray<int> copy = buffer.ToNativeArray(Allocator.Persistent); TrimExcess() Removes any excess capacity in the buffer. Declaration public void TrimExcess() Remarks Sets the buffer capacity to the current length. If the buffer memory size changes, the current contents of the buffer are copied to a new block of memory and the old memory is freed. If the buffer now fits in the space in the chunk reserved with InternalBufferCapacityAttribute , then the buffer contents are moved to the chunk. Examples if (buffer.Capacity > buffer.Length) buffer.TrimExcess();"
  },
  "api/Unity.Entities.DisallowRefReturnCrossingThisAttribute.html": {
    "href": "api/Unity.Entities.DisallowRefReturnCrossingThisAttribute.html",
    "title": "Class DisallowRefReturnCrossingThisAttribute | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class DisallowRefReturnCrossingThisAttribute What is this : Attribute signaling that ref returned values, of a type that has this attribute, cannot intersect with calls to methods that also have this attribute. Motivation(s): ref returns of values that are backed by native memory (unsafe), like IComponentData in ecs chunks, can have the referenced memory invalidated by certain methods. A way is needed to detect these situations a compilation time to prevent accessing invalidated references. Notes: This attribute is used/feeds a Static Analyzer at compilation time. Attribute transfers with aggragations: struct A has this attribute, struct B has a field of type A; both A and B are concidered to have the attribute. Inheritance Object Attribute DisallowRefReturnCrossingThisAttribute Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [AttributeUsage(AttributeTargets.Struct | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Interface)] public class DisallowRefReturnCrossingThisAttribute : Attribute, _Attribute"
  },
  "api/Unity.Entities.Disabled.html": {
    "href": "api/Unity.Entities.Disabled.html",
    "title": "Struct Disabled | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct Disabled Disables the entity. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct Disabled : IComponentData Remarks By default, an EntityQuery ignores all entities that have a Disabled component. You can override this default behavior by setting the IncludeDisabled flag of the EntityQueryDesc object used to create the query. When using the EntityQueryBuilder class in a ComponentSystem, set this flag by calling the With(EntityQueryOptions) function."
  },
  "api/Unity.Entities.UpdateBeforeAttribute.html": {
    "href": "api/Unity.Entities.UpdateBeforeAttribute.html",
    "title": "Class UpdateBeforeAttribute | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class UpdateBeforeAttribute Inheritance Object Attribute UpdateBeforeAttribute Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)] public class UpdateBeforeAttribute : Attribute, _Attribute Constructors UpdateBeforeAttribute(Type) Declaration public UpdateBeforeAttribute(Type systemType) Parameters Type Name Description Type systemType Properties SystemType Declaration public Type SystemType { get; } Property Value Type Description Type"
  },
  "api/Unity.Entities.UpdateAfterAttribute.html": {
    "href": "api/Unity.Entities.UpdateAfterAttribute.html",
    "title": "Class UpdateAfterAttribute | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class UpdateAfterAttribute Inheritance Object Attribute UpdateAfterAttribute Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)] public class UpdateAfterAttribute : Attribute, _Attribute Constructors UpdateAfterAttribute(Type) Declaration public UpdateAfterAttribute(Type systemType) Parameters Type Name Description Type systemType Properties SystemType Declaration public Type SystemType { get; } Property Value Type Description Type"
  },
  "api/Unity.Entities.UniversalDelegates.html": {
    "href": "api/Unity.Entities.UniversalDelegates.html",
    "title": "Namespace Unity.Entities.UniversalDelegates | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Namespace Unity.Entities.UniversalDelegates Delegates I<T0> II<T0, T1> III<T0, T1, T2> IIII<T0, T1, T2, T3> IIIII<T0, T1, T2, T3, T4> IIIIII<T0, T1, T2, T3, T4, T5> IIIIIII<T0, T1, T2, T3, T4, T5, T6> IIIIIIII<T0, T1, T2, T3, T4, T5, T6, T7> R<T0> RI<T0, T1> RII<T0, T1, T2> RIII<T0, T1, T2, T3> RIIII<T0, T1, T2, T3, T4> RIIIII<T0, T1, T2, T3, T4, T5> RIIIIII<T0, T1, T2, T3, T4, T5, T6> RIIIIIII<T0, T1, T2, T3, T4, T5, T6, T7> RR<T0, T1> RRI<T0, T1, T2> RRII<T0, T1, T2, T3> RRIII<T0, T1, T2, T3, T4> RRIIII<T0, T1, T2, T3, T4, T5> RRIIIII<T0, T1, T2, T3, T4, T5, T6> RRIIIIII<T0, T1, T2, T3, T4, T5, T6, T7> RRR<T0, T1, T2> RRRI<T0, T1, T2, T3> RRRII<T0, T1, T2, T3, T4> RRRIII<T0, T1, T2, T3, T4, T5> RRRIIII<T0, T1, T2, T3, T4, T5, T6> RRRIIIII<T0, T1, T2, T3, T4, T5, T6, T7> RRRR<T0, T1, T2, T3> RRRRI<T0, T1, T2, T3, T4> RRRRII<T0, T1, T2, T3, T4, T5> RRRRIII<T0, T1, T2, T3, T4, T5, T6> RRRRIIII<T0, T1, T2, T3, T4, T5, T6, T7> RRRRR<T0, T1, T2, T3, T4> RRRRRI<T0, T1, T2, T3, T4, T5> RRRRRII<T0, T1, T2, T3, T4, T5, T6> RRRRRIII<T0, T1, T2, T3, T4, T5, T6, T7> RRRRRR<T0, T1, T2, T3, T4, T5> RRRRRRI<T0, T1, T2, T3, T4, T5, T6> RRRRRRII<T0, T1, T2, T3, T4, T5, T6, T7> RRRRRRR<T0, T1, T2, T3, T4, T5, T6> RRRRRRRI<T0, T1, T2, T3, T4, T5, T6, T7> RRRRRRRR<T0, T1, T2, T3, T4, T5, T6, T7> V<T0> VI<T0, T1> VII<T0, T1, T2> VIII<T0, T1, T2, T3> VIIII<T0, T1, T2, T3, T4> VIIIII<T0, T1, T2, T3, T4, T5> VIIIIII<T0, T1, T2, T3, T4, T5, T6> VIIIIIII<T0, T1, T2, T3, T4, T5, T6, T7> VR<T0, T1> VRI<T0, T1, T2> VRII<T0, T1, T2, T3> VRIII<T0, T1, T2, T3, T4> VRIIII<T0, T1, T2, T3, T4, T5> VRIIIII<T0, T1, T2, T3, T4, T5, T6> VRIIIIII<T0, T1, T2, T3, T4, T5, T6, T7> VRR<T0, T1, T2> VRRI<T0, T1, T2, T3> VRRII<T0, T1, T2, T3, T4> VRRIII<T0, T1, T2, T3, T4, T5> VRRIIII<T0, T1, T2, T3, T4, T5, T6> VRRIIIII<T0, T1, T2, T3, T4, T5, T6, T7> VRRR<T0, T1, T2, T3> VRRRI<T0, T1, T2, T3, T4> VRRRII<T0, T1, T2, T3, T4, T5> VRRRIII<T0, T1, T2, T3, T4, T5, T6> VRRRIIII<T0, T1, T2, T3, T4, T5, T6, T7> VRRRR<T0, T1, T2, T3, T4> VRRRRI<T0, T1, T2, T3, T4, T5> VRRRRII<T0, T1, T2, T3, T4, T5, T6> VRRRRIII<T0, T1, T2, T3, T4, T5, T6, T7> VRRRRR<T0, T1, T2, T3, T4, T5> VRRRRRI<T0, T1, T2, T3, T4, T5, T6> VRRRRRII<T0, T1, T2, T3, T4, T5, T6, T7> VRRRRRR<T0, T1, T2, T3, T4, T5, T6> VRRRRRRI<T0, T1, T2, T3, T4, T5, T6, T7> VRRRRRRR<T0, T1, T2, T3, T4, T5, T6, T7> VV<T0, T1> VVI<T0, T1, T2> VVII<T0, T1, T2, T3> VVIII<T0, T1, T2, T3, T4> VVIIII<T0, T1, T2, T3, T4, T5> VVIIIII<T0, T1, T2, T3, T4, T5, T6> VVIIIIII<T0, T1, T2, T3, T4, T5, T6, T7> VVR<T0, T1, T2> VVRI<T0, T1, T2, T3> VVRII<T0, T1, T2, T3, T4> VVRIII<T0, T1, T2, T3, T4, T5> VVRIIII<T0, T1, T2, T3, T4, T5, T6> VVRIIIII<T0, T1, T2, T3, T4, T5, T6, T7> VVRR<T0, T1, T2, T3> VVRRI<T0, T1, T2, T3, T4> VVRRII<T0, T1, T2, T3, T4, T5> VVRRIII<T0, T1, T2, T3, T4, T5, T6> VVRRIIII<T0, T1, T2, T3, T4, T5, T6, T7> VVRRR<T0, T1, T2, T3, T4> VVRRRI<T0, T1, T2, T3, T4, T5> VVRRRII<T0, T1, T2, T3, T4, T5, T6> VVRRRIII<T0, T1, T2, T3, T4, T5, T6, T7> VVRRRR<T0, T1, T2, T3, T4, T5> VVRRRRI<T0, T1, T2, T3, T4, T5, T6> VVRRRRII<T0, T1, T2, T3, T4, T5, T6, T7> VVRRRRR<T0, T1, T2, T3, T4, T5, T6> VVRRRRRI<T0, T1, T2, T3, T4, T5, T6, T7> VVRRRRRR<T0, T1, T2, T3, T4, T5, T6, T7> VVV<T0, T1, T2> VVVI<T0, T1, T2, T3> VVVII<T0, T1, T2, T3, T4> VVVIII<T0, T1, T2, T3, T4, T5> VVVIIII<T0, T1, T2, T3, T4, T5, T6> VVVIIIII<T0, T1, T2, T3, T4, T5, T6, T7> VVVR<T0, T1, T2, T3> VVVRI<T0, T1, T2, T3, T4> VVVRII<T0, T1, T2, T3, T4, T5> VVVRIII<T0, T1, T2, T3, T4, T5, T6> VVVRIIII<T0, T1, T2, T3, T4, T5, T6, T7> VVVRR<T0, T1, T2, T3, T4> VVVRRI<T0, T1, T2, T3, T4, T5> VVVRRII<T0, T1, T2, T3, T4, T5, T6> VVVRRIII<T0, T1, T2, T3, T4, T5, T6, T7> VVVRRR<T0, T1, T2, T3, T4, T5> VVVRRRI<T0, T1, T2, T3, T4, T5, T6> VVVRRRII<T0, T1, T2, T3, T4, T5, T6, T7> VVVRRRR<T0, T1, T2, T3, T4, T5, T6> VVVRRRRI<T0, T1, T2, T3, T4, T5, T6, T7> VVVRRRRR<T0, T1, T2, T3, T4, T5, T6, T7> VVVV<T0, T1, T2, T3> VVVVI<T0, T1, T2, T3, T4> VVVVII<T0, T1, T2, T3, T4, T5> VVVVIII<T0, T1, T2, T3, T4, T5, T6> VVVVIIII<T0, T1, T2, T3, T4, T5, T6, T7> VVVVR<T0, T1, T2, T3, T4> VVVVRI<T0, T1, T2, T3, T4, T5> VVVVRII<T0, T1, T2, T3, T4, T5, T6> VVVVRIII<T0, T1, T2, T3, T4, T5, T6, T7> VVVVRR<T0, T1, T2, T3, T4, T5> VVVVRRI<T0, T1, T2, T3, T4, T5, T6> VVVVRRII<T0, T1, T2, T3, T4, T5, T6, T7> VVVVRRR<T0, T1, T2, T3, T4, T5, T6> VVVVRRRI<T0, T1, T2, T3, T4, T5, T6, T7> VVVVRRRR<T0, T1, T2, T3, T4, T5, T6, T7> VVVVV<T0, T1, T2, T3, T4> VVVVVI<T0, T1, T2, T3, T4, T5> VVVVVII<T0, T1, T2, T3, T4, T5, T6> VVVVVIII<T0, T1, T2, T3, T4, T5, T6, T7> VVVVVR<T0, T1, T2, T3, T4, T5> VVVVVRI<T0, T1, T2, T3, T4, T5, T6> VVVVVRII<T0, T1, T2, T3, T4, T5, T6, T7> VVVVVRR<T0, T1, T2, T3, T4, T5, T6> VVVVVRRI<T0, T1, T2, T3, T4, T5, T6, T7> VVVVVRRR<T0, T1, T2, T3, T4, T5, T6, T7> VVVVVV<T0, T1, T2, T3, T4, T5> VVVVVVI<T0, T1, T2, T3, T4, T5, T6> VVVVVVII<T0, T1, T2, T3, T4, T5, T6, T7> VVVVVVR<T0, T1, T2, T3, T4, T5, T6> VVVVVVRI<T0, T1, T2, T3, T4, T5, T6, T7> VVVVVVRR<T0, T1, T2, T3, T4, T5, T6, T7> VVVVVVV<T0, T1, T2, T3, T4, T5, T6> VVVVVVVI<T0, T1, T2, T3, T4, T5, T6, T7> VVVVVVVR<T0, T1, T2, T3, T4, T5, T6, T7> VVVVVVVV<T0, T1, T2, T3, T4, T5, T6, T7>"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVVVVV-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVVVVV-8.html",
    "title": "Delegate VVVVVVVV<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VVVVVVVV<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVVVVV<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, T6 t6, T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VRRRRR-6.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VRRRRR-6.html",
    "title": "Delegate VRRRRR<T0, T1, T2, T3, T4, T5> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VRRRRR<T0, T1, T2, T3, T4, T5> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VRRRRR<T0, T1, T2, T3, T4, T5>(T0 t0, ref T1 t1, ref T2 t2, ref T3 t3, ref T4 t4, ref T5 t5); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 Type Parameters Name Description T0 T1 T2 T3 T4 T5"
  },
  "api/Unity.Entities.UniversalDelegates.VRRRRIII-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VRRRRIII-8.html",
    "title": "Delegate VRRRRIII<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VRRRRIII<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VRRRRIII<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, ref T1 t1, ref T2 t2, ref T3 t3, ref T4 t4, in T5 t5, in T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Transforms.RotationEulerSystem.html": {
    "href": "api/Unity.Transforms.RotationEulerSystem.html",
    "title": "Class RotationEulerSystem | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class RotationEulerSystem Inheritance Object ComponentSystemBase JobComponentSystem RotationEulerSystem EndFrameRotationEulerSystem Inherited Members JobComponentSystem.Entities JobComponentSystem.Job JobComponentSystem.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnDestroyManager() ComponentSystemBase.OnCreateManager() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.Update() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetArchetypeChunkComponentType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkComponentTypeDynamic(ComponentType) ComponentSystemBase.GetArchetypeChunkBufferType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkSharedComponentType<T>() ComponentSystemBase.GetArchetypeChunkEntityType() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public abstract class RotationEulerSystem : JobComponentSystem Methods OnCreate() Declaration protected override void OnCreate() Overrides ComponentSystemBase.OnCreate() OnUpdate(JobHandle) Declaration protected override JobHandle OnUpdate(JobHandle inputDependencies) Parameters Type Name Description JobHandle inputDependencies Returns Type Description JobHandle Overrides JobComponentSystem.OnUpdate(JobHandle) Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Transforms.Rotation.html": {
    "href": "api/Unity.Transforms.Rotation.html",
    "title": "Struct Rotation | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct Rotation Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] [WriteGroup(typeof(LocalToWorld))] [WriteGroup(typeof(LocalToParent))] [WriteGroup(typeof(CompositeRotation))] public struct Rotation : IComponentData Fields Value Declaration public quaternion Value Field Value Type Description quaternion"
  },
  "api/Unity.Transforms.PreviousParent.html": {
    "href": "api/Unity.Transforms.PreviousParent.html",
    "title": "Struct PreviousParent | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct PreviousParent Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] public struct PreviousParent : ISystemStateComponentData, IComponentData Fields Value Declaration public Entity Value Field Value Type Description Entity"
  },
  "api/Unity.Entities.Serialization.BinaryReader.html": {
    "href": "api/Unity.Entities.Serialization.BinaryReader.html",
    "title": "Interface BinaryReader | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Interface BinaryReader Namespace : Unity.Entities.Serialization <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface BinaryReader : IDisposable Methods ReadBytes(Void*, Int32) Declaration void ReadBytes(void *data, int bytes) Parameters Type Name Description Void * data Int32 bytes Extension Methods BlobAssetSerializeExtensions.Read<T>(BinaryReader) BinaryReaderExtensions.ReadByte(BinaryReader) BinaryReaderExtensions.ReadInt(BinaryReader) BinaryReaderExtensions.ReadULong(BinaryReader) BinaryReaderExtensions.ReadBytes(BinaryReader, NativeArray<Byte>, Int32, Int32) BinaryReaderExtensions.ReadArray<T>(BinaryReader, NativeArray<T>, Int32)"
  },
  "api/Unity.Entities.Editor.GameObjectEntityEditor.html": {
    "href": "api/Unity.Entities.Editor.GameObjectEntityEditor.html",
    "title": "Class GameObjectEntityEditor | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class GameObjectEntityEditor Inheritance Object GameObjectEntityEditor Namespace : Unity.Entities.Editor <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class GameObjectEntityEditor : UnityEditor.Editor Methods OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Unity.Entities.Editor.ExtraTypesProvider.html": {
    "href": "api/Unity.Entities.Editor.ExtraTypesProvider.html",
    "title": "Class ExtraTypesProvider | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class ExtraTypesProvider Inheritance Object ExtraTypesProvider Namespace : Unity.Entities.Editor <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public sealed class ExtraTypesProvider"
  },
  "api/Unity.Entities.Editor.EntitySelectionProxy.html": {
    "href": "api/Unity.Entities.Editor.EntitySelectionProxy.html",
    "title": "Class EntitySelectionProxy | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class EntitySelectionProxy Inheritance Object EntitySelectionProxy Namespace : Unity.Entities.Editor <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class EntitySelectionProxy : ScriptableObject Properties Container Declaration public EntityContainer Container { get; } Property Value Type Description EntityContainer Entity Declaration public Entity Entity { get; } Property Value Type Description Entity EntityManager Declaration public EntityManager EntityManager { get; } Property Value Type Description EntityManager Exists Declaration public bool Exists { get; } Property Value Type Description Boolean World Declaration public World World { get; } Property Value Type Description World Methods OnEntityControlSelectButton(World, Entity) Declaration public void OnEntityControlSelectButton(World world, Entity entity) Parameters Type Name Description World world Entity entity SetEntity(World, Entity) Declaration public void SetEntity(World world, Entity entity) Parameters Type Name Description World world Entity entity Events EntityControlSelectButton Declaration public event EntitySelectionProxy.EntityControlSelectButtonHandler EntityControlSelectButton Event Type Type Description EntitySelectionProxy.EntityControlSelectButtonHandler"
  },
  "api/Unity.Entities.Editor.EntitySelectionProxy.EntityControlSelectButtonHandler.html": {
    "href": "api/Unity.Entities.Editor.EntitySelectionProxy.EntityControlSelectButtonHandler.html",
    "title": "Delegate EntitySelectionProxy.EntityControlSelectButtonHandler | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate EntitySelectionProxy.EntityControlSelectButtonHandler Namespace : Unity.Entities.Editor <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void EntityControlSelectButtonHandler(World world, Entity entity); Parameters Type Name Description World world Entity entity"
  },
  "api/Unity.Entities.ConvertToEntitySystem.html": {
    "href": "api/Unity.Entities.ConvertToEntitySystem.html",
    "title": "Class ConvertToEntitySystem | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class ConvertToEntitySystem Inheritance Object ComponentSystemBase ComponentSystem ConvertToEntitySystem Inherited Members ComponentSystem.PostUpdateCommands ComponentSystem.InitEntityQueryCache(Int32) ComponentSystem.Entities ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnDestroyManager() ComponentSystemBase.OnCreateManager() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.Update() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetArchetypeChunkComponentType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkComponentTypeDynamic(ComponentType) ComponentSystemBase.GetArchetypeChunkBufferType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkSharedComponentType<T>() ComponentSystemBase.GetArchetypeChunkEntityType() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [UpdateInGroup(typeof(InitializationSystemGroup))] public class ConvertToEntitySystem : ComponentSystem Properties BlobAssetStore Declaration public BlobAssetStore BlobAssetStore { get; } Property Value Type Description BlobAssetStore Methods AddToBeConverted(World, ConvertToEntity) Declaration public void AddToBeConverted(World world, ConvertToEntity convertToEntity) Parameters Type Name Description World world ConvertToEntity convertToEntity OnCreate() Declaration protected override void OnCreate() Overrides ComponentSystemBase.OnCreate() OnDestroy() Declaration protected override void OnDestroy() Overrides ComponentSystemBase.OnDestroy() OnUpdate() Declaration protected override void OnUpdate() Overrides ComponentSystem.OnUpdate() Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Entities.ConvertToEntity.html": {
    "href": "api/Unity.Entities.ConvertToEntity.html",
    "title": "Class ConvertToEntity | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class ConvertToEntity Inheritance Object ConvertToEntity Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class ConvertToEntity : MonoBehaviour Fields ConversionMode Declaration public ConvertToEntity.Mode ConversionMode Field Value Type Description ConvertToEntity.Mode"
  },
  "api/Unity.Scenes.LiveLinkMode.html": {
    "href": "api/Unity.Scenes.LiveLinkMode.html",
    "title": "Enum LiveLinkMode | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Enum LiveLinkMode Namespace : Unity.Scenes <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public enum LiveLinkMode Fields Name Description Disabled LiveConvertGameView LiveConvertSceneView"
  },
  "api/Unity.Scenes.Editor.html": {
    "href": "api/Unity.Scenes.Editor.html",
    "title": "Namespace Unity.Scenes.Editor | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Namespace Unity.Scenes.Editor Classes EditorEntityScenes"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVVVRI-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVVVRI-8.html",
    "title": "Delegate VVVVVVRI<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VVVVVVRI<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVVVRI<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, ref T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVVVR-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVVVR-7.html",
    "title": "Delegate VVVVVVR<T0, T1, T2, T3, T4, T5, T6> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VVVVVVR<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVVVR<T0, T1, T2, T3, T4, T5, T6>(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, ref T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVVVII-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVVVII-8.html",
    "title": "Delegate VVVVVVII<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VVVVVVII<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVVVII<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, in T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVVVI-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVVVI-7.html",
    "title": "Delegate VVVVVVI<T0, T1, T2, T3, T4, T5, T6> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VVVVVVI<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVVVI<T0, T1, T2, T3, T4, T5, T6>(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, in T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVVV-6.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVVV-6.html",
    "title": "Delegate VVVVVV<T0, T1, T2, T3, T4, T5> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VVVVVV<T0, T1, T2, T3, T4, T5> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVVV<T0, T1, T2, T3, T4, T5>(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 Type Parameters Name Description T0 T1 T2 T3 T4 T5"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVVRRR-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVVRRR-8.html",
    "title": "Delegate VVVVVRRR<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VVVVVRRR<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVVRRR<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, ref T5 t5, ref T6 t6, ref T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVVRRI-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVVRRI-8.html",
    "title": "Delegate VVVVVRRI<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VVVVVRRI<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVVRRI<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, ref T5 t5, ref T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVVRR-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVVRR-7.html",
    "title": "Delegate VVVVVRR<T0, T1, T2, T3, T4, T5, T6> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VVVVVRR<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVVRR<T0, T1, T2, T3, T4, T5, T6>(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, ref T5 t5, ref T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.VVVRRRR-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVRRRR-7.html",
    "title": "Delegate VVVRRRR<T0, T1, T2, T3, T4, T5, T6> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VVVRRRR<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVRRRR<T0, T1, T2, T3, T4, T5, T6>(T0 t0, T1 t1, T2 t2, ref T3 t3, ref T4 t4, ref T5 t5, ref T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.VVVRRRII-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVRRRII-8.html",
    "title": "Delegate VVVRRRII<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VVVRRRII<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVRRRII<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, T1 t1, T2 t2, ref T3 t3, ref T4 t4, ref T5 t5, in T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VVVRRRI-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVRRRI-7.html",
    "title": "Delegate VVVRRRI<T0, T1, T2, T3, T4, T5, T6> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VVVRRRI<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVRRRI<T0, T1, T2, T3, T4, T5, T6>(T0 t0, T1 t1, T2 t2, ref T3 t3, ref T4 t4, ref T5 t5, in T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.VVVRRR-6.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVRRR-6.html",
    "title": "Delegate VVVRRR<T0, T1, T2, T3, T4, T5> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VVVRRR<T0, T1, T2, T3, T4, T5> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVRRR<T0, T1, T2, T3, T4, T5>(T0 t0, T1 t1, T2 t2, ref T3 t3, ref T4 t4, ref T5 t5); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 Type Parameters Name Description T0 T1 T2 T3 T4 T5"
  },
  "api/Unity.Entities.UniversalDelegates.VVVRRIII-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVRRIII-8.html",
    "title": "Delegate VVVRRIII<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VVVRRIII<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVRRIII<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, T1 t1, T2 t2, ref T3 t3, ref T4 t4, in T5 t5, in T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VVVRRII-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVRRII-7.html",
    "title": "Delegate VVVRRII<T0, T1, T2, T3, T4, T5, T6> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VVVRRII<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVRRII<T0, T1, T2, T3, T4, T5, T6>(T0 t0, T1 t1, T2 t2, ref T3 t3, ref T4 t4, in T5 t5, in T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.RIIIIIII-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RIIIIIII-8.html",
    "title": "Delegate RIIIIIII<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate RIIIIIII<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RIIIIIII<T0, T1, T2, T3, T4, T5, T6, T7>(ref T0 t0, in T1 t1, in T2 t2, in T3 t3, in T4 t4, in T5 t5, in T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.DisableAutoCreationAttribute.html": {
    "href": "api/Unity.Entities.DisableAutoCreationAttribute.html",
    "title": "Class DisableAutoCreationAttribute | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class DisableAutoCreationAttribute Prevents a system from being automatically created and run. Inheritance Object Attribute DisableAutoCreationAttribute Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class)] public sealed class DisableAutoCreationAttribute : Attribute, _Attribute Remarks By default, all systems (classes derived from ComponentSystemBase ) are automatically discovered, instantiated, and added to the default World when that World is created. Add this attribute to a system class that you do not want created automatically. Note that the attribute is not inherited by any subclasses. using Unity.Entities; [DisableAutoCreation] public class CustomSystem : JobComponentSystem { // Implementation... } You can also apply this attribute to an entire assembly to prevent any system class in that assembly from being created automatically. This is useful for test assemblies containing many systems that expect to be tested in isolation. To declare an assembly attribute, place it in any C# file compiled into the assembly, outside the namespace declaration: using Unity.Entities; [assembly: DisableAutoCreation] namespace Tests{}"
  },
  "api/Unity.Entities.DefaultWorldInitialization.html": {
    "href": "api/Unity.Entities.DefaultWorldInitialization.html",
    "title": "Class DefaultWorldInitialization | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class DefaultWorldInitialization Inheritance Object DefaultWorldInitialization Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class DefaultWorldInitialization Methods AddSystemsToRootLevelSystemGroups(World, List<Type>) Adds the list of systems to the world by injecting them into the root level system groups (InitializationSystemGroup, SimulationSystemGroup and PresentationSystemGroup) Declaration public static void AddSystemsToRootLevelSystemGroups(World world, List<Type> systems) Parameters Type Name Description World world List < Type > systems DefaultLazyEditModeInitialize() Can be called when in edit mode in the editor to initialize a the default world. Declaration public static void DefaultLazyEditModeInitialize() GetAllSystems(WorldSystemFilterFlags, Boolean) Calculates a list of all systems filtered with WorldSystemFilterFlags, [DisableAutoCreation] etc. Declaration public static List<Type> GetAllSystems(WorldSystemFilterFlags filterFlags, bool requireExecuteAlways = false) Parameters Type Name Description WorldSystemFilterFlags filterFlags Boolean requireExecuteAlways Optionally require that [ExecuteAlways] is present on the system. This is used when creating edit mode worlds. Returns Type Description List < Type > The list of filtered systems Initialize(String, Boolean) Initializes the default world or runs ICustomBootstrap if one is is available. Declaration public static void Initialize(string defaultWorldName, bool editorWorld) Parameters Type Name Description String defaultWorldName The name of the world that will be created. Unless there is a custom bootstrap. Boolean editorWorld Editor worlds by default only include systems with [ExecuteAlways]. If editorWorld is true, ICustomBootstrap will not be used."
  },
  "api/Unity.Entities.DefaultTinyWorldInitialization.html": {
    "href": "api/Unity.Entities.DefaultTinyWorldInitialization.html",
    "title": "Class DefaultTinyWorldInitialization | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class DefaultTinyWorldInitialization Inheritance Object DefaultTinyWorldInitialization Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class DefaultTinyWorldInitialization Methods AddSystem(World, ComponentSystemBase, Boolean) Call this to add a System that was manually constructed; normally these Systems are marked with [DisableAutoCreation]. Declaration public static void AddSystem(World world, ComponentSystemBase system, bool addSystemToGroup) Parameters Type Name Description World world ComponentSystemBase system Boolean addSystemToGroup Initialize(String) Initialize the Tiny World with all the boilerplate that needs to be done. ComponentSystems will be created and sorted into the high level ComponentSystemGroups. Declaration public static World Initialize(string worldName) Parameters Type Name Description String worldName Returns Type Description World Remarks The simple use case is: world = DefaultTinyWorldInitialization.InitializeWorld(\"main\"); However, it's common to need to set initialization data. That can be done with the following code: world = DefaultTinyWorldInitialization.InitializeWorld(\"main\"); TinyEnvironment env = world.TinyEnvironment(); // set configuration variables... DefaultTinyWorldInitialization.InitializeSystems(world); See Also InitializeWorld(String) InitializeSystems(World) InitializeSystems(World) Initialize the ComponentSystems. See Initialize(String) for use. Declaration public static void InitializeSystems(World world) Parameters Type Name Description World world InitializeWorld(String) Initialize the World object. See Initialize(String) for use. Declaration public static World InitializeWorld(string worldName) Parameters Type Name Description String worldName Returns Type Description World"
  },
  "api/Unity.Entities.ConverterVersionAttribute.html": {
    "href": "api/Unity.Entities.ConverterVersionAttribute.html",
    "title": "Class ConverterVersionAttribute | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class ConverterVersionAttribute By declaring a version number a ComponentSystem can ensure that any cached data by the asset pipeline was prepared using the active code. If the version number of any conversion system or optimization system changes or a new conversion system is added, then the scene will be re-converted. Inheritance Object Attribute ConverterVersionAttribute Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [AttributeUsage(AttributeTargets.Class)] public class ConverterVersionAttribute : Attribute, _Attribute Constructors ConverterVersionAttribute(Int32) Declaration public ConverterVersionAttribute(int version) Parameters Type Name Description Int32 version Fields Version Declaration public int Version Field Value Type Description Int32"
  },
  "api/Unity.Entities.ComponentSystemSorter.html": {
    "href": "api/Unity.Entities.ComponentSystemSorter.html",
    "title": "Class ComponentSystemSorter | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class ComponentSystemSorter Inheritance Object ComponentSystemSorter Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class ComponentSystemSorter"
  },
  "api/Unity.Entities.ComponentSystemSorter.TypeHeapElement.html": {
    "href": "api/Unity.Entities.ComponentSystemSorter.TypeHeapElement.html",
    "title": "Struct ComponentSystemSorter.TypeHeapElement | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct ComponentSystemSorter.TypeHeapElement Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct TypeHeapElement : IComparable<ComponentSystemSorter.TypeHeapElement> Constructors TypeHeapElement(Int32, Type) Declaration public TypeHeapElement(int index, Type t) Parameters Type Name Description Int32 index Type t Fields unsortedIndex Declaration public int unsortedIndex Field Value Type Description Int32 Methods CompareTo(ComponentSystemSorter.TypeHeapElement) Declaration public int CompareTo(ComponentSystemSorter.TypeHeapElement other) Parameters Type Name Description ComponentSystemSorter.TypeHeapElement other Returns Type Description Int32"
  },
  "api/Unity.Entities.ChunkSerializableAttribute.html": {
    "href": "api/Unity.Entities.ChunkSerializableAttribute.html",
    "title": "Class ChunkSerializableAttribute | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class ChunkSerializableAttribute States that a component type is serializable. Inheritance Object Attribute ChunkSerializableAttribute Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct)] public class ChunkSerializableAttribute : Attribute, _Attribute Remarks By default, ECS does not support storing pointer types in chunks. Apply this attribute to a component declaration to allow the use of pointers as fields in the component. Note that ECS does not perform any pre- or post-serialization processing to maintain pointer validity. When using this attribute, your code assumes responsibility for handling pointer serialization and deserialization."
  },
  "api/Unity.Entities.ChunkHeader.html": {
    "href": "api/Unity.Entities.ChunkHeader.html",
    "title": "Struct ChunkHeader | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct ChunkHeader Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct ChunkHeader : ISystemStateComponentData, IComponentData Fields ArchetypeChunk Declaration public ArchetypeChunk ArchetypeChunk Field Value Type Description ArchetypeChunk Properties Null Declaration public static ChunkHeader Null { get; } Property Value Type Description ChunkHeader"
  },
  "api/Unity.Transforms.CopyTransformToGameObjectProxy.html": {
    "href": "api/Unity.Transforms.CopyTransformToGameObjectProxy.html",
    "title": "Class CopyTransformToGameObjectProxy | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class CopyTransformToGameObjectProxy Inheritance Object ComponentDataProxyBase ComponentDataProxy < CopyTransformToGameObject > CopyTransformToGameObjectProxy Inherited Members ComponentDataProxy<CopyTransformToGameObject>.ValidateSerializedData(CopyTransformToGameObject) ComponentDataProxy<CopyTransformToGameObject>.Value ComponentDataProxyBase.OnEnable() ComponentDataProxyBase.OnDisable() Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class CopyTransformToGameObjectProxy : ComponentDataProxy<CopyTransformToGameObject>, ISerializationCallbackReceiver"
  },
  "api/Unity.Transforms.CopyTransformToGameObject.html": {
    "href": "api/Unity.Transforms.CopyTransformToGameObject.html",
    "title": "Struct CopyTransformToGameObject | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct CopyTransformToGameObject Copy Transform to GameObject associated with Entity from TransformMatrix. Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct CopyTransformToGameObject : IComponentData"
  },
  "api/Unity.Transforms.CopyTransformFromGameObjectSystem.html": {
    "href": "api/Unity.Transforms.CopyTransformFromGameObjectSystem.html",
    "title": "Class CopyTransformFromGameObjectSystem | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class CopyTransformFromGameObjectSystem Inheritance Object ComponentSystemBase JobComponentSystem CopyTransformFromGameObjectSystem Inherited Members JobComponentSystem.Entities JobComponentSystem.Job JobComponentSystem.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnDestroyManager() ComponentSystemBase.OnCreateManager() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.Update() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetArchetypeChunkComponentType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkComponentTypeDynamic(ComponentType) ComponentSystemBase.GetArchetypeChunkBufferType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkSharedComponentType<T>() ComponentSystemBase.GetArchetypeChunkEntityType() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [UpdateInGroup(typeof(TransformSystemGroup))] [UpdateBefore(typeof(EndFrameTRSToLocalToWorldSystem))] public class CopyTransformFromGameObjectSystem : JobComponentSystem Methods OnCreate() Declaration protected override void OnCreate() Overrides ComponentSystemBase.OnCreate() OnUpdate(JobHandle) Declaration protected override JobHandle OnUpdate(JobHandle inputDeps) Parameters Type Name Description JobHandle inputDeps Returns Type Description JobHandle Overrides JobComponentSystem.OnUpdate(JobHandle) Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Transforms.TRSToLocalToParentSystem.html": {
    "href": "api/Unity.Transforms.TRSToLocalToParentSystem.html",
    "title": "Class TRSToLocalToParentSystem | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class TRSToLocalToParentSystem Inheritance Object ComponentSystemBase JobComponentSystem TRSToLocalToParentSystem EndFrameTRSToLocalToParentSystem Inherited Members JobComponentSystem.Entities JobComponentSystem.Job JobComponentSystem.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnDestroyManager() ComponentSystemBase.OnCreateManager() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.Update() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetArchetypeChunkComponentType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkComponentTypeDynamic(ComponentType) ComponentSystemBase.GetArchetypeChunkBufferType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkSharedComponentType<T>() ComponentSystemBase.GetArchetypeChunkEntityType() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public abstract class TRSToLocalToParentSystem : JobComponentSystem Methods OnCreate() Declaration protected override void OnCreate() Overrides ComponentSystemBase.OnCreate() OnUpdate(JobHandle) Declaration protected override JobHandle OnUpdate(JobHandle inputDeps) Parameters Type Name Description JobHandle inputDeps Returns Type Description JobHandle Overrides JobComponentSystem.OnUpdate(JobHandle) Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVVVVR-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVVVVR-8.html",
    "title": "Delegate VVVVVVVR<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VVVVVVVR<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVVVVR<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, T6 t6, ref T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.WorldSystemFilterFlags.html": {
    "href": "api/Unity.Entities.WorldSystemFilterFlags.html",
    "title": "Enum WorldSystemFilterFlags | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Enum WorldSystemFilterFlags For internal use only. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Flags] public enum WorldSystemFilterFlags Remarks Defines where internal Unity systems should be created. The existence of these flags and the specialized Worlds they represent are subject to change. Fields Name Description Default The default World . EntitySceneOptimizations A specialized World created for optimizing scene rendering. GameObjectConversion A specialized World created for converting GameObjects to entities."
  },
  "api/Unity.Entities.UniversalDelegates.VVVVRR-6.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVRR-6.html",
    "title": "Delegate VVVVRR<T0, T1, T2, T3, T4, T5> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VVVVRR<T0, T1, T2, T3, T4, T5> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVRR<T0, T1, T2, T3, T4, T5>(T0 t0, T1 t1, T2 t2, T3 t3, ref T4 t4, ref T5 t5); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 Type Parameters Name Description T0 T1 T2 T3 T4 T5"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVRIII-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVRIII-8.html",
    "title": "Delegate VVVVRIII<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VVVVRIII<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVRIII<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, T1 t1, T2 t2, T3 t3, ref T4 t4, in T5 t5, in T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVRII-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVRII-7.html",
    "title": "Delegate VVVVRII<T0, T1, T2, T3, T4, T5, T6> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VVVVRII<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVRII<T0, T1, T2, T3, T4, T5, T6>(T0 t0, T1 t1, T2 t2, T3 t3, ref T4 t4, in T5 t5, in T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVRI-6.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVRI-6.html",
    "title": "Delegate VVVVRI<T0, T1, T2, T3, T4, T5> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VVVVRI<T0, T1, T2, T3, T4, T5> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVRI<T0, T1, T2, T3, T4, T5>(T0 t0, T1 t1, T2 t2, T3 t3, ref T4 t4, in T5 t5); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 Type Parameters Name Description T0 T1 T2 T3 T4 T5"
  },
  "api/Unity.Entities.UniversalDelegates.VVVRIIII-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVRIIII-8.html",
    "title": "Delegate VVVRIIII<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VVVRIIII<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVRIIII<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, T1 t1, T2 t2, ref T3 t3, in T4 t4, in T5 t5, in T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VVVRIII-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVRIII-7.html",
    "title": "Delegate VVVRIII<T0, T1, T2, T3, T4, T5, T6> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VVVRIII<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVRIII<T0, T1, T2, T3, T4, T5, T6>(T0 t0, T1 t1, T2 t2, ref T3 t3, in T4 t4, in T5 t5, in T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.VVVRII-6.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVRII-6.html",
    "title": "Delegate VVVRII<T0, T1, T2, T3, T4, T5> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VVVRII<T0, T1, T2, T3, T4, T5> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVRII<T0, T1, T2, T3, T4, T5>(T0 t0, T1 t1, T2 t2, ref T3 t3, in T4 t4, in T5 t5); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 Type Parameters Name Description T0 T1 T2 T3 T4 T5"
  },
  "api/Unity.Entities.UniversalDelegates.VVVRI-5.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVRI-5.html",
    "title": "Delegate VVVRI<T0, T1, T2, T3, T4> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VVVRI<T0, T1, T2, T3, T4> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVRI<T0, T1, T2, T3, T4>(T0 t0, T1 t1, T2 t2, ref T3 t3, in T4 t4); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 Type Parameters Name Description T0 T1 T2 T3 T4"
  },
  "api/Unity.Entities.UniversalDelegates.RRRIII-6.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RRRIII-6.html",
    "title": "Delegate RRRIII<T0, T1, T2, T3, T4, T5> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate RRRIII<T0, T1, T2, T3, T4, T5> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RRRIII<T0, T1, T2, T3, T4, T5>(ref T0 t0, ref T1 t1, ref T2 t2, in T3 t3, in T4 t4, in T5 t5); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 Type Parameters Name Description T0 T1 T2 T3 T4 T5"
  },
  "api/Unity.Entities.UniversalDelegates.RRRII-5.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RRRII-5.html",
    "title": "Delegate RRRII<T0, T1, T2, T3, T4> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate RRRII<T0, T1, T2, T3, T4> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RRRII<T0, T1, T2, T3, T4>(ref T0 t0, ref T1 t1, ref T2 t2, in T3 t3, in T4 t4); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 Type Parameters Name Description T0 T1 T2 T3 T4"
  },
  "api/Unity.Entities.UniversalDelegates.RRRI-4.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RRRI-4.html",
    "title": "Delegate RRRI<T0, T1, T2, T3> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate RRRI<T0, T1, T2, T3> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RRRI<T0, T1, T2, T3>(ref T0 t0, ref T1 t1, ref T2 t2, in T3 t3); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 Type Parameters Name Description T0 T1 T2 T3"
  },
  "api/Unity.Entities.UniversalDelegates.RRR-3.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RRR-3.html",
    "title": "Delegate RRR<T0, T1, T2> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate RRR<T0, T1, T2> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RRR<T0, T1, T2>(ref T0 t0, ref T1 t1, ref T2 t2); Parameters Type Name Description T0 t0 T1 t1 T2 t2 Type Parameters Name Description T0 T1 T2"
  },
  "api/Unity.Entities.UniversalDelegates.RIIIIII-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RIIIIII-7.html",
    "title": "Delegate RIIIIII<T0, T1, T2, T3, T4, T5, T6> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate RIIIIII<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RIIIIII<T0, T1, T2, T3, T4, T5, T6>(ref T0 t0, in T1 t1, in T2 t2, in T3 t3, in T4 t4, in T5 t5, in T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.RIIIII-6.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RIIIII-6.html",
    "title": "Delegate RIIIII<T0, T1, T2, T3, T4, T5> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate RIIIII<T0, T1, T2, T3, T4, T5> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RIIIII<T0, T1, T2, T3, T4, T5>(ref T0 t0, in T1 t1, in T2 t2, in T3 t3, in T4 t4, in T5 t5); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 Type Parameters Name Description T0 T1 T2 T3 T4 T5"
  },
  "api/Unity.Entities.UniversalDelegates.RIIII-5.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RIIII-5.html",
    "title": "Delegate RIIII<T0, T1, T2, T3, T4> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate RIIII<T0, T1, T2, T3, T4> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RIIII<T0, T1, T2, T3, T4>(ref T0 t0, in T1 t1, in T2 t2, in T3 t3, in T4 t4); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 Type Parameters Name Description T0 T1 T2 T3 T4"
  },
  "api/Unity.Entities.UniversalDelegates.RIII-4.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RIII-4.html",
    "title": "Delegate RIII<T0, T1, T2, T3> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate RIII<T0, T1, T2, T3> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RIII<T0, T1, T2, T3>(ref T0 t0, in T1 t1, in T2 t2, in T3 t3); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 Type Parameters Name Description T0 T1 T2 T3"
  },
  "api/Unity.Entities.UniversalDelegates.RII-3.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RII-3.html",
    "title": "Delegate RII<T0, T1, T2> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate RII<T0, T1, T2> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RII<T0, T1, T2>(ref T0 t0, in T1 t1, in T2 t2); Parameters Type Name Description T0 t0 T1 t1 T2 t2 Type Parameters Name Description T0 T1 T2"
  },
  "api/Unity.Entities.UniversalDelegates.VVVRRI-6.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVRRI-6.html",
    "title": "Delegate VVVRRI<T0, T1, T2, T3, T4, T5> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VVVRRI<T0, T1, T2, T3, T4, T5> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVRRI<T0, T1, T2, T3, T4, T5>(T0 t0, T1 t1, T2 t2, ref T3 t3, ref T4 t4, in T5 t5); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 Type Parameters Name Description T0 T1 T2 T3 T4 T5"
  },
  "api/Unity.Entities.UniversalDelegates.VVVRR-5.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVRR-5.html",
    "title": "Delegate VVVRR<T0, T1, T2, T3, T4> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VVVRR<T0, T1, T2, T3, T4> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVRR<T0, T1, T2, T3, T4>(T0 t0, T1 t1, T2 t2, ref T3 t3, ref T4 t4); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 Type Parameters Name Description T0 T1 T2 T3 T4"
  },
  "api/Unity.Entities.UniversalDelegates.VRRRRII-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VRRRRII-7.html",
    "title": "Delegate VRRRRII<T0, T1, T2, T3, T4, T5, T6> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VRRRRII<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VRRRRII<T0, T1, T2, T3, T4, T5, T6>(T0 t0, ref T1 t1, ref T2 t2, ref T3 t3, ref T4 t4, in T5 t5, in T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.VRRRRI-6.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VRRRRI-6.html",
    "title": "Delegate VRRRRI<T0, T1, T2, T3, T4, T5> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VRRRRI<T0, T1, T2, T3, T4, T5> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VRRRRI<T0, T1, T2, T3, T4, T5>(T0 t0, ref T1 t1, ref T2 t2, ref T3 t3, ref T4 t4, in T5 t5); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 Type Parameters Name Description T0 T1 T2 T3 T4 T5"
  },
  "api/Unity.Entities.UniversalDelegates.VII-3.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VII-3.html",
    "title": "Delegate VII<T0, T1, T2> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VII<T0, T1, T2> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VII<T0, T1, T2>(T0 t0, in T1 t1, in T2 t2); Parameters Type Name Description T0 t0 T1 t1 T2 t2 Type Parameters Name Description T0 T1 T2"
  },
  "api/Unity.Entities.UniversalDelegates.VI-2.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VI-2.html",
    "title": "Delegate VI<T0, T1> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VI<T0, T1> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VI<T0, T1>(T0 t0, in T1 t1); Parameters Type Name Description T0 t0 T1 t1 Type Parameters Name Description T0 T1"
  },
  "api/Unity.Entities.UniversalDelegates.V-1.html": {
    "href": "api/Unity.Entities.UniversalDelegates.V-1.html",
    "title": "Delegate V<T0> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate V<T0> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void V<T0>(T0 t0); Parameters Type Name Description T0 t0 Type Parameters Name Description T0"
  },
  "api/Unity.Entities.UniversalDelegates.RRRRRRRR-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RRRRRRRR-8.html",
    "title": "Delegate RRRRRRRR<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate RRRRRRRR<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RRRRRRRR<T0, T1, T2, T3, T4, T5, T6, T7>(ref T0 t0, ref T1 t1, ref T2 t2, ref T3 t3, ref T4 t4, ref T5 t5, ref T6 t6, ref T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.RRRRRRRI-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RRRRRRRI-8.html",
    "title": "Delegate RRRRRRRI<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate RRRRRRRI<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RRRRRRRI<T0, T1, T2, T3, T4, T5, T6, T7>(ref T0 t0, ref T1 t1, ref T2 t2, ref T3 t3, ref T4 t4, ref T5 t5, ref T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.RRRRRRR-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RRRRRRR-7.html",
    "title": "Delegate RRRRRRR<T0, T1, T2, T3, T4, T5, T6> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate RRRRRRR<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RRRRRRR<T0, T1, T2, T3, T4, T5, T6>(ref T0 t0, ref T1 t1, ref T2 t2, ref T3 t3, ref T4 t4, ref T5 t5, ref T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.RRRRRRII-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RRRRRRII-8.html",
    "title": "Delegate RRRRRRII<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate RRRRRRII<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RRRRRRII<T0, T1, T2, T3, T4, T5, T6, T7>(ref T0 t0, ref T1 t1, ref T2 t2, ref T3 t3, ref T4 t4, ref T5 t5, in T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.RRRRRRI-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.RRRRRRI-7.html",
    "title": "Delegate RRRRRRI<T0, T1, T2, T3, T4, T5, T6> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate RRRRRRI<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void RRRRRRI<T0, T1, T2, T3, T4, T5, T6>(ref T0 t0, ref T1 t1, ref T2 t2, ref T3 t3, ref T4 t4, ref T5 t5, in T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.TypeManager.TypeVersionAttribute.html": {
    "href": "api/Unity.Entities.TypeManager.TypeVersionAttribute.html",
    "title": "Class TypeManager.TypeVersionAttribute | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class TypeManager.TypeVersionAttribute Inheritance Object Attribute TypeManager.TypeVersionAttribute Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [AttributeUsage(AttributeTargets.Struct)] public class TypeVersionAttribute : Attribute, _Attribute Constructors TypeVersionAttribute(Int32) Declaration public TypeVersionAttribute(int version) Parameters Type Name Description Int32 version Fields TypeVersion Declaration public int TypeVersion Field Value Type Description Int32"
  },
  "api/Unity.Entities.TypeManager.TypeInfoDebug.html": {
    "href": "api/Unity.Entities.TypeManager.TypeInfoDebug.html",
    "title": "Struct TypeManager.TypeInfoDebug | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct TypeManager.TypeInfoDebug Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct TypeInfoDebug Constructors TypeInfoDebug(TypeManager.TypeInfo) Declaration public TypeInfoDebug(TypeManager.TypeInfo typeInfo) Parameters Type Name Description TypeManager.TypeInfo typeInfo Properties TypeName Declaration public string TypeName { get; } Property Value Type Description String"
  },
  "api/Unity.Entities.TypeManager.TypeInfo.html": {
    "href": "api/Unity.Entities.TypeManager.TypeInfo.html",
    "title": "Struct TypeManager.TypeInfo | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct TypeManager.TypeInfo Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct TypeInfo Constructors TypeInfo(Int32, Int32, TypeManager.TypeCategory, Int32, Int32, Int32, Int32, Int32, UInt64, Int32, Int32, Int32, UInt64, Int32, Int32, Int32, Boolean, Boolean, Boolean, Boolean) Declaration public TypeInfo(int typeIndex, int size, TypeManager.TypeCategory category, int fastEqualityIndex, int entityOffsetStartIndex, int entityOffsetCount, int blobAssetRefOffsetStartIndex, int blobAssetRefOffsetCount, ulong memoryOrdering, int bufferCapacity, int elementSize, int alignmentInBytes, ulong stableTypeHash, int writeGroupStartIndex, int writeGroupCount, int maximumChunkCapacity, bool isSystemStateSharedComponent, bool isSystemStateBufferElement, bool isSystemStateComponent, bool isManaged) Parameters Type Name Description Int32 typeIndex Int32 size TypeManager.TypeCategory category Int32 fastEqualityIndex Int32 entityOffsetStartIndex Int32 entityOffsetCount Int32 blobAssetRefOffsetStartIndex Int32 blobAssetRefOffsetCount UInt64 memoryOrdering Int32 bufferCapacity Int32 elementSize Int32 alignmentInBytes UInt64 stableTypeHash Int32 writeGroupStartIndex Int32 writeGroupCount Int32 maximumChunkCapacity Boolean isSystemStateSharedComponent Boolean isSystemStateBufferElement Boolean isSystemStateComponent Boolean isManaged Fields AlignmentInBytes Declaration public readonly int AlignmentInBytes Field Value Type Description Int32 BlobAssetRefOffsetCount Declaration public readonly int BlobAssetRefOffsetCount Field Value Type Description Int32 BufferCapacity Declaration public readonly int BufferCapacity Field Value Type Description Int32 Category Declaration public readonly TypeManager.TypeCategory Category Field Value Type Description TypeManager.TypeCategory ElementSize Declaration public readonly int ElementSize Field Value Type Description Int32 EntityOffsetCount Declaration public readonly int EntityOffsetCount Field Value Type Description Int32 FastEqualityIndex Declaration public readonly int FastEqualityIndex Field Value Type Description Int32 MaximumChunkCapacity Declaration public readonly int MaximumChunkCapacity Field Value Type Description Int32 MemoryOrdering Declaration public readonly ulong MemoryOrdering Field Value Type Description UInt64 SizeInChunk Declaration public readonly int SizeInChunk Field Value Type Description Int32 StableTypeHash Declaration public readonly ulong StableTypeHash Field Value Type Description UInt64 TypeIndex Declaration public readonly int TypeIndex Field Value Type Description Int32 WriteGroupCount Declaration public readonly int WriteGroupCount Field Value Type Description Int32 WriteGroupStartIndex Declaration public readonly int WriteGroupStartIndex Field Value Type Description Int32 Properties AlignmentInChunkInBytes Declaration public int AlignmentInChunkInBytes { get; } Property Value Type Description Int32 Debug Provides debug type information. This information may be stripped in non-debug builds Declaration public TypeManager.TypeInfoDebug Debug { get; } Property Value Type Description TypeManager.TypeInfoDebug HasEntities Declaration public bool HasEntities { get; } Property Value Type Description Boolean HasWriteGroups Declaration public bool HasWriteGroups { get; } Property Value Type Description Boolean IsZeroSized Declaration public bool IsZeroSized { get; } Property Value Type Description Boolean Type Declaration public Type Type { get; } Property Value Type Description Type"
  },
  "api/Unity.Entities.TypeManager.TypeCategory.html": {
    "href": "api/Unity.Entities.TypeManager.TypeCategory.html",
    "title": "Enum TypeManager.TypeCategory | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Enum TypeManager.TypeCategory Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public enum TypeCategory Fields Name Description BufferData Implements IBufferElementData (struct only) Class Inherits from UnityEngine.Object (class only) ComponentData Implements IComponentData (can be either a struct or a class) EntityData Is an Entity ISharedComponentData Implement ISharedComponentData (struct only)"
  },
  "api/Unity.Entities.InternalCompilerInterface.html": {
    "href": "api/Unity.Entities.InternalCompilerInterface.html",
    "title": "Class InternalCompilerInterface | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class InternalCompilerInterface Inheritance Object InternalCompilerInterface Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class InternalCompilerInterface Methods BurstCompile(InternalCompilerInterface.JobChunkRunWithoutJobSystemDelegate) Declaration public static InternalCompilerInterface.JobChunkRunWithoutJobSystemDelegate BurstCompile(InternalCompilerInterface.JobChunkRunWithoutJobSystemDelegate d) Parameters Type Name Description InternalCompilerInterface.JobChunkRunWithoutJobSystemDelegate d Returns Type Description InternalCompilerInterface.JobChunkRunWithoutJobSystemDelegate BurstCompile(InternalCompilerInterface.JobRunWithoutJobSystemDelegate) Declaration public static InternalCompilerInterface.JobRunWithoutJobSystemDelegate BurstCompile(InternalCompilerInterface.JobRunWithoutJobSystemDelegate d) Parameters Type Name Description InternalCompilerInterface.JobRunWithoutJobSystemDelegate d Returns Type Description InternalCompilerInterface.JobRunWithoutJobSystemDelegate RunIJob<T>(ref T, InternalCompilerInterface.JobRunWithoutJobSystemDelegate) Declaration public static void RunIJob<T>(ref T jobData, InternalCompilerInterface.JobRunWithoutJobSystemDelegate functionPointer) where T : struct, IJob Parameters Type Name Description T jobData InternalCompilerInterface.JobRunWithoutJobSystemDelegate functionPointer Type Parameters Name Description T RunJobChunk<T>(ref T, EntityQuery, InternalCompilerInterface.JobChunkRunWithoutJobSystemDelegate) Declaration public static void RunJobChunk<T>(ref T jobData, EntityQuery query, InternalCompilerInterface.JobChunkRunWithoutJobSystemDelegate functionPointer) where T : struct, IJobChunk Parameters Type Name Description T jobData EntityQuery query InternalCompilerInterface.JobChunkRunWithoutJobSystemDelegate functionPointer Type Parameters Name Description T"
  },
  "api/Unity.Entities.InternalCompilerInterface.JobRunWithoutJobSystemDelegate.html": {
    "href": "api/Unity.Entities.InternalCompilerInterface.JobRunWithoutJobSystemDelegate.html",
    "title": "Delegate InternalCompilerInterface.JobRunWithoutJobSystemDelegate | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate InternalCompilerInterface.JobRunWithoutJobSystemDelegate Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void JobRunWithoutJobSystemDelegate(void *job); Parameters Type Name Description Void * job"
  },
  "api/Unity.Entities.InternalCompilerInterface.JobChunkRunWithoutJobSystemDelegate.html": {
    "href": "api/Unity.Entities.InternalCompilerInterface.JobChunkRunWithoutJobSystemDelegate.html",
    "title": "Delegate InternalCompilerInterface.JobChunkRunWithoutJobSystemDelegate | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate InternalCompilerInterface.JobChunkRunWithoutJobSystemDelegate Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void JobChunkRunWithoutJobSystemDelegate(ArchetypeChunkIterator*iterator, void *job); Parameters Type Name Description ArchetypeChunkIterator * iterator Void * job"
  },
  "api/Unity.Entities.InternalBufferCapacityAttribute.html": {
    "href": "api/Unity.Entities.InternalBufferCapacityAttribute.html",
    "title": "Class InternalBufferCapacityAttribute | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class InternalBufferCapacityAttribute Specifies the maximum number of elements to store inside a chunk. Inheritance Object Attribute InternalBufferCapacityAttribute Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [AttributeUsage(AttributeTargets.Struct)] public class InternalBufferCapacityAttribute : Attribute, _Attribute Remarks Use this attribute on the declaration of your IBufferElementData subtype: [InternalBufferCapacity(10)] public struct FloatBufferElement : IBufferElementData { public float Value; } All DynamicBuffer<T> with this type of element store the specified number of elements inside the chunk along with other component types in the same archetype. When the number of elements in the buffer exceeds this limit, the entire buffer is moved outside the chunk. Constructors InternalBufferCapacityAttribute(Int32) The number of elements stored inside the chunk. Declaration public InternalBufferCapacityAttribute(int capacity) Parameters Type Name Description Int32 capacity Fields Capacity The number of elements stored inside the chunk. Declaration public readonly int Capacity Field Value Type Description Int32"
  },
  "api/Unity.Entities.IDeclareReferencedPrefabs.html": {
    "href": "api/Unity.Entities.IDeclareReferencedPrefabs.html",
    "title": "Interface IDeclareReferencedPrefabs | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Interface IDeclareReferencedPrefabs Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface IDeclareReferencedPrefabs Methods DeclareReferencedPrefabs(List<GameObject>) Declaration void DeclareReferencedPrefabs(List<GameObject> referencedPrefabs) Parameters Type Name Description List < GameObject > referencedPrefabs"
  },
  "api/Unity.Entities.ICustomBootstrap.html": {
    "href": "api/Unity.Entities.ICustomBootstrap.html",
    "title": "Interface ICustomBootstrap | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Interface ICustomBootstrap When entering playmode or the game starts in the Player. A default world is created, sometimes you need multiple worlds to be setup when the game starts. This lets you override the bootstrap of game code world creation. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface ICustomBootstrap Methods Initialize(String) Declaration bool Initialize(string defaultWorldName) Parameters Type Name Description String defaultWorldName Returns Type Description Boolean"
  },
  "api/Unity.Entities.IConvertGameObjectToEntity.html": {
    "href": "api/Unity.Entities.IConvertGameObjectToEntity.html",
    "title": "Interface IConvertGameObjectToEntity | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Interface IConvertGameObjectToEntity Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface IConvertGameObjectToEntity Methods Convert(Entity, EntityManager, GameObjectConversionSystem) Declaration void Convert(Entity entity, EntityManager dstManager, GameObjectConversionSystem conversionSystem) Parameters Type Name Description Entity entity EntityManager dstManager GameObjectConversionSystem conversionSystem"
  },
  "api/Unity.Entities.IComponentData.html": {
    "href": "api/Unity.Entities.IComponentData.html",
    "title": "Interface IComponentData | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Interface IComponentData An interface for implementing general-purpose components. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface IComponentData Remarks An IComponentData implementation must be a struct and can only contain unmanaged, blittable types, including: C#-defined blittable types bool char (a fixed-sized character buffer) BlobAssetReference<T> (a reference to a Blob data structure) fixed arrays (in an unsafe context) structs containing these unmanaged, blittable fields Note that you can also use a separate, IBufferElementData component in a DynamicBuffer<T> as an array-like data structure. A single IComponentData implementation should only contain fields for data that is always, or almost always, accessed at the same time. In general, using a greater number of smaller component types is more efficient than using fewer, larger component types. Add, set, and remove the components of an entity using the EntityManager or an EntityCommandBuffer . (You can also update the fields of an IComponentData struct normally when you have a reference to it.) IComponentData objects are stored in chunks ( ArchetypeChunk ), indexed by Entity . You can implement systems ( ComponentSystemBase ) to select and iterate over a set of entities having specific components. Use EntityQueryBuilder with ComponentSystem for non-Job based systems. Use EntityQuery with JobComponentSystem for IJobForEach<T0> and IJobChunk based systems. All the components of an entity must fit into a single chunk and thus cannot exceed 16 KB. (Some components, such as DynamicBuffer<T> and BlobArray<T> can store data outside the chunk, so may not fully count against that limit.) While, most of the components that you add to entities implement IComponentData, ECS also provides several, specialized component types. These specialized types include: IBufferElementData -- for use in a DynamicBuffer<T> ISharedComponentData -- a component whose value is shared by all entities in the same chunk ISystemStateComponentData -- a component for storing internal system state associated with an entity. ISystemStateSharedComponentData -- the system state version of the shared component interface. ISystemStateBufferElementData -- the system state version of the buffer element interface. Note: Chunk components, which you can use to store data associated with a chunk (see AddChunkComponentData<T>(Entity) ) and singleton components, which are components for which only one instance of a type is allowed (see SetSingleton<T>(T) ), use the IComponentData interface. See General-purpose components for additional information."
  },
  "api/Unity.Entities.FastEquality.html": {
    "href": "api/Unity.Entities.FastEquality.html",
    "title": "Class FastEquality | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class FastEquality Inheritance Object FastEquality Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class FastEquality Methods AddExtraAOTTypes(Type, HashSet<String>) Declaration public static void AddExtraAOTTypes(Type type, HashSet<string> output) Parameters Type Name Description Type type HashSet < String > output Equals(Void*, Void*, FastEquality.TypeInfo) Declaration public static bool Equals(void *lhsPtr, void *rhsPtr, FastEquality.TypeInfo typeInfo) Parameters Type Name Description Void * lhsPtr Void * rhsPtr FastEquality.TypeInfo typeInfo Returns Type Description Boolean Equals<T>(T, T, FastEquality.TypeInfo) Declaration public static bool Equals<T>(T lhs, T rhs, FastEquality.TypeInfo typeInfo) where T : struct Parameters Type Name Description T lhs T rhs FastEquality.TypeInfo typeInfo Returns Type Description Boolean Type Parameters Name Description T Equals<T>(ref T, ref T, FastEquality.TypeInfo) Declaration public static bool Equals<T>(ref T lhs, ref T rhs, FastEquality.TypeInfo typeInfo) where T : struct Parameters Type Name Description T lhs T rhs FastEquality.TypeInfo typeInfo Returns Type Description Boolean Type Parameters Name Description T GetHashCode(Void*, FastEquality.TypeInfo) Declaration public static int GetHashCode(void *dataPtr, FastEquality.TypeInfo typeInfo) Parameters Type Name Description Void * dataPtr FastEquality.TypeInfo typeInfo Returns Type Description Int32 GetHashCode<T>(T, FastEquality.TypeInfo) Declaration public static int GetHashCode<T>(T lhs, FastEquality.TypeInfo typeInfo) where T : struct Parameters Type Name Description T lhs FastEquality.TypeInfo typeInfo Returns Type Description Int32 Type Parameters Name Description T GetHashCode<T>(ref T, FastEquality.TypeInfo) Declaration public static int GetHashCode<T>(ref T lhs, FastEquality.TypeInfo typeInfo) where T : struct Parameters Type Name Description T lhs FastEquality.TypeInfo typeInfo Returns Type Description Int32 Type Parameters Name Description T ManagedEquals(Object, Object, FastEquality.TypeInfo) Declaration public static bool ManagedEquals(object lhs, object rhs, FastEquality.TypeInfo typeInfo) Parameters Type Name Description Object lhs Object rhs FastEquality.TypeInfo typeInfo Returns Type Description Boolean ManagedGetHashCode(Object, FastEquality.TypeInfo) Declaration public static int ManagedGetHashCode(object lhs, FastEquality.TypeInfo typeInfo) Parameters Type Name Description Object lhs FastEquality.TypeInfo typeInfo Returns Type Description Int32"
  },
  "api/Unity.Entities.FastEquality.TypeInfo.html": {
    "href": "api/Unity.Entities.FastEquality.TypeInfo.html",
    "title": "Struct FastEquality.TypeInfo | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct FastEquality.TypeInfo Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct TypeInfo Fields EqualFn Declaration public Delegate EqualFn Field Value Type Description Delegate GetHashFn Declaration public Delegate GetHashFn Field Value Type Description Delegate Hash Declaration public int Hash Field Value Type Description Int32 Layouts Declaration public FastEquality.Layout[] Layouts Field Value Type Description FastEquality.Layout [] Properties Null Declaration public static FastEquality.TypeInfo Null { get; } Property Value Type Description FastEquality.TypeInfo"
  },
  "api/Unity.Entities.FastEquality.TypeInfo.ManagedGetHashCodeDelegate.html": {
    "href": "api/Unity.Entities.FastEquality.TypeInfo.ManagedGetHashCodeDelegate.html",
    "title": "Delegate FastEquality.TypeInfo.ManagedGetHashCodeDelegate | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate FastEquality.TypeInfo.ManagedGetHashCodeDelegate Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate int ManagedGetHashCodeDelegate(object obj); Parameters Type Name Description Object obj Returns Type Description Int32"
  },
  "api/Unity.Entities.FastEquality.TypeInfo.ManagedCompareEqualDelegate.html": {
    "href": "api/Unity.Entities.FastEquality.TypeInfo.ManagedCompareEqualDelegate.html",
    "title": "Delegate FastEquality.TypeInfo.ManagedCompareEqualDelegate | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate FastEquality.TypeInfo.ManagedCompareEqualDelegate Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate bool ManagedCompareEqualDelegate(object lhs, object rhs); Parameters Type Name Description Object lhs Object rhs Returns Type Description Boolean"
  },
  "api/Unity.Entities.EntityRemapUtility.ManagedEntityPatchInfo.html": {
    "href": "api/Unity.Entities.EntityRemapUtility.ManagedEntityPatchInfo.html",
    "title": "Struct EntityRemapUtility.ManagedEntityPatchInfo | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct EntityRemapUtility.ManagedEntityPatchInfo Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct ManagedEntityPatchInfo Fields Type Declaration public ComponentType Type Field Value Type Description ComponentType"
  },
  "api/Unity.Entities.EntityRemapUtility.EntityRemapInfo.html": {
    "href": "api/Unity.Entities.EntityRemapUtility.EntityRemapInfo.html",
    "title": "Struct EntityRemapUtility.EntityRemapInfo | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct EntityRemapUtility.EntityRemapInfo Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct EntityRemapInfo Fields SourceVersion Declaration public int SourceVersion Field Value Type Description Int32 Target Declaration public Entity Target Field Value Type Description Entity"
  },
  "api/Unity.Entities.EntityRemapUtility.EntityPatchInfo.html": {
    "href": "api/Unity.Entities.EntityRemapUtility.EntityPatchInfo.html",
    "title": "Struct EntityRemapUtility.EntityPatchInfo | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct EntityRemapUtility.EntityPatchInfo Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct EntityPatchInfo Fields Offset Declaration public int Offset Field Value Type Description Int32 Stride Declaration public int Stride Field Value Type Description Int32"
  },
  "api/Unity.Entities.EntityRemapUtility.BufferEntityPatchInfo.html": {
    "href": "api/Unity.Entities.EntityRemapUtility.BufferEntityPatchInfo.html",
    "title": "Struct EntityRemapUtility.BufferEntityPatchInfo | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct EntityRemapUtility.BufferEntityPatchInfo Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct BufferEntityPatchInfo Fields BufferOffset Declaration public int BufferOffset Field Value Type Description Int32 BufferStride Declaration public int BufferStride Field Value Type Description Int32 ElementOffset Declaration public int ElementOffset Field Value Type Description Int32 ElementStride Declaration public int ElementStride Field Value Type Description Int32"
  },
  "api/Unity.Build.Common.BuildSettingsExtensions.html": {
    "href": "api/Unity.Build.Common.BuildSettingsExtensions.html",
    "title": "Class BuildSettingsExtensions | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class BuildSettingsExtensions Inheritance Object BuildSettingsExtensions Namespace : Unity.Build.Common <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class BuildSettingsExtensions Methods GetOutputBuildDirectory(BuildSettings) Get the output build directory for this BuildSettings . The output build directory can be overridden using a OutputBuildDirectory component. Declaration public static string GetOutputBuildDirectory(this BuildSettings settings) Parameters Type Name Description BuildSettings settings This build settings. Returns Type Description String The output build directory."
  },
  "api/Unity.Entities.EntityCommandBuffer.html": {
    "href": "api/Unity.Entities.EntityCommandBuffer.html",
    "title": "Struct EntityCommandBuffer | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct EntityCommandBuffer A thread-safe command buffer that can buffer commands that affect entities and components for later playback. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct EntityCommandBuffer : IDisposable Constructors EntityCommandBuffer(Allocator) Creates a new command buffer. Declaration public EntityCommandBuffer(Allocator label) Parameters Type Name Description Allocator label Memory allocator to use for chunks and data Properties IsCreated Declaration public bool IsCreated { get; } Property Value Type Description Boolean MinimumChunkSize Allows controlling the size of chunks allocated from the temp job allocator to back the command buffer. Declaration public int MinimumChunkSize { get; set; } Property Value Type Description Int32 ShouldPlayback Controls whether this command buffer should play back. Declaration public bool ShouldPlayback { get; set; } Property Value Type Description Boolean Methods AddBuffer<T>(Entity) Declaration public DynamicBuffer<T> AddBuffer<T>(Entity e) where T : struct, IBufferElementData Parameters Type Name Description Entity e Returns Type Description DynamicBuffer <T> Type Parameters Name Description T AddComponent(Entity, ComponentType) Declaration public void AddComponent(Entity e, ComponentType componentType) Parameters Type Name Description Entity e ComponentType componentType AddComponent(EntityQuery, ComponentType) Declaration public void AddComponent(EntityQuery entityQuery, ComponentType componentType) Parameters Type Name Description EntityQuery entityQuery ComponentType componentType AddComponent<T>(Entity) Declaration public void AddComponent<T>(Entity e) where T : struct, IComponentData Parameters Type Name Description Entity e Type Parameters Name Description T AddComponent<T>(Entity, T) Declaration public void AddComponent<T>(Entity e, T component) where T : struct, IComponentData Parameters Type Name Description Entity e T component Type Parameters Name Description T AddSharedComponent<T>(Entity, T) Declaration public void AddSharedComponent<T>(Entity e, T component) where T : struct, ISharedComponentData Parameters Type Name Description Entity e T component Type Parameters Name Description T AddSharedComponent<T>(EntityQuery, T) Declaration public void AddSharedComponent<T>(EntityQuery entityQuery, T component) where T : struct, ISharedComponentData Parameters Type Name Description EntityQuery entityQuery T component Type Parameters Name Description T CreateEntity(EntityArchetype) Declaration public Entity CreateEntity(EntityArchetype archetype = default(EntityArchetype)) Parameters Type Name Description EntityArchetype archetype Returns Type Description Entity DestroyEntity(Entity) Declaration public void DestroyEntity(Entity e) Parameters Type Name Description Entity e DestroyEntity(EntityQuery) Declaration public void DestroyEntity(EntityQuery entityQuery) Parameters Type Name Description EntityQuery entityQuery Dispose() Declaration public void Dispose() Instantiate(Entity) Declaration public Entity Instantiate(Entity e) Parameters Type Name Description Entity e Returns Type Description Entity Playback(EntityManager) Play back all recorded operations against an entity manager. Declaration public void Playback(EntityManager mgr) Parameters Type Name Description EntityManager mgr The entity manager that will receive the operations Playback(ExclusiveEntityTransaction) Play back all recorded operations with an exclusive entity transaction. BeginExclusiveEntityTransaction() . Declaration public void Playback(ExclusiveEntityTransaction mgr) Parameters Type Name Description ExclusiveEntityTransaction mgr The exclusive entity transaction that will process the operations RemoveComponent(Entity, ComponentType) Declaration public void RemoveComponent(Entity e, ComponentType componentType) Parameters Type Name Description Entity e ComponentType componentType RemoveComponent(EntityQuery, ComponentType) Declaration public void RemoveComponent(EntityQuery entityQuery, ComponentType componentType) Parameters Type Name Description EntityQuery entityQuery ComponentType componentType RemoveComponent<T>(Entity) Declaration public void RemoveComponent<T>(Entity e) Parameters Type Name Description Entity e Type Parameters Name Description T SetBuffer<T>(Entity) Declaration public DynamicBuffer<T> SetBuffer<T>(Entity e) where T : struct, IBufferElementData Parameters Type Name Description Entity e Returns Type Description DynamicBuffer <T> Type Parameters Name Description T SetComponent<T>(Entity, T) Declaration public void SetComponent<T>(Entity e, T component) where T : struct, IComponentData Parameters Type Name Description Entity e T component Type Parameters Name Description T SetSharedComponent<T>(Entity, T) Declaration public void SetSharedComponent<T>(Entity e, T component) where T : struct, ISharedComponentData Parameters Type Name Description Entity e T component Type Parameters Name Description T ToConcurrent() Declaration public EntityCommandBuffer.Concurrent ToConcurrent() Returns Type Description EntityCommandBuffer.Concurrent Extension Methods EntityCommandBufferManagedComponentExtensions.AddComponent<T>(EntityCommandBuffer, Entity, T) EntityCommandBufferManagedComponentExtensions.AddComponent<T>(EntityCommandBuffer, Entity) EntityCommandBufferManagedComponentExtensions.SetComponent<T>(EntityCommandBuffer, Entity, T)"
  },
  "api/Unity.Entities.EntityCommandBuffer.Concurrent.html": {
    "href": "api/Unity.Entities.EntityCommandBuffer.Concurrent.html",
    "title": "Struct EntityCommandBuffer.Concurrent | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct EntityCommandBuffer.Concurrent Allows concurrent (deterministic) command buffer recording. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct Concurrent Methods AddBuffer<T>(Int32, Entity) Declaration public DynamicBuffer<T> AddBuffer<T>(int jobIndex, Entity e) where T : struct, IBufferElementData Parameters Type Name Description Int32 jobIndex Entity e Returns Type Description DynamicBuffer <T> Type Parameters Name Description T AddComponent(Int32, Entity, ComponentType) Declaration public void AddComponent(int jobIndex, Entity e, ComponentType componentType) Parameters Type Name Description Int32 jobIndex Entity e ComponentType componentType AddComponent<T>(Int32, Entity) Declaration public void AddComponent<T>(int jobIndex, Entity e) where T : struct, IComponentData Parameters Type Name Description Int32 jobIndex Entity e Type Parameters Name Description T AddComponent<T>(Int32, Entity, T) Declaration public void AddComponent<T>(int jobIndex, Entity e, T component) where T : struct, IComponentData Parameters Type Name Description Int32 jobIndex Entity e T component Type Parameters Name Description T AddSharedComponent<T>(Int32, Entity, T) Declaration public void AddSharedComponent<T>(int jobIndex, Entity e, T component) where T : struct, ISharedComponentData Parameters Type Name Description Int32 jobIndex Entity e T component Type Parameters Name Description T CreateEntity(Int32, EntityArchetype) Declaration public Entity CreateEntity(int jobIndex, EntityArchetype archetype = default(EntityArchetype)) Parameters Type Name Description Int32 jobIndex EntityArchetype archetype Returns Type Description Entity DestroyEntity(Int32, Entity) Declaration public void DestroyEntity(int jobIndex, Entity e) Parameters Type Name Description Int32 jobIndex Entity e Instantiate(Int32, Entity) Declaration public Entity Instantiate(int jobIndex, Entity e) Parameters Type Name Description Int32 jobIndex Entity e Returns Type Description Entity RemoveComponent(Int32, Entity, ComponentType) Declaration public void RemoveComponent(int jobIndex, Entity e, ComponentType componentType) Parameters Type Name Description Int32 jobIndex Entity e ComponentType componentType RemoveComponent<T>(Int32, Entity) Declaration public void RemoveComponent<T>(int jobIndex, Entity e) Parameters Type Name Description Int32 jobIndex Entity e Type Parameters Name Description T SetBuffer<T>(Int32, Entity) Declaration public DynamicBuffer<T> SetBuffer<T>(int jobIndex, Entity e) where T : struct, IBufferElementData Parameters Type Name Description Int32 jobIndex Entity e Returns Type Description DynamicBuffer <T> Type Parameters Name Description T SetComponent<T>(Int32, Entity, T) Declaration public void SetComponent<T>(int jobIndex, Entity e, T component) where T : struct, IComponentData Parameters Type Name Description Int32 jobIndex Entity e T component Type Parameters Name Description T SetSharedComponent<T>(Int32, Entity, T) Declaration public void SetSharedComponent<T>(int jobIndex, Entity e, T component) where T : struct, ISharedComponentData Parameters Type Name Description Int32 jobIndex Entity e T component Type Parameters Name Description T"
  },
  "api/Unity.Entities.BlobAssetReference-1.html": {
    "href": "api/Unity.Entities.BlobAssetReference-1.html",
    "title": "Struct BlobAssetReference<T> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct BlobAssetReference<T> A reference to a blob asset stored in unmanaged memory. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct BlobAssetReference<T> : IDisposable, IEquatable<BlobAssetReference<T>> where T : struct Type Parameters Name Description T The struct data type defining the data structure of the blob asset. Remarks Create a blob asset using a BlobBuilder or by deserializing a serialized blob asset. Properties IsCreated Reports whether this instance references a valid blob asset. Declaration public bool IsCreated { get; } Property Value Type Description Boolean True, if this instance references a valid blob instance. Null A \"null\" blob asset reference that can be used to test if a BlobAssetReference instance Declaration public static BlobAssetReference<T> Null { get; } Property Value Type Description BlobAssetReference <T> Value A reference to the blob asset data. Declaration public T Value { get; } Property Value Type Description T The root data structure of the blob asset data. Remarks The property is a reference return . Methods Create(T) Creates a blob asset from an instance of a struct. Declaration public static BlobAssetReference<T> Create(T value) Parameters Type Name Description T value An instance of T . Returns Type Description BlobAssetReference <T> A reference to newly created blob asset. Remarks The struct must only contain blittable fields (primitive types, fixed-length arrays, or other structs meeting these same criteria). The blob asset is created in unmanaged memory. Call Dispose() to free the asset memory when it is no longer needed. This function can only be used in an context. See Also BlobBuilder Create(Byte[]) Creates a blob asset from a byte array. Declaration public static BlobAssetReference<T> Create(byte[] data) Parameters Type Name Description Byte [] data The byte array containing the data to store in the blob asset. Returns Type Description BlobAssetReference <T> A reference to newly created blob asset. Remarks The blob asset is created in unmanaged memory. Call Dispose() to free the asset memory when it is no longer needed. This function can only be used in an context. See Also BlobBuilder Create(Void*, Int32) Creates a blob asset from a pointer to data and a specified size. Declaration public static BlobAssetReference<T> Create(void *ptr, int length) Parameters Type Name Description Void * ptr A pointer to the buffer containing the data to store in the blob asset. Int32 length The length of the buffer in bytes. Returns Type Description BlobAssetReference <T> A reference to newly created blob asset. Remarks The blob asset is created in unmanaged memory. Call Dispose() to free the asset memory when it is no longer needed. This function can only be used in an context. See Also BlobBuilder Dispose() Destroys the referenced blob asset and frees its memory. Declaration public void Dispose() Exceptions Type Condition InvalidOperationException Thrown if you attempt to dispose a blob asset that loaded as part of a scene or subscene. Equals(Object) Two BlobAssetReferences are equal when they reference the same data. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare to this reference Returns Type Description Boolean True, if the object is a BlobAssetReference instance that references to the same data as this one, or if both objects are Null BlobAssetReference instances. Overrides ValueType.Equals(Object) Equals(BlobAssetReference<T>) Two BlobAssetReferences are equal when they reference the same data. Declaration public bool Equals(BlobAssetReference<T> other) Parameters Type Name Description BlobAssetReference <T> other The reference to compare to this one. Returns Type Description Boolean True, if both references point to the same data or if both are Null . GetHashCode() Generates the hash code for this object. Declaration public override int GetHashCode() Returns Type Description Int32 A standard C# value-type hash code. Overrides ValueType.GetHashCode() GetUnsafePtr() Provides an unsafe pointer to the blob asset data. Declaration public void *GetUnsafePtr() Returns Type Description Void * An unsafe pointer. The pointer is null for invalid BlobAssetReference instances. Remarks You can only use unsafe pointers in contexts. Release() Declaration public void Release() TryRead(String, Int32, out BlobAssetReference<T>) Reads bytes from a fileName, validates the expected serialized version, and deserializes them into a new blob asset. Declaration public static bool TryRead(string path, int version, out BlobAssetReference<T> result) Parameters Type Name Description String path The path of the blob data to read. Int32 version Expected version number of the blob data. BlobAssetReference <T> result The resulting BlobAssetReference if the data was read successful. Returns Type Description Boolean A bool if the read was successful or not. Write(BlobBuilder, String, Int32) Writes the blob data to a path with serialized version. Declaration public static void Write(BlobBuilder builder, string path, int verison) Parameters Type Name Description BlobBuilder builder The BlobBuilder containing the blob to write. String path The path to write the blob data. Int32 verison Operators Equality(BlobAssetReference<T>, BlobAssetReference<T>) Two BlobAssetReferences are equal when they reference the same data. Declaration public static bool operator ==(BlobAssetReference<T> lhs, BlobAssetReference<T> rhs) Parameters Type Name Description BlobAssetReference <T> lhs The BlobAssetReference on the left side of the operator. BlobAssetReference <T> rhs The BlobAssetReference on the right side of the operator. Returns Type Description Boolean True, if both references point to the same data or if both are Null . Inequality(BlobAssetReference<T>, BlobAssetReference<T>) Two BlobAssetReferences are not equal unless they reference the same data. Declaration public static bool operator !=(BlobAssetReference<T> lhs, BlobAssetReference<T> rhs) Parameters Type Name Description BlobAssetReference <T> lhs The BlobAssetReference on the left side of the operator. BlobAssetReference <T> rhs The BlobAssetReference on the right side of the operator. Returns Type Description Boolean True, if the references point to different data in memory or if one is Null ."
  },
  "api/Unity.Entities.BlobAssetComputationContext-2.html": {
    "href": "api/Unity.Entities.BlobAssetComputationContext-2.html",
    "title": "Struct BlobAssetComputationContext<TS, TB> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct BlobAssetComputationContext<TS, TB> The BlobAssetComputationContext must be used during Authoring to ECS conversion process to detect which BlobAsset should be computed and to declare their association with a GameObject Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct BlobAssetComputationContext<TS, TB> : IDisposable where TS : struct where TB : struct Type Parameters Name Description TS The type of the setting struct to be used to generate the BlobAsset TB The type of the BlobAsset to generate Remarks The context must typically be used in a three stages conversion process, for given type of BlobAsset to process. Multiple context can be used if multiple BlobAsset types are generated. Stages: 1) Each Authoring component to convert are evaluated> The user calls AssociateBlobAssetWithGameObject(Hash128, GameObject) to declare the association between the GameObject owning the Authoring component and the BlobAsset being processed. Then NeedToComputeBlobAsset(Hash128) is called to determine if the BlobAsset needs to be computed or if it's already in the store (or registered for computation). The user creates the setting object that contains the necessary information to create the BlobAsset later on and calls AddBlobAssetToCompute(Hash128, TS) . 2) The user creates a job to compute all BlobAsset and calls GetSettings(Allocator) to feed the job with the settings of each BlobAsset to compute. During the job execution, the BlobAsset will be created and typically stored in a result array. After the job is done, the user must call AddComputedBlobAsset(Hash128, BlobAssetReference<TB>) to add the newly created BlobAsset to the context (and the Store) 3) The user create ECS Components and attaches the BlobAsset by calling GetBlobAsset(Hash128, out BlobAssetReference<TB>) . When the context will be disposed (typically after the conversion process is done), the store will be updated with the new associations between the BlobAsset and the GameObject(s) that use them. If a BlobAsset is no longer used by any GameObject, it will be disposed. Thread-safety: main thread only. Constructors BlobAssetComputationContext(BlobAssetStore, Int32, Allocator) Declaration public BlobAssetComputationContext(BlobAssetStore blobAssetStore, int initialCapacity, Allocator allocator) Parameters Type Name Description BlobAssetStore blobAssetStore Int32 initialCapacity Allocator allocator Properties IsCreated Declaration public bool IsCreated { get; } Property Value Type Description Boolean Methods AddBlobAssetToCompute(Hash128, TS) Call this method to record a setting object that will be used to compute a BlobAsset Declaration public void AddBlobAssetToCompute(Hash128 hash, TS settings) Parameters Type Name Description Hash128 hash The hash associated with the BlobAsset TS settings The setting object to store AddComputedBlobAsset(Hash128, BlobAssetReference<TB>) Add a newly created BlobAsset in the context and its Store. Declaration public void AddComputedBlobAsset(Hash128 hash, BlobAssetReference<TB> blob) Parameters Type Name Description Hash128 hash The hash associated to the BlobAsset BlobAssetReference <TB> blob The BlobAsset to add AssociateBlobAssetWithGameObject(Hash128, GameObject) Declare the BlobAsset being associated with the given GameObject Declaration public void AssociateBlobAssetWithGameObject(Hash128 hash, GameObject gameObject) Parameters Type Name Description Hash128 hash The hash associated to the BlobAsset GameObject gameObject The GameObject associated with the BlobAsset Remarks One of the role of the BlobAssetComputationContext<TS, TB> is to track the new association between Authoring GameObject and BlobAsset and report them to the BlobAssetStore to automatically track the life-time of the BlobAssetReference<T> and release the instances that are no longer used. Dispose() Dispose the Computation context, update the BlobAssetStore with the new BlobAsset/GameObject associations Declaration public void Dispose() Remarks This method will calls UpdateBlobStore() to ensure the store is up to date. GetBlobAsset(Hash128, out BlobAssetReference<TB>) Get the blob asset for the corresponding hash Declaration public bool GetBlobAsset(Hash128 hash, out BlobAssetReference<TB> blob) Parameters Type Name Description Hash128 hash The hash associated with the BlobAsset BlobAssetReference <TB> blob The BlobAsset corresponding to the given Hash Returns Type Description Boolean true if the blob asset was found, false otherwise GetSettings(Allocator) Declaration public NativeArray<TS> GetSettings(Allocator allocator) Parameters Type Name Description Allocator allocator Returns Type Description NativeArray <TS> NeedToComputeBlobAsset(Hash128) During the conversion process, the user must call this method for each BlobAsset being processed, to determine if it requires to be computed Declaration public bool NeedToComputeBlobAsset(Hash128 hash) Parameters Type Name Description Hash128 hash The hash associated to the BlobAsset Returns Type Description Boolean true if the BlobAsset must be computed, false if it's already in the store or the computing queue UpdateBlobStore() Update the store with the recorded BlobAsset/GameObject associations. Declaration public void UpdateBlobStore() Remarks User don't have to call this method because Dispose() will do it. This method can be called multiple times, on the first one will matter."
  },
  "api/Unity.Entities.Asset.html": {
    "href": "api/Unity.Entities.Asset.html",
    "title": "Struct Asset | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct Asset Marks the entity as an asset, which is used for the Export phase of GameObject conversion. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct Asset : IComponentData"
  },
  "api/Unity.Build.Common.TemporaryFileTracker.html": {
    "href": "api/Unity.Build.Common.TemporaryFileTracker.html",
    "title": "Class TemporaryFileTracker | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class TemporaryFileTracker Inheritance Object TemporaryFileTracker Namespace : Unity.Build.Common <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class TemporaryFileTracker : IDisposable Methods Clear() Declaration public void Clear() CreateDirectory(String) Declaration public void CreateDirectory(string path) Parameters Type Name Description String path Dispose() Declaration public void Dispose() EnsureFileDoesntExist(String) Declaration public void EnsureFileDoesntExist(string path) Parameters Type Name Description String path TrackFile(String, Boolean) Declaration public string TrackFile(string path, bool ensureDoesntExist = true) Parameters Type Name Description String path Boolean ensureDoesntExist Returns Type Description String"
  },
  "api/Unity.Build.Common.BuildArtifactDesktop.html": {
    "href": "api/Unity.Build.Common.BuildArtifactDesktop.html",
    "title": "Class BuildArtifactDesktop | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class BuildArtifactDesktop Inheritance Object BuildArtifactDesktop Namespace : Unity.Build.Common <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public sealed class BuildArtifactDesktop : IBuildArtifact Fields OutputTargetFile Declaration public FileInfo OutputTargetFile Field Value Type Description FileInfo"
  },
  "api/Unity.Entities.EntityGuid.html": {
    "href": "api/Unity.Entities.EntityGuid.html",
    "title": "Struct EntityGuid | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct EntityGuid This component is attached to converted Entities and is guaranteed to be unique within a World. It can be used to map back to the authoring GameObject from which it was converted. Note that an EntityGuid does not have enough information to be persistent across sessions. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] public struct EntityGuid : IComponentData, IEquatable<EntityGuid>, IComparable<EntityGuid> Constructors EntityGuid(Int32, Byte, UInt32) Declaration public EntityGuid(int originatingId, byte namespaceId, uint serial) Parameters Type Name Description Int32 originatingId Byte namespaceId UInt32 serial Fields a This field, when combined with b , is for working with EntityGuid as opaque bits (the packing may change again in the future, as there are still unused bits remaining). Declaration public ulong a Field Value Type Description UInt64 b Use same as a field. Declaration public ulong b Field Value Type Description UInt64 Null Declaration public static readonly EntityGuid Null Field Value Type Description EntityGuid Properties NamespaceId An ID that supports multiple primary groupings of converted Entities with the same originating object. ID zero is reserved for default conversions. Nonzero ID's are for the developer to manage. Declaration public byte NamespaceId { get; } Property Value Type Description Byte OriginatingId Session-unique ID for originating object (typically the authoring GameObject's InstanceID). Declaration public int OriginatingId { get; } Property Value Type Description Int32 Serial A unique number used to differentiate Entities associated with the same originating object and namespace. Declaration public uint Serial { get; } Property Value Type Description UInt32 Methods CompareTo(EntityGuid) Declaration public int CompareTo(EntityGuid other) Parameters Type Name Description EntityGuid other Returns Type Description Int32 Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object) Equals(EntityGuid) Declaration public bool Equals(EntityGuid other) Parameters Type Name Description EntityGuid other Returns Type Description Boolean GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() ToString() Declaration public override string ToString() Returns Type Description String Overrides ValueType.ToString() Operators Equality(EntityGuid, EntityGuid) Declaration public static bool operator ==(in EntityGuid lhs, in EntityGuid rhs) Parameters Type Name Description EntityGuid lhs EntityGuid rhs Returns Type Description Boolean Inequality(EntityGuid, EntityGuid) Declaration public static bool operator !=(in EntityGuid lhs, in EntityGuid rhs) Parameters Type Name Description EntityGuid lhs EntityGuid rhs Returns Type Description Boolean"
  },
  "api/Unity.Entities.EntityContainerPropertyBag.html": {
    "href": "api/Unity.Entities.EntityContainerPropertyBag.html",
    "title": "Class EntityContainerPropertyBag | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class EntityContainerPropertyBag Inheritance Object EntityContainerPropertyBag Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class EntityContainerPropertyBag : PropertyBag<EntityContainer> Methods Accept<TVisitor>(ref EntityContainer, ref TVisitor, ref ChangeTracker) Declaration public override void Accept<TVisitor>(ref EntityContainer container, ref TVisitor visitor, ref ChangeTracker changeTracker) Parameters Type Name Description EntityContainer container TVisitor visitor ChangeTracker changeTracker Type Parameters Name Description TVisitor FindProperty<TAction>(String, ref EntityContainer, ref ChangeTracker, ref TAction) Declaration public override bool FindProperty<TAction>(string name, ref EntityContainer container, ref ChangeTracker changeTracker, ref TAction action) Parameters Type Name Description String name EntityContainer container ChangeTracker changeTracker TAction action Returns Type Description Boolean Type Parameters Name Description TAction"
  },
  "api/Unity.Entities.EntityContainer.html": {
    "href": "api/Unity.Entities.EntityContainer.html",
    "title": "Struct EntityContainer | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct EntityContainer Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct EntityContainer Constructors EntityContainer(EntityManager, Entity, Boolean) Declaration public EntityContainer(EntityManager entityManager, Entity entity, bool readOnly = true) Parameters Type Name Description EntityManager entityManager Entity entity Boolean readOnly Fields Entity Declaration public readonly Entity Entity Field Value Type Description Entity EntityManager Declaration public readonly EntityManager EntityManager Field Value Type Description EntityManager IsReadOnly Declaration public readonly bool IsReadOnly Field Value Type Description Boolean Methods GetComponentCount() Declaration public int GetComponentCount() Returns Type Description Int32"
  },
  "api/Unity.Transforms.PostRotationEulerXZY.html": {
    "href": "api/Unity.Transforms.PostRotationEulerXZY.html",
    "title": "Struct PostRotationEulerXZY | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct PostRotationEulerXZY Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] [WriteGroup(typeof(PostRotation))] public struct PostRotationEulerXZY : IComponentData Fields Value Declaration public float3 Value Field Value Type Description float3"
  },
  "api/Unity.Transforms.PostRotationEulerXYZ.html": {
    "href": "api/Unity.Transforms.PostRotationEulerXYZ.html",
    "title": "Struct PostRotationEulerXYZ | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct PostRotationEulerXYZ Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] [WriteGroup(typeof(PostRotation))] public struct PostRotationEulerXYZ : IComponentData Fields Value Declaration public float3 Value Field Value Type Description float3"
  },
  "api/Unity.Transforms.PostRotationEulerSystem.html": {
    "href": "api/Unity.Transforms.PostRotationEulerSystem.html",
    "title": "Class PostRotationEulerSystem | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class PostRotationEulerSystem Inheritance Object ComponentSystemBase JobComponentSystem PostRotationEulerSystem EndFramePostRotationEulerSystem Inherited Members JobComponentSystem.Entities JobComponentSystem.Job JobComponentSystem.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnDestroyManager() ComponentSystemBase.OnCreateManager() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.Update() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetArchetypeChunkComponentType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkComponentTypeDynamic(ComponentType) ComponentSystemBase.GetArchetypeChunkBufferType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkSharedComponentType<T>() ComponentSystemBase.GetArchetypeChunkEntityType() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public abstract class PostRotationEulerSystem : JobComponentSystem Methods OnCreate() Declaration protected override void OnCreate() Overrides ComponentSystemBase.OnCreate() OnUpdate(JobHandle) Declaration protected override JobHandle OnUpdate(JobHandle inputDependencies) Parameters Type Name Description JobHandle inputDependencies Returns Type Description JobHandle Overrides JobComponentSystem.OnUpdate(JobHandle) Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Transforms.PostRotation.html": {
    "href": "api/Unity.Transforms.PostRotation.html",
    "title": "Struct PostRotation | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct PostRotation Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] [WriteGroup(typeof(CompositeRotation))] public struct PostRotation : IComponentData Fields Value Declaration public quaternion Value Field Value Type Description quaternion"
  },
  "api/Unity.Transforms.ParentSystem.html": {
    "href": "api/Unity.Transforms.ParentSystem.html",
    "title": "Class ParentSystem | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class ParentSystem Inheritance Object ComponentSystemBase JobComponentSystem ParentSystem EndFrameParentSystem Inherited Members JobComponentSystem.Entities JobComponentSystem.Job JobComponentSystem.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnDestroyManager() ComponentSystemBase.OnCreateManager() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.Update() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetArchetypeChunkComponentType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkComponentTypeDynamic(ComponentType) ComponentSystemBase.GetArchetypeChunkBufferType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkSharedComponentType<T>() ComponentSystemBase.GetArchetypeChunkEntityType() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public abstract class ParentSystem : JobComponentSystem Methods OnCreate() Declaration protected override void OnCreate() Overrides ComponentSystemBase.OnCreate() OnUpdate(JobHandle) Declaration protected override JobHandle OnUpdate(JobHandle inputDeps) Parameters Type Name Description JobHandle inputDeps Returns Type Description JobHandle Overrides JobComponentSystem.OnUpdate(JobHandle) Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Transforms.ParentScaleInverseSystem.html": {
    "href": "api/Unity.Transforms.ParentScaleInverseSystem.html",
    "title": "Class ParentScaleInverseSystem | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class ParentScaleInverseSystem Inheritance Object ComponentSystemBase JobComponentSystem ParentScaleInverseSystem EndFrameParentScaleInverseSystem Inherited Members JobComponentSystem.Entities JobComponentSystem.Job JobComponentSystem.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnDestroyManager() ComponentSystemBase.OnCreateManager() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.Update() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetArchetypeChunkComponentType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkComponentTypeDynamic(ComponentType) ComponentSystemBase.GetArchetypeChunkBufferType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkSharedComponentType<T>() ComponentSystemBase.GetArchetypeChunkEntityType() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public abstract class ParentScaleInverseSystem : JobComponentSystem Methods OnCreate() Declaration protected override void OnCreate() Overrides ComponentSystemBase.OnCreate() OnUpdate(JobHandle) Declaration protected override JobHandle OnUpdate(JobHandle inputDeps) Parameters Type Name Description JobHandle inputDeps Returns Type Description JobHandle Overrides JobComponentSystem.OnUpdate(JobHandle) Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Transforms.ParentScaleInverse.html": {
    "href": "api/Unity.Transforms.ParentScaleInverse.html",
    "title": "Struct ParentScaleInverse | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct ParentScaleInverse Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] [WriteGroup(typeof(LocalToParent))] public struct ParentScaleInverse : IComponentData Fields Value Declaration public float4x4 Value Field Value Type Description float4x4 Properties Forward Declaration public float3 Forward { get; } Property Value Type Description float3 Position Declaration public float3 Position { get; } Property Value Type Description float3 Right Declaration public float3 Right { get; } Property Value Type Description float3 Up Declaration public float3 Up { get; } Property Value Type Description float3"
  },
  "api/Unity.Transforms.Parent.html": {
    "href": "api/Unity.Transforms.Parent.html",
    "title": "Struct Parent | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct Parent Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] [WriteGroup(typeof(LocalToWorld))] public struct Parent : IComponentData Fields Value Declaration public Entity Value Field Value Type Description Entity"
  },
  "api/Unity.Transforms.NonUniformScaleProxy.html": {
    "href": "api/Unity.Transforms.NonUniformScaleProxy.html",
    "title": "Class NonUniformScaleProxy | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class NonUniformScaleProxy Inheritance Object ComponentDataProxyBase ComponentDataProxy < NonUniformScale > NonUniformScaleProxy Inherited Members ComponentDataProxy<NonUniformScale>.ValidateSerializedData(NonUniformScale) ComponentDataProxy<NonUniformScale>.Value ComponentDataProxyBase.OnEnable() ComponentDataProxyBase.OnDisable() Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class NonUniformScaleProxy : ComponentDataProxy<NonUniformScale>, ISerializationCallbackReceiver"
  },
  "api/Unity.Transforms.NonUniformScale.html": {
    "href": "api/Unity.Transforms.NonUniformScale.html",
    "title": "Struct NonUniformScale | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct NonUniformScale Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] [WriteGroup(typeof(LocalToWorld))] [WriteGroup(typeof(LocalToParent))] [WriteGroup(typeof(CompositeScale))] [WriteGroup(typeof(ParentScaleInverse))] public struct NonUniformScale : IComponentData Fields Value Declaration public float3 Value Field Value Type Description float3"
  },
  "api/Unity.Transforms.LocalToWorldProxy.html": {
    "href": "api/Unity.Transforms.LocalToWorldProxy.html",
    "title": "Class LocalToWorldProxy | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class LocalToWorldProxy Inheritance Object ComponentDataProxyBase ComponentDataProxy < LocalToWorld > LocalToWorldProxy Inherited Members ComponentDataProxy<LocalToWorld>.ValidateSerializedData(LocalToWorld) ComponentDataProxy<LocalToWorld>.Value ComponentDataProxyBase.OnEnable() ComponentDataProxyBase.OnDisable() Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class LocalToWorldProxy : ComponentDataProxy<LocalToWorld>, ISerializationCallbackReceiver"
  },
  "api/Unity.Transforms.LocalToWorld.html": {
    "href": "api/Unity.Transforms.LocalToWorld.html",
    "title": "Struct LocalToWorld | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct LocalToWorld Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] [WriteGroup(typeof(WorldToLocal))] public struct LocalToWorld : IComponentData Fields Value Declaration public float4x4 Value Field Value Type Description float4x4 Properties Forward Declaration public float3 Forward { get; } Property Value Type Description float3 Position Declaration public float3 Position { get; } Property Value Type Description float3 Right Declaration public float3 Right { get; } Property Value Type Description float3 Rotation Declaration public quaternion Rotation { get; } Property Value Type Description quaternion Up Declaration public float3 Up { get; } Property Value Type Description float3"
  },
  "api/Unity.Transforms.LocalToParentSystem.html": {
    "href": "api/Unity.Transforms.LocalToParentSystem.html",
    "title": "Class LocalToParentSystem | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class LocalToParentSystem Inheritance Object ComponentSystemBase JobComponentSystem LocalToParentSystem EndFrameLocalToParentSystem Inherited Members JobComponentSystem.Entities JobComponentSystem.Job JobComponentSystem.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnDestroyManager() ComponentSystemBase.OnCreateManager() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.Update() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetArchetypeChunkComponentType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkComponentTypeDynamic(ComponentType) ComponentSystemBase.GetArchetypeChunkBufferType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkSharedComponentType<T>() ComponentSystemBase.GetArchetypeChunkEntityType() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public abstract class LocalToParentSystem : JobComponentSystem Methods OnCreate() Declaration protected override void OnCreate() Overrides ComponentSystemBase.OnCreate() OnUpdate(JobHandle) Declaration protected override JobHandle OnUpdate(JobHandle inputDeps) Parameters Type Name Description JobHandle inputDeps Returns Type Description JobHandle Overrides JobComponentSystem.OnUpdate(JobHandle) Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Transforms.LocalToParent.html": {
    "href": "api/Unity.Transforms.LocalToParent.html",
    "title": "Struct LocalToParent | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct LocalToParent Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] [WriteGroup(typeof(LocalToWorld))] public struct LocalToParent : IComponentData Fields Value Declaration public float4x4 Value Field Value Type Description float4x4 Properties Forward Declaration public float3 Forward { get; } Property Value Type Description float3 Position Declaration public float3 Position { get; } Property Value Type Description float3 Right Declaration public float3 Right { get; } Property Value Type Description float3 Up Declaration public float3 Up { get; } Property Value Type Description float3"
  },
  "api/Unity.Transforms.Frozen.html": {
    "href": "api/Unity.Transforms.Frozen.html",
    "title": "Struct Frozen | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct Frozen Frozen is added by system when Static is resolved. Signals that LocalToWorld will no longer be updated. Read-only from other systems. User responsible for removing. Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct Frozen : IComponentData"
  },
  "api/Unity.Transforms.CompositeRotationSystem.html": {
    "href": "api/Unity.Transforms.CompositeRotationSystem.html",
    "title": "Class CompositeRotationSystem | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class CompositeRotationSystem Inheritance Object ComponentSystemBase JobComponentSystem CompositeRotationSystem EndFrameCompositeRotationSystem Inherited Members JobComponentSystem.Entities JobComponentSystem.Job JobComponentSystem.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnDestroyManager() ComponentSystemBase.OnCreateManager() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.Update() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetArchetypeChunkComponentType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkComponentTypeDynamic(ComponentType) ComponentSystemBase.GetArchetypeChunkBufferType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkSharedComponentType<T>() ComponentSystemBase.GetArchetypeChunkEntityType() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public abstract class CompositeRotationSystem : JobComponentSystem Methods OnCreate() Declaration protected override void OnCreate() Overrides ComponentSystemBase.OnCreate() OnUpdate(JobHandle) Declaration protected override JobHandle OnUpdate(JobHandle inputDeps) Parameters Type Name Description JobHandle inputDeps Returns Type Description JobHandle Overrides JobComponentSystem.OnUpdate(JobHandle) Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Transforms.CompositeRotation.html": {
    "href": "api/Unity.Transforms.CompositeRotation.html",
    "title": "Struct CompositeRotation | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct CompositeRotation Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] [WriteGroup(typeof(LocalToWorld))] [WriteGroup(typeof(LocalToParent))] public struct CompositeRotation : IComponentData Fields Value Declaration public float4x4 Value Field Value Type Description float4x4"
  },
  "api/Unity.Transforms.Child.html": {
    "href": "api/Unity.Transforms.Child.html",
    "title": "Struct Child | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct Child Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] [InternalBufferCapacity(8)] [WriteGroup(typeof(ParentScaleInverse))] public struct Child : ISystemStateBufferElementData, IBufferElementData Fields Value Declaration public Entity Value Field Value Type Description Entity"
  },
  "api/Unity.Transforms.BoneIndexOffset.html": {
    "href": "api/Unity.Transforms.BoneIndexOffset.html",
    "title": "Struct BoneIndexOffset | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct BoneIndexOffset Holds the index offset at which the skin matrices of this entity are stored in the buffer containing all skin matrices. Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct BoneIndexOffset : IComponentData Fields Value Declaration public float Value Field Value Type Description Single"
  },
  "api/Unity.Mathematics.AABB.html": {
    "href": "api/Unity.Mathematics.AABB.html",
    "title": "Struct AABB | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct AABB Namespace : Unity.Mathematics <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] public struct AABB Fields Center Declaration public float3 Center Field Value Type Description float3 Extents Declaration public float3 Extents Field Value Type Description float3 Properties Max Declaration public float3 Max { get; } Property Value Type Description float3 Min Declaration public float3 Min { get; } Property Value Type Description float3 Size Declaration public float3 Size { get; } Property Value Type Description float3 Methods Contains(float3) Declaration public bool Contains(float3 point) Parameters Type Name Description float3 point Returns Type Description Boolean Contains(AABB) Declaration public bool Contains(AABB b) Parameters Type Name Description AABB b Returns Type Description Boolean DistanceSq(float3) Declaration public float DistanceSq(float3 point) Parameters Type Name Description float3 point Returns Type Description Single ToString() Returns a string representation of the AABB. Declaration public override string ToString() Returns Type Description String Overrides ValueType.ToString() Transform(float4x4, AABB) Declaration public static AABB Transform(float4x4 transform, AABB localBounds) Parameters Type Name Description float4x4 transform AABB localBounds Returns Type Description AABB Extension Methods AABBExtensions.ToBounds(AABB)"
  },
  "api/Unity.Entities.ComponentSystemGroup.html": {
    "href": "api/Unity.Entities.ComponentSystemGroup.html",
    "title": "Class ComponentSystemGroup | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class ComponentSystemGroup Inheritance Object ComponentSystemBase ComponentSystem ComponentSystemGroup InitializationSystemGroup LateSimulationSystemGroup PresentationSystemGroup SimulationSystemGroup TransformSystemGroup Inherited Members ComponentSystem.PostUpdateCommands ComponentSystem.InitEntityQueryCache(Int32) ComponentSystem.Entities ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnCreate() ComponentSystemBase.OnDestroyManager() ComponentSystemBase.OnCreateManager() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.Update() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetArchetypeChunkComponentType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkComponentTypeDynamic(ComponentType) ComponentSystemBase.GetArchetypeChunkBufferType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkSharedComponentType<T>() ComponentSystemBase.GetArchetypeChunkEntityType() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public abstract class ComponentSystemGroup : ComponentSystem Fields m_systemsToRemove Declaration protected List<ComponentSystemBase> m_systemsToRemove Field Value Type Description List < ComponentSystemBase > m_systemsToUpdate Declaration protected List<ComponentSystemBase> m_systemsToUpdate Field Value Type Description List < ComponentSystemBase > Properties Systems Declaration public virtual IEnumerable<ComponentSystemBase> Systems { get; } Property Value Type Description IEnumerable < ComponentSystemBase > Methods AddSystemToUpdateList(ComponentSystemBase) Declaration public void AddSystemToUpdateList(ComponentSystemBase sys) Parameters Type Name Description ComponentSystemBase sys OnStopRunning() Declaration protected override void OnStopRunning() Overrides ComponentSystemBase.OnStopRunning() OnUpdate() Declaration protected override void OnUpdate() Overrides ComponentSystem.OnUpdate() RemoveSystemFromUpdateList(ComponentSystemBase) Declaration public void RemoveSystemFromUpdateList(ComponentSystemBase sys) Parameters Type Name Description ComponentSystemBase sys SortSystemUpdateList() Declaration public virtual void SortSystemUpdateList() Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Build.RunStepResult.html": {
    "href": "api/Unity.Build.RunStepResult.html",
    "title": "Class RunStepResult | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class RunStepResult Holds the result of the execution of a IRunStep . Inheritance Object RunStepResult Namespace : Unity.Build <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class RunStepResult : IDisposable Properties BuildSettings The BuildSettings used to run this IRunStep . Declaration public BuildSettings BuildSettings { get; } Property Value Type Description BuildSettings Failed Determine if the execution of the IRunStep failed. Declaration public bool Failed { get; } Property Value Type Description Boolean Message The message resulting from the execution of this IRunStep . Declaration public string Message { get; } Property Value Type Description String RunInstance The running process resulting from running the IRunStep . Declaration public IRunInstance RunInstance { get; } Property Value Type Description IRunInstance RunStep The IRunStep that was executed. Declaration public IRunStep RunStep { get; } Property Value Type Description IRunStep Succeeded Determine if the execution of the IRunStep succeeded. Declaration public bool Succeeded { get; } Property Value Type Description Boolean Methods Dispose() Declaration public void Dispose() Failure(BuildSettings, IRunStep, String) Create a new instance of RunStepResult that represent a failed execution. Declaration public static RunStepResult Failure(BuildSettings settings, IRunStep step, string message) Parameters Type Name Description BuildSettings settings The BuildSettings used by the IRunStep . IRunStep step The IRunStep that was executed. String message The failure message. Returns Type Description RunStepResult A new RunStepResult instance. LogResult() Declaration public void LogResult() Success(BuildSettings, IRunStep, IRunInstance) Create a new instance of RunStepResult that represent a successful execution. Declaration public static RunStepResult Success(BuildSettings settings, IRunStep step, IRunInstance instance) Parameters Type Name Description BuildSettings settings The BuildSettings used by the IRunStep . IRunStep step The IRunStep that was executed. IRunInstance instance The IRunInstance resulting from running this IRunStep . Returns Type Description RunStepResult A new RunStepResult instance. ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString() Operators Implicit(RunStepResult to Boolean) Implicit conversion to Boolean . Declaration public static implicit operator bool (RunStepResult result) Parameters Type Name Description RunStepResult result Instance of RunStepResult . Returns Type Description Boolean"
  },
  "api/Unity.Build.RunStep.html": {
    "href": "api/Unity.Build.RunStep.html",
    "title": "Class RunStep | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class RunStep Inheritance Object RunStep RunStepDesktop Namespace : Unity.Build <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public abstract class RunStep : IRunStep Methods CanRun(BuildSettings, out String) Declaration public virtual bool CanRun(BuildSettings settings, out string reason) Parameters Type Name Description BuildSettings settings String reason Returns Type Description Boolean Implements IRunStep.CanRun(BuildSettings, out String) Failure(BuildSettings, String) Declaration public RunStepResult Failure(BuildSettings settings, string message) Parameters Type Name Description BuildSettings settings String message Returns Type Description RunStepResult Start(BuildSettings) Declaration public abstract RunStepResult Start(BuildSettings settings) Parameters Type Name Description BuildSettings settings Returns Type Description RunStepResult Implements IRunStep.Start(BuildSettings) Success(BuildSettings, IRunInstance) Declaration public RunStepResult Success(BuildSettings settings, IRunInstance instance) Parameters Type Name Description BuildSettings settings IRunInstance instance Returns Type Description RunStepResult"
  },
  "api/Unity.Build.IBuildPipelineComponent.html": {
    "href": "api/Unity.Build.IBuildPipelineComponent.html",
    "title": "Interface IBuildPipelineComponent | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Interface IBuildPipelineComponent Base interface for BuildSettings components that provides the BuildPipeline . Namespace : Unity.Build <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface IBuildPipelineComponent : IBuildSettingsComponent Properties Pipeline Declaration BuildPipeline Pipeline { get; set; } Property Value Type Description BuildPipeline"
  },
  "api/Unity.Build.Common.OutputBuildDirectory.html": {
    "href": "api/Unity.Build.Common.OutputBuildDirectory.html",
    "title": "Class OutputBuildDirectory | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class OutputBuildDirectory Overrides the default output directory of Builds/NameOfBuildSettingsAsset to an arbitrary location. Inheritance Object OutputBuildDirectory Namespace : Unity.Build.Common <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class OutputBuildDirectory : IBuildSettingsComponent Properties OutputDirectory Declaration public string OutputDirectory { get; set; } Property Value Type Description String"
  },
  "api/Unity.Build.BuildStepAttribute.Flags.html": {
    "href": "api/Unity.Build.BuildStepAttribute.Flags.html",
    "title": "Enum BuildStepAttribute.Flags | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Enum BuildStepAttribute.Flags Flags types for build steps. Namespace : Unity.Build <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public enum Flags Fields Name Description Hidden None"
  },
  "api/Unity.Transforms.EndFrameTRSToLocalToWorldSystem.html": {
    "href": "api/Unity.Transforms.EndFrameTRSToLocalToWorldSystem.html",
    "title": "Class EndFrameTRSToLocalToWorldSystem | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class EndFrameTRSToLocalToWorldSystem Inheritance Object ComponentSystemBase JobComponentSystem TRSToLocalToWorldSystem EndFrameTRSToLocalToWorldSystem Inherited Members TRSToLocalToWorldSystem.OnCreate() TRSToLocalToWorldSystem.OnUpdate(JobHandle) JobComponentSystem.Entities JobComponentSystem.Job JobComponentSystem.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnDestroyManager() ComponentSystemBase.OnCreateManager() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.Update() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetArchetypeChunkComponentType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkComponentTypeDynamic(ComponentType) ComponentSystemBase.GetArchetypeChunkBufferType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkSharedComponentType<T>() ComponentSystemBase.GetArchetypeChunkEntityType() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [UpdateInGroup(typeof(TransformSystemGroup))] [UpdateAfter(typeof(EndFrameCompositeRotationSystem))] [UpdateAfter(typeof(EndFrameCompositeScaleSystem))] [UpdateBefore(typeof(EndFrameLocalToParentSystem))] public class EndFrameTRSToLocalToWorldSystem : TRSToLocalToWorldSystem Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Transforms.EndFrameTRSToLocalToParentSystem.html": {
    "href": "api/Unity.Transforms.EndFrameTRSToLocalToParentSystem.html",
    "title": "Class EndFrameTRSToLocalToParentSystem | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class EndFrameTRSToLocalToParentSystem Inheritance Object ComponentSystemBase JobComponentSystem TRSToLocalToParentSystem EndFrameTRSToLocalToParentSystem Inherited Members TRSToLocalToParentSystem.OnCreate() TRSToLocalToParentSystem.OnUpdate(JobHandle) JobComponentSystem.Entities JobComponentSystem.Job JobComponentSystem.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnDestroyManager() ComponentSystemBase.OnCreateManager() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.Update() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetArchetypeChunkComponentType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkComponentTypeDynamic(ComponentType) ComponentSystemBase.GetArchetypeChunkBufferType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkSharedComponentType<T>() ComponentSystemBase.GetArchetypeChunkEntityType() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [UpdateInGroup(typeof(TransformSystemGroup))] [UpdateAfter(typeof(EndFrameCompositeRotationSystem))] [UpdateAfter(typeof(EndFrameCompositeScaleSystem))] [UpdateAfter(typeof(EndFrameParentScaleInverseSystem))] public class EndFrameTRSToLocalToParentSystem : TRSToLocalToParentSystem Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Transforms.EndFrameRotationEulerSystem.html": {
    "href": "api/Unity.Transforms.EndFrameRotationEulerSystem.html",
    "title": "Class EndFrameRotationEulerSystem | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class EndFrameRotationEulerSystem Inheritance Object ComponentSystemBase JobComponentSystem RotationEulerSystem EndFrameRotationEulerSystem Inherited Members RotationEulerSystem.OnCreate() RotationEulerSystem.OnUpdate(JobHandle) JobComponentSystem.Entities JobComponentSystem.Job JobComponentSystem.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnDestroyManager() ComponentSystemBase.OnCreateManager() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.Update() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetArchetypeChunkComponentType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkComponentTypeDynamic(ComponentType) ComponentSystemBase.GetArchetypeChunkBufferType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkSharedComponentType<T>() ComponentSystemBase.GetArchetypeChunkEntityType() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [UpdateInGroup(typeof(TransformSystemGroup))] public class EndFrameRotationEulerSystem : RotationEulerSystem Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Transforms.EndFramePostRotationEulerSystem.html": {
    "href": "api/Unity.Transforms.EndFramePostRotationEulerSystem.html",
    "title": "Class EndFramePostRotationEulerSystem | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class EndFramePostRotationEulerSystem Inheritance Object ComponentSystemBase JobComponentSystem PostRotationEulerSystem EndFramePostRotationEulerSystem Inherited Members PostRotationEulerSystem.OnCreate() PostRotationEulerSystem.OnUpdate(JobHandle) JobComponentSystem.Entities JobComponentSystem.Job JobComponentSystem.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnDestroyManager() ComponentSystemBase.OnCreateManager() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.Update() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetArchetypeChunkComponentType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkComponentTypeDynamic(ComponentType) ComponentSystemBase.GetArchetypeChunkBufferType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkSharedComponentType<T>() ComponentSystemBase.GetArchetypeChunkEntityType() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [UpdateInGroup(typeof(TransformSystemGroup))] public class EndFramePostRotationEulerSystem : PostRotationEulerSystem Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Transforms.EndFrameParentSystem.html": {
    "href": "api/Unity.Transforms.EndFrameParentSystem.html",
    "title": "Class EndFrameParentSystem | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class EndFrameParentSystem Inheritance Object ComponentSystemBase JobComponentSystem ParentSystem EndFrameParentSystem Inherited Members ParentSystem.OnCreate() ParentSystem.OnUpdate(JobHandle) JobComponentSystem.Entities JobComponentSystem.Job JobComponentSystem.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnDestroyManager() ComponentSystemBase.OnCreateManager() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.Update() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetArchetypeChunkComponentType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkComponentTypeDynamic(ComponentType) ComponentSystemBase.GetArchetypeChunkBufferType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkSharedComponentType<T>() ComponentSystemBase.GetArchetypeChunkEntityType() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [UpdateInGroup(typeof(TransformSystemGroup))] public class EndFrameParentSystem : ParentSystem Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Transforms.EndFrameParentScaleInverseSystem.html": {
    "href": "api/Unity.Transforms.EndFrameParentScaleInverseSystem.html",
    "title": "Class EndFrameParentScaleInverseSystem | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class EndFrameParentScaleInverseSystem Inheritance Object ComponentSystemBase JobComponentSystem ParentScaleInverseSystem EndFrameParentScaleInverseSystem Inherited Members ParentScaleInverseSystem.OnCreate() ParentScaleInverseSystem.OnUpdate(JobHandle) JobComponentSystem.Entities JobComponentSystem.Job JobComponentSystem.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnDestroyManager() ComponentSystemBase.OnCreateManager() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.Update() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetArchetypeChunkComponentType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkComponentTypeDynamic(ComponentType) ComponentSystemBase.GetArchetypeChunkBufferType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkSharedComponentType<T>() ComponentSystemBase.GetArchetypeChunkEntityType() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [UpdateInGroup(typeof(TransformSystemGroup))] [UpdateAfter(typeof(EndFrameParentSystem))] [UpdateAfter(typeof(EndFrameCompositeRotationSystem))] public class EndFrameParentScaleInverseSystem : ParentScaleInverseSystem Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Transforms.EndFrameLocalToParentSystem.html": {
    "href": "api/Unity.Transforms.EndFrameLocalToParentSystem.html",
    "title": "Class EndFrameLocalToParentSystem | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class EndFrameLocalToParentSystem Inheritance Object ComponentSystemBase JobComponentSystem LocalToParentSystem EndFrameLocalToParentSystem Inherited Members LocalToParentSystem.OnCreate() LocalToParentSystem.OnUpdate(JobHandle) JobComponentSystem.Entities JobComponentSystem.Job JobComponentSystem.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnDestroyManager() ComponentSystemBase.OnCreateManager() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.Update() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetArchetypeChunkComponentType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkComponentTypeDynamic(ComponentType) ComponentSystemBase.GetArchetypeChunkBufferType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkSharedComponentType<T>() ComponentSystemBase.GetArchetypeChunkEntityType() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [UpdateInGroup(typeof(TransformSystemGroup))] [UpdateAfter(typeof(EndFrameTRSToLocalToParentSystem))] public class EndFrameLocalToParentSystem : LocalToParentSystem Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Transforms.EndFrameCompositeScaleSystem.html": {
    "href": "api/Unity.Transforms.EndFrameCompositeScaleSystem.html",
    "title": "Class EndFrameCompositeScaleSystem | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class EndFrameCompositeScaleSystem Inheritance Object ComponentSystemBase JobComponentSystem CompositeScaleSystem EndFrameCompositeScaleSystem Inherited Members CompositeScaleSystem.OnCreate() CompositeScaleSystem.OnUpdate(JobHandle) JobComponentSystem.Entities JobComponentSystem.Job JobComponentSystem.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnDestroyManager() ComponentSystemBase.OnCreateManager() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.Update() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetArchetypeChunkComponentType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkComponentTypeDynamic(ComponentType) ComponentSystemBase.GetArchetypeChunkBufferType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkSharedComponentType<T>() ComponentSystemBase.GetArchetypeChunkEntityType() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [UpdateInGroup(typeof(TransformSystemGroup))] public class EndFrameCompositeScaleSystem : CompositeScaleSystem Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Scenes.Editor.EditorEntityScenes.html": {
    "href": "api/Unity.Scenes.Editor.EditorEntityScenes.html",
    "title": "Class EditorEntityScenes | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class EditorEntityScenes Inheritance Object EditorEntityScenes Namespace : Unity.Scenes.Editor <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class EditorEntityScenes Methods IsEntitySubScene(Scene) Declaration public static bool IsEntitySubScene(Scene scene) Parameters Type Name Description Scene scene Returns Type Description Boolean WriteEntityScene(Scene, GameObjectConversionSettings) Declaration public static SceneSectionData[] WriteEntityScene(Scene scene, GameObjectConversionSettings settings) Parameters Type Name Description Scene scene GameObjectConversionSettings settings Returns Type Description SceneSectionData []"
  },
  "api/Unity.Profiling.html": {
    "href": "api/Unity.Profiling.html",
    "title": "Namespace Unity.Profiling | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Namespace Unity.Profiling Structs ProfilerMarker ProfilerMarker.AutoScope"
  },
  "api/Unity.Profiling.ProfilerMarker.html": {
    "href": "api/Unity.Profiling.ProfilerMarker.html",
    "title": "Struct ProfilerMarker | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct ProfilerMarker Namespace : Unity.Profiling <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct ProfilerMarker Constructors ProfilerMarker(String) Declaration public ProfilerMarker(string name) Parameters Type Name Description String name Methods Auto() Declaration public ProfilerMarker.AutoScope Auto() Returns Type Description ProfilerMarker.AutoScope Begin() Declaration [Conditional(\"ENABLE_PROFILER\")] public void Begin() Begin(UnityEngine.Object) Declaration [Conditional(\"ENABLE_PROFILER\")] public void Begin(UnityEngine.Object contextUnityObject) Parameters Type Name Description UnityEngine.Object contextUnityObject End() Declaration [Conditional(\"ENABLE_PROFILER\")] public void End()"
  },
  "api/Unity.Entities.DisableAutoTypeRegistration.html": {
    "href": "api/Unity.Entities.DisableAutoTypeRegistration.html",
    "title": "Class DisableAutoTypeRegistration | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class DisableAutoTypeRegistration Inheritance Object Attribute DisableAutoTypeRegistration Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class DisableAutoTypeRegistration : Attribute, _Attribute"
  },
  "api/Unity.Entities.ComponentTypeHash.html": {
    "href": "api/Unity.Entities.ComponentTypeHash.html",
    "title": "Struct ComponentTypeHash | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct ComponentTypeHash Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct ComponentTypeHash : IEquatable<ComponentTypeHash> Fields Flags Declaration public ComponentTypeFlags Flags Field Value Type Description ComponentTypeFlags StableTypeHash Declaration public ulong StableTypeHash Field Value Type Description UInt64 Methods Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object) Equals(ComponentTypeHash) Declaration public bool Equals(ComponentTypeHash other) Parameters Type Name Description ComponentTypeHash other Returns Type Description Boolean GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() Operators Equality(ComponentTypeHash, ComponentTypeHash) Declaration public static bool operator ==(ComponentTypeHash left, ComponentTypeHash right) Parameters Type Name Description ComponentTypeHash left ComponentTypeHash right Returns Type Description Boolean Inequality(ComponentTypeHash, ComponentTypeHash) Declaration public static bool operator !=(ComponentTypeHash left, ComponentTypeHash right) Parameters Type Name Description ComponentTypeHash left ComponentTypeHash right Returns Type Description Boolean"
  },
  "api/Unity.Entities.ComponentTypeFlags.html": {
    "href": "api/Unity.Entities.ComponentTypeFlags.html",
    "title": "Enum ComponentTypeFlags | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Enum ComponentTypeFlags Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Flags] public enum ComponentTypeFlags Fields Name Description ChunkComponent None"
  },
  "api/Unity.Entities.ComponentSystem.html": {
    "href": "api/Unity.Entities.ComponentSystem.html",
    "title": "Class ComponentSystem | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class ComponentSystem An abstract class to implement in order to create a system. Inheritance Object ComponentSystemBase ComponentSystem ComponentSystemGroup ConvertToEntitySystem EntityCommandBufferSystem UpdateWorldTimeSystem SceneSystem Inherited Members ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnCreate() ComponentSystemBase.OnDestroyManager() ComponentSystemBase.OnCreateManager() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.Update() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetArchetypeChunkComponentType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkComponentTypeDynamic(ComponentType) ComponentSystemBase.GetArchetypeChunkBufferType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkSharedComponentType<T>() ComponentSystemBase.GetArchetypeChunkEntityType() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public abstract class ComponentSystem : ComponentSystemBase Remarks Implement a ComponentSystem subclass for systems that perform their work on the main thread or that use Jobs not specifically optimized for ECS. To use the ECS-specific Jobs, such as IJobForEach<T0> or IJobChunk , implement JobComponentSystem instead. Properties Entities This system's query builder object. Declaration protected EntityQueryBuilder Entities { get; } Property Value Type Description EntityQueryBuilder Use to select and iterate over entities. PostUpdateCommands This system's EntityCommandBuffer . Declaration public EntityCommandBuffer PostUpdateCommands { get; } Property Value Type Description EntityCommandBuffer A queue of entity-related commands to playback after the system's update function finishes. Remarks When iterating over a collection of entities with Entities , the system prohibits structural changes that would invalidate that collection. Such changes include creating and destroying entities, adding or removing components, and changing the value of shared components. Instead, add structural change commands to this PostUpdateCommands command buffer. The system executes commands added to this command buffer in order after this system's OnUpdate() function returns. Methods InitEntityQueryCache(Int32) Initializes this system's internal cache of EntityQuery objects to the specified number of queries. Declaration protected void InitEntityQueryCache(int cacheSize) Parameters Type Name Description Int32 cacheSize The initial capacity of the system's EntityQuery array. Remarks A system's entity query cache expands automatically as you add additional queries. However, initializing the cache to the correct size when you initialize a system is more efficient and avoids unnecessary, garbage-collected memory allocations. OnUpdate() Implement OnUpdate to perform the major work of this system. Declaration protected abstract void OnUpdate() Remarks The system invokes OnUpdate once per frame on the main thread when any of this system's EntityQueries match existing entities, or if the system has the AlwaysUpdateSystemAttribute . See Also ShouldRunSystem () Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Entities.ComponentDataProxyBase.html": {
    "href": "api/Unity.Entities.ComponentDataProxyBase.html",
    "title": "Class ComponentDataProxyBase | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class ComponentDataProxyBase Inheritance Object ComponentDataProxyBase ComponentDataProxy<T> DynamicBufferProxy<T> SharedComponentDataProxy<T> Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public abstract class ComponentDataProxyBase : MonoBehaviour, ISerializationCallbackReceiver Methods OnDisable() Declaration protected virtual void OnDisable() OnEnable() Declaration protected virtual void OnEnable()"
  },
  "api/Unity.Entities.BuildUtils.TypeHash.html": {
    "href": "api/Unity.Entities.BuildUtils.TypeHash.html",
    "title": "Class TypeHash | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class TypeHash Inheritance Object TypeHash Namespace : Unity.Entities.BuildUtils <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class TypeHash Methods CalculateMemoryOrdering(TypeDefinition) Declaration public static ulong CalculateMemoryOrdering(TypeDefinition typeDef) Parameters Type Name Description TypeDefinition typeDef Returns Type Description UInt64 CalculateMemoryOrderingRefl(Type) Declaration public static ulong CalculateMemoryOrderingRefl(Type type) Parameters Type Name Description Type type Returns Type Description UInt64 CalculateStableTypeHash(TypeDefinition) Declaration public static ulong CalculateStableTypeHash(TypeDefinition typeDef) Parameters Type Name Description TypeDefinition typeDef Returns Type Description UInt64 CalculateStableTypeHashRefl(Type) Declaration public static ulong CalculateStableTypeHashRefl(Type type) Parameters Type Name Description Type type Returns Type Description UInt64 CombineFNV1A64(UInt64, UInt64[]) Declaration public static ulong CombineFNV1A64(ulong hash, params ulong[] values) Parameters Type Name Description UInt64 hash UInt64 [] values Returns Type Description UInt64 FNV1A64(Int32) Declaration public static ulong FNV1A64(int val) Parameters Type Name Description Int32 val Returns Type Description UInt64 FNV1A64(String) Declaration public static ulong FNV1A64(string text) Parameters Type Name Description String text Returns Type Description UInt64 HashType(Type, Int32) Declaration public static ulong HashType(Type type, int fieldIndex = 0) Parameters Type Name Description Type type Int32 fieldIndex Returns Type Description UInt64 HashType(TypeDefinition, Int32) Declaration public static ulong HashType(TypeDefinition typeDef, int fieldIndex = 0) Parameters Type Name Description TypeDefinition typeDef Int32 fieldIndex Returns Type Description UInt64 HashVersionAttribute(TypeDefinition) Declaration public static ulong HashVersionAttribute(TypeDefinition typeDef) Parameters Type Name Description TypeDefinition typeDef Returns Type Description UInt64"
  },
  "api/Unity.Entities.BuildUtils.MonoExtensions.html": {
    "href": "api/Unity.Entities.BuildUtils.MonoExtensions.html",
    "title": "Class MonoExtensions | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class MonoExtensions Inheritance Object MonoExtensions Namespace : Unity.Entities.BuildUtils <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class MonoExtensions Methods CalculateMemoryOrdering(TypeDefinition) Declaration public static ulong CalculateMemoryOrdering(this TypeDefinition typeDef) Parameters Type Name Description TypeDefinition typeDef Returns Type Description UInt64 CalculateStableTypeHash(TypeDefinition) Declaration public static ulong CalculateStableTypeHash(this TypeDefinition typeDef) Parameters Type Name Description TypeDefinition typeDef Returns Type Description UInt64 DynamicArrayElementType(TypeReference) Declaration public static TypeReference DynamicArrayElementType(this TypeReference typeRef) Parameters Type Name Description TypeReference typeRef Returns Type Description TypeReference FixedSpecialType(TypeReference) Declaration public static TypeDefinition FixedSpecialType(this TypeReference typeRef) Parameters Type Name Description TypeReference typeRef Returns Type Description TypeDefinition GetReflectionName(TypeReference) Declaration public static string GetReflectionName(this TypeReference type) Parameters Type Name Description TypeReference type Returns Type Description String GetSystemReflectionType(TypeReference) Declaration public static Type GetSystemReflectionType(this TypeReference type) Parameters Type Name Description TypeReference type Returns Type Description Type GetSystemRunsAfter(TypeDefinition) Declaration public static TypeDefinition[] GetSystemRunsAfter(this TypeDefinition type) Parameters Type Name Description TypeDefinition type Returns Type Description TypeDefinition [] GetSystemRunsBefore(TypeDefinition) Declaration public static TypeDefinition[] GetSystemRunsBefore(this TypeDefinition type) Parameters Type Name Description TypeDefinition type Returns Type Description TypeDefinition [] IsBufferElementComponentType(TypeReference) Declaration public static bool IsBufferElementComponentType(this TypeReference typeRef) Parameters Type Name Description TypeReference typeRef Returns Type Description Boolean IsComplex(TypeReference) Declaration public static bool IsComplex(this TypeReference typeRef) Parameters Type Name Description TypeReference typeRef Returns Type Description Boolean IsComponentType(TypeReference) Declaration public static bool IsComponentType(this TypeReference typeRef) Parameters Type Name Description TypeReference typeRef Returns Type Description Boolean IsCppBasicType(TypeDefinition) Declaration public static bool IsCppBasicType(this TypeDefinition type) Parameters Type Name Description TypeDefinition type Returns Type Description Boolean IsDynamicArray(TypeReference) Declaration public static bool IsDynamicArray(this TypeReference type) Parameters Type Name Description TypeReference type Returns Type Description Boolean IsEntityType(TypeReference) Declaration public static bool IsEntityType(this TypeReference typeRef) Parameters Type Name Description TypeReference typeRef Returns Type Description Boolean IsManagedType(TypeReference) Declaration public static bool IsManagedType(this TypeReference typeRef) Parameters Type Name Description TypeReference typeRef Returns Type Description Boolean IsPodType(TypeReference) Declaration public static bool IsPodType(this TypeReference typeRef) Parameters Type Name Description TypeReference typeRef Returns Type Description Boolean IsSharedComponentType(TypeReference) Declaration public static bool IsSharedComponentType(this TypeReference typeRef) Parameters Type Name Description TypeReference typeRef Returns Type Description Boolean IsStructValueType(TypeDefinition) Declaration public static bool IsStructValueType(this TypeDefinition type) Parameters Type Name Description TypeDefinition type Returns Type Description Boolean IsStructValueType(TypeReference) Declaration public static bool IsStructValueType(this TypeReference type) Parameters Type Name Description TypeReference type Returns Type Description Boolean IsSystemFenceType(TypeDefinition) Declaration public static bool IsSystemFenceType(this TypeDefinition type) Parameters Type Name Description TypeDefinition type Returns Type Description Boolean IsSystemStateComponentType(TypeReference) Declaration public static bool IsSystemStateComponentType(this TypeReference typeRef) Parameters Type Name Description TypeReference typeRef Returns Type Description Boolean IsSystemType(TypeDefinition) Declaration public static bool IsSystemType(this TypeDefinition type) Parameters Type Name Description TypeDefinition type Returns Type Description Boolean"
  },
  "api/Unity.Entities.BlobBuilder.html": {
    "href": "api/Unity.Entities.BlobBuilder.html",
    "title": "Struct BlobBuilder | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct BlobBuilder Creates blob assets. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct BlobBuilder : IDisposable Remarks A blob asset is an immutable data structure stored in unmanaged memory. Blob assets can contain primitive types, strings, structs, arrays, and arrays of arrays. Arrays and structs must only contain blittable types. Strings must be of type BlobString (or a specialized unmanaged string type such as ). To use a BlobBuilder object to create a blob asset: Declare the structure of the blob asset as a struct. Create a BlobBuilder object. Call the ConstructRoot<T>() method, where T is the struct definng the asset structure. Initialize primitive values defined at the root level of the asset. Allocate memory for arrays, structs, and BlobString instances at the root. Initialize the values of those arrays, structs, and strings. Continue allocating memory and initializing values until you have fully constructed the asset. Call CreateBlobAssetReference<T>(Allocator) to create a reference to the blob asset in memory. Dispose the BlobBuilder object. Use the BlobAssetReference<T> returned by CreateBlobAssetReference<T>(Allocator) to reference the blob asset. You can use a BlobAssetReference<T> as a field of an IComponentData struct. More than one entity can reference the same blob asset. Call Dispose() to free the memory allocated for a blob asset. Blob assets cannot be modified once created. Instead, you must create a new blob asset, update any references to the old one and then dispose of it. Examples Constructors BlobBuilder(Allocator, Int32) Constructs a BlobBuilder object. Declaration public BlobBuilder(Allocator allocator, int chunkSize = 65536) Parameters Type Name Description Allocator allocator The type of allocator to use for the BlobBuilder's internal, temporary data. Use unless the BlobBuilder exists across more than four Unity frames. Int32 chunkSize (Optional) The minimum amount of memory to allocate while building an asset. The default value should suit most use cases. A smaller chunkSize results in more allocations; a larger chunkSize could increase the BlobBuilder's total memory allocation (which is freed when you dispose of the BlobBuilder. Methods Allocate<T>(ref BlobArray<T>, Int32) Allocates enough memory to store length elements of struct T . Declaration public BlobBuilderArray<T> Allocate<T>(ref BlobArray<T> ptr, int length) where T : struct Parameters Type Name Description BlobArray <T> ptr A reference to a BlobArray field in a blob asset. Int32 length The number of elements to allocate. Returns Type Description BlobBuilderArray <T> A reference to the newly allocated array as a mutable BlobBuilderArray instance. Type Parameters Name Description T The struct data type. Allocate<T>(ref BlobPtr<T>) Allocates enough memory to store a struct of type T . Declaration public T Allocate<T>(ref BlobPtr<T> ptr) where T : struct Parameters Type Name Description BlobPtr <T> ptr A reference to a blob pointer field in a blob asset. Returns Type Description T A reference to the newly allocated struct. Type Parameters Name Description T The struct data type. Construct<T>(ref BlobArray<T>, T[]) Copies an array of structs to an array in a blob asset after allocating the necessary memory. Declaration public BlobBuilderArray<T> Construct<T>(ref BlobArray<T> blobArray, params T[] data) where T : struct Parameters Type Name Description BlobArray <T> blobArray A reference to a BlobArray field in a blob asset. T[] data An array containing structs of type T . Returns Type Description BlobBuilderArray <T> A reference to the newly constructed array as a mutable BlobBuilderArray instance. Type Parameters Name Description T The struct data type. ConstructRoot<T>() Creates the top-level fields of a single blob asset. Declaration public T ConstructRoot<T>() where T : struct Returns Type Description T A reference to the blob data under construction. Type Parameters Name Description T A struct that defines the structure of the blob asset. Remarks This function allocates memory for the top-level fields of a blob asset and returns a reference to it. Use this root reference to initialize field values and to allocate memory for arrays and structs. CreateBlobAssetReference<T>(Allocator) Completes construction of the blob asset and returns a reference to the asset in unmanaged memory. Declaration public BlobAssetReference<T> CreateBlobAssetReference<T>(Allocator allocator) where T : struct Parameters Type Name Description Allocator allocator The type of memory to allocate. Unless the asset has a very short life span, use . Returns Type Description BlobAssetReference <T> Type Parameters Name Description T The data type of the struct used to construct the asset's root. Use the same struct type that you used when calling ConstructRoot<T>() . Remarks Use the BlobAssetReference<T> to access the blob asset. When the asset is no longer needed, call Dispose() to destroy the blob asset and free its allocated memory. Dispose() Disposes of this BlobBuilder instance and frees its temporary memory allocations. Declaration public void Dispose() Remarks Call Dispose() after calling CreateBlobAssetReference<T>(Allocator) . Extension Methods BlobStringExtensions.AllocateString(ref BlobBuilder, ref BlobString, String)"
  },
  "api/Unity.Entities.BlobAssetStore.html": {
    "href": "api/Unity.Entities.BlobAssetStore.html",
    "title": "Class BlobAssetStore | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class BlobAssetStore Purpose of this class is to provide a consistent cache of BlobAsset object in order to avoid rebuilding them when it is not necessary Inheritance Object BlobAssetStore Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class BlobAssetStore : IDisposable Remarks Right now the lifetime scope of this cache is bound to the LiveLinkDiffGenerator's one and it is scoped by SubScene. In other words the cache is created when we enter edit mode for a given SubScene and it is released when we close edit mode. And instance of this cache is exposed in GameObjectConversionSettings to allow users to query and avoid rebuilding assets. During conversion process the user must rely on the BlobAssetComputationContext<TS, TB> to associate the BlobAsset with their corresponding Authoring GameObject and to determine which ones are to compute. Thread-safety: nothing is thread-safe, we assume this class is consumed through the main-thread only. Calling Dispose on an instance will reset the content and dispose all BlobAssetReference object stored. Constructors BlobAssetStore() Declaration public BlobAssetStore() Methods Contains<T>(Hash128) Check if the Store contains a BlobAsset of a given type and hash Declaration public bool Contains<T>(Hash128 key) Parameters Type Name Description Hash128 key The hash associated with the BlobAsset Returns Type Description Boolean true if the Store contains the BlobAsset or false if it doesn't Type Parameters Name Description T The type of the BlobAsset Dispose() Calling dispose will reset the cache content and release all the BlobAssetReference that were stored Declaration public void Dispose() Remove<T>(Hash128, Boolean) Remove a BlobAssetReference from the store Declaration public bool Remove<T>(Hash128 key, bool releaseBlobAsset) Parameters Type Name Description Hash128 key The key associated with the BlobAssetReference Boolean releaseBlobAsset If true the BlobAsset data will be released Returns Type Description Boolean True if the BLobAsset was removed from the store, false if it wasn't found Type Parameters Name Description T The type of the BlobAsset ResetCache(Boolean) Call this method to clear the whole content of the Cache Declaration public void ResetCache(bool disposeAllBlobAssetReference) Parameters Type Name Description Boolean disposeAllBlobAssetReference If true all BlobAssetReference present in the cache will be dispose. If false they will remain present in memory TryAdd<T>(Hash128, BlobAssetReference<T>) Get a BlobAssetReference from its key Declaration public bool TryAdd<T>(Hash128 key, BlobAssetReference<T> result) where T : struct Parameters Type Name Description Hash128 key The key associated with the BlobAssetReference BlobAssetReference <T> result The BlobAssetReference if found or default Returns Type Description Boolean true if the BlobAssetReference was found, false if not found Type Parameters Name Description T The type of BlobAsset TryGet<T>(Hash128, out BlobAssetReference<T>) Try to access to a BlobAssetReference from its key Declaration public bool TryGet<T>(Hash128 key, out BlobAssetReference<T> blobAssetReference) where T : struct Parameters Type Name Description Hash128 key The key associated with the BlobAssetReference when it was added to the cache BlobAssetReference <T> blobAssetReference The corresponding BlobAssetReference or default if none was found Returns Type Description Boolean Type Parameters Name Description T The type of BlobAsset"
  },
  "api/Unity.Entities.BeginSimulationEntityCommandBufferSystem.html": {
    "href": "api/Unity.Entities.BeginSimulationEntityCommandBufferSystem.html",
    "title": "Class BeginSimulationEntityCommandBufferSystem | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class BeginSimulationEntityCommandBufferSystem Inheritance Object ComponentSystemBase ComponentSystem EntityCommandBufferSystem BeginSimulationEntityCommandBufferSystem Inherited Members EntityCommandBufferSystem.CreateCommandBuffer() EntityCommandBufferSystem.AddJobHandleForProducer(JobHandle) EntityCommandBufferSystem.OnCreate() EntityCommandBufferSystem.OnDestroy() EntityCommandBufferSystem.OnUpdate() ComponentSystem.PostUpdateCommands ComponentSystem.InitEntityQueryCache(Int32) ComponentSystem.Entities ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnDestroyManager() ComponentSystemBase.OnCreateManager() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.Update() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetArchetypeChunkComponentType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkComponentTypeDynamic(ComponentType) ComponentSystemBase.GetArchetypeChunkBufferType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkSharedComponentType<T>() ComponentSystemBase.GetArchetypeChunkEntityType() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [UpdateInGroup(typeof(SimulationSystemGroup))] public class BeginSimulationEntityCommandBufferSystem : EntityCommandBufferSystem Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Entities.BeginPresentationEntityCommandBufferSystem.html": {
    "href": "api/Unity.Entities.BeginPresentationEntityCommandBufferSystem.html",
    "title": "Class BeginPresentationEntityCommandBufferSystem | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class BeginPresentationEntityCommandBufferSystem Inheritance Object ComponentSystemBase ComponentSystem EntityCommandBufferSystem BeginPresentationEntityCommandBufferSystem Inherited Members EntityCommandBufferSystem.CreateCommandBuffer() EntityCommandBufferSystem.AddJobHandleForProducer(JobHandle) EntityCommandBufferSystem.OnCreate() EntityCommandBufferSystem.OnDestroy() EntityCommandBufferSystem.OnUpdate() ComponentSystem.PostUpdateCommands ComponentSystem.InitEntityQueryCache(Int32) ComponentSystem.Entities ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnDestroyManager() ComponentSystemBase.OnCreateManager() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.Update() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetArchetypeChunkComponentType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkComponentTypeDynamic(ComponentType) ComponentSystemBase.GetArchetypeChunkBufferType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkSharedComponentType<T>() ComponentSystemBase.GetArchetypeChunkEntityType() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [UpdateInGroup(typeof(PresentationSystemGroup))] public class BeginPresentationEntityCommandBufferSystem : EntityCommandBufferSystem Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Entities.ArchetypeChunkEntityType.html": {
    "href": "api/Unity.Entities.ArchetypeChunkEntityType.html",
    "title": "Struct ArchetypeChunkEntityType | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct ArchetypeChunkEntityType Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct ArchetypeChunkEntityType"
  },
  "api/Unity.Entities.ArchetypeChunkComponentTypeDynamic.html": {
    "href": "api/Unity.Entities.ArchetypeChunkComponentTypeDynamic.html",
    "title": "Struct ArchetypeChunkComponentTypeDynamic | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct ArchetypeChunkComponentTypeDynamic Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct ArchetypeChunkComponentTypeDynamic Fields m_TypeLookupCache Declaration public int m_TypeLookupCache Field Value Type Description Int32 Properties GlobalSystemVersion Declaration public uint GlobalSystemVersion { get; } Property Value Type Description UInt32 IsReadOnly Declaration public bool IsReadOnly { get; } Property Value Type Description Boolean"
  },
  "api/Unity.Entities.AlwaysSynchronizeSystemAttribute.html": {
    "href": "api/Unity.Entities.AlwaysSynchronizeSystemAttribute.html",
    "title": "Class AlwaysSynchronizeSystemAttribute | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class AlwaysSynchronizeSystemAttribute AlwaysSynchronizeSystem can be applied to a JobComponentSystem to force it to synchronize on all of its dependencies before every update. This attribute should only be applied when a synchronization point is necessary every frame. Inheritance Object Attribute AlwaysSynchronizeSystemAttribute Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [AttributeUsage(AttributeTargets.Class)] public class AlwaysSynchronizeSystemAttribute : Attribute, _Attribute"
  },
  "api/Unity.Core.html": {
    "href": "api/Unity.Core.html",
    "title": "Namespace Unity.Core | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Namespace Unity.Core Classes XXHash XXHash implementation. Structs TimeData"
  },
  "api/Unity.Build.IBuildStep.html": {
    "href": "api/Unity.Build.IBuildStep.html",
    "title": "Interface IBuildStep | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Interface IBuildStep Base interface for BuildStep . Note: When writing a new build step, derive from BuildStep instead of this interface. Namespace : Unity.Build <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface IBuildStep Properties Description Description of this IBuildStep displayed in build progress reporting. Declaration string Description { get; } Property Value Type Description String OptionalComponents List of IBuildSettingsComponent derived types that are optional for this IBuildStep . Declaration Type[] OptionalComponents { get; } Property Value Type Description Type [] RequiredComponents List of IBuildSettingsComponent derived types that are required for this IBuildStep . Declaration Type[] RequiredComponents { get; } Property Value Type Description Type [] Methods CleanupBuildStep(BuildContext) Cleanup this IBuildStep . Cleanup will only be called if this IBuildStep ran. Declaration BuildStepResult CleanupBuildStep(BuildContext context) Parameters Type Name Description BuildContext context The BuildContext used by the execution of this IBuildStep . Returns Type Description BuildStepResult IsEnabled(BuildContext) Determine if this IBuildStep will be executed or not. Declaration bool IsEnabled(BuildContext context) Parameters Type Name Description BuildContext context The BuildContext used by the execution of this IBuildStep . Returns Type Description Boolean true if enabled, false otherwise. RunBuildStep(BuildContext) Run this IBuildStep . If a previous IBuildStep fails, this IBuildStep will not run. Declaration BuildStepResult RunBuildStep(BuildContext context) Parameters Type Name Description BuildContext context The BuildContext used by the execution of this IBuildStep . Returns Type Description BuildStepResult The result of running this IBuildStep ."
  },
  "api/Unity.Build.IBuildSettingsComponent.html": {
    "href": "api/Unity.Build.IBuildSettingsComponent.html",
    "title": "Interface IBuildSettingsComponent | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Interface IBuildSettingsComponent Defines the settings used throughout a BuildPipeline . Base interface for all BuildSettings components. Namespace : Unity.Build <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface IBuildSettingsComponent"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVI-5.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVI-5.html",
    "title": "Delegate VVVVI<T0, T1, T2, T3, T4> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VVVVI<T0, T1, T2, T3, T4> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVI<T0, T1, T2, T3, T4>(T0 t0, T1 t1, T2 t2, T3 t3, in T4 t4); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 Type Parameters Name Description T0 T1 T2 T3 T4"
  },
  "api/Unity.Entities.UniversalDelegates.VVVV-4.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVV-4.html",
    "title": "Delegate VVVV<T0, T1, T2, T3> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VVVV<T0, T1, T2, T3> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVV<T0, T1, T2, T3>(T0 t0, T1 t1, T2 t2, T3 t3); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 Type Parameters Name Description T0 T1 T2 T3"
  },
  "api/Unity.Entities.UniversalDelegates.VVVRRRRR-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVRRRRR-8.html",
    "title": "Delegate VVVRRRRR<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VVVRRRRR<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVRRRRR<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, T1 t1, T2 t2, ref T3 t3, ref T4 t4, ref T5 t5, ref T6 t6, ref T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VVVRRRRI-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVRRRRI-8.html",
    "title": "Delegate VVVRRRRI<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VVVRRRRI<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVRRRRI<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, T1 t1, T2 t2, ref T3 t3, ref T4 t4, ref T5 t5, ref T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VVVII-5.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVII-5.html",
    "title": "Delegate VVVII<T0, T1, T2, T3, T4> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VVVII<T0, T1, T2, T3, T4> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVII<T0, T1, T2, T3, T4>(T0 t0, T1 t1, T2 t2, in T3 t3, in T4 t4); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 Type Parameters Name Description T0 T1 T2 T3 T4"
  },
  "api/Unity.Entities.UniversalDelegates.VVVI-4.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVI-4.html",
    "title": "Delegate VVVI<T0, T1, T2, T3> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VVVI<T0, T1, T2, T3> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVI<T0, T1, T2, T3>(T0 t0, T1 t1, T2 t2, in T3 t3); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 Type Parameters Name Description T0 T1 T2 T3"
  },
  "api/Unity.Entities.UniversalDelegates.VVV-3.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVV-3.html",
    "title": "Delegate VVV<T0, T1, T2> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VVV<T0, T1, T2> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVV<T0, T1, T2>(T0 t0, T1 t1, T2 t2); Parameters Type Name Description T0 t0 T1 t1 T2 t2 Type Parameters Name Description T0 T1 T2"
  },
  "api/Unity.Entities.UniversalDelegates.VVRRRRRR-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVRRRRRR-8.html",
    "title": "Delegate VVRRRRRR<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VVRRRRRR<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVRRRRRR<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, T1 t1, ref T2 t2, ref T3 t3, ref T4 t4, ref T5 t5, ref T6 t6, ref T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VVRRRRRI-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVRRRRRI-8.html",
    "title": "Delegate VVRRRRRI<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VVRRRRRI<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVRRRRRI<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, T1 t1, ref T2 t2, ref T3 t3, ref T4 t4, ref T5 t5, ref T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VVRRRRR-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVRRRRR-7.html",
    "title": "Delegate VVRRRRR<T0, T1, T2, T3, T4, T5, T6> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VVRRRRR<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVRRRRR<T0, T1, T2, T3, T4, T5, T6>(T0 t0, T1 t1, ref T2 t2, ref T3 t3, ref T4 t4, ref T5 t5, ref T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.VVRRRRII-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVRRRRII-8.html",
    "title": "Delegate VVRRRRII<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VVRRRRII<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVRRRRII<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, T1 t1, ref T2 t2, ref T3 t3, ref T4 t4, ref T5 t5, in T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VVRRRRI-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVRRRRI-7.html",
    "title": "Delegate VVRRRRI<T0, T1, T2, T3, T4, T5, T6> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VVRRRRI<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVRRRRI<T0, T1, T2, T3, T4, T5, T6>(T0 t0, T1 t1, ref T2 t2, ref T3 t3, ref T4 t4, ref T5 t5, in T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.VRRRRRRI-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VRRRRRRI-8.html",
    "title": "Delegate VRRRRRRI<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VRRRRRRI<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VRRRRRRI<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, ref T1 t1, ref T2 t2, ref T3 t3, ref T4 t4, ref T5 t5, ref T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VRRRRRR-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VRRRRRR-7.html",
    "title": "Delegate VRRRRRR<T0, T1, T2, T3, T4, T5, T6> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VRRRRRR<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VRRRRRR<T0, T1, T2, T3, T4, T5, T6>(T0 t0, ref T1 t1, ref T2 t2, ref T3 t3, ref T4 t4, ref T5 t5, ref T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.VRRRRRII-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VRRRRRII-8.html",
    "title": "Delegate VRRRRRII<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VRRRRRII<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VRRRRRII<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, ref T1 t1, ref T2 t2, ref T3 t3, ref T4 t4, ref T5 t5, in T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VRRRRRI-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VRRRRRI-7.html",
    "title": "Delegate VRRRRRI<T0, T1, T2, T3, T4, T5, T6> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VRRRRRI<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VRRRRRI<T0, T1, T2, T3, T4, T5, T6>(T0 t0, ref T1 t1, ref T2 t2, ref T3 t3, ref T4 t4, ref T5 t5, in T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.TypeManager.StaticTypeLookup-1.html": {
    "href": "api/Unity.Entities.TypeManager.StaticTypeLookup-1.html",
    "title": "Struct TypeManager.StaticTypeLookup<T> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct TypeManager.StaticTypeLookup<T> Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct StaticTypeLookup<T> Type Parameters Name Description T Fields typeIndex Declaration public static int typeIndex Field Value Type Description Int32"
  },
  "api/Unity.Entities.TypeManager.ForcedMemoryOrderingAttribute.html": {
    "href": "api/Unity.Entities.TypeManager.ForcedMemoryOrderingAttribute.html",
    "title": "Class TypeManager.ForcedMemoryOrderingAttribute | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class TypeManager.ForcedMemoryOrderingAttribute Inheritance Object Attribute TypeManager.ForcedMemoryOrderingAttribute Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [AttributeUsage(AttributeTargets.Struct)] public class ForcedMemoryOrderingAttribute : Attribute, _Attribute Constructors ForcedMemoryOrderingAttribute(UInt64) Declaration public ForcedMemoryOrderingAttribute(ulong ordering) Parameters Type Name Description UInt64 ordering Fields MemoryOrdering Declaration public ulong MemoryOrdering Field Value Type Description UInt64"
  },
  "api/Unity.Entities.TypeManager.FieldInfo.html": {
    "href": "api/Unity.Entities.TypeManager.FieldInfo.html",
    "title": "Struct TypeManager.FieldInfo | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct TypeManager.FieldInfo Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct FieldInfo Fields byteOffsetInComponent Declaration public int byteOffsetInComponent Field Value Type Description Int32 componentTypeIndex Declaration public int componentTypeIndex Field Value Type Description Int32 primitiveType Declaration public PrimitiveFieldTypes primitiveType Field Value Type Description PrimitiveFieldTypes Operators Implicit(String to TypeManager.FieldInfo) Declaration public static implicit operator TypeManager.FieldInfo(string s) Parameters Type Name Description String s Returns Type Description TypeManager.FieldInfo"
  },
  "api/Unity.Entities.TypeManager.EntityOffsetInfo.html": {
    "href": "api/Unity.Entities.TypeManager.EntityOffsetInfo.html",
    "title": "Struct TypeManager.EntityOffsetInfo | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct TypeManager.EntityOffsetInfo Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct EntityOffsetInfo Fields Offset Declaration public int Offset Field Value Type Description Int32"
  },
  "api/Unity.Entities.SceneReference.html": {
    "href": "api/Unity.Entities.SceneReference.html",
    "title": "Struct SceneReference | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct SceneReference Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct SceneReference : IComponentData, IEquatable<SceneReference> Fields SceneGUID Declaration public Hash128 SceneGUID Field Value Type Description Hash128 Methods Equals(SceneReference) Declaration public bool Equals(SceneReference other) Parameters Type Name Description SceneReference other Returns Type Description Boolean GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode()"
  },
  "api/Unity.Entities.SceneLoadFlags.html": {
    "href": "api/Unity.Entities.SceneLoadFlags.html",
    "title": "Enum SceneLoadFlags | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Enum SceneLoadFlags Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Flags] public enum SceneLoadFlags Fields Name Description BlockOnImport Wait for the SubScene to be fully converted (only relevant for Editor and LiveLink) BlockOnStreamIn Disable asynchronous streaming, SubScene section will be fully loaded during the next update of the streaming system DisableAutoLoad Prevents adding a RequestSceneLoaded to the SubScene section entities when it gets created"
  },
  "api/Unity.Entities.SceneBoundingVolume.html": {
    "href": "api/Unity.Entities.SceneBoundingVolume.html",
    "title": "Struct SceneBoundingVolume | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct SceneBoundingVolume Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct SceneBoundingVolume : IComponentData Fields Value Declaration public MinMaxAABB Value Field Value Type Description MinMaxAABB"
  },
  "api/Unity.Entities.SOAFieldInfo.html": {
    "href": "api/Unity.Entities.SOAFieldInfo.html",
    "title": "Struct SOAFieldInfo | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct SOAFieldInfo Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct SOAFieldInfo Fields Offset Declaration public ushort Offset Field Value Type Description UInt16 Size Declaration public ushort Size Field Value Type Description UInt16"
  },
  "api/Unity.Entities.RestrictAuthoringInputToAttribute.html": {
    "href": "api/Unity.Entities.RestrictAuthoringInputToAttribute.html",
    "title": "Class RestrictAuthoringInputToAttribute | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class RestrictAuthoringInputToAttribute Inheritance Object RestrictAuthoringInputToAttribute Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [AttributeUsage(AttributeTargets.Field)] public class RestrictAuthoringInputToAttribute : PropertyAttribute Constructors RestrictAuthoringInputToAttribute(Type) Declaration public RestrictAuthoringInputToAttribute(Type type) Parameters Type Name Description Type type Properties Type Declaration public Type Type { get; } Property Value Type Description Type"
  },
  "api/Unity.Entities.RequiresEntityConversionAttribute.html": {
    "href": "api/Unity.Entities.RequiresEntityConversionAttribute.html",
    "title": "Class RequiresEntityConversionAttribute | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class RequiresEntityConversionAttribute Inheritance Object Attribute RequiresEntityConversionAttribute Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [AttributeUsage(AttributeTargets.Class)] public class RequiresEntityConversionAttribute : Attribute, _Attribute"
  },
  "api/Unity.Entities.RequireComponentTagAttribute.html": {
    "href": "api/Unity.Entities.RequireComponentTagAttribute.html",
    "title": "Class RequireComponentTagAttribute | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class RequireComponentTagAttribute Inheritance Object Attribute RequireComponentTagAttribute Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [AttributeUsage(AttributeTargets.Struct)] public class RequireComponentTagAttribute : Attribute, _Attribute Constructors RequireComponentTagAttribute(Type[]) Declaration public RequireComponentTagAttribute(params Type[] tagComponents) Parameters Type Name Description Type [] tagComponents Fields TagComponents Declaration public Type[] TagComponents Field Value Type Description Type []"
  },
  "api/Unity.Entities.RequestSceneLoaded.html": {
    "href": "api/Unity.Entities.RequestSceneLoaded.html",
    "title": "Struct RequestSceneLoaded | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct RequestSceneLoaded Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct RequestSceneLoaded : IComponentData Fields LoadFlags Declaration public SceneLoadFlags LoadFlags Field Value Type Description SceneLoadFlags"
  },
  "api/Unity.Entities.LinkedEntityGroupChange.html": {
    "href": "api/Unity.Entities.LinkedEntityGroupChange.html",
    "title": "Struct LinkedEntityGroupChange | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct LinkedEntityGroupChange Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct LinkedEntityGroupChange Fields ChildEntityGuid Declaration public EntityGuid ChildEntityGuid Field Value Type Description EntityGuid RootEntityGuid Declaration public EntityGuid RootEntityGuid Field Value Type Description EntityGuid"
  },
  "api/Unity.Entities.LinkedEntityGroup.html": {
    "href": "api/Unity.Entities.LinkedEntityGroup.html",
    "title": "Struct LinkedEntityGroup | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct LinkedEntityGroup The LinkedEntityGroup buffer makes the entity be the root of a set of connected entities. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct LinkedEntityGroup : IBufferElementData Remarks Referenced Prefabs automatically add a LinkedEntityGroup with the complete child hierarchy. EntityManager.Instantiate uses LinkedEntityGroup to instantiate the whole set of entities automatically. EntityManager.SetEnabled uses LinkedEntityGroup to enable the whole set of entities. Fields Value A child entity. Declaration public Entity Value Field Value Type Description Entity Operators Implicit(Entity to LinkedEntityGroup) Provides implicit conversion of an Entity to a LinkedEntityGroup element. Declaration public static implicit operator LinkedEntityGroup(Entity e) Parameters Type Name Description Entity e The entity to convert Returns Type Description LinkedEntityGroup A new buffer element."
  },
  "api/Unity.Entities.LayoutUtilityManaged.html": {
    "href": "api/Unity.Entities.LayoutUtilityManaged.html",
    "title": "Struct LayoutUtilityManaged | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct LayoutUtilityManaged Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct LayoutUtilityManaged Methods CreateDescriptor(Type, Allocator) Declaration public static NativeArray<SOAFieldInfo> CreateDescriptor(Type type, Allocator allocator) Parameters Type Name Description Type type Allocator allocator Returns Type Description NativeArray < SOAFieldInfo >"
  },
  "api/Unity.Entities.LambdaSimpleJobDescriptionConstructionMethods.html": {
    "href": "api/Unity.Entities.LambdaSimpleJobDescriptionConstructionMethods.html",
    "title": "Class LambdaSimpleJobDescriptionConstructionMethods | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class LambdaSimpleJobDescriptionConstructionMethods Inheritance Object LambdaSimpleJobDescriptionConstructionMethods Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class LambdaSimpleJobDescriptionConstructionMethods Methods WithCode(LambdaSingleJobDescription, Action) Declaration public static LambdaSingleJobDescription WithCode(this LambdaSingleJobDescription description, Action code) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.LambdaSingleJobDescription description Action code Returns Type Description Unity.Entities.CodeGeneratedJobForEach.LambdaSingleJobDescription"
  },
  "api/Unity.Entities.LambdaJobQueryConstructionMethods.html": {
    "href": "api/Unity.Entities.LambdaJobQueryConstructionMethods.html",
    "title": "Class LambdaJobQueryConstructionMethods | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class LambdaJobQueryConstructionMethods Inheritance Object LambdaJobQueryConstructionMethods Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class LambdaJobQueryConstructionMethods Methods WithAll<T>(ForEachLambdaJobDescription) Declaration public static ForEachLambdaJobDescription WithAll<T>(this ForEachLambdaJobDescription description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription Type Parameters Name Description T WithAll<T>(LambdaJobChunkDescription) Declaration public static LambdaJobChunkDescription WithAll<T>(this LambdaJobChunkDescription description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription Type Parameters Name Description T WithAll<T1, T2>(ForEachLambdaJobDescription) Declaration public static ForEachLambdaJobDescription WithAll<T1, T2>(this ForEachLambdaJobDescription description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription Type Parameters Name Description T1 T2 WithAll<T1, T2>(LambdaJobChunkDescription) Declaration public static LambdaJobChunkDescription WithAll<T1, T2>(this LambdaJobChunkDescription description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription Type Parameters Name Description T1 T2 WithAll<T1, T2, T3>(ForEachLambdaJobDescription) Declaration public static ForEachLambdaJobDescription WithAll<T1, T2, T3>(this ForEachLambdaJobDescription description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription Type Parameters Name Description T1 T2 T3 WithAll<T1, T2, T3>(LambdaJobChunkDescription) Declaration public static LambdaJobChunkDescription WithAll<T1, T2, T3>(this LambdaJobChunkDescription description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription Type Parameters Name Description T1 T2 T3 WithAny<T>(ForEachLambdaJobDescription) Declaration public static ForEachLambdaJobDescription WithAny<T>(this ForEachLambdaJobDescription description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription Type Parameters Name Description T WithAny<T>(LambdaJobChunkDescription) Declaration public static LambdaJobChunkDescription WithAny<T>(this LambdaJobChunkDescription description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription Type Parameters Name Description T WithAny<T1, T2>(ForEachLambdaJobDescription) Declaration public static ForEachLambdaJobDescription WithAny<T1, T2>(this ForEachLambdaJobDescription description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription Type Parameters Name Description T1 T2 WithAny<T1, T2>(LambdaJobChunkDescription) Declaration public static LambdaJobChunkDescription WithAny<T1, T2>(this LambdaJobChunkDescription description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription Type Parameters Name Description T1 T2 WithAny<T1, T2, T3>(ForEachLambdaJobDescription) Declaration public static ForEachLambdaJobDescription WithAny<T1, T2, T3>(this ForEachLambdaJobDescription description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription Type Parameters Name Description T1 T2 T3 WithAny<T1, T2, T3>(LambdaJobChunkDescription) Declaration public static LambdaJobChunkDescription WithAny<T1, T2, T3>(this LambdaJobChunkDescription description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription Type Parameters Name Description T1 T2 T3 WithChangeFilter<T>(ForEachLambdaJobDescription) Declaration public static ForEachLambdaJobDescription WithChangeFilter<T>(this ForEachLambdaJobDescription description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription Type Parameters Name Description T WithChangeFilter<T>(LambdaJobChunkDescription) Declaration public static LambdaJobChunkDescription WithChangeFilter<T>(this LambdaJobChunkDescription description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription Type Parameters Name Description T WithChangeFilter<T1, T2>(ForEachLambdaJobDescription) Declaration public static ForEachLambdaJobDescription WithChangeFilter<T1, T2>(this ForEachLambdaJobDescription description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription Type Parameters Name Description T1 T2 WithChangeFilter<T1, T2>(LambdaJobChunkDescription) Declaration public static LambdaJobChunkDescription WithChangeFilter<T1, T2>(this LambdaJobChunkDescription description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription Type Parameters Name Description T1 T2 WithEntityQueryOptions(ForEachLambdaJobDescription, EntityQueryOptions) Declaration public static ForEachLambdaJobDescription WithEntityQueryOptions(this ForEachLambdaJobDescription description, EntityQueryOptions options) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription description EntityQueryOptions options Returns Type Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription WithEntityQueryOptions(LambdaJobChunkDescription, EntityQueryOptions) Declaration public static LambdaJobChunkDescription WithEntityQueryOptions(this LambdaJobChunkDescription description, EntityQueryOptions options) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription description EntityQueryOptions options Returns Type Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription WithNone<T>(ForEachLambdaJobDescription) Declaration public static ForEachLambdaJobDescription WithNone<T>(this ForEachLambdaJobDescription description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription Type Parameters Name Description T WithNone<T>(LambdaJobChunkDescription) Declaration public static LambdaJobChunkDescription WithNone<T>(this LambdaJobChunkDescription description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription Type Parameters Name Description T WithNone<T1, T2>(ForEachLambdaJobDescription) Declaration public static ForEachLambdaJobDescription WithNone<T1, T2>(this ForEachLambdaJobDescription description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription Type Parameters Name Description T1 T2 WithNone<T1, T2>(LambdaJobChunkDescription) Declaration public static LambdaJobChunkDescription WithNone<T1, T2>(this LambdaJobChunkDescription description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription Type Parameters Name Description T1 T2 WithNone<T1, T2, T3>(ForEachLambdaJobDescription) Declaration public static ForEachLambdaJobDescription WithNone<T1, T2, T3>(this ForEachLambdaJobDescription description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription Type Parameters Name Description T1 T2 T3 WithNone<T1, T2, T3>(LambdaJobChunkDescription) Declaration public static LambdaJobChunkDescription WithNone<T1, T2, T3>(this LambdaJobChunkDescription description) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription description Returns Type Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription Type Parameters Name Description T1 T2 T3 WithSharedComponentFilter<T>(ForEachLambdaJobDescription, T) Declaration public static ForEachLambdaJobDescription WithSharedComponentFilter<T>(this ForEachLambdaJobDescription description, T sharedComponent) where T : struct, ISharedComponentData Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription description T sharedComponent Returns Type Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription Type Parameters Name Description T WithSharedComponentFilter<T>(LambdaJobChunkDescription, T) Declaration public static LambdaJobChunkDescription WithSharedComponentFilter<T>(this LambdaJobChunkDescription description, T sharedComponent) where T : struct, ISharedComponentData Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription description T sharedComponent Returns Type Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription Type Parameters Name Description T WithStoreEntityQueryInField(ForEachLambdaJobDescription, ref EntityQuery) Declaration public static ForEachLambdaJobDescription WithStoreEntityQueryInField(this ForEachLambdaJobDescription description, ref EntityQuery query) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription description EntityQuery query Returns Type Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription WithStoreEntityQueryInField(LambdaJobChunkDescription, ref EntityQuery) Declaration public static LambdaJobChunkDescription WithStoreEntityQueryInField(this LambdaJobChunkDescription description, ref EntityQuery query) Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription description EntityQuery query Returns Type Description Unity.Entities.CodeGeneratedJobForEach.LambdaJobChunkDescription"
  },
  "api/Unity.Entities.InitializationSystemGroup.html": {
    "href": "api/Unity.Entities.InitializationSystemGroup.html",
    "title": "Class InitializationSystemGroup | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class InitializationSystemGroup Inheritance Object ComponentSystemBase ComponentSystem ComponentSystemGroup InitializationSystemGroup Inherited Members ComponentSystemGroup.m_systemsToUpdate ComponentSystemGroup.m_systemsToRemove ComponentSystemGroup.Systems ComponentSystemGroup.AddSystemToUpdateList(ComponentSystemBase) ComponentSystemGroup.RemoveSystemFromUpdateList(ComponentSystemBase) ComponentSystemGroup.OnStopRunning() ComponentSystemGroup.OnUpdate() ComponentSystem.PostUpdateCommands ComponentSystem.InitEntityQueryCache(Int32) ComponentSystem.Entities ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnCreate() ComponentSystemBase.OnDestroyManager() ComponentSystemBase.OnCreateManager() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.Update() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetArchetypeChunkComponentType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkComponentTypeDynamic(ComponentType) ComponentSystemBase.GetArchetypeChunkBufferType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkSharedComponentType<T>() ComponentSystemBase.GetArchetypeChunkEntityType() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class InitializationSystemGroup : ComponentSystemGroup Constructors InitializationSystemGroup() Declaration public InitializationSystemGroup() Methods SortSystemUpdateList() Declaration public override void SortSystemUpdateList() Overrides ComponentSystemGroup.SortSystemUpdateList() Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Entities.ISystemStateSharedComponentData.html": {
    "href": "api/Unity.Entities.ISystemStateSharedComponentData.html",
    "title": "Interface ISystemStateSharedComponentData | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Interface ISystemStateSharedComponentData An interface for a component type that stores shared system-specific data. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface ISystemStateSharedComponentData : ISharedComponentData See Also ISystemStateComponentData ISharedComponentData"
  },
  "api/Unity.Entities.ISystemStateComponentData.html": {
    "href": "api/Unity.Entities.ISystemStateComponentData.html",
    "title": "Interface ISystemStateComponentData | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Interface ISystemStateComponentData An interface for a component type that stores system-specific data. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface ISystemStateComponentData : IComponentData Remarks ISystemStateComponentData implementations are subject to the same constraints as IComponentData : they can only contain blittable data types. System state components are specialized components designed to allow systems to store their own stateful data on an entity. The functional difference between a general-purpose component and a system state component is that the presence of a system state component delays entity destruction until the system explicitly removes the component. This delay allows a system to cleanup any state or persistent resources it has created and associated with an entity. The typical pattern for using a system state component is for the system to find new entities by querying for entities with specific archetype, that do not have the component. The system can add a system state component to the entity and then set state values or create resources for the new entity. A system can then detect entity destruction by querying for entities that have the system state component, but not the other components in the original archetype. The system must then cleanup any state or resources and then remove the system state component. The ECS code only fully deletes the entity after the system removes the system state component. See System State Components for additional information."
  },
  "api/Unity.Entities.ISystemStateBufferElementData.html": {
    "href": "api/Unity.Entities.ISystemStateBufferElementData.html",
    "title": "Interface ISystemStateBufferElementData | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Interface ISystemStateBufferElementData An interface for a component type that stores system-specific data in a buffer. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public interface ISystemStateBufferElementData : IBufferElementData See Also ISystemStateComponentData IBufferElementData"
  },
  "api/Unity.Entities.GameObjectConversionUtility.html": {
    "href": "api/Unity.Entities.GameObjectConversionUtility.html",
    "title": "Class GameObjectConversionUtility | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class GameObjectConversionUtility Inheritance Object GameObjectConversionUtility Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class GameObjectConversionUtility Methods ConvertGameObjectHierarchy(GameObject, GameObjectConversionSettings) Declaration public static Entity ConvertGameObjectHierarchy(GameObject root, GameObjectConversionSettings settings) Parameters Type Name Description GameObject root GameObjectConversionSettings settings Returns Type Description Entity ConvertGameObjectsToEntitiesField(GameObjectConversionSystem, GameObject[], out Entity[]) Declaration public static void ConvertGameObjectsToEntitiesField(GameObjectConversionSystem conversionSystem, GameObject[] gameObjects, out Entity[] entities) Parameters Type Name Description GameObjectConversionSystem conversionSystem GameObject [] gameObjects Entity [] entities ConvertIncremental(World, IEnumerable<GameObject>, GameObjectConversionUtility.ConversionFlags) Declaration public static void ConvertIncremental(World conversionWorld, IEnumerable<GameObject> gameObjects, GameObjectConversionUtility.ConversionFlags flags) Parameters Type Name Description World conversionWorld IEnumerable < GameObject > gameObjects GameObjectConversionUtility.ConversionFlags flags ConvertIncrementalInitialize(Scene, GameObjectConversionSettings) Declaration public static World ConvertIncrementalInitialize(Scene scene, GameObjectConversionSettings settings) Parameters Type Name Description Scene scene GameObjectConversionSettings settings Returns Type Description World ConvertScene(Scene, GameObjectConversionSettings) Declaration public static void ConvertScene(Scene scene, GameObjectConversionSettings settings) Parameters Type Name Description Scene scene GameObjectConversionSettings settings GetEntityGuid(GameObject, Int32) Declaration public static EntityGuid GetEntityGuid(GameObject gameObject, int index) Parameters Type Name Description GameObject gameObject Int32 index Returns Type Description EntityGuid"
  },
  "api/Unity.Entities.GameObjectConversionUtility.ConversionFlags.html": {
    "href": "api/Unity.Entities.GameObjectConversionUtility.ConversionFlags.html",
    "title": "Enum GameObjectConversionUtility.ConversionFlags | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Enum GameObjectConversionUtility.ConversionFlags Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Flags] public enum ConversionFlags : uint Fields Name Description AddEntityGUID AssignName ForceStaticOptimization GameViewLiveLink SceneViewLiveLink"
  },
  "api/Unity.Entities.GameObjectConversionSettings.html": {
    "href": "api/Unity.Entities.GameObjectConversionSettings.html",
    "title": "Class GameObjectConversionSettings | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class GameObjectConversionSettings Inheritance Object GameObjectConversionSettings Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class GameObjectConversionSettings Constructors GameObjectConversionSettings() Declaration public GameObjectConversionSettings() GameObjectConversionSettings(World, GameObjectConversionUtility.ConversionFlags) Declaration public GameObjectConversionSettings(World destinationWorld, GameObjectConversionUtility.ConversionFlags conversionFlags) Parameters Type Name Description World destinationWorld GameObjectConversionUtility.ConversionFlags conversionFlags Fields ConversionFlags Declaration public GameObjectConversionUtility.ConversionFlags ConversionFlags Field Value Type Description GameObjectConversionUtility.ConversionFlags ConversionWorldCreated Declaration public Action<World> ConversionWorldCreated Field Value Type Description Action < World > ConversionWorldPreDispose Declaration public Action<World> ConversionWorldPreDispose Field Value Type Description Action < World > DebugConversionName Declaration public string DebugConversionName Field Value Type Description String DestinationWorld Declaration public World DestinationWorld Field Value Type Description World ExtraSystems Declaration public Type[] ExtraSystems Field Value Type Description Type [] NamespaceID Declaration public byte NamespaceID Field Value Type Description Byte SceneGUID Declaration public Hash128 SceneGUID Field Value Type Description Hash128 Properties BlobAssetStore Declaration public BlobAssetStore BlobAssetStore { get; } Property Value Type Description BlobAssetStore SupportsExporting Declaration public bool SupportsExporting { get; } Property Value Type Description Boolean Methods CreateConversionWorld() Declaration public World CreateConversionWorld() Returns Type Description World Fork(Byte) Declaration public GameObjectConversionSettings Fork(byte entityGuidNamespaceID) Parameters Type Name Description Byte entityGuidNamespaceID Returns Type Description GameObjectConversionSettings FromHash(Hash128, BlobAssetStore) Declaration public static GameObjectConversionSettings FromHash(Hash128 hash, BlobAssetStore blobAssetStore) Parameters Type Name Description Hash128 hash BlobAssetStore blobAssetStore Returns Type Description GameObjectConversionSettings FromWorld(World, BlobAssetStore) Declaration public static GameObjectConversionSettings FromWorld(World destinationWorld, BlobAssetStore blobAssetStore) Parameters Type Name Description World destinationWorld BlobAssetStore blobAssetStore Returns Type Description GameObjectConversionSettings GetGuidForAssetExport(UnityEngine.Object) Declaration public virtual Guid GetGuidForAssetExport(UnityEngine.Object uobject) Parameters Type Name Description UnityEngine.Object uobject Returns Type Description Guid TryCreateAssetExportWriter(UnityEngine.Object) Declaration public virtual Stream TryCreateAssetExportWriter(UnityEngine.Object uobject) Parameters Type Name Description UnityEngine.Object uobject Returns Type Description Stream WithExtraSystem<T>() Declaration public GameObjectConversionSettings WithExtraSystem<T>() Returns Type Description GameObjectConversionSettings Type Parameters Name Description T WithExtraSystems(Type[]) Declaration public GameObjectConversionSettings WithExtraSystems(params Type[] extraSystems) Parameters Type Name Description Type [] extraSystems Returns Type Description GameObjectConversionSettings WithExtraSystems<T1, T2>() Declaration public GameObjectConversionSettings WithExtraSystems<T1, T2>() Returns Type Description GameObjectConversionSettings Type Parameters Name Description T1 T2 WithExtraSystems<T1, T2, T3>() Declaration public GameObjectConversionSettings WithExtraSystems<T1, T2, T3>() Returns Type Description GameObjectConversionSettings Type Parameters Name Description T1 T2 T3"
  },
  "api/Unity.Entities.ForEachLambdaJobDescription_SetSharedComponent.html": {
    "href": "api/Unity.Entities.ForEachLambdaJobDescription_SetSharedComponent.html",
    "title": "Class ForEachLambdaJobDescription_SetSharedComponent | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class ForEachLambdaJobDescription_SetSharedComponent Inheritance Object ForEachLambdaJobDescription_SetSharedComponent Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class ForEachLambdaJobDescription_SetSharedComponent Methods SetSharedComponentFilterOnQuery<T>(ForEachLambdaJobDescription, T, EntityQuery) Declaration public static ForEachLambdaJobDescription SetSharedComponentFilterOnQuery<T>(ForEachLambdaJobDescription description, T sharedComponent, EntityQuery query) where T : struct, ISharedComponentData Parameters Type Name Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription description T sharedComponent EntityQuery query Returns Type Description Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription Type Parameters Name Description T"
  },
  "api/Unity.Entities.EntityReferenceChange.html": {
    "href": "api/Unity.Entities.EntityReferenceChange.html",
    "title": "Struct EntityReferenceChange | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct EntityReferenceChange Represents an entity reference that was changed within a EntityChangeSet This structure references the entity by it's unique EntityGuid . Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct EntityReferenceChange Remarks Multiple patches could exist for the same component with different offsets. Fields Component The entity and component this patched is targeted at. Declaration public PackedComponent Component Field Value Type Description PackedComponent Offset The field offset for the Entity field. Declaration public int Offset Field Value Type Description Int32 Value The entity that the field should reference. Identified by the unique EntityGuid . Declaration public EntityGuid Value Field Value Type Description EntityGuid"
  },
  "api/Unity.Entities.EntityQueryOptions.html": {
    "href": "api/Unity.Entities.EntityQueryOptions.html",
    "title": "Enum EntityQueryOptions | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Enum EntityQueryOptions The bit flags to use for the Options field. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Flags] public enum EntityQueryOptions Fields Name Description Default No options specified. FilterWriteGroup The queryDesc should filter selected entities based on the WriteGroupAttribute settings of the components specified in the queryDesc. IncludeDisabled The queryDesc includes the special Disabled component. IncludePrefab The queryDesc includes the special Prefab component."
  },
  "api/Unity.Entities.EntityQueryMask.html": {
    "href": "api/Unity.Entities.EntityQueryMask.html",
    "title": "Struct EntityQueryMask | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct EntityQueryMask This mask can be used to quickly identify if an entity would be returned by an EntityQuery. There is a maximum limit of 1024 EntityQueryMasks that can be created. EntityQueryMasks cannot be created from EntityQueries with filters. Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct EntityQueryMask Methods Matches(Entity) Confirms whether an entity would belong to the EntityQuery used to create this EntityQueryMask. Declaration public bool Matches(Entity entity) Parameters Type Name Description Entity entity The entity to check. Returns Type Description Boolean True if the entity would be returned by the EntityQuery, false if it would not. See Also GetEntityQueryMask(EntityQuery)"
  },
  "api/Unity.Entities.EntityQueryExtensionsForTransformAccessArray.html": {
    "href": "api/Unity.Entities.EntityQueryExtensionsForTransformAccessArray.html",
    "title": "Class EntityQueryExtensionsForTransformAccessArray | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class EntityQueryExtensionsForTransformAccessArray Inheritance Object EntityQueryExtensionsForTransformAccessArray Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class EntityQueryExtensionsForTransformAccessArray Methods GetTransformAccessArray(EntityQuery) Declaration public static TransformAccessArray GetTransformAccessArray(this EntityQuery group) Parameters Type Name Description EntityQuery group Returns Type Description TransformAccessArray"
  },
  "api/Unity.Entities.EntityInChunk.html": {
    "href": "api/Unity.Entities.EntityInChunk.html",
    "title": "Struct EntityInChunk | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct EntityInChunk Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct EntityInChunk : IComparable<EntityInChunk>, IEquatable<EntityInChunk> Methods CompareTo(EntityInChunk) Declaration public int CompareTo(EntityInChunk other) Parameters Type Name Description EntityInChunk other Returns Type Description Int32 Equals(EntityInChunk) Declaration public bool Equals(EntityInChunk other) Parameters Type Name Description EntityInChunk other Returns Type Description Boolean"
  },
  "api/Unity.Transforms.EndFrameWorldToLocalSystem.html": {
    "href": "api/Unity.Transforms.EndFrameWorldToLocalSystem.html",
    "title": "Class EndFrameWorldToLocalSystem | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class EndFrameWorldToLocalSystem Inheritance Object ComponentSystemBase JobComponentSystem WorldToLocalSystem EndFrameWorldToLocalSystem Inherited Members WorldToLocalSystem.OnCreate() WorldToLocalSystem.OnUpdate(JobHandle) JobComponentSystem.Entities JobComponentSystem.Job JobComponentSystem.GetBufferFromEntity<T>(Boolean) ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnDestroyManager() ComponentSystemBase.OnCreateManager() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.Update() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetArchetypeChunkComponentType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkComponentTypeDynamic(ComponentType) ComponentSystemBase.GetArchetypeChunkBufferType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkSharedComponentType<T>() ComponentSystemBase.GetArchetypeChunkEntityType() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Transforms <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [UpdateInGroup(typeof(TransformSystemGroup))] [UpdateAfter(typeof(EndFrameTRSToLocalToWorldSystem))] [UpdateAfter(typeof(EndFrameLocalToParentSystem))] public class EndFrameWorldToLocalSystem : WorldToLocalSystem Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Entities.UpdateInGroupAttribute.html": {
    "href": "api/Unity.Entities.UpdateInGroupAttribute.html",
    "title": "Class UpdateInGroupAttribute | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class UpdateInGroupAttribute Inheritance Object Attribute UpdateInGroupAttribute Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [AttributeUsage(AttributeTargets.Class)] public class UpdateInGroupAttribute : Attribute, _Attribute Constructors UpdateInGroupAttribute(Type) Declaration public UpdateInGroupAttribute(Type groupType) Parameters Type Name Description Type groupType Properties GroupType Declaration public Type GroupType { get; } Property Value Type Description Type"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVRRRI-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVRRRI-8.html",
    "title": "Delegate VVVVRRRI<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VVVVRRRI<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVRRRI<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, T1 t1, T2 t2, T3 t3, ref T4 t4, ref T5 t5, ref T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVRRR-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVRRR-7.html",
    "title": "Delegate VVVVRRR<T0, T1, T2, T3, T4, T5, T6> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VVVVRRR<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVRRR<T0, T1, T2, T3, T4, T5, T6>(T0 t0, T1 t1, T2 t2, T3 t3, ref T4 t4, ref T5 t5, ref T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVRRII-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVRRII-8.html",
    "title": "Delegate VVVVRRII<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VVVVRRII<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVRRII<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, T1 t1, T2 t2, T3 t3, ref T4 t4, ref T5 t5, in T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVRRI-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVRRI-7.html",
    "title": "Delegate VVVVRRI<T0, T1, T2, T3, T4, T5, T6> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VVVVRRI<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVRRI<T0, T1, T2, T3, T4, T5, T6>(T0 t0, T1 t1, T2 t2, T3 t3, ref T4 t4, ref T5 t5, in T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.VVII-4.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVII-4.html",
    "title": "Delegate VVII<T0, T1, T2, T3> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VVII<T0, T1, T2, T3> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVII<T0, T1, T2, T3>(T0 t0, T1 t1, in T2 t2, in T3 t3); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 Type Parameters Name Description T0 T1 T2 T3"
  },
  "api/Unity.Entities.UniversalDelegates.VVI-3.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVI-3.html",
    "title": "Delegate VVI<T0, T1, T2> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VVI<T0, T1, T2> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVI<T0, T1, T2>(T0 t0, T1 t1, in T2 t2); Parameters Type Name Description T0 t0 T1 t1 T2 t2 Type Parameters Name Description T0 T1 T2"
  },
  "api/Unity.Entities.UniversalDelegates.VV-2.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VV-2.html",
    "title": "Delegate VV<T0, T1> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VV<T0, T1> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VV<T0, T1>(T0 t0, T1 t1); Parameters Type Name Description T0 t0 T1 t1 Type Parameters Name Description T0 T1"
  },
  "api/Unity.Entities.UniversalDelegates.VRRRRRRR-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VRRRRRRR-8.html",
    "title": "Delegate VRRRRRRR<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VRRRRRRR<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VRRRRRRR<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, ref T1 t1, ref T2 t2, ref T3 t3, ref T4 t4, ref T5 t5, ref T6 t6, ref T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.RegisterGenericComponentTypeAttribute.html": {
    "href": "api/Unity.Entities.RegisterGenericComponentTypeAttribute.html",
    "title": "Class RegisterGenericComponentTypeAttribute | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class RegisterGenericComponentTypeAttribute Inheritance Object Attribute RegisterGenericComponentTypeAttribute Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [AttributeUsage(AttributeTargets.Assembly, AllowMultiple = true)] public class RegisterGenericComponentTypeAttribute : Attribute, _Attribute Constructors RegisterGenericComponentTypeAttribute(Type) Declaration public RegisterGenericComponentTypeAttribute(Type type) Parameters Type Name Description Type type Fields ConcreteType Declaration public Type ConcreteType Field Value Type Description Type"
  },
  "api/Unity.Entities.ReferencedUnityObjects.html": {
    "href": "api/Unity.Entities.ReferencedUnityObjects.html",
    "title": "Class ReferencedUnityObjects | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class ReferencedUnityObjects Inheritance Object ReferencedUnityObjects Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class ReferencedUnityObjects : ScriptableObject Fields Array Declaration public UnityEngine.Object[] Array Field Value Type Description UnityEngine.Object []"
  },
  "api/Unity.Entities.PrimitiveFieldTypes.html": {
    "href": "api/Unity.Entities.PrimitiveFieldTypes.html",
    "title": "Enum PrimitiveFieldTypes | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Enum PrimitiveFieldTypes Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public enum PrimitiveFieldTypes Fields Name Description Bool Byte Color Double Float Float2 Float3 Float4 Int Long Quaternion SByte Short UInt Ulong UShort"
  },
  "api/Unity.Entities.PresentationSystemGroup.html": {
    "href": "api/Unity.Entities.PresentationSystemGroup.html",
    "title": "Class PresentationSystemGroup | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class PresentationSystemGroup Inheritance Object ComponentSystemBase ComponentSystem ComponentSystemGroup PresentationSystemGroup Inherited Members ComponentSystemGroup.m_systemsToUpdate ComponentSystemGroup.m_systemsToRemove ComponentSystemGroup.Systems ComponentSystemGroup.AddSystemToUpdateList(ComponentSystemBase) ComponentSystemGroup.RemoveSystemFromUpdateList(ComponentSystemBase) ComponentSystemGroup.OnStopRunning() ComponentSystemGroup.OnUpdate() ComponentSystem.PostUpdateCommands ComponentSystem.InitEntityQueryCache(Int32) ComponentSystem.Entities ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.Time ComponentSystemBase.OnCreateForCompiler() ComponentSystemBase.OnCreate() ComponentSystemBase.OnDestroyManager() ComponentSystemBase.OnCreateManager() ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnDestroy() ComponentSystemBase.Update() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetArchetypeChunkComponentType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkComponentTypeDynamic(ComponentType) ComponentSystemBase.GetArchetypeChunkBufferType<T>(Boolean) ComponentSystemBase.GetArchetypeChunkSharedComponentType<T>() ComponentSystemBase.GetArchetypeChunkEntityType() ComponentSystemBase.GetComponentDataFromEntity<T>(Boolean) ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.GetEntityQuery(ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(EntityQueryDesc[]) Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public class PresentationSystemGroup : ComponentSystemGroup Constructors PresentationSystemGroup() Declaration public PresentationSystemGroup() Methods SortSystemUpdateList() Declaration public override void SortSystemUpdateList() Overrides ComponentSystemGroup.SortSystemUpdateList() Extension Methods ComponentSystemBaseManagedComponentExtensions.HasSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.GetSingleton<T>(ComponentSystemBase) ComponentSystemBaseManagedComponentExtensions.SetSingleton<T>(ComponentSystemBase, T) JobForEachExtensions.GetEntityQueryForIJobForEach(ComponentSystemBase, Type)"
  },
  "api/Unity.Entities.FastEquality.TypeInfo.GetHashCodeDelegate.html": {
    "href": "api/Unity.Entities.FastEquality.TypeInfo.GetHashCodeDelegate.html",
    "title": "Delegate FastEquality.TypeInfo.GetHashCodeDelegate | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate FastEquality.TypeInfo.GetHashCodeDelegate Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate int GetHashCodeDelegate(void *obj); Parameters Type Name Description Void * obj Returns Type Description Int32"
  },
  "api/Unity.Entities.FastEquality.TypeInfo.CompareEqualDelegate.html": {
    "href": "api/Unity.Entities.FastEquality.TypeInfo.CompareEqualDelegate.html",
    "title": "Delegate FastEquality.TypeInfo.CompareEqualDelegate | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate FastEquality.TypeInfo.CompareEqualDelegate Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate bool CompareEqualDelegate(void *lhs, void *rhs); Parameters Type Name Description Void * lhs Void * rhs Returns Type Description Boolean"
  },
  "api/Unity.Entities.FastEquality.Layout.html": {
    "href": "api/Unity.Entities.FastEquality.Layout.html",
    "title": "Struct FastEquality.Layout | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct FastEquality.Layout Namespace : Unity.Entities <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct Layout Fields Aligned4 Declaration public bool Aligned4 Field Value Type Description Boolean count Declaration public int count Field Value Type Description Int32 offset Declaration public int offset Field Value Type Description Int32 Methods ToString() Declaration public override string ToString() Returns Type Description String Overrides ValueType.ToString()"
  },
  "api/Unity.Profiling.ProfilerMarker.AutoScope.html": {
    "href": "api/Unity.Profiling.ProfilerMarker.AutoScope.html",
    "title": "Struct ProfilerMarker.AutoScope | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct ProfilerMarker.AutoScope Namespace : Unity.Profiling <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct AutoScope : IDisposable Methods Dispose() Declaration public void Dispose()"
  },
  "api/Unity.Mathematics.html": {
    "href": "api/Unity.Mathematics.html",
    "title": "Namespace Unity.Mathematics | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Namespace Unity.Mathematics Classes AABBExtensions Structs AABB GeneratePoints MinMaxAABB"
  },
  "api/Unity.Mathematics.MinMaxAABB.html": {
    "href": "api/Unity.Mathematics.MinMaxAABB.html",
    "title": "Struct MinMaxAABB | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct MinMaxAABB Namespace : Unity.Mathematics <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax [Serializable] public struct MinMaxAABB : IEquatable<MinMaxAABB> Fields Max Declaration public float3 Max Field Value Type Description float3 Min Declaration public float3 Min Field Value Type Description float3 Properties Empty Declaration public static MinMaxAABB Empty { get; } Property Value Type Description MinMaxAABB IsEmpty Declaration public bool IsEmpty { get; } Property Value Type Description Boolean Methods Encapsulate(float3) Declaration public void Encapsulate(float3 point) Parameters Type Name Description float3 point Encapsulate(MinMaxAABB) Declaration public void Encapsulate(MinMaxAABB aabb) Parameters Type Name Description MinMaxAABB aabb Equals(MinMaxAABB) Declaration public bool Equals(MinMaxAABB other) Parameters Type Name Description MinMaxAABB other Returns Type Description Boolean Operators Implicit(AABB to MinMaxAABB) Declaration public static implicit operator MinMaxAABB(AABB aabb) Parameters Type Name Description AABB aabb Returns Type Description MinMaxAABB Implicit(MinMaxAABB to AABB) Declaration public static implicit operator AABB(MinMaxAABB aabb) Parameters Type Name Description MinMaxAABB aabb Returns Type Description AABB"
  },
  "api/Unity.Mathematics.GeneratePoints.html": {
    "href": "api/Unity.Mathematics.GeneratePoints.html",
    "title": "Struct GeneratePoints | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Struct GeneratePoints Namespace : Unity.Mathematics <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public struct GeneratePoints Methods RandomPointsInSphere(float3, Single, NativeArray<float3>) Declaration public static void RandomPointsInSphere(float3 center, float radius, NativeArray<float3> points) Parameters Type Name Description float3 center Single radius NativeArray < float3 > points RandomPointsInSphere(float3, Single, NativeArray<float3>, JobHandle) Declaration public static JobHandle RandomPointsInSphere(float3 center, float radius, NativeArray<float3> points, JobHandle inputDeps) Parameters Type Name Description float3 center Single radius NativeArray < float3 > points JobHandle inputDeps Returns Type Description JobHandle RandomPointsInUnitSphere(NativeArray<float3>) Declaration public static void RandomPointsInUnitSphere(NativeArray<float3> points) Parameters Type Name Description NativeArray < float3 > points RandomPositionInsideUnitSphere(UInt32) Declaration public static float3 RandomPositionInsideUnitSphere(uint seed) Parameters Type Name Description UInt32 seed Returns Type Description float3"
  },
  "api/Unity.Mathematics.AABBExtensions.html": {
    "href": "api/Unity.Mathematics.AABBExtensions.html",
    "title": "Class AABBExtensions | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Class AABBExtensions Inheritance Object AABBExtensions Namespace : Unity.Mathematics <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public static class AABBExtensions Methods ToAABB(Bounds) Declaration public static AABB ToAABB(this Bounds bounds) Parameters Type Name Description Bounds bounds Returns Type Description AABB ToBounds(AABB) Declaration public static Bounds ToBounds(this AABB aabb) Parameters Type Name Description AABB aabb Returns Type Description Bounds"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVVRII-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVVRII-8.html",
    "title": "Delegate VVVVVRII<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VVVVVRII<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVVRII<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, ref T5 t5, in T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVVRI-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVVRI-7.html",
    "title": "Delegate VVVVVRI<T0, T1, T2, T3, T4, T5, T6> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VVVVVRI<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVVRI<T0, T1, T2, T3, T4, T5, T6>(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, ref T5 t5, in T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVVR-6.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVVR-6.html",
    "title": "Delegate VVVVVR<T0, T1, T2, T3, T4, T5> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VVVVVR<T0, T1, T2, T3, T4, T5> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVVR<T0, T1, T2, T3, T4, T5>(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, ref T5 t5); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 Type Parameters Name Description T0 T1 T2 T3 T4 T5"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVVIII-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVVIII-8.html",
    "title": "Delegate VVVVVIII<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VVVVVIII<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVVIII<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, in T5 t5, in T6 t6, in T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVVII-7.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVVII-7.html",
    "title": "Delegate VVVVVII<T0, T1, T2, T3, T4, T5, T6> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VVVVVII<T0, T1, T2, T3, T4, T5, T6> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVVII<T0, T1, T2, T3, T4, T5, T6>(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, in T5 t5, in T6 t6); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVVI-6.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVVI-6.html",
    "title": "Delegate VVVVVI<T0, T1, T2, T3, T4, T5> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VVVVVI<T0, T1, T2, T3, T4, T5> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVVI<T0, T1, T2, T3, T4, T5>(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, in T5 t5); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 Type Parameters Name Description T0 T1 T2 T3 T4 T5"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVV-5.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVV-5.html",
    "title": "Delegate VVVVV<T0, T1, T2, T3, T4> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VVVVV<T0, T1, T2, T3, T4> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVV<T0, T1, T2, T3, T4>(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 Type Parameters Name Description T0 T1 T2 T3 T4"
  },
  "api/Unity.Entities.UniversalDelegates.VVVVRRRR-8.html": {
    "href": "api/Unity.Entities.UniversalDelegates.VVVVRRRR-8.html",
    "title": "Delegate VVVVRRRR<T0, T1, T2, T3, T4, T5, T6, T7> | Unity Entities Documentation | 0.2.0-preview.12",
    "keywords": "Delegate VVVVRRRR<T0, T1, T2, T3, T4, T5, T6, T7> Namespace : Unity.Entities.UniversalDelegates <!--h6><strong>Assembly</strong>: solution.dll</h6--> Syntax public delegate void VVVVRRRR<T0, T1, T2, T3, T4, T5, T6, T7>(T0 t0, T1 t1, T2 t2, T3 t3, ref T4 t4, ref T5 t5, ref T6 t6, ref T7 t7); Parameters Type Name Description T0 t0 T1 t1 T2 t2 T3 t3 T4 t4 T5 t5 T6 t6 T7 t7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7"
  }
}