id: cs.temp.dll
language: CSharp
name:
  Default: cs.temp.dll
qualifiedName:
  Default: cs.temp.dll
type: Assembly
modifiers: {}
items:
- id: Unity.MLAgents
  commentId: N:Unity.MLAgents
  language: CSharp
  name:
    CSharp: Unity.MLAgents
    VB: Unity.MLAgents
  nameWithType:
    CSharp: Unity.MLAgents
    VB: Unity.MLAgents
  qualifiedName:
    CSharp: Unity.MLAgents
    VB: Unity.MLAgents
  type: Namespace
  assemblies:
  - cs.temp.dll
  modifiers: {}
  items:
  - id: Unity.MLAgents.EnvironmentConfiguration
    commentId: T:Unity.MLAgents.EnvironmentConfiguration
    language: CSharp
    name:
      CSharp: EnvironmentConfiguration
      VB: EnvironmentConfiguration
    nameWithType:
      CSharp: EnvironmentConfiguration
      VB: EnvironmentConfiguration
    qualifiedName:
      CSharp: Unity.MLAgents.EnvironmentConfiguration
      VB: Unity.MLAgents.EnvironmentConfiguration
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Unity.MLAgents
    source:
      id: EnvironmentConfiguration
      path: ''
      startLine: 23
    summary: "\nWraps the environment-level parameters that are provided within the\nEditor. These parameters can be provided for training and inference\nmodes separately and represent screen resolution, rendering quality and\nframe rate.\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [Serializable]

          public class EnvironmentConfiguration
        VB: >-
          <Serializable>

          Public Class EnvironmentConfiguration
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ToString
    - System.Object.ReferenceEquals(System.Object,System.Object)
    attributes:
    - type: System.SerializableAttribute
      ctor: System.SerializableAttribute.#ctor
      arguments: []
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Unity.MLAgents.EnvironmentConfiguration.width
      commentId: F:Unity.MLAgents.EnvironmentConfiguration.width
      language: CSharp
      name:
        CSharp: width
        VB: width
      nameWithType:
        CSharp: EnvironmentConfiguration.width
        VB: EnvironmentConfiguration.width
      qualifiedName:
        CSharp: Unity.MLAgents.EnvironmentConfiguration.width
        VB: Unity.MLAgents.EnvironmentConfiguration.width
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: width
        path: ''
        startLine: 27
      syntax:
        content:
          CSharp: public int width
          VB: Public width As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.EnvironmentConfiguration.height
      commentId: F:Unity.MLAgents.EnvironmentConfiguration.height
      language: CSharp
      name:
        CSharp: height
        VB: height
      nameWithType:
        CSharp: EnvironmentConfiguration.height
        VB: EnvironmentConfiguration.height
      qualifiedName:
        CSharp: Unity.MLAgents.EnvironmentConfiguration.height
        VB: Unity.MLAgents.EnvironmentConfiguration.height
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: height
        path: ''
        startLine: 30
      syntax:
        content:
          CSharp: public int height
          VB: Public height As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.EnvironmentConfiguration.qualityLevel
      commentId: F:Unity.MLAgents.EnvironmentConfiguration.qualityLevel
      language: CSharp
      name:
        CSharp: qualityLevel
        VB: qualityLevel
      nameWithType:
        CSharp: EnvironmentConfiguration.qualityLevel
        VB: EnvironmentConfiguration.qualityLevel
      qualifiedName:
        CSharp: Unity.MLAgents.EnvironmentConfiguration.qualityLevel
        VB: Unity.MLAgents.EnvironmentConfiguration.qualityLevel
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: qualityLevel
        path: ''
        startLine: 34
      syntax:
        content:
          CSharp: public int qualityLevel
          VB: Public qualityLevel As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.EnvironmentConfiguration.timeScale
      commentId: F:Unity.MLAgents.EnvironmentConfiguration.timeScale
      language: CSharp
      name:
        CSharp: timeScale
        VB: timeScale
      nameWithType:
        CSharp: EnvironmentConfiguration.timeScale
        VB: EnvironmentConfiguration.timeScale
      qualifiedName:
        CSharp: Unity.MLAgents.EnvironmentConfiguration.timeScale
        VB: Unity.MLAgents.EnvironmentConfiguration.timeScale
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: timeScale
        path: ''
        startLine: 38
      syntax:
        content:
          CSharp: public float timeScale
          VB: Public timeScale As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.EnvironmentConfiguration.targetFrameRate
      commentId: F:Unity.MLAgents.EnvironmentConfiguration.targetFrameRate
      language: CSharp
      name:
        CSharp: targetFrameRate
        VB: targetFrameRate
      nameWithType:
        CSharp: EnvironmentConfiguration.targetFrameRate
        VB: EnvironmentConfiguration.targetFrameRate
      qualifiedName:
        CSharp: Unity.MLAgents.EnvironmentConfiguration.targetFrameRate
        VB: Unity.MLAgents.EnvironmentConfiguration.targetFrameRate
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: targetFrameRate
        path: ''
        startLine: 41
      syntax:
        content:
          CSharp: public int targetFrameRate
          VB: Public targetFrameRate As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.EnvironmentConfiguration.#ctor(System.Int32,System.Int32,System.Int32,System.Single,System.Int32)
      commentId: M:Unity.MLAgents.EnvironmentConfiguration.#ctor(System.Int32,System.Int32,System.Int32,System.Single,System.Int32)
      language: CSharp
      name:
        CSharp: EnvironmentConfiguration(Int32, Int32, Int32, Single, Int32)
        VB: EnvironmentConfiguration(Int32, Int32, Int32, Single, Int32)
      nameWithType:
        CSharp: EnvironmentConfiguration.EnvironmentConfiguration(Int32, Int32, Int32, Single, Int32)
        VB: EnvironmentConfiguration.EnvironmentConfiguration(Int32, Int32, Int32, Single, Int32)
      qualifiedName:
        CSharp: Unity.MLAgents.EnvironmentConfiguration.EnvironmentConfiguration(System.Int32, System.Int32, System.Int32, System.Single, System.Int32)
        VB: Unity.MLAgents.EnvironmentConfiguration.EnvironmentConfiguration(System.Int32, System.Int32, System.Int32, System.Single, System.Int32)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: .ctor
        path: ''
        startLine: 57
      example: []
      syntax:
        content:
          CSharp: public EnvironmentConfiguration(int width, int height, int qualityLevel, float timeScale, int targetFrameRate)
          VB: Public Sub New(width As Integer, height As Integer, qualityLevel As Integer, timeScale As Single, targetFrameRate As Integer)
        parameters:
        - id: width
          type: System.Int32
          description: Width of environment window (pixels).
        - id: height
          type: System.Int32
          description: Height of environment window (pixels).
        - id: qualityLevel
          type: System.Int32
          description: "\nRendering quality of environment. Ranges from 0 to 5, with higher.\n"
        - id: timeScale
          type: System.Single
          description: "\nSpeed at which environment is run. Ranges from 1 to 100, with higher\nvalues representing faster speed.\n"
        - id: targetFrameRate
          type: System.Int32
          description: "\nTarget frame rate (per second) that the engine tries to maintain.\n"
      overload: Unity.MLAgents.EnvironmentConfiguration.#ctor*
      see:
      - linkId: Unity.MLAgents.EnvironmentConfiguration
        commentId: T:Unity.MLAgents.EnvironmentConfiguration
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        Unity.MLAgents.EnvironmentConfiguration: 
  - id: Unity.MLAgents.Academy
    commentId: T:Unity.MLAgents.Academy
    language: CSharp
    name:
      CSharp: Academy
      VB: Academy
    nameWithType:
      CSharp: Academy
      VB: Academy
    qualifiedName:
      CSharp: Unity.MLAgents.Academy
      VB: Unity.MLAgents.Academy
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Unity.MLAgents
    source:
      id: Academy
      path: ''
      startLine: 86
    summary: "\nAn Academy is where Agent objects go to train their behaviors. More \nspecifically, an academy is a collection of Brain objects and each agent\nin a scene is attached to one brain (a single brain may be attached to \nmultiple agents). Currently, this class is expected to be extended to\nimplement the desired academy behavior.\n"
    remarks: "\nWhen an academy is run, it can either be in inference or training mode.\nThe mode is determined by the presence or absence of a Communicator. In\nthe presence of a communicator, the academy is run in training mode where\nthe states and observations of each agent are sent through the\ncommunicator. In the absence of a communciator, the academy is run in\ninference mode where the agent behavior is determined by the brain\nattached to it (which may be internal, heuristic or player).\n"
    example: []
    syntax:
      content:
        CSharp: 'public abstract class Academy : MonoBehaviour'
        VB: >-
          Public MustInherit Class Academy

              Inherits MonoBehaviour
    inheritance:
    - MonoBehaviour
    modifiers:
      CSharp:
      - public
      - abstract
      - class
      VB:
      - Public
      - MustInherit
      - Class
    items:
    - id: Unity.MLAgents.Academy.resetParameters
      commentId: F:Unity.MLAgents.Academy.resetParameters
      language: CSharp
      name:
        CSharp: resetParameters
        VB: resetParameters
      nameWithType:
        CSharp: Academy.resetParameters
        VB: Academy.resetParameters
      qualifiedName:
        CSharp: Unity.MLAgents.Academy.resetParameters
        VB: Unity.MLAgents.Academy.resetParameters
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: resetParameters
        path: ''
        startLine: 124
      syntax:
        content:
          CSharp: public ResetParameters resetParameters
          VB: Public resetParameters As ResetParameters
        return:
          type: Unity.MLAgents.ResetParameters
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.Academy.BrainDecideAction
      commentId: E:Unity.MLAgents.Academy.BrainDecideAction
      language: CSharp
      name:
        CSharp: BrainDecideAction
        VB: BrainDecideAction
      nameWithType:
        CSharp: Academy.BrainDecideAction
        VB: Academy.BrainDecideAction
      qualifiedName:
        CSharp: Unity.MLAgents.Academy.BrainDecideAction
        VB: Unity.MLAgents.Academy.BrainDecideAction
      type: Event
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: BrainDecideAction
        path: ''
        startLine: 176
      syntax:
        content:
          CSharp: public event Action BrainDecideAction
          VB: Public Event BrainDecideAction As Action
        return:
          type: System.Action
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.Academy.AgentSetStatus
      commentId: E:Unity.MLAgents.Academy.AgentSetStatus
      language: CSharp
      name:
        CSharp: AgentSetStatus
        VB: AgentSetStatus
      nameWithType:
        CSharp: Academy.AgentSetStatus
        VB: Academy.AgentSetStatus
      qualifiedName:
        CSharp: Unity.MLAgents.Academy.AgentSetStatus
        VB: Unity.MLAgents.Academy.AgentSetStatus
      type: Event
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: AgentSetStatus
        path: ''
        startLine: 182
      syntax:
        content:
          CSharp: public event Action<bool, bool, int> AgentSetStatus
          VB: Public Event AgentSetStatus As Action(Of Boolean, Boolean, Integer)
        return:
          type: System.Action{System.Boolean,System.Boolean,System.Int32}
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.Academy.AgentResetIfDone
      commentId: E:Unity.MLAgents.Academy.AgentResetIfDone
      language: CSharp
      name:
        CSharp: AgentResetIfDone
        VB: AgentResetIfDone
      nameWithType:
        CSharp: Academy.AgentResetIfDone
        VB: Academy.AgentResetIfDone
      qualifiedName:
        CSharp: Unity.MLAgents.Academy.AgentResetIfDone
        VB: Unity.MLAgents.Academy.AgentResetIfDone
      type: Event
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: AgentResetIfDone
        path: ''
        startLine: 187
      syntax:
        content:
          CSharp: public event Action AgentResetIfDone
          VB: Public Event AgentResetIfDone As Action
        return:
          type: System.Action
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.Academy.AgentSendState
      commentId: E:Unity.MLAgents.Academy.AgentSendState
      language: CSharp
      name:
        CSharp: AgentSendState
        VB: AgentSendState
      nameWithType:
        CSharp: Academy.AgentSendState
        VB: Academy.AgentSendState
      qualifiedName:
        CSharp: Unity.MLAgents.Academy.AgentSendState
        VB: Unity.MLAgents.Academy.AgentSendState
      type: Event
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: AgentSendState
        path: ''
        startLine: 191
      syntax:
        content:
          CSharp: public event Action AgentSendState
          VB: Public Event AgentSendState As Action
        return:
          type: System.Action
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.Academy.AgentAct
      commentId: E:Unity.MLAgents.Academy.AgentAct
      language: CSharp
      name:
        CSharp: AgentAct
        VB: AgentAct
      nameWithType:
        CSharp: Academy.AgentAct
        VB: Academy.AgentAct
      qualifiedName:
        CSharp: Unity.MLAgents.Academy.AgentAct
        VB: Unity.MLAgents.Academy.AgentAct
      type: Event
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: AgentAct
        path: ''
        startLine: 195
      syntax:
        content:
          CSharp: public event Action AgentAct
          VB: Public Event AgentAct As Action
        return:
          type: System.Action
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.Academy.AgentForceReset
      commentId: E:Unity.MLAgents.Academy.AgentForceReset
      language: CSharp
      name:
        CSharp: AgentForceReset
        VB: AgentForceReset
      nameWithType:
        CSharp: Academy.AgentForceReset
        VB: Academy.AgentForceReset
      qualifiedName:
        CSharp: Unity.MLAgents.Academy.AgentForceReset
        VB: Unity.MLAgents.Academy.AgentForceReset
      type: Event
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: AgentForceReset
        path: ''
        startLine: 198
      syntax:
        content:
          CSharp: public event Action AgentForceReset
          VB: Public Event AgentForceReset As Action
        return:
          type: System.Action
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.Academy.InitializeAcademy
      commentId: M:Unity.MLAgents.Academy.InitializeAcademy
      language: CSharp
      name:
        CSharp: InitializeAcademy()
        VB: InitializeAcademy()
      nameWithType:
        CSharp: Academy.InitializeAcademy()
        VB: Academy.InitializeAcademy()
      qualifiedName:
        CSharp: Unity.MLAgents.Academy.InitializeAcademy()
        VB: Unity.MLAgents.Academy.InitializeAcademy()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: InitializeAcademy
        path: ''
        startLine: 295
      summary: "\nInitializes the academy and environment. Called during the waking-up\nphase of the environment before any of the scene objects/agents have\nbeen initialized.\n"
      example: []
      syntax:
        content:
          CSharp: public virtual void InitializeAcademy()
          VB: Public Overridable Sub InitializeAcademy
      overload: Unity.MLAgents.Academy.InitializeAcademy*
      modifiers:
        CSharp:
        - public
        - virtual
        VB:
        - Public
        - Overridable
    - id: Unity.MLAgents.Academy.AcademyStep
      commentId: M:Unity.MLAgents.Academy.AcademyStep
      language: CSharp
      name:
        CSharp: AcademyStep()
        VB: AcademyStep()
      nameWithType:
        CSharp: Academy.AcademyStep()
        VB: Academy.AcademyStep()
      qualifiedName:
        CSharp: Unity.MLAgents.Academy.AcademyStep()
        VB: Unity.MLAgents.Academy.AcademyStep()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: AcademyStep
        path: ''
        startLine: 303
      summary: "\nSpecifies the academy behavior at every step of the environment.\n"
      example: []
      syntax:
        content:
          CSharp: public virtual void AcademyStep()
          VB: Public Overridable Sub AcademyStep
      overload: Unity.MLAgents.Academy.AcademyStep*
      modifiers:
        CSharp:
        - public
        - virtual
        VB:
        - Public
        - Overridable
    - id: Unity.MLAgents.Academy.AcademyReset
      commentId: M:Unity.MLAgents.Academy.AcademyReset
      language: CSharp
      name:
        CSharp: AcademyReset()
        VB: AcademyReset()
      nameWithType:
        CSharp: Academy.AcademyReset()
        VB: Academy.AcademyReset()
      qualifiedName:
        CSharp: Unity.MLAgents.Academy.AcademyReset()
        VB: Unity.MLAgents.Academy.AcademyReset()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: AcademyReset
        path: ''
        startLine: 312
      summary: "\nSpecifies the academy behavior when being reset (i.e. at the completion\nof a global episode).\n"
      example: []
      syntax:
        content:
          CSharp: public virtual void AcademyReset()
          VB: Public Overridable Sub AcademyReset
      overload: Unity.MLAgents.Academy.AcademyReset*
      modifiers:
        CSharp:
        - public
        - virtual
        VB:
        - Public
        - Overridable
    - id: Unity.MLAgents.Academy.GetIsInference
      commentId: M:Unity.MLAgents.Academy.GetIsInference
      language: CSharp
      name:
        CSharp: GetIsInference()
        VB: GetIsInference()
      nameWithType:
        CSharp: Academy.GetIsInference()
        VB: Academy.GetIsInference()
      qualifiedName:
        CSharp: Unity.MLAgents.Academy.GetIsInference()
        VB: Unity.MLAgents.Academy.GetIsInference()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: GetIsInference
        path: ''
        startLine: 323
      summary: "\nReturns the <xref href=\"Unity.MLAgents.Academy.isInference\" data-throw-if-not-resolved=\"false\"></xref> flag.\n"
      example: []
      syntax:
        content:
          CSharp: public bool GetIsInference()
          VB: Public Function GetIsInference As Boolean
        return:
          type: System.Boolean
          description: "\n<code>true</code>, if current mode is inference, <code>false</code> if training.\n"
      overload: Unity.MLAgents.Academy.GetIsInference*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        Unity.MLAgents.Academy.isInference: 
    - id: Unity.MLAgents.Academy.SetIsInference(System.Boolean)
      commentId: M:Unity.MLAgents.Academy.SetIsInference(System.Boolean)
      language: CSharp
      name:
        CSharp: SetIsInference(Boolean)
        VB: SetIsInference(Boolean)
      nameWithType:
        CSharp: Academy.SetIsInference(Boolean)
        VB: Academy.SetIsInference(Boolean)
      qualifiedName:
        CSharp: Unity.MLAgents.Academy.SetIsInference(System.Boolean)
        VB: Unity.MLAgents.Academy.SetIsInference(System.Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: SetIsInference
        path: ''
        startLine: 336
      summary: "\nSets the <xref href=\"Unity.MLAgents.Academy.isInference\" data-throw-if-not-resolved=\"false\"></xref> flag to the provided value. If\nthe new flag differs from the current flag value, this signals that\nthe environment configuration needs to be updated.\n"
      example: []
      syntax:
        content:
          CSharp: public void SetIsInference(bool isInference)
          VB: Public Sub SetIsInference(isInference As Boolean)
        parameters:
        - id: isInference
          type: System.Boolean
          description: "\nEnvironment mode, if true then inference, otherwise training.\n"
      overload: Unity.MLAgents.Academy.SetIsInference*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        Unity.MLAgents.Academy.isInference: 
    - id: Unity.MLAgents.Academy.GetEpisodeCount
      commentId: M:Unity.MLAgents.Academy.GetEpisodeCount
      language: CSharp
      name:
        CSharp: GetEpisodeCount()
        VB: GetEpisodeCount()
      nameWithType:
        CSharp: Academy.GetEpisodeCount()
        VB: Academy.GetEpisodeCount()
      qualifiedName:
        CSharp: Unity.MLAgents.Academy.GetEpisodeCount()
        VB: Unity.MLAgents.Academy.GetEpisodeCount()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: GetEpisodeCount
        path: ''
        startLine: 355
      summary: "\nReturns the current episode counter.\n"
      example: []
      syntax:
        content:
          CSharp: public int GetEpisodeCount()
          VB: Public Function GetEpisodeCount As Integer
        return:
          type: System.Int32
          description: "\nCurrent episode number.\n"
      overload: Unity.MLAgents.Academy.GetEpisodeCount*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.Academy.GetStepCount
      commentId: M:Unity.MLAgents.Academy.GetStepCount
      language: CSharp
      name:
        CSharp: GetStepCount()
        VB: GetStepCount()
      nameWithType:
        CSharp: Academy.GetStepCount()
        VB: Academy.GetStepCount()
      qualifiedName:
        CSharp: Unity.MLAgents.Academy.GetStepCount()
        VB: Unity.MLAgents.Academy.GetStepCount()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: GetStepCount
        path: ''
        startLine: 366
      summary: "\nReturns the current step counter (within the current epside).\n"
      example: []
      syntax:
        content:
          CSharp: public int GetStepCount()
          VB: Public Function GetStepCount As Integer
        return:
          type: System.Int32
          description: "\nCurrent episode number.\n"
      overload: Unity.MLAgents.Academy.GetStepCount*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.Academy.Done
      commentId: M:Unity.MLAgents.Academy.Done
      language: CSharp
      name:
        CSharp: Done()
        VB: Done()
      nameWithType:
        CSharp: Academy.Done()
        VB: Academy.Done()
      qualifiedName:
        CSharp: Unity.MLAgents.Academy.Done()
        VB: Unity.MLAgents.Academy.Done()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: Done
        path: ''
        startLine: 374
      summary: "\nSets the done flag to true.\n"
      example: []
      syntax:
        content:
          CSharp: public void Done()
          VB: Public Sub Done
      overload: Unity.MLAgents.Academy.Done*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.Academy.IsDone
      commentId: M:Unity.MLAgents.Academy.IsDone
      language: CSharp
      name:
        CSharp: IsDone()
        VB: IsDone()
      nameWithType:
        CSharp: Academy.IsDone()
        VB: Academy.IsDone()
      qualifiedName:
        CSharp: Unity.MLAgents.Academy.IsDone()
        VB: Unity.MLAgents.Academy.IsDone()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: IsDone
        path: ''
        startLine: 385
      summary: "\nReturns whether or not the academy is done.\n"
      example: []
      syntax:
        content:
          CSharp: public bool IsDone()
          VB: Public Function IsDone As Boolean
        return:
          type: System.Boolean
          description: "\n<code>true</code>, if academy is done, <code>false</code> otherwise.\n"
      overload: Unity.MLAgents.Academy.IsDone*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.Academy.IsCommunicatorOn
      commentId: M:Unity.MLAgents.Academy.IsCommunicatorOn
      language: CSharp
      name:
        CSharp: IsCommunicatorOn()
        VB: IsCommunicatorOn()
      nameWithType:
        CSharp: Academy.IsCommunicatorOn()
        VB: Academy.IsCommunicatorOn()
      qualifiedName:
        CSharp: Unity.MLAgents.Academy.IsCommunicatorOn()
        VB: Unity.MLAgents.Academy.IsCommunicatorOn()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: IsCommunicatorOn
        path: ''
        startLine: 396
      summary: "\nReturns whether or not the communicator is on.\n"
      example: []
      syntax:
        content:
          CSharp: public bool IsCommunicatorOn()
          VB: Public Function IsCommunicatorOn As Boolean
        return:
          type: System.Boolean
          description: "\n<code>true</code>, if communicator is on, <code>false</code> otherwise.\n"
      overload: Unity.MLAgents.Academy.IsCommunicatorOn*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.Academy.GetCommunicator
      commentId: M:Unity.MLAgents.Academy.GetCommunicator
      language: CSharp
      name:
        CSharp: GetCommunicator()
        VB: GetCommunicator()
      nameWithType:
        CSharp: Academy.GetCommunicator()
        VB: Academy.GetCommunicator()
      qualifiedName:
        CSharp: Unity.MLAgents.Academy.GetCommunicator()
        VB: Unity.MLAgents.Academy.GetCommunicator()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: GetCommunicator
        path: ''
        startLine: 405
      summary: "\nReturns the Communicator currently used by the Academy.\n"
      example: []
      syntax:
        content:
          CSharp: public Communicator GetCommunicator()
          VB: Public Function GetCommunicator As Communicator
        return:
          type: Unity.MLAgents.Communicator
          description: The commincator currently in use (may be null).
      overload: Unity.MLAgents.Academy.GetCommunicator*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Unity.MLAgents.AgentInfo
    commentId: T:Unity.MLAgents.AgentInfo
    language: CSharp
    name:
      CSharp: AgentInfo
      VB: AgentInfo
    nameWithType:
      CSharp: AgentInfo
      VB: AgentInfo
    qualifiedName:
      CSharp: Unity.MLAgents.AgentInfo
      VB: Unity.MLAgents.AgentInfo
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: Unity.MLAgents
    source:
      id: AgentInfo
      path: ''
      startLine: 545
    summary: "\nStruct that contains all the information for an Agent, including its \nobservations, actions and current status, that is sent to the Brain.\n"
    example: []
    syntax:
      content:
        CSharp: public struct AgentInfo
        VB: Public Structure AgentInfo
    inheritedMembers:
    - System.ValueType.Equals(System.Object)
    - System.ValueType.GetHashCode
    - System.ValueType.ToString
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetType
    - System.Object.ReferenceEquals(System.Object,System.Object)
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: Unity.MLAgents.AgentInfo.vectorObservation
      commentId: F:Unity.MLAgents.AgentInfo.vectorObservation
      language: CSharp
      name:
        CSharp: vectorObservation
        VB: vectorObservation
      nameWithType:
        CSharp: AgentInfo.vectorObservation
        VB: AgentInfo.vectorObservation
      qualifiedName:
        CSharp: Unity.MLAgents.AgentInfo.vectorObservation
        VB: Unity.MLAgents.AgentInfo.vectorObservation
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: vectorObservation
        path: ''
        startLine: 550
      summary: "\nMost recent agent vector (i.e. numeric) observation.\n"
      example: []
      syntax:
        content:
          CSharp: public List<float> vectorObservation
          VB: Public vectorObservation As List(Of Single)
        return:
          type: System.Collections.Generic.List{System.Single}
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.AgentInfo.stackedVectorObservation
      commentId: F:Unity.MLAgents.AgentInfo.stackedVectorObservation
      language: CSharp
      name:
        CSharp: stackedVectorObservation
        VB: stackedVectorObservation
      nameWithType:
        CSharp: AgentInfo.stackedVectorObservation
        VB: AgentInfo.stackedVectorObservation
      qualifiedName:
        CSharp: Unity.MLAgents.AgentInfo.stackedVectorObservation
        VB: Unity.MLAgents.AgentInfo.stackedVectorObservation
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: stackedVectorObservation
        path: ''
        startLine: 557
      summary: "\nThe previous agent vector observations, stacked. The length of the\nhistory (i.e. number of vector observations to stack) is specified\nin the Brain parameters.\n"
      example: []
      syntax:
        content:
          CSharp: public List<float> stackedVectorObservation
          VB: Public stackedVectorObservation As List(Of Single)
        return:
          type: System.Collections.Generic.List{System.Single}
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.AgentInfo.visualObservations
      commentId: F:Unity.MLAgents.AgentInfo.visualObservations
      language: CSharp
      name:
        CSharp: visualObservations
        VB: visualObservations
      nameWithType:
        CSharp: AgentInfo.visualObservations
        VB: AgentInfo.visualObservations
      qualifiedName:
        CSharp: Unity.MLAgents.AgentInfo.visualObservations
        VB: Unity.MLAgents.AgentInfo.visualObservations
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: visualObservations
        path: ''
        startLine: 562
      summary: "\nMost recent agent camera (i.e. texture) observation.\n"
      example: []
      syntax:
        content:
          CSharp: public List<Texture2D> visualObservations
          VB: Public visualObservations As List(Of Texture2D)
        return:
          type: System.Collections.Generic.List{Texture2D}
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.AgentInfo.textObservation
      commentId: F:Unity.MLAgents.AgentInfo.textObservation
      language: CSharp
      name:
        CSharp: textObservation
        VB: textObservation
      nameWithType:
        CSharp: AgentInfo.textObservation
        VB: AgentInfo.textObservation
      qualifiedName:
        CSharp: Unity.MLAgents.AgentInfo.textObservation
        VB: Unity.MLAgents.AgentInfo.textObservation
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: textObservation
        path: ''
        startLine: 567
      summary: "\nMost recent text observation.\n"
      example: []
      syntax:
        content:
          CSharp: public string textObservation
          VB: Public textObservation As String
        return:
          type: System.String
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.AgentInfo.storedVectorActions
      commentId: F:Unity.MLAgents.AgentInfo.storedVectorActions
      language: CSharp
      name:
        CSharp: storedVectorActions
        VB: storedVectorActions
      nameWithType:
        CSharp: AgentInfo.storedVectorActions
        VB: AgentInfo.storedVectorActions
      qualifiedName:
        CSharp: Unity.MLAgents.AgentInfo.storedVectorActions
        VB: Unity.MLAgents.AgentInfo.storedVectorActions
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: storedVectorActions
        path: ''
        startLine: 572
      summary: "\nKeeps track of the last vector action taken by the Brain.\n"
      example: []
      syntax:
        content:
          CSharp: public float[] storedVectorActions
          VB: Public storedVectorActions As Single()
        return:
          type: System.Single[]
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.AgentInfo.storedTextActions
      commentId: F:Unity.MLAgents.AgentInfo.storedTextActions
      language: CSharp
      name:
        CSharp: storedTextActions
        VB: storedTextActions
      nameWithType:
        CSharp: AgentInfo.storedTextActions
        VB: AgentInfo.storedTextActions
      qualifiedName:
        CSharp: Unity.MLAgents.AgentInfo.storedTextActions
        VB: Unity.MLAgents.AgentInfo.storedTextActions
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: storedTextActions
        path: ''
        startLine: 577
      summary: "\nKeeps track of the last text action taken by the Brain.\n"
      example: []
      syntax:
        content:
          CSharp: public string storedTextActions
          VB: Public storedTextActions As String
        return:
          type: System.String
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.AgentInfo.memories
      commentId: F:Unity.MLAgents.AgentInfo.memories
      language: CSharp
      name:
        CSharp: memories
        VB: memories
      nameWithType:
        CSharp: AgentInfo.memories
        VB: AgentInfo.memories
      qualifiedName:
        CSharp: Unity.MLAgents.AgentInfo.memories
        VB: Unity.MLAgents.AgentInfo.memories
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: memories
        path: ''
        startLine: 585
      summary: "\nUsed by the Trainer to store information about the agent. This data\nstructure is not consumed or modified by the agent directly, they are\njust the owners of their trainier&apos;s memory. Currently, however, the\nsize of the memory is in the Brain properties.\n"
      example: []
      syntax:
        content:
          CSharp: public List<float> memories
          VB: Public memories As List(Of Single)
        return:
          type: System.Collections.Generic.List{System.Single}
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.AgentInfo.reward
      commentId: F:Unity.MLAgents.AgentInfo.reward
      language: CSharp
      name:
        CSharp: reward
        VB: reward
      nameWithType:
        CSharp: AgentInfo.reward
        VB: AgentInfo.reward
      qualifiedName:
        CSharp: Unity.MLAgents.AgentInfo.reward
        VB: Unity.MLAgents.AgentInfo.reward
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: reward
        path: ''
        startLine: 590
      summary: "\nCurrent agent reward.\n"
      example: []
      syntax:
        content:
          CSharp: public float reward
          VB: Public reward As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.AgentInfo.done
      commentId: F:Unity.MLAgents.AgentInfo.done
      language: CSharp
      name:
        CSharp: done
        VB: done
      nameWithType:
        CSharp: AgentInfo.done
        VB: AgentInfo.done
      qualifiedName:
        CSharp: Unity.MLAgents.AgentInfo.done
        VB: Unity.MLAgents.AgentInfo.done
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: done
        path: ''
        startLine: 595
      summary: "\nWhether the agent is done or not.\n"
      example: []
      syntax:
        content:
          CSharp: public bool done
          VB: Public done As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.AgentInfo.maxStepReached
      commentId: F:Unity.MLAgents.AgentInfo.maxStepReached
      language: CSharp
      name:
        CSharp: maxStepReached
        VB: maxStepReached
      nameWithType:
        CSharp: AgentInfo.maxStepReached
        VB: AgentInfo.maxStepReached
      qualifiedName:
        CSharp: Unity.MLAgents.AgentInfo.maxStepReached
        VB: Unity.MLAgents.AgentInfo.maxStepReached
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: maxStepReached
        path: ''
        startLine: 600
      summary: "\nWhether the agent has reached its max step count for this episode.\n"
      example: []
      syntax:
        content:
          CSharp: public bool maxStepReached
          VB: Public maxStepReached As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.AgentInfo.id
      commentId: F:Unity.MLAgents.AgentInfo.id
      language: CSharp
      name:
        CSharp: id
        VB: id
      nameWithType:
        CSharp: AgentInfo.id
        VB: AgentInfo.id
      qualifiedName:
        CSharp: Unity.MLAgents.AgentInfo.id
        VB: Unity.MLAgents.AgentInfo.id
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: id
        path: ''
        startLine: 606
      summary: "\nUnique identifier each agent receives at initialization. It is used\nto separate between different agents in the environment.\n"
      example: []
      syntax:
        content:
          CSharp: public int id
          VB: Public id As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Unity.MLAgents.AgentAction
    commentId: T:Unity.MLAgents.AgentAction
    language: CSharp
    name:
      CSharp: AgentAction
      VB: AgentAction
    nameWithType:
      CSharp: AgentAction
      VB: AgentAction
    qualifiedName:
      CSharp: Unity.MLAgents.AgentAction
      VB: Unity.MLAgents.AgentAction
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: Unity.MLAgents
    source:
      id: AgentAction
      path: ''
      startLine: 613
    summary: "\nStruct that contains the action information sent from the Brain to the \nAgent.\n"
    example: []
    syntax:
      content:
        CSharp: public struct AgentAction
        VB: Public Structure AgentAction
    inheritedMembers:
    - System.ValueType.Equals(System.Object)
    - System.ValueType.GetHashCode
    - System.ValueType.ToString
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetType
    - System.Object.ReferenceEquals(System.Object,System.Object)
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: Unity.MLAgents.AgentAction.vectorActions
      commentId: F:Unity.MLAgents.AgentAction.vectorActions
      language: CSharp
      name:
        CSharp: vectorActions
        VB: vectorActions
      nameWithType:
        CSharp: AgentAction.vectorActions
        VB: AgentAction.vectorActions
      qualifiedName:
        CSharp: Unity.MLAgents.AgentAction.vectorActions
        VB: Unity.MLAgents.AgentAction.vectorActions
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: vectorActions
        path: ''
        startLine: 615
      syntax:
        content:
          CSharp: public float[] vectorActions
          VB: Public vectorActions As Single()
        return:
          type: System.Single[]
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.AgentAction.textActions
      commentId: F:Unity.MLAgents.AgentAction.textActions
      language: CSharp
      name:
        CSharp: textActions
        VB: textActions
      nameWithType:
        CSharp: AgentAction.textActions
        VB: AgentAction.textActions
      qualifiedName:
        CSharp: Unity.MLAgents.AgentAction.textActions
        VB: Unity.MLAgents.AgentAction.textActions
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: textActions
        path: ''
        startLine: 616
      syntax:
        content:
          CSharp: public string textActions
          VB: Public textActions As String
        return:
          type: System.String
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.AgentAction.memories
      commentId: F:Unity.MLAgents.AgentAction.memories
      language: CSharp
      name:
        CSharp: memories
        VB: memories
      nameWithType:
        CSharp: AgentAction.memories
        VB: AgentAction.memories
      qualifiedName:
        CSharp: Unity.MLAgents.AgentAction.memories
        VB: Unity.MLAgents.AgentAction.memories
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: memories
        path: ''
        startLine: 617
      syntax:
        content:
          CSharp: public List<float> memories
          VB: Public memories As List(Of Single)
        return:
          type: System.Collections.Generic.List{System.Single}
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Unity.MLAgents.AgentParameters
    commentId: T:Unity.MLAgents.AgentParameters
    language: CSharp
    name:
      CSharp: AgentParameters
      VB: AgentParameters
    nameWithType:
      CSharp: AgentParameters
      VB: AgentParameters
    qualifiedName:
      CSharp: Unity.MLAgents.AgentParameters
      VB: Unity.MLAgents.AgentParameters
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Unity.MLAgents
    source:
      id: AgentParameters
      path: ''
      startLine: 625
    summary: "\nStruct that contains all the Agent-specific parameters provided in the \nEditor. This excludes the Brain linked to the Agent since it can be\nmodified programmatically.\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [Serializable]

          public class AgentParameters
        VB: >-
          <Serializable>

          Public Class AgentParameters
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ToString
    - System.Object.ReferenceEquals(System.Object,System.Object)
    attributes:
    - type: System.SerializableAttribute
      ctor: System.SerializableAttribute.#ctor
      arguments: []
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Unity.MLAgents.AgentParameters.agentCameras
      commentId: F:Unity.MLAgents.AgentParameters.agentCameras
      language: CSharp
      name:
        CSharp: agentCameras
        VB: agentCameras
      nameWithType:
        CSharp: AgentParameters.agentCameras
        VB: AgentParameters.agentCameras
      qualifiedName:
        CSharp: Unity.MLAgents.AgentParameters.agentCameras
        VB: Unity.MLAgents.AgentParameters.agentCameras
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: agentCameras
        path: ''
        startLine: 632
      summary: "\nThe list of the Camera GameObjects the agent uses for visual\nobservations.\n"
      example: []
      syntax:
        content:
          CSharp: public List<Camera> agentCameras
          VB: Public agentCameras As List(Of Camera)
        return:
          type: System.Collections.Generic.List{Camera}
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.AgentParameters.maxStep
      commentId: F:Unity.MLAgents.AgentParameters.maxStep
      language: CSharp
      name:
        CSharp: maxStep
        VB: maxStep
      nameWithType:
        CSharp: AgentParameters.maxStep
        VB: AgentParameters.maxStep
      qualifiedName:
        CSharp: Unity.MLAgents.AgentParameters.maxStep
        VB: Unity.MLAgents.AgentParameters.maxStep
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: maxStep
        path: ''
        startLine: 644
      summary: "\nThe maximum number of steps the agent takes before being done. \n"
      remarks: "\nIf set to 0, the agent can only be set to done programmatically (or\nwhen the Academy is done).\nIf set to any positive integer, the agent will be set to done after\nthat many steps. Note that setting the max step to a value greater\nthan the academy max step value renders it useless.\n"
      example: []
      syntax:
        content:
          CSharp: public int maxStep
          VB: Public maxStep As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.AgentParameters.resetOnDone
      commentId: F:Unity.MLAgents.AgentParameters.resetOnDone
      language: CSharp
      name:
        CSharp: resetOnDone
        VB: resetOnDone
      nameWithType:
        CSharp: AgentParameters.resetOnDone
        VB: AgentParameters.resetOnDone
      qualifiedName:
        CSharp: Unity.MLAgents.AgentParameters.resetOnDone
        VB: Unity.MLAgents.AgentParameters.resetOnDone
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: resetOnDone
        path: ''
        startLine: 654
      summary: "\nDetermines the behaviour of the agent when done.\n"
      remarks: "\nIf true, the agent will reset when done and start a new episode.\nOtherwise, the agent will remain done and its behavior will be\ndictated by the AgentOnDone method.\n"
      example: []
      syntax:
        content:
          CSharp: public bool resetOnDone
          VB: Public resetOnDone As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.AgentParameters.onDemandDecision
      commentId: F:Unity.MLAgents.AgentParameters.onDemandDecision
      language: CSharp
      name:
        CSharp: onDemandDecision
        VB: onDemandDecision
      nameWithType:
        CSharp: AgentParameters.onDemandDecision
        VB: AgentParameters.onDemandDecision
      qualifiedName:
        CSharp: Unity.MLAgents.AgentParameters.onDemandDecision
        VB: Unity.MLAgents.AgentParameters.onDemandDecision
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: onDemandDecision
        path: ''
        startLine: 660
      summary: "\nWhether to enable On Demand Decisions or make a decision at \nevery step.\n"
      example: []
      syntax:
        content:
          CSharp: public bool onDemandDecision
          VB: Public onDemandDecision As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.AgentParameters.numberOfActionsBetweenDecisions
      commentId: F:Unity.MLAgents.AgentParameters.numberOfActionsBetweenDecisions
      language: CSharp
      name:
        CSharp: numberOfActionsBetweenDecisions
        VB: numberOfActionsBetweenDecisions
      nameWithType:
        CSharp: AgentParameters.numberOfActionsBetweenDecisions
        VB: AgentParameters.numberOfActionsBetweenDecisions
      qualifiedName:
        CSharp: Unity.MLAgents.AgentParameters.numberOfActionsBetweenDecisions
        VB: Unity.MLAgents.AgentParameters.numberOfActionsBetweenDecisions
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: numberOfActionsBetweenDecisions
        path: ''
        startLine: 666
      summary: "\nNumber of actions between decisions (used when On Demand Decisions\nis turned off).\n"
      example: []
      syntax:
        content:
          CSharp: public int numberOfActionsBetweenDecisions
          VB: Public numberOfActionsBetweenDecisions As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Unity.MLAgents.Agent
    commentId: T:Unity.MLAgents.Agent
    language: CSharp
    name:
      CSharp: Agent
      VB: Agent
    nameWithType:
      CSharp: Agent
      VB: Agent
    qualifiedName:
      CSharp: Unity.MLAgents.Agent
      VB: Unity.MLAgents.Agent
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Unity.MLAgents
    source:
      id: Agent
      path: ''
      startLine: 718
    summary: "\nAgent Monobehavior class that is attached to a Unity GameObject, making it\nan Agent. An agent produces observations and takes actions in the \nenvironment. Observations are determined by the cameras attached \nto the agent in addition to the vector observations implemented by the\nuser in <xref href=\"Unity.MLAgents.Agent.CollectObservations\" data-throw-if-not-resolved=\"false\"></xref>. On the other hand, actions\nare determined by decisions produced by a linked Brain. Currently, this\nclass is expected to be extended to implement the desired agent behavior.\n"
    remarks: "\nSimply speaking, an agent roams through an environment and at each step\nof the environment extracts its current observation, sends them to its\nlinked brain and in return receives an action from its brain. In practice,\nhowever, an agent need not send its observation at every step since very\nlittle may have changed between sucessive steps. Currently, how often an\nagent updates its brain with a fresh observation is determined by the\nAcademy. \n\nAt any step, an agent may be considered <xref href=\"Unity.MLAgents.Agent.done\" data-throw-if-not-resolved=\"false\"></xref>. \nThis could occur due to a variety of reasons:\n- The agent reached an end state within its environment.\n- The agent reached the maximum # of steps (i.e. timed out).\n- The academy reached the maximum # of steps (forced agent to be done).\n\nHere, an agent reaches an end state if it completes its task successfully\nor somehow fails along the way. In the case where an agent is done before\nthe academy, it either resets and restarts, or just lingers until the\nacademy is done.\n\nAn important note regarding steps and episodes is due. Here, an agent step\ncorresponds to an academy step, which also corresponds to Unity\nenvironment step (i.e. each FixedUpdate call). This is not the case for\nepisodes. The academy controls the global episode count and each agent \ncontrols its own local episode count and can reset and start a new local\nepisode independently (based on its own experience). Thus an academy\n(global) episode can be viewed as the upper-bound on an agents episode\nlength and that within a single global episode, an agent may have completed\nmultiple local episodes. Consequently, if an agent max step is\nset to a value larger than the academy max steps value, then the academy\nvalue takes precedence (since the agent max step will never be reached).\n\nLastly, note that at any step the brain linked to the agent is allowed to\nchange programmatically with <xref href=\"Unity.MLAgents.Agent.GiveBrain(Unity.MLAgents.Brain)\" data-throw-if-not-resolved=\"false\"></xref>.\n\nImplementation-wise, it is required that this class is extended and the\nvirtual methods overridden. For sample implementations of agent behavior,\nsee the Examples/ directory within this Unity project.\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [Serializable]

          public abstract class Agent : MonoBehaviour
        VB: >-
          <Serializable>

          Public MustInherit Class Agent

              Inherits MonoBehaviour
    inheritance:
    - MonoBehaviour
    attributes:
    - type: System.SerializableAttribute
      ctor: System.SerializableAttribute.#ctor
      arguments: []
    modifiers:
      CSharp:
      - public
      - abstract
      - class
      VB:
      - Public
      - MustInherit
      - Class
    items:
    - id: Unity.MLAgents.Agent.brain
      commentId: F:Unity.MLAgents.Agent.brain
      language: CSharp
      name:
        CSharp: brain
        VB: brain
      nameWithType:
        CSharp: Agent.brain
        VB: Agent.brain
      qualifiedName:
        CSharp: Unity.MLAgents.Agent.brain
        VB: Unity.MLAgents.Agent.brain
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: brain
        path: ''
        startLine: 730
      summary: "\nThe Brain attached to this agent. A brain can be attached either\ndirectly from the Editor through AgentEditor or \nprogrammatically through <xref href=\"Unity.MLAgents.Agent.GiveBrain(Unity.MLAgents.Brain)\" data-throw-if-not-resolved=\"false\"></xref>. It is OK for an agent\nto not have a brain, as long as no decision is requested.\n"
      example: []
      syntax:
        content:
          CSharp: public Brain brain
          VB: Public brain As Brain
        return:
          type: Unity.MLAgents.Brain
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        Unity.MLAgents.Agent.GiveBrain(Unity.MLAgents.Brain): 
    - id: Unity.MLAgents.Agent.agentParameters
      commentId: F:Unity.MLAgents.Agent.agentParameters
      language: CSharp
      name:
        CSharp: agentParameters
        VB: agentParameters
      nameWithType:
        CSharp: Agent.agentParameters
        VB: Agent.agentParameters
      qualifiedName:
        CSharp: Unity.MLAgents.Agent.agentParameters
        VB: Unity.MLAgents.Agent.agentParameters
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: agentParameters
        path: ''
        startLine: 736
      summary: "\nAgent parameters specified within the Editor via AgentEditor.\n"
      example: []
      syntax:
        content:
          CSharp: public AgentParameters agentParameters
          VB: Public agentParameters As AgentParameters
        return:
          type: Unity.MLAgents.AgentParameters
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.Agent.GiveBrain(Unity.MLAgents.Brain)
      commentId: M:Unity.MLAgents.Agent.GiveBrain(Unity.MLAgents.Brain)
      language: CSharp
      name:
        CSharp: GiveBrain(Brain)
        VB: GiveBrain(Brain)
      nameWithType:
        CSharp: Agent.GiveBrain(Brain)
        VB: Agent.GiveBrain(Brain)
      qualifiedName:
        CSharp: Unity.MLAgents.Agent.GiveBrain(Unity.MLAgents.Brain)
        VB: Unity.MLAgents.Agent.GiveBrain(Unity.MLAgents.Brain)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: GiveBrain
        path: ''
        startLine: 859
      summary: "\nUpdates the Brain for the agent. Any brain currently assigned to the\nagent will be replaced with the provided one.\n"
      remarks: "\nThe agent unsubscribes from its current brain (if it has one) and\nsubscribes to the provided brain. This enables contextual brains, that\nis, updating the behaviour (hence brain) of the agent depending on\nthe context of the game. For example, we may utilize one (wandering)\nbrain when an agent is randomly exploring an open world, but switch\nto another (fighting) brain when it comes into contact with an enemy.\n"
      example: []
      syntax:
        content:
          CSharp: public void GiveBrain(Brain brain)
          VB: Public Sub GiveBrain(brain As Brain)
        parameters:
        - id: brain
          type: Unity.MLAgents.Brain
          description: New brain to subscribe this agent to
      overload: Unity.MLAgents.Agent.GiveBrain*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.Agent.GetStepCount
      commentId: M:Unity.MLAgents.Agent.GetStepCount
      language: CSharp
      name:
        CSharp: GetStepCount()
        VB: GetStepCount()
      nameWithType:
        CSharp: Agent.GetStepCount()
        VB: Agent.GetStepCount()
      qualifiedName:
        CSharp: Unity.MLAgents.Agent.GetStepCount()
        VB: Unity.MLAgents.Agent.GetStepCount()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: GetStepCount
        path: ''
        startLine: 871
      summary: "\nReturns the current step counter (within the current epside).\n"
      example: []
      syntax:
        content:
          CSharp: public int GetStepCount()
          VB: Public Function GetStepCount As Integer
        return:
          type: System.Int32
          description: "\nCurrent episode number.\n"
      overload: Unity.MLAgents.Agent.GetStepCount*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.Agent.ResetReward
      commentId: M:Unity.MLAgents.Agent.ResetReward
      language: CSharp
      name:
        CSharp: ResetReward()
        VB: ResetReward()
      nameWithType:
        CSharp: Agent.ResetReward()
        VB: Agent.ResetReward()
      qualifiedName:
        CSharp: Unity.MLAgents.Agent.ResetReward()
        VB: Unity.MLAgents.Agent.ResetReward()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: ResetReward
        path: ''
        startLine: 879
      summary: "\nResets the step reward and possibly the episode reward for the agent.\n"
      example: []
      syntax:
        content:
          CSharp: public void ResetReward()
          VB: Public Sub ResetReward
      overload: Unity.MLAgents.Agent.ResetReward*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.Agent.SetReward(System.Single)
      commentId: M:Unity.MLAgents.Agent.SetReward(System.Single)
      language: CSharp
      name:
        CSharp: SetReward(Single)
        VB: SetReward(Single)
      nameWithType:
        CSharp: Agent.SetReward(Single)
        VB: Agent.SetReward(Single)
      qualifiedName:
        CSharp: Unity.MLAgents.Agent.SetReward(System.Single)
        VB: Unity.MLAgents.Agent.SetReward(System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: SetReward
        path: ''
        startLine: 893
      summary: "\nOverrides the current step reward of the agent and updates the episode\nreward accordingly.\n"
      example: []
      syntax:
        content:
          CSharp: public void SetReward(float reward)
          VB: Public Sub SetReward(reward As Single)
        parameters:
        - id: reward
          type: System.Single
          description: The new value of the reward.
      overload: Unity.MLAgents.Agent.SetReward*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.Agent.AddReward(System.Single)
      commentId: M:Unity.MLAgents.Agent.AddReward(System.Single)
      language: CSharp
      name:
        CSharp: AddReward(Single)
        VB: AddReward(Single)
      nameWithType:
        CSharp: Agent.AddReward(Single)
        VB: Agent.AddReward(Single)
      qualifiedName:
        CSharp: Unity.MLAgents.Agent.AddReward(System.Single)
        VB: Unity.MLAgents.Agent.AddReward(System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: AddReward
        path: ''
        startLine: 903
      summary: "\nIncrements the step and episode rewards by the provided value.\n"
      example: []
      syntax:
        content:
          CSharp: public void AddReward(float increment)
          VB: Public Sub AddReward(increment As Single)
        parameters:
        - id: increment
          type: System.Single
          description: Incremental reward value.
      overload: Unity.MLAgents.Agent.AddReward*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.Agent.GetReward
      commentId: M:Unity.MLAgents.Agent.GetReward
      language: CSharp
      name:
        CSharp: GetReward()
        VB: GetReward()
      nameWithType:
        CSharp: Agent.GetReward()
        VB: Agent.GetReward()
      qualifiedName:
        CSharp: Unity.MLAgents.Agent.GetReward()
        VB: Unity.MLAgents.Agent.GetReward()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: GetReward
        path: ''
        startLine: 913
      summary: "\nRetrieves the step reward for the Agent.\n"
      example: []
      syntax:
        content:
          CSharp: public float GetReward()
          VB: Public Function GetReward As Single
        return:
          type: System.Single
          description: The step reward.
      overload: Unity.MLAgents.Agent.GetReward*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.Agent.GetCumulativeReward
      commentId: M:Unity.MLAgents.Agent.GetCumulativeReward
      language: CSharp
      name:
        CSharp: GetCumulativeReward()
        VB: GetCumulativeReward()
      nameWithType:
        CSharp: Agent.GetCumulativeReward()
        VB: Agent.GetCumulativeReward()
      qualifiedName:
        CSharp: Unity.MLAgents.Agent.GetCumulativeReward()
        VB: Unity.MLAgents.Agent.GetCumulativeReward()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: GetCumulativeReward
        path: ''
        startLine: 922
      summary: "\nRetrieves the episode reward for the Agent.\n"
      example: []
      syntax:
        content:
          CSharp: public float GetCumulativeReward()
          VB: Public Function GetCumulativeReward As Single
        return:
          type: System.Single
          description: The episode reward.
      overload: Unity.MLAgents.Agent.GetCumulativeReward*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.Agent.Done
      commentId: M:Unity.MLAgents.Agent.Done
      language: CSharp
      name:
        CSharp: Done()
        VB: Done()
      nameWithType:
        CSharp: Agent.Done()
        VB: Agent.Done()
      qualifiedName:
        CSharp: Unity.MLAgents.Agent.Done()
        VB: Unity.MLAgents.Agent.Done()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: Done
        path: ''
        startLine: 930
      summary: "\nSets the done flag to true.\n"
      example: []
      syntax:
        content:
          CSharp: public void Done()
          VB: Public Sub Done
      overload: Unity.MLAgents.Agent.Done*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.Agent.RequestDecision
      commentId: M:Unity.MLAgents.Agent.RequestDecision
      language: CSharp
      name:
        CSharp: RequestDecision()
        VB: RequestDecision()
      nameWithType:
        CSharp: Agent.RequestDecision()
        VB: Agent.RequestDecision()
      qualifiedName:
        CSharp: Unity.MLAgents.Agent.RequestDecision()
        VB: Unity.MLAgents.Agent.RequestDecision()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: RequestDecision
        path: ''
        startLine: 938
      summary: "\nIs called when the agent must request the brain for a new decision.\n"
      example: []
      syntax:
        content:
          CSharp: public void RequestDecision()
          VB: Public Sub RequestDecision
      overload: Unity.MLAgents.Agent.RequestDecision*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.Agent.RequestAction
      commentId: M:Unity.MLAgents.Agent.RequestAction
      language: CSharp
      name:
        CSharp: RequestAction()
        VB: RequestAction()
      nameWithType:
        CSharp: Agent.RequestAction()
        VB: Agent.RequestAction()
      qualifiedName:
        CSharp: Unity.MLAgents.Agent.RequestAction()
        VB: Unity.MLAgents.Agent.RequestAction()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: RequestAction
        path: ''
        startLine: 947
      summary: "\nIs called then the agent must perform a new action.\n"
      example: []
      syntax:
        content:
          CSharp: public void RequestAction()
          VB: Public Sub RequestAction
      overload: Unity.MLAgents.Agent.RequestAction*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.Agent.IsMaxStepReached
      commentId: M:Unity.MLAgents.Agent.IsMaxStepReached
      language: CSharp
      name:
        CSharp: IsMaxStepReached()
        VB: IsMaxStepReached()
      nameWithType:
        CSharp: Agent.IsMaxStepReached()
        VB: Agent.IsMaxStepReached()
      qualifiedName:
        CSharp: Unity.MLAgents.Agent.IsMaxStepReached()
        VB: Unity.MLAgents.Agent.IsMaxStepReached()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: IsMaxStepReached
        path: ''
        startLine: 958
      summary: "\nIndicates if the agent has reached his maximum number of steps.\n"
      example: []
      syntax:
        content:
          CSharp: public bool IsMaxStepReached()
          VB: Public Function IsMaxStepReached As Boolean
        return:
          type: System.Boolean
          description: "\n<code>true</code>, if max step reached was reached, <code>false</code> otherwise.\n"
      overload: Unity.MLAgents.Agent.IsMaxStepReached*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.Agent.IsDone
      commentId: M:Unity.MLAgents.Agent.IsDone
      language: CSharp
      name:
        CSharp: IsDone()
        VB: IsDone()
      nameWithType:
        CSharp: Agent.IsDone()
        VB: Agent.IsDone()
      qualifiedName:
        CSharp: Unity.MLAgents.Agent.IsDone()
        VB: Unity.MLAgents.Agent.IsDone()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: IsDone
        path: ''
        startLine: 969
      summary: "\nIndicates if the agent is done\n"
      example: []
      syntax:
        content:
          CSharp: public bool IsDone()
          VB: Public Function IsDone As Boolean
        return:
          type: System.Boolean
          description: "\n<code>true</code>, if the agent is done, <code>false</code> otherwise.\n"
      overload: Unity.MLAgents.Agent.IsDone*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.Agent.InitializeAgent
      commentId: M:Unity.MLAgents.Agent.InitializeAgent
      language: CSharp
      name:
        CSharp: InitializeAgent()
        VB: InitializeAgent()
      nameWithType:
        CSharp: Agent.InitializeAgent()
        VB: Agent.InitializeAgent()
      qualifiedName:
        CSharp: Unity.MLAgents.Agent.InitializeAgent()
        VB: Unity.MLAgents.Agent.InitializeAgent()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: InitializeAgent
        path: ''
        startLine: 1029
      summary: "\nInitializes the agent, called once when the agent is enabled. Can be\nleft empty if there is no special, unique set-up behavior for the\nagent.\n"
      remarks: "\nOne sample use is to store local references to other objects in the\nscene which would facilitate computing this agents observation.\n"
      example: []
      syntax:
        content:
          CSharp: public virtual void InitializeAgent()
          VB: Public Overridable Sub InitializeAgent
      overload: Unity.MLAgents.Agent.InitializeAgent*
      modifiers:
        CSharp:
        - public
        - virtual
        VB:
        - Public
        - Overridable
    - id: Unity.MLAgents.Agent.CollectObservations
      commentId: M:Unity.MLAgents.Agent.CollectObservations
      language: CSharp
      name:
        CSharp: CollectObservations()
        VB: CollectObservations()
      nameWithType:
        CSharp: Agent.CollectObservations()
        VB: Agent.CollectObservations()
      qualifiedName:
        CSharp: Unity.MLAgents.Agent.CollectObservations()
        VB: Unity.MLAgents.Agent.CollectObservations()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: CollectObservations
        path: ''
        startLine: 1134
      summary: "\nCollects the (vector, visual, text) observations of the agent.\nThe agent observation describes the current environment from the \nperspective of the agent.\n"
      remarks: "\nSimply, an agents observation is any environment information that helps\nthe Agent acheive its goal. For example, for a fighting Agent, its\nobservation could include distances to friends or enemies, or the \ncurrent level of ammunition at its disposal.\nRecall that an Agent may attach vector, visual or textual observations.\nVector observations are added by calling the provided helper methods:\n- <xref href=\"Unity.MLAgents.Agent.AddVectorObs(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>\n- <xref href=\"Unity.MLAgents.Agent.AddVectorObs(System.Single)\" data-throw-if-not-resolved=\"false\"></xref>\n- <xref href=\"Unity.MLAgents.Agent.AddVectorObs(Vector3)\" data-throw-if-not-resolved=\"false\"></xref>\n- <xref href=\"Unity.MLAgents.Agent.AddVectorObs(Vector2)\" data-throw-if-not-resolved=\"false\"></xref>\n- <xref href=\"Unity.MLAgents.Agent.AddVectorObs(System.Single%5b%5d)\" data-throw-if-not-resolved=\"false\"></xref>\n- <xref href=\"Unity.MLAgents.Agent.AddVectorObs(System.Collections.Generic.List%7bSystem.Single%7d)\" data-throw-if-not-resolved=\"false\"></xref>\n- <xref href=\"Unity.MLAgents.Agent.AddVectorObs(Quaternion)\" data-throw-if-not-resolved=\"false\"></xref>\nDepending on your environment, any combination of these helpers can\nbe used. They just need to be used in the exact same order each time\nthis method is called and the resulting size of the vector observation\nneeds to match the vectorObservationSize attribute of the linked Brain.\nVisual observations are implicitly added from the cameras attached to\nthe Agent.\nLastly, textual observations are added using \n<xref href=\"Unity.MLAgents.Agent.SetTextObs(System.String)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
      example: []
      syntax:
        content:
          CSharp: public virtual void CollectObservations()
          VB: Public Overridable Sub CollectObservations
      overload: Unity.MLAgents.Agent.CollectObservations*
      modifiers:
        CSharp:
        - public
        - virtual
        VB:
        - Public
        - Overridable
      references:
        Unity.MLAgents.Agent.AddVectorObs(System.Int32): 
        Unity.MLAgents.Agent.AddVectorObs(System.Single): 
        Unity.MLAgents.Agent.AddVectorObs(Vector3): 
        Unity.MLAgents.Agent.AddVectorObs(Vector2): 
        Unity.MLAgents.Agent.AddVectorObs(System.Single[]): 
        Unity.MLAgents.Agent.AddVectorObs(System.Collections.Generic.List{System.Single}): 
        Unity.MLAgents.Agent.AddVectorObs(Quaternion): 
        Unity.MLAgents.Agent.SetTextObs(System.String): 
    - id: Unity.MLAgents.Agent.AddVectorObs(System.Single)
      commentId: M:Unity.MLAgents.Agent.AddVectorObs(System.Single)
      language: CSharp
      name:
        CSharp: AddVectorObs(Single)
        VB: AddVectorObs(Single)
      nameWithType:
        CSharp: Agent.AddVectorObs(Single)
        VB: Agent.AddVectorObs(Single)
      qualifiedName:
        CSharp: Unity.MLAgents.Agent.AddVectorObs(System.Single)
        VB: Unity.MLAgents.Agent.AddVectorObs(System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: AddVectorObs
        path: ''
        startLine: 1144
      summary: "\nAdds a float observation to the vector observations of the agent.\nIncreases the size of the agents vector observation by 1.\n"
      example: []
      syntax:
        content:
          CSharp: protected void AddVectorObs(float observation)
          VB: Protected Sub AddVectorObs(observation As Single)
        parameters:
        - id: observation
          type: System.Single
          description: Observation.
      overload: Unity.MLAgents.Agent.AddVectorObs*
      modifiers:
        CSharp:
        - protected
        VB:
        - Protected
    - id: Unity.MLAgents.Agent.AddVectorObs(System.Int32)
      commentId: M:Unity.MLAgents.Agent.AddVectorObs(System.Int32)
      language: CSharp
      name:
        CSharp: AddVectorObs(Int32)
        VB: AddVectorObs(Int32)
      nameWithType:
        CSharp: Agent.AddVectorObs(Int32)
        VB: Agent.AddVectorObs(Int32)
      qualifiedName:
        CSharp: Unity.MLAgents.Agent.AddVectorObs(System.Int32)
        VB: Unity.MLAgents.Agent.AddVectorObs(System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: AddVectorObs
        path: ''
        startLine: 1154
      summary: "\nAdds an integer observation to the vector observations of the agent.\nIncreases the size of the agents vector observation by 1.\n"
      example: []
      syntax:
        content:
          CSharp: protected void AddVectorObs(int observation)
          VB: Protected Sub AddVectorObs(observation As Integer)
        parameters:
        - id: observation
          type: System.Int32
          description: Observation.
      overload: Unity.MLAgents.Agent.AddVectorObs*
      modifiers:
        CSharp:
        - protected
        VB:
        - Protected
    - id: Unity.MLAgents.Agent.AddVectorObs(Vector3)
      commentId: M:Unity.MLAgents.Agent.AddVectorObs(Vector3)
      language: CSharp
      name:
        CSharp: AddVectorObs(Vector3)
        VB: AddVectorObs(Vector3)
      nameWithType:
        CSharp: Agent.AddVectorObs(Vector3)
        VB: Agent.AddVectorObs(Vector3)
      qualifiedName:
        CSharp: Unity.MLAgents.Agent.AddVectorObs(Vector3)
        VB: Unity.MLAgents.Agent.AddVectorObs(Vector3)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: AddVectorObs
        path: ''
        startLine: 1164
      summary: "\nAdds an Vector3 observation to the vector observations of the agent.\nIncreases the size of the agents vector observation by 3.\n"
      example: []
      syntax:
        content:
          CSharp: protected void AddVectorObs(Vector3 observation)
          VB: Protected Sub AddVectorObs(observation As Vector3)
        parameters:
        - id: observation
          type: Vector3
          description: Observation.
      overload: Unity.MLAgents.Agent.AddVectorObs*
      modifiers:
        CSharp:
        - protected
        VB:
        - Protected
    - id: Unity.MLAgents.Agent.AddVectorObs(Vector2)
      commentId: M:Unity.MLAgents.Agent.AddVectorObs(Vector2)
      language: CSharp
      name:
        CSharp: AddVectorObs(Vector2)
        VB: AddVectorObs(Vector2)
      nameWithType:
        CSharp: Agent.AddVectorObs(Vector2)
        VB: Agent.AddVectorObs(Vector2)
      qualifiedName:
        CSharp: Unity.MLAgents.Agent.AddVectorObs(Vector2)
        VB: Unity.MLAgents.Agent.AddVectorObs(Vector2)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: AddVectorObs
        path: ''
        startLine: 1176
      summary: "\nAdds an Vector2 observation to the vector observations of the agent.\nIncreases the size of the agents vector observation by 2.\n"
      example: []
      syntax:
        content:
          CSharp: protected void AddVectorObs(Vector2 observation)
          VB: Protected Sub AddVectorObs(observation As Vector2)
        parameters:
        - id: observation
          type: Vector2
          description: Observation.
      overload: Unity.MLAgents.Agent.AddVectorObs*
      modifiers:
        CSharp:
        - protected
        VB:
        - Protected
    - id: Unity.MLAgents.Agent.AddVectorObs(System.Single[])
      commentId: M:Unity.MLAgents.Agent.AddVectorObs(System.Single[])
      language: CSharp
      name:
        CSharp: AddVectorObs(Single[])
        VB: AddVectorObs(Single())
      nameWithType:
        CSharp: Agent.AddVectorObs(Single[])
        VB: Agent.AddVectorObs(Single())
      qualifiedName:
        CSharp: Unity.MLAgents.Agent.AddVectorObs(System.Single[])
        VB: Unity.MLAgents.Agent.AddVectorObs(System.Single())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: AddVectorObs
        path: ''
        startLine: 1187
      summary: "\nAdds a float array observation to the vector observations of the agent.\nIncreases the size of the agents vector observation by size of array.\n"
      example: []
      syntax:
        content:
          CSharp: protected void AddVectorObs(float[] observation)
          VB: Protected Sub AddVectorObs(observation As Single())
        parameters:
        - id: observation
          type: System.Single[]
          description: Observation.
      overload: Unity.MLAgents.Agent.AddVectorObs*
      modifiers:
        CSharp:
        - protected
        VB:
        - Protected
    - id: Unity.MLAgents.Agent.AddVectorObs(System.Collections.Generic.List{System.Single})
      commentId: M:Unity.MLAgents.Agent.AddVectorObs(System.Collections.Generic.List{System.Single})
      language: CSharp
      name:
        CSharp: AddVectorObs(List<Single>)
        VB: AddVectorObs(List(Of Single))
      nameWithType:
        CSharp: Agent.AddVectorObs(List<Single>)
        VB: Agent.AddVectorObs(List(Of Single))
      qualifiedName:
        CSharp: Unity.MLAgents.Agent.AddVectorObs(System.Collections.Generic.List<System.Single>)
        VB: Unity.MLAgents.Agent.AddVectorObs(System.Collections.Generic.List(Of System.Single))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: AddVectorObs
        path: ''
        startLine: 1197
      summary: "\nAdds a float list observation to the vector observations of the agent.\nIncreases the size of the agents vector observation by size of list.\n"
      example: []
      syntax:
        content:
          CSharp: protected void AddVectorObs(List<float> observation)
          VB: Protected Sub AddVectorObs(observation As List(Of Single))
        parameters:
        - id: observation
          type: System.Collections.Generic.List{System.Single}
          description: Observation.
      overload: Unity.MLAgents.Agent.AddVectorObs*
      modifiers:
        CSharp:
        - protected
        VB:
        - Protected
    - id: Unity.MLAgents.Agent.AddVectorObs(Quaternion)
      commentId: M:Unity.MLAgents.Agent.AddVectorObs(Quaternion)
      language: CSharp
      name:
        CSharp: AddVectorObs(Quaternion)
        VB: AddVectorObs(Quaternion)
      nameWithType:
        CSharp: Agent.AddVectorObs(Quaternion)
        VB: Agent.AddVectorObs(Quaternion)
      qualifiedName:
        CSharp: Unity.MLAgents.Agent.AddVectorObs(Quaternion)
        VB: Unity.MLAgents.Agent.AddVectorObs(Quaternion)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: AddVectorObs
        path: ''
        startLine: 1207
      summary: "\nAdds a quaternion observation to the vector observations of the agent.\nIncreases the size of the agents vector observation by 4.\n"
      example: []
      syntax:
        content:
          CSharp: protected void AddVectorObs(Quaternion observation)
          VB: Protected Sub AddVectorObs(observation As Quaternion)
        parameters:
        - id: observation
          type: Quaternion
          description: Observation.
      overload: Unity.MLAgents.Agent.AddVectorObs*
      modifiers:
        CSharp:
        - protected
        VB:
        - Protected
    - id: Unity.MLAgents.Agent.SetTextObs(System.String)
      commentId: M:Unity.MLAgents.Agent.SetTextObs(System.String)
      language: CSharp
      name:
        CSharp: SetTextObs(String)
        VB: SetTextObs(String)
      nameWithType:
        CSharp: Agent.SetTextObs(String)
        VB: Agent.SetTextObs(String)
      qualifiedName:
        CSharp: Unity.MLAgents.Agent.SetTextObs(System.String)
        VB: Unity.MLAgents.Agent.SetTextObs(System.String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: SetTextObs
        path: ''
        startLine: 1219
      summary: "\nSets the text observation.\n"
      example: []
      syntax:
        content:
          CSharp: public void SetTextObs(string textObservation)
          VB: Public Sub SetTextObs(textObservation As String)
        parameters:
        - id: textObservation
          type: System.String
          description: The text observation.
      overload: Unity.MLAgents.Agent.SetTextObs*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.Agent.AgentAction(System.Single[],System.String)
      commentId: M:Unity.MLAgents.Agent.AgentAction(System.Single[],System.String)
      language: CSharp
      name:
        CSharp: AgentAction(Single[], String)
        VB: AgentAction(Single(), String)
      nameWithType:
        CSharp: Agent.AgentAction(Single[], String)
        VB: Agent.AgentAction(Single(), String)
      qualifiedName:
        CSharp: Unity.MLAgents.Agent.AgentAction(System.Single[], System.String)
        VB: Unity.MLAgents.Agent.AgentAction(System.Single(), System.String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: AgentAction
        path: ''
        startLine: 1233
      summary: "\nSpecifies the agent behavior at every step based on the provided\naction.\n"
      example: []
      syntax:
        content:
          CSharp: public virtual void AgentAction(float[] vectorAction, string textAction)
          VB: Public Overridable Sub AgentAction(vectorAction As Single(), textAction As String)
        parameters:
        - id: vectorAction
          type: System.Single[]
          description: "\nVector action. Note that for discrete actions, the provided array\nwill be of length 1.\n"
        - id: textAction
          type: System.String
          description: Text action.
      overload: Unity.MLAgents.Agent.AgentAction*
      modifiers:
        CSharp:
        - public
        - virtual
        VB:
        - Public
        - Overridable
    - id: Unity.MLAgents.Agent.AgentOnDone
      commentId: M:Unity.MLAgents.Agent.AgentOnDone
      language: CSharp
      name:
        CSharp: AgentOnDone()
        VB: AgentOnDone()
      nameWithType:
        CSharp: Agent.AgentOnDone()
        VB: Agent.AgentOnDone()
      qualifiedName:
        CSharp: Unity.MLAgents.Agent.AgentOnDone()
        VB: Unity.MLAgents.Agent.AgentOnDone()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: AgentOnDone
        path: ''
        startLine: 1243
      summary: "\nSpecifies the agent behavior when done and \n<xref href=\"Unity.MLAgents.AgentParameters.resetOnDone\" data-throw-if-not-resolved=\"false\"></xref> is false. This method can be\nused to remove the agent from the scene.\n"
      example: []
      syntax:
        content:
          CSharp: public virtual void AgentOnDone()
          VB: Public Overridable Sub AgentOnDone
      overload: Unity.MLAgents.Agent.AgentOnDone*
      modifiers:
        CSharp:
        - public
        - virtual
        VB:
        - Public
        - Overridable
      references:
        Unity.MLAgents.AgentParameters.resetOnDone: 
    - id: Unity.MLAgents.Agent.AgentReset
      commentId: M:Unity.MLAgents.Agent.AgentReset
      language: CSharp
      name:
        CSharp: AgentReset()
        VB: AgentReset()
      nameWithType:
        CSharp: Agent.AgentReset()
        VB: Agent.AgentReset()
      qualifiedName:
        CSharp: Unity.MLAgents.Agent.AgentReset()
        VB: Unity.MLAgents.Agent.AgentReset()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: AgentReset
        path: ''
        startLine: 1253
      summary: "\nSpecifies the agent behavior when being reset, which can be due to\nthe agent or Academy being done (i.e. completion of local or global\nepisode).\n"
      example: []
      syntax:
        content:
          CSharp: public virtual void AgentReset()
          VB: Public Overridable Sub AgentReset
      overload: Unity.MLAgents.Agent.AgentReset*
      modifiers:
        CSharp:
        - public
        - virtual
        VB:
        - Public
        - Overridable
    - id: Unity.MLAgents.Agent.UpdateVectorAction(System.Single[])
      commentId: M:Unity.MLAgents.Agent.UpdateVectorAction(System.Single[])
      language: CSharp
      name:
        CSharp: UpdateVectorAction(Single[])
        VB: UpdateVectorAction(Single())
      nameWithType:
        CSharp: Agent.UpdateVectorAction(Single[])
        VB: Agent.UpdateVectorAction(Single())
      qualifiedName:
        CSharp: Unity.MLAgents.Agent.UpdateVectorAction(System.Single[])
        VB: Unity.MLAgents.Agent.UpdateVectorAction(System.Single())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: UpdateVectorAction
        path: ''
        startLine: 1273
      summary: "\nUpdates the vector action.\n"
      example: []
      syntax:
        content:
          CSharp: public void UpdateVectorAction(float[] vectorActions)
          VB: Public Sub UpdateVectorAction(vectorActions As Single())
        parameters:
        - id: vectorActions
          type: System.Single[]
          description: Vector actions.
      overload: Unity.MLAgents.Agent.UpdateVectorAction*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.Agent.UpdateMemoriesAction(System.Collections.Generic.List{System.Single})
      commentId: M:Unity.MLAgents.Agent.UpdateMemoriesAction(System.Collections.Generic.List{System.Single})
      language: CSharp
      name:
        CSharp: UpdateMemoriesAction(List<Single>)
        VB: UpdateMemoriesAction(List(Of Single))
      nameWithType:
        CSharp: Agent.UpdateMemoriesAction(List<Single>)
        VB: Agent.UpdateMemoriesAction(List(Of Single))
      qualifiedName:
        CSharp: Unity.MLAgents.Agent.UpdateMemoriesAction(System.Collections.Generic.List<System.Single>)
        VB: Unity.MLAgents.Agent.UpdateMemoriesAction(System.Collections.Generic.List(Of System.Single))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: UpdateMemoriesAction
        path: ''
        startLine: 1282
      summary: "\nUpdates the memories action.\n"
      example: []
      syntax:
        content:
          CSharp: public void UpdateMemoriesAction(List<float> memories)
          VB: Public Sub UpdateMemoriesAction(memories As List(Of Single))
        parameters:
        - id: memories
          type: System.Collections.Generic.List{System.Single}
          description: Memories.
      overload: Unity.MLAgents.Agent.UpdateMemoriesAction*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.Agent.UpdateTextAction(System.String)
      commentId: M:Unity.MLAgents.Agent.UpdateTextAction(System.String)
      language: CSharp
      name:
        CSharp: UpdateTextAction(String)
        VB: UpdateTextAction(String)
      nameWithType:
        CSharp: Agent.UpdateTextAction(String)
        VB: Agent.UpdateTextAction(String)
      qualifiedName:
        CSharp: Unity.MLAgents.Agent.UpdateTextAction(System.String)
        VB: Unity.MLAgents.Agent.UpdateTextAction(System.String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: UpdateTextAction
        path: ''
        startLine: 1291
      summary: "\nUpdates the text action.\n"
      example: []
      syntax:
        content:
          CSharp: public void UpdateTextAction(string textActions)
          VB: Public Sub UpdateTextAction(textActions As String)
        parameters:
        - id: textActions
          type: System.String
          description: Text actions.
      overload: Unity.MLAgents.Agent.UpdateTextAction*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.Agent.ObservationToTexture(Camera,System.Int32,System.Int32)
      commentId: M:Unity.MLAgents.Agent.ObservationToTexture(Camera,System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: ObservationToTexture(Camera, Int32, Int32)
        VB: ObservationToTexture(Camera, Int32, Int32)
      nameWithType:
        CSharp: Agent.ObservationToTexture(Camera, Int32, Int32)
        VB: Agent.ObservationToTexture(Camera, Int32, Int32)
      qualifiedName:
        CSharp: Unity.MLAgents.Agent.ObservationToTexture(Camera, System.Int32, System.Int32)
        VB: Unity.MLAgents.Agent.ObservationToTexture(Camera, System.Int32, System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: ObservationToTexture
        path: ''
        startLine: 1433
      summary: "\nConverts a camera and correspinding resolution to a 2D texture.\n"
      example: []
      syntax:
        content:
          CSharp: public static Texture2D ObservationToTexture(Camera camera, int width, int height)
          VB: Public Shared Function ObservationToTexture(camera As Camera, width As Integer, height As Integer) As Texture2D
        parameters:
        - id: camera
          type: Camera
          description: Camera.
        - id: width
          type: System.Int32
          description: Width of resulting 2D texture.
        - id: height
          type: System.Int32
          description: Height of resulting 2D texture.
        return:
          type: Texture2D
          description: The 2D texture.
      overload: Unity.MLAgents.Agent.ObservationToTexture*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    references:
      Unity.MLAgents.Agent.CollectObservations: 
      Unity.MLAgents.Agent.done: 
      Unity.MLAgents.Agent.GiveBrain(Unity.MLAgents.Brain): 
  - id: Unity.MLAgents.BCTeacherHelper
    commentId: T:Unity.MLAgents.BCTeacherHelper
    language: CSharp
    name:
      CSharp: BCTeacherHelper
      VB: BCTeacherHelper
    nameWithType:
      CSharp: BCTeacherHelper
      VB: BCTeacherHelper
    qualifiedName:
      CSharp: Unity.MLAgents.BCTeacherHelper
      VB: Unity.MLAgents.BCTeacherHelper
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Unity.MLAgents
    source:
      id: BCTeacherHelper
      path: ''
      startLine: 1474
    summary: "\nBehavioral Cloning Helper script. Attach to teacher agent to enable \nresetting the experience buffer, as well as toggling session recording.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class BCTeacherHelper : MonoBehaviour'
        VB: >-
          Public Class BCTeacherHelper

              Inherits MonoBehaviour
    inheritance:
    - MonoBehaviour
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Unity.MLAgents.BCTeacherHelper.recordKey
      commentId: F:Unity.MLAgents.BCTeacherHelper.recordKey
      language: CSharp
      name:
        CSharp: recordKey
        VB: recordKey
      nameWithType:
        CSharp: BCTeacherHelper.recordKey
        VB: BCTeacherHelper.recordKey
      qualifiedName:
        CSharp: Unity.MLAgents.BCTeacherHelper.recordKey
        VB: Unity.MLAgents.BCTeacherHelper.recordKey
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: recordKey
        path: ''
        startLine: 1481
      syntax:
        content:
          CSharp: public KeyCode recordKey
          VB: Public recordKey As KeyCode
        return:
          type: KeyCode
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.BCTeacherHelper.resetKey
      commentId: F:Unity.MLAgents.BCTeacherHelper.resetKey
      language: CSharp
      name:
        CSharp: resetKey
        VB: resetKey
      nameWithType:
        CSharp: BCTeacherHelper.resetKey
        VB: BCTeacherHelper.resetKey
      qualifiedName:
        CSharp: Unity.MLAgents.BCTeacherHelper.resetKey
        VB: Unity.MLAgents.BCTeacherHelper.resetKey
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: resetKey
        path: ''
        startLine: 1482
      syntax:
        content:
          CSharp: public KeyCode resetKey
          VB: Public resetKey As KeyCode
        return:
          type: KeyCode
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Unity.MLAgents.BrainType
    commentId: T:Unity.MLAgents.BrainType
    language: CSharp
    name:
      CSharp: BrainType
      VB: BrainType
    nameWithType:
      CSharp: BrainType
      VB: BrainType
    qualifiedName:
      CSharp: Unity.MLAgents.BrainType
      VB: Unity.MLAgents.BrainType
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: Unity.MLAgents
    source:
      id: BrainType
      path: ''
      startLine: 1533
    syntax:
      content:
        CSharp: public enum BrainType
        VB: Public Enum BrainType
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: Unity.MLAgents.BrainType.Player
      commentId: F:Unity.MLAgents.BrainType.Player
      language: CSharp
      name:
        CSharp: Player
        VB: Player
      nameWithType:
        CSharp: BrainType.Player
        VB: BrainType.Player
      qualifiedName:
        CSharp: Unity.MLAgents.BrainType.Player
        VB: Unity.MLAgents.BrainType.Player
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: Player
        path: ''
        startLine: 1535
      syntax:
        content:
          CSharp: Player = 0
          VB: Player = 0
        return:
          type: Unity.MLAgents.BrainType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Unity.MLAgents.BrainType.Heuristic
      commentId: F:Unity.MLAgents.BrainType.Heuristic
      language: CSharp
      name:
        CSharp: Heuristic
        VB: Heuristic
      nameWithType:
        CSharp: BrainType.Heuristic
        VB: BrainType.Heuristic
      qualifiedName:
        CSharp: Unity.MLAgents.BrainType.Heuristic
        VB: Unity.MLAgents.BrainType.Heuristic
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: Heuristic
        path: ''
        startLine: 1536
      syntax:
        content:
          CSharp: Heuristic = 1
          VB: Heuristic = 1
        return:
          type: Unity.MLAgents.BrainType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Unity.MLAgents.BrainType.External
      commentId: F:Unity.MLAgents.BrainType.External
      language: CSharp
      name:
        CSharp: External
        VB: External
      nameWithType:
        CSharp: BrainType.External
        VB: BrainType.External
      qualifiedName:
        CSharp: Unity.MLAgents.BrainType.External
        VB: Unity.MLAgents.BrainType.External
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: External
        path: ''
        startLine: 1537
      syntax:
        content:
          CSharp: External = 2
          VB: External = 2
        return:
          type: Unity.MLAgents.BrainType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Unity.MLAgents.BrainType.Internal
      commentId: F:Unity.MLAgents.BrainType.Internal
      language: CSharp
      name:
        CSharp: Internal
        VB: Internal
      nameWithType:
        CSharp: BrainType.Internal
        VB: BrainType.Internal
      qualifiedName:
        CSharp: Unity.MLAgents.BrainType.Internal
        VB: Unity.MLAgents.BrainType.Internal
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: Internal
        path: ''
        startLine: 1538
      syntax:
        content:
          CSharp: Internal = 3
          VB: Internal = 3
        return:
          type: Unity.MLAgents.BrainType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: Unity.MLAgents.SpaceType
    commentId: T:Unity.MLAgents.SpaceType
    language: CSharp
    name:
      CSharp: SpaceType
      VB: SpaceType
    nameWithType:
      CSharp: SpaceType
      VB: SpaceType
    qualifiedName:
      CSharp: Unity.MLAgents.SpaceType
      VB: Unity.MLAgents.SpaceType
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: Unity.MLAgents
    source:
      id: SpaceType
      path: ''
      startLine: 1541
    syntax:
      content:
        CSharp: public enum SpaceType
        VB: Public Enum SpaceType
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: Unity.MLAgents.SpaceType.discrete
      commentId: F:Unity.MLAgents.SpaceType.discrete
      language: CSharp
      name:
        CSharp: discrete
        VB: discrete
      nameWithType:
        CSharp: SpaceType.discrete
        VB: SpaceType.discrete
      qualifiedName:
        CSharp: Unity.MLAgents.SpaceType.discrete
        VB: Unity.MLAgents.SpaceType.discrete
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: discrete
        path: ''
        startLine: 1543
      syntax:
        content:
          CSharp: discrete = 0
          VB: discrete = 0
        return:
          type: Unity.MLAgents.SpaceType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Unity.MLAgents.SpaceType.continuous
      commentId: F:Unity.MLAgents.SpaceType.continuous
      language: CSharp
      name:
        CSharp: continuous
        VB: continuous
      nameWithType:
        CSharp: SpaceType.continuous
        VB: SpaceType.continuous
      qualifiedName:
        CSharp: Unity.MLAgents.SpaceType.continuous
        VB: Unity.MLAgents.SpaceType.continuous
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: continuous
        path: ''
        startLine: 1544
      syntax:
        content:
          CSharp: continuous = 1
          VB: continuous = 1
        return:
          type: Unity.MLAgents.SpaceType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: Unity.MLAgents.resolution
    commentId: T:Unity.MLAgents.resolution
    language: CSharp
    name:
      CSharp: resolution
      VB: resolution
    nameWithType:
      CSharp: resolution
      VB: resolution
    qualifiedName:
      CSharp: Unity.MLAgents.resolution
      VB: Unity.MLAgents.resolution
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: Unity.MLAgents
    source:
      id: resolution
      path: ''
      startLine: 1554
    example: []
    syntax:
      content:
        CSharp: >-
          [Serializable]

          public struct resolution
        VB: >-
          <Serializable>

          Public Structure resolution
    inheritedMembers:
    - System.ValueType.Equals(System.Object)
    - System.ValueType.GetHashCode
    - System.ValueType.ToString
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetType
    - System.Object.ReferenceEquals(System.Object,System.Object)
    attributes:
    - type: System.SerializableAttribute
      ctor: System.SerializableAttribute.#ctor
      arguments: []
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: Unity.MLAgents.resolution.width
      commentId: F:Unity.MLAgents.resolution.width
      language: CSharp
      name:
        CSharp: width
        VB: width
      nameWithType:
        CSharp: resolution.width
        VB: resolution.width
      qualifiedName:
        CSharp: Unity.MLAgents.resolution.width
        VB: Unity.MLAgents.resolution.width
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: width
        path: ''
        startLine: 1557
      syntax:
        content:
          CSharp: public int width
          VB: Public width As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.resolution.height
      commentId: F:Unity.MLAgents.resolution.height
      language: CSharp
      name:
        CSharp: height
        VB: height
      nameWithType:
        CSharp: resolution.height
        VB: resolution.height
      qualifiedName:
        CSharp: Unity.MLAgents.resolution.height
        VB: Unity.MLAgents.resolution.height
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: height
        path: ''
        startLine: 1559
      syntax:
        content:
          CSharp: public int height
          VB: Public height As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.resolution.blackAndWhite
      commentId: F:Unity.MLAgents.resolution.blackAndWhite
      language: CSharp
      name:
        CSharp: blackAndWhite
        VB: blackAndWhite
      nameWithType:
        CSharp: resolution.blackAndWhite
        VB: resolution.blackAndWhite
      qualifiedName:
        CSharp: Unity.MLAgents.resolution.blackAndWhite
        VB: Unity.MLAgents.resolution.blackAndWhite
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: blackAndWhite
        path: ''
        startLine: 1561
      syntax:
        content:
          CSharp: public bool blackAndWhite
          VB: Public blackAndWhite As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Unity.MLAgents.BrainParameters
    commentId: T:Unity.MLAgents.BrainParameters
    language: CSharp
    name:
      CSharp: BrainParameters
      VB: BrainParameters
    nameWithType:
      CSharp: BrainParameters
      VB: BrainParameters
    qualifiedName:
      CSharp: Unity.MLAgents.BrainParameters
      VB: Unity.MLAgents.BrainParameters
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Unity.MLAgents
    source:
      id: BrainParameters
      path: ''
      startLine: 1569
    example: []
    syntax:
      content:
        CSharp: >-
          [Serializable]

          public class BrainParameters
        VB: >-
          <Serializable>

          Public Class BrainParameters
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ToString
    - System.Object.ReferenceEquals(System.Object,System.Object)
    attributes:
    - type: System.SerializableAttribute
      ctor: System.SerializableAttribute.#ctor
      arguments: []
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Unity.MLAgents.BrainParameters.vectorObservationSize
      commentId: F:Unity.MLAgents.BrainParameters.vectorObservationSize
      language: CSharp
      name:
        CSharp: vectorObservationSize
        VB: vectorObservationSize
      nameWithType:
        CSharp: BrainParameters.vectorObservationSize
        VB: BrainParameters.vectorObservationSize
      qualifiedName:
        CSharp: Unity.MLAgents.BrainParameters.vectorObservationSize
        VB: Unity.MLAgents.BrainParameters.vectorObservationSize
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: vectorObservationSize
        path: ''
        startLine: 1572
      syntax:
        content:
          CSharp: public int vectorObservationSize
          VB: Public vectorObservationSize As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.BrainParameters.numStackedVectorObservations
      commentId: F:Unity.MLAgents.BrainParameters.numStackedVectorObservations
      language: CSharp
      name:
        CSharp: numStackedVectorObservations
        VB: numStackedVectorObservations
      nameWithType:
        CSharp: BrainParameters.numStackedVectorObservations
        VB: BrainParameters.numStackedVectorObservations
      qualifiedName:
        CSharp: Unity.MLAgents.BrainParameters.numStackedVectorObservations
        VB: Unity.MLAgents.BrainParameters.numStackedVectorObservations
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: numStackedVectorObservations
        path: ''
        startLine: 1578
      syntax:
        content:
          CSharp: public int numStackedVectorObservations
          VB: Public numStackedVectorObservations As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.BrainParameters.vectorActionSize
      commentId: F:Unity.MLAgents.BrainParameters.vectorActionSize
      language: CSharp
      name:
        CSharp: vectorActionSize
        VB: vectorActionSize
      nameWithType:
        CSharp: BrainParameters.vectorActionSize
        VB: BrainParameters.vectorActionSize
      qualifiedName:
        CSharp: Unity.MLAgents.BrainParameters.vectorActionSize
        VB: Unity.MLAgents.BrainParameters.vectorActionSize
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: vectorActionSize
        path: ''
        startLine: 1580
      syntax:
        content:
          CSharp: public int vectorActionSize
          VB: Public vectorActionSize As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.BrainParameters.cameraResolutions
      commentId: F:Unity.MLAgents.BrainParameters.cameraResolutions
      language: CSharp
      name:
        CSharp: cameraResolutions
        VB: cameraResolutions
      nameWithType:
        CSharp: BrainParameters.cameraResolutions
        VB: BrainParameters.cameraResolutions
      qualifiedName:
        CSharp: Unity.MLAgents.BrainParameters.cameraResolutions
        VB: Unity.MLAgents.BrainParameters.cameraResolutions
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: cameraResolutions
        path: ''
        startLine: 1585
      syntax:
        content:
          CSharp: public resolution[] cameraResolutions
          VB: Public cameraResolutions As resolution()
        return:
          type: Unity.MLAgents.resolution[]
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.BrainParameters.vectorActionDescriptions
      commentId: F:Unity.MLAgents.BrainParameters.vectorActionDescriptions
      language: CSharp
      name:
        CSharp: vectorActionDescriptions
        VB: vectorActionDescriptions
      nameWithType:
        CSharp: BrainParameters.vectorActionDescriptions
        VB: BrainParameters.vectorActionDescriptions
      qualifiedName:
        CSharp: Unity.MLAgents.BrainParameters.vectorActionDescriptions
        VB: Unity.MLAgents.BrainParameters.vectorActionDescriptions
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: vectorActionDescriptions
        path: ''
        startLine: 1588
      syntax:
        content:
          CSharp: public string[] vectorActionDescriptions
          VB: Public vectorActionDescriptions As String()
        return:
          type: System.String[]
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.BrainParameters.vectorActionSpaceType
      commentId: F:Unity.MLAgents.BrainParameters.vectorActionSpaceType
      language: CSharp
      name:
        CSharp: vectorActionSpaceType
        VB: vectorActionSpaceType
      nameWithType:
        CSharp: BrainParameters.vectorActionSpaceType
        VB: BrainParameters.vectorActionSpaceType
      qualifiedName:
        CSharp: Unity.MLAgents.BrainParameters.vectorActionSpaceType
        VB: Unity.MLAgents.BrainParameters.vectorActionSpaceType
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: vectorActionSpaceType
        path: ''
        startLine: 1591
      syntax:
        content:
          CSharp: public SpaceType vectorActionSpaceType
          VB: Public vectorActionSpaceType As SpaceType
        return:
          type: Unity.MLAgents.SpaceType
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.BrainParameters.vectorObservationSpaceType
      commentId: F:Unity.MLAgents.BrainParameters.vectorObservationSpaceType
      language: CSharp
      name:
        CSharp: vectorObservationSpaceType
        VB: vectorObservationSpaceType
      nameWithType:
        CSharp: BrainParameters.vectorObservationSpaceType
        VB: BrainParameters.vectorObservationSpaceType
      qualifiedName:
        CSharp: Unity.MLAgents.BrainParameters.vectorObservationSpaceType
        VB: Unity.MLAgents.BrainParameters.vectorObservationSpaceType
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: vectorObservationSpaceType
        path: ''
        startLine: 1594
      syntax:
        content:
          CSharp: public SpaceType vectorObservationSpaceType
          VB: Public vectorObservationSpaceType As SpaceType
        return:
          type: Unity.MLAgents.SpaceType
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Unity.MLAgents.Brain
    commentId: T:Unity.MLAgents.Brain
    language: CSharp
    name:
      CSharp: Brain
      VB: Brain
    nameWithType:
      CSharp: Brain
      VB: Brain
    qualifiedName:
      CSharp: Unity.MLAgents.Brain
      VB: Unity.MLAgents.Brain
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Unity.MLAgents
    source:
      id: Brain
      path: ''
      startLine: 1598
    syntax:
      content:
        CSharp: 'public class Brain : MonoBehaviour'
        VB: >-
          Public Class Brain

              Inherits MonoBehaviour
    inheritance:
    - MonoBehaviour
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Unity.MLAgents.Brain.brainParameters
      commentId: F:Unity.MLAgents.Brain.brainParameters
      language: CSharp
      name:
        CSharp: brainParameters
        VB: brainParameters
      nameWithType:
        CSharp: Brain.brainParameters
        VB: Brain.brainParameters
      qualifiedName:
        CSharp: Unity.MLAgents.Brain.brainParameters
        VB: Unity.MLAgents.Brain.brainParameters
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: brainParameters
        path: ''
        startLine: 1616
      syntax:
        content:
          CSharp: public BrainParameters brainParameters
          VB: Public brainParameters As BrainParameters
        return:
          type: Unity.MLAgents.BrainParameters
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.Brain.brainType
      commentId: F:Unity.MLAgents.Brain.brainType
      language: CSharp
      name:
        CSharp: brainType
        VB: brainType
      nameWithType:
        CSharp: Brain.brainType
        VB: Brain.brainType
      qualifiedName:
        CSharp: Unity.MLAgents.Brain.brainType
        VB: Unity.MLAgents.Brain.brainType
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: brainType
        path: ''
        startLine: 1622
      syntax:
        content:
          CSharp: public BrainType brainType
          VB: Public brainType As BrainType
        return:
          type: Unity.MLAgents.BrainType
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.Brain.coreBrain
      commentId: F:Unity.MLAgents.Brain.coreBrain
      language: CSharp
      name:
        CSharp: coreBrain
        VB: coreBrain
      nameWithType:
        CSharp: Brain.coreBrain
        VB: Brain.coreBrain
      qualifiedName:
        CSharp: Unity.MLAgents.Brain.coreBrain
        VB: Unity.MLAgents.Brain.coreBrain
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: coreBrain
        path: ''
        startLine: 1632
      syntax:
        content:
          CSharp: public CoreBrain coreBrain
          VB: Public coreBrain As CoreBrain
        return:
          type: Unity.MLAgents.CoreBrain
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.Brain.UpdateCoreBrains
      commentId: M:Unity.MLAgents.Brain.UpdateCoreBrains
      language: CSharp
      name:
        CSharp: UpdateCoreBrains()
        VB: UpdateCoreBrains()
      nameWithType:
        CSharp: Brain.UpdateCoreBrains()
        VB: Brain.UpdateCoreBrains()
      qualifiedName:
        CSharp: Unity.MLAgents.Brain.UpdateCoreBrains()
        VB: Unity.MLAgents.Brain.UpdateCoreBrains()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: UpdateCoreBrains
        path: ''
        startLine: 1642
      example: []
      syntax:
        content:
          CSharp: public void UpdateCoreBrains()
          VB: Public Sub UpdateCoreBrains
      overload: Unity.MLAgents.Brain.UpdateCoreBrains*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.Brain.InitializeBrain(Unity.MLAgents.Academy,Unity.MLAgents.Communicator)
      commentId: M:Unity.MLAgents.Brain.InitializeBrain(Unity.MLAgents.Academy,Unity.MLAgents.Communicator)
      language: CSharp
      name:
        CSharp: InitializeBrain(Academy, Communicator)
        VB: InitializeBrain(Academy, Communicator)
      nameWithType:
        CSharp: Brain.InitializeBrain(Academy, Communicator)
        VB: Brain.InitializeBrain(Academy, Communicator)
      qualifiedName:
        CSharp: Unity.MLAgents.Brain.InitializeBrain(Unity.MLAgents.Academy, Unity.MLAgents.Communicator)
        VB: Unity.MLAgents.Brain.InitializeBrain(Unity.MLAgents.Academy, Unity.MLAgents.Communicator)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: InitializeBrain
        path: ''
        startLine: 1726
      example: []
      syntax:
        content:
          CSharp: public void InitializeBrain(Academy aca, Communicator communicator)
          VB: Public Sub InitializeBrain(aca As Academy, communicator As Communicator)
        parameters:
        - id: aca
          type: Unity.MLAgents.Academy
        - id: communicator
          type: Unity.MLAgents.Communicator
      overload: Unity.MLAgents.Brain.InitializeBrain*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.Brain.SendState(Unity.MLAgents.Agent,Unity.MLAgents.AgentInfo)
      commentId: M:Unity.MLAgents.Brain.SendState(Unity.MLAgents.Agent,Unity.MLAgents.AgentInfo)
      language: CSharp
      name:
        CSharp: SendState(Agent, AgentInfo)
        VB: SendState(Agent, AgentInfo)
      nameWithType:
        CSharp: Brain.SendState(Agent, AgentInfo)
        VB: Brain.SendState(Agent, AgentInfo)
      qualifiedName:
        CSharp: Unity.MLAgents.Brain.SendState(Unity.MLAgents.Agent, Unity.MLAgents.AgentInfo)
        VB: Unity.MLAgents.Brain.SendState(Unity.MLAgents.Agent, Unity.MLAgents.AgentInfo)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: SendState
        path: ''
        startLine: 1734
      syntax:
        content:
          CSharp: public void SendState(Agent agent, AgentInfo info)
          VB: Public Sub SendState(agent As Agent, info As AgentInfo)
        parameters:
        - id: agent
          type: Unity.MLAgents.Agent
        - id: info
          type: Unity.MLAgents.AgentInfo
      overload: Unity.MLAgents.Brain.SendState*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Unity.MLAgents.AcademyParameters
    commentId: T:Unity.MLAgents.AcademyParameters
    language: CSharp
    name:
      CSharp: AcademyParameters
      VB: AcademyParameters
    nameWithType:
      CSharp: AcademyParameters
      VB: AcademyParameters
    qualifiedName:
      CSharp: Unity.MLAgents.AcademyParameters
      VB: Unity.MLAgents.AcademyParameters
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: Unity.MLAgents
    source:
      id: AcademyParameters
      path: ''
      startLine: 1776
    example: []
    syntax:
      content:
        CSharp: public struct AcademyParameters
        VB: Public Structure AcademyParameters
    inheritedMembers:
    - System.ValueType.Equals(System.Object)
    - System.ValueType.GetHashCode
    - System.ValueType.ToString
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetType
    - System.Object.ReferenceEquals(System.Object,System.Object)
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: Unity.MLAgents.AcademyParameters.AcademyName
      commentId: F:Unity.MLAgents.AcademyParameters.AcademyName
      language: CSharp
      name:
        CSharp: AcademyName
        VB: AcademyName
      nameWithType:
        CSharp: AcademyParameters.AcademyName
        VB: AcademyParameters.AcademyName
      qualifiedName:
        CSharp: Unity.MLAgents.AcademyParameters.AcademyName
        VB: Unity.MLAgents.AcademyParameters.AcademyName
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: AcademyName
        path: ''
        startLine: 1780
      syntax:
        content:
          CSharp: public string AcademyName
          VB: Public AcademyName As String
        return:
          type: System.String
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.AcademyParameters.apiNumber
      commentId: F:Unity.MLAgents.AcademyParameters.apiNumber
      language: CSharp
      name:
        CSharp: apiNumber
        VB: apiNumber
      nameWithType:
        CSharp: AcademyParameters.apiNumber
        VB: AcademyParameters.apiNumber
      qualifiedName:
        CSharp: Unity.MLAgents.AcademyParameters.apiNumber
        VB: Unity.MLAgents.AcademyParameters.apiNumber
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: apiNumber
        path: ''
        startLine: 1783
      syntax:
        content:
          CSharp: public string apiNumber
          VB: Public apiNumber As String
        return:
          type: System.String
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.AcademyParameters.logPath
      commentId: F:Unity.MLAgents.AcademyParameters.logPath
      language: CSharp
      name:
        CSharp: logPath
        VB: logPath
      nameWithType:
        CSharp: AcademyParameters.logPath
        VB: AcademyParameters.logPath
      qualifiedName:
        CSharp: Unity.MLAgents.AcademyParameters.logPath
        VB: Unity.MLAgents.AcademyParameters.logPath
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: logPath
        path: ''
        startLine: 1786
      syntax:
        content:
          CSharp: public string logPath
          VB: Public logPath As String
        return:
          type: System.String
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.AcademyParameters.resetParameters
      commentId: F:Unity.MLAgents.AcademyParameters.resetParameters
      language: CSharp
      name:
        CSharp: resetParameters
        VB: resetParameters
      nameWithType:
        CSharp: AcademyParameters.resetParameters
        VB: AcademyParameters.resetParameters
      qualifiedName:
        CSharp: Unity.MLAgents.AcademyParameters.resetParameters
        VB: Unity.MLAgents.AcademyParameters.resetParameters
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: resetParameters
        path: ''
        startLine: 1789
      syntax:
        content:
          CSharp: public Dictionary<string, float> resetParameters
          VB: Public resetParameters As Dictionary(Of String, Single)
        return:
          type: System.Collections.Generic.Dictionary{System.String,System.Single}
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.AcademyParameters.brainNames
      commentId: F:Unity.MLAgents.AcademyParameters.brainNames
      language: CSharp
      name:
        CSharp: brainNames
        VB: brainNames
      nameWithType:
        CSharp: AcademyParameters.brainNames
        VB: AcademyParameters.brainNames
      qualifiedName:
        CSharp: Unity.MLAgents.AcademyParameters.brainNames
        VB: Unity.MLAgents.AcademyParameters.brainNames
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: brainNames
        path: ''
        startLine: 1792
      syntax:
        content:
          CSharp: public List<string> brainNames
          VB: Public brainNames As List(Of String)
        return:
          type: System.Collections.Generic.List{System.String}
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.AcademyParameters.brainParameters
      commentId: F:Unity.MLAgents.AcademyParameters.brainParameters
      language: CSharp
      name:
        CSharp: brainParameters
        VB: brainParameters
      nameWithType:
        CSharp: AcademyParameters.brainParameters
        VB: AcademyParameters.brainParameters
      qualifiedName:
        CSharp: Unity.MLAgents.AcademyParameters.brainParameters
        VB: Unity.MLAgents.AcademyParameters.brainParameters
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: brainParameters
        path: ''
        startLine: 1795
      syntax:
        content:
          CSharp: public List<BrainParameters> brainParameters
          VB: Public brainParameters As List(Of BrainParameters)
        return:
          type: System.Collections.Generic.List{Unity.MLAgents.BrainParameters}
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.AcademyParameters.externalBrainNames
      commentId: F:Unity.MLAgents.AcademyParameters.externalBrainNames
      language: CSharp
      name:
        CSharp: externalBrainNames
        VB: externalBrainNames
      nameWithType:
        CSharp: AcademyParameters.externalBrainNames
        VB: AcademyParameters.externalBrainNames
      qualifiedName:
        CSharp: Unity.MLAgents.AcademyParameters.externalBrainNames
        VB: Unity.MLAgents.AcademyParameters.externalBrainNames
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: externalBrainNames
        path: ''
        startLine: 1798
      syntax:
        content:
          CSharp: public List<string> externalBrainNames
          VB: Public externalBrainNames As List(Of String)
        return:
          type: System.Collections.Generic.List{System.String}
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Unity.MLAgents.ExternalCommand
    commentId: T:Unity.MLAgents.ExternalCommand
    language: CSharp
    name:
      CSharp: ExternalCommand
      VB: ExternalCommand
    nameWithType:
      CSharp: ExternalCommand
      VB: ExternalCommand
    qualifiedName:
      CSharp: Unity.MLAgents.ExternalCommand
      VB: Unity.MLAgents.ExternalCommand
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: Unity.MLAgents
    source:
      id: ExternalCommand
      path: ''
      startLine: 1801
    syntax:
      content:
        CSharp: public enum ExternalCommand
        VB: Public Enum ExternalCommand
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: Unity.MLAgents.ExternalCommand.STEP
      commentId: F:Unity.MLAgents.ExternalCommand.STEP
      language: CSharp
      name:
        CSharp: STEP
        VB: STEP
      nameWithType:
        CSharp: ExternalCommand.STEP
        VB: ExternalCommand.STEP
      qualifiedName:
        CSharp: Unity.MLAgents.ExternalCommand.STEP
        VB: Unity.MLAgents.ExternalCommand.STEP
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: STEP
        path: ''
        startLine: 1803
      syntax:
        content:
          CSharp: STEP = 0
          VB: STEP = 0
        return:
          type: Unity.MLAgents.ExternalCommand
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Unity.MLAgents.ExternalCommand.RESET
      commentId: F:Unity.MLAgents.ExternalCommand.RESET
      language: CSharp
      name:
        CSharp: RESET
        VB: RESET
      nameWithType:
        CSharp: ExternalCommand.RESET
        VB: ExternalCommand.RESET
      qualifiedName:
        CSharp: Unity.MLAgents.ExternalCommand.RESET
        VB: Unity.MLAgents.ExternalCommand.RESET
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: RESET
        path: ''
        startLine: 1804
      syntax:
        content:
          CSharp: RESET = 1
          VB: RESET = 1
        return:
          type: Unity.MLAgents.ExternalCommand
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Unity.MLAgents.ExternalCommand.QUIT
      commentId: F:Unity.MLAgents.ExternalCommand.QUIT
      language: CSharp
      name:
        CSharp: QUIT
        VB: QUIT
      nameWithType:
        CSharp: ExternalCommand.QUIT
        VB: ExternalCommand.QUIT
      qualifiedName:
        CSharp: Unity.MLAgents.ExternalCommand.QUIT
        VB: Unity.MLAgents.ExternalCommand.QUIT
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: QUIT
        path: ''
        startLine: 1805
      syntax:
        content:
          CSharp: QUIT = 2
          VB: QUIT = 2
        return:
          type: Unity.MLAgents.ExternalCommand
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: Unity.MLAgents.Communicator
    commentId: T:Unity.MLAgents.Communicator
    language: CSharp
    name:
      CSharp: Communicator
      VB: Communicator
    nameWithType:
      CSharp: Communicator
      VB: Communicator
    qualifiedName:
      CSharp: Unity.MLAgents.Communicator
      VB: Unity.MLAgents.Communicator
    type: Interface
    assemblies:
    - cs.temp.dll
    namespace: Unity.MLAgents
    source:
      id: Communicator
      path: ''
      startLine: 1813
    example: []
    syntax:
      content:
        CSharp: public interface Communicator
        VB: Public Interface Communicator
    modifiers:
      CSharp:
      - public
      - interface
      VB:
      - Public
      - Interface
    items:
    - id: Unity.MLAgents.Communicator.SubscribeBrain(Unity.MLAgents.Brain)
      commentId: M:Unity.MLAgents.Communicator.SubscribeBrain(Unity.MLAgents.Brain)
      language: CSharp
      name:
        CSharp: SubscribeBrain(Brain)
        VB: SubscribeBrain(Brain)
      nameWithType:
        CSharp: Communicator.SubscribeBrain(Brain)
        VB: Communicator.SubscribeBrain(Brain)
      qualifiedName:
        CSharp: Unity.MLAgents.Communicator.SubscribeBrain(Unity.MLAgents.Brain)
        VB: Unity.MLAgents.Communicator.SubscribeBrain(Unity.MLAgents.Brain)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: SubscribeBrain
        path: ''
        startLine: 1818
      example: []
      syntax:
        content:
          CSharp: void SubscribeBrain(Brain brain)
          VB: Sub SubscribeBrain(brain As Brain)
        parameters:
        - id: brain
          type: Unity.MLAgents.Brain
      overload: Unity.MLAgents.Communicator.SubscribeBrain*
      modifiers:
        CSharp: []
        VB: []
    - id: Unity.MLAgents.Communicator.CommunicatorHandShake
      commentId: M:Unity.MLAgents.Communicator.CommunicatorHandShake
      language: CSharp
      name:
        CSharp: CommunicatorHandShake()
        VB: CommunicatorHandShake()
      nameWithType:
        CSharp: Communicator.CommunicatorHandShake()
        VB: Communicator.CommunicatorHandShake()
      qualifiedName:
        CSharp: Unity.MLAgents.Communicator.CommunicatorHandShake()
        VB: Unity.MLAgents.Communicator.CommunicatorHandShake()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: CommunicatorHandShake
        path: ''
        startLine: 1821
      example: []
      syntax:
        content:
          CSharp: bool CommunicatorHandShake()
          VB: Function CommunicatorHandShake As Boolean
        return:
          type: System.Boolean
      overload: Unity.MLAgents.Communicator.CommunicatorHandShake*
      modifiers:
        CSharp: []
        VB: []
    - id: Unity.MLAgents.Communicator.InitializeCommunicator
      commentId: M:Unity.MLAgents.Communicator.InitializeCommunicator
      language: CSharp
      name:
        CSharp: InitializeCommunicator()
        VB: InitializeCommunicator()
      nameWithType:
        CSharp: Communicator.InitializeCommunicator()
        VB: Communicator.InitializeCommunicator()
      qualifiedName:
        CSharp: Unity.MLAgents.Communicator.InitializeCommunicator()
        VB: Unity.MLAgents.Communicator.InitializeCommunicator()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: InitializeCommunicator
        path: ''
        startLine: 1824
      example: []
      syntax:
        content:
          CSharp: void InitializeCommunicator()
          VB: Sub InitializeCommunicator
      overload: Unity.MLAgents.Communicator.InitializeCommunicator*
      modifiers:
        CSharp: []
        VB: []
    - id: Unity.MLAgents.Communicator.UpdateActions
      commentId: M:Unity.MLAgents.Communicator.UpdateActions
      language: CSharp
      name:
        CSharp: UpdateActions()
        VB: UpdateActions()
      nameWithType:
        CSharp: Communicator.UpdateActions()
        VB: Communicator.UpdateActions()
      qualifiedName:
        CSharp: Unity.MLAgents.Communicator.UpdateActions()
        VB: Unity.MLAgents.Communicator.UpdateActions()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: UpdateActions
        path: ''
        startLine: 1828
      example: []
      syntax:
        content:
          CSharp: void UpdateActions()
          VB: Sub UpdateActions
      overload: Unity.MLAgents.Communicator.UpdateActions*
      modifiers:
        CSharp: []
        VB: []
    - id: Unity.MLAgents.Communicator.GetCommand
      commentId: M:Unity.MLAgents.Communicator.GetCommand
      language: CSharp
      name:
        CSharp: GetCommand()
        VB: GetCommand()
      nameWithType:
        CSharp: Communicator.GetCommand()
        VB: Communicator.GetCommand()
      qualifiedName:
        CSharp: Unity.MLAgents.Communicator.GetCommand()
        VB: Unity.MLAgents.Communicator.GetCommand()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: GetCommand
        path: ''
        startLine: 1832
      example: []
      syntax:
        content:
          CSharp: ExternalCommand GetCommand()
          VB: Function GetCommand As ExternalCommand
        return:
          type: Unity.MLAgents.ExternalCommand
      overload: Unity.MLAgents.Communicator.GetCommand*
      modifiers:
        CSharp: []
        VB: []
    - id: Unity.MLAgents.Communicator.UpdateCommand
      commentId: M:Unity.MLAgents.Communicator.UpdateCommand
      language: CSharp
      name:
        CSharp: UpdateCommand()
        VB: UpdateCommand()
      nameWithType:
        CSharp: Communicator.UpdateCommand()
        VB: Communicator.UpdateCommand()
      qualifiedName:
        CSharp: Unity.MLAgents.Communicator.UpdateCommand()
        VB: Unity.MLAgents.Communicator.UpdateCommand()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: UpdateCommand
        path: ''
        startLine: 1834
      syntax:
        content:
          CSharp: void UpdateCommand()
          VB: Sub UpdateCommand
      overload: Unity.MLAgents.Communicator.UpdateCommand*
      modifiers:
        CSharp: []
        VB: []
    - id: Unity.MLAgents.Communicator.SetCommand(Unity.MLAgents.ExternalCommand)
      commentId: M:Unity.MLAgents.Communicator.SetCommand(Unity.MLAgents.ExternalCommand)
      language: CSharp
      name:
        CSharp: SetCommand(ExternalCommand)
        VB: SetCommand(ExternalCommand)
      nameWithType:
        CSharp: Communicator.SetCommand(ExternalCommand)
        VB: Communicator.SetCommand(ExternalCommand)
      qualifiedName:
        CSharp: Unity.MLAgents.Communicator.SetCommand(Unity.MLAgents.ExternalCommand)
        VB: Unity.MLAgents.Communicator.SetCommand(Unity.MLAgents.ExternalCommand)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: SetCommand
        path: ''
        startLine: 1835
      syntax:
        content:
          CSharp: void SetCommand(ExternalCommand c)
          VB: Sub SetCommand(c As ExternalCommand)
        parameters:
        - id: c
          type: Unity.MLAgents.ExternalCommand
      overload: Unity.MLAgents.Communicator.SetCommand*
      modifiers:
        CSharp: []
        VB: []
    - id: Unity.MLAgents.Communicator.GetResetParameters
      commentId: M:Unity.MLAgents.Communicator.GetResetParameters
      language: CSharp
      name:
        CSharp: GetResetParameters()
        VB: GetResetParameters()
      nameWithType:
        CSharp: Communicator.GetResetParameters()
        VB: Communicator.GetResetParameters()
      qualifiedName:
        CSharp: Unity.MLAgents.Communicator.GetResetParameters()
        VB: Unity.MLAgents.Communicator.GetResetParameters()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: GetResetParameters
        path: ''
        startLine: 1839
      example: []
      syntax:
        content:
          CSharp: Dictionary<string, float> GetResetParameters()
          VB: Function GetResetParameters As Dictionary(Of String, Single)
        return:
          type: System.Collections.Generic.Dictionary{System.String,System.Single}
      overload: Unity.MLAgents.Communicator.GetResetParameters*
      modifiers:
        CSharp: []
        VB: []
    - id: Unity.MLAgents.Communicator.GetHasTried
      commentId: M:Unity.MLAgents.Communicator.GetHasTried
      language: CSharp
      name:
        CSharp: GetHasTried()
        VB: GetHasTried()
      nameWithType:
        CSharp: Communicator.GetHasTried()
        VB: Communicator.GetHasTried()
      qualifiedName:
        CSharp: Unity.MLAgents.Communicator.GetHasTried()
        VB: Unity.MLAgents.Communicator.GetHasTried()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: GetHasTried
        path: ''
        startLine: 1843
      syntax:
        content:
          CSharp: Dictionary<string, bool> GetHasTried()
          VB: Function GetHasTried As Dictionary(Of String, Boolean)
        return:
          type: System.Collections.Generic.Dictionary{System.String,System.Boolean}
      overload: Unity.MLAgents.Communicator.GetHasTried*
      modifiers:
        CSharp: []
        VB: []
    - id: Unity.MLAgents.Communicator.GetSent
      commentId: M:Unity.MLAgents.Communicator.GetSent
      language: CSharp
      name:
        CSharp: GetSent()
        VB: GetSent()
      nameWithType:
        CSharp: Communicator.GetSent()
        VB: Communicator.GetSent()
      qualifiedName:
        CSharp: Unity.MLAgents.Communicator.GetSent()
        VB: Unity.MLAgents.Communicator.GetSent()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: GetSent
        path: ''
        startLine: 1844
      syntax:
        content:
          CSharp: Dictionary<string, bool> GetSent()
          VB: Function GetSent As Dictionary(Of String, Boolean)
        return:
          type: System.Collections.Generic.Dictionary{System.String,System.Boolean}
      overload: Unity.MLAgents.Communicator.GetSent*
      modifiers:
        CSharp: []
        VB: []
  - id: Unity.MLAgents.CoreBrain
    commentId: T:Unity.MLAgents.CoreBrain
    language: CSharp
    name:
      CSharp: CoreBrain
      VB: CoreBrain
    nameWithType:
      CSharp: CoreBrain
      VB: CoreBrain
    qualifiedName:
      CSharp: Unity.MLAgents.CoreBrain
      VB: Unity.MLAgents.CoreBrain
    type: Interface
    assemblies:
    - cs.temp.dll
    namespace: Unity.MLAgents
    source:
      id: CoreBrain
      path: ''
      startLine: 1856
    example: []
    syntax:
      content:
        CSharp: public interface CoreBrain
        VB: Public Interface CoreBrain
    modifiers:
      CSharp:
      - public
      - interface
      VB:
      - Public
      - Interface
    items:
    - id: Unity.MLAgents.CoreBrain.SetBrain(Unity.MLAgents.Brain)
      commentId: M:Unity.MLAgents.CoreBrain.SetBrain(Unity.MLAgents.Brain)
      language: CSharp
      name:
        CSharp: SetBrain(Brain)
        VB: SetBrain(Brain)
      nameWithType:
        CSharp: CoreBrain.SetBrain(Brain)
        VB: CoreBrain.SetBrain(Brain)
      qualifiedName:
        CSharp: Unity.MLAgents.CoreBrain.SetBrain(Unity.MLAgents.Brain)
        VB: Unity.MLAgents.CoreBrain.SetBrain(Unity.MLAgents.Brain)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: SetBrain
        path: ''
        startLine: 1860
      example: []
      syntax:
        content:
          CSharp: void SetBrain(Brain b)
          VB: Sub SetBrain(b As Brain)
        parameters:
        - id: b
          type: Unity.MLAgents.Brain
      overload: Unity.MLAgents.CoreBrain.SetBrain*
      modifiers:
        CSharp: []
        VB: []
    - id: Unity.MLAgents.CoreBrain.InitializeCoreBrain(Unity.MLAgents.Communicator)
      commentId: M:Unity.MLAgents.CoreBrain.InitializeCoreBrain(Unity.MLAgents.Communicator)
      language: CSharp
      name:
        CSharp: InitializeCoreBrain(Communicator)
        VB: InitializeCoreBrain(Communicator)
      nameWithType:
        CSharp: CoreBrain.InitializeCoreBrain(Communicator)
        VB: CoreBrain.InitializeCoreBrain(Communicator)
      qualifiedName:
        CSharp: Unity.MLAgents.CoreBrain.InitializeCoreBrain(Unity.MLAgents.Communicator)
        VB: Unity.MLAgents.CoreBrain.InitializeCoreBrain(Unity.MLAgents.Communicator)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: InitializeCoreBrain
        path: ''
        startLine: 1862
      example: []
      syntax:
        content:
          CSharp: void InitializeCoreBrain(Communicator communicator)
          VB: Sub InitializeCoreBrain(communicator As Communicator)
        parameters:
        - id: communicator
          type: Unity.MLAgents.Communicator
      overload: Unity.MLAgents.CoreBrain.InitializeCoreBrain*
      modifiers:
        CSharp: []
        VB: []
    - id: Unity.MLAgents.CoreBrain.DecideAction(System.Collections.Generic.Dictionary{Unity.MLAgents.Agent,Unity.MLAgents.AgentInfo})
      commentId: M:Unity.MLAgents.CoreBrain.DecideAction(System.Collections.Generic.Dictionary{Unity.MLAgents.Agent,Unity.MLAgents.AgentInfo})
      language: CSharp
      name:
        CSharp: DecideAction(Dictionary<Agent, AgentInfo>)
        VB: DecideAction(Dictionary(Of Agent, AgentInfo))
      nameWithType:
        CSharp: CoreBrain.DecideAction(Dictionary<Agent, AgentInfo>)
        VB: CoreBrain.DecideAction(Dictionary(Of Agent, AgentInfo))
      qualifiedName:
        CSharp: Unity.MLAgents.CoreBrain.DecideAction(System.Collections.Generic.Dictionary<Unity.MLAgents.Agent, Unity.MLAgents.AgentInfo>)
        VB: Unity.MLAgents.CoreBrain.DecideAction(System.Collections.Generic.Dictionary(Of Unity.MLAgents.Agent, Unity.MLAgents.AgentInfo))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: DecideAction
        path: ''
        startLine: 1864
      example: []
      syntax:
        content:
          CSharp: void DecideAction(Dictionary<Agent, AgentInfo> agentInfo)
          VB: Sub DecideAction(agentInfo As Dictionary(Of Agent, AgentInfo))
        parameters:
        - id: agentInfo
          type: System.Collections.Generic.Dictionary{Unity.MLAgents.Agent,Unity.MLAgents.AgentInfo}
      overload: Unity.MLAgents.CoreBrain.DecideAction*
      modifiers:
        CSharp: []
        VB: []
    - id: Unity.MLAgents.CoreBrain.OnInspector
      commentId: M:Unity.MLAgents.CoreBrain.OnInspector
      language: CSharp
      name:
        CSharp: OnInspector()
        VB: OnInspector()
      nameWithType:
        CSharp: CoreBrain.OnInspector()
        VB: CoreBrain.OnInspector()
      qualifiedName:
        CSharp: Unity.MLAgents.CoreBrain.OnInspector()
        VB: Unity.MLAgents.CoreBrain.OnInspector()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: OnInspector
        path: ''
        startLine: 1866
      example: []
      syntax:
        content:
          CSharp: void OnInspector()
          VB: Sub OnInspector
      overload: Unity.MLAgents.CoreBrain.OnInspector*
      modifiers:
        CSharp: []
        VB: []
  - id: Unity.MLAgents.CoreBrainExternal
    commentId: T:Unity.MLAgents.CoreBrainExternal
    language: CSharp
    name:
      CSharp: CoreBrainExternal
      VB: CoreBrainExternal
    nameWithType:
      CSharp: CoreBrainExternal
      VB: CoreBrainExternal
    qualifiedName:
      CSharp: Unity.MLAgents.CoreBrainExternal
      VB: Unity.MLAgents.CoreBrainExternal
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Unity.MLAgents
    source:
      id: CoreBrainExternal
      path: ''
      startLine: 1876
    example: []
    syntax:
      content:
        CSharp: 'public class CoreBrainExternal : ScriptableObject, CoreBrain'
        VB: >-
          Public Class CoreBrainExternal

              Inherits ScriptableObject

              Implements CoreBrain
    inheritance:
    - ScriptableObject
    implements:
    - Unity.MLAgents.CoreBrain
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Unity.MLAgents.CoreBrainExternal.brain
      commentId: F:Unity.MLAgents.CoreBrainExternal.brain
      language: CSharp
      name:
        CSharp: brain
        VB: brain
      nameWithType:
        CSharp: CoreBrainExternal.brain
        VB: CoreBrainExternal.brain
      qualifiedName:
        CSharp: Unity.MLAgents.CoreBrainExternal.brain
        VB: Unity.MLAgents.CoreBrainExternal.brain
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: brain
        path: ''
        startLine: 1879
      syntax:
        content:
          CSharp: public Brain brain
          VB: Public brain As Brain
        return:
          type: Unity.MLAgents.Brain
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.CoreBrainExternal.SetBrain(Unity.MLAgents.Brain)
      commentId: M:Unity.MLAgents.CoreBrainExternal.SetBrain(Unity.MLAgents.Brain)
      language: CSharp
      name:
        CSharp: SetBrain(Brain)
        VB: SetBrain(Brain)
      nameWithType:
        CSharp: CoreBrainExternal.SetBrain(Brain)
        VB: CoreBrainExternal.SetBrain(Brain)
      qualifiedName:
        CSharp: Unity.MLAgents.CoreBrainExternal.SetBrain(Unity.MLAgents.Brain)
        VB: Unity.MLAgents.CoreBrainExternal.SetBrain(Unity.MLAgents.Brain)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: SetBrain
        path: ''
        startLine: 1884
      example: []
      syntax:
        content:
          CSharp: public void SetBrain(Brain b)
          VB: Public Sub SetBrain(b As Brain)
        parameters:
        - id: b
          type: Unity.MLAgents.Brain
      overload: Unity.MLAgents.CoreBrainExternal.SetBrain*
      implements:
      - Unity.MLAgents.CoreBrain.SetBrain(Unity.MLAgents.Brain)
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.CoreBrainExternal.InitializeCoreBrain(Unity.MLAgents.Communicator)
      commentId: M:Unity.MLAgents.CoreBrainExternal.InitializeCoreBrain(Unity.MLAgents.Communicator)
      language: CSharp
      name:
        CSharp: InitializeCoreBrain(Communicator)
        VB: InitializeCoreBrain(Communicator)
      nameWithType:
        CSharp: CoreBrainExternal.InitializeCoreBrain(Communicator)
        VB: CoreBrainExternal.InitializeCoreBrain(Communicator)
      qualifiedName:
        CSharp: Unity.MLAgents.CoreBrainExternal.InitializeCoreBrain(Unity.MLAgents.Communicator)
        VB: Unity.MLAgents.CoreBrainExternal.InitializeCoreBrain(Unity.MLAgents.Communicator)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: InitializeCoreBrain
        path: ''
        startLine: 1891
      example: []
      syntax:
        content:
          CSharp: public void InitializeCoreBrain(Communicator communicator)
          VB: Public Sub InitializeCoreBrain(communicator As Communicator)
        parameters:
        - id: communicator
          type: Unity.MLAgents.Communicator
      overload: Unity.MLAgents.CoreBrainExternal.InitializeCoreBrain*
      implements:
      - Unity.MLAgents.CoreBrain.InitializeCoreBrain(Unity.MLAgents.Communicator)
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.CoreBrainExternal.DecideAction(System.Collections.Generic.Dictionary{Unity.MLAgents.Agent,Unity.MLAgents.AgentInfo})
      commentId: M:Unity.MLAgents.CoreBrainExternal.DecideAction(System.Collections.Generic.Dictionary{Unity.MLAgents.Agent,Unity.MLAgents.AgentInfo})
      language: CSharp
      name:
        CSharp: DecideAction(Dictionary<Agent, AgentInfo>)
        VB: DecideAction(Dictionary(Of Agent, AgentInfo))
      nameWithType:
        CSharp: CoreBrainExternal.DecideAction(Dictionary<Agent, AgentInfo>)
        VB: CoreBrainExternal.DecideAction(Dictionary(Of Agent, AgentInfo))
      qualifiedName:
        CSharp: Unity.MLAgents.CoreBrainExternal.DecideAction(System.Collections.Generic.Dictionary<Unity.MLAgents.Agent, Unity.MLAgents.AgentInfo>)
        VB: Unity.MLAgents.CoreBrainExternal.DecideAction(System.Collections.Generic.Dictionary(Of Unity.MLAgents.Agent, Unity.MLAgents.AgentInfo))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: DecideAction
        path: ''
        startLine: 1911
      example: []
      syntax:
        content:
          CSharp: public void DecideAction(Dictionary<Agent, AgentInfo> agentInfo)
          VB: Public Sub DecideAction(agentInfo As Dictionary(Of Agent, AgentInfo))
        parameters:
        - id: agentInfo
          type: System.Collections.Generic.Dictionary{Unity.MLAgents.Agent,Unity.MLAgents.AgentInfo}
      overload: Unity.MLAgents.CoreBrainExternal.DecideAction*
      implements:
      - Unity.MLAgents.CoreBrain.DecideAction(System.Collections.Generic.Dictionary{Unity.MLAgents.Agent,Unity.MLAgents.AgentInfo})
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.CoreBrainExternal.OnInspector
      commentId: M:Unity.MLAgents.CoreBrainExternal.OnInspector
      language: CSharp
      name:
        CSharp: OnInspector()
        VB: OnInspector()
      nameWithType:
        CSharp: CoreBrainExternal.OnInspector()
        VB: CoreBrainExternal.OnInspector()
      qualifiedName:
        CSharp: Unity.MLAgents.CoreBrainExternal.OnInspector()
        VB: Unity.MLAgents.CoreBrainExternal.OnInspector()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: OnInspector
        path: ''
        startLine: 1921
      example: []
      syntax:
        content:
          CSharp: public void OnInspector()
          VB: Public Sub OnInspector
      overload: Unity.MLAgents.CoreBrainExternal.OnInspector*
      implements:
      - Unity.MLAgents.CoreBrain.OnInspector
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Unity.MLAgents.CoreBrainHeuristic
    commentId: T:Unity.MLAgents.CoreBrainHeuristic
    language: CSharp
    name:
      CSharp: CoreBrainHeuristic
      VB: CoreBrainHeuristic
    nameWithType:
      CSharp: CoreBrainHeuristic
      VB: CoreBrainHeuristic
    qualifiedName:
      CSharp: Unity.MLAgents.CoreBrainHeuristic
      VB: Unity.MLAgents.CoreBrainHeuristic
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Unity.MLAgents
    source:
      id: CoreBrainHeuristic
      path: ''
      startLine: 1937
    example: []
    syntax:
      content:
        CSharp: 'public class CoreBrainHeuristic : ScriptableObject, CoreBrain'
        VB: >-
          Public Class CoreBrainHeuristic

              Inherits ScriptableObject

              Implements CoreBrain
    inheritance:
    - ScriptableObject
    implements:
    - Unity.MLAgents.CoreBrain
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Unity.MLAgents.CoreBrainHeuristic.brain
      commentId: F:Unity.MLAgents.CoreBrainHeuristic.brain
      language: CSharp
      name:
        CSharp: brain
        VB: brain
      nameWithType:
        CSharp: CoreBrainHeuristic.brain
        VB: CoreBrainHeuristic.brain
      qualifiedName:
        CSharp: Unity.MLAgents.CoreBrainHeuristic.brain
        VB: Unity.MLAgents.CoreBrainHeuristic.brain
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: brain
        path: ''
        startLine: 1943
      syntax:
        content:
          CSharp: public Brain brain
          VB: Public brain As Brain
        return:
          type: Unity.MLAgents.Brain
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.CoreBrainHeuristic.decision
      commentId: F:Unity.MLAgents.CoreBrainHeuristic.decision
      language: CSharp
      name:
        CSharp: decision
        VB: decision
      nameWithType:
        CSharp: CoreBrainHeuristic.decision
        VB: CoreBrainHeuristic.decision
      qualifiedName:
        CSharp: Unity.MLAgents.CoreBrainHeuristic.decision
        VB: Unity.MLAgents.CoreBrainHeuristic.decision
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: decision
        path: ''
        startLine: 1948
      syntax:
        content:
          CSharp: public Decision decision
          VB: Public decision As Decision
        return:
          type: Unity.MLAgents.Decision
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.CoreBrainHeuristic.SetBrain(Unity.MLAgents.Brain)
      commentId: M:Unity.MLAgents.CoreBrainHeuristic.SetBrain(Unity.MLAgents.Brain)
      language: CSharp
      name:
        CSharp: SetBrain(Brain)
        VB: SetBrain(Brain)
      nameWithType:
        CSharp: CoreBrainHeuristic.SetBrain(Brain)
        VB: CoreBrainHeuristic.SetBrain(Brain)
      qualifiedName:
        CSharp: Unity.MLAgents.CoreBrainHeuristic.SetBrain(Unity.MLAgents.Brain)
        VB: Unity.MLAgents.CoreBrainHeuristic.SetBrain(Unity.MLAgents.Brain)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: SetBrain
        path: ''
        startLine: 1951
      example: []
      syntax:
        content:
          CSharp: public void SetBrain(Brain b)
          VB: Public Sub SetBrain(b As Brain)
        parameters:
        - id: b
          type: Unity.MLAgents.Brain
      overload: Unity.MLAgents.CoreBrainHeuristic.SetBrain*
      implements:
      - Unity.MLAgents.CoreBrain.SetBrain(Unity.MLAgents.Brain)
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.CoreBrainHeuristic.InitializeCoreBrain(Unity.MLAgents.Communicator)
      commentId: M:Unity.MLAgents.CoreBrainHeuristic.InitializeCoreBrain(Unity.MLAgents.Communicator)
      language: CSharp
      name:
        CSharp: InitializeCoreBrain(Communicator)
        VB: InitializeCoreBrain(Communicator)
      nameWithType:
        CSharp: CoreBrainHeuristic.InitializeCoreBrain(Communicator)
        VB: CoreBrainHeuristic.InitializeCoreBrain(Communicator)
      qualifiedName:
        CSharp: Unity.MLAgents.CoreBrainHeuristic.InitializeCoreBrain(Unity.MLAgents.Communicator)
        VB: Unity.MLAgents.CoreBrainHeuristic.InitializeCoreBrain(Unity.MLAgents.Communicator)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: InitializeCoreBrain
        path: ''
        startLine: 1957
      example: []
      syntax:
        content:
          CSharp: public void InitializeCoreBrain(Communicator communicator)
          VB: Public Sub InitializeCoreBrain(communicator As Communicator)
        parameters:
        - id: communicator
          type: Unity.MLAgents.Communicator
      overload: Unity.MLAgents.CoreBrainHeuristic.InitializeCoreBrain*
      implements:
      - Unity.MLAgents.CoreBrain.InitializeCoreBrain(Unity.MLAgents.Communicator)
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.CoreBrainHeuristic.DecideAction(System.Collections.Generic.Dictionary{Unity.MLAgents.Agent,Unity.MLAgents.AgentInfo})
      commentId: M:Unity.MLAgents.CoreBrainHeuristic.DecideAction(System.Collections.Generic.Dictionary{Unity.MLAgents.Agent,Unity.MLAgents.AgentInfo})
      language: CSharp
      name:
        CSharp: DecideAction(Dictionary<Agent, AgentInfo>)
        VB: DecideAction(Dictionary(Of Agent, AgentInfo))
      nameWithType:
        CSharp: CoreBrainHeuristic.DecideAction(Dictionary<Agent, AgentInfo>)
        VB: CoreBrainHeuristic.DecideAction(Dictionary(Of Agent, AgentInfo))
      qualifiedName:
        CSharp: Unity.MLAgents.CoreBrainHeuristic.DecideAction(System.Collections.Generic.Dictionary<Unity.MLAgents.Agent, Unity.MLAgents.AgentInfo>)
        VB: Unity.MLAgents.CoreBrainHeuristic.DecideAction(System.Collections.Generic.Dictionary(Of Unity.MLAgents.Agent, Unity.MLAgents.AgentInfo))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: DecideAction
        path: ''
        startLine: 1974
      example: []
      syntax:
        content:
          CSharp: public void DecideAction(Dictionary<Agent, AgentInfo> agentInfo)
          VB: Public Sub DecideAction(agentInfo As Dictionary(Of Agent, AgentInfo))
        parameters:
        - id: agentInfo
          type: System.Collections.Generic.Dictionary{Unity.MLAgents.Agent,Unity.MLAgents.AgentInfo}
      overload: Unity.MLAgents.CoreBrainHeuristic.DecideAction*
      implements:
      - Unity.MLAgents.CoreBrain.DecideAction(System.Collections.Generic.Dictionary{Unity.MLAgents.Agent,Unity.MLAgents.AgentInfo})
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.CoreBrainHeuristic.OnInspector
      commentId: M:Unity.MLAgents.CoreBrainHeuristic.OnInspector
      language: CSharp
      name:
        CSharp: OnInspector()
        VB: OnInspector()
      nameWithType:
        CSharp: CoreBrainHeuristic.OnInspector()
        VB: CoreBrainHeuristic.OnInspector()
      qualifiedName:
        CSharp: Unity.MLAgents.CoreBrainHeuristic.OnInspector()
        VB: Unity.MLAgents.CoreBrainHeuristic.OnInspector()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: OnInspector
        path: ''
        startLine: 2009
      example: []
      syntax:
        content:
          CSharp: public void OnInspector()
          VB: Public Sub OnInspector
      overload: Unity.MLAgents.CoreBrainHeuristic.OnInspector*
      implements:
      - Unity.MLAgents.CoreBrain.OnInspector
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Unity.MLAgents.CoreBrainInternal
    commentId: T:Unity.MLAgents.CoreBrainInternal
    language: CSharp
    name:
      CSharp: CoreBrainInternal
      VB: CoreBrainInternal
    nameWithType:
      CSharp: CoreBrainInternal
      VB: CoreBrainInternal
    qualifiedName:
      CSharp: Unity.MLAgents.CoreBrainInternal
      VB: Unity.MLAgents.CoreBrainInternal
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Unity.MLAgents
    source:
      id: CoreBrainInternal
      path: ''
      startLine: 2040
    example: []
    syntax:
      content:
        CSharp: 'public class CoreBrainInternal : ScriptableObject, CoreBrain'
        VB: >-
          Public Class CoreBrainInternal

              Inherits ScriptableObject

              Implements CoreBrain
    inheritance:
    - ScriptableObject
    implements:
    - Unity.MLAgents.CoreBrain
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Unity.MLAgents.CoreBrainInternal.graphModel
      commentId: F:Unity.MLAgents.CoreBrainInternal.graphModel
      language: CSharp
      name:
        CSharp: graphModel
        VB: graphModel
      nameWithType:
        CSharp: CoreBrainInternal.graphModel
        VB: CoreBrainInternal.graphModel
      qualifiedName:
        CSharp: Unity.MLAgents.CoreBrainInternal.graphModel
        VB: Unity.MLAgents.CoreBrainInternal.graphModel
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: graphModel
        path: ''
        startLine: 2071
      syntax:
        content:
          CSharp: public TextAsset graphModel
          VB: Public graphModel As TextAsset
        return:
          type: TextAsset
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.CoreBrainInternal.graphScope
      commentId: F:Unity.MLAgents.CoreBrainInternal.graphScope
      language: CSharp
      name:
        CSharp: graphScope
        VB: graphScope
      nameWithType:
        CSharp: CoreBrainInternal.graphScope
        VB: CoreBrainInternal.graphScope
      qualifiedName:
        CSharp: Unity.MLAgents.CoreBrainInternal.graphScope
        VB: Unity.MLAgents.CoreBrainInternal.graphScope
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: graphScope
        path: ''
        startLine: 2074
      example: []
      syntax:
        content:
          CSharp: public string graphScope
          VB: Public graphScope As String
        return:
          type: System.String
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.CoreBrainInternal.BatchSizePlaceholderName
      commentId: F:Unity.MLAgents.CoreBrainInternal.BatchSizePlaceholderName
      language: CSharp
      name:
        CSharp: BatchSizePlaceholderName
        VB: BatchSizePlaceholderName
      nameWithType:
        CSharp: CoreBrainInternal.BatchSizePlaceholderName
        VB: CoreBrainInternal.BatchSizePlaceholderName
      qualifiedName:
        CSharp: Unity.MLAgents.CoreBrainInternal.BatchSizePlaceholderName
        VB: Unity.MLAgents.CoreBrainInternal.BatchSizePlaceholderName
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: BatchSizePlaceholderName
        path: ''
        startLine: 2080
      example: []
      syntax:
        content:
          CSharp: public string BatchSizePlaceholderName
          VB: Public BatchSizePlaceholderName As String
        return:
          type: System.String
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.CoreBrainInternal.VectorObservationPlacholderName
      commentId: F:Unity.MLAgents.CoreBrainInternal.VectorObservationPlacholderName
      language: CSharp
      name:
        CSharp: VectorObservationPlacholderName
        VB: VectorObservationPlacholderName
      nameWithType:
        CSharp: CoreBrainInternal.VectorObservationPlacholderName
        VB: CoreBrainInternal.VectorObservationPlacholderName
      qualifiedName:
        CSharp: Unity.MLAgents.CoreBrainInternal.VectorObservationPlacholderName
        VB: Unity.MLAgents.CoreBrainInternal.VectorObservationPlacholderName
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: VectorObservationPlacholderName
        path: ''
        startLine: 2082
      example: []
      syntax:
        content:
          CSharp: public string VectorObservationPlacholderName
          VB: Public VectorObservationPlacholderName As String
        return:
          type: System.String
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.CoreBrainInternal.RecurrentInPlaceholderName
      commentId: F:Unity.MLAgents.CoreBrainInternal.RecurrentInPlaceholderName
      language: CSharp
      name:
        CSharp: RecurrentInPlaceholderName
        VB: RecurrentInPlaceholderName
      nameWithType:
        CSharp: CoreBrainInternal.RecurrentInPlaceholderName
        VB: CoreBrainInternal.RecurrentInPlaceholderName
      qualifiedName:
        CSharp: Unity.MLAgents.CoreBrainInternal.RecurrentInPlaceholderName
        VB: Unity.MLAgents.CoreBrainInternal.RecurrentInPlaceholderName
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: RecurrentInPlaceholderName
        path: ''
        startLine: 2084
      example: []
      syntax:
        content:
          CSharp: public string RecurrentInPlaceholderName
          VB: Public RecurrentInPlaceholderName As String
        return:
          type: System.String
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.CoreBrainInternal.RecurrentOutPlaceholderName
      commentId: F:Unity.MLAgents.CoreBrainInternal.RecurrentOutPlaceholderName
      language: CSharp
      name:
        CSharp: RecurrentOutPlaceholderName
        VB: RecurrentOutPlaceholderName
      nameWithType:
        CSharp: CoreBrainInternal.RecurrentOutPlaceholderName
        VB: CoreBrainInternal.RecurrentOutPlaceholderName
      qualifiedName:
        CSharp: Unity.MLAgents.CoreBrainInternal.RecurrentOutPlaceholderName
        VB: Unity.MLAgents.CoreBrainInternal.RecurrentOutPlaceholderName
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: RecurrentOutPlaceholderName
        path: ''
        startLine: 2086
      example: []
      syntax:
        content:
          CSharp: public string RecurrentOutPlaceholderName
          VB: Public RecurrentOutPlaceholderName As String
        return:
          type: System.String
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.CoreBrainInternal.VisualObservationPlaceholderName
      commentId: F:Unity.MLAgents.CoreBrainInternal.VisualObservationPlaceholderName
      language: CSharp
      name:
        CSharp: VisualObservationPlaceholderName
        VB: VisualObservationPlaceholderName
      nameWithType:
        CSharp: CoreBrainInternal.VisualObservationPlaceholderName
        VB: CoreBrainInternal.VisualObservationPlaceholderName
      qualifiedName:
        CSharp: Unity.MLAgents.CoreBrainInternal.VisualObservationPlaceholderName
        VB: Unity.MLAgents.CoreBrainInternal.VisualObservationPlaceholderName
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: VisualObservationPlaceholderName
        path: ''
        startLine: 2088
      example: []
      syntax:
        content:
          CSharp: public string[] VisualObservationPlaceholderName
          VB: Public VisualObservationPlaceholderName As String()
        return:
          type: System.String[]
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.CoreBrainInternal.ActionPlaceholderName
      commentId: F:Unity.MLAgents.CoreBrainInternal.ActionPlaceholderName
      language: CSharp
      name:
        CSharp: ActionPlaceholderName
        VB: ActionPlaceholderName
      nameWithType:
        CSharp: CoreBrainInternal.ActionPlaceholderName
        VB: CoreBrainInternal.ActionPlaceholderName
      qualifiedName:
        CSharp: Unity.MLAgents.CoreBrainInternal.ActionPlaceholderName
        VB: Unity.MLAgents.CoreBrainInternal.ActionPlaceholderName
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: ActionPlaceholderName
        path: ''
        startLine: 2090
      example: []
      syntax:
        content:
          CSharp: public string ActionPlaceholderName
          VB: Public ActionPlaceholderName As String
        return:
          type: System.String
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.CoreBrainInternal.PreviousActionPlaceholderName
      commentId: F:Unity.MLAgents.CoreBrainInternal.PreviousActionPlaceholderName
      language: CSharp
      name:
        CSharp: PreviousActionPlaceholderName
        VB: PreviousActionPlaceholderName
      nameWithType:
        CSharp: CoreBrainInternal.PreviousActionPlaceholderName
        VB: CoreBrainInternal.PreviousActionPlaceholderName
      qualifiedName:
        CSharp: Unity.MLAgents.CoreBrainInternal.PreviousActionPlaceholderName
        VB: Unity.MLAgents.CoreBrainInternal.PreviousActionPlaceholderName
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: PreviousActionPlaceholderName
        path: ''
        startLine: 2092
      example: []
      syntax:
        content:
          CSharp: public string PreviousActionPlaceholderName
          VB: Public PreviousActionPlaceholderName As String
        return:
          type: System.String
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.CoreBrainInternal.brain
      commentId: F:Unity.MLAgents.CoreBrainInternal.brain
      language: CSharp
      name:
        CSharp: brain
        VB: brain
      nameWithType:
        CSharp: CoreBrainInternal.brain
        VB: CoreBrainInternal.brain
      qualifiedName:
        CSharp: Unity.MLAgents.CoreBrainInternal.brain
        VB: Unity.MLAgents.CoreBrainInternal.brain
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: brain
        path: ''
        startLine: 2109
      example: []
      syntax:
        content:
          CSharp: public Brain brain
          VB: Public brain As Brain
        return:
          type: Unity.MLAgents.Brain
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.CoreBrainInternal.SetBrain(Unity.MLAgents.Brain)
      commentId: M:Unity.MLAgents.CoreBrainInternal.SetBrain(Unity.MLAgents.Brain)
      language: CSharp
      name:
        CSharp: SetBrain(Brain)
        VB: SetBrain(Brain)
      nameWithType:
        CSharp: CoreBrainInternal.SetBrain(Brain)
        VB: CoreBrainInternal.SetBrain(Brain)
      qualifiedName:
        CSharp: Unity.MLAgents.CoreBrainInternal.SetBrain(Unity.MLAgents.Brain)
        VB: Unity.MLAgents.CoreBrainInternal.SetBrain(Unity.MLAgents.Brain)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: SetBrain
        path: ''
        startLine: 2112
      example: []
      syntax:
        content:
          CSharp: public void SetBrain(Brain b)
          VB: Public Sub SetBrain(b As Brain)
        parameters:
        - id: b
          type: Unity.MLAgents.Brain
      overload: Unity.MLAgents.CoreBrainInternal.SetBrain*
      implements:
      - Unity.MLAgents.CoreBrain.SetBrain(Unity.MLAgents.Brain)
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.CoreBrainInternal.InitializeCoreBrain(Unity.MLAgents.Communicator)
      commentId: M:Unity.MLAgents.CoreBrainInternal.InitializeCoreBrain(Unity.MLAgents.Communicator)
      language: CSharp
      name:
        CSharp: InitializeCoreBrain(Communicator)
        VB: InitializeCoreBrain(Communicator)
      nameWithType:
        CSharp: CoreBrainInternal.InitializeCoreBrain(Communicator)
        VB: CoreBrainInternal.InitializeCoreBrain(Communicator)
      qualifiedName:
        CSharp: Unity.MLAgents.CoreBrainInternal.InitializeCoreBrain(Unity.MLAgents.Communicator)
        VB: Unity.MLAgents.CoreBrainInternal.InitializeCoreBrain(Unity.MLAgents.Communicator)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: InitializeCoreBrain
        path: ''
        startLine: 2118
      example: []
      syntax:
        content:
          CSharp: public void InitializeCoreBrain(Communicator communicator)
          VB: Public Sub InitializeCoreBrain(communicator As Communicator)
        parameters:
        - id: communicator
          type: Unity.MLAgents.Communicator
      overload: Unity.MLAgents.CoreBrainInternal.InitializeCoreBrain*
      implements:
      - Unity.MLAgents.CoreBrain.InitializeCoreBrain(Unity.MLAgents.Communicator)
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.CoreBrainInternal.DecideAction(System.Collections.Generic.Dictionary{Unity.MLAgents.Agent,Unity.MLAgents.AgentInfo})
      commentId: M:Unity.MLAgents.CoreBrainInternal.DecideAction(System.Collections.Generic.Dictionary{Unity.MLAgents.Agent,Unity.MLAgents.AgentInfo})
      language: CSharp
      name:
        CSharp: DecideAction(Dictionary<Agent, AgentInfo>)
        VB: DecideAction(Dictionary(Of Agent, AgentInfo))
      nameWithType:
        CSharp: CoreBrainInternal.DecideAction(Dictionary<Agent, AgentInfo>)
        VB: CoreBrainInternal.DecideAction(Dictionary(Of Agent, AgentInfo))
      qualifiedName:
        CSharp: Unity.MLAgents.CoreBrainInternal.DecideAction(System.Collections.Generic.Dictionary<Unity.MLAgents.Agent, Unity.MLAgents.AgentInfo>)
        VB: Unity.MLAgents.CoreBrainInternal.DecideAction(System.Collections.Generic.Dictionary(Of Unity.MLAgents.Agent, Unity.MLAgents.AgentInfo))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: DecideAction
        path: ''
        startLine: 2188
      example: []
      syntax:
        content:
          CSharp: public void DecideAction(Dictionary<Agent, AgentInfo> agentInfo)
          VB: Public Sub DecideAction(agentInfo As Dictionary(Of Agent, AgentInfo))
        parameters:
        - id: agentInfo
          type: System.Collections.Generic.Dictionary{Unity.MLAgents.Agent,Unity.MLAgents.AgentInfo}
      overload: Unity.MLAgents.CoreBrainInternal.DecideAction*
      implements:
      - Unity.MLAgents.CoreBrain.DecideAction(System.Collections.Generic.Dictionary{Unity.MLAgents.Agent,Unity.MLAgents.AgentInfo})
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.CoreBrainInternal.OnInspector
      commentId: M:Unity.MLAgents.CoreBrainInternal.OnInspector
      language: CSharp
      name:
        CSharp: OnInspector()
        VB: OnInspector()
      nameWithType:
        CSharp: CoreBrainInternal.OnInspector()
        VB: CoreBrainInternal.OnInspector()
      qualifiedName:
        CSharp: Unity.MLAgents.CoreBrainInternal.OnInspector()
        VB: Unity.MLAgents.CoreBrainInternal.OnInspector()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: OnInspector
        path: ''
        startLine: 2423
      example: []
      syntax:
        content:
          CSharp: public void OnInspector()
          VB: Public Sub OnInspector
      overload: Unity.MLAgents.CoreBrainInternal.OnInspector*
      implements:
      - Unity.MLAgents.CoreBrain.OnInspector
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.CoreBrainInternal.BatchVisualObservations(System.Collections.Generic.List{Texture2D},System.Boolean)
      commentId: M:Unity.MLAgents.CoreBrainInternal.BatchVisualObservations(System.Collections.Generic.List{Texture2D},System.Boolean)
      language: CSharp
      name:
        CSharp: BatchVisualObservations(List<Texture2D>, Boolean)
        VB: BatchVisualObservations(List(Of Texture2D), Boolean)
      nameWithType:
        CSharp: CoreBrainInternal.BatchVisualObservations(List<Texture2D>, Boolean)
        VB: CoreBrainInternal.BatchVisualObservations(List(Of Texture2D), Boolean)
      qualifiedName:
        CSharp: Unity.MLAgents.CoreBrainInternal.BatchVisualObservations(System.Collections.Generic.List<Texture2D>, System.Boolean)
        VB: Unity.MLAgents.CoreBrainInternal.BatchVisualObservations(System.Collections.Generic.List(Of Texture2D), System.Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: BatchVisualObservations
        path: ''
        startLine: 2530
      example: []
      syntax:
        content:
          CSharp: public static float[,,, ] BatchVisualObservations(List<Texture2D> textures, bool BlackAndWhite)
          VB: Public Shared Function BatchVisualObservations(textures As List(Of Texture2D), BlackAndWhite As Boolean) As Single(,,,)
        parameters:
        - id: textures
          type: System.Collections.Generic.List{Texture2D}
        - id: BlackAndWhite
          type: System.Boolean
        return:
          type: System.Single[,,,]
      overload: Unity.MLAgents.CoreBrainInternal.BatchVisualObservations*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: Unity.MLAgents.CoreBrainPlayer
    commentId: T:Unity.MLAgents.CoreBrainPlayer
    language: CSharp
    name:
      CSharp: CoreBrainPlayer
      VB: CoreBrainPlayer
    nameWithType:
      CSharp: CoreBrainPlayer
      VB: CoreBrainPlayer
    qualifiedName:
      CSharp: Unity.MLAgents.CoreBrainPlayer
      VB: Unity.MLAgents.CoreBrainPlayer
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Unity.MLAgents
    source:
      id: CoreBrainPlayer
      path: ''
      startLine: 2579
    example: []
    syntax:
      content:
        CSharp: 'public class CoreBrainPlayer : ScriptableObject, CoreBrain'
        VB: >-
          Public Class CoreBrainPlayer

              Inherits ScriptableObject

              Implements CoreBrain
    inheritance:
    - ScriptableObject
    implements:
    - Unity.MLAgents.CoreBrain
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Unity.MLAgents.CoreBrainPlayer.brain
      commentId: F:Unity.MLAgents.CoreBrainPlayer.brain
      language: CSharp
      name:
        CSharp: brain
        VB: brain
      nameWithType:
        CSharp: CoreBrainPlayer.brain
        VB: CoreBrainPlayer.brain
      qualifiedName:
        CSharp: Unity.MLAgents.CoreBrainPlayer.brain
        VB: Unity.MLAgents.CoreBrainPlayer.brain
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: brain
        path: ''
        startLine: 2613
      example: []
      syntax:
        content:
          CSharp: public Brain brain
          VB: Public brain As Brain
        return:
          type: Unity.MLAgents.Brain
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.CoreBrainPlayer.SetBrain(Unity.MLAgents.Brain)
      commentId: M:Unity.MLAgents.CoreBrainPlayer.SetBrain(Unity.MLAgents.Brain)
      language: CSharp
      name:
        CSharp: SetBrain(Brain)
        VB: SetBrain(Brain)
      nameWithType:
        CSharp: CoreBrainPlayer.SetBrain(Brain)
        VB: CoreBrainPlayer.SetBrain(Brain)
      qualifiedName:
        CSharp: Unity.MLAgents.CoreBrainPlayer.SetBrain(Unity.MLAgents.Brain)
        VB: Unity.MLAgents.CoreBrainPlayer.SetBrain(Unity.MLAgents.Brain)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: SetBrain
        path: ''
        startLine: 2616
      example: []
      syntax:
        content:
          CSharp: public void SetBrain(Brain b)
          VB: Public Sub SetBrain(b As Brain)
        parameters:
        - id: b
          type: Unity.MLAgents.Brain
      overload: Unity.MLAgents.CoreBrainPlayer.SetBrain*
      implements:
      - Unity.MLAgents.CoreBrain.SetBrain(Unity.MLAgents.Brain)
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.CoreBrainPlayer.InitializeCoreBrain(Unity.MLAgents.Communicator)
      commentId: M:Unity.MLAgents.CoreBrainPlayer.InitializeCoreBrain(Unity.MLAgents.Communicator)
      language: CSharp
      name:
        CSharp: InitializeCoreBrain(Communicator)
        VB: InitializeCoreBrain(Communicator)
      nameWithType:
        CSharp: CoreBrainPlayer.InitializeCoreBrain(Communicator)
        VB: CoreBrainPlayer.InitializeCoreBrain(Communicator)
      qualifiedName:
        CSharp: Unity.MLAgents.CoreBrainPlayer.InitializeCoreBrain(Unity.MLAgents.Communicator)
        VB: Unity.MLAgents.CoreBrainPlayer.InitializeCoreBrain(Unity.MLAgents.Communicator)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: InitializeCoreBrain
        path: ''
        startLine: 2622
      example: []
      syntax:
        content:
          CSharp: public void InitializeCoreBrain(Communicator communicator)
          VB: Public Sub InitializeCoreBrain(communicator As Communicator)
        parameters:
        - id: communicator
          type: Unity.MLAgents.Communicator
      overload: Unity.MLAgents.CoreBrainPlayer.InitializeCoreBrain*
      implements:
      - Unity.MLAgents.CoreBrain.InitializeCoreBrain(Unity.MLAgents.Communicator)
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.CoreBrainPlayer.DecideAction(System.Collections.Generic.Dictionary{Unity.MLAgents.Agent,Unity.MLAgents.AgentInfo})
      commentId: M:Unity.MLAgents.CoreBrainPlayer.DecideAction(System.Collections.Generic.Dictionary{Unity.MLAgents.Agent,Unity.MLAgents.AgentInfo})
      language: CSharp
      name:
        CSharp: DecideAction(Dictionary<Agent, AgentInfo>)
        VB: DecideAction(Dictionary(Of Agent, AgentInfo))
      nameWithType:
        CSharp: CoreBrainPlayer.DecideAction(Dictionary<Agent, AgentInfo>)
        VB: CoreBrainPlayer.DecideAction(Dictionary(Of Agent, AgentInfo))
      qualifiedName:
        CSharp: Unity.MLAgents.CoreBrainPlayer.DecideAction(System.Collections.Generic.Dictionary<Unity.MLAgents.Agent, Unity.MLAgents.AgentInfo>)
        VB: Unity.MLAgents.CoreBrainPlayer.DecideAction(System.Collections.Generic.Dictionary(Of Unity.MLAgents.Agent, Unity.MLAgents.AgentInfo))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: DecideAction
        path: ''
        startLine: 2638
      example: []
      syntax:
        content:
          CSharp: public void DecideAction(Dictionary<Agent, AgentInfo> agentInfo)
          VB: Public Sub DecideAction(agentInfo As Dictionary(Of Agent, AgentInfo))
        parameters:
        - id: agentInfo
          type: System.Collections.Generic.Dictionary{Unity.MLAgents.Agent,Unity.MLAgents.AgentInfo}
      overload: Unity.MLAgents.CoreBrainPlayer.DecideAction*
      implements:
      - Unity.MLAgents.CoreBrain.DecideAction(System.Collections.Generic.Dictionary{Unity.MLAgents.Agent,Unity.MLAgents.AgentInfo})
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.CoreBrainPlayer.OnInspector
      commentId: M:Unity.MLAgents.CoreBrainPlayer.OnInspector
      language: CSharp
      name:
        CSharp: OnInspector()
        VB: OnInspector()
      nameWithType:
        CSharp: CoreBrainPlayer.OnInspector()
        VB: CoreBrainPlayer.OnInspector()
      qualifiedName:
        CSharp: Unity.MLAgents.CoreBrainPlayer.OnInspector()
        VB: Unity.MLAgents.CoreBrainPlayer.OnInspector()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: OnInspector
        path: ''
        startLine: 2684
      example: []
      syntax:
        content:
          CSharp: public void OnInspector()
          VB: Public Sub OnInspector
      overload: Unity.MLAgents.CoreBrainPlayer.OnInspector*
      implements:
      - Unity.MLAgents.CoreBrain.OnInspector
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Unity.MLAgents.Decision
    commentId: T:Unity.MLAgents.Decision
    language: CSharp
    name:
      CSharp: Decision
      VB: Decision
    nameWithType:
      CSharp: Decision
      VB: Decision
    qualifiedName:
      CSharp: Unity.MLAgents.Decision
      VB: Unity.MLAgents.Decision
    type: Interface
    assemblies:
    - cs.temp.dll
    namespace: Unity.MLAgents
    source:
      id: Decision
      path: ''
      startLine: 2735
    summary: "\nInterface for implementing the behavior of an Agent that uses a Heuristic\nBrain. The behavior of an Agent in this case is fully decided using the\nimplementation of these methods and no training or inference takes place.\nCurrently, the Heuristic Brain does not support text observations and actions.\n"
    example: []
    syntax:
      content:
        CSharp: public interface Decision
        VB: Public Interface Decision
    modifiers:
      CSharp:
      - public
      - interface
      VB:
      - Public
      - Interface
    items:
    - id: Unity.MLAgents.Decision.Decide(System.Collections.Generic.List{System.Single},System.Collections.Generic.List{Texture2D},System.Single,System.Boolean,System.Collections.Generic.List{System.Single})
      commentId: M:Unity.MLAgents.Decision.Decide(System.Collections.Generic.List{System.Single},System.Collections.Generic.List{Texture2D},System.Single,System.Boolean,System.Collections.Generic.List{System.Single})
      language: CSharp
      name:
        CSharp: Decide(List<Single>, List<Texture2D>, Single, Boolean, List<Single>)
        VB: Decide(List(Of Single), List(Of Texture2D), Single, Boolean, List(Of Single))
      nameWithType:
        CSharp: Decision.Decide(List<Single>, List<Texture2D>, Single, Boolean, List<Single>)
        VB: Decision.Decide(List(Of Single), List(Of Texture2D), Single, Boolean, List(Of Single))
      qualifiedName:
        CSharp: Unity.MLAgents.Decision.Decide(System.Collections.Generic.List<System.Single>, System.Collections.Generic.List<Texture2D>, System.Single, System.Boolean, System.Collections.Generic.List<System.Single>)
        VB: Unity.MLAgents.Decision.Decide(System.Collections.Generic.List(Of System.Single), System.Collections.Generic.List(Of Texture2D), System.Single, System.Boolean, System.Collections.Generic.List(Of System.Single))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: Decide
        path: ''
        startLine: 2750
      summary: "\nDefines the decision-making logic of the agent. Given the information \nabout the agent, returns a vector of actions.\n"
      example: []
      syntax:
        content:
          CSharp: float[] Decide(List<float> vectorObs, List<Texture2D> visualObs, float reward, bool done, List<float> memory)
          VB: Function Decide(vectorObs As List(Of Single), visualObs As List(Of Texture2D), reward As Single, done As Boolean, memory As List(Of Single)) As Single()
        parameters:
        - id: vectorObs
          type: System.Collections.Generic.List{System.Single}
          description: The vector observations of the agent.
        - id: visualObs
          type: System.Collections.Generic.List{Texture2D}
          description: The cameras the agent uses for visual observations.
        - id: reward
          type: System.Single
          description: The reward the agent received at the previous step.
        - id: done
          type: System.Boolean
          description: Whether or not the agent is done.
        - id: memory
          type: System.Collections.Generic.List{System.Single}
          description: "\nThe memories stored from the previous step with \n<xref href=\"Unity.MLAgents.Decision.MakeMemory(System.Collections.Generic.List%7bSystem.Single%7d%2cSystem.Collections.Generic.List%7bTexture2D%7d%2cSystem.Single%2cSystem.Boolean%2cSystem.Collections.Generic.List%7bSystem.Single%7d)\" data-throw-if-not-resolved=\"false\"></xref>\n"
        return:
          type: System.Single[]
          description: Vector action vector.
      overload: Unity.MLAgents.Decision.Decide*
      modifiers:
        CSharp: []
        VB: []
      references:
        ? Unity.MLAgents.Decision.MakeMemory(System.Collections.Generic.List{System.Single},System.Collections.Generic.List{Texture2D},System.Single,System.Boolean,System.Collections.Generic.List{System.Single})
        : 
    - id: Unity.MLAgents.Decision.MakeMemory(System.Collections.Generic.List{System.Single},System.Collections.Generic.List{Texture2D},System.Single,System.Boolean,System.Collections.Generic.List{System.Single})
      commentId: M:Unity.MLAgents.Decision.MakeMemory(System.Collections.Generic.List{System.Single},System.Collections.Generic.List{Texture2D},System.Single,System.Boolean,System.Collections.Generic.List{System.Single})
      language: CSharp
      name:
        CSharp: MakeMemory(List<Single>, List<Texture2D>, Single, Boolean, List<Single>)
        VB: MakeMemory(List(Of Single), List(Of Texture2D), Single, Boolean, List(Of Single))
      nameWithType:
        CSharp: Decision.MakeMemory(List<Single>, List<Texture2D>, Single, Boolean, List<Single>)
        VB: Decision.MakeMemory(List(Of Single), List(Of Texture2D), Single, Boolean, List(Of Single))
      qualifiedName:
        CSharp: Unity.MLAgents.Decision.MakeMemory(System.Collections.Generic.List<System.Single>, System.Collections.Generic.List<Texture2D>, System.Single, System.Boolean, System.Collections.Generic.List<System.Single>)
        VB: Unity.MLAgents.Decision.MakeMemory(System.Collections.Generic.List(Of System.Single), System.Collections.Generic.List(Of Texture2D), System.Single, System.Boolean, System.Collections.Generic.List(Of System.Single))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: MakeMemory
        path: ''
        startLine: 2769
      summary: "\nDefines the logic for creating the memory vector for the Agent.\n"
      example: []
      syntax:
        content:
          CSharp: List<float> MakeMemory(List<float> vectorObs, List<Texture2D> visualObs, float reward, bool done, List<float> memory)
          VB: Function MakeMemory(vectorObs As List(Of Single), visualObs As List(Of Texture2D), reward As Single, done As Boolean, memory As List(Of Single)) As List(Of Single)
        parameters:
        - id: vectorObs
          type: System.Collections.Generic.List{System.Single}
          description: The vector observations of the agent.
        - id: visualObs
          type: System.Collections.Generic.List{Texture2D}
          description: The cameras the agent uses for visual observations.
        - id: reward
          type: System.Single
          description: The reward the agent received at the previous step.
        - id: done
          type: System.Boolean
          description: Whether or not the agent is done.
        - id: memory
          type: System.Collections.Generic.List{System.Single}
          description: "\nThe memories stored from the previous call to this method.\n"
        return:
          type: System.Collections.Generic.List{System.Single}
          description: The vector of memories the agent will use at the next step.
      overload: Unity.MLAgents.Decision.MakeMemory*
      modifiers:
        CSharp: []
        VB: []
  - id: Unity.MLAgents.ExternalCommunicator
    commentId: T:Unity.MLAgents.ExternalCommunicator
    language: CSharp
    name:
      CSharp: ExternalCommunicator
      VB: ExternalCommunicator
    nameWithType:
      CSharp: ExternalCommunicator
      VB: ExternalCommunicator
    qualifiedName:
      CSharp: Unity.MLAgents.ExternalCommunicator
      VB: Unity.MLAgents.ExternalCommunicator
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Unity.MLAgents
    source:
      id: ExternalCommunicator
      path: ''
      startLine: 2790
    example: []
    syntax:
      content:
        CSharp: 'public class ExternalCommunicator : Communicator'
        VB: >-
          Public Class ExternalCommunicator

              Implements Communicator
    inheritance:
    - System.Object
    implements:
    - Unity.MLAgents.Communicator
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ToString
    - System.Object.ReferenceEquals(System.Object,System.Object)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Unity.MLAgents.ExternalCommunicator.#ctor(Unity.MLAgents.Academy)
      commentId: M:Unity.MLAgents.ExternalCommunicator.#ctor(Unity.MLAgents.Academy)
      language: CSharp
      name:
        CSharp: ExternalCommunicator(Academy)
        VB: ExternalCommunicator(Academy)
      nameWithType:
        CSharp: ExternalCommunicator.ExternalCommunicator(Academy)
        VB: ExternalCommunicator.ExternalCommunicator(Academy)
      qualifiedName:
        CSharp: Unity.MLAgents.ExternalCommunicator.ExternalCommunicator(Unity.MLAgents.Academy)
        VB: Unity.MLAgents.ExternalCommunicator.ExternalCommunicator(Unity.MLAgents.Academy)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: .ctor
        path: ''
        startLine: 2857
      example: []
      syntax:
        content:
          CSharp: public ExternalCommunicator(Academy aca)
          VB: Public Sub New(aca As Academy)
        parameters:
        - id: aca
          type: Unity.MLAgents.Academy
      overload: Unity.MLAgents.ExternalCommunicator.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.ExternalCommunicator.SubscribeBrain(Unity.MLAgents.Brain)
      commentId: M:Unity.MLAgents.ExternalCommunicator.SubscribeBrain(Unity.MLAgents.Brain)
      language: CSharp
      name:
        CSharp: SubscribeBrain(Brain)
        VB: SubscribeBrain(Brain)
      nameWithType:
        CSharp: ExternalCommunicator.SubscribeBrain(Brain)
        VB: ExternalCommunicator.SubscribeBrain(Brain)
      qualifiedName:
        CSharp: Unity.MLAgents.ExternalCommunicator.SubscribeBrain(Unity.MLAgents.Brain)
        VB: Unity.MLAgents.ExternalCommunicator.SubscribeBrain(Unity.MLAgents.Brain)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: SubscribeBrain
        path: ''
        startLine: 2870
      example: []
      syntax:
        content:
          CSharp: public void SubscribeBrain(Brain brain)
          VB: Public Sub SubscribeBrain(brain As Brain)
        parameters:
        - id: brain
          type: Unity.MLAgents.Brain
      overload: Unity.MLAgents.ExternalCommunicator.SubscribeBrain*
      implements:
      - Unity.MLAgents.Communicator.SubscribeBrain(Unity.MLAgents.Brain)
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.ExternalCommunicator.CommunicatorHandShake
      commentId: M:Unity.MLAgents.ExternalCommunicator.CommunicatorHandShake
      language: CSharp
      name:
        CSharp: CommunicatorHandShake()
        VB: CommunicatorHandShake()
      nameWithType:
        CSharp: ExternalCommunicator.CommunicatorHandShake()
        VB: ExternalCommunicator.CommunicatorHandShake()
      qualifiedName:
        CSharp: Unity.MLAgents.ExternalCommunicator.CommunicatorHandShake()
        VB: Unity.MLAgents.ExternalCommunicator.CommunicatorHandShake()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: CommunicatorHandShake
        path: ''
        startLine: 2878
      example: []
      syntax:
        content:
          CSharp: public bool CommunicatorHandShake()
          VB: Public Function CommunicatorHandShake As Boolean
        return:
          type: System.Boolean
      overload: Unity.MLAgents.ExternalCommunicator.CommunicatorHandShake*
      implements:
      - Unity.MLAgents.Communicator.CommunicatorHandShake
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.ExternalCommunicator.InitializeCommunicator
      commentId: M:Unity.MLAgents.ExternalCommunicator.InitializeCommunicator
      language: CSharp
      name:
        CSharp: InitializeCommunicator()
        VB: InitializeCommunicator()
      nameWithType:
        CSharp: ExternalCommunicator.InitializeCommunicator()
        VB: ExternalCommunicator.InitializeCommunicator()
      qualifiedName:
        CSharp: Unity.MLAgents.ExternalCommunicator.InitializeCommunicator()
        VB: Unity.MLAgents.ExternalCommunicator.InitializeCommunicator()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: InitializeCommunicator
        path: ''
        startLine: 2892
      example: []
      syntax:
        content:
          CSharp: public void InitializeCommunicator()
          VB: Public Sub InitializeCommunicator
      overload: Unity.MLAgents.ExternalCommunicator.InitializeCommunicator*
      implements:
      - Unity.MLAgents.Communicator.InitializeCommunicator
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.ExternalCommunicator.UpdateCommand
      commentId: M:Unity.MLAgents.ExternalCommunicator.UpdateCommand
      language: CSharp
      name:
        CSharp: UpdateCommand()
        VB: UpdateCommand()
      nameWithType:
        CSharp: ExternalCommunicator.UpdateCommand()
        VB: ExternalCommunicator.UpdateCommand()
      qualifiedName:
        CSharp: Unity.MLAgents.ExternalCommunicator.UpdateCommand()
        VB: Unity.MLAgents.ExternalCommunicator.UpdateCommand()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: UpdateCommand
        path: ''
        startLine: 2961
      example: []
      syntax:
        content:
          CSharp: public void UpdateCommand()
          VB: Public Sub UpdateCommand
      overload: Unity.MLAgents.ExternalCommunicator.UpdateCommand*
      implements:
      - Unity.MLAgents.Communicator.UpdateCommand
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.ExternalCommunicator.GetCommand
      commentId: M:Unity.MLAgents.ExternalCommunicator.GetCommand
      language: CSharp
      name:
        CSharp: GetCommand()
        VB: GetCommand()
      nameWithType:
        CSharp: ExternalCommunicator.GetCommand()
        VB: ExternalCommunicator.GetCommand()
      qualifiedName:
        CSharp: Unity.MLAgents.ExternalCommunicator.GetCommand()
        VB: Unity.MLAgents.ExternalCommunicator.GetCommand()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: GetCommand
        path: ''
        startLine: 2982
      syntax:
        content:
          CSharp: public ExternalCommand GetCommand()
          VB: Public Function GetCommand As ExternalCommand
        return:
          type: Unity.MLAgents.ExternalCommand
      overload: Unity.MLAgents.ExternalCommunicator.GetCommand*
      implements:
      - Unity.MLAgents.Communicator.GetCommand
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.ExternalCommunicator.SetCommand(Unity.MLAgents.ExternalCommand)
      commentId: M:Unity.MLAgents.ExternalCommunicator.SetCommand(Unity.MLAgents.ExternalCommand)
      language: CSharp
      name:
        CSharp: SetCommand(ExternalCommand)
        VB: SetCommand(ExternalCommand)
      nameWithType:
        CSharp: ExternalCommunicator.SetCommand(ExternalCommand)
        VB: ExternalCommunicator.SetCommand(ExternalCommand)
      qualifiedName:
        CSharp: Unity.MLAgents.ExternalCommunicator.SetCommand(Unity.MLAgents.ExternalCommand)
        VB: Unity.MLAgents.ExternalCommunicator.SetCommand(Unity.MLAgents.ExternalCommand)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: SetCommand
        path: ''
        startLine: 2987
      syntax:
        content:
          CSharp: public void SetCommand(ExternalCommand c)
          VB: Public Sub SetCommand(c As ExternalCommand)
        parameters:
        - id: c
          type: Unity.MLAgents.ExternalCommand
      overload: Unity.MLAgents.ExternalCommunicator.SetCommand*
      implements:
      - Unity.MLAgents.Communicator.SetCommand(Unity.MLAgents.ExternalCommand)
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.ExternalCommunicator.GetResetParameters
      commentId: M:Unity.MLAgents.ExternalCommunicator.GetResetParameters
      language: CSharp
      name:
        CSharp: GetResetParameters()
        VB: GetResetParameters()
      nameWithType:
        CSharp: ExternalCommunicator.GetResetParameters()
        VB: ExternalCommunicator.GetResetParameters()
      qualifiedName:
        CSharp: Unity.MLAgents.ExternalCommunicator.GetResetParameters()
        VB: Unity.MLAgents.ExternalCommunicator.GetResetParameters()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: GetResetParameters
        path: ''
        startLine: 2993
      example: []
      syntax:
        content:
          CSharp: public Dictionary<string, float> GetResetParameters()
          VB: Public Function GetResetParameters As Dictionary(Of String, Single)
        return:
          type: System.Collections.Generic.Dictionary{System.String,System.Single}
      overload: Unity.MLAgents.ExternalCommunicator.GetResetParameters*
      implements:
      - Unity.MLAgents.Communicator.GetResetParameters
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.ExternalCommunicator.GiveBrainInfo(Unity.MLAgents.Brain,System.Collections.Generic.Dictionary{Unity.MLAgents.Agent,Unity.MLAgents.AgentInfo})
      commentId: M:Unity.MLAgents.ExternalCommunicator.GiveBrainInfo(Unity.MLAgents.Brain,System.Collections.Generic.Dictionary{Unity.MLAgents.Agent,Unity.MLAgents.AgentInfo})
      language: CSharp
      name:
        CSharp: GiveBrainInfo(Brain, Dictionary<Agent, AgentInfo>)
        VB: GiveBrainInfo(Brain, Dictionary(Of Agent, AgentInfo))
      nameWithType:
        CSharp: ExternalCommunicator.GiveBrainInfo(Brain, Dictionary<Agent, AgentInfo>)
        VB: ExternalCommunicator.GiveBrainInfo(Brain, Dictionary(Of Agent, AgentInfo))
      qualifiedName:
        CSharp: Unity.MLAgents.ExternalCommunicator.GiveBrainInfo(Unity.MLAgents.Brain, System.Collections.Generic.Dictionary<Unity.MLAgents.Agent, Unity.MLAgents.AgentInfo>)
        VB: Unity.MLAgents.ExternalCommunicator.GiveBrainInfo(Unity.MLAgents.Brain, System.Collections.Generic.Dictionary(Of Unity.MLAgents.Agent, Unity.MLAgents.AgentInfo))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: GiveBrainInfo
        path: ''
        startLine: 3081
      example: []
      syntax:
        content:
          CSharp: public void GiveBrainInfo(Brain brain, Dictionary<Agent, AgentInfo> agentInfo)
          VB: Public Sub GiveBrainInfo(brain As Brain, agentInfo As Dictionary(Of Agent, AgentInfo))
        parameters:
        - id: brain
          type: Unity.MLAgents.Brain
        - id: agentInfo
          type: System.Collections.Generic.Dictionary{Unity.MLAgents.Agent,Unity.MLAgents.AgentInfo}
      overload: Unity.MLAgents.ExternalCommunicator.GiveBrainInfo*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.ExternalCommunicator.GetHasTried
      commentId: M:Unity.MLAgents.ExternalCommunicator.GetHasTried
      language: CSharp
      name:
        CSharp: GetHasTried()
        VB: GetHasTried()
      nameWithType:
        CSharp: ExternalCommunicator.GetHasTried()
        VB: ExternalCommunicator.GetHasTried()
      qualifiedName:
        CSharp: Unity.MLAgents.ExternalCommunicator.GetHasTried()
        VB: Unity.MLAgents.ExternalCommunicator.GetHasTried()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: GetHasTried
        path: ''
        startLine: 3172
      syntax:
        content:
          CSharp: public Dictionary<string, bool> GetHasTried()
          VB: Public Function GetHasTried As Dictionary(Of String, Boolean)
        return:
          type: System.Collections.Generic.Dictionary{System.String,System.Boolean}
      overload: Unity.MLAgents.ExternalCommunicator.GetHasTried*
      implements:
      - Unity.MLAgents.Communicator.GetHasTried
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.ExternalCommunicator.GetSent
      commentId: M:Unity.MLAgents.ExternalCommunicator.GetSent
      language: CSharp
      name:
        CSharp: GetSent()
        VB: GetSent()
      nameWithType:
        CSharp: ExternalCommunicator.GetSent()
        VB: ExternalCommunicator.GetSent()
      qualifiedName:
        CSharp: Unity.MLAgents.ExternalCommunicator.GetSent()
        VB: Unity.MLAgents.ExternalCommunicator.GetSent()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: GetSent
        path: ''
        startLine: 3177
      syntax:
        content:
          CSharp: public Dictionary<string, bool> GetSent()
          VB: Public Function GetSent As Dictionary(Of String, Boolean)
        return:
          type: System.Collections.Generic.Dictionary{System.String,System.Boolean}
      overload: Unity.MLAgents.ExternalCommunicator.GetSent*
      implements:
      - Unity.MLAgents.Communicator.GetSent
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.ExternalCommunicator.UpdateActions
      commentId: M:Unity.MLAgents.ExternalCommunicator.UpdateActions
      language: CSharp
      name:
        CSharp: UpdateActions()
        VB: UpdateActions()
      nameWithType:
        CSharp: ExternalCommunicator.UpdateActions()
        VB: ExternalCommunicator.UpdateActions()
      qualifiedName:
        CSharp: Unity.MLAgents.ExternalCommunicator.UpdateActions()
        VB: Unity.MLAgents.ExternalCommunicator.UpdateActions()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: UpdateActions
        path: ''
        startLine: 3184
      example: []
      syntax:
        content:
          CSharp: public void UpdateActions()
          VB: Public Sub UpdateActions
      overload: Unity.MLAgents.ExternalCommunicator.UpdateActions*
      implements:
      - Unity.MLAgents.Communicator.UpdateActions
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Unity.MLAgents.ExternalCommunicator.StepMessage
    commentId: T:Unity.MLAgents.ExternalCommunicator.StepMessage
    language: CSharp
    name:
      CSharp: ExternalCommunicator.StepMessage
      VB: ExternalCommunicator.StepMessage
    nameWithType:
      CSharp: ExternalCommunicator.StepMessage
      VB: ExternalCommunicator.StepMessage
    qualifiedName:
      CSharp: Unity.MLAgents.ExternalCommunicator.StepMessage
      VB: Unity.MLAgents.ExternalCommunicator.StepMessage
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: Unity.MLAgents
    source:
      id: StepMessage
      path: ''
      startLine: 2819
    example: []
    syntax:
      content:
        CSharp: >-
          [Serializable]

          public struct StepMessage
        VB: >-
          <Serializable>

          Public Structure StepMessage
    inheritedMembers:
    - System.ValueType.Equals(System.Object)
    - System.ValueType.GetHashCode
    - System.ValueType.ToString
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetType
    - System.Object.ReferenceEquals(System.Object,System.Object)
    attributes:
    - type: System.SerializableAttribute
      ctor: System.SerializableAttribute.#ctor
      arguments: []
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: Unity.MLAgents.ExternalCommunicator.StepMessage.brain_name
      commentId: F:Unity.MLAgents.ExternalCommunicator.StepMessage.brain_name
      language: CSharp
      name:
        CSharp: brain_name
        VB: brain_name
      nameWithType:
        CSharp: ExternalCommunicator.StepMessage.brain_name
        VB: ExternalCommunicator.StepMessage.brain_name
      qualifiedName:
        CSharp: Unity.MLAgents.ExternalCommunicator.StepMessage.brain_name
        VB: Unity.MLAgents.ExternalCommunicator.StepMessage.brain_name
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: brain_name
        path: ''
        startLine: 2823
      syntax:
        content:
          CSharp: public string brain_name
          VB: Public brain_name As String
        return:
          type: System.String
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.ExternalCommunicator.StepMessage.agents
      commentId: F:Unity.MLAgents.ExternalCommunicator.StepMessage.agents
      language: CSharp
      name:
        CSharp: agents
        VB: agents
      nameWithType:
        CSharp: ExternalCommunicator.StepMessage.agents
        VB: ExternalCommunicator.StepMessage.agents
      qualifiedName:
        CSharp: Unity.MLAgents.ExternalCommunicator.StepMessage.agents
        VB: Unity.MLAgents.ExternalCommunicator.StepMessage.agents
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: agents
        path: ''
        startLine: 2824
      syntax:
        content:
          CSharp: public List<int> agents
          VB: Public agents As List(Of Integer)
        return:
          type: System.Collections.Generic.List{System.Int32}
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.ExternalCommunicator.StepMessage.vectorObservations
      commentId: F:Unity.MLAgents.ExternalCommunicator.StepMessage.vectorObservations
      language: CSharp
      name:
        CSharp: vectorObservations
        VB: vectorObservations
      nameWithType:
        CSharp: ExternalCommunicator.StepMessage.vectorObservations
        VB: ExternalCommunicator.StepMessage.vectorObservations
      qualifiedName:
        CSharp: Unity.MLAgents.ExternalCommunicator.StepMessage.vectorObservations
        VB: Unity.MLAgents.ExternalCommunicator.StepMessage.vectorObservations
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: vectorObservations
        path: ''
        startLine: 2825
      syntax:
        content:
          CSharp: public List<float> vectorObservations
          VB: Public vectorObservations As List(Of Single)
        return:
          type: System.Collections.Generic.List{System.Single}
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.ExternalCommunicator.StepMessage.rewards
      commentId: F:Unity.MLAgents.ExternalCommunicator.StepMessage.rewards
      language: CSharp
      name:
        CSharp: rewards
        VB: rewards
      nameWithType:
        CSharp: ExternalCommunicator.StepMessage.rewards
        VB: ExternalCommunicator.StepMessage.rewards
      qualifiedName:
        CSharp: Unity.MLAgents.ExternalCommunicator.StepMessage.rewards
        VB: Unity.MLAgents.ExternalCommunicator.StepMessage.rewards
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: rewards
        path: ''
        startLine: 2826
      syntax:
        content:
          CSharp: public List<float> rewards
          VB: Public rewards As List(Of Single)
        return:
          type: System.Collections.Generic.List{System.Single}
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.ExternalCommunicator.StepMessage.previousVectorActions
      commentId: F:Unity.MLAgents.ExternalCommunicator.StepMessage.previousVectorActions
      language: CSharp
      name:
        CSharp: previousVectorActions
        VB: previousVectorActions
      nameWithType:
        CSharp: ExternalCommunicator.StepMessage.previousVectorActions
        VB: ExternalCommunicator.StepMessage.previousVectorActions
      qualifiedName:
        CSharp: Unity.MLAgents.ExternalCommunicator.StepMessage.previousVectorActions
        VB: Unity.MLAgents.ExternalCommunicator.StepMessage.previousVectorActions
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: previousVectorActions
        path: ''
        startLine: 2827
      syntax:
        content:
          CSharp: public List<float> previousVectorActions
          VB: Public previousVectorActions As List(Of Single)
        return:
          type: System.Collections.Generic.List{System.Single}
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.ExternalCommunicator.StepMessage.previousTextActions
      commentId: F:Unity.MLAgents.ExternalCommunicator.StepMessage.previousTextActions
      language: CSharp
      name:
        CSharp: previousTextActions
        VB: previousTextActions
      nameWithType:
        CSharp: ExternalCommunicator.StepMessage.previousTextActions
        VB: ExternalCommunicator.StepMessage.previousTextActions
      qualifiedName:
        CSharp: Unity.MLAgents.ExternalCommunicator.StepMessage.previousTextActions
        VB: Unity.MLAgents.ExternalCommunicator.StepMessage.previousTextActions
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: previousTextActions
        path: ''
        startLine: 2828
      syntax:
        content:
          CSharp: public List<string> previousTextActions
          VB: Public previousTextActions As List(Of String)
        return:
          type: System.Collections.Generic.List{System.String}
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.ExternalCommunicator.StepMessage.memories
      commentId: F:Unity.MLAgents.ExternalCommunicator.StepMessage.memories
      language: CSharp
      name:
        CSharp: memories
        VB: memories
      nameWithType:
        CSharp: ExternalCommunicator.StepMessage.memories
        VB: ExternalCommunicator.StepMessage.memories
      qualifiedName:
        CSharp: Unity.MLAgents.ExternalCommunicator.StepMessage.memories
        VB: Unity.MLAgents.ExternalCommunicator.StepMessage.memories
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: memories
        path: ''
        startLine: 2829
      syntax:
        content:
          CSharp: public List<float> memories
          VB: Public memories As List(Of Single)
        return:
          type: System.Collections.Generic.List{System.Single}
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.ExternalCommunicator.StepMessage.textObservations
      commentId: F:Unity.MLAgents.ExternalCommunicator.StepMessage.textObservations
      language: CSharp
      name:
        CSharp: textObservations
        VB: textObservations
      nameWithType:
        CSharp: ExternalCommunicator.StepMessage.textObservations
        VB: ExternalCommunicator.StepMessage.textObservations
      qualifiedName:
        CSharp: Unity.MLAgents.ExternalCommunicator.StepMessage.textObservations
        VB: Unity.MLAgents.ExternalCommunicator.StepMessage.textObservations
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: textObservations
        path: ''
        startLine: 2830
      syntax:
        content:
          CSharp: public List<string> textObservations
          VB: Public textObservations As List(Of String)
        return:
          type: System.Collections.Generic.List{System.String}
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.ExternalCommunicator.StepMessage.dones
      commentId: F:Unity.MLAgents.ExternalCommunicator.StepMessage.dones
      language: CSharp
      name:
        CSharp: dones
        VB: dones
      nameWithType:
        CSharp: ExternalCommunicator.StepMessage.dones
        VB: ExternalCommunicator.StepMessage.dones
      qualifiedName:
        CSharp: Unity.MLAgents.ExternalCommunicator.StepMessage.dones
        VB: Unity.MLAgents.ExternalCommunicator.StepMessage.dones
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: dones
        path: ''
        startLine: 2831
      syntax:
        content:
          CSharp: public List<bool> dones
          VB: Public dones As List(Of Boolean)
        return:
          type: System.Collections.Generic.List{System.Boolean}
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.ExternalCommunicator.StepMessage.maxes
      commentId: F:Unity.MLAgents.ExternalCommunicator.StepMessage.maxes
      language: CSharp
      name:
        CSharp: maxes
        VB: maxes
      nameWithType:
        CSharp: ExternalCommunicator.StepMessage.maxes
        VB: ExternalCommunicator.StepMessage.maxes
      qualifiedName:
        CSharp: Unity.MLAgents.ExternalCommunicator.StepMessage.maxes
        VB: Unity.MLAgents.ExternalCommunicator.StepMessage.maxes
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: maxes
        path: ''
        startLine: 2832
      syntax:
        content:
          CSharp: public List<bool> maxes
          VB: Public maxes As List(Of Boolean)
        return:
          type: System.Collections.Generic.List{System.Boolean}
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Unity.MLAgents.MonitorType
    commentId: T:Unity.MLAgents.MonitorType
    language: CSharp
    name:
      CSharp: MonitorType
      VB: MonitorType
    nameWithType:
      CSharp: MonitorType
      VB: MonitorType
    qualifiedName:
      CSharp: Unity.MLAgents.MonitorType
      VB: Unity.MLAgents.MonitorType
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: Unity.MLAgents
    source:
      id: MonitorType
      path: ''
      startLine: 3248
    syntax:
      content:
        CSharp: public enum MonitorType
        VB: Public Enum MonitorType
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: Unity.MLAgents.MonitorType.slider
      commentId: F:Unity.MLAgents.MonitorType.slider
      language: CSharp
      name:
        CSharp: slider
        VB: slider
      nameWithType:
        CSharp: MonitorType.slider
        VB: MonitorType.slider
      qualifiedName:
        CSharp: Unity.MLAgents.MonitorType.slider
        VB: Unity.MLAgents.MonitorType.slider
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: slider
        path: ''
        startLine: 3250
      syntax:
        content:
          CSharp: slider = 0
          VB: slider = 0
        return:
          type: Unity.MLAgents.MonitorType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Unity.MLAgents.MonitorType.hist
      commentId: F:Unity.MLAgents.MonitorType.hist
      language: CSharp
      name:
        CSharp: hist
        VB: hist
      nameWithType:
        CSharp: MonitorType.hist
        VB: MonitorType.hist
      qualifiedName:
        CSharp: Unity.MLAgents.MonitorType.hist
        VB: Unity.MLAgents.MonitorType.hist
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: hist
        path: ''
        startLine: 3251
      syntax:
        content:
          CSharp: hist = 1
          VB: hist = 1
        return:
          type: Unity.MLAgents.MonitorType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Unity.MLAgents.MonitorType.text
      commentId: F:Unity.MLAgents.MonitorType.text
      language: CSharp
      name:
        CSharp: text
        VB: text
      nameWithType:
        CSharp: MonitorType.text
        VB: MonitorType.text
      qualifiedName:
        CSharp: Unity.MLAgents.MonitorType.text
        VB: Unity.MLAgents.MonitorType.text
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: text
        path: ''
        startLine: 3252
      syntax:
        content:
          CSharp: text = 2
          VB: text = 2
        return:
          type: Unity.MLAgents.MonitorType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Unity.MLAgents.MonitorType.bar
      commentId: F:Unity.MLAgents.MonitorType.bar
      language: CSharp
      name:
        CSharp: bar
        VB: bar
      nameWithType:
        CSharp: MonitorType.bar
        VB: MonitorType.bar
      qualifiedName:
        CSharp: Unity.MLAgents.MonitorType.bar
        VB: Unity.MLAgents.MonitorType.bar
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: bar
        path: ''
        startLine: 3253
      syntax:
        content:
          CSharp: bar = 3
          VB: bar = 3
        return:
          type: Unity.MLAgents.MonitorType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: Unity.MLAgents.Monitor
    commentId: T:Unity.MLAgents.Monitor
    language: CSharp
    name:
      CSharp: Monitor
      VB: Monitor
    nameWithType:
      CSharp: Monitor
      VB: Monitor
    qualifiedName:
      CSharp: Unity.MLAgents.Monitor
      VB: Unity.MLAgents.Monitor
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Unity.MLAgents
    source:
      id: Monitor
      path: ''
      startLine: 3260
    summary: "\nMonitor is used to display information about the Agent within the Unity\nscene. Use the log function to add information to your monitor.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class Monitor : MonoBehaviour'
        VB: >-
          Public Class Monitor

              Inherits MonoBehaviour
    inheritance:
    - MonoBehaviour
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Unity.MLAgents.Monitor.verticalOffset
      commentId: F:Unity.MLAgents.Monitor.verticalOffset
      language: CSharp
      name:
        CSharp: verticalOffset
        VB: verticalOffset
      nameWithType:
        CSharp: Monitor.verticalOffset
        VB: Monitor.verticalOffset
      qualifiedName:
        CSharp: Unity.MLAgents.Monitor.verticalOffset
        VB: Unity.MLAgents.Monitor.verticalOffset
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: verticalOffset
        path: ''
        startLine: 3266
      summary: "\nRepresents how high above the target the monitors will be.\n"
      example: []
      syntax:
        content:
          CSharp: public static float verticalOffset
          VB: Public Shared verticalOffset As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Unity.MLAgents.Monitor.Log(System.String,System.Object,Unity.MLAgents.MonitorType,Transform)
      commentId: M:Unity.MLAgents.Monitor.Log(System.String,System.Object,Unity.MLAgents.MonitorType,Transform)
      language: CSharp
      name:
        CSharp: Log(String, Object, MonitorType, Transform)
        VB: Log(String, Object, MonitorType, Transform)
      nameWithType:
        CSharp: Monitor.Log(String, Object, MonitorType, Transform)
        VB: Monitor.Log(String, Object, MonitorType, Transform)
      qualifiedName:
        CSharp: Unity.MLAgents.Monitor.Log(System.String, System.Object, Unity.MLAgents.MonitorType, Transform)
        VB: Unity.MLAgents.Monitor.Log(System.String, System.Object, Unity.MLAgents.MonitorType, Transform)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: Log
        path: ''
        startLine: 3302
      syntax:
        content:
          CSharp: public static void Log(string key, object value, MonitorType displayType = MonitorType.text, Transform target = null)
          VB: Public Shared Sub Log(key As String, value As Object, displayType As MonitorType = MonitorType.text, target As Transform = Nothing)
        parameters:
        - id: key
          type: System.String
        - id: value
          type: System.Object
        - id: displayType
          type: Unity.MLAgents.MonitorType
        - id: target
          type: Transform
      overload: Unity.MLAgents.Monitor.Log*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Unity.MLAgents.Monitor.RemoveValue(Transform,System.String)
      commentId: M:Unity.MLAgents.Monitor.RemoveValue(Transform,System.String)
      language: CSharp
      name:
        CSharp: RemoveValue(Transform, String)
        VB: RemoveValue(Transform, String)
      nameWithType:
        CSharp: Monitor.RemoveValue(Transform, String)
        VB: Monitor.RemoveValue(Transform, String)
      qualifiedName:
        CSharp: Unity.MLAgents.Monitor.RemoveValue(Transform, System.String)
        VB: Unity.MLAgents.Monitor.RemoveValue(Transform, System.String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: RemoveValue
        path: ''
        startLine: 3360
      summary: "\nRemove a value from a monitor.\n"
      example: []
      syntax:
        content:
          CSharp: public static void RemoveValue(Transform target, string key)
          VB: Public Shared Sub RemoveValue(target As Transform, key As String)
        parameters:
        - id: target
          type: Transform
          description: "\nThe transform to which the information is attached.\n"
        - id: key
          type: System.String
          description: The key of the information you want to remove.
      overload: Unity.MLAgents.Monitor.RemoveValue*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Unity.MLAgents.Monitor.RemoveAllValues(Transform)
      commentId: M:Unity.MLAgents.Monitor.RemoveAllValues(Transform)
      language: CSharp
      name:
        CSharp: RemoveAllValues(Transform)
        VB: RemoveAllValues(Transform)
      nameWithType:
        CSharp: Monitor.RemoveAllValues(Transform)
        VB: Monitor.RemoveAllValues(Transform)
      qualifiedName:
        CSharp: Unity.MLAgents.Monitor.RemoveAllValues(Transform)
        VB: Unity.MLAgents.Monitor.RemoveAllValues(Transform)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: RemoveAllValues
        path: ''
        startLine: 3386
      summary: "\nRemove all information from a monitor.\n"
      example: []
      syntax:
        content:
          CSharp: public static void RemoveAllValues(Transform target)
          VB: Public Shared Sub RemoveAllValues(target As Transform)
        parameters:
        - id: target
          type: Transform
          description: "\nThe transform to which the information is attached.\n"
      overload: Unity.MLAgents.Monitor.RemoveAllValues*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Unity.MLAgents.Monitor.SetActive(System.Boolean)
      commentId: M:Unity.MLAgents.Monitor.SetActive(System.Boolean)
      language: CSharp
      name:
        CSharp: SetActive(Boolean)
        VB: SetActive(Boolean)
      nameWithType:
        CSharp: Monitor.SetActive(Boolean)
        VB: Monitor.SetActive(Boolean)
      qualifiedName:
        CSharp: Unity.MLAgents.Monitor.SetActive(System.Boolean)
        VB: Unity.MLAgents.Monitor.SetActive(System.Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: SetActive
        path: ''
        startLine: 3403
      summary: "\nUse SetActive to enable or disable the Monitor via script\n"
      example: []
      syntax:
        content:
          CSharp: public static void SetActive(bool active)
          VB: Public Shared Sub SetActive(active As Boolean)
        parameters:
        - id: active
          type: System.Boolean
          description: Value to set the Monitor&apos;s status to.
      overload: Unity.MLAgents.Monitor.SetActive*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: Unity.MLAgents.ResetParameters
    commentId: T:Unity.MLAgents.ResetParameters
    language: CSharp
    name:
      CSharp: ResetParameters
      VB: ResetParameters
    nameWithType:
      CSharp: ResetParameters
      VB: ResetParameters
    qualifiedName:
      CSharp: Unity.MLAgents.ResetParameters
      VB: Unity.MLAgents.ResetParameters
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Unity.MLAgents
    source:
      id: ResetParameters
      path: ''
      startLine: 3633
    syntax:
      content:
        CSharp: >-
          [Serializable]

          public class ResetParameters : Dictionary<string, float>, IDictionary<string, float>, ICollection<KeyValuePair<string, float>>, IDictionary, ICollection, IReadOnlyDictionary<string, float>, IReadOnlyCollection<KeyValuePair<string, float>>, IEnumerable<KeyValuePair<string, float>>, IEnumerable, ISerializable, IDeserializationCallback, ISerializationCallbackReceiver
        VB: >-
          <Serializable>

          Public Class ResetParameters

              Inherits Dictionary(Of String, Single)

              Implements IDictionary(Of String, Single), ICollection(Of KeyValuePair(Of String, Single)), IDictionary, ICollection, IReadOnlyDictionary(Of String, Single), IReadOnlyCollection(Of KeyValuePair(Of String, Single)), IEnumerable(Of KeyValuePair(Of String, Single)), IEnumerable, ISerializable, IDeserializationCallback, ISerializationCallbackReceiver
    inheritance:
    - System.Object
    - System.Collections.Generic.Dictionary{System.String,System.Single}
    implements:
    - System.Collections.Generic.IDictionary{System.String,System.Single}
    - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Single}}
    - System.Collections.IDictionary
    - System.Collections.ICollection
    - System.Collections.Generic.IReadOnlyDictionary{System.String,System.Single}
    - System.Collections.Generic.IReadOnlyCollection{System.Collections.Generic.KeyValuePair{System.String,System.Single}}
    - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Single}}
    - System.Collections.IEnumerable
    - System.Runtime.Serialization.ISerializable
    - System.Runtime.Serialization.IDeserializationCallback
    - ISerializationCallbackReceiver
    inheritedMembers:
    - System.Collections.Generic.Dictionary{System.String,System.Single}.Add(System.String,System.Single)
    - System.Collections.Generic.Dictionary{System.String,System.Single}.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{System.String,System.Single})
    - System.Collections.Generic.Dictionary{System.String,System.Single}.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{System.String,System.Single})
    - System.Collections.Generic.Dictionary{System.String,System.Single}.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{System.String,System.Single})
    - System.Collections.Generic.Dictionary{System.String,System.Single}.Clear
    - System.Collections.Generic.Dictionary{System.String,System.Single}.ContainsKey(System.String)
    - System.Collections.Generic.Dictionary{System.String,System.Single}.ContainsValue(System.Single)
    - System.Collections.Generic.Dictionary{System.String,System.Single}.GetEnumerator
    - System.Collections.Generic.Dictionary{System.String,System.Single}.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TValue}}#GetEnumerator
    - System.Collections.Generic.Dictionary{System.String,System.Single}.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    - System.Collections.Generic.Dictionary{System.String,System.Single}.OnDeserialization(System.Object)
    - System.Collections.Generic.Dictionary{System.String,System.Single}.Remove(System.String)
    - System.Collections.Generic.Dictionary{System.String,System.Single}.Remove(System.String,System.Single@)
    - System.Collections.Generic.Dictionary{System.String,System.Single}.TryGetValue(System.String,System.Single@)
    - System.Collections.Generic.Dictionary{System.String,System.Single}.TryAdd(System.String,System.Single)
    - System.Collections.Generic.Dictionary{System.String,System.Single}.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Single}[],System.Int32)
    - System.Collections.Generic.Dictionary{System.String,System.Single}.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
    - System.Collections.Generic.Dictionary{System.String,System.Single}.System#Collections#IEnumerable#GetEnumerator
    - System.Collections.Generic.Dictionary{System.String,System.Single}.System#Collections#IDictionary#get_Item(System.Object)
    - System.Collections.Generic.Dictionary{System.String,System.Single}.System#Collections#IDictionary#set_Item(System.Object,System.Object)
    - System.Collections.Generic.Dictionary{System.String,System.Single}.System#Collections#IDictionary#Add(System.Object,System.Object)
    - System.Collections.Generic.Dictionary{System.String,System.Single}.System#Collections#IDictionary#Contains(System.Object)
    - System.Collections.Generic.Dictionary{System.String,System.Single}.System#Collections#IDictionary#GetEnumerator
    - System.Collections.Generic.Dictionary{System.String,System.Single}.System#Collections#IDictionary#Remove(System.Object)
    - System.Collections.Generic.Dictionary{System.String,System.Single}.Comparer
    - System.Collections.Generic.Dictionary{System.String,System.Single}.Count
    - System.Collections.Generic.Dictionary{System.String,System.Single}.Keys
    - System.Collections.Generic.Dictionary{System.String,System.Single}.System#Collections#Generic#IDictionary{TKey,TValue}#Keys
    - System.Collections.Generic.Dictionary{System.String,System.Single}.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Keys
    - System.Collections.Generic.Dictionary{System.String,System.Single}.Values
    - System.Collections.Generic.Dictionary{System.String,System.Single}.System#Collections#Generic#IDictionary{TKey,TValue}#Values
    - System.Collections.Generic.Dictionary{System.String,System.Single}.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Values
    - System.Collections.Generic.Dictionary{System.String,System.Single}.Item(System.String)
    - System.Collections.Generic.Dictionary{System.String,System.Single}.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly
    - System.Collections.Generic.Dictionary{System.String,System.Single}.System#Collections#ICollection#IsSynchronized
    - System.Collections.Generic.Dictionary{System.String,System.Single}.System#Collections#ICollection#SyncRoot
    - System.Collections.Generic.Dictionary{System.String,System.Single}.System#Collections#IDictionary#IsFixedSize
    - System.Collections.Generic.Dictionary{System.String,System.Single}.System#Collections#IDictionary#IsReadOnly
    - System.Collections.Generic.Dictionary{System.String,System.Single}.System#Collections#IDictionary#Keys
    - System.Collections.Generic.Dictionary{System.String,System.Single}.System#Collections#IDictionary#Values
    - System.Collections.Generic.Dictionary{System.String,System.Single}.System#Collections#IDictionary#Item(System.Object)
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ToString
    - System.Object.ReferenceEquals(System.Object,System.Object)
    attributes:
    - type: System.SerializableAttribute
      ctor: System.SerializableAttribute.#ctor
      arguments: []
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Unity.MLAgents.ResetParameters.OnBeforeSerialize
      commentId: M:Unity.MLAgents.ResetParameters.OnBeforeSerialize
      language: CSharp
      name:
        CSharp: OnBeforeSerialize()
        VB: OnBeforeSerialize()
      nameWithType:
        CSharp: ResetParameters.OnBeforeSerialize()
        VB: ResetParameters.OnBeforeSerialize()
      qualifiedName:
        CSharp: Unity.MLAgents.ResetParameters.OnBeforeSerialize()
        VB: Unity.MLAgents.ResetParameters.OnBeforeSerialize()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: OnBeforeSerialize
        path: ''
        startLine: 3646
      syntax:
        content:
          CSharp: public void OnBeforeSerialize()
          VB: Public Sub OnBeforeSerialize
      overload: Unity.MLAgents.ResetParameters.OnBeforeSerialize*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.ResetParameters.OnAfterDeserialize
      commentId: M:Unity.MLAgents.ResetParameters.OnAfterDeserialize
      language: CSharp
      name:
        CSharp: OnAfterDeserialize()
        VB: OnAfterDeserialize()
      nameWithType:
        CSharp: ResetParameters.OnAfterDeserialize()
        VB: ResetParameters.OnAfterDeserialize()
      qualifiedName:
        CSharp: Unity.MLAgents.ResetParameters.OnAfterDeserialize()
        VB: Unity.MLAgents.ResetParameters.OnAfterDeserialize()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: OnAfterDeserialize
        path: ''
        startLine: 3661
      syntax:
        content:
          CSharp: public void OnAfterDeserialize()
          VB: Public Sub OnAfterDeserialize
      overload: Unity.MLAgents.ResetParameters.OnAfterDeserialize*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Unity.MLAgents.ResetParameters.ResetParameter
    commentId: T:Unity.MLAgents.ResetParameters.ResetParameter
    language: CSharp
    name:
      CSharp: ResetParameters.ResetParameter
      VB: ResetParameters.ResetParameter
    nameWithType:
      CSharp: ResetParameters.ResetParameter
      VB: ResetParameters.ResetParameter
    qualifiedName:
      CSharp: Unity.MLAgents.ResetParameters.ResetParameter
      VB: Unity.MLAgents.ResetParameters.ResetParameter
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: Unity.MLAgents
    source:
      id: ResetParameter
      path: ''
      startLine: 3637
    syntax:
      content:
        CSharp: >-
          [Serializable]

          public struct ResetParameter
        VB: >-
          <Serializable>

          Public Structure ResetParameter
    inheritedMembers:
    - System.ValueType.Equals(System.Object)
    - System.ValueType.GetHashCode
    - System.ValueType.ToString
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetType
    - System.Object.ReferenceEquals(System.Object,System.Object)
    attributes:
    - type: System.SerializableAttribute
      ctor: System.SerializableAttribute.#ctor
      arguments: []
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: Unity.MLAgents.ResetParameters.ResetParameter.key
      commentId: F:Unity.MLAgents.ResetParameters.ResetParameter.key
      language: CSharp
      name:
        CSharp: key
        VB: key
      nameWithType:
        CSharp: ResetParameters.ResetParameter.key
        VB: ResetParameters.ResetParameter.key
      qualifiedName:
        CSharp: Unity.MLAgents.ResetParameters.ResetParameter.key
        VB: Unity.MLAgents.ResetParameters.ResetParameter.key
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: key
        path: ''
        startLine: 3640
      syntax:
        content:
          CSharp: public string key
          VB: Public key As String
        return:
          type: System.String
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.ResetParameters.ResetParameter.value
      commentId: F:Unity.MLAgents.ResetParameters.ResetParameter.value
      language: CSharp
      name:
        CSharp: value
        VB: value
      nameWithType:
        CSharp: ResetParameters.ResetParameter.value
        VB: ResetParameters.ResetParameter.value
      qualifiedName:
        CSharp: Unity.MLAgents.ResetParameters.ResetParameter.value
        VB: Unity.MLAgents.ResetParameters.ResetParameter.value
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: value
        path: ''
        startLine: 3641
      syntax:
        content:
          CSharp: public float value
          VB: Public value As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Unity.MLAgents.UnityAgentsException
    commentId: T:Unity.MLAgents.UnityAgentsException
    language: CSharp
    name:
      CSharp: UnityAgentsException
      VB: UnityAgentsException
    nameWithType:
      CSharp: UnityAgentsException
      VB: UnityAgentsException
    qualifiedName:
      CSharp: Unity.MLAgents.UnityAgentsException
      VB: Unity.MLAgents.UnityAgentsException
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Unity.MLAgents
    source:
      id: UnityAgentsException
      path: ''
      startLine: 3687
    syntax:
      content:
        CSharp: >-
          [Serializable]

          public class UnityAgentsException : Exception, ISerializable, _Exception
        VB: >-
          <Serializable>

          Public Class UnityAgentsException

              Inherits Exception

              Implements ISerializable, _Exception
    inheritance:
    - System.Object
    - System.Exception
    implements:
    - System.Runtime.Serialization.ISerializable
    - System.Runtime.InteropServices._Exception
    inheritedMembers:
    - System.Exception.GetBaseException
    - System.Exception.ToString
    - System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    - System.Exception.GetType
    - System.Exception.Message
    - System.Exception.Data
    - System.Exception.InnerException
    - System.Exception.TargetSite
    - System.Exception.StackTrace
    - System.Exception.HelpLink
    - System.Exception.Source
    - System.Exception.HResult
    - System.Exception.SerializeObjectState
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    attributes:
    - type: System.SerializableAttribute
      ctor: System.SerializableAttribute.#ctor
      arguments: []
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Unity.MLAgents.UnityAgentsException.#ctor(System.String)
      commentId: M:Unity.MLAgents.UnityAgentsException.#ctor(System.String)
      language: CSharp
      name:
        CSharp: UnityAgentsException(String)
        VB: UnityAgentsException(String)
      nameWithType:
        CSharp: UnityAgentsException.UnityAgentsException(String)
        VB: UnityAgentsException.UnityAgentsException(String)
      qualifiedName:
        CSharp: Unity.MLAgents.UnityAgentsException.UnityAgentsException(System.String)
        VB: Unity.MLAgents.UnityAgentsException.UnityAgentsException(System.String)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: .ctor
        path: ''
        startLine: 3693
      example: []
      syntax:
        content:
          CSharp: public UnityAgentsException(string message)
          VB: Public Sub New(message As String)
        parameters:
        - id: message
          type: System.String
      overload: Unity.MLAgents.UnityAgentsException.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Unity.MLAgents.UnityAgentsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
      commentId: M:Unity.MLAgents.UnityAgentsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
      language: CSharp
      name:
        CSharp: UnityAgentsException(SerializationInfo, StreamingContext)
        VB: UnityAgentsException(SerializationInfo, StreamingContext)
      nameWithType:
        CSharp: UnityAgentsException.UnityAgentsException(SerializationInfo, StreamingContext)
        VB: UnityAgentsException.UnityAgentsException(SerializationInfo, StreamingContext)
      qualifiedName:
        CSharp: Unity.MLAgents.UnityAgentsException.UnityAgentsException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
        VB: Unity.MLAgents.UnityAgentsException.UnityAgentsException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Unity.MLAgents
      source:
        id: .ctor
        path: ''
        startLine: 3700
      example: []
      syntax:
        content:
          CSharp: protected UnityAgentsException(SerializationInfo info, StreamingContext context)
          VB: Protected Sub New(info As SerializationInfo, context As StreamingContext)
        parameters:
        - id: info
          type: System.Runtime.Serialization.SerializationInfo
        - id: context
          type: System.Runtime.Serialization.StreamingContext
      overload: Unity.MLAgents.UnityAgentsException.#ctor*
      modifiers:
        CSharp:
        - protected
        VB:
        - Protected
references:
  System:
    name:
      CSharp:
      - name: System
        nameWithType: System
        qualifiedName: System
      VB:
      - name: System
        nameWithType: System
        qualifiedName: System
    isDefinition: true
    commentId: N:System
  System.Object:
    name:
      CSharp:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      VB:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Object
  System.Object.Equals(System.Object):
    name:
      CSharp:
      - id: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.Equals(System.Object)
  System.Object.Equals(System.Object,System.Object):
    name:
      CSharp:
      - id: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.Equals(System.Object,System.Object)
  System.Object.GetHashCode:
    name:
      CSharp:
      - id: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        qualifiedName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        qualifiedName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.GetHashCode
  System.Object.GetType:
    name:
      CSharp:
      - id: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        qualifiedName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        qualifiedName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.GetType
  System.Object.MemberwiseClone:
    name:
      CSharp:
      - id: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        qualifiedName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        qualifiedName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.MemberwiseClone
  System.Object.ToString:
    name:
      CSharp:
      - id: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        qualifiedName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        qualifiedName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.ToString
  System.Object.ReferenceEquals(System.Object,System.Object):
    name:
      CSharp:
      - id: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        qualifiedName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        qualifiedName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  System.Int32:
    name:
      CSharp:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      VB:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Int32
  System.Single:
    name:
      CSharp:
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      VB:
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Single
  Unity.MLAgents.EnvironmentConfiguration:
    name:
      CSharp:
      - id: Unity.MLAgents.EnvironmentConfiguration
        name: EnvironmentConfiguration
        nameWithType: EnvironmentConfiguration
        qualifiedName: Unity.MLAgents.EnvironmentConfiguration
      VB:
      - id: Unity.MLAgents.EnvironmentConfiguration
        name: EnvironmentConfiguration
        nameWithType: EnvironmentConfiguration
        qualifiedName: Unity.MLAgents.EnvironmentConfiguration
    isDefinition: true
    commentId: T:Unity.MLAgents.EnvironmentConfiguration
  Unity.MLAgents.EnvironmentConfiguration.#ctor*:
    name:
      CSharp:
      - id: Unity.MLAgents.EnvironmentConfiguration.#ctor*
        name: EnvironmentConfiguration
        nameWithType: EnvironmentConfiguration.EnvironmentConfiguration
        qualifiedName: Unity.MLAgents.EnvironmentConfiguration.EnvironmentConfiguration
      VB:
      - id: Unity.MLAgents.EnvironmentConfiguration.#ctor*
        name: EnvironmentConfiguration
        nameWithType: EnvironmentConfiguration.EnvironmentConfiguration
        qualifiedName: Unity.MLAgents.EnvironmentConfiguration.EnvironmentConfiguration
    isDefinition: true
    commentId: Overload:Unity.MLAgents.EnvironmentConfiguration.#ctor
  System.SerializableAttribute:
    name:
      CSharp:
      - id: System.SerializableAttribute
        name: SerializableAttribute
        nameWithType: SerializableAttribute
        qualifiedName: System.SerializableAttribute
        isExternal: true
      VB:
      - id: System.SerializableAttribute
        name: SerializableAttribute
        nameWithType: SerializableAttribute
        qualifiedName: System.SerializableAttribute
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.SerializableAttribute
  System.SerializableAttribute.#ctor:
    name:
      CSharp:
      - id: System.SerializableAttribute.#ctor
        name: SerializableAttribute
        nameWithType: SerializableAttribute.SerializableAttribute
        qualifiedName: System.SerializableAttribute.SerializableAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.SerializableAttribute.#ctor
        name: SerializableAttribute
        nameWithType: SerializableAttribute.SerializableAttribute
        qualifiedName: System.SerializableAttribute.SerializableAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.SerializableAttribute
    commentId: M:System.SerializableAttribute.#ctor
  MonoBehaviour:
    name:
      CSharp:
      - id: MonoBehaviour
        name: MonoBehaviour
        nameWithType: MonoBehaviour
        qualifiedName: MonoBehaviour
        isExternal: true
      VB:
      - id: MonoBehaviour
        name: MonoBehaviour
        nameWithType: MonoBehaviour
        qualifiedName: MonoBehaviour
        isExternal: true
    isDefinition: true
  Unity.MLAgents:
    name:
      CSharp:
      - name: Unity.MLAgents
        nameWithType: Unity.MLAgents
        qualifiedName: Unity.MLAgents
      VB:
      - name: Unity.MLAgents
        nameWithType: Unity.MLAgents
        qualifiedName: Unity.MLAgents
    isDefinition: true
    commentId: N:Unity.MLAgents
  Unity.MLAgents.ResetParameters:
    name:
      CSharp:
      - id: Unity.MLAgents.ResetParameters
        name: ResetParameters
        nameWithType: ResetParameters
        qualifiedName: Unity.MLAgents.ResetParameters
      VB:
      - id: Unity.MLAgents.ResetParameters
        name: ResetParameters
        nameWithType: ResetParameters
        qualifiedName: Unity.MLAgents.ResetParameters
    isDefinition: true
    parent: Unity.MLAgents
    commentId: T:Unity.MLAgents.ResetParameters
  System.Action:
    name:
      CSharp:
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      VB:
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Action
  System.Action`3:
    name:
      CSharp:
      - id: System.Action`3
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T1
        nameWithType: T1
        qualifiedName: T1
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: T2
        nameWithType: T2
        qualifiedName: T2
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: T3
        nameWithType: T3
        qualifiedName: T3
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Action`3
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T1
        nameWithType: T1
        qualifiedName: T1
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: T2
        nameWithType: T2
        qualifiedName: T2
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: T3
        nameWithType: T3
        qualifiedName: T3
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Action`3
  System.Action{System.Boolean,System.Boolean,System.Int32}:
    name:
      CSharp:
      - id: System.Action`3
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Action`3
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Action`3
    parent: System
    commentId: T:System.Action{System.Boolean,System.Boolean,System.Int32}
  Unity.MLAgents.Academy.InitializeAcademy*:
    name:
      CSharp:
      - id: Unity.MLAgents.Academy.InitializeAcademy*
        name: InitializeAcademy
        nameWithType: Academy.InitializeAcademy
        qualifiedName: Unity.MLAgents.Academy.InitializeAcademy
      VB:
      - id: Unity.MLAgents.Academy.InitializeAcademy*
        name: InitializeAcademy
        nameWithType: Academy.InitializeAcademy
        qualifiedName: Unity.MLAgents.Academy.InitializeAcademy
    isDefinition: true
    commentId: Overload:Unity.MLAgents.Academy.InitializeAcademy
  Unity.MLAgents.Academy.AcademyStep*:
    name:
      CSharp:
      - id: Unity.MLAgents.Academy.AcademyStep*
        name: AcademyStep
        nameWithType: Academy.AcademyStep
        qualifiedName: Unity.MLAgents.Academy.AcademyStep
      VB:
      - id: Unity.MLAgents.Academy.AcademyStep*
        name: AcademyStep
        nameWithType: Academy.AcademyStep
        qualifiedName: Unity.MLAgents.Academy.AcademyStep
    isDefinition: true
    commentId: Overload:Unity.MLAgents.Academy.AcademyStep
  Unity.MLAgents.Academy.AcademyReset*:
    name:
      CSharp:
      - id: Unity.MLAgents.Academy.AcademyReset*
        name: AcademyReset
        nameWithType: Academy.AcademyReset
        qualifiedName: Unity.MLAgents.Academy.AcademyReset
      VB:
      - id: Unity.MLAgents.Academy.AcademyReset*
        name: AcademyReset
        nameWithType: Academy.AcademyReset
        qualifiedName: Unity.MLAgents.Academy.AcademyReset
    isDefinition: true
    commentId: Overload:Unity.MLAgents.Academy.AcademyReset
  Unity.MLAgents.Academy.isInference:
    commentId: F:Unity.MLAgents.Academy.isInference
  System.Boolean:
    name:
      CSharp:
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      VB:
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Boolean
  Unity.MLAgents.Academy.GetIsInference*:
    name:
      CSharp:
      - id: Unity.MLAgents.Academy.GetIsInference*
        name: GetIsInference
        nameWithType: Academy.GetIsInference
        qualifiedName: Unity.MLAgents.Academy.GetIsInference
      VB:
      - id: Unity.MLAgents.Academy.GetIsInference*
        name: GetIsInference
        nameWithType: Academy.GetIsInference
        qualifiedName: Unity.MLAgents.Academy.GetIsInference
    isDefinition: true
    commentId: Overload:Unity.MLAgents.Academy.GetIsInference
  Unity.MLAgents.Academy.SetIsInference*:
    name:
      CSharp:
      - id: Unity.MLAgents.Academy.SetIsInference*
        name: SetIsInference
        nameWithType: Academy.SetIsInference
        qualifiedName: Unity.MLAgents.Academy.SetIsInference
      VB:
      - id: Unity.MLAgents.Academy.SetIsInference*
        name: SetIsInference
        nameWithType: Academy.SetIsInference
        qualifiedName: Unity.MLAgents.Academy.SetIsInference
    isDefinition: true
    commentId: Overload:Unity.MLAgents.Academy.SetIsInference
  Unity.MLAgents.Academy.GetEpisodeCount*:
    name:
      CSharp:
      - id: Unity.MLAgents.Academy.GetEpisodeCount*
        name: GetEpisodeCount
        nameWithType: Academy.GetEpisodeCount
        qualifiedName: Unity.MLAgents.Academy.GetEpisodeCount
      VB:
      - id: Unity.MLAgents.Academy.GetEpisodeCount*
        name: GetEpisodeCount
        nameWithType: Academy.GetEpisodeCount
        qualifiedName: Unity.MLAgents.Academy.GetEpisodeCount
    isDefinition: true
    commentId: Overload:Unity.MLAgents.Academy.GetEpisodeCount
  Unity.MLAgents.Academy.GetStepCount*:
    name:
      CSharp:
      - id: Unity.MLAgents.Academy.GetStepCount*
        name: GetStepCount
        nameWithType: Academy.GetStepCount
        qualifiedName: Unity.MLAgents.Academy.GetStepCount
      VB:
      - id: Unity.MLAgents.Academy.GetStepCount*
        name: GetStepCount
        nameWithType: Academy.GetStepCount
        qualifiedName: Unity.MLAgents.Academy.GetStepCount
    isDefinition: true
    commentId: Overload:Unity.MLAgents.Academy.GetStepCount
  Unity.MLAgents.Academy.Done*:
    name:
      CSharp:
      - id: Unity.MLAgents.Academy.Done*
        name: Done
        nameWithType: Academy.Done
        qualifiedName: Unity.MLAgents.Academy.Done
      VB:
      - id: Unity.MLAgents.Academy.Done*
        name: Done
        nameWithType: Academy.Done
        qualifiedName: Unity.MLAgents.Academy.Done
    isDefinition: true
    commentId: Overload:Unity.MLAgents.Academy.Done
  Unity.MLAgents.Academy.IsDone*:
    name:
      CSharp:
      - id: Unity.MLAgents.Academy.IsDone*
        name: IsDone
        nameWithType: Academy.IsDone
        qualifiedName: Unity.MLAgents.Academy.IsDone
      VB:
      - id: Unity.MLAgents.Academy.IsDone*
        name: IsDone
        nameWithType: Academy.IsDone
        qualifiedName: Unity.MLAgents.Academy.IsDone
    isDefinition: true
    commentId: Overload:Unity.MLAgents.Academy.IsDone
  Unity.MLAgents.Academy.IsCommunicatorOn*:
    name:
      CSharp:
      - id: Unity.MLAgents.Academy.IsCommunicatorOn*
        name: IsCommunicatorOn
        nameWithType: Academy.IsCommunicatorOn
        qualifiedName: Unity.MLAgents.Academy.IsCommunicatorOn
      VB:
      - id: Unity.MLAgents.Academy.IsCommunicatorOn*
        name: IsCommunicatorOn
        nameWithType: Academy.IsCommunicatorOn
        qualifiedName: Unity.MLAgents.Academy.IsCommunicatorOn
    isDefinition: true
    commentId: Overload:Unity.MLAgents.Academy.IsCommunicatorOn
  Unity.MLAgents.Communicator:
    name:
      CSharp:
      - id: Unity.MLAgents.Communicator
        name: Communicator
        nameWithType: Communicator
        qualifiedName: Unity.MLAgents.Communicator
      VB:
      - id: Unity.MLAgents.Communicator
        name: Communicator
        nameWithType: Communicator
        qualifiedName: Unity.MLAgents.Communicator
    isDefinition: true
    parent: Unity.MLAgents
    commentId: T:Unity.MLAgents.Communicator
  Unity.MLAgents.Academy.GetCommunicator*:
    name:
      CSharp:
      - id: Unity.MLAgents.Academy.GetCommunicator*
        name: GetCommunicator
        nameWithType: Academy.GetCommunicator
        qualifiedName: Unity.MLAgents.Academy.GetCommunicator
      VB:
      - id: Unity.MLAgents.Academy.GetCommunicator*
        name: GetCommunicator
        nameWithType: Academy.GetCommunicator
        qualifiedName: Unity.MLAgents.Academy.GetCommunicator
    isDefinition: true
    commentId: Overload:Unity.MLAgents.Academy.GetCommunicator
  Unity.MLAgents.Academy:
    name:
      CSharp:
      - id: Unity.MLAgents.Academy
        name: Academy
        nameWithType: Academy
        qualifiedName: Unity.MLAgents.Academy
      VB:
      - id: Unity.MLAgents.Academy
        name: Academy
        nameWithType: Academy
        qualifiedName: Unity.MLAgents.Academy
    isDefinition: true
    parent: Unity.MLAgents
    commentId: T:Unity.MLAgents.Academy
  System.ValueType:
    name:
      CSharp:
      - id: System.ValueType
        name: ValueType
        nameWithType: ValueType
        qualifiedName: System.ValueType
        isExternal: true
      VB:
      - id: System.ValueType
        name: ValueType
        nameWithType: ValueType
        qualifiedName: System.ValueType
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.ValueType
  System.ValueType.Equals(System.Object):
    name:
      CSharp:
      - id: System.ValueType.Equals(System.Object)
        name: Equals
        nameWithType: ValueType.Equals
        qualifiedName: System.ValueType.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.ValueType.Equals(System.Object)
        name: Equals
        nameWithType: ValueType.Equals
        qualifiedName: System.ValueType.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.ValueType
    commentId: M:System.ValueType.Equals(System.Object)
  System.ValueType.GetHashCode:
    name:
      CSharp:
      - id: System.ValueType.GetHashCode
        name: GetHashCode
        nameWithType: ValueType.GetHashCode
        qualifiedName: System.ValueType.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.ValueType.GetHashCode
        name: GetHashCode
        nameWithType: ValueType.GetHashCode
        qualifiedName: System.ValueType.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.ValueType
    commentId: M:System.ValueType.GetHashCode
  System.ValueType.ToString:
    name:
      CSharp:
      - id: System.ValueType.ToString
        name: ToString
        nameWithType: ValueType.ToString
        qualifiedName: System.ValueType.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.ValueType.ToString
        name: ToString
        nameWithType: ValueType.ToString
        qualifiedName: System.ValueType.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.ValueType
    commentId: M:System.ValueType.ToString
  System.Collections.Generic.List`1:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Collections.Generic.List`1
  System.Collections.Generic:
    name:
      CSharp:
      - name: System.Collections.Generic
        nameWithType: System.Collections.Generic
        qualifiedName: System.Collections.Generic
      VB:
      - name: System.Collections.Generic
        nameWithType: System.Collections.Generic
        qualifiedName: System.Collections.Generic
    isDefinition: true
    commentId: N:System.Collections.Generic
  System.Collections.Generic.List{System.Single}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{System.Single}
  System.Collections.Generic.List{Texture2D}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Texture2D
        name: Texture2D
        nameWithType: Texture2D
        qualifiedName: Texture2D
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Texture2D
        name: Texture2D
        nameWithType: Texture2D
        qualifiedName: Texture2D
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{Texture2D}
  System.String:
    name:
      CSharp:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      VB:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.String
  System.Single[]:
    name:
      CSharp:
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  Unity.MLAgents.AgentInfo:
    name:
      CSharp:
      - id: Unity.MLAgents.AgentInfo
        name: AgentInfo
        nameWithType: AgentInfo
        qualifiedName: Unity.MLAgents.AgentInfo
      VB:
      - id: Unity.MLAgents.AgentInfo
        name: AgentInfo
        nameWithType: AgentInfo
        qualifiedName: Unity.MLAgents.AgentInfo
    isDefinition: true
    parent: Unity.MLAgents
    commentId: T:Unity.MLAgents.AgentInfo
  Unity.MLAgents.AgentAction:
    name:
      CSharp:
      - id: Unity.MLAgents.AgentAction
        name: AgentAction
        nameWithType: AgentAction
        qualifiedName: Unity.MLAgents.AgentAction
      VB:
      - id: Unity.MLAgents.AgentAction
        name: AgentAction
        nameWithType: AgentAction
        qualifiedName: Unity.MLAgents.AgentAction
    isDefinition: true
    commentId: T:Unity.MLAgents.AgentAction
  System.Collections.Generic.List{Camera}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Camera
        name: Camera
        nameWithType: Camera
        qualifiedName: Camera
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Camera
        name: Camera
        nameWithType: Camera
        qualifiedName: Camera
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{Camera}
  Unity.MLAgents.AgentParameters:
    name:
      CSharp:
      - id: Unity.MLAgents.AgentParameters
        name: AgentParameters
        nameWithType: AgentParameters
        qualifiedName: Unity.MLAgents.AgentParameters
      VB:
      - id: Unity.MLAgents.AgentParameters
        name: AgentParameters
        nameWithType: AgentParameters
        qualifiedName: Unity.MLAgents.AgentParameters
    isDefinition: true
    parent: Unity.MLAgents
    commentId: T:Unity.MLAgents.AgentParameters
  Unity.MLAgents.Agent.CollectObservations:
    commentId: M:Unity.MLAgents.Agent.CollectObservations
  Unity.MLAgents.Agent.done:
    commentId: F:Unity.MLAgents.Agent.done
  Unity.MLAgents.Agent.GiveBrain(Unity.MLAgents.Brain):
    commentId: M:Unity.MLAgents.Agent.GiveBrain(Unity.MLAgents.Brain)
  Unity.MLAgents.Brain:
    name:
      CSharp:
      - id: Unity.MLAgents.Brain
        name: Brain
        nameWithType: Brain
        qualifiedName: Unity.MLAgents.Brain
      VB:
      - id: Unity.MLAgents.Brain
        name: Brain
        nameWithType: Brain
        qualifiedName: Unity.MLAgents.Brain
    isDefinition: true
    parent: Unity.MLAgents
    commentId: T:Unity.MLAgents.Brain
  Unity.MLAgents.Agent.GiveBrain*:
    name:
      CSharp:
      - id: Unity.MLAgents.Agent.GiveBrain*
        name: GiveBrain
        nameWithType: Agent.GiveBrain
        qualifiedName: Unity.MLAgents.Agent.GiveBrain
      VB:
      - id: Unity.MLAgents.Agent.GiveBrain*
        name: GiveBrain
        nameWithType: Agent.GiveBrain
        qualifiedName: Unity.MLAgents.Agent.GiveBrain
    isDefinition: true
    commentId: Overload:Unity.MLAgents.Agent.GiveBrain
  Unity.MLAgents.Agent.GetStepCount*:
    name:
      CSharp:
      - id: Unity.MLAgents.Agent.GetStepCount*
        name: GetStepCount
        nameWithType: Agent.GetStepCount
        qualifiedName: Unity.MLAgents.Agent.GetStepCount
      VB:
      - id: Unity.MLAgents.Agent.GetStepCount*
        name: GetStepCount
        nameWithType: Agent.GetStepCount
        qualifiedName: Unity.MLAgents.Agent.GetStepCount
    isDefinition: true
    commentId: Overload:Unity.MLAgents.Agent.GetStepCount
  Unity.MLAgents.Agent.ResetReward*:
    name:
      CSharp:
      - id: Unity.MLAgents.Agent.ResetReward*
        name: ResetReward
        nameWithType: Agent.ResetReward
        qualifiedName: Unity.MLAgents.Agent.ResetReward
      VB:
      - id: Unity.MLAgents.Agent.ResetReward*
        name: ResetReward
        nameWithType: Agent.ResetReward
        qualifiedName: Unity.MLAgents.Agent.ResetReward
    isDefinition: true
    commentId: Overload:Unity.MLAgents.Agent.ResetReward
  Unity.MLAgents.Agent.SetReward*:
    name:
      CSharp:
      - id: Unity.MLAgents.Agent.SetReward*
        name: SetReward
        nameWithType: Agent.SetReward
        qualifiedName: Unity.MLAgents.Agent.SetReward
      VB:
      - id: Unity.MLAgents.Agent.SetReward*
        name: SetReward
        nameWithType: Agent.SetReward
        qualifiedName: Unity.MLAgents.Agent.SetReward
    isDefinition: true
    commentId: Overload:Unity.MLAgents.Agent.SetReward
  Unity.MLAgents.Agent.AddReward*:
    name:
      CSharp:
      - id: Unity.MLAgents.Agent.AddReward*
        name: AddReward
        nameWithType: Agent.AddReward
        qualifiedName: Unity.MLAgents.Agent.AddReward
      VB:
      - id: Unity.MLAgents.Agent.AddReward*
        name: AddReward
        nameWithType: Agent.AddReward
        qualifiedName: Unity.MLAgents.Agent.AddReward
    isDefinition: true
    commentId: Overload:Unity.MLAgents.Agent.AddReward
  Unity.MLAgents.Agent.GetReward*:
    name:
      CSharp:
      - id: Unity.MLAgents.Agent.GetReward*
        name: GetReward
        nameWithType: Agent.GetReward
        qualifiedName: Unity.MLAgents.Agent.GetReward
      VB:
      - id: Unity.MLAgents.Agent.GetReward*
        name: GetReward
        nameWithType: Agent.GetReward
        qualifiedName: Unity.MLAgents.Agent.GetReward
    isDefinition: true
    commentId: Overload:Unity.MLAgents.Agent.GetReward
  Unity.MLAgents.Agent.GetCumulativeReward*:
    name:
      CSharp:
      - id: Unity.MLAgents.Agent.GetCumulativeReward*
        name: GetCumulativeReward
        nameWithType: Agent.GetCumulativeReward
        qualifiedName: Unity.MLAgents.Agent.GetCumulativeReward
      VB:
      - id: Unity.MLAgents.Agent.GetCumulativeReward*
        name: GetCumulativeReward
        nameWithType: Agent.GetCumulativeReward
        qualifiedName: Unity.MLAgents.Agent.GetCumulativeReward
    isDefinition: true
    commentId: Overload:Unity.MLAgents.Agent.GetCumulativeReward
  Unity.MLAgents.Agent.Done*:
    name:
      CSharp:
      - id: Unity.MLAgents.Agent.Done*
        name: Done
        nameWithType: Agent.Done
        qualifiedName: Unity.MLAgents.Agent.Done
      VB:
      - id: Unity.MLAgents.Agent.Done*
        name: Done
        nameWithType: Agent.Done
        qualifiedName: Unity.MLAgents.Agent.Done
    isDefinition: true
    commentId: Overload:Unity.MLAgents.Agent.Done
  Unity.MLAgents.Agent.RequestDecision*:
    name:
      CSharp:
      - id: Unity.MLAgents.Agent.RequestDecision*
        name: RequestDecision
        nameWithType: Agent.RequestDecision
        qualifiedName: Unity.MLAgents.Agent.RequestDecision
      VB:
      - id: Unity.MLAgents.Agent.RequestDecision*
        name: RequestDecision
        nameWithType: Agent.RequestDecision
        qualifiedName: Unity.MLAgents.Agent.RequestDecision
    isDefinition: true
    commentId: Overload:Unity.MLAgents.Agent.RequestDecision
  Unity.MLAgents.Agent.RequestAction*:
    name:
      CSharp:
      - id: Unity.MLAgents.Agent.RequestAction*
        name: RequestAction
        nameWithType: Agent.RequestAction
        qualifiedName: Unity.MLAgents.Agent.RequestAction
      VB:
      - id: Unity.MLAgents.Agent.RequestAction*
        name: RequestAction
        nameWithType: Agent.RequestAction
        qualifiedName: Unity.MLAgents.Agent.RequestAction
    isDefinition: true
    commentId: Overload:Unity.MLAgents.Agent.RequestAction
  Unity.MLAgents.Agent.IsMaxStepReached*:
    name:
      CSharp:
      - id: Unity.MLAgents.Agent.IsMaxStepReached*
        name: IsMaxStepReached
        nameWithType: Agent.IsMaxStepReached
        qualifiedName: Unity.MLAgents.Agent.IsMaxStepReached
      VB:
      - id: Unity.MLAgents.Agent.IsMaxStepReached*
        name: IsMaxStepReached
        nameWithType: Agent.IsMaxStepReached
        qualifiedName: Unity.MLAgents.Agent.IsMaxStepReached
    isDefinition: true
    commentId: Overload:Unity.MLAgents.Agent.IsMaxStepReached
  Unity.MLAgents.Agent.IsDone*:
    name:
      CSharp:
      - id: Unity.MLAgents.Agent.IsDone*
        name: IsDone
        nameWithType: Agent.IsDone
        qualifiedName: Unity.MLAgents.Agent.IsDone
      VB:
      - id: Unity.MLAgents.Agent.IsDone*
        name: IsDone
        nameWithType: Agent.IsDone
        qualifiedName: Unity.MLAgents.Agent.IsDone
    isDefinition: true
    commentId: Overload:Unity.MLAgents.Agent.IsDone
  Unity.MLAgents.Agent.InitializeAgent*:
    name:
      CSharp:
      - id: Unity.MLAgents.Agent.InitializeAgent*
        name: InitializeAgent
        nameWithType: Agent.InitializeAgent
        qualifiedName: Unity.MLAgents.Agent.InitializeAgent
      VB:
      - id: Unity.MLAgents.Agent.InitializeAgent*
        name: InitializeAgent
        nameWithType: Agent.InitializeAgent
        qualifiedName: Unity.MLAgents.Agent.InitializeAgent
    isDefinition: true
    commentId: Overload:Unity.MLAgents.Agent.InitializeAgent
  Unity.MLAgents.Agent.AddVectorObs(System.Int32):
    commentId: M:Unity.MLAgents.Agent.AddVectorObs(System.Int32)
  Unity.MLAgents.Agent.AddVectorObs(System.Single):
    commentId: M:Unity.MLAgents.Agent.AddVectorObs(System.Single)
  Unity.MLAgents.Agent.AddVectorObs(Vector3):
    commentId: M:Unity.MLAgents.Agent.AddVectorObs(Vector3)
  Unity.MLAgents.Agent.AddVectorObs(Vector2):
    commentId: M:Unity.MLAgents.Agent.AddVectorObs(Vector2)
  Unity.MLAgents.Agent.AddVectorObs(System.Single[]):
    commentId: M:Unity.MLAgents.Agent.AddVectorObs(System.Single[])
  Unity.MLAgents.Agent.AddVectorObs(System.Collections.Generic.List{System.Single}):
    commentId: M:Unity.MLAgents.Agent.AddVectorObs(System.Collections.Generic.List{System.Single})
  Unity.MLAgents.Agent.AddVectorObs(Quaternion):
    commentId: M:Unity.MLAgents.Agent.AddVectorObs(Quaternion)
  Unity.MLAgents.Agent.SetTextObs(System.String):
    commentId: M:Unity.MLAgents.Agent.SetTextObs(System.String)
  Unity.MLAgents.Agent.CollectObservations*:
    name:
      CSharp:
      - id: Unity.MLAgents.Agent.CollectObservations*
        name: CollectObservations
        nameWithType: Agent.CollectObservations
        qualifiedName: Unity.MLAgents.Agent.CollectObservations
      VB:
      - id: Unity.MLAgents.Agent.CollectObservations*
        name: CollectObservations
        nameWithType: Agent.CollectObservations
        qualifiedName: Unity.MLAgents.Agent.CollectObservations
    isDefinition: true
    commentId: Overload:Unity.MLAgents.Agent.CollectObservations
  Unity.MLAgents.Agent.AddVectorObs*:
    name:
      CSharp:
      - id: Unity.MLAgents.Agent.AddVectorObs*
        name: AddVectorObs
        nameWithType: Agent.AddVectorObs
        qualifiedName: Unity.MLAgents.Agent.AddVectorObs
      VB:
      - id: Unity.MLAgents.Agent.AddVectorObs*
        name: AddVectorObs
        nameWithType: Agent.AddVectorObs
        qualifiedName: Unity.MLAgents.Agent.AddVectorObs
    isDefinition: true
    commentId: Overload:Unity.MLAgents.Agent.AddVectorObs
  Vector3:
    name:
      CSharp:
      - id: Vector3
        name: Vector3
        nameWithType: Vector3
        qualifiedName: Vector3
        isExternal: true
      VB:
      - id: Vector3
        name: Vector3
        nameWithType: Vector3
        qualifiedName: Vector3
        isExternal: true
    isDefinition: true
    commentId: '!:Vector3'
  Vector2:
    name:
      CSharp:
      - id: Vector2
        name: Vector2
        nameWithType: Vector2
        qualifiedName: Vector2
        isExternal: true
      VB:
      - id: Vector2
        name: Vector2
        nameWithType: Vector2
        qualifiedName: Vector2
        isExternal: true
    isDefinition: true
    commentId: '!:Vector2'
  Quaternion:
    name:
      CSharp:
      - id: Quaternion
        name: Quaternion
        nameWithType: Quaternion
        qualifiedName: Quaternion
        isExternal: true
      VB:
      - id: Quaternion
        name: Quaternion
        nameWithType: Quaternion
        qualifiedName: Quaternion
        isExternal: true
    isDefinition: true
    commentId: '!:Quaternion'
  Unity.MLAgents.Agent.SetTextObs*:
    name:
      CSharp:
      - id: Unity.MLAgents.Agent.SetTextObs*
        name: SetTextObs
        nameWithType: Agent.SetTextObs
        qualifiedName: Unity.MLAgents.Agent.SetTextObs
      VB:
      - id: Unity.MLAgents.Agent.SetTextObs*
        name: SetTextObs
        nameWithType: Agent.SetTextObs
        qualifiedName: Unity.MLAgents.Agent.SetTextObs
    isDefinition: true
    commentId: Overload:Unity.MLAgents.Agent.SetTextObs
  Unity.MLAgents.Agent.AgentAction*:
    name:
      CSharp:
      - id: Unity.MLAgents.Agent.AgentAction*
        name: AgentAction
        nameWithType: Agent.AgentAction
        qualifiedName: Unity.MLAgents.Agent.AgentAction
      VB:
      - id: Unity.MLAgents.Agent.AgentAction*
        name: AgentAction
        nameWithType: Agent.AgentAction
        qualifiedName: Unity.MLAgents.Agent.AgentAction
    isDefinition: true
    commentId: Overload:Unity.MLAgents.Agent.AgentAction
  Unity.MLAgents.AgentParameters.resetOnDone:
    commentId: F:Unity.MLAgents.AgentParameters.resetOnDone
  Unity.MLAgents.Agent.AgentOnDone*:
    name:
      CSharp:
      - id: Unity.MLAgents.Agent.AgentOnDone*
        name: AgentOnDone
        nameWithType: Agent.AgentOnDone
        qualifiedName: Unity.MLAgents.Agent.AgentOnDone
      VB:
      - id: Unity.MLAgents.Agent.AgentOnDone*
        name: AgentOnDone
        nameWithType: Agent.AgentOnDone
        qualifiedName: Unity.MLAgents.Agent.AgentOnDone
    isDefinition: true
    commentId: Overload:Unity.MLAgents.Agent.AgentOnDone
  Unity.MLAgents.Agent.AgentReset*:
    name:
      CSharp:
      - id: Unity.MLAgents.Agent.AgentReset*
        name: AgentReset
        nameWithType: Agent.AgentReset
        qualifiedName: Unity.MLAgents.Agent.AgentReset
      VB:
      - id: Unity.MLAgents.Agent.AgentReset*
        name: AgentReset
        nameWithType: Agent.AgentReset
        qualifiedName: Unity.MLAgents.Agent.AgentReset
    isDefinition: true
    commentId: Overload:Unity.MLAgents.Agent.AgentReset
  Unity.MLAgents.Agent.UpdateVectorAction*:
    name:
      CSharp:
      - id: Unity.MLAgents.Agent.UpdateVectorAction*
        name: UpdateVectorAction
        nameWithType: Agent.UpdateVectorAction
        qualifiedName: Unity.MLAgents.Agent.UpdateVectorAction
      VB:
      - id: Unity.MLAgents.Agent.UpdateVectorAction*
        name: UpdateVectorAction
        nameWithType: Agent.UpdateVectorAction
        qualifiedName: Unity.MLAgents.Agent.UpdateVectorAction
    isDefinition: true
    commentId: Overload:Unity.MLAgents.Agent.UpdateVectorAction
  Unity.MLAgents.Agent.UpdateMemoriesAction*:
    name:
      CSharp:
      - id: Unity.MLAgents.Agent.UpdateMemoriesAction*
        name: UpdateMemoriesAction
        nameWithType: Agent.UpdateMemoriesAction
        qualifiedName: Unity.MLAgents.Agent.UpdateMemoriesAction
      VB:
      - id: Unity.MLAgents.Agent.UpdateMemoriesAction*
        name: UpdateMemoriesAction
        nameWithType: Agent.UpdateMemoriesAction
        qualifiedName: Unity.MLAgents.Agent.UpdateMemoriesAction
    isDefinition: true
    commentId: Overload:Unity.MLAgents.Agent.UpdateMemoriesAction
  Unity.MLAgents.Agent.UpdateTextAction*:
    name:
      CSharp:
      - id: Unity.MLAgents.Agent.UpdateTextAction*
        name: UpdateTextAction
        nameWithType: Agent.UpdateTextAction
        qualifiedName: Unity.MLAgents.Agent.UpdateTextAction
      VB:
      - id: Unity.MLAgents.Agent.UpdateTextAction*
        name: UpdateTextAction
        nameWithType: Agent.UpdateTextAction
        qualifiedName: Unity.MLAgents.Agent.UpdateTextAction
    isDefinition: true
    commentId: Overload:Unity.MLAgents.Agent.UpdateTextAction
  Texture2D:
    name:
      CSharp:
      - id: Texture2D
        name: Texture2D
        nameWithType: Texture2D
        qualifiedName: Texture2D
        isExternal: true
      VB:
      - id: Texture2D
        name: Texture2D
        nameWithType: Texture2D
        qualifiedName: Texture2D
        isExternal: true
    isDefinition: true
    commentId: '!:Texture2D'
  Camera:
    name:
      CSharp:
      - id: Camera
        name: Camera
        nameWithType: Camera
        qualifiedName: Camera
        isExternal: true
      VB:
      - id: Camera
        name: Camera
        nameWithType: Camera
        qualifiedName: Camera
        isExternal: true
    isDefinition: true
    commentId: '!:Camera'
  Unity.MLAgents.Agent.ObservationToTexture*:
    name:
      CSharp:
      - id: Unity.MLAgents.Agent.ObservationToTexture*
        name: ObservationToTexture
        nameWithType: Agent.ObservationToTexture
        qualifiedName: Unity.MLAgents.Agent.ObservationToTexture
      VB:
      - id: Unity.MLAgents.Agent.ObservationToTexture*
        name: ObservationToTexture
        nameWithType: Agent.ObservationToTexture
        qualifiedName: Unity.MLAgents.Agent.ObservationToTexture
    isDefinition: true
    commentId: Overload:Unity.MLAgents.Agent.ObservationToTexture
  Unity.MLAgents.Agent:
    name:
      CSharp:
      - id: Unity.MLAgents.Agent
        name: Agent
        nameWithType: Agent
        qualifiedName: Unity.MLAgents.Agent
      VB:
      - id: Unity.MLAgents.Agent
        name: Agent
        nameWithType: Agent
        qualifiedName: Unity.MLAgents.Agent
    isDefinition: true
    parent: Unity.MLAgents
    commentId: T:Unity.MLAgents.Agent
  KeyCode:
    name:
      CSharp:
      - id: KeyCode
        name: KeyCode
        nameWithType: KeyCode
        qualifiedName: KeyCode
        isExternal: true
      VB:
      - id: KeyCode
        name: KeyCode
        nameWithType: KeyCode
        qualifiedName: KeyCode
        isExternal: true
    isDefinition: true
  Unity.MLAgents.BCTeacherHelper:
    name:
      CSharp:
      - id: Unity.MLAgents.BCTeacherHelper
        name: BCTeacherHelper
        nameWithType: BCTeacherHelper
        qualifiedName: Unity.MLAgents.BCTeacherHelper
      VB:
      - id: Unity.MLAgents.BCTeacherHelper
        name: BCTeacherHelper
        nameWithType: BCTeacherHelper
        qualifiedName: Unity.MLAgents.BCTeacherHelper
    isDefinition: true
    commentId: T:Unity.MLAgents.BCTeacherHelper
  Unity.MLAgents.BrainType:
    name:
      CSharp:
      - id: Unity.MLAgents.BrainType
        name: BrainType
        nameWithType: BrainType
        qualifiedName: Unity.MLAgents.BrainType
      VB:
      - id: Unity.MLAgents.BrainType
        name: BrainType
        nameWithType: BrainType
        qualifiedName: Unity.MLAgents.BrainType
    isDefinition: true
    parent: Unity.MLAgents
    commentId: T:Unity.MLAgents.BrainType
  Unity.MLAgents.SpaceType:
    name:
      CSharp:
      - id: Unity.MLAgents.SpaceType
        name: SpaceType
        nameWithType: SpaceType
        qualifiedName: Unity.MLAgents.SpaceType
      VB:
      - id: Unity.MLAgents.SpaceType
        name: SpaceType
        nameWithType: SpaceType
        qualifiedName: Unity.MLAgents.SpaceType
    isDefinition: true
    parent: Unity.MLAgents
    commentId: T:Unity.MLAgents.SpaceType
  Unity.MLAgents.resolution:
    name:
      CSharp:
      - id: Unity.MLAgents.resolution
        name: resolution
        nameWithType: resolution
        qualifiedName: Unity.MLAgents.resolution
      VB:
      - id: Unity.MLAgents.resolution
        name: resolution
        nameWithType: resolution
        qualifiedName: Unity.MLAgents.resolution
    isDefinition: true
    commentId: T:Unity.MLAgents.resolution
  Unity.MLAgents.resolution[]:
    name:
      CSharp:
      - id: Unity.MLAgents.resolution
        name: resolution
        nameWithType: resolution
        qualifiedName: Unity.MLAgents.resolution
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: Unity.MLAgents.resolution
        name: resolution
        nameWithType: resolution
        qualifiedName: Unity.MLAgents.resolution
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  System.String[]:
    name:
      CSharp:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  Unity.MLAgents.BrainParameters:
    name:
      CSharp:
      - id: Unity.MLAgents.BrainParameters
        name: BrainParameters
        nameWithType: BrainParameters
        qualifiedName: Unity.MLAgents.BrainParameters
      VB:
      - id: Unity.MLAgents.BrainParameters
        name: BrainParameters
        nameWithType: BrainParameters
        qualifiedName: Unity.MLAgents.BrainParameters
    isDefinition: true
    parent: Unity.MLAgents
    commentId: T:Unity.MLAgents.BrainParameters
  Unity.MLAgents.CoreBrain:
    name:
      CSharp:
      - id: Unity.MLAgents.CoreBrain
        name: CoreBrain
        nameWithType: CoreBrain
        qualifiedName: Unity.MLAgents.CoreBrain
      VB:
      - id: Unity.MLAgents.CoreBrain
        name: CoreBrain
        nameWithType: CoreBrain
        qualifiedName: Unity.MLAgents.CoreBrain
    isDefinition: true
    parent: Unity.MLAgents
    commentId: T:Unity.MLAgents.CoreBrain
  Unity.MLAgents.Brain.UpdateCoreBrains*:
    name:
      CSharp:
      - id: Unity.MLAgents.Brain.UpdateCoreBrains*
        name: UpdateCoreBrains
        nameWithType: Brain.UpdateCoreBrains
        qualifiedName: Unity.MLAgents.Brain.UpdateCoreBrains
      VB:
      - id: Unity.MLAgents.Brain.UpdateCoreBrains*
        name: UpdateCoreBrains
        nameWithType: Brain.UpdateCoreBrains
        qualifiedName: Unity.MLAgents.Brain.UpdateCoreBrains
    isDefinition: true
    commentId: Overload:Unity.MLAgents.Brain.UpdateCoreBrains
  Unity.MLAgents.Brain.InitializeBrain*:
    name:
      CSharp:
      - id: Unity.MLAgents.Brain.InitializeBrain*
        name: InitializeBrain
        nameWithType: Brain.InitializeBrain
        qualifiedName: Unity.MLAgents.Brain.InitializeBrain
      VB:
      - id: Unity.MLAgents.Brain.InitializeBrain*
        name: InitializeBrain
        nameWithType: Brain.InitializeBrain
        qualifiedName: Unity.MLAgents.Brain.InitializeBrain
    isDefinition: true
    commentId: Overload:Unity.MLAgents.Brain.InitializeBrain
  Unity.MLAgents.Brain.SendState*:
    name:
      CSharp:
      - id: Unity.MLAgents.Brain.SendState*
        name: SendState
        nameWithType: Brain.SendState
        qualifiedName: Unity.MLAgents.Brain.SendState
      VB:
      - id: Unity.MLAgents.Brain.SendState*
        name: SendState
        nameWithType: Brain.SendState
        qualifiedName: Unity.MLAgents.Brain.SendState
    isDefinition: true
    commentId: Overload:Unity.MLAgents.Brain.SendState
  System.Collections.Generic.Dictionary`2:
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2
        name: Dictionary
        nameWithType: Dictionary
        qualifiedName: System.Collections.Generic.Dictionary
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TKey
        nameWithType: TKey
        qualifiedName: TKey
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TValue
        nameWithType: TValue
        qualifiedName: TValue
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.Dictionary`2
        name: Dictionary
        nameWithType: Dictionary
        qualifiedName: System.Collections.Generic.Dictionary
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TKey
        nameWithType: TKey
        qualifiedName: TKey
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TValue
        nameWithType: TValue
        qualifiedName: TValue
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Collections.Generic.Dictionary`2
  System.Collections.Generic.Dictionary{System.String,System.Single}:
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2
        name: Dictionary
        nameWithType: Dictionary
        qualifiedName: System.Collections.Generic.Dictionary
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.Dictionary`2
        name: Dictionary
        nameWithType: Dictionary
        qualifiedName: System.Collections.Generic.Dictionary
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.Dictionary`2
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.Dictionary{System.String,System.Single}
  System.Collections.Generic.List{System.String}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{System.String}
  System.Collections.Generic.List{Unity.MLAgents.BrainParameters}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Unity.MLAgents.BrainParameters
        name: BrainParameters
        nameWithType: BrainParameters
        qualifiedName: Unity.MLAgents.BrainParameters
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Unity.MLAgents.BrainParameters
        name: BrainParameters
        nameWithType: BrainParameters
        qualifiedName: Unity.MLAgents.BrainParameters
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{Unity.MLAgents.BrainParameters}
  Unity.MLAgents.AcademyParameters:
    name:
      CSharp:
      - id: Unity.MLAgents.AcademyParameters
        name: AcademyParameters
        nameWithType: AcademyParameters
        qualifiedName: Unity.MLAgents.AcademyParameters
      VB:
      - id: Unity.MLAgents.AcademyParameters
        name: AcademyParameters
        nameWithType: AcademyParameters
        qualifiedName: Unity.MLAgents.AcademyParameters
    isDefinition: true
    commentId: T:Unity.MLAgents.AcademyParameters
  Unity.MLAgents.ExternalCommand:
    name:
      CSharp:
      - id: Unity.MLAgents.ExternalCommand
        name: ExternalCommand
        nameWithType: ExternalCommand
        qualifiedName: Unity.MLAgents.ExternalCommand
      VB:
      - id: Unity.MLAgents.ExternalCommand
        name: ExternalCommand
        nameWithType: ExternalCommand
        qualifiedName: Unity.MLAgents.ExternalCommand
    isDefinition: true
    parent: Unity.MLAgents
    commentId: T:Unity.MLAgents.ExternalCommand
  Unity.MLAgents.Communicator.SubscribeBrain*:
    name:
      CSharp:
      - id: Unity.MLAgents.Communicator.SubscribeBrain*
        name: SubscribeBrain
        nameWithType: Communicator.SubscribeBrain
        qualifiedName: Unity.MLAgents.Communicator.SubscribeBrain
      VB:
      - id: Unity.MLAgents.Communicator.SubscribeBrain*
        name: SubscribeBrain
        nameWithType: Communicator.SubscribeBrain
        qualifiedName: Unity.MLAgents.Communicator.SubscribeBrain
    isDefinition: true
    commentId: Overload:Unity.MLAgents.Communicator.SubscribeBrain
  Unity.MLAgents.Communicator.CommunicatorHandShake*:
    name:
      CSharp:
      - id: Unity.MLAgents.Communicator.CommunicatorHandShake*
        name: CommunicatorHandShake
        nameWithType: Communicator.CommunicatorHandShake
        qualifiedName: Unity.MLAgents.Communicator.CommunicatorHandShake
      VB:
      - id: Unity.MLAgents.Communicator.CommunicatorHandShake*
        name: CommunicatorHandShake
        nameWithType: Communicator.CommunicatorHandShake
        qualifiedName: Unity.MLAgents.Communicator.CommunicatorHandShake
    isDefinition: true
    commentId: Overload:Unity.MLAgents.Communicator.CommunicatorHandShake
  Unity.MLAgents.Communicator.InitializeCommunicator*:
    name:
      CSharp:
      - id: Unity.MLAgents.Communicator.InitializeCommunicator*
        name: InitializeCommunicator
        nameWithType: Communicator.InitializeCommunicator
        qualifiedName: Unity.MLAgents.Communicator.InitializeCommunicator
      VB:
      - id: Unity.MLAgents.Communicator.InitializeCommunicator*
        name: InitializeCommunicator
        nameWithType: Communicator.InitializeCommunicator
        qualifiedName: Unity.MLAgents.Communicator.InitializeCommunicator
    isDefinition: true
    commentId: Overload:Unity.MLAgents.Communicator.InitializeCommunicator
  Unity.MLAgents.Communicator.UpdateActions*:
    name:
      CSharp:
      - id: Unity.MLAgents.Communicator.UpdateActions*
        name: UpdateActions
        nameWithType: Communicator.UpdateActions
        qualifiedName: Unity.MLAgents.Communicator.UpdateActions
      VB:
      - id: Unity.MLAgents.Communicator.UpdateActions*
        name: UpdateActions
        nameWithType: Communicator.UpdateActions
        qualifiedName: Unity.MLAgents.Communicator.UpdateActions
    isDefinition: true
    commentId: Overload:Unity.MLAgents.Communicator.UpdateActions
  Unity.MLAgents.Communicator.GetCommand*:
    name:
      CSharp:
      - id: Unity.MLAgents.Communicator.GetCommand*
        name: GetCommand
        nameWithType: Communicator.GetCommand
        qualifiedName: Unity.MLAgents.Communicator.GetCommand
      VB:
      - id: Unity.MLAgents.Communicator.GetCommand*
        name: GetCommand
        nameWithType: Communicator.GetCommand
        qualifiedName: Unity.MLAgents.Communicator.GetCommand
    isDefinition: true
    commentId: Overload:Unity.MLAgents.Communicator.GetCommand
  Unity.MLAgents.Communicator.UpdateCommand*:
    name:
      CSharp:
      - id: Unity.MLAgents.Communicator.UpdateCommand*
        name: UpdateCommand
        nameWithType: Communicator.UpdateCommand
        qualifiedName: Unity.MLAgents.Communicator.UpdateCommand
      VB:
      - id: Unity.MLAgents.Communicator.UpdateCommand*
        name: UpdateCommand
        nameWithType: Communicator.UpdateCommand
        qualifiedName: Unity.MLAgents.Communicator.UpdateCommand
    isDefinition: true
    commentId: Overload:Unity.MLAgents.Communicator.UpdateCommand
  Unity.MLAgents.Communicator.SetCommand*:
    name:
      CSharp:
      - id: Unity.MLAgents.Communicator.SetCommand*
        name: SetCommand
        nameWithType: Communicator.SetCommand
        qualifiedName: Unity.MLAgents.Communicator.SetCommand
      VB:
      - id: Unity.MLAgents.Communicator.SetCommand*
        name: SetCommand
        nameWithType: Communicator.SetCommand
        qualifiedName: Unity.MLAgents.Communicator.SetCommand
    isDefinition: true
    commentId: Overload:Unity.MLAgents.Communicator.SetCommand
  Unity.MLAgents.Communicator.GetResetParameters*:
    name:
      CSharp:
      - id: Unity.MLAgents.Communicator.GetResetParameters*
        name: GetResetParameters
        nameWithType: Communicator.GetResetParameters
        qualifiedName: Unity.MLAgents.Communicator.GetResetParameters
      VB:
      - id: Unity.MLAgents.Communicator.GetResetParameters*
        name: GetResetParameters
        nameWithType: Communicator.GetResetParameters
        qualifiedName: Unity.MLAgents.Communicator.GetResetParameters
    isDefinition: true
    commentId: Overload:Unity.MLAgents.Communicator.GetResetParameters
  System.Collections.Generic.Dictionary{System.String,System.Boolean}:
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2
        name: Dictionary
        nameWithType: Dictionary
        qualifiedName: System.Collections.Generic.Dictionary
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.Dictionary`2
        name: Dictionary
        nameWithType: Dictionary
        qualifiedName: System.Collections.Generic.Dictionary
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.Dictionary`2
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.Dictionary{System.String,System.Boolean}
  Unity.MLAgents.Communicator.GetHasTried*:
    name:
      CSharp:
      - id: Unity.MLAgents.Communicator.GetHasTried*
        name: GetHasTried
        nameWithType: Communicator.GetHasTried
        qualifiedName: Unity.MLAgents.Communicator.GetHasTried
      VB:
      - id: Unity.MLAgents.Communicator.GetHasTried*
        name: GetHasTried
        nameWithType: Communicator.GetHasTried
        qualifiedName: Unity.MLAgents.Communicator.GetHasTried
    isDefinition: true
    commentId: Overload:Unity.MLAgents.Communicator.GetHasTried
  Unity.MLAgents.Communicator.GetSent*:
    name:
      CSharp:
      - id: Unity.MLAgents.Communicator.GetSent*
        name: GetSent
        nameWithType: Communicator.GetSent
        qualifiedName: Unity.MLAgents.Communicator.GetSent
      VB:
      - id: Unity.MLAgents.Communicator.GetSent*
        name: GetSent
        nameWithType: Communicator.GetSent
        qualifiedName: Unity.MLAgents.Communicator.GetSent
    isDefinition: true
    commentId: Overload:Unity.MLAgents.Communicator.GetSent
  Unity.MLAgents.CoreBrain.SetBrain*:
    name:
      CSharp:
      - id: Unity.MLAgents.CoreBrain.SetBrain*
        name: SetBrain
        nameWithType: CoreBrain.SetBrain
        qualifiedName: Unity.MLAgents.CoreBrain.SetBrain
      VB:
      - id: Unity.MLAgents.CoreBrain.SetBrain*
        name: SetBrain
        nameWithType: CoreBrain.SetBrain
        qualifiedName: Unity.MLAgents.CoreBrain.SetBrain
    isDefinition: true
    commentId: Overload:Unity.MLAgents.CoreBrain.SetBrain
  Unity.MLAgents.CoreBrain.InitializeCoreBrain*:
    name:
      CSharp:
      - id: Unity.MLAgents.CoreBrain.InitializeCoreBrain*
        name: InitializeCoreBrain
        nameWithType: CoreBrain.InitializeCoreBrain
        qualifiedName: Unity.MLAgents.CoreBrain.InitializeCoreBrain
      VB:
      - id: Unity.MLAgents.CoreBrain.InitializeCoreBrain*
        name: InitializeCoreBrain
        nameWithType: CoreBrain.InitializeCoreBrain
        qualifiedName: Unity.MLAgents.CoreBrain.InitializeCoreBrain
    isDefinition: true
    commentId: Overload:Unity.MLAgents.CoreBrain.InitializeCoreBrain
  System.Collections.Generic.Dictionary{Unity.MLAgents.Agent,Unity.MLAgents.AgentInfo}:
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2
        name: Dictionary
        nameWithType: Dictionary
        qualifiedName: System.Collections.Generic.Dictionary
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Unity.MLAgents.Agent
        name: Agent
        nameWithType: Agent
        qualifiedName: Unity.MLAgents.Agent
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Unity.MLAgents.AgentInfo
        name: AgentInfo
        nameWithType: AgentInfo
        qualifiedName: Unity.MLAgents.AgentInfo
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.Dictionary`2
        name: Dictionary
        nameWithType: Dictionary
        qualifiedName: System.Collections.Generic.Dictionary
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Unity.MLAgents.Agent
        name: Agent
        nameWithType: Agent
        qualifiedName: Unity.MLAgents.Agent
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Unity.MLAgents.AgentInfo
        name: AgentInfo
        nameWithType: AgentInfo
        qualifiedName: Unity.MLAgents.AgentInfo
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.Dictionary`2
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.Dictionary{Unity.MLAgents.Agent,Unity.MLAgents.AgentInfo}
  Unity.MLAgents.CoreBrain.DecideAction*:
    name:
      CSharp:
      - id: Unity.MLAgents.CoreBrain.DecideAction*
        name: DecideAction
        nameWithType: CoreBrain.DecideAction
        qualifiedName: Unity.MLAgents.CoreBrain.DecideAction
      VB:
      - id: Unity.MLAgents.CoreBrain.DecideAction*
        name: DecideAction
        nameWithType: CoreBrain.DecideAction
        qualifiedName: Unity.MLAgents.CoreBrain.DecideAction
    isDefinition: true
    commentId: Overload:Unity.MLAgents.CoreBrain.DecideAction
  Unity.MLAgents.CoreBrain.OnInspector*:
    name:
      CSharp:
      - id: Unity.MLAgents.CoreBrain.OnInspector*
        name: OnInspector
        nameWithType: CoreBrain.OnInspector
        qualifiedName: Unity.MLAgents.CoreBrain.OnInspector
      VB:
      - id: Unity.MLAgents.CoreBrain.OnInspector*
        name: OnInspector
        nameWithType: CoreBrain.OnInspector
        qualifiedName: Unity.MLAgents.CoreBrain.OnInspector
    isDefinition: true
    commentId: Overload:Unity.MLAgents.CoreBrain.OnInspector
  ScriptableObject:
    name:
      CSharp:
      - id: ScriptableObject
        name: ScriptableObject
        nameWithType: ScriptableObject
        qualifiedName: ScriptableObject
        isExternal: true
      VB:
      - id: ScriptableObject
        name: ScriptableObject
        nameWithType: ScriptableObject
        qualifiedName: ScriptableObject
        isExternal: true
    isDefinition: true
  Unity.MLAgents.CoreBrainExternal.SetBrain*:
    name:
      CSharp:
      - id: Unity.MLAgents.CoreBrainExternal.SetBrain*
        name: SetBrain
        nameWithType: CoreBrainExternal.SetBrain
        qualifiedName: Unity.MLAgents.CoreBrainExternal.SetBrain
      VB:
      - id: Unity.MLAgents.CoreBrainExternal.SetBrain*
        name: SetBrain
        nameWithType: CoreBrainExternal.SetBrain
        qualifiedName: Unity.MLAgents.CoreBrainExternal.SetBrain
    isDefinition: true
    commentId: Overload:Unity.MLAgents.CoreBrainExternal.SetBrain
  Unity.MLAgents.CoreBrain.SetBrain(Unity.MLAgents.Brain):
    name:
      CSharp:
      - id: Unity.MLAgents.CoreBrain.SetBrain(Unity.MLAgents.Brain)
        name: SetBrain
        nameWithType: CoreBrain.SetBrain
        qualifiedName: Unity.MLAgents.CoreBrain.SetBrain
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Unity.MLAgents.Brain
        name: Brain
        nameWithType: Brain
        qualifiedName: Unity.MLAgents.Brain
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Unity.MLAgents.CoreBrain.SetBrain(Unity.MLAgents.Brain)
        name: SetBrain
        nameWithType: CoreBrain.SetBrain
        qualifiedName: Unity.MLAgents.CoreBrain.SetBrain
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Unity.MLAgents.Brain
        name: Brain
        nameWithType: Brain
        qualifiedName: Unity.MLAgents.Brain
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Unity.MLAgents.CoreBrain
    commentId: M:Unity.MLAgents.CoreBrain.SetBrain(Unity.MLAgents.Brain)
  Unity.MLAgents.CoreBrainExternal.InitializeCoreBrain*:
    name:
      CSharp:
      - id: Unity.MLAgents.CoreBrainExternal.InitializeCoreBrain*
        name: InitializeCoreBrain
        nameWithType: CoreBrainExternal.InitializeCoreBrain
        qualifiedName: Unity.MLAgents.CoreBrainExternal.InitializeCoreBrain
      VB:
      - id: Unity.MLAgents.CoreBrainExternal.InitializeCoreBrain*
        name: InitializeCoreBrain
        nameWithType: CoreBrainExternal.InitializeCoreBrain
        qualifiedName: Unity.MLAgents.CoreBrainExternal.InitializeCoreBrain
    isDefinition: true
    commentId: Overload:Unity.MLAgents.CoreBrainExternal.InitializeCoreBrain
  Unity.MLAgents.CoreBrain.InitializeCoreBrain(Unity.MLAgents.Communicator):
    name:
      CSharp:
      - id: Unity.MLAgents.CoreBrain.InitializeCoreBrain(Unity.MLAgents.Communicator)
        name: InitializeCoreBrain
        nameWithType: CoreBrain.InitializeCoreBrain
        qualifiedName: Unity.MLAgents.CoreBrain.InitializeCoreBrain
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Unity.MLAgents.Communicator
        name: Communicator
        nameWithType: Communicator
        qualifiedName: Unity.MLAgents.Communicator
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Unity.MLAgents.CoreBrain.InitializeCoreBrain(Unity.MLAgents.Communicator)
        name: InitializeCoreBrain
        nameWithType: CoreBrain.InitializeCoreBrain
        qualifiedName: Unity.MLAgents.CoreBrain.InitializeCoreBrain
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Unity.MLAgents.Communicator
        name: Communicator
        nameWithType: Communicator
        qualifiedName: Unity.MLAgents.Communicator
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Unity.MLAgents.CoreBrain
    commentId: M:Unity.MLAgents.CoreBrain.InitializeCoreBrain(Unity.MLAgents.Communicator)
  Unity.MLAgents.CoreBrainExternal.DecideAction*:
    name:
      CSharp:
      - id: Unity.MLAgents.CoreBrainExternal.DecideAction*
        name: DecideAction
        nameWithType: CoreBrainExternal.DecideAction
        qualifiedName: Unity.MLAgents.CoreBrainExternal.DecideAction
      VB:
      - id: Unity.MLAgents.CoreBrainExternal.DecideAction*
        name: DecideAction
        nameWithType: CoreBrainExternal.DecideAction
        qualifiedName: Unity.MLAgents.CoreBrainExternal.DecideAction
    isDefinition: true
    commentId: Overload:Unity.MLAgents.CoreBrainExternal.DecideAction
  Unity.MLAgents.CoreBrain.DecideAction(System.Collections.Generic.Dictionary{Unity.MLAgents.Agent,Unity.MLAgents.AgentInfo}):
    name:
      CSharp:
      - id: Unity.MLAgents.CoreBrain.DecideAction(System.Collections.Generic.Dictionary{Unity.MLAgents.Agent,Unity.MLAgents.AgentInfo})
        name: DecideAction
        nameWithType: CoreBrain.DecideAction
        qualifiedName: Unity.MLAgents.CoreBrain.DecideAction
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.Dictionary`2
        name: Dictionary
        nameWithType: Dictionary
        qualifiedName: System.Collections.Generic.Dictionary
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Unity.MLAgents.Agent
        name: Agent
        nameWithType: Agent
        qualifiedName: Unity.MLAgents.Agent
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Unity.MLAgents.AgentInfo
        name: AgentInfo
        nameWithType: AgentInfo
        qualifiedName: Unity.MLAgents.AgentInfo
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Unity.MLAgents.CoreBrain.DecideAction(System.Collections.Generic.Dictionary{Unity.MLAgents.Agent,Unity.MLAgents.AgentInfo})
        name: DecideAction
        nameWithType: CoreBrain.DecideAction
        qualifiedName: Unity.MLAgents.CoreBrain.DecideAction
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.Dictionary`2
        name: Dictionary
        nameWithType: Dictionary
        qualifiedName: System.Collections.Generic.Dictionary
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Unity.MLAgents.Agent
        name: Agent
        nameWithType: Agent
        qualifiedName: Unity.MLAgents.Agent
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Unity.MLAgents.AgentInfo
        name: AgentInfo
        nameWithType: AgentInfo
        qualifiedName: Unity.MLAgents.AgentInfo
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Unity.MLAgents.CoreBrain
    commentId: M:Unity.MLAgents.CoreBrain.DecideAction(System.Collections.Generic.Dictionary{Unity.MLAgents.Agent,Unity.MLAgents.AgentInfo})
  Unity.MLAgents.CoreBrainExternal.OnInspector*:
    name:
      CSharp:
      - id: Unity.MLAgents.CoreBrainExternal.OnInspector*
        name: OnInspector
        nameWithType: CoreBrainExternal.OnInspector
        qualifiedName: Unity.MLAgents.CoreBrainExternal.OnInspector
      VB:
      - id: Unity.MLAgents.CoreBrainExternal.OnInspector*
        name: OnInspector
        nameWithType: CoreBrainExternal.OnInspector
        qualifiedName: Unity.MLAgents.CoreBrainExternal.OnInspector
    isDefinition: true
    commentId: Overload:Unity.MLAgents.CoreBrainExternal.OnInspector
  Unity.MLAgents.CoreBrain.OnInspector:
    name:
      CSharp:
      - id: Unity.MLAgents.CoreBrain.OnInspector
        name: OnInspector
        nameWithType: CoreBrain.OnInspector
        qualifiedName: Unity.MLAgents.CoreBrain.OnInspector
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Unity.MLAgents.CoreBrain.OnInspector
        name: OnInspector
        nameWithType: CoreBrain.OnInspector
        qualifiedName: Unity.MLAgents.CoreBrain.OnInspector
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Unity.MLAgents.CoreBrain
    commentId: M:Unity.MLAgents.CoreBrain.OnInspector
  Unity.MLAgents.CoreBrainExternal:
    name:
      CSharp:
      - id: Unity.MLAgents.CoreBrainExternal
        name: CoreBrainExternal
        nameWithType: CoreBrainExternal
        qualifiedName: Unity.MLAgents.CoreBrainExternal
      VB:
      - id: Unity.MLAgents.CoreBrainExternal
        name: CoreBrainExternal
        nameWithType: CoreBrainExternal
        qualifiedName: Unity.MLAgents.CoreBrainExternal
    isDefinition: true
    commentId: T:Unity.MLAgents.CoreBrainExternal
  Unity.MLAgents.Decision:
    name:
      CSharp:
      - id: Unity.MLAgents.Decision
        name: Decision
        nameWithType: Decision
        qualifiedName: Unity.MLAgents.Decision
      VB:
      - id: Unity.MLAgents.Decision
        name: Decision
        nameWithType: Decision
        qualifiedName: Unity.MLAgents.Decision
    isDefinition: true
    parent: Unity.MLAgents
    commentId: T:Unity.MLAgents.Decision
  Unity.MLAgents.CoreBrainHeuristic.SetBrain*:
    name:
      CSharp:
      - id: Unity.MLAgents.CoreBrainHeuristic.SetBrain*
        name: SetBrain
        nameWithType: CoreBrainHeuristic.SetBrain
        qualifiedName: Unity.MLAgents.CoreBrainHeuristic.SetBrain
      VB:
      - id: Unity.MLAgents.CoreBrainHeuristic.SetBrain*
        name: SetBrain
        nameWithType: CoreBrainHeuristic.SetBrain
        qualifiedName: Unity.MLAgents.CoreBrainHeuristic.SetBrain
    isDefinition: true
    commentId: Overload:Unity.MLAgents.CoreBrainHeuristic.SetBrain
  Unity.MLAgents.CoreBrainHeuristic.InitializeCoreBrain*:
    name:
      CSharp:
      - id: Unity.MLAgents.CoreBrainHeuristic.InitializeCoreBrain*
        name: InitializeCoreBrain
        nameWithType: CoreBrainHeuristic.InitializeCoreBrain
        qualifiedName: Unity.MLAgents.CoreBrainHeuristic.InitializeCoreBrain
      VB:
      - id: Unity.MLAgents.CoreBrainHeuristic.InitializeCoreBrain*
        name: InitializeCoreBrain
        nameWithType: CoreBrainHeuristic.InitializeCoreBrain
        qualifiedName: Unity.MLAgents.CoreBrainHeuristic.InitializeCoreBrain
    isDefinition: true
    commentId: Overload:Unity.MLAgents.CoreBrainHeuristic.InitializeCoreBrain
  Unity.MLAgents.CoreBrainHeuristic.DecideAction*:
    name:
      CSharp:
      - id: Unity.MLAgents.CoreBrainHeuristic.DecideAction*
        name: DecideAction
        nameWithType: CoreBrainHeuristic.DecideAction
        qualifiedName: Unity.MLAgents.CoreBrainHeuristic.DecideAction
      VB:
      - id: Unity.MLAgents.CoreBrainHeuristic.DecideAction*
        name: DecideAction
        nameWithType: CoreBrainHeuristic.DecideAction
        qualifiedName: Unity.MLAgents.CoreBrainHeuristic.DecideAction
    isDefinition: true
    commentId: Overload:Unity.MLAgents.CoreBrainHeuristic.DecideAction
  Unity.MLAgents.CoreBrainHeuristic.OnInspector*:
    name:
      CSharp:
      - id: Unity.MLAgents.CoreBrainHeuristic.OnInspector*
        name: OnInspector
        nameWithType: CoreBrainHeuristic.OnInspector
        qualifiedName: Unity.MLAgents.CoreBrainHeuristic.OnInspector
      VB:
      - id: Unity.MLAgents.CoreBrainHeuristic.OnInspector*
        name: OnInspector
        nameWithType: CoreBrainHeuristic.OnInspector
        qualifiedName: Unity.MLAgents.CoreBrainHeuristic.OnInspector
    isDefinition: true
    commentId: Overload:Unity.MLAgents.CoreBrainHeuristic.OnInspector
  Unity.MLAgents.CoreBrainHeuristic:
    name:
      CSharp:
      - id: Unity.MLAgents.CoreBrainHeuristic
        name: CoreBrainHeuristic
        nameWithType: CoreBrainHeuristic
        qualifiedName: Unity.MLAgents.CoreBrainHeuristic
      VB:
      - id: Unity.MLAgents.CoreBrainHeuristic
        name: CoreBrainHeuristic
        nameWithType: CoreBrainHeuristic
        qualifiedName: Unity.MLAgents.CoreBrainHeuristic
    isDefinition: true
    commentId: T:Unity.MLAgents.CoreBrainHeuristic
  TextAsset:
    name:
      CSharp:
      - id: TextAsset
        name: TextAsset
        nameWithType: TextAsset
        qualifiedName: TextAsset
        isExternal: true
      VB:
      - id: TextAsset
        name: TextAsset
        nameWithType: TextAsset
        qualifiedName: TextAsset
        isExternal: true
    isDefinition: true
    commentId: '!:TextAsset'
  Unity.MLAgents.CoreBrainInternal.SetBrain*:
    name:
      CSharp:
      - id: Unity.MLAgents.CoreBrainInternal.SetBrain*
        name: SetBrain
        nameWithType: CoreBrainInternal.SetBrain
        qualifiedName: Unity.MLAgents.CoreBrainInternal.SetBrain
      VB:
      - id: Unity.MLAgents.CoreBrainInternal.SetBrain*
        name: SetBrain
        nameWithType: CoreBrainInternal.SetBrain
        qualifiedName: Unity.MLAgents.CoreBrainInternal.SetBrain
    isDefinition: true
    commentId: Overload:Unity.MLAgents.CoreBrainInternal.SetBrain
  Unity.MLAgents.CoreBrainInternal.InitializeCoreBrain*:
    name:
      CSharp:
      - id: Unity.MLAgents.CoreBrainInternal.InitializeCoreBrain*
        name: InitializeCoreBrain
        nameWithType: CoreBrainInternal.InitializeCoreBrain
        qualifiedName: Unity.MLAgents.CoreBrainInternal.InitializeCoreBrain
      VB:
      - id: Unity.MLAgents.CoreBrainInternal.InitializeCoreBrain*
        name: InitializeCoreBrain
        nameWithType: CoreBrainInternal.InitializeCoreBrain
        qualifiedName: Unity.MLAgents.CoreBrainInternal.InitializeCoreBrain
    isDefinition: true
    commentId: Overload:Unity.MLAgents.CoreBrainInternal.InitializeCoreBrain
  Unity.MLAgents.CoreBrainInternal.DecideAction*:
    name:
      CSharp:
      - id: Unity.MLAgents.CoreBrainInternal.DecideAction*
        name: DecideAction
        nameWithType: CoreBrainInternal.DecideAction
        qualifiedName: Unity.MLAgents.CoreBrainInternal.DecideAction
      VB:
      - id: Unity.MLAgents.CoreBrainInternal.DecideAction*
        name: DecideAction
        nameWithType: CoreBrainInternal.DecideAction
        qualifiedName: Unity.MLAgents.CoreBrainInternal.DecideAction
    isDefinition: true
    commentId: Overload:Unity.MLAgents.CoreBrainInternal.DecideAction
  Unity.MLAgents.CoreBrainInternal.OnInspector*:
    name:
      CSharp:
      - id: Unity.MLAgents.CoreBrainInternal.OnInspector*
        name: OnInspector
        nameWithType: CoreBrainInternal.OnInspector
        qualifiedName: Unity.MLAgents.CoreBrainInternal.OnInspector
      VB:
      - id: Unity.MLAgents.CoreBrainInternal.OnInspector*
        name: OnInspector
        nameWithType: CoreBrainInternal.OnInspector
        qualifiedName: Unity.MLAgents.CoreBrainInternal.OnInspector
    isDefinition: true
    commentId: Overload:Unity.MLAgents.CoreBrainInternal.OnInspector
  System.Single[,,,]:
    name:
      CSharp:
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: '[,,,]'
        nameWithType: '[,,,]'
        qualifiedName: '[,,,]'
      VB:
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: (,,,)
        nameWithType: (,,,)
        qualifiedName: (,,,)
    isDefinition: false
  Unity.MLAgents.CoreBrainInternal.BatchVisualObservations*:
    name:
      CSharp:
      - id: Unity.MLAgents.CoreBrainInternal.BatchVisualObservations*
        name: BatchVisualObservations
        nameWithType: CoreBrainInternal.BatchVisualObservations
        qualifiedName: Unity.MLAgents.CoreBrainInternal.BatchVisualObservations
      VB:
      - id: Unity.MLAgents.CoreBrainInternal.BatchVisualObservations*
        name: BatchVisualObservations
        nameWithType: CoreBrainInternal.BatchVisualObservations
        qualifiedName: Unity.MLAgents.CoreBrainInternal.BatchVisualObservations
    isDefinition: true
    commentId: Overload:Unity.MLAgents.CoreBrainInternal.BatchVisualObservations
  Unity.MLAgents.CoreBrainInternal:
    name:
      CSharp:
      - id: Unity.MLAgents.CoreBrainInternal
        name: CoreBrainInternal
        nameWithType: CoreBrainInternal
        qualifiedName: Unity.MLAgents.CoreBrainInternal
      VB:
      - id: Unity.MLAgents.CoreBrainInternal
        name: CoreBrainInternal
        nameWithType: CoreBrainInternal
        qualifiedName: Unity.MLAgents.CoreBrainInternal
    isDefinition: true
    commentId: T:Unity.MLAgents.CoreBrainInternal
  Unity.MLAgents.CoreBrainPlayer.SetBrain*:
    name:
      CSharp:
      - id: Unity.MLAgents.CoreBrainPlayer.SetBrain*
        name: SetBrain
        nameWithType: CoreBrainPlayer.SetBrain
        qualifiedName: Unity.MLAgents.CoreBrainPlayer.SetBrain
      VB:
      - id: Unity.MLAgents.CoreBrainPlayer.SetBrain*
        name: SetBrain
        nameWithType: CoreBrainPlayer.SetBrain
        qualifiedName: Unity.MLAgents.CoreBrainPlayer.SetBrain
    isDefinition: true
    commentId: Overload:Unity.MLAgents.CoreBrainPlayer.SetBrain
  Unity.MLAgents.CoreBrainPlayer.InitializeCoreBrain*:
    name:
      CSharp:
      - id: Unity.MLAgents.CoreBrainPlayer.InitializeCoreBrain*
        name: InitializeCoreBrain
        nameWithType: CoreBrainPlayer.InitializeCoreBrain
        qualifiedName: Unity.MLAgents.CoreBrainPlayer.InitializeCoreBrain
      VB:
      - id: Unity.MLAgents.CoreBrainPlayer.InitializeCoreBrain*
        name: InitializeCoreBrain
        nameWithType: CoreBrainPlayer.InitializeCoreBrain
        qualifiedName: Unity.MLAgents.CoreBrainPlayer.InitializeCoreBrain
    isDefinition: true
    commentId: Overload:Unity.MLAgents.CoreBrainPlayer.InitializeCoreBrain
  Unity.MLAgents.CoreBrainPlayer.DecideAction*:
    name:
      CSharp:
      - id: Unity.MLAgents.CoreBrainPlayer.DecideAction*
        name: DecideAction
        nameWithType: CoreBrainPlayer.DecideAction
        qualifiedName: Unity.MLAgents.CoreBrainPlayer.DecideAction
      VB:
      - id: Unity.MLAgents.CoreBrainPlayer.DecideAction*
        name: DecideAction
        nameWithType: CoreBrainPlayer.DecideAction
        qualifiedName: Unity.MLAgents.CoreBrainPlayer.DecideAction
    isDefinition: true
    commentId: Overload:Unity.MLAgents.CoreBrainPlayer.DecideAction
  Unity.MLAgents.CoreBrainPlayer.OnInspector*:
    name:
      CSharp:
      - id: Unity.MLAgents.CoreBrainPlayer.OnInspector*
        name: OnInspector
        nameWithType: CoreBrainPlayer.OnInspector
        qualifiedName: Unity.MLAgents.CoreBrainPlayer.OnInspector
      VB:
      - id: Unity.MLAgents.CoreBrainPlayer.OnInspector*
        name: OnInspector
        nameWithType: CoreBrainPlayer.OnInspector
        qualifiedName: Unity.MLAgents.CoreBrainPlayer.OnInspector
    isDefinition: true
    commentId: Overload:Unity.MLAgents.CoreBrainPlayer.OnInspector
  Unity.MLAgents.CoreBrainPlayer:
    name:
      CSharp:
      - id: Unity.MLAgents.CoreBrainPlayer
        name: CoreBrainPlayer
        nameWithType: CoreBrainPlayer
        qualifiedName: Unity.MLAgents.CoreBrainPlayer
      VB:
      - id: Unity.MLAgents.CoreBrainPlayer
        name: CoreBrainPlayer
        nameWithType: CoreBrainPlayer
        qualifiedName: Unity.MLAgents.CoreBrainPlayer
    isDefinition: true
    commentId: T:Unity.MLAgents.CoreBrainPlayer
  ? Unity.MLAgents.Decision.MakeMemory(System.Collections.Generic.List{System.Single},System.Collections.Generic.List{Texture2D},System.Single,System.Boolean,System.Collections.Generic.List{System.Single})
  : commentId: M:Unity.MLAgents.Decision.MakeMemory(System.Collections.Generic.List{System.Single},System.Collections.Generic.List{Texture2D},System.Single,System.Boolean,System.Collections.Generic.List{System.Single})
  Unity.MLAgents.Decision.Decide*:
    name:
      CSharp:
      - id: Unity.MLAgents.Decision.Decide*
        name: Decide
        nameWithType: Decision.Decide
        qualifiedName: Unity.MLAgents.Decision.Decide
      VB:
      - id: Unity.MLAgents.Decision.Decide*
        name: Decide
        nameWithType: Decision.Decide
        qualifiedName: Unity.MLAgents.Decision.Decide
    isDefinition: true
    commentId: Overload:Unity.MLAgents.Decision.Decide
  Unity.MLAgents.Decision.MakeMemory*:
    name:
      CSharp:
      - id: Unity.MLAgents.Decision.MakeMemory*
        name: MakeMemory
        nameWithType: Decision.MakeMemory
        qualifiedName: Unity.MLAgents.Decision.MakeMemory
      VB:
      - id: Unity.MLAgents.Decision.MakeMemory*
        name: MakeMemory
        nameWithType: Decision.MakeMemory
        qualifiedName: Unity.MLAgents.Decision.MakeMemory
    isDefinition: true
    commentId: Overload:Unity.MLAgents.Decision.MakeMemory
  Unity.MLAgents.ExternalCommunicator.#ctor*:
    name:
      CSharp:
      - id: Unity.MLAgents.ExternalCommunicator.#ctor*
        name: ExternalCommunicator
        nameWithType: ExternalCommunicator.ExternalCommunicator
        qualifiedName: Unity.MLAgents.ExternalCommunicator.ExternalCommunicator
      VB:
      - id: Unity.MLAgents.ExternalCommunicator.#ctor*
        name: ExternalCommunicator
        nameWithType: ExternalCommunicator.ExternalCommunicator
        qualifiedName: Unity.MLAgents.ExternalCommunicator.ExternalCommunicator
    isDefinition: true
    commentId: Overload:Unity.MLAgents.ExternalCommunicator.#ctor
  Unity.MLAgents.ExternalCommunicator.SubscribeBrain*:
    name:
      CSharp:
      - id: Unity.MLAgents.ExternalCommunicator.SubscribeBrain*
        name: SubscribeBrain
        nameWithType: ExternalCommunicator.SubscribeBrain
        qualifiedName: Unity.MLAgents.ExternalCommunicator.SubscribeBrain
      VB:
      - id: Unity.MLAgents.ExternalCommunicator.SubscribeBrain*
        name: SubscribeBrain
        nameWithType: ExternalCommunicator.SubscribeBrain
        qualifiedName: Unity.MLAgents.ExternalCommunicator.SubscribeBrain
    isDefinition: true
    commentId: Overload:Unity.MLAgents.ExternalCommunicator.SubscribeBrain
  Unity.MLAgents.Communicator.SubscribeBrain(Unity.MLAgents.Brain):
    name:
      CSharp:
      - id: Unity.MLAgents.Communicator.SubscribeBrain(Unity.MLAgents.Brain)
        name: SubscribeBrain
        nameWithType: Communicator.SubscribeBrain
        qualifiedName: Unity.MLAgents.Communicator.SubscribeBrain
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Unity.MLAgents.Brain
        name: Brain
        nameWithType: Brain
        qualifiedName: Unity.MLAgents.Brain
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Unity.MLAgents.Communicator.SubscribeBrain(Unity.MLAgents.Brain)
        name: SubscribeBrain
        nameWithType: Communicator.SubscribeBrain
        qualifiedName: Unity.MLAgents.Communicator.SubscribeBrain
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Unity.MLAgents.Brain
        name: Brain
        nameWithType: Brain
        qualifiedName: Unity.MLAgents.Brain
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Unity.MLAgents.Communicator
    commentId: M:Unity.MLAgents.Communicator.SubscribeBrain(Unity.MLAgents.Brain)
  Unity.MLAgents.ExternalCommunicator.CommunicatorHandShake*:
    name:
      CSharp:
      - id: Unity.MLAgents.ExternalCommunicator.CommunicatorHandShake*
        name: CommunicatorHandShake
        nameWithType: ExternalCommunicator.CommunicatorHandShake
        qualifiedName: Unity.MLAgents.ExternalCommunicator.CommunicatorHandShake
      VB:
      - id: Unity.MLAgents.ExternalCommunicator.CommunicatorHandShake*
        name: CommunicatorHandShake
        nameWithType: ExternalCommunicator.CommunicatorHandShake
        qualifiedName: Unity.MLAgents.ExternalCommunicator.CommunicatorHandShake
    isDefinition: true
    commentId: Overload:Unity.MLAgents.ExternalCommunicator.CommunicatorHandShake
  Unity.MLAgents.Communicator.CommunicatorHandShake:
    name:
      CSharp:
      - id: Unity.MLAgents.Communicator.CommunicatorHandShake
        name: CommunicatorHandShake
        nameWithType: Communicator.CommunicatorHandShake
        qualifiedName: Unity.MLAgents.Communicator.CommunicatorHandShake
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Unity.MLAgents.Communicator.CommunicatorHandShake
        name: CommunicatorHandShake
        nameWithType: Communicator.CommunicatorHandShake
        qualifiedName: Unity.MLAgents.Communicator.CommunicatorHandShake
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Unity.MLAgents.Communicator
    commentId: M:Unity.MLAgents.Communicator.CommunicatorHandShake
  Unity.MLAgents.ExternalCommunicator.InitializeCommunicator*:
    name:
      CSharp:
      - id: Unity.MLAgents.ExternalCommunicator.InitializeCommunicator*
        name: InitializeCommunicator
        nameWithType: ExternalCommunicator.InitializeCommunicator
        qualifiedName: Unity.MLAgents.ExternalCommunicator.InitializeCommunicator
      VB:
      - id: Unity.MLAgents.ExternalCommunicator.InitializeCommunicator*
        name: InitializeCommunicator
        nameWithType: ExternalCommunicator.InitializeCommunicator
        qualifiedName: Unity.MLAgents.ExternalCommunicator.InitializeCommunicator
    isDefinition: true
    commentId: Overload:Unity.MLAgents.ExternalCommunicator.InitializeCommunicator
  Unity.MLAgents.Communicator.InitializeCommunicator:
    name:
      CSharp:
      - id: Unity.MLAgents.Communicator.InitializeCommunicator
        name: InitializeCommunicator
        nameWithType: Communicator.InitializeCommunicator
        qualifiedName: Unity.MLAgents.Communicator.InitializeCommunicator
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Unity.MLAgents.Communicator.InitializeCommunicator
        name: InitializeCommunicator
        nameWithType: Communicator.InitializeCommunicator
        qualifiedName: Unity.MLAgents.Communicator.InitializeCommunicator
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Unity.MLAgents.Communicator
    commentId: M:Unity.MLAgents.Communicator.InitializeCommunicator
  Unity.MLAgents.ExternalCommunicator.UpdateCommand*:
    name:
      CSharp:
      - id: Unity.MLAgents.ExternalCommunicator.UpdateCommand*
        name: UpdateCommand
        nameWithType: ExternalCommunicator.UpdateCommand
        qualifiedName: Unity.MLAgents.ExternalCommunicator.UpdateCommand
      VB:
      - id: Unity.MLAgents.ExternalCommunicator.UpdateCommand*
        name: UpdateCommand
        nameWithType: ExternalCommunicator.UpdateCommand
        qualifiedName: Unity.MLAgents.ExternalCommunicator.UpdateCommand
    isDefinition: true
    commentId: Overload:Unity.MLAgents.ExternalCommunicator.UpdateCommand
  Unity.MLAgents.Communicator.UpdateCommand:
    name:
      CSharp:
      - id: Unity.MLAgents.Communicator.UpdateCommand
        name: UpdateCommand
        nameWithType: Communicator.UpdateCommand
        qualifiedName: Unity.MLAgents.Communicator.UpdateCommand
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Unity.MLAgents.Communicator.UpdateCommand
        name: UpdateCommand
        nameWithType: Communicator.UpdateCommand
        qualifiedName: Unity.MLAgents.Communicator.UpdateCommand
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Unity.MLAgents.Communicator
    commentId: M:Unity.MLAgents.Communicator.UpdateCommand
  Unity.MLAgents.ExternalCommunicator.GetCommand*:
    name:
      CSharp:
      - id: Unity.MLAgents.ExternalCommunicator.GetCommand*
        name: GetCommand
        nameWithType: ExternalCommunicator.GetCommand
        qualifiedName: Unity.MLAgents.ExternalCommunicator.GetCommand
      VB:
      - id: Unity.MLAgents.ExternalCommunicator.GetCommand*
        name: GetCommand
        nameWithType: ExternalCommunicator.GetCommand
        qualifiedName: Unity.MLAgents.ExternalCommunicator.GetCommand
    isDefinition: true
    commentId: Overload:Unity.MLAgents.ExternalCommunicator.GetCommand
  Unity.MLAgents.Communicator.GetCommand:
    name:
      CSharp:
      - id: Unity.MLAgents.Communicator.GetCommand
        name: GetCommand
        nameWithType: Communicator.GetCommand
        qualifiedName: Unity.MLAgents.Communicator.GetCommand
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Unity.MLAgents.Communicator.GetCommand
        name: GetCommand
        nameWithType: Communicator.GetCommand
        qualifiedName: Unity.MLAgents.Communicator.GetCommand
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Unity.MLAgents.Communicator
    commentId: M:Unity.MLAgents.Communicator.GetCommand
  Unity.MLAgents.ExternalCommunicator.SetCommand*:
    name:
      CSharp:
      - id: Unity.MLAgents.ExternalCommunicator.SetCommand*
        name: SetCommand
        nameWithType: ExternalCommunicator.SetCommand
        qualifiedName: Unity.MLAgents.ExternalCommunicator.SetCommand
      VB:
      - id: Unity.MLAgents.ExternalCommunicator.SetCommand*
        name: SetCommand
        nameWithType: ExternalCommunicator.SetCommand
        qualifiedName: Unity.MLAgents.ExternalCommunicator.SetCommand
    isDefinition: true
    commentId: Overload:Unity.MLAgents.ExternalCommunicator.SetCommand
  Unity.MLAgents.Communicator.SetCommand(Unity.MLAgents.ExternalCommand):
    name:
      CSharp:
      - id: Unity.MLAgents.Communicator.SetCommand(Unity.MLAgents.ExternalCommand)
        name: SetCommand
        nameWithType: Communicator.SetCommand
        qualifiedName: Unity.MLAgents.Communicator.SetCommand
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Unity.MLAgents.ExternalCommand
        name: ExternalCommand
        nameWithType: ExternalCommand
        qualifiedName: Unity.MLAgents.ExternalCommand
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Unity.MLAgents.Communicator.SetCommand(Unity.MLAgents.ExternalCommand)
        name: SetCommand
        nameWithType: Communicator.SetCommand
        qualifiedName: Unity.MLAgents.Communicator.SetCommand
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Unity.MLAgents.ExternalCommand
        name: ExternalCommand
        nameWithType: ExternalCommand
        qualifiedName: Unity.MLAgents.ExternalCommand
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Unity.MLAgents.Communicator
    commentId: M:Unity.MLAgents.Communicator.SetCommand(Unity.MLAgents.ExternalCommand)
  Unity.MLAgents.ExternalCommunicator.GetResetParameters*:
    name:
      CSharp:
      - id: Unity.MLAgents.ExternalCommunicator.GetResetParameters*
        name: GetResetParameters
        nameWithType: ExternalCommunicator.GetResetParameters
        qualifiedName: Unity.MLAgents.ExternalCommunicator.GetResetParameters
      VB:
      - id: Unity.MLAgents.ExternalCommunicator.GetResetParameters*
        name: GetResetParameters
        nameWithType: ExternalCommunicator.GetResetParameters
        qualifiedName: Unity.MLAgents.ExternalCommunicator.GetResetParameters
    isDefinition: true
    commentId: Overload:Unity.MLAgents.ExternalCommunicator.GetResetParameters
  Unity.MLAgents.Communicator.GetResetParameters:
    name:
      CSharp:
      - id: Unity.MLAgents.Communicator.GetResetParameters
        name: GetResetParameters
        nameWithType: Communicator.GetResetParameters
        qualifiedName: Unity.MLAgents.Communicator.GetResetParameters
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Unity.MLAgents.Communicator.GetResetParameters
        name: GetResetParameters
        nameWithType: Communicator.GetResetParameters
        qualifiedName: Unity.MLAgents.Communicator.GetResetParameters
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Unity.MLAgents.Communicator
    commentId: M:Unity.MLAgents.Communicator.GetResetParameters
  Unity.MLAgents.ExternalCommunicator.GiveBrainInfo*:
    name:
      CSharp:
      - id: Unity.MLAgents.ExternalCommunicator.GiveBrainInfo*
        name: GiveBrainInfo
        nameWithType: ExternalCommunicator.GiveBrainInfo
        qualifiedName: Unity.MLAgents.ExternalCommunicator.GiveBrainInfo
      VB:
      - id: Unity.MLAgents.ExternalCommunicator.GiveBrainInfo*
        name: GiveBrainInfo
        nameWithType: ExternalCommunicator.GiveBrainInfo
        qualifiedName: Unity.MLAgents.ExternalCommunicator.GiveBrainInfo
    isDefinition: true
    commentId: Overload:Unity.MLAgents.ExternalCommunicator.GiveBrainInfo
  Unity.MLAgents.ExternalCommunicator.GetHasTried*:
    name:
      CSharp:
      - id: Unity.MLAgents.ExternalCommunicator.GetHasTried*
        name: GetHasTried
        nameWithType: ExternalCommunicator.GetHasTried
        qualifiedName: Unity.MLAgents.ExternalCommunicator.GetHasTried
      VB:
      - id: Unity.MLAgents.ExternalCommunicator.GetHasTried*
        name: GetHasTried
        nameWithType: ExternalCommunicator.GetHasTried
        qualifiedName: Unity.MLAgents.ExternalCommunicator.GetHasTried
    isDefinition: true
    commentId: Overload:Unity.MLAgents.ExternalCommunicator.GetHasTried
  Unity.MLAgents.Communicator.GetHasTried:
    name:
      CSharp:
      - id: Unity.MLAgents.Communicator.GetHasTried
        name: GetHasTried
        nameWithType: Communicator.GetHasTried
        qualifiedName: Unity.MLAgents.Communicator.GetHasTried
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Unity.MLAgents.Communicator.GetHasTried
        name: GetHasTried
        nameWithType: Communicator.GetHasTried
        qualifiedName: Unity.MLAgents.Communicator.GetHasTried
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Unity.MLAgents.Communicator
    commentId: M:Unity.MLAgents.Communicator.GetHasTried
  Unity.MLAgents.ExternalCommunicator.GetSent*:
    name:
      CSharp:
      - id: Unity.MLAgents.ExternalCommunicator.GetSent*
        name: GetSent
        nameWithType: ExternalCommunicator.GetSent
        qualifiedName: Unity.MLAgents.ExternalCommunicator.GetSent
      VB:
      - id: Unity.MLAgents.ExternalCommunicator.GetSent*
        name: GetSent
        nameWithType: ExternalCommunicator.GetSent
        qualifiedName: Unity.MLAgents.ExternalCommunicator.GetSent
    isDefinition: true
    commentId: Overload:Unity.MLAgents.ExternalCommunicator.GetSent
  Unity.MLAgents.Communicator.GetSent:
    name:
      CSharp:
      - id: Unity.MLAgents.Communicator.GetSent
        name: GetSent
        nameWithType: Communicator.GetSent
        qualifiedName: Unity.MLAgents.Communicator.GetSent
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Unity.MLAgents.Communicator.GetSent
        name: GetSent
        nameWithType: Communicator.GetSent
        qualifiedName: Unity.MLAgents.Communicator.GetSent
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Unity.MLAgents.Communicator
    commentId: M:Unity.MLAgents.Communicator.GetSent
  Unity.MLAgents.ExternalCommunicator.UpdateActions*:
    name:
      CSharp:
      - id: Unity.MLAgents.ExternalCommunicator.UpdateActions*
        name: UpdateActions
        nameWithType: ExternalCommunicator.UpdateActions
        qualifiedName: Unity.MLAgents.ExternalCommunicator.UpdateActions
      VB:
      - id: Unity.MLAgents.ExternalCommunicator.UpdateActions*
        name: UpdateActions
        nameWithType: ExternalCommunicator.UpdateActions
        qualifiedName: Unity.MLAgents.ExternalCommunicator.UpdateActions
    isDefinition: true
    commentId: Overload:Unity.MLAgents.ExternalCommunicator.UpdateActions
  Unity.MLAgents.Communicator.UpdateActions:
    name:
      CSharp:
      - id: Unity.MLAgents.Communicator.UpdateActions
        name: UpdateActions
        nameWithType: Communicator.UpdateActions
        qualifiedName: Unity.MLAgents.Communicator.UpdateActions
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Unity.MLAgents.Communicator.UpdateActions
        name: UpdateActions
        nameWithType: Communicator.UpdateActions
        qualifiedName: Unity.MLAgents.Communicator.UpdateActions
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Unity.MLAgents.Communicator
    commentId: M:Unity.MLAgents.Communicator.UpdateActions
  Unity.MLAgents.ExternalCommunicator:
    name:
      CSharp:
      - id: Unity.MLAgents.ExternalCommunicator
        name: ExternalCommunicator
        nameWithType: ExternalCommunicator
        qualifiedName: Unity.MLAgents.ExternalCommunicator
      VB:
      - id: Unity.MLAgents.ExternalCommunicator
        name: ExternalCommunicator
        nameWithType: ExternalCommunicator
        qualifiedName: Unity.MLAgents.ExternalCommunicator
    isDefinition: true
    commentId: T:Unity.MLAgents.ExternalCommunicator
  System.Collections.Generic.List{System.Int32}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{System.Int32}
  System.Collections.Generic.List{System.Boolean}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{System.Boolean}
  Unity.MLAgents.ExternalCommunicator.StepMessage:
    name:
      CSharp:
      - id: Unity.MLAgents.ExternalCommunicator.StepMessage
        name: ExternalCommunicator.StepMessage
        nameWithType: ExternalCommunicator.StepMessage
        qualifiedName: Unity.MLAgents.ExternalCommunicator.StepMessage
      VB:
      - id: Unity.MLAgents.ExternalCommunicator.StepMessage
        name: ExternalCommunicator.StepMessage
        nameWithType: ExternalCommunicator.StepMessage
        qualifiedName: Unity.MLAgents.ExternalCommunicator.StepMessage
    isDefinition: true
    commentId: T:Unity.MLAgents.ExternalCommunicator.StepMessage
  Unity.MLAgents.MonitorType:
    name:
      CSharp:
      - id: Unity.MLAgents.MonitorType
        name: MonitorType
        nameWithType: MonitorType
        qualifiedName: Unity.MLAgents.MonitorType
      VB:
      - id: Unity.MLAgents.MonitorType
        name: MonitorType
        nameWithType: MonitorType
        qualifiedName: Unity.MLAgents.MonitorType
    isDefinition: true
    parent: Unity.MLAgents
    commentId: T:Unity.MLAgents.MonitorType
  Transform:
    name:
      CSharp:
      - id: Transform
        name: Transform
        nameWithType: Transform
        qualifiedName: Transform
        isExternal: true
      VB:
      - id: Transform
        name: Transform
        nameWithType: Transform
        qualifiedName: Transform
        isExternal: true
    isDefinition: true
  Unity.MLAgents.Monitor.Log*:
    name:
      CSharp:
      - id: Unity.MLAgents.Monitor.Log*
        name: Log
        nameWithType: Monitor.Log
        qualifiedName: Unity.MLAgents.Monitor.Log
      VB:
      - id: Unity.MLAgents.Monitor.Log*
        name: Log
        nameWithType: Monitor.Log
        qualifiedName: Unity.MLAgents.Monitor.Log
    isDefinition: true
    commentId: Overload:Unity.MLAgents.Monitor.Log
  Unity.MLAgents.Monitor.RemoveValue*:
    name:
      CSharp:
      - id: Unity.MLAgents.Monitor.RemoveValue*
        name: RemoveValue
        nameWithType: Monitor.RemoveValue
        qualifiedName: Unity.MLAgents.Monitor.RemoveValue
      VB:
      - id: Unity.MLAgents.Monitor.RemoveValue*
        name: RemoveValue
        nameWithType: Monitor.RemoveValue
        qualifiedName: Unity.MLAgents.Monitor.RemoveValue
    isDefinition: true
    commentId: Overload:Unity.MLAgents.Monitor.RemoveValue
  Unity.MLAgents.Monitor.RemoveAllValues*:
    name:
      CSharp:
      - id: Unity.MLAgents.Monitor.RemoveAllValues*
        name: RemoveAllValues
        nameWithType: Monitor.RemoveAllValues
        qualifiedName: Unity.MLAgents.Monitor.RemoveAllValues
      VB:
      - id: Unity.MLAgents.Monitor.RemoveAllValues*
        name: RemoveAllValues
        nameWithType: Monitor.RemoveAllValues
        qualifiedName: Unity.MLAgents.Monitor.RemoveAllValues
    isDefinition: true
    commentId: Overload:Unity.MLAgents.Monitor.RemoveAllValues
  Unity.MLAgents.Monitor.SetActive*:
    name:
      CSharp:
      - id: Unity.MLAgents.Monitor.SetActive*
        name: SetActive
        nameWithType: Monitor.SetActive
        qualifiedName: Unity.MLAgents.Monitor.SetActive
      VB:
      - id: Unity.MLAgents.Monitor.SetActive*
        name: SetActive
        nameWithType: Monitor.SetActive
        qualifiedName: Unity.MLAgents.Monitor.SetActive
    isDefinition: true
    commentId: Overload:Unity.MLAgents.Monitor.SetActive
  Unity.MLAgents.Monitor:
    name:
      CSharp:
      - id: Unity.MLAgents.Monitor
        name: Monitor
        nameWithType: Monitor
        qualifiedName: Unity.MLAgents.Monitor
      VB:
      - id: Unity.MLAgents.Monitor
        name: Monitor
        nameWithType: Monitor
        qualifiedName: Unity.MLAgents.Monitor
    isDefinition: true
    commentId: T:Unity.MLAgents.Monitor
  System.Collections.Generic.Dictionary`2.Add(`0,`1):
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2.Add(`0,`1)
        name: Add
        nameWithType: Dictionary<TKey, TValue>.Add
        qualifiedName: System.Collections.Generic.Dictionary<TKey, TValue>.Add
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: TKey
        nameWithType: TKey
        qualifiedName: TKey
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TValue
        nameWithType: TValue
        qualifiedName: TValue
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.Dictionary`2.Add(`0,`1)
        name: Add
        nameWithType: Dictionary(Of TKey, TValue).Add
        qualifiedName: System.Collections.Generic.Dictionary(Of TKey, TValue).Add
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: TKey
        nameWithType: TKey
        qualifiedName: TKey
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TValue
        nameWithType: TValue
        qualifiedName: TValue
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.Dictionary`2.Add(`0,`1)
  System.Collections.Generic.Dictionary{System.String,System.Single}.Add(System.String,System.Single):
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2.Add(`0,`1)
        name: Add
        nameWithType: Dictionary<String, Single>.Add
        qualifiedName: System.Collections.Generic.Dictionary<System.String, System.Single>.Add
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.Dictionary`2.Add(`0,`1)
        name: Add
        nameWithType: Dictionary(Of String, Single).Add
        qualifiedName: System.Collections.Generic.Dictionary(Of System.String, System.Single).Add
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.Dictionary`2.Add(`0,`1)
    parent: System.Collections.Generic.Dictionary{System.String,System.Single}
    commentId: M:System.Collections.Generic.Dictionary{System.String,System.Single}.Add(System.String,System.Single)
  ? System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})
  : name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})
        name: ICollection<KeyValuePair<TKey, TValue>>.Add
        nameWithType: Dictionary<TKey, TValue>.ICollection<KeyValuePair<TKey, TValue>>.Add
        qualifiedName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Add
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.KeyValuePair`2
        name: KeyValuePair
        nameWithType: KeyValuePair
        qualifiedName: System.Collections.Generic.KeyValuePair
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TKey
        nameWithType: TKey
        qualifiedName: TKey
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TValue
        nameWithType: TValue
        qualifiedName: TValue
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})
        name: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add
        nameWithType: Dictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add
        qualifiedName: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.KeyValuePair`2
        name: KeyValuePair
        nameWithType: KeyValuePair
        qualifiedName: System.Collections.Generic.KeyValuePair
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TKey
        nameWithType: TKey
        qualifiedName: TKey
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TValue
        nameWithType: TValue
        qualifiedName: TValue
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})
  ? System.Collections.Generic.Dictionary{System.String,System.Single}.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{System.String,System.Single})
  : name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})
        name: ICollection<KeyValuePair<String, Single>>.Add
        nameWithType: Dictionary<String, Single>.ICollection<KeyValuePair<String, Single>>.Add
        qualifiedName: System.Collections.Generic.Dictionary<System.String, System.Single>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Single>>.Add
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.KeyValuePair`2
        name: KeyValuePair
        nameWithType: KeyValuePair
        qualifiedName: System.Collections.Generic.KeyValuePair
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})
        name: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add
        nameWithType: Dictionary(Of String, Single).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add
        qualifiedName: System.Collections.Generic.Dictionary(Of System.String, System.Single).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.KeyValuePair`2
        name: KeyValuePair
        nameWithType: KeyValuePair
        qualifiedName: System.Collections.Generic.KeyValuePair
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})
    parent: System.Collections.Generic.Dictionary{System.String,System.Single}
    commentId: M:System.Collections.Generic.Dictionary{System.String,System.Single}.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{System.String,System.Single})
  ? System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})
  : name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})
        name: ICollection<KeyValuePair<TKey, TValue>>.Contains
        nameWithType: Dictionary<TKey, TValue>.ICollection<KeyValuePair<TKey, TValue>>.Contains
        qualifiedName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Contains
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.KeyValuePair`2
        name: KeyValuePair
        nameWithType: KeyValuePair
        qualifiedName: System.Collections.Generic.KeyValuePair
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TKey
        nameWithType: TKey
        qualifiedName: TKey
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TValue
        nameWithType: TValue
        qualifiedName: TValue
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})
        name: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains
        nameWithType: Dictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains
        qualifiedName: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.KeyValuePair`2
        name: KeyValuePair
        nameWithType: KeyValuePair
        qualifiedName: System.Collections.Generic.KeyValuePair
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TKey
        nameWithType: TKey
        qualifiedName: TKey
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TValue
        nameWithType: TValue
        qualifiedName: TValue
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})
  ? System.Collections.Generic.Dictionary{System.String,System.Single}.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{System.String,System.Single})
  : name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})
        name: ICollection<KeyValuePair<String, Single>>.Contains
        nameWithType: Dictionary<String, Single>.ICollection<KeyValuePair<String, Single>>.Contains
        qualifiedName: System.Collections.Generic.Dictionary<System.String, System.Single>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Single>>.Contains
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.KeyValuePair`2
        name: KeyValuePair
        nameWithType: KeyValuePair
        qualifiedName: System.Collections.Generic.KeyValuePair
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})
        name: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains
        nameWithType: Dictionary(Of String, Single).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains
        qualifiedName: System.Collections.Generic.Dictionary(Of System.String, System.Single).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.KeyValuePair`2
        name: KeyValuePair
        nameWithType: KeyValuePair
        qualifiedName: System.Collections.Generic.KeyValuePair
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})
    parent: System.Collections.Generic.Dictionary{System.String,System.Single}
    commentId: M:System.Collections.Generic.Dictionary{System.String,System.Single}.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{System.String,System.Single})
  ? System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})
  : name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})
        name: ICollection<KeyValuePair<TKey, TValue>>.Remove
        nameWithType: Dictionary<TKey, TValue>.ICollection<KeyValuePair<TKey, TValue>>.Remove
        qualifiedName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Remove
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.KeyValuePair`2
        name: KeyValuePair
        nameWithType: KeyValuePair
        qualifiedName: System.Collections.Generic.KeyValuePair
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TKey
        nameWithType: TKey
        qualifiedName: TKey
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TValue
        nameWithType: TValue
        qualifiedName: TValue
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})
        name: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove
        nameWithType: Dictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove
        qualifiedName: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.KeyValuePair`2
        name: KeyValuePair
        nameWithType: KeyValuePair
        qualifiedName: System.Collections.Generic.KeyValuePair
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TKey
        nameWithType: TKey
        qualifiedName: TKey
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TValue
        nameWithType: TValue
        qualifiedName: TValue
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})
  ? System.Collections.Generic.Dictionary{System.String,System.Single}.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{System.String,System.Single})
  : name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})
        name: ICollection<KeyValuePair<String, Single>>.Remove
        nameWithType: Dictionary<String, Single>.ICollection<KeyValuePair<String, Single>>.Remove
        qualifiedName: System.Collections.Generic.Dictionary<System.String, System.Single>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Single>>.Remove
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.KeyValuePair`2
        name: KeyValuePair
        nameWithType: KeyValuePair
        qualifiedName: System.Collections.Generic.KeyValuePair
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})
        name: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove
        nameWithType: Dictionary(Of String, Single).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove
        qualifiedName: System.Collections.Generic.Dictionary(Of System.String, System.Single).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.KeyValuePair`2
        name: KeyValuePair
        nameWithType: KeyValuePair
        qualifiedName: System.Collections.Generic.KeyValuePair
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})
    parent: System.Collections.Generic.Dictionary{System.String,System.Single}
    commentId: M:System.Collections.Generic.Dictionary{System.String,System.Single}.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{System.String,System.Single})
  System.Collections.Generic.Dictionary`2.Clear:
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2.Clear
        name: Clear
        nameWithType: Dictionary<TKey, TValue>.Clear
        qualifiedName: System.Collections.Generic.Dictionary<TKey, TValue>.Clear
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.Dictionary`2.Clear
        name: Clear
        nameWithType: Dictionary(Of TKey, TValue).Clear
        qualifiedName: System.Collections.Generic.Dictionary(Of TKey, TValue).Clear
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.Dictionary`2.Clear
  System.Collections.Generic.Dictionary{System.String,System.Single}.Clear:
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2.Clear
        name: Clear
        nameWithType: Dictionary<String, Single>.Clear
        qualifiedName: System.Collections.Generic.Dictionary<System.String, System.Single>.Clear
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.Dictionary`2.Clear
        name: Clear
        nameWithType: Dictionary(Of String, Single).Clear
        qualifiedName: System.Collections.Generic.Dictionary(Of System.String, System.Single).Clear
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.Dictionary`2.Clear
    parent: System.Collections.Generic.Dictionary{System.String,System.Single}
    commentId: M:System.Collections.Generic.Dictionary{System.String,System.Single}.Clear
  System.Collections.Generic.Dictionary`2.ContainsKey(`0):
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2.ContainsKey(`0)
        name: ContainsKey
        nameWithType: Dictionary<TKey, TValue>.ContainsKey
        qualifiedName: System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: TKey
        nameWithType: TKey
        qualifiedName: TKey
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.Dictionary`2.ContainsKey(`0)
        name: ContainsKey
        nameWithType: Dictionary(Of TKey, TValue).ContainsKey
        qualifiedName: System.Collections.Generic.Dictionary(Of TKey, TValue).ContainsKey
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: TKey
        nameWithType: TKey
        qualifiedName: TKey
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.Dictionary`2.ContainsKey(`0)
  System.Collections.Generic.Dictionary{System.String,System.Single}.ContainsKey(System.String):
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2.ContainsKey(`0)
        name: ContainsKey
        nameWithType: Dictionary<String, Single>.ContainsKey
        qualifiedName: System.Collections.Generic.Dictionary<System.String, System.Single>.ContainsKey
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.Dictionary`2.ContainsKey(`0)
        name: ContainsKey
        nameWithType: Dictionary(Of String, Single).ContainsKey
        qualifiedName: System.Collections.Generic.Dictionary(Of System.String, System.Single).ContainsKey
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.Dictionary`2.ContainsKey(`0)
    parent: System.Collections.Generic.Dictionary{System.String,System.Single}
    commentId: M:System.Collections.Generic.Dictionary{System.String,System.Single}.ContainsKey(System.String)
  System.Collections.Generic.Dictionary`2.ContainsValue(`1):
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2.ContainsValue(`1)
        name: ContainsValue
        nameWithType: Dictionary<TKey, TValue>.ContainsValue
        qualifiedName: System.Collections.Generic.Dictionary<TKey, TValue>.ContainsValue
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: TValue
        nameWithType: TValue
        qualifiedName: TValue
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.Dictionary`2.ContainsValue(`1)
        name: ContainsValue
        nameWithType: Dictionary(Of TKey, TValue).ContainsValue
        qualifiedName: System.Collections.Generic.Dictionary(Of TKey, TValue).ContainsValue
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: TValue
        nameWithType: TValue
        qualifiedName: TValue
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.Dictionary`2.ContainsValue(`1)
  System.Collections.Generic.Dictionary{System.String,System.Single}.ContainsValue(System.Single):
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2.ContainsValue(`1)
        name: ContainsValue
        nameWithType: Dictionary<String, Single>.ContainsValue
        qualifiedName: System.Collections.Generic.Dictionary<System.String, System.Single>.ContainsValue
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.Dictionary`2.ContainsValue(`1)
        name: ContainsValue
        nameWithType: Dictionary(Of String, Single).ContainsValue
        qualifiedName: System.Collections.Generic.Dictionary(Of System.String, System.Single).ContainsValue
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.Dictionary`2.ContainsValue(`1)
    parent: System.Collections.Generic.Dictionary{System.String,System.Single}
    commentId: M:System.Collections.Generic.Dictionary{System.String,System.Single}.ContainsValue(System.Single)
  System.Collections.Generic.Dictionary`2.GetEnumerator:
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2.GetEnumerator
        name: GetEnumerator
        nameWithType: Dictionary<TKey, TValue>.GetEnumerator
        qualifiedName: System.Collections.Generic.Dictionary<TKey, TValue>.GetEnumerator
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.Dictionary`2.GetEnumerator
        name: GetEnumerator
        nameWithType: Dictionary(Of TKey, TValue).GetEnumerator
        qualifiedName: System.Collections.Generic.Dictionary(Of TKey, TValue).GetEnumerator
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.Dictionary`2.GetEnumerator
  System.Collections.Generic.Dictionary{System.String,System.Single}.GetEnumerator:
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2.GetEnumerator
        name: GetEnumerator
        nameWithType: Dictionary<String, Single>.GetEnumerator
        qualifiedName: System.Collections.Generic.Dictionary<System.String, System.Single>.GetEnumerator
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.Dictionary`2.GetEnumerator
        name: GetEnumerator
        nameWithType: Dictionary(Of String, Single).GetEnumerator
        qualifiedName: System.Collections.Generic.Dictionary(Of System.String, System.Single).GetEnumerator
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.Dictionary`2.GetEnumerator
    parent: System.Collections.Generic.Dictionary{System.String,System.Single}
    commentId: M:System.Collections.Generic.Dictionary{System.String,System.Single}.GetEnumerator
  ? System.Collections.Generic.Dictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TValue}}#GetEnumerator
  : name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TValue}}#GetEnumerator
        name: IEnumerable<KeyValuePair<TKey, TValue>>.GetEnumerator
        nameWithType: Dictionary<TKey, TValue>.IEnumerable<KeyValuePair<TKey, TValue>>.GetEnumerator
        qualifiedName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>.GetEnumerator
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TValue}}#GetEnumerator
        name: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator
        nameWithType: Dictionary(Of TKey, TValue).System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator
        qualifiedName: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TValue}}#GetEnumerator
  ? System.Collections.Generic.Dictionary{System.String,System.Single}.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TValue}}#GetEnumerator
  : name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TValue}}#GetEnumerator
        name: IEnumerable<KeyValuePair<String, Single>>.GetEnumerator
        nameWithType: Dictionary<String, Single>.IEnumerable<KeyValuePair<String, Single>>.GetEnumerator
        qualifiedName: System.Collections.Generic.Dictionary<System.String, System.Single>.System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, System.Single>>.GetEnumerator
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TValue}}#GetEnumerator
        name: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator
        nameWithType: Dictionary(Of String, Single).System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator
        qualifiedName: System.Collections.Generic.Dictionary(Of System.String, System.Single).System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.Dictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TValue}}#GetEnumerator
    parent: System.Collections.Generic.Dictionary{System.String,System.Single}
    commentId: M:System.Collections.Generic.Dictionary{System.String,System.Single}.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TValue}}#GetEnumerator
  ? System.Collections.Generic.Dictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  : name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
        name: GetObjectData
        nameWithType: Dictionary<TKey, TValue>.GetObjectData
        qualifiedName: System.Collections.Generic.Dictionary<TKey, TValue>.GetObjectData
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Runtime.Serialization.SerializationInfo
        name: SerializationInfo
        nameWithType: SerializationInfo
        qualifiedName: System.Runtime.Serialization.SerializationInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Runtime.Serialization.StreamingContext
        name: StreamingContext
        nameWithType: StreamingContext
        qualifiedName: System.Runtime.Serialization.StreamingContext
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.Dictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
        name: GetObjectData
        nameWithType: Dictionary(Of TKey, TValue).GetObjectData
        qualifiedName: System.Collections.Generic.Dictionary(Of TKey, TValue).GetObjectData
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Runtime.Serialization.SerializationInfo
        name: SerializationInfo
        nameWithType: SerializationInfo
        qualifiedName: System.Runtime.Serialization.SerializationInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Runtime.Serialization.StreamingContext
        name: StreamingContext
        nameWithType: StreamingContext
        qualifiedName: System.Runtime.Serialization.StreamingContext
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.Dictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  ? System.Collections.Generic.Dictionary{System.String,System.Single}.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  : name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
        name: GetObjectData
        nameWithType: Dictionary<String, Single>.GetObjectData
        qualifiedName: System.Collections.Generic.Dictionary<System.String, System.Single>.GetObjectData
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Runtime.Serialization.SerializationInfo
        name: SerializationInfo
        nameWithType: SerializationInfo
        qualifiedName: System.Runtime.Serialization.SerializationInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Runtime.Serialization.StreamingContext
        name: StreamingContext
        nameWithType: StreamingContext
        qualifiedName: System.Runtime.Serialization.StreamingContext
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.Dictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
        name: GetObjectData
        nameWithType: Dictionary(Of String, Single).GetObjectData
        qualifiedName: System.Collections.Generic.Dictionary(Of System.String, System.Single).GetObjectData
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Runtime.Serialization.SerializationInfo
        name: SerializationInfo
        nameWithType: SerializationInfo
        qualifiedName: System.Runtime.Serialization.SerializationInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Runtime.Serialization.StreamingContext
        name: StreamingContext
        nameWithType: StreamingContext
        qualifiedName: System.Runtime.Serialization.StreamingContext
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.Dictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    parent: System.Collections.Generic.Dictionary{System.String,System.Single}
    commentId: M:System.Collections.Generic.Dictionary{System.String,System.Single}.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  System.Collections.Generic.Dictionary`2.OnDeserialization(System.Object):
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2.OnDeserialization(System.Object)
        name: OnDeserialization
        nameWithType: Dictionary<TKey, TValue>.OnDeserialization
        qualifiedName: System.Collections.Generic.Dictionary<TKey, TValue>.OnDeserialization
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.Dictionary`2.OnDeserialization(System.Object)
        name: OnDeserialization
        nameWithType: Dictionary(Of TKey, TValue).OnDeserialization
        qualifiedName: System.Collections.Generic.Dictionary(Of TKey, TValue).OnDeserialization
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.Dictionary`2.OnDeserialization(System.Object)
  System.Collections.Generic.Dictionary{System.String,System.Single}.OnDeserialization(System.Object):
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2.OnDeserialization(System.Object)
        name: OnDeserialization
        nameWithType: Dictionary<String, Single>.OnDeserialization
        qualifiedName: System.Collections.Generic.Dictionary<System.String, System.Single>.OnDeserialization
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.Dictionary`2.OnDeserialization(System.Object)
        name: OnDeserialization
        nameWithType: Dictionary(Of String, Single).OnDeserialization
        qualifiedName: System.Collections.Generic.Dictionary(Of System.String, System.Single).OnDeserialization
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.Dictionary`2.OnDeserialization(System.Object)
    parent: System.Collections.Generic.Dictionary{System.String,System.Single}
    commentId: M:System.Collections.Generic.Dictionary{System.String,System.Single}.OnDeserialization(System.Object)
  System.Collections.Generic.Dictionary`2.Remove(`0):
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2.Remove(`0)
        name: Remove
        nameWithType: Dictionary<TKey, TValue>.Remove
        qualifiedName: System.Collections.Generic.Dictionary<TKey, TValue>.Remove
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: TKey
        nameWithType: TKey
        qualifiedName: TKey
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.Dictionary`2.Remove(`0)
        name: Remove
        nameWithType: Dictionary(Of TKey, TValue).Remove
        qualifiedName: System.Collections.Generic.Dictionary(Of TKey, TValue).Remove
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: TKey
        nameWithType: TKey
        qualifiedName: TKey
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.Dictionary`2.Remove(`0)
  System.Collections.Generic.Dictionary{System.String,System.Single}.Remove(System.String):
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2.Remove(`0)
        name: Remove
        nameWithType: Dictionary<String, Single>.Remove
        qualifiedName: System.Collections.Generic.Dictionary<System.String, System.Single>.Remove
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.Dictionary`2.Remove(`0)
        name: Remove
        nameWithType: Dictionary(Of String, Single).Remove
        qualifiedName: System.Collections.Generic.Dictionary(Of System.String, System.Single).Remove
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.Dictionary`2.Remove(`0)
    parent: System.Collections.Generic.Dictionary{System.String,System.Single}
    commentId: M:System.Collections.Generic.Dictionary{System.String,System.Single}.Remove(System.String)
  System.Collections.Generic.Dictionary`2.Remove(`0,`1@):
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2.Remove(`0,`1@)
        name: Remove
        nameWithType: Dictionary<TKey, TValue>.Remove
        qualifiedName: System.Collections.Generic.Dictionary<TKey, TValue>.Remove
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: TKey
        nameWithType: TKey
        qualifiedName: TKey
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TValue
        nameWithType: TValue
        qualifiedName: TValue
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.Dictionary`2.Remove(`0,`1@)
        name: Remove
        nameWithType: Dictionary(Of TKey, TValue).Remove
        qualifiedName: System.Collections.Generic.Dictionary(Of TKey, TValue).Remove
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: TKey
        nameWithType: TKey
        qualifiedName: TKey
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TValue
        nameWithType: TValue
        qualifiedName: TValue
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.Dictionary`2.Remove(`0,`1@)
  System.Collections.Generic.Dictionary{System.String,System.Single}.Remove(System.String,System.Single@):
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2.Remove(`0,`1@)
        name: Remove
        nameWithType: Dictionary<String, Single>.Remove
        qualifiedName: System.Collections.Generic.Dictionary<System.String, System.Single>.Remove
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.Dictionary`2.Remove(`0,`1@)
        name: Remove
        nameWithType: Dictionary(Of String, Single).Remove
        qualifiedName: System.Collections.Generic.Dictionary(Of System.String, System.Single).Remove
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.Dictionary`2.Remove(`0,`1@)
    parent: System.Collections.Generic.Dictionary{System.String,System.Single}
    commentId: M:System.Collections.Generic.Dictionary{System.String,System.Single}.Remove(System.String,System.Single@)
  System.Collections.Generic.Dictionary`2.TryGetValue(`0,`1@):
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2.TryGetValue(`0,`1@)
        name: TryGetValue
        nameWithType: Dictionary<TKey, TValue>.TryGetValue
        qualifiedName: System.Collections.Generic.Dictionary<TKey, TValue>.TryGetValue
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: TKey
        nameWithType: TKey
        qualifiedName: TKey
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TValue
        nameWithType: TValue
        qualifiedName: TValue
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.Dictionary`2.TryGetValue(`0,`1@)
        name: TryGetValue
        nameWithType: Dictionary(Of TKey, TValue).TryGetValue
        qualifiedName: System.Collections.Generic.Dictionary(Of TKey, TValue).TryGetValue
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: TKey
        nameWithType: TKey
        qualifiedName: TKey
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TValue
        nameWithType: TValue
        qualifiedName: TValue
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.Dictionary`2.TryGetValue(`0,`1@)
  System.Collections.Generic.Dictionary{System.String,System.Single}.TryGetValue(System.String,System.Single@):
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2.TryGetValue(`0,`1@)
        name: TryGetValue
        nameWithType: Dictionary<String, Single>.TryGetValue
        qualifiedName: System.Collections.Generic.Dictionary<System.String, System.Single>.TryGetValue
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.Dictionary`2.TryGetValue(`0,`1@)
        name: TryGetValue
        nameWithType: Dictionary(Of String, Single).TryGetValue
        qualifiedName: System.Collections.Generic.Dictionary(Of System.String, System.Single).TryGetValue
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.Dictionary`2.TryGetValue(`0,`1@)
    parent: System.Collections.Generic.Dictionary{System.String,System.Single}
    commentId: M:System.Collections.Generic.Dictionary{System.String,System.Single}.TryGetValue(System.String,System.Single@)
  System.Collections.Generic.Dictionary`2.TryAdd(`0,`1):
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2.TryAdd(`0,`1)
        name: TryAdd
        nameWithType: Dictionary<TKey, TValue>.TryAdd
        qualifiedName: System.Collections.Generic.Dictionary<TKey, TValue>.TryAdd
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: TKey
        nameWithType: TKey
        qualifiedName: TKey
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TValue
        nameWithType: TValue
        qualifiedName: TValue
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.Dictionary`2.TryAdd(`0,`1)
        name: TryAdd
        nameWithType: Dictionary(Of TKey, TValue).TryAdd
        qualifiedName: System.Collections.Generic.Dictionary(Of TKey, TValue).TryAdd
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: TKey
        nameWithType: TKey
        qualifiedName: TKey
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TValue
        nameWithType: TValue
        qualifiedName: TValue
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.Dictionary`2.TryAdd(`0,`1)
  System.Collections.Generic.Dictionary{System.String,System.Single}.TryAdd(System.String,System.Single):
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2.TryAdd(`0,`1)
        name: TryAdd
        nameWithType: Dictionary<String, Single>.TryAdd
        qualifiedName: System.Collections.Generic.Dictionary<System.String, System.Single>.TryAdd
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.Dictionary`2.TryAdd(`0,`1)
        name: TryAdd
        nameWithType: Dictionary(Of String, Single).TryAdd
        qualifiedName: System.Collections.Generic.Dictionary(Of System.String, System.Single).TryAdd
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.Dictionary`2.TryAdd(`0,`1)
    parent: System.Collections.Generic.Dictionary{System.String,System.Single}
    commentId: M:System.Collections.Generic.Dictionary{System.String,System.Single}.TryAdd(System.String,System.Single)
  ? System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)
  : name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)
        name: ICollection<KeyValuePair<TKey, TValue>>.CopyTo
        nameWithType: Dictionary<TKey, TValue>.ICollection<KeyValuePair<TKey, TValue>>.CopyTo
        qualifiedName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.CopyTo
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.KeyValuePair`2
        name: KeyValuePair
        nameWithType: KeyValuePair
        qualifiedName: System.Collections.Generic.KeyValuePair
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TKey
        nameWithType: TKey
        qualifiedName: TKey
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TValue
        nameWithType: TValue
        qualifiedName: TValue
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)
        name: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo
        nameWithType: Dictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo
        qualifiedName: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.KeyValuePair`2
        name: KeyValuePair
        nameWithType: KeyValuePair
        qualifiedName: System.Collections.Generic.KeyValuePair
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TKey
        nameWithType: TKey
        qualifiedName: TKey
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TValue
        nameWithType: TValue
        qualifiedName: TValue
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ()
        nameWithType: ()
        qualifiedName: ()
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)
  ? System.Collections.Generic.Dictionary{System.String,System.Single}.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Single}[],System.Int32)
  : name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)
        name: ICollection<KeyValuePair<String, Single>>.CopyTo
        nameWithType: Dictionary<String, Single>.ICollection<KeyValuePair<String, Single>>.CopyTo
        qualifiedName: System.Collections.Generic.Dictionary<System.String, System.Single>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Single>>.CopyTo
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.KeyValuePair`2
        name: KeyValuePair
        nameWithType: KeyValuePair
        qualifiedName: System.Collections.Generic.KeyValuePair
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)
        name: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo
        nameWithType: Dictionary(Of String, Single).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo
        qualifiedName: System.Collections.Generic.Dictionary(Of System.String, System.Single).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.KeyValuePair`2
        name: KeyValuePair
        nameWithType: KeyValuePair
        qualifiedName: System.Collections.Generic.KeyValuePair
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ()
        nameWithType: ()
        qualifiedName: ()
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)
    parent: System.Collections.Generic.Dictionary{System.String,System.Single}
    commentId: M:System.Collections.Generic.Dictionary{System.String,System.Single}.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Single}[],System.Int32)
  System.Collections.Generic.Dictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32):
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
        name: ICollection.CopyTo
        nameWithType: Dictionary<TKey, TValue>.ICollection.CopyTo
        qualifiedName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.ICollection.CopyTo
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Array
        name: Array
        nameWithType: Array
        qualifiedName: System.Array
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
        name: System.Collections.ICollection.CopyTo
        nameWithType: Dictionary(Of TKey, TValue).System.Collections.ICollection.CopyTo
        qualifiedName: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.ICollection.CopyTo
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Array
        name: Array
        nameWithType: Array
        qualifiedName: System.Array
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  ? System.Collections.Generic.Dictionary{System.String,System.Single}.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  : name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
        name: ICollection.CopyTo
        nameWithType: Dictionary<String, Single>.ICollection.CopyTo
        qualifiedName: System.Collections.Generic.Dictionary<System.String, System.Single>.System.Collections.ICollection.CopyTo
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Array
        name: Array
        nameWithType: Array
        qualifiedName: System.Array
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
        name: System.Collections.ICollection.CopyTo
        nameWithType: Dictionary(Of String, Single).System.Collections.ICollection.CopyTo
        qualifiedName: System.Collections.Generic.Dictionary(Of System.String, System.Single).System.Collections.ICollection.CopyTo
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Array
        name: Array
        nameWithType: Array
        qualifiedName: System.Array
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.Dictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
    parent: System.Collections.Generic.Dictionary{System.String,System.Single}
    commentId: M:System.Collections.Generic.Dictionary{System.String,System.Single}.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  System.Collections.Generic.Dictionary`2.System#Collections#IEnumerable#GetEnumerator:
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#IEnumerable#GetEnumerator
        name: IEnumerable.GetEnumerator
        nameWithType: Dictionary<TKey, TValue>.IEnumerable.GetEnumerator
        qualifiedName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.IEnumerable.GetEnumerator
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#IEnumerable#GetEnumerator
        name: System.Collections.IEnumerable.GetEnumerator
        nameWithType: Dictionary(Of TKey, TValue).System.Collections.IEnumerable.GetEnumerator
        qualifiedName: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.IEnumerable.GetEnumerator
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.Dictionary`2.System#Collections#IEnumerable#GetEnumerator
  System.Collections.Generic.Dictionary{System.String,System.Single}.System#Collections#IEnumerable#GetEnumerator:
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#IEnumerable#GetEnumerator
        name: IEnumerable.GetEnumerator
        nameWithType: Dictionary<String, Single>.IEnumerable.GetEnumerator
        qualifiedName: System.Collections.Generic.Dictionary<System.String, System.Single>.System.Collections.IEnumerable.GetEnumerator
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#IEnumerable#GetEnumerator
        name: System.Collections.IEnumerable.GetEnumerator
        nameWithType: Dictionary(Of String, Single).System.Collections.IEnumerable.GetEnumerator
        qualifiedName: System.Collections.Generic.Dictionary(Of System.String, System.Single).System.Collections.IEnumerable.GetEnumerator
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.Dictionary`2.System#Collections#IEnumerable#GetEnumerator
    parent: System.Collections.Generic.Dictionary{System.String,System.Single}
    commentId: M:System.Collections.Generic.Dictionary{System.String,System.Single}.System#Collections#IEnumerable#GetEnumerator
  System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#get_Item(System.Object):
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#get_Item(System.Object)
        name: IDictionary.get_Item
        nameWithType: Dictionary<TKey, TValue>.IDictionary.get_Item
        qualifiedName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.IDictionary.get_Item
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#get_Item(System.Object)
        name: System.Collections.IDictionary.get_Item
        nameWithType: Dictionary(Of TKey, TValue).System.Collections.IDictionary.get_Item
        qualifiedName: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.IDictionary.get_Item
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#get_Item(System.Object)
  System.Collections.Generic.Dictionary{System.String,System.Single}.System#Collections#IDictionary#get_Item(System.Object):
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#get_Item(System.Object)
        name: IDictionary.get_Item
        nameWithType: Dictionary<String, Single>.IDictionary.get_Item
        qualifiedName: System.Collections.Generic.Dictionary<System.String, System.Single>.System.Collections.IDictionary.get_Item
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#get_Item(System.Object)
        name: System.Collections.IDictionary.get_Item
        nameWithType: Dictionary(Of String, Single).System.Collections.IDictionary.get_Item
        qualifiedName: System.Collections.Generic.Dictionary(Of System.String, System.Single).System.Collections.IDictionary.get_Item
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#get_Item(System.Object)
    parent: System.Collections.Generic.Dictionary{System.String,System.Single}
    commentId: M:System.Collections.Generic.Dictionary{System.String,System.Single}.System#Collections#IDictionary#get_Item(System.Object)
  System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#set_Item(System.Object,System.Object):
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#set_Item(System.Object,System.Object)
        name: IDictionary.set_Item
        nameWithType: Dictionary<TKey, TValue>.IDictionary.set_Item
        qualifiedName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.IDictionary.set_Item
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#set_Item(System.Object,System.Object)
        name: System.Collections.IDictionary.set_Item
        nameWithType: Dictionary(Of TKey, TValue).System.Collections.IDictionary.set_Item
        qualifiedName: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.IDictionary.set_Item
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#set_Item(System.Object,System.Object)
  ? System.Collections.Generic.Dictionary{System.String,System.Single}.System#Collections#IDictionary#set_Item(System.Object,System.Object)
  : name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#set_Item(System.Object,System.Object)
        name: IDictionary.set_Item
        nameWithType: Dictionary<String, Single>.IDictionary.set_Item
        qualifiedName: System.Collections.Generic.Dictionary<System.String, System.Single>.System.Collections.IDictionary.set_Item
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#set_Item(System.Object,System.Object)
        name: System.Collections.IDictionary.set_Item
        nameWithType: Dictionary(Of String, Single).System.Collections.IDictionary.set_Item
        qualifiedName: System.Collections.Generic.Dictionary(Of System.String, System.Single).System.Collections.IDictionary.set_Item
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#set_Item(System.Object,System.Object)
    parent: System.Collections.Generic.Dictionary{System.String,System.Single}
    commentId: M:System.Collections.Generic.Dictionary{System.String,System.Single}.System#Collections#IDictionary#set_Item(System.Object,System.Object)
  System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object):
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)
        name: IDictionary.Add
        nameWithType: Dictionary<TKey, TValue>.IDictionary.Add
        qualifiedName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.IDictionary.Add
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)
        name: System.Collections.IDictionary.Add
        nameWithType: Dictionary(Of TKey, TValue).System.Collections.IDictionary.Add
        qualifiedName: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.IDictionary.Add
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)
  ? System.Collections.Generic.Dictionary{System.String,System.Single}.System#Collections#IDictionary#Add(System.Object,System.Object)
  : name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)
        name: IDictionary.Add
        nameWithType: Dictionary<String, Single>.IDictionary.Add
        qualifiedName: System.Collections.Generic.Dictionary<System.String, System.Single>.System.Collections.IDictionary.Add
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)
        name: System.Collections.IDictionary.Add
        nameWithType: Dictionary(Of String, Single).System.Collections.IDictionary.Add
        qualifiedName: System.Collections.Generic.Dictionary(Of System.String, System.Single).System.Collections.IDictionary.Add
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)
    parent: System.Collections.Generic.Dictionary{System.String,System.Single}
    commentId: M:System.Collections.Generic.Dictionary{System.String,System.Single}.System#Collections#IDictionary#Add(System.Object,System.Object)
  System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Contains(System.Object):
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Contains(System.Object)
        name: IDictionary.Contains
        nameWithType: Dictionary<TKey, TValue>.IDictionary.Contains
        qualifiedName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.IDictionary.Contains
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Contains(System.Object)
        name: System.Collections.IDictionary.Contains
        nameWithType: Dictionary(Of TKey, TValue).System.Collections.IDictionary.Contains
        qualifiedName: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.IDictionary.Contains
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Contains(System.Object)
  System.Collections.Generic.Dictionary{System.String,System.Single}.System#Collections#IDictionary#Contains(System.Object):
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Contains(System.Object)
        name: IDictionary.Contains
        nameWithType: Dictionary<String, Single>.IDictionary.Contains
        qualifiedName: System.Collections.Generic.Dictionary<System.String, System.Single>.System.Collections.IDictionary.Contains
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Contains(System.Object)
        name: System.Collections.IDictionary.Contains
        nameWithType: Dictionary(Of String, Single).System.Collections.IDictionary.Contains
        qualifiedName: System.Collections.Generic.Dictionary(Of System.String, System.Single).System.Collections.IDictionary.Contains
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Contains(System.Object)
    parent: System.Collections.Generic.Dictionary{System.String,System.Single}
    commentId: M:System.Collections.Generic.Dictionary{System.String,System.Single}.System#Collections#IDictionary#Contains(System.Object)
  System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#GetEnumerator:
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#GetEnumerator
        name: IDictionary.GetEnumerator
        nameWithType: Dictionary<TKey, TValue>.IDictionary.GetEnumerator
        qualifiedName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.IDictionary.GetEnumerator
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#GetEnumerator
        name: System.Collections.IDictionary.GetEnumerator
        nameWithType: Dictionary(Of TKey, TValue).System.Collections.IDictionary.GetEnumerator
        qualifiedName: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.IDictionary.GetEnumerator
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#GetEnumerator
  System.Collections.Generic.Dictionary{System.String,System.Single}.System#Collections#IDictionary#GetEnumerator:
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#GetEnumerator
        name: IDictionary.GetEnumerator
        nameWithType: Dictionary<String, Single>.IDictionary.GetEnumerator
        qualifiedName: System.Collections.Generic.Dictionary<System.String, System.Single>.System.Collections.IDictionary.GetEnumerator
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#GetEnumerator
        name: System.Collections.IDictionary.GetEnumerator
        nameWithType: Dictionary(Of String, Single).System.Collections.IDictionary.GetEnumerator
        qualifiedName: System.Collections.Generic.Dictionary(Of System.String, System.Single).System.Collections.IDictionary.GetEnumerator
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#GetEnumerator
    parent: System.Collections.Generic.Dictionary{System.String,System.Single}
    commentId: M:System.Collections.Generic.Dictionary{System.String,System.Single}.System#Collections#IDictionary#GetEnumerator
  System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Remove(System.Object):
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Remove(System.Object)
        name: IDictionary.Remove
        nameWithType: Dictionary<TKey, TValue>.IDictionary.Remove
        qualifiedName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.IDictionary.Remove
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Remove(System.Object)
        name: System.Collections.IDictionary.Remove
        nameWithType: Dictionary(Of TKey, TValue).System.Collections.IDictionary.Remove
        qualifiedName: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.IDictionary.Remove
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Remove(System.Object)
  System.Collections.Generic.Dictionary{System.String,System.Single}.System#Collections#IDictionary#Remove(System.Object):
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Remove(System.Object)
        name: IDictionary.Remove
        nameWithType: Dictionary<String, Single>.IDictionary.Remove
        qualifiedName: System.Collections.Generic.Dictionary<System.String, System.Single>.System.Collections.IDictionary.Remove
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Remove(System.Object)
        name: System.Collections.IDictionary.Remove
        nameWithType: Dictionary(Of String, Single).System.Collections.IDictionary.Remove
        qualifiedName: System.Collections.Generic.Dictionary(Of System.String, System.Single).System.Collections.IDictionary.Remove
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Remove(System.Object)
    parent: System.Collections.Generic.Dictionary{System.String,System.Single}
    commentId: M:System.Collections.Generic.Dictionary{System.String,System.Single}.System#Collections#IDictionary#Remove(System.Object)
  System.Collections.Generic.Dictionary`2.Comparer:
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2.Comparer
        name: Comparer
        nameWithType: Dictionary<TKey, TValue>.Comparer
        qualifiedName: System.Collections.Generic.Dictionary<TKey, TValue>.Comparer
        isExternal: true
      VB:
      - id: System.Collections.Generic.Dictionary`2.Comparer
        name: Comparer
        nameWithType: Dictionary(Of TKey, TValue).Comparer
        qualifiedName: System.Collections.Generic.Dictionary(Of TKey, TValue).Comparer
        isExternal: true
    isDefinition: true
    commentId: P:System.Collections.Generic.Dictionary`2.Comparer
  System.Collections.Generic.Dictionary{System.String,System.Single}.Comparer:
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2.Comparer
        name: Comparer
        nameWithType: Dictionary<String, Single>.Comparer
        qualifiedName: System.Collections.Generic.Dictionary<System.String, System.Single>.Comparer
        isExternal: true
      VB:
      - id: System.Collections.Generic.Dictionary`2.Comparer
        name: Comparer
        nameWithType: Dictionary(Of String, Single).Comparer
        qualifiedName: System.Collections.Generic.Dictionary(Of System.String, System.Single).Comparer
        isExternal: true
    isDefinition: false
    definition: System.Collections.Generic.Dictionary`2.Comparer
    parent: System.Collections.Generic.Dictionary{System.String,System.Single}
    commentId: P:System.Collections.Generic.Dictionary{System.String,System.Single}.Comparer
  System.Collections.Generic.Dictionary`2.Count:
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2.Count
        name: Count
        nameWithType: Dictionary<TKey, TValue>.Count
        qualifiedName: System.Collections.Generic.Dictionary<TKey, TValue>.Count
        isExternal: true
      VB:
      - id: System.Collections.Generic.Dictionary`2.Count
        name: Count
        nameWithType: Dictionary(Of TKey, TValue).Count
        qualifiedName: System.Collections.Generic.Dictionary(Of TKey, TValue).Count
        isExternal: true
    isDefinition: true
    commentId: P:System.Collections.Generic.Dictionary`2.Count
  System.Collections.Generic.Dictionary{System.String,System.Single}.Count:
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2.Count
        name: Count
        nameWithType: Dictionary<String, Single>.Count
        qualifiedName: System.Collections.Generic.Dictionary<System.String, System.Single>.Count
        isExternal: true
      VB:
      - id: System.Collections.Generic.Dictionary`2.Count
        name: Count
        nameWithType: Dictionary(Of String, Single).Count
        qualifiedName: System.Collections.Generic.Dictionary(Of System.String, System.Single).Count
        isExternal: true
    isDefinition: false
    definition: System.Collections.Generic.Dictionary`2.Count
    parent: System.Collections.Generic.Dictionary{System.String,System.Single}
    commentId: P:System.Collections.Generic.Dictionary{System.String,System.Single}.Count
  System.Collections.Generic.Dictionary`2.Keys:
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2.Keys
        name: Keys
        nameWithType: Dictionary<TKey, TValue>.Keys
        qualifiedName: System.Collections.Generic.Dictionary<TKey, TValue>.Keys
        isExternal: true
      VB:
      - id: System.Collections.Generic.Dictionary`2.Keys
        name: Keys
        nameWithType: Dictionary(Of TKey, TValue).Keys
        qualifiedName: System.Collections.Generic.Dictionary(Of TKey, TValue).Keys
        isExternal: true
    isDefinition: true
    commentId: P:System.Collections.Generic.Dictionary`2.Keys
  System.Collections.Generic.Dictionary{System.String,System.Single}.Keys:
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2.Keys
        name: Keys
        nameWithType: Dictionary<String, Single>.Keys
        qualifiedName: System.Collections.Generic.Dictionary<System.String, System.Single>.Keys
        isExternal: true
      VB:
      - id: System.Collections.Generic.Dictionary`2.Keys
        name: Keys
        nameWithType: Dictionary(Of String, Single).Keys
        qualifiedName: System.Collections.Generic.Dictionary(Of System.String, System.Single).Keys
        isExternal: true
    isDefinition: false
    definition: System.Collections.Generic.Dictionary`2.Keys
    parent: System.Collections.Generic.Dictionary{System.String,System.Single}
    commentId: P:System.Collections.Generic.Dictionary{System.String,System.Single}.Keys
  System.Collections.Generic.Dictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Keys:
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Keys
        name: IDictionary<TKey, TValue>.Keys
        nameWithType: Dictionary<TKey, TValue>.IDictionary<TKey, TValue>.Keys
        qualifiedName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.Generic.IDictionary<TKey, TValue>.Keys
        isExternal: true
      VB:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Keys
        name: System.Collections.Generic.IDictionary<TKey,TValue>.Keys
        nameWithType: Dictionary(Of TKey, TValue).System.Collections.Generic.IDictionary<TKey,TValue>.Keys
        qualifiedName: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.Generic.IDictionary<TKey,TValue>.Keys
        isExternal: true
    isDefinition: true
    commentId: P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Keys
  System.Collections.Generic.Dictionary{System.String,System.Single}.System#Collections#Generic#IDictionary{TKey,TValue}#Keys:
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Keys
        name: IDictionary<String, Single>.Keys
        nameWithType: Dictionary<String, Single>.IDictionary<String, Single>.Keys
        qualifiedName: System.Collections.Generic.Dictionary<System.String, System.Single>.System.Collections.Generic.IDictionary<System.String, System.Single>.Keys
        isExternal: true
      VB:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Keys
        name: System.Collections.Generic.IDictionary<TKey,TValue>.Keys
        nameWithType: Dictionary(Of String, Single).System.Collections.Generic.IDictionary<TKey,TValue>.Keys
        qualifiedName: System.Collections.Generic.Dictionary(Of System.String, System.Single).System.Collections.Generic.IDictionary<TKey,TValue>.Keys
        isExternal: true
    isDefinition: false
    definition: System.Collections.Generic.Dictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Keys
    parent: System.Collections.Generic.Dictionary{System.String,System.Single}
    commentId: P:System.Collections.Generic.Dictionary{System.String,System.Single}.System#Collections#Generic#IDictionary{TKey,TValue}#Keys
  System.Collections.Generic.Dictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Keys:
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Keys
        name: IReadOnlyDictionary<TKey, TValue>.Keys
        nameWithType: Dictionary<TKey, TValue>.IReadOnlyDictionary<TKey, TValue>.Keys
        qualifiedName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>.Keys
        isExternal: true
      VB:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Keys
        name: System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Keys
        nameWithType: Dictionary(Of TKey, TValue).System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Keys
        qualifiedName: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Keys
        isExternal: true
    isDefinition: true
    commentId: P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Keys
  ? System.Collections.Generic.Dictionary{System.String,System.Single}.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Keys
  : name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Keys
        name: IReadOnlyDictionary<String, Single>.Keys
        nameWithType: Dictionary<String, Single>.IReadOnlyDictionary<String, Single>.Keys
        qualifiedName: System.Collections.Generic.Dictionary<System.String, System.Single>.System.Collections.Generic.IReadOnlyDictionary<System.String, System.Single>.Keys
        isExternal: true
      VB:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Keys
        name: System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Keys
        nameWithType: Dictionary(Of String, Single).System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Keys
        qualifiedName: System.Collections.Generic.Dictionary(Of System.String, System.Single).System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Keys
        isExternal: true
    isDefinition: false
    definition: System.Collections.Generic.Dictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Keys
    parent: System.Collections.Generic.Dictionary{System.String,System.Single}
    commentId: P:System.Collections.Generic.Dictionary{System.String,System.Single}.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Keys
  System.Collections.Generic.Dictionary`2.Values:
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2.Values
        name: Values
        nameWithType: Dictionary<TKey, TValue>.Values
        qualifiedName: System.Collections.Generic.Dictionary<TKey, TValue>.Values
        isExternal: true
      VB:
      - id: System.Collections.Generic.Dictionary`2.Values
        name: Values
        nameWithType: Dictionary(Of TKey, TValue).Values
        qualifiedName: System.Collections.Generic.Dictionary(Of TKey, TValue).Values
        isExternal: true
    isDefinition: true
    commentId: P:System.Collections.Generic.Dictionary`2.Values
  System.Collections.Generic.Dictionary{System.String,System.Single}.Values:
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2.Values
        name: Values
        nameWithType: Dictionary<String, Single>.Values
        qualifiedName: System.Collections.Generic.Dictionary<System.String, System.Single>.Values
        isExternal: true
      VB:
      - id: System.Collections.Generic.Dictionary`2.Values
        name: Values
        nameWithType: Dictionary(Of String, Single).Values
        qualifiedName: System.Collections.Generic.Dictionary(Of System.String, System.Single).Values
        isExternal: true
    isDefinition: false
    definition: System.Collections.Generic.Dictionary`2.Values
    parent: System.Collections.Generic.Dictionary{System.String,System.Single}
    commentId: P:System.Collections.Generic.Dictionary{System.String,System.Single}.Values
  System.Collections.Generic.Dictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Values:
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Values
        name: IDictionary<TKey, TValue>.Values
        nameWithType: Dictionary<TKey, TValue>.IDictionary<TKey, TValue>.Values
        qualifiedName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.Generic.IDictionary<TKey, TValue>.Values
        isExternal: true
      VB:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Values
        name: System.Collections.Generic.IDictionary<TKey,TValue>.Values
        nameWithType: Dictionary(Of TKey, TValue).System.Collections.Generic.IDictionary<TKey,TValue>.Values
        qualifiedName: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.Generic.IDictionary<TKey,TValue>.Values
        isExternal: true
    isDefinition: true
    commentId: P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Values
  System.Collections.Generic.Dictionary{System.String,System.Single}.System#Collections#Generic#IDictionary{TKey,TValue}#Values:
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Values
        name: IDictionary<String, Single>.Values
        nameWithType: Dictionary<String, Single>.IDictionary<String, Single>.Values
        qualifiedName: System.Collections.Generic.Dictionary<System.String, System.Single>.System.Collections.Generic.IDictionary<System.String, System.Single>.Values
        isExternal: true
      VB:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Values
        name: System.Collections.Generic.IDictionary<TKey,TValue>.Values
        nameWithType: Dictionary(Of String, Single).System.Collections.Generic.IDictionary<TKey,TValue>.Values
        qualifiedName: System.Collections.Generic.Dictionary(Of System.String, System.Single).System.Collections.Generic.IDictionary<TKey,TValue>.Values
        isExternal: true
    isDefinition: false
    definition: System.Collections.Generic.Dictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Values
    parent: System.Collections.Generic.Dictionary{System.String,System.Single}
    commentId: P:System.Collections.Generic.Dictionary{System.String,System.Single}.System#Collections#Generic#IDictionary{TKey,TValue}#Values
  System.Collections.Generic.Dictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Values:
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Values
        name: IReadOnlyDictionary<TKey, TValue>.Values
        nameWithType: Dictionary<TKey, TValue>.IReadOnlyDictionary<TKey, TValue>.Values
        qualifiedName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>.Values
        isExternal: true
      VB:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Values
        name: System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Values
        nameWithType: Dictionary(Of TKey, TValue).System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Values
        qualifiedName: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Values
        isExternal: true
    isDefinition: true
    commentId: P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Values
  ? System.Collections.Generic.Dictionary{System.String,System.Single}.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Values
  : name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Values
        name: IReadOnlyDictionary<String, Single>.Values
        nameWithType: Dictionary<String, Single>.IReadOnlyDictionary<String, Single>.Values
        qualifiedName: System.Collections.Generic.Dictionary<System.String, System.Single>.System.Collections.Generic.IReadOnlyDictionary<System.String, System.Single>.Values
        isExternal: true
      VB:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Values
        name: System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Values
        nameWithType: Dictionary(Of String, Single).System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Values
        qualifiedName: System.Collections.Generic.Dictionary(Of System.String, System.Single).System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Values
        isExternal: true
    isDefinition: false
    definition: System.Collections.Generic.Dictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Values
    parent: System.Collections.Generic.Dictionary{System.String,System.Single}
    commentId: P:System.Collections.Generic.Dictionary{System.String,System.Single}.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Values
  System.Collections.Generic.Dictionary`2.Item(`0):
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2.Item(`0)
        name: Item
        nameWithType: Dictionary<TKey, TValue>.Item
        qualifiedName: System.Collections.Generic.Dictionary<TKey, TValue>.Item
        isExternal: true
      - name: '['
        nameWithType: '['
        qualifiedName: '['
      - name: TKey
        nameWithType: TKey
        qualifiedName: TKey
      - name: ']'
        nameWithType: ']'
        qualifiedName: ']'
      VB:
      - id: System.Collections.Generic.Dictionary`2.Item(`0)
        name: Item
        nameWithType: Dictionary(Of TKey, TValue).Item
        qualifiedName: System.Collections.Generic.Dictionary(Of TKey, TValue).Item
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: TKey
        nameWithType: TKey
        qualifiedName: TKey
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: P:System.Collections.Generic.Dictionary`2.Item(`0)
  System.Collections.Generic.Dictionary{System.String,System.Single}.Item(System.String):
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2.Item(`0)
        name: Item
        nameWithType: Dictionary<String, Single>.Item
        qualifiedName: System.Collections.Generic.Dictionary<System.String, System.Single>.Item
        isExternal: true
      - name: '['
        nameWithType: '['
        qualifiedName: '['
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ']'
        nameWithType: ']'
        qualifiedName: ']'
      VB:
      - id: System.Collections.Generic.Dictionary`2.Item(`0)
        name: Item
        nameWithType: Dictionary(Of String, Single).Item
        qualifiedName: System.Collections.Generic.Dictionary(Of System.String, System.Single).Item
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.Dictionary`2.Item(`0)
    parent: System.Collections.Generic.Dictionary{System.String,System.Single}
    commentId: P:System.Collections.Generic.Dictionary{System.String,System.Single}.Item(System.String)
  ? System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly
  : name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly
        name: ICollection<KeyValuePair<TKey, TValue>>.IsReadOnly
        nameWithType: Dictionary<TKey, TValue>.ICollection<KeyValuePair<TKey, TValue>>.IsReadOnly
        qualifiedName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.IsReadOnly
        isExternal: true
      VB:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly
        name: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly
        nameWithType: Dictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly
        qualifiedName: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly
        isExternal: true
    isDefinition: true
    commentId: P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly
  ? System.Collections.Generic.Dictionary{System.String,System.Single}.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly
  : name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly
        name: ICollection<KeyValuePair<String, Single>>.IsReadOnly
        nameWithType: Dictionary<String, Single>.ICollection<KeyValuePair<String, Single>>.IsReadOnly
        qualifiedName: System.Collections.Generic.Dictionary<System.String, System.Single>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Single>>.IsReadOnly
        isExternal: true
      VB:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly
        name: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly
        nameWithType: Dictionary(Of String, Single).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly
        qualifiedName: System.Collections.Generic.Dictionary(Of System.String, System.Single).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly
        isExternal: true
    isDefinition: false
    definition: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly
    parent: System.Collections.Generic.Dictionary{System.String,System.Single}
    commentId: P:System.Collections.Generic.Dictionary{System.String,System.Single}.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly
  System.Collections.Generic.Dictionary`2.System#Collections#ICollection#IsSynchronized:
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#ICollection#IsSynchronized
        name: ICollection.IsSynchronized
        nameWithType: Dictionary<TKey, TValue>.ICollection.IsSynchronized
        qualifiedName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.ICollection.IsSynchronized
        isExternal: true
      VB:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#ICollection#IsSynchronized
        name: System.Collections.ICollection.IsSynchronized
        nameWithType: Dictionary(Of TKey, TValue).System.Collections.ICollection.IsSynchronized
        qualifiedName: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.ICollection.IsSynchronized
        isExternal: true
    isDefinition: true
    commentId: P:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#IsSynchronized
  System.Collections.Generic.Dictionary{System.String,System.Single}.System#Collections#ICollection#IsSynchronized:
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#ICollection#IsSynchronized
        name: ICollection.IsSynchronized
        nameWithType: Dictionary<String, Single>.ICollection.IsSynchronized
        qualifiedName: System.Collections.Generic.Dictionary<System.String, System.Single>.System.Collections.ICollection.IsSynchronized
        isExternal: true
      VB:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#ICollection#IsSynchronized
        name: System.Collections.ICollection.IsSynchronized
        nameWithType: Dictionary(Of String, Single).System.Collections.ICollection.IsSynchronized
        qualifiedName: System.Collections.Generic.Dictionary(Of System.String, System.Single).System.Collections.ICollection.IsSynchronized
        isExternal: true
    isDefinition: false
    definition: System.Collections.Generic.Dictionary`2.System#Collections#ICollection#IsSynchronized
    parent: System.Collections.Generic.Dictionary{System.String,System.Single}
    commentId: P:System.Collections.Generic.Dictionary{System.String,System.Single}.System#Collections#ICollection#IsSynchronized
  System.Collections.Generic.Dictionary`2.System#Collections#ICollection#SyncRoot:
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#ICollection#SyncRoot
        name: ICollection.SyncRoot
        nameWithType: Dictionary<TKey, TValue>.ICollection.SyncRoot
        qualifiedName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.ICollection.SyncRoot
        isExternal: true
      VB:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#ICollection#SyncRoot
        name: System.Collections.ICollection.SyncRoot
        nameWithType: Dictionary(Of TKey, TValue).System.Collections.ICollection.SyncRoot
        qualifiedName: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.ICollection.SyncRoot
        isExternal: true
    isDefinition: true
    commentId: P:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#SyncRoot
  System.Collections.Generic.Dictionary{System.String,System.Single}.System#Collections#ICollection#SyncRoot:
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#ICollection#SyncRoot
        name: ICollection.SyncRoot
        nameWithType: Dictionary<String, Single>.ICollection.SyncRoot
        qualifiedName: System.Collections.Generic.Dictionary<System.String, System.Single>.System.Collections.ICollection.SyncRoot
        isExternal: true
      VB:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#ICollection#SyncRoot
        name: System.Collections.ICollection.SyncRoot
        nameWithType: Dictionary(Of String, Single).System.Collections.ICollection.SyncRoot
        qualifiedName: System.Collections.Generic.Dictionary(Of System.String, System.Single).System.Collections.ICollection.SyncRoot
        isExternal: true
    isDefinition: false
    definition: System.Collections.Generic.Dictionary`2.System#Collections#ICollection#SyncRoot
    parent: System.Collections.Generic.Dictionary{System.String,System.Single}
    commentId: P:System.Collections.Generic.Dictionary{System.String,System.Single}.System#Collections#ICollection#SyncRoot
  System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#IsFixedSize:
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#IsFixedSize
        name: IDictionary.IsFixedSize
        nameWithType: Dictionary<TKey, TValue>.IDictionary.IsFixedSize
        qualifiedName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.IDictionary.IsFixedSize
        isExternal: true
      VB:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#IsFixedSize
        name: System.Collections.IDictionary.IsFixedSize
        nameWithType: Dictionary(Of TKey, TValue).System.Collections.IDictionary.IsFixedSize
        qualifiedName: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.IDictionary.IsFixedSize
        isExternal: true
    isDefinition: true
    commentId: P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#IsFixedSize
  System.Collections.Generic.Dictionary{System.String,System.Single}.System#Collections#IDictionary#IsFixedSize:
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#IsFixedSize
        name: IDictionary.IsFixedSize
        nameWithType: Dictionary<String, Single>.IDictionary.IsFixedSize
        qualifiedName: System.Collections.Generic.Dictionary<System.String, System.Single>.System.Collections.IDictionary.IsFixedSize
        isExternal: true
      VB:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#IsFixedSize
        name: System.Collections.IDictionary.IsFixedSize
        nameWithType: Dictionary(Of String, Single).System.Collections.IDictionary.IsFixedSize
        qualifiedName: System.Collections.Generic.Dictionary(Of System.String, System.Single).System.Collections.IDictionary.IsFixedSize
        isExternal: true
    isDefinition: false
    definition: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#IsFixedSize
    parent: System.Collections.Generic.Dictionary{System.String,System.Single}
    commentId: P:System.Collections.Generic.Dictionary{System.String,System.Single}.System#Collections#IDictionary#IsFixedSize
  System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#IsReadOnly:
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#IsReadOnly
        name: IDictionary.IsReadOnly
        nameWithType: Dictionary<TKey, TValue>.IDictionary.IsReadOnly
        qualifiedName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.IDictionary.IsReadOnly
        isExternal: true
      VB:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#IsReadOnly
        name: System.Collections.IDictionary.IsReadOnly
        nameWithType: Dictionary(Of TKey, TValue).System.Collections.IDictionary.IsReadOnly
        qualifiedName: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.IDictionary.IsReadOnly
        isExternal: true
    isDefinition: true
    commentId: P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#IsReadOnly
  System.Collections.Generic.Dictionary{System.String,System.Single}.System#Collections#IDictionary#IsReadOnly:
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#IsReadOnly
        name: IDictionary.IsReadOnly
        nameWithType: Dictionary<String, Single>.IDictionary.IsReadOnly
        qualifiedName: System.Collections.Generic.Dictionary<System.String, System.Single>.System.Collections.IDictionary.IsReadOnly
        isExternal: true
      VB:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#IsReadOnly
        name: System.Collections.IDictionary.IsReadOnly
        nameWithType: Dictionary(Of String, Single).System.Collections.IDictionary.IsReadOnly
        qualifiedName: System.Collections.Generic.Dictionary(Of System.String, System.Single).System.Collections.IDictionary.IsReadOnly
        isExternal: true
    isDefinition: false
    definition: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#IsReadOnly
    parent: System.Collections.Generic.Dictionary{System.String,System.Single}
    commentId: P:System.Collections.Generic.Dictionary{System.String,System.Single}.System#Collections#IDictionary#IsReadOnly
  System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Keys:
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Keys
        name: IDictionary.Keys
        nameWithType: Dictionary<TKey, TValue>.IDictionary.Keys
        qualifiedName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.IDictionary.Keys
        isExternal: true
      VB:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Keys
        name: System.Collections.IDictionary.Keys
        nameWithType: Dictionary(Of TKey, TValue).System.Collections.IDictionary.Keys
        qualifiedName: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.IDictionary.Keys
        isExternal: true
    isDefinition: true
    commentId: P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Keys
  System.Collections.Generic.Dictionary{System.String,System.Single}.System#Collections#IDictionary#Keys:
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Keys
        name: IDictionary.Keys
        nameWithType: Dictionary<String, Single>.IDictionary.Keys
        qualifiedName: System.Collections.Generic.Dictionary<System.String, System.Single>.System.Collections.IDictionary.Keys
        isExternal: true
      VB:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Keys
        name: System.Collections.IDictionary.Keys
        nameWithType: Dictionary(Of String, Single).System.Collections.IDictionary.Keys
        qualifiedName: System.Collections.Generic.Dictionary(Of System.String, System.Single).System.Collections.IDictionary.Keys
        isExternal: true
    isDefinition: false
    definition: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Keys
    parent: System.Collections.Generic.Dictionary{System.String,System.Single}
    commentId: P:System.Collections.Generic.Dictionary{System.String,System.Single}.System#Collections#IDictionary#Keys
  System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Values:
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Values
        name: IDictionary.Values
        nameWithType: Dictionary<TKey, TValue>.IDictionary.Values
        qualifiedName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.IDictionary.Values
        isExternal: true
      VB:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Values
        name: System.Collections.IDictionary.Values
        nameWithType: Dictionary(Of TKey, TValue).System.Collections.IDictionary.Values
        qualifiedName: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.IDictionary.Values
        isExternal: true
    isDefinition: true
    commentId: P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Values
  System.Collections.Generic.Dictionary{System.String,System.Single}.System#Collections#IDictionary#Values:
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Values
        name: IDictionary.Values
        nameWithType: Dictionary<String, Single>.IDictionary.Values
        qualifiedName: System.Collections.Generic.Dictionary<System.String, System.Single>.System.Collections.IDictionary.Values
        isExternal: true
      VB:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Values
        name: System.Collections.IDictionary.Values
        nameWithType: Dictionary(Of String, Single).System.Collections.IDictionary.Values
        qualifiedName: System.Collections.Generic.Dictionary(Of System.String, System.Single).System.Collections.IDictionary.Values
        isExternal: true
    isDefinition: false
    definition: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Values
    parent: System.Collections.Generic.Dictionary{System.String,System.Single}
    commentId: P:System.Collections.Generic.Dictionary{System.String,System.Single}.System#Collections#IDictionary#Values
  System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Item(System.Object):
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Item(System.Object)
        name: IDictionary.Item
        nameWithType: Dictionary<TKey, TValue>.IDictionary.Item
        qualifiedName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.IDictionary.Item
        isExternal: true
      - name: '['
        nameWithType: '['
        qualifiedName: '['
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ']'
        nameWithType: ']'
        qualifiedName: ']'
      VB:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Item(System.Object)
        name: System.Collections.IDictionary.Item
        nameWithType: Dictionary(Of TKey, TValue).System.Collections.IDictionary.Item
        qualifiedName: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.IDictionary.Item
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Item(System.Object)
  System.Collections.Generic.Dictionary{System.String,System.Single}.System#Collections#IDictionary#Item(System.Object):
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Item(System.Object)
        name: IDictionary.Item
        nameWithType: Dictionary<String, Single>.IDictionary.Item
        qualifiedName: System.Collections.Generic.Dictionary<System.String, System.Single>.System.Collections.IDictionary.Item
        isExternal: true
      - name: '['
        nameWithType: '['
        qualifiedName: '['
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ']'
        nameWithType: ']'
        qualifiedName: ']'
      VB:
      - id: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Item(System.Object)
        name: System.Collections.IDictionary.Item
        nameWithType: Dictionary(Of String, Single).System.Collections.IDictionary.Item
        qualifiedName: System.Collections.Generic.Dictionary(Of System.String, System.Single).System.Collections.IDictionary.Item
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Item(System.Object)
    parent: System.Collections.Generic.Dictionary{System.String,System.Single}
    commentId: P:System.Collections.Generic.Dictionary{System.String,System.Single}.System#Collections#IDictionary#Item(System.Object)
  System.Collections.Generic.IDictionary`2:
    name:
      CSharp:
      - id: System.Collections.Generic.IDictionary`2
        name: IDictionary
        nameWithType: IDictionary
        qualifiedName: System.Collections.Generic.IDictionary
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TKey
        nameWithType: TKey
        qualifiedName: TKey
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TValue
        nameWithType: TValue
        qualifiedName: TValue
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.IDictionary`2
        name: IDictionary
        nameWithType: IDictionary
        qualifiedName: System.Collections.Generic.IDictionary
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TKey
        nameWithType: TKey
        qualifiedName: TKey
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TValue
        nameWithType: TValue
        qualifiedName: TValue
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Collections.Generic.IDictionary`2
  System.Collections.Generic.IDictionary{System.String,System.Single}:
    name:
      CSharp:
      - id: System.Collections.Generic.IDictionary`2
        name: IDictionary
        nameWithType: IDictionary
        qualifiedName: System.Collections.Generic.IDictionary
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.IDictionary`2
        name: IDictionary
        nameWithType: IDictionary
        qualifiedName: System.Collections.Generic.IDictionary
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.IDictionary`2
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.IDictionary{System.String,System.Single}
  System.Collections.Generic.ICollection`1:
    name:
      CSharp:
      - id: System.Collections.Generic.ICollection`1
        name: ICollection
        nameWithType: ICollection
        qualifiedName: System.Collections.Generic.ICollection
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.ICollection`1
        name: ICollection
        nameWithType: ICollection
        qualifiedName: System.Collections.Generic.ICollection
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Collections.Generic.ICollection`1
  System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Single}}:
    name:
      CSharp:
      - id: System.Collections.Generic.ICollection`1
        name: ICollection
        nameWithType: ICollection
        qualifiedName: System.Collections.Generic.ICollection
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Collections.Generic.KeyValuePair`2
        name: KeyValuePair
        nameWithType: KeyValuePair
        qualifiedName: System.Collections.Generic.KeyValuePair
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.ICollection`1
        name: ICollection
        nameWithType: ICollection
        qualifiedName: System.Collections.Generic.ICollection
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Collections.Generic.KeyValuePair`2
        name: KeyValuePair
        nameWithType: KeyValuePair
        qualifiedName: System.Collections.Generic.KeyValuePair
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.ICollection`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Single}}
  System.Collections:
    name:
      CSharp:
      - name: System.Collections
        nameWithType: System.Collections
        qualifiedName: System.Collections
      VB:
      - name: System.Collections
        nameWithType: System.Collections
        qualifiedName: System.Collections
    isDefinition: true
    commentId: N:System.Collections
  System.Collections.IDictionary:
    name:
      CSharp:
      - id: System.Collections.IDictionary
        name: IDictionary
        nameWithType: IDictionary
        qualifiedName: System.Collections.IDictionary
        isExternal: true
      VB:
      - id: System.Collections.IDictionary
        name: IDictionary
        nameWithType: IDictionary
        qualifiedName: System.Collections.IDictionary
        isExternal: true
    isDefinition: true
    parent: System.Collections
    commentId: T:System.Collections.IDictionary
  System.Collections.ICollection:
    name:
      CSharp:
      - id: System.Collections.ICollection
        name: ICollection
        nameWithType: ICollection
        qualifiedName: System.Collections.ICollection
        isExternal: true
      VB:
      - id: System.Collections.ICollection
        name: ICollection
        nameWithType: ICollection
        qualifiedName: System.Collections.ICollection
        isExternal: true
    isDefinition: true
    parent: System.Collections
    commentId: T:System.Collections.ICollection
  System.Collections.Generic.IReadOnlyDictionary`2:
    name:
      CSharp:
      - id: System.Collections.Generic.IReadOnlyDictionary`2
        name: IReadOnlyDictionary
        nameWithType: IReadOnlyDictionary
        qualifiedName: System.Collections.Generic.IReadOnlyDictionary
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TKey
        nameWithType: TKey
        qualifiedName: TKey
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TValue
        nameWithType: TValue
        qualifiedName: TValue
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.IReadOnlyDictionary`2
        name: IReadOnlyDictionary
        nameWithType: IReadOnlyDictionary
        qualifiedName: System.Collections.Generic.IReadOnlyDictionary
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TKey
        nameWithType: TKey
        qualifiedName: TKey
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TValue
        nameWithType: TValue
        qualifiedName: TValue
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Collections.Generic.IReadOnlyDictionary`2
  System.Collections.Generic.IReadOnlyDictionary{System.String,System.Single}:
    name:
      CSharp:
      - id: System.Collections.Generic.IReadOnlyDictionary`2
        name: IReadOnlyDictionary
        nameWithType: IReadOnlyDictionary
        qualifiedName: System.Collections.Generic.IReadOnlyDictionary
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.IReadOnlyDictionary`2
        name: IReadOnlyDictionary
        nameWithType: IReadOnlyDictionary
        qualifiedName: System.Collections.Generic.IReadOnlyDictionary
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.IReadOnlyDictionary`2
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.IReadOnlyDictionary{System.String,System.Single}
  System.Collections.Generic.IReadOnlyCollection`1:
    name:
      CSharp:
      - id: System.Collections.Generic.IReadOnlyCollection`1
        name: IReadOnlyCollection
        nameWithType: IReadOnlyCollection
        qualifiedName: System.Collections.Generic.IReadOnlyCollection
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.IReadOnlyCollection`1
        name: IReadOnlyCollection
        nameWithType: IReadOnlyCollection
        qualifiedName: System.Collections.Generic.IReadOnlyCollection
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Collections.Generic.IReadOnlyCollection`1
  System.Collections.Generic.IReadOnlyCollection{System.Collections.Generic.KeyValuePair{System.String,System.Single}}:
    name:
      CSharp:
      - id: System.Collections.Generic.IReadOnlyCollection`1
        name: IReadOnlyCollection
        nameWithType: IReadOnlyCollection
        qualifiedName: System.Collections.Generic.IReadOnlyCollection
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Collections.Generic.KeyValuePair`2
        name: KeyValuePair
        nameWithType: KeyValuePair
        qualifiedName: System.Collections.Generic.KeyValuePair
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.IReadOnlyCollection`1
        name: IReadOnlyCollection
        nameWithType: IReadOnlyCollection
        qualifiedName: System.Collections.Generic.IReadOnlyCollection
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Collections.Generic.KeyValuePair`2
        name: KeyValuePair
        nameWithType: KeyValuePair
        qualifiedName: System.Collections.Generic.KeyValuePair
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.IReadOnlyCollection`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.IReadOnlyCollection{System.Collections.Generic.KeyValuePair{System.String,System.Single}}
  System.Collections.Generic.IEnumerable`1:
    name:
      CSharp:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Collections.Generic.IEnumerable`1
  System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Single}}:
    name:
      CSharp:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Collections.Generic.KeyValuePair`2
        name: KeyValuePair
        nameWithType: KeyValuePair
        qualifiedName: System.Collections.Generic.KeyValuePair
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Collections.Generic.KeyValuePair`2
        name: KeyValuePair
        nameWithType: KeyValuePair
        qualifiedName: System.Collections.Generic.KeyValuePair
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.IEnumerable`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Single}}
  System.Collections.IEnumerable:
    name:
      CSharp:
      - id: System.Collections.IEnumerable
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.IEnumerable
        isExternal: true
      VB:
      - id: System.Collections.IEnumerable
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.IEnumerable
        isExternal: true
    isDefinition: true
    parent: System.Collections
    commentId: T:System.Collections.IEnumerable
  System.Runtime.Serialization:
    name:
      CSharp:
      - name: System.Runtime.Serialization
        nameWithType: System.Runtime.Serialization
        qualifiedName: System.Runtime.Serialization
      VB:
      - name: System.Runtime.Serialization
        nameWithType: System.Runtime.Serialization
        qualifiedName: System.Runtime.Serialization
    isDefinition: true
    commentId: N:System.Runtime.Serialization
  System.Runtime.Serialization.ISerializable:
    name:
      CSharp:
      - id: System.Runtime.Serialization.ISerializable
        name: ISerializable
        nameWithType: ISerializable
        qualifiedName: System.Runtime.Serialization.ISerializable
        isExternal: true
      VB:
      - id: System.Runtime.Serialization.ISerializable
        name: ISerializable
        nameWithType: ISerializable
        qualifiedName: System.Runtime.Serialization.ISerializable
        isExternal: true
    isDefinition: true
    parent: System.Runtime.Serialization
    commentId: T:System.Runtime.Serialization.ISerializable
  System.Runtime.Serialization.IDeserializationCallback:
    name:
      CSharp:
      - id: System.Runtime.Serialization.IDeserializationCallback
        name: IDeserializationCallback
        nameWithType: IDeserializationCallback
        qualifiedName: System.Runtime.Serialization.IDeserializationCallback
        isExternal: true
      VB:
      - id: System.Runtime.Serialization.IDeserializationCallback
        name: IDeserializationCallback
        nameWithType: IDeserializationCallback
        qualifiedName: System.Runtime.Serialization.IDeserializationCallback
        isExternal: true
    isDefinition: true
    parent: System.Runtime.Serialization
    commentId: T:System.Runtime.Serialization.IDeserializationCallback
  ISerializationCallbackReceiver:
    name:
      CSharp:
      - id: ISerializationCallbackReceiver
        name: ISerializationCallbackReceiver
        nameWithType: ISerializationCallbackReceiver
        qualifiedName: ISerializationCallbackReceiver
        isExternal: true
      VB:
      - id: ISerializationCallbackReceiver
        name: ISerializationCallbackReceiver
        nameWithType: ISerializationCallbackReceiver
        qualifiedName: ISerializationCallbackReceiver
        isExternal: true
    isDefinition: true
    commentId: '!:ISerializationCallbackReceiver'
  Unity.MLAgents.ResetParameters.OnBeforeSerialize*:
    name:
      CSharp:
      - id: Unity.MLAgents.ResetParameters.OnBeforeSerialize*
        name: OnBeforeSerialize
        nameWithType: ResetParameters.OnBeforeSerialize
        qualifiedName: Unity.MLAgents.ResetParameters.OnBeforeSerialize
      VB:
      - id: Unity.MLAgents.ResetParameters.OnBeforeSerialize*
        name: OnBeforeSerialize
        nameWithType: ResetParameters.OnBeforeSerialize
        qualifiedName: Unity.MLAgents.ResetParameters.OnBeforeSerialize
    isDefinition: true
    commentId: Overload:Unity.MLAgents.ResetParameters.OnBeforeSerialize
  Unity.MLAgents.ResetParameters.OnAfterDeserialize*:
    name:
      CSharp:
      - id: Unity.MLAgents.ResetParameters.OnAfterDeserialize*
        name: OnAfterDeserialize
        nameWithType: ResetParameters.OnAfterDeserialize
        qualifiedName: Unity.MLAgents.ResetParameters.OnAfterDeserialize
      VB:
      - id: Unity.MLAgents.ResetParameters.OnAfterDeserialize*
        name: OnAfterDeserialize
        nameWithType: ResetParameters.OnAfterDeserialize
        qualifiedName: Unity.MLAgents.ResetParameters.OnAfterDeserialize
    isDefinition: true
    commentId: Overload:Unity.MLAgents.ResetParameters.OnAfterDeserialize
  Unity.MLAgents.ResetParameters.ResetParameter:
    name:
      CSharp:
      - id: Unity.MLAgents.ResetParameters.ResetParameter
        name: ResetParameters.ResetParameter
        nameWithType: ResetParameters.ResetParameter
        qualifiedName: Unity.MLAgents.ResetParameters.ResetParameter
      VB:
      - id: Unity.MLAgents.ResetParameters.ResetParameter
        name: ResetParameters.ResetParameter
        nameWithType: ResetParameters.ResetParameter
        qualifiedName: Unity.MLAgents.ResetParameters.ResetParameter
    isDefinition: true
    commentId: T:Unity.MLAgents.ResetParameters.ResetParameter
  System.Exception:
    name:
      CSharp:
      - id: System.Exception
        name: Exception
        nameWithType: Exception
        qualifiedName: System.Exception
        isExternal: true
      VB:
      - id: System.Exception
        name: Exception
        nameWithType: Exception
        qualifiedName: System.Exception
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Exception
  System.Exception.GetBaseException:
    name:
      CSharp:
      - id: System.Exception.GetBaseException
        name: GetBaseException
        nameWithType: Exception.GetBaseException
        qualifiedName: System.Exception.GetBaseException
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Exception.GetBaseException
        name: GetBaseException
        nameWithType: Exception.GetBaseException
        qualifiedName: System.Exception.GetBaseException
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Exception
    commentId: M:System.Exception.GetBaseException
  System.Exception.ToString:
    name:
      CSharp:
      - id: System.Exception.ToString
        name: ToString
        nameWithType: Exception.ToString
        qualifiedName: System.Exception.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Exception.ToString
        name: ToString
        nameWithType: Exception.ToString
        qualifiedName: System.Exception.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Exception
    commentId: M:System.Exception.ToString
  System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext):
    name:
      CSharp:
      - id: System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
        name: GetObjectData
        nameWithType: Exception.GetObjectData
        qualifiedName: System.Exception.GetObjectData
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Runtime.Serialization.SerializationInfo
        name: SerializationInfo
        nameWithType: SerializationInfo
        qualifiedName: System.Runtime.Serialization.SerializationInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Runtime.Serialization.StreamingContext
        name: StreamingContext
        nameWithType: StreamingContext
        qualifiedName: System.Runtime.Serialization.StreamingContext
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
        name: GetObjectData
        nameWithType: Exception.GetObjectData
        qualifiedName: System.Exception.GetObjectData
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Runtime.Serialization.SerializationInfo
        name: SerializationInfo
        nameWithType: SerializationInfo
        qualifiedName: System.Runtime.Serialization.SerializationInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Runtime.Serialization.StreamingContext
        name: StreamingContext
        nameWithType: StreamingContext
        qualifiedName: System.Runtime.Serialization.StreamingContext
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Exception
    commentId: M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  System.Exception.GetType:
    name:
      CSharp:
      - id: System.Exception.GetType
        name: GetType
        nameWithType: Exception.GetType
        qualifiedName: System.Exception.GetType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Exception.GetType
        name: GetType
        nameWithType: Exception.GetType
        qualifiedName: System.Exception.GetType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Exception
    commentId: M:System.Exception.GetType
  System.Exception.Message:
    name:
      CSharp:
      - id: System.Exception.Message
        name: Message
        nameWithType: Exception.Message
        qualifiedName: System.Exception.Message
        isExternal: true
      VB:
      - id: System.Exception.Message
        name: Message
        nameWithType: Exception.Message
        qualifiedName: System.Exception.Message
        isExternal: true
    isDefinition: true
    parent: System.Exception
    commentId: P:System.Exception.Message
  System.Exception.Data:
    name:
      CSharp:
      - id: System.Exception.Data
        name: Data
        nameWithType: Exception.Data
        qualifiedName: System.Exception.Data
        isExternal: true
      VB:
      - id: System.Exception.Data
        name: Data
        nameWithType: Exception.Data
        qualifiedName: System.Exception.Data
        isExternal: true
    isDefinition: true
    parent: System.Exception
    commentId: P:System.Exception.Data
  System.Exception.InnerException:
    name:
      CSharp:
      - id: System.Exception.InnerException
        name: InnerException
        nameWithType: Exception.InnerException
        qualifiedName: System.Exception.InnerException
        isExternal: true
      VB:
      - id: System.Exception.InnerException
        name: InnerException
        nameWithType: Exception.InnerException
        qualifiedName: System.Exception.InnerException
        isExternal: true
    isDefinition: true
    parent: System.Exception
    commentId: P:System.Exception.InnerException
  System.Exception.TargetSite:
    name:
      CSharp:
      - id: System.Exception.TargetSite
        name: TargetSite
        nameWithType: Exception.TargetSite
        qualifiedName: System.Exception.TargetSite
        isExternal: true
      VB:
      - id: System.Exception.TargetSite
        name: TargetSite
        nameWithType: Exception.TargetSite
        qualifiedName: System.Exception.TargetSite
        isExternal: true
    isDefinition: true
    parent: System.Exception
    commentId: P:System.Exception.TargetSite
  System.Exception.StackTrace:
    name:
      CSharp:
      - id: System.Exception.StackTrace
        name: StackTrace
        nameWithType: Exception.StackTrace
        qualifiedName: System.Exception.StackTrace
        isExternal: true
      VB:
      - id: System.Exception.StackTrace
        name: StackTrace
        nameWithType: Exception.StackTrace
        qualifiedName: System.Exception.StackTrace
        isExternal: true
    isDefinition: true
    parent: System.Exception
    commentId: P:System.Exception.StackTrace
  System.Exception.HelpLink:
    name:
      CSharp:
      - id: System.Exception.HelpLink
        name: HelpLink
        nameWithType: Exception.HelpLink
        qualifiedName: System.Exception.HelpLink
        isExternal: true
      VB:
      - id: System.Exception.HelpLink
        name: HelpLink
        nameWithType: Exception.HelpLink
        qualifiedName: System.Exception.HelpLink
        isExternal: true
    isDefinition: true
    parent: System.Exception
    commentId: P:System.Exception.HelpLink
  System.Exception.Source:
    name:
      CSharp:
      - id: System.Exception.Source
        name: Source
        nameWithType: Exception.Source
        qualifiedName: System.Exception.Source
        isExternal: true
      VB:
      - id: System.Exception.Source
        name: Source
        nameWithType: Exception.Source
        qualifiedName: System.Exception.Source
        isExternal: true
    isDefinition: true
    parent: System.Exception
    commentId: P:System.Exception.Source
  System.Exception.HResult:
    name:
      CSharp:
      - id: System.Exception.HResult
        name: HResult
        nameWithType: Exception.HResult
        qualifiedName: System.Exception.HResult
        isExternal: true
      VB:
      - id: System.Exception.HResult
        name: HResult
        nameWithType: Exception.HResult
        qualifiedName: System.Exception.HResult
        isExternal: true
    isDefinition: true
    parent: System.Exception
    commentId: P:System.Exception.HResult
  System.Exception.SerializeObjectState:
    name:
      CSharp:
      - id: System.Exception.SerializeObjectState
        name: SerializeObjectState
        nameWithType: Exception.SerializeObjectState
        qualifiedName: System.Exception.SerializeObjectState
        isExternal: true
      VB:
      - id: System.Exception.SerializeObjectState
        name: SerializeObjectState
        nameWithType: Exception.SerializeObjectState
        qualifiedName: System.Exception.SerializeObjectState
        isExternal: true
    isDefinition: true
    parent: System.Exception
    commentId: E:System.Exception.SerializeObjectState
  System.Runtime.InteropServices:
    name:
      CSharp:
      - name: System.Runtime.InteropServices
        nameWithType: System.Runtime.InteropServices
        qualifiedName: System.Runtime.InteropServices
      VB:
      - name: System.Runtime.InteropServices
        nameWithType: System.Runtime.InteropServices
        qualifiedName: System.Runtime.InteropServices
    isDefinition: true
    commentId: N:System.Runtime.InteropServices
  System.Runtime.InteropServices._Exception:
    name:
      CSharp:
      - id: System.Runtime.InteropServices._Exception
        name: _Exception
        nameWithType: _Exception
        qualifiedName: System.Runtime.InteropServices._Exception
        isExternal: true
      VB:
      - id: System.Runtime.InteropServices._Exception
        name: _Exception
        nameWithType: _Exception
        qualifiedName: System.Runtime.InteropServices._Exception
        isExternal: true
    isDefinition: true
    parent: System.Runtime.InteropServices
    commentId: T:System.Runtime.InteropServices._Exception
  Unity.MLAgents.UnityAgentsException.#ctor*:
    name:
      CSharp:
      - id: Unity.MLAgents.UnityAgentsException.#ctor*
        name: UnityAgentsException
        nameWithType: UnityAgentsException.UnityAgentsException
        qualifiedName: Unity.MLAgents.UnityAgentsException.UnityAgentsException
      VB:
      - id: Unity.MLAgents.UnityAgentsException.#ctor*
        name: UnityAgentsException
        nameWithType: UnityAgentsException.UnityAgentsException
        qualifiedName: Unity.MLAgents.UnityAgentsException.UnityAgentsException
    isDefinition: true
    commentId: Overload:Unity.MLAgents.UnityAgentsException.#ctor
  System.Runtime.Serialization.SerializationInfo:
    name:
      CSharp:
      - id: System.Runtime.Serialization.SerializationInfo
        name: SerializationInfo
        nameWithType: SerializationInfo
        qualifiedName: System.Runtime.Serialization.SerializationInfo
        isExternal: true
      VB:
      - id: System.Runtime.Serialization.SerializationInfo
        name: SerializationInfo
        nameWithType: SerializationInfo
        qualifiedName: System.Runtime.Serialization.SerializationInfo
        isExternal: true
    isDefinition: true
    parent: System.Runtime.Serialization
    commentId: T:System.Runtime.Serialization.SerializationInfo
  System.Runtime.Serialization.StreamingContext:
    name:
      CSharp:
      - id: System.Runtime.Serialization.StreamingContext
        name: StreamingContext
        nameWithType: StreamingContext
        qualifiedName: System.Runtime.Serialization.StreamingContext
        isExternal: true
      VB:
      - id: System.Runtime.Serialization.StreamingContext
        name: StreamingContext
        nameWithType: StreamingContext
        qualifiedName: System.Runtime.Serialization.StreamingContext
        isExternal: true
    isDefinition: true
    parent: System.Runtime.Serialization
    commentId: T:System.Runtime.Serialization.StreamingContext
  Unity.MLAgents.UnityAgentsException:
    name:
      CSharp:
      - id: Unity.MLAgents.UnityAgentsException
        name: UnityAgentsException
        nameWithType: UnityAgentsException
        qualifiedName: Unity.MLAgents.UnityAgentsException
      VB:
      - id: Unity.MLAgents.UnityAgentsException
        name: UnityAgentsException
        nameWithType: UnityAgentsException
        qualifiedName: Unity.MLAgents.UnityAgentsException
    isDefinition: true
    commentId: T:Unity.MLAgents.UnityAgentsException
